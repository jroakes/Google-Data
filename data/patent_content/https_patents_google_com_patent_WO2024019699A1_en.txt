WO2024019699A1 - Extracting data from a blockchain - Google Patents
Extracting data from a blockchain Download PDFInfo
- Publication number
- WO2024019699A1 WO2024019699A1 PCT/US2022/037432 US2022037432W WO2024019699A1 WO 2024019699 A1 WO2024019699 A1 WO 2024019699A1 US 2022037432 W US2022037432 W US 2022037432W WO 2024019699 A1 WO2024019699 A1 WO 2024019699A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- data
- token
- blockchain
- fungible
- index
- Prior art date
Links
- 238000000034 method Methods 0.000 claims abstract description 266
- 238000012545 processing Methods 0.000 claims abstract description 96
- 230000009193 crawling Effects 0.000 claims description 21
- 238000003058 natural language processing Methods 0.000 claims description 6
- 230000008569 process Effects 0.000 description 64
- 238000010586 diagram Methods 0.000 description 47
- 230000009471 action Effects 0.000 description 31
- 238000010200 validation analysis Methods 0.000 description 31
- 230000015654 memory Effects 0.000 description 30
- 238000012549 training Methods 0.000 description 22
- 230000006870 function Effects 0.000 description 18
- 230000011218 segmentation Effects 0.000 description 18
- 238000004891 communication Methods 0.000 description 15
- 235000006679 Mentha X verticillata Nutrition 0.000 description 14
- 235000002899 Mentha suaveolens Nutrition 0.000 description 14
- 235000001636 Mentha x rotundifolia Nutrition 0.000 description 14
- 238000003860 storage Methods 0.000 description 14
- 238000001514 detection method Methods 0.000 description 13
- 238000013515 script Methods 0.000 description 13
- 238000013528 artificial neural network Methods 0.000 description 12
- 230000004044 response Effects 0.000 description 11
- 244000035744 Hura crepitans Species 0.000 description 10
- 238000013145 classification model Methods 0.000 description 9
- 238000013075 data extraction Methods 0.000 description 9
- 238000004458 analytical method Methods 0.000 description 8
- 238000012546 transfer Methods 0.000 description 8
- 238000001914 filtration Methods 0.000 description 7
- 238000009877 rendering Methods 0.000 description 7
- 230000002776 aggregation Effects 0.000 description 5
- 238000004220 aggregation Methods 0.000 description 5
- 230000008901 benefit Effects 0.000 description 5
- 230000008859 change Effects 0.000 description 5
- 230000003993 interaction Effects 0.000 description 5
- 238000013442 quality metrics Methods 0.000 description 5
- 230000000007 visual effect Effects 0.000 description 5
- 241000700605 Viruses Species 0.000 description 4
- 230000003190 augmentative effect Effects 0.000 description 4
- 230000033001 locomotion Effects 0.000 description 4
- 238000007781 pre-processing Methods 0.000 description 4
- 230000004043 responsiveness Effects 0.000 description 4
- 230000006978 adaptation Effects 0.000 description 3
- 230000004075 alteration Effects 0.000 description 3
- 230000004069 differentiation Effects 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 3
- 238000000605 extraction Methods 0.000 description 3
- 230000006872 improvement Effects 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 235000002767 Daucus carota Nutrition 0.000 description 2
- 244000000626 Daucus carota Species 0.000 description 2
- 230000004931 aggregating effect Effects 0.000 description 2
- 230000003416 augmentation Effects 0.000 description 2
- 230000000052 comparative effect Effects 0.000 description 2
- 239000002131 composite material Substances 0.000 description 2
- 238000013527 convolutional neural network Methods 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 238000010801 machine learning Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000008520 organization Effects 0.000 description 2
- 230000007480 spreading Effects 0.000 description 2
- 238000003892 spreading Methods 0.000 description 2
- 238000013519 translation Methods 0.000 description 2
- 238000007792 addition Methods 0.000 description 1
- 238000005267 amalgamation Methods 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000007906 compression Methods 0.000 description 1
- 230000006835 compression Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000013144 data compression Methods 0.000 description 1
- 238000013479 data entry Methods 0.000 description 1
- 238000013497 data interchange Methods 0.000 description 1
- 230000002950 deficient Effects 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 238000010191 image analysis Methods 0.000 description 1
- 239000000463 material Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000003340 mental effect Effects 0.000 description 1
- 238000005065 mining Methods 0.000 description 1
- 230000000116 mitigating effect Effects 0.000 description 1
- 230000035772 mutation Effects 0.000 description 1
- 238000010422 painting Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000000523 sample Substances 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 238000012800 visualization Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/13—File access structures, e.g. distributed indices
- G06F16/134—Distributed indices
Definitions
- the present disclosure relates generally to extracting token data from blockchain data. More particularly, the present disclosure relates to accessing a blockchain node, obtaining blockchain data, processing the blockchain data to identify token data, and extracting the token data.
- Search engines can receive search queries and provide search results listing web pages determined to be responsive to the search query.
- the search engine may crawl the web to determine web pages that have certain terms.
- the search results can be generally indicated with captions and/or text titles.
- the search results can include text results, video results, and image results.
- searching and identifying non-fungible token search results can be difficult. Searching for non-fungible tokens can be limited to finding general web pages that are associated with the different non-fungible tokens; however, the search engine may be unable to properly identify and verify the non-fungible token search result as a non-fungible token.
- the system can include one or more processors and one or more non-transitory computer- readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations.
- the operations can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non-fungible tokens.
- the operations can include storing the blockchain data in a blockchain log and processing the blockchain data to determine token data associated with a non-fungible token of the plurality of non-fungible tokens.
- the operations can include determining a portion of the token data comprises descriptive data.
- the descriptive data can be associated with the non-fungible token.
- the operations can include segmenting the descriptive data from the blockchain data.
- the operations can include storing the descriptive data.
- the descriptive data can include information determined to be associated with a particular identifying characteristic of a non-fungible token. The determination can be based on one or more standards associated with a structure of non-fungible token byte code.
- determining the portion of the token data includes the descriptive data can include parsing the token data to generate a plurality of segment datasets, processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications, and determining a particular segment dataset of the plurality of segment datasets includes descriptive data based on the plurality of segment classifications.
- the operations can include obtaining standard data.
- the standard data can be descriptive of one or more standards for token code.
- the token data can be determined based at least in part on the one or more standards.
- the code of the blockchain data can be associated with the one or more standards for token code.
- determining the portion of the token data includes the descriptive data can include determining token identification data associated with the non- fungible token, determining a plurality of transactions in the blockchain data based on the token identification data, and determining the portion of the token data based on the plurality of transactions.
- the descriptive data can include at least one of a digital asset associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non-fungible token, or creator identification associated with a creator of the non-fungible token.
- the method can include obtaining, by a computing system including one or more processors, blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non-fungible tokens.
- the method can include processing, by the computing system, the blockchain data to determine a link in the blockchain data.
- the method can include obtaining, by the computing system, a landing page associated with the link. In some implementations, the landing page can be obtained based on the link.
- the method can include determining, by the computing system, content data associated with the landing page.
- the content data can be associated with a non- fungible token of the plurality of non-fungible tokens.
- the method can include storing, by the computing system, the content data.
- the link can include at least one of a uniform resource identifier or a uniform resource locator.
- the landing page can include a digital asset.
- the digital asset can be a payload of a smart contract associated with the non-fungible token.
- the content data can include a preview of a digital asset associated with the non-fungible token.
- the method can include determining a second link based on the landing page and obtaining a second landing page based on the second link.
- the second landing page can include the content data.
- obtaining the blockchain data can include accessing a blockchain node.
- the blockchain node can be associated with a particular blockchain.
- Obtaining the blockchain data can include recursively crawling the particular blockchain.
- Another example aspect of the present disclosure is directed to one or more non- transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations.
- the operations can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non- fungible tokens.
- the operations can include processing the blockchain data to determine a first set of data associated with a particular non-fungible token of the plurality of non- fungible tokens.
- the operations can include processing the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non- fungible tokens and storing the first set of data and the second set of data.
- the operations can include segmenting the first set of data and the second set of data from the blockchain data.
- the first set of data can include freeform text data.
- the second set of data can include transactional data from an electronic ledger.
- the operations can include generating index data for the particular non-fungible token based on the first set of data and the second set of data.
- processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include crawling the blockchain data to identify link data and obtaining content data associated with the link data.
- processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include determining a plurality of datasets associated with non-fungible token transactions. The non-fungible token transactions can be associated with the particular non-fungible token.
- Processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non- fungible tokens can include generating the second set of data based on the plurality of datasets.
- Figure 1A depicts a block diagram of an example computing system that performs token data extraction and non-fungible token indexing according to example embodiments of the present disclosure.
- Figure IB depicts a block diagram of an example computing device that performs token data extraction and non-fungible token indexing according to example embodiments of the present disclosure.
- Figure 2 depicts a block diagram of an example token data extraction system according to example embodiments of the present disclosure.
- Figure 3 depicts a block diagram of an example token data aggregation system according to example embodiments of the present disclosure.
- Figure 4 depicts a block diagram of an example token data generation system according to example embodiments of the present disclosure.
- Figure 5 depicts a block diagram of an example synthetic representation generation system according to example embodiments of the present disclosure.
- Figure 6 depicts a flow chart diagram of an example method to perform token data obtainment according to example embodiments of the present disclosure.
- Figure 7 depicts a flow chart diagram of an example method to perform token data obtainment according to example embodiments of the present disclosure.
- Figure 8 depicts a flow chart diagram of an example method to perform token data obtainment according to example embodiments of the present disclosure.
- Figure 9A depicts a block diagram of an example computing system that performs token data obtainment and indexing according to example embodiments of the present disclosure.
- Figure 9B depicts a block diagram of an example computing device that performs token data obtainment and indexing according to example embodiments of the present disclosure.
- Figure 9C depicts a block diagram of an example computing system that performs token data obtainment and indexing according to example embodiments of the present disclosure.
- Figure 10 depicts a block diagram of an example indexing system according to example embodiments of the present disclosure.
- Figure 11 depicts a block diagram of an example index dataset according to example embodiments of the present disclosure.
- Figure 12 depicts a block diagram of an example search according to example embodiments of the present disclosure.
- Figure 13A depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- Figure 13B depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- Figure 13C depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- Figure 14 depicts a block diagram of an example token data identification system according to example embodiments of the present disclosure.
- Figure 15 depicts a block diagram of an example index filtering system according to example embodiments of the present disclosure.
- Figure 16 depicts a block diagram of an example index determination system according to example embodiments of the present disclosure.
- Figure 17 depicts a block diagram of an example quality determination system according to example embodiments of the present disclosure.
- Figure 18 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
- Figure 19 depicts a block diagram of an example index validity determination according to example embodiments of the present disclosure.
- Figure 20 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
- Figure 21 depicts a block diagram of an example search results page generation according to example embodiments of the present disclosure.
- the present disclosure is directed to systems and methods for extracting blockchain data for indexing.
- the systems and methods can leverage one or more processing techniques and/or one or more segmentation techniques to extract relevant data.
- the systems and methods can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non-fungible tokens.
- the blockchain data can be stored in a blockchain log.
- the blockchain data can be processed to determine token data associated with a non-fungible token of the plurality of non-fungible tokens.
- the systems and methods can include determining a portion of the token data includes descriptive data.
- the descriptive data can be associated with the non-fungible token.
- the descriptive data can be segmented from the blockchain data.
- the descriptive data can be stored.
- the systems and methods disclosed herein can be utilized for enabling a non- fungible token search via a search engine.
- a search query can be received.
- a search engine can process the search query and can determine a plurality of search results associated with the search query.
- one or more search results can be associated with non-fungible tokens.
- a particular search result can be associated with the index data.
- the one or more non-fungible token search results can be provided for display in a search results interface (e.g., a search results page).
- the one or more non-fungible token search results can be provided for display in a separate panel.
- the one or more non-fungible token search results can be provided for display adjacent to general search results.
- the one or more non-fungible token search results can be provided with one or more indicators indicating the non-fungible token nature (e.g., provided with one or more labels, flags, and/or tags).
- the one or more non- fungible token search results can be provided with a generated preview of the digital resource based on the index data.
- systems and methods disclosed herein can be utilized for Web3 profiles, for Web3 transactions, and/or for Web3 identification.
- the systems and methods can improve the search user interface and user experience by identifying and indexing relevant data that can be utilized for determining the non-fungible token is responsive to a search query. Additionally and/or alternatively, the index data can be leveraged to determine a ranking for the non-fungible token search result with relation to other search results. The systems and methods can be utilized to determine if a search result can be provided with a non-fungible token tag and/or can be given a ranking boost based on the association with an authenticated non-fungible token.
- the systems and methods can provide improved surfacing of digital resources of non-fungible tokens by identifying and extracting data that can be utilized to generate previews (e.g., graphical representations) of digital resources associated with respective non- fungible tokens.
- the previews can then be provided with the non-fungible token search result as a thumbnail and/or as a graphical representation of the non-fungible token.
- the systems and methods can obtain blockchain data from a blockchain computing system.
- the blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens.
- the blockchain data can be descriptive of blockchain transactions, which may be associated with a blockchain ledger.
- the code of the blockchain data can be associated with the one or more standards for token code.
- the blockchain data can be stored in a blockchain log.
- storing the blockchain data in a blockchain log can include preprocessing the blockchain data in a sandbox to determine if the blockchain data includes a bug, virus, and/or suspicious data.
- the preprocessing can utilize a sandbox environment to mitigate the spreading of any potential malicious content.
- the sandbox environment can be utilized to execute commands against a “running” node (e.g., a blockchain node that is disconnected from external networks).
- the blockchain data can be processed to determine token data associated with a non-fungible token of the plurality of non-fungible tokens.
- the determination can be based on the detection of a blockchain trigger event. Alternatively and/or additionally, the determination may be based on determining the token data is associated with a digital resource (e.g., a digital asset).
- the systems and methods can obtain standard data.
- the standard data can be descriptive of one or more standards for token code.
- the token data can be determined based at least in part on the one or more standards.
- the systems and methods can determine a portion of the token data includes descriptive data.
- the descriptive data can be associated with the non-fungible token.
- the descriptive data can include information determined to be associated with a particular identifying characteristic of a non-fungible token. The determination can be based on one or more standards associated with a structure of non-fungible token byte code.
- the descriptive data can include at least one of a digital resource (e.g., a digital asset) associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non-fungible token, or creator identification associated with a creator of the non-fungible token.
- a digital resource e.g., a digital asset
- determining the portion of the token data includes the descriptive data can include parsing the token data to generate a plurality of segment datasets, processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications, and determining a particular segment dataset of the plurality of segment datasets includes descriptive data based on the plurality of segment classifications.
- determining the portion of the token data includes the descriptive data can include determining token identification data associated with the non-fungible token, determining a plurality of transactions in the blockchain data based on the token identification data, and determining the portion of the token data based on the plurality of transactions.
- the descriptive data can include transaction data (e.g., data descriptive of transaction history of a non-fungible token).
- the transaction data can be associated with an electronic ledger.
- the blockchain data may include embedded images, pointers, executable code, and other data structures that may be identified as descriptive data, which can be segmented from the blockchain data and stored.
- the descriptive data can be segmented from the blockchain data.
- a plurality of data strings associated with a particular non-fungible token can be identified and segmented from the blockchain data.
- the plurality of data strings can then be aggregated and/or concatenated.
- the descriptive data can then be stored.
- the descriptive data can be stored in a database for retrieval and processing for future tasks.
- the storage may be locally and/or may be stored on a server computing system accessible by a plurality of users.
- the systems and methods can be utilized for identifying and obtaining content data associated with a digital resource (e.g., a digital asset) associated with a non-fungible token.
- the systems and methods can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non-fungible tokens.
- the blockchain data can be processed to determine a link in the blockchain data.
- a landing page associated with the link can be obtained.
- the landing page can be obtained based on the link.
- the systems and methods can determine content data associated with the landing page.
- the content data can be associated with a non-fungible token of the plurality of non-fungible tokens.
- the content data can be stored.
- the systems and methods can obtain blockchain data from a blockchain computing system.
- the blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens.
- the blockchain data can be obtained via a blockchain node.
- the blockchain data can be obtained from a repository separate from the blockchain computing system.
- obtaining the blockchain data can include accessing a blockchain node.
- the blockchain node can be associated with a particular blockchain.
- Obtaining the blockchain data can include recursively crawling the particular blockchain. The recursive crawling can occur at set intervals, trigger-based intervals (e.g., based on an event occurring (e.g., a social media post descriptive of a non-fungible token drop post)), and/or user-specified intervals.
- the systems and methods can in intervals and/or continuously obtain blockchain data from the blockchain in association with the metadata of one or more particular non-fungible tokens in order to update the data as changes are made.
- the blockchain data can be processed to determine a link in the blockchain data.
- the link can include at least one of a uniform resource identifier, an IPFS address, or a uniform resource locator.
- the systems and methods can obtain a landing page associated with the link.
- the landing page can be obtained based on the link.
- the landing page can include a digital resource (e.g., a digital asset).
- the digital resource e.g., the digital asset
- the digital resource can be a payload of a smart contract associated with the non-fungible token.
- Content data associated with the landing page can be obtained.
- the content data can be associated with a non-fungible token of the plurality of non-fungible tokens.
- the content data can include a preview of a digital asset associated with the non-fungible token.
- the systems and methods can include determining a second link based on the landing page and obtaining a second landing page based on the second link.
- the second landing page can include the content data.
- the content data can be stored.
- the content data can include a preview of the digital resource (e.g., the digital asset) associated with the non-fungible token.
- obtaining and/or generating image data based on a digital resource for a non-fungible token can include a nested crawl to follow links and navigate to different landing pages.
- the content data can include a synthetic representation associated with the digital resource, (e.g., a synthetic representation of what the digital resource looks and/or sounds like).
- the synthetic representation can be analogous to (e.g., similar to) a preview of the digital resource.
- the synthetic representation can be indexed to be provided as a search result (e.g., an image search result, a video search result, and/or an audio search result) that can be displayed and/or provided adjacent to and/or with web2.0 search results.
- a digital resource can be accessed and processed to generate the synthetic representation.
- the synthetic representation can include a representative frame of a video digital asset.
- the synthetic representation can include a compressed video, a graphics interchange format, and/or an augmented video.
- the systems and methods can include identifying a plurality of token datasets associated with a particular non-fungible token which can be identified and stored.
- the systems and methods can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non-fungible tokens.
- the blockchain data can be processed to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens.
- the blockchain data can be processed to determine a second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens.
- the systems and methods can include storing the first set of data and the second set of data.
- the systems and methods can obtain blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non- fungible tokens.
- the blockchain data can be processed to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens.
- the first set of data can include freeform text data.
- processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include crawling the blockchain data to identify link data and obtaining content data associated with the link data.
- the systems and methods can include processing the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens.
- the second set of data can include transactional data from an electronic ledger.
- processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include determining a plurality of datasets associated with non-fungible token transactions.
- the non-fungible token transactions can be associated with the particular non- fungible token.
- Processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include generating the second set of data based on the plurality of datasets.
- the systems and methods can segment the first set of data and the second set of data from the blockchain data.
- the segmentation can involve the utilization of a machine-learned segmentation model.
- the first set of data and the second set of data can be stored.
- the first set of data and the second set of data can be stored in a database.
- the first set of data and the second set of data can be provided to an indexing computing system for indexing data associated with the particular non-fungible token.
- Index data can then be generated for the particular non-fungible token based on the first set of data and the second set of data.
- the index data can include a preview of the digital resource associated with the non-fungible token. Additionally and/or alternatively, the index data can include a title, a description, transaction history, and/or publisher information associated with the non-fungible token.
- Generating index data can involve processing content data with one or more machine-learned models.
- the systems and methods can obtain and/or determine more and more context upon each nesting crawl. An amalgamation of the context data can then be generated and/or stored.
- Text data, transaction data, and/or media data may be obtained via different techniques.
- the text data may be obtained using natural language processing
- the transaction data may be obtained using token ID detection, segmenting, and concatenation
- the media data may be obtained by navigating to different landing pages based on identified uniform resource identifiers.
- the systems and methods can include obtaining lightweight, natural language text data descriptive of data stored on the blockchain (e.g., an open standard file format and data interchange format that may use human-readable text to store data objects including attribute - value pairs and arrays).
- the lightweight, natural language text data can be parsed, nested data can be obtained, and/or bag of words data can be obtained.
- the bag of words can be obtained by a machine- learned model to determine tags and correlations for search and ranking.
- different blockchains can include different protocols (e.g., different languages, different syntax, different data structures, and/or different reference protocols) and/or different formatting types.
- the systems and methods can be adapted for different blockchains (e.g., adapted for different protocols and/or different formatting types).
- the adaptation can include using one or more conformer blocks to adapt for different protocols and/or different formatting types.
- the adaptation can include using one or more machine-learned models for processing blockchain data from different blockchains.
- the adaptation can leverage deterministic functions and/or heuristics.
- the systems and methods may learn protocols for new blockchains to then map to universal set-up.
- the systems and methods can identify, obtain, and/or aggregate transaction data associated with one or more non-fungible tokens.
- the transaction data can be descriptive of a transaction history associated with a non-fungible token.
- the transaction data can include primitives such as timestamp, addresses involved, and/or lineage of the data over time.
- the obtained transaction data of different non- fungible tokens can be compared to generate comparative data.
- gas prices, amount of transactions, and/or mint data may be compared to generate comparative data.
- the token data can be determined, segmented, and/or concatenated based on a token ID and/or a contract address.
- the systems and methods can process blockchain data to identify a token ID and/or a contract address. Token data associated with the token ID and/or the contract address can be searched for and/or determined. The token data can be segmented from the blockchain data. The segmented data can then be aggregated.
- the systems and methods may identify and/or obtain data associated with a reliability of the non-fungible token data. For example, data associated with the validation of a block in a blockchain (e.g., data associated with split chain data). Additionally and/or alternatively, composite signals can be obtained and taken into account to determine block reliability. The composite signals can be determined based on processing the blockchain data of a blockchain log. Calls (e.g., outward calls to peer-to-peer network) can be processed.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the system and methods can provide systems and methods for extracting token data associated with one or more non-fungible tokens.
- the systems and methods disclosed herein can process blockchain data to identify and extract a plurality of token data sets associated with one or more non-fungible tokens, which can be further processed to generate index data.
- Another technical benefit of the systems and methods of the present disclosure is the ability to leverage identified data (e.g., token IDs and/or contract addresses) to determine transaction data for extraction for obtaining transaction history for a particular non-fungible token associated with a blockchain.
- identified data e.g., token IDs and/or contract addresses
- the systems and methods disclosed herein can process blockchain data to identify various data sets in a blockchain associated with a particular non-fungible token. The various data sets can be segmented from the rest of the blockchain data and can then be aggregated.
- Another example of technical effect and benefit relates to improved computational efficiency and improvements in the functioning of a computing system.
- the systems and methods disclosed herein can leverage the token data extraction to greatly reduce the computational power to index, search, and surface non-fungible token data.
- the systems and methods disclosed herein can reduce the computational power utilized for generating the index database by identifying digital resources, processing the digital resources, and generating synthetic representations that can be of a smaller size compared to the original digital resource.
- Figure 1 A depicts a block diagram of an example computing system 100 that performs token data extraction and non-fungible token indexing according to example embodiments of the present disclosure.
- the system 100 includes a user computing system 130, a server computing system 110, a creator computing system 150, and a blockchain computing system 170 that are communicatively coupled over a network 180.
- the user computing system 130 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing system 130 includes one or more processors 132 and a memory 134.
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the user computing system 130 to perform operations.
- the user computing system 130 can also include one or more user input components that receive user input.
- the user input component can be a touch- sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 110 includes one or more processors 112 and a memory 114.
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 118 and instructions 116 which are executed by the processor 112 to cause the server computing system 110 to perform operations.
- the server computing system 110 includes or is otherwise implemented by one or more server computing devices.
- server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the blockchain computing system 170 includes one or more processors and a memory.
- the one or more processors can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory can store data and instructions which are executed by the processor to cause the blockchain computing system 170 to perform operations.
- the blockchain computing system 170 includes or is otherwise implemented by one or more server computing devices.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the computing system 100 can include a number of applications (e.g., applications 1 through N). Each application can be in communication with a central intelligence layer. Example applications can include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing system 100.
- the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- the central device data layer can communicate with each device component using an API (e.g., a private API).
- Figure 1A depicts an exemplary computing system 100 that can be used to implement token data extraction and indexing according to aspects of the present disclosure.
- the system 100 has a user-server architecture that includes a server 110 that communicates with one or more user computing systems 130 over a network 180.
- the present disclosure can be implemented using other suitable architectures, which can include any number of computing systems communicating over a network 180.
- the system 100 includes a server 110, such as, for example, a web server.
- the server 110 can be one or more computing devices that are implemented as a parallel computing system and/or a distributed computing system. In particular, multiple computing devices can act together as a single server 110.
- the server 110 can have one or more processor(s) 112 and a memory 114.
- the server 110 can also include a network interface used to communicate with one or more remote computing devices (e.g., user devices) 130 over a network 180.
- the processor(s) 112 can be any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, or other suitable processing device.
- the memory 114 can include any suitable computing system or media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices.
- the memory 114 can store information accessible by processor(s) 112, including instructions 116 that can be executed by processor(s) 112.
- the instructions 116 can be any set of instructions that when executed by the processor(s) 112, cause the processor(s) 112 to provide desired functionality.
- the instructions 116 can be executed by the processor(s) 112 to implement index adjustment (e.g., index deduplication).
- the user profile database 120 can be configured to store a plurality of user profiles associated with a plurality of users utilizing one or more user computing systems 130.
- the user profile database 120 can be configured to be utilized for facilitating one or more interactions.
- the facilitation of the one or more interactions can involve the use of a blockchain application programming interface (API) 122 to send data to and receive data from a blockchain computing system 170.
- API application programming interface
- a server computing system 110 can utilize the blockchain API 122 to update one or more ledgers 172 of the blockchain computing system 170.
- the one or more ledgers 172 can be associated with one or more tokens 174.
- the one or more tokens 174 can include one or more non-fungible tokens, which can include scripts associated with a digital asset (e.g., image data, video data, text data, latent encoding data, domain data, audio data, augmented-reality asset rendering data, and/or virtual-reality asset rendering data).
- the script can reference a specific digital asset that is provided for sale.
- the digital asset can include image data, text data, video data, latent encoding data, a domain name, a virtual property, an augmented-reality asset, a virtual-reality asset (e.g., a virtual-reality environment and/or a virtual-reality object for interaction in an environment), a smart contract, a physical item authentication, etc.
- the one or more ledgers 172 can be associated with cryptocurrency that can be utilized to make transactions in a physical marketplace and/or a virtual marketplace.
- element can refer to computer logic utilized to provide desired functionality.
- any element, function, and/or instructions can be implemented in hardware, application specific circuits, firmware and/or software controlling a general purpose processor.
- the elements or functions are program code files stored on the storage device, loaded into memory and executed by a processor or can be provided from computer program products, for example computer executable instructions, that are stored in a tangible computer-readable storage medium such as RAM, hard disk or optical or magnetic media.
- Memory 114 can also include data 118 that can be retrieved, manipulated, created, or stored by processor(s) 112.
- the data 118 can include search result data, ranking data, image data (e.g., digital maps, satellite images, aerial photographs, street-level photographs, synthetic models, paintings, personal images, portraits, etc.), video data, audio data, text data (e.g., books, articles, blogs, poems, etc.), latent encoding data, blockchain address data, tables, vector data (e.g., vector representations of roads, parcels, buildings, etc.), point of interest data (e.g., locales such as islands, cities, restaurants, hospitals, parks, hotels, and schools), or other data or related information.
- the data 118 can be used to access information and data associated with a specific digital asset, website, search result, blockchain, etc.
- the data 118 can be stored in one or more databases.
- the one or more databases can be connected to the server 110 by a high bandwidth LAN or WAN, or can also be connected to server 110 through network 180.
- the one or more databases can be split up so that they are located in multiple locales.
- the server 110 can exchange data with one or more user computing systems 130 over the network 180. Although two user computing systems 130 are illustrated in Figure 1A, any number of user computing systems 130 can be connected to the server 110 over the network 180.
- the user computing systems 130 can be any suitable type of computing device, such as a general purpose computer, special purpose computer, navigational device, laptop, desktop, integrated circuit, mobile device, smartphone, tablet, wearable-computing devices, a display with one or more processors coupled thereto and/or embedded therein, or other suitable computing device. Further, the user computing system 130 can be multiple computing devices acting together to perform operations or computing actions.
- a user computing system 130 can include a processor(s) 132 and a memory 134.
- the memory 134 can store information accessible by processor(s) 132, including instructions that can be executed by processor(s) and data.
- memory 134 can store data 136 and instructions 138.
- Instructions 138 can provide instructions for implementing a browser, a non- fungible token purchase, and/or a plurality of other functions.
- the user of user computing system 130 can exchange data with server 110 by using the browser to visit a website accessible at a particular web-address.
- the token data identification and non-fungible token indexing of the present disclosure can be provided as an element of a user interface of a website and/or application.
- the data 136 can include data related to running a specialized application on the user computing system 130.
- the specialized application can be used to exchange data with server 110 over the network 160.
- the data 136 can include user-device-readable code for providing and implementing aspects of the present disclosure. Additionally and/or alternatively, the data 136 can include data related to previously inputted or received data.
- the data 136 can include data related to past occurrences of the special application.
- the user computing system 130 can include various user input devices for receiving information from a user, such as a touch screen, touch pad, data entry keys, speakers, mouse, motion sensor, and/or a microphone suitable for voice recognition. Further, the user computing system 130 can have a display for presenting information, such as a user interface, displaying a digital asset, displaying pop-ups or application elements displayed in an interface, and/or other forms of information.
- the user computing system 130 can also include a user profile 140 that can be used to identify a user of the user computing system 130.
- the user profile 140 can be optionally used by the user to make one or more transactions which can then be recorded on one or more ledgers 172 of the blockchain computing system 170.
- the user profile 140 can be descriptive of user information, which can include identification numbers and/or payment account information.
- the user profile 140 can include data associated with a crypto wallet, which may be linked to a browser application via an application extension and/or embedding.
- the user computing system 130 can further include a graphics processing unit. Graphics processing unit can be used by processor 132 to index adjustment. In some embodiments, the user computing system 130 performs any and all index adjustment.
- the user computing system 130 can include a network interface for communicating with a server 110 over a network 180.
- Network interface can include any components or configuration suitable for communication with server 110 over network 180, including, for example, one or more ports, transmitters, wireless cards, controllers, physical layer components, or other items for communication according to any currently known or future developed communications protocol or technology.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof.
- the network 180 can also include a direct connection between a user computing system 130 and the server 110.
- communication between the server 110 and a user computing system 130 can be carried via network interface using any type of wired and/or wireless connection, using a variety of communication protocols (e.g., TCP/IP, HTTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the exemplary computing system 100 can include one or more creator computing systems 150.
- the one or more creator computing systems 150 can be utilized for generating images, videos, prose, poetry, audio, etc., which can then be provided for sale.
- the one or more creator computing systems 150 can include one or more processors 152, which can be utilized to execute one or more operations to implement the systems and methods disclosed herein.
- the one or more creator computing systems 150 can include one or more memory components 154, which can be utilized to store data 156 and one or more instructions 158.
- the data 156 can include data related to one or more applications, one or more media datasets, etc.
- the instructions 158 can include one or more operations for implementing the systems and methods disclosed herein.
- the one or more creator computing systems 150 can store data associated with one or more digital assets 160 and/or one or more creator profiles 162.
- the one or more digital assets 160 can include text data, image data, video data, audio data, latent encoding data, domain data, or a variety of other data formats.
- the one or more creator profiles 162 can include information associated with one or more “creators” of the one or more digital assets 160.
- the one or more creator profiles 162 can include identification data, transaction data, and/or crypto wallet data.
- the exemplary computing system 100 can include one or more blockchain computing systems 170.
- the one or more blockchain computing systems 170 can include a plurality of computing devices being utilized for decentralized data storage, such that a plurality of “blocks” can be distributed throughout a network of computing devices to provide a secure system for data storage, which can include one or more ledgers 172 and one or more tokens 174.
- each of the one or more tokens 174 can be associated with at least a portion of the one or more ledgers 172.
- Blockchain can refer to a system configured to securely record information.
- the blockchain can include a decentralized system that can render changing information extremely difficult.
- the blockchain can include a digital ledger of transactions that can be duplicated and distributed across a network of computing systems. Each block in the chain can include a number of transactions. When a new transaction occurs on the blockchain, a record of that transaction can be added to every computing device’s ledger.
- the blockchain can be utilized to track the exchange of currency and/or digital assets via the recording of transactions on the digital ledger, which can be propagated throughout the decentralized system.
- the currency exchanged and tracked via the blockchain computing system 170 can be referred to as cryptocurrency.
- the tokens 174 can include one or more non-fungible tokens.
- the non-fungible tokens can be minted on a blockchain associated with the blockchain computing system 170.
- a non-fungible token can be a certificate of authenticity of a digital asset. NFTs can be non-interchangeable thus making their worth depend on the price anyone may be willing to pay for the asset. NFTs can be printed on blockchains such that their scarcity and authenticity can be maintained.
- a digital asset can be defined as anything that is stored digitally and can be uniquely identifiable that organizations can use to realize value.
- Figure IB depicts a block diagram of an example blockchain 50 that may be utilized by the blockchain computing system 170 of the exemplary computing system 100 of Figure 1 A.
- the example blockchain 50 can include a plurality of blocks that can be utilized to store data with one or more cryptographic features.
- the blockchain 50 can be stored on a decentralized computing system comprising a plurality of computing devices.
- the blockchain 50 can be a public blockchain (e.g., a blockchain that is open without access restrictions such that anyone with an internet access can send transactions or validate transactions as part of the decentralized, distributed system), a private blockchain (e.g., a blockchain that provides access based on permissions set by network administrators), or a hybrid blockchain (e.g., a blockchain with a combination of blocks with no restrictions and blocks with restrictions).
- the blockchain 50 can include proof of work features that can include one or more cryptographic forms of proof. The proof of work can be provided upon a request to update the blockchain 50 (e.g., a request to update the ledgers based on a new transaction).
- the proof of work can convey that a certain device or group of devices have performed a certain amount of computation, which can then be validated by other parties. Once validated, the blockchain 50 can be updated, or may remain unchanged in response to a failure to validate.
- the proof of work feature can be utilized to mitigate the computational cost of every device in the system having to perform the same computational functions and checks for determining a request is valid for updating the blockchain 50.
- Each block can include a hash, a previous hash associated with the hash of the previous block, and data.
- each block can include a nonce.
- a hash can be a hash value of a fixed length that can be a fingerprint for the particular block. The hash value can be generated based on a hash function and may be changed each time a change is made to the data of that particular block.
- the previous hash can include a hash value of the block immediately preceding the particular block. The previous hash can be utilized to ensure the downstream ground truth stays unchanged unless proper validation occurs.
- the data can include transaction data (e.g., a transaction ledger), a timestamp, a value associated with a cryptocurrency value, anon-fungible token (e.g., anon-fungible token including a script that references a digital asset, nonce data, and/or general blockchain data.
- Nonce i.e., a number only used once
- the nonce can be a number that blockchain miners are solving for, in order to receive an incentive (e.g., cryptocurrency).
- the blockchain 50 can include one or more security protocols and/or features.
- the blockchain 50 can include a cryptographic system.
- the blockchain 50 can validate the blockchain 50 is valid by ensuring the stored previous hash stored in the block matches the hash value of the previous block from the last block back to the first block (e.g., the genesis block).
- the blockchain 50 can include proof of work validation that can rely on verifying proof of computation before implementing a change to the stored data (e.g., the stored ledger). Proof of work validation can take seconds, minutes, and/or hours based in part on the number of blocks in the blockchain 50.
- the blockchain 50 can be implemented on a distributed, decentralized computing system.
- each computing device in the distributed, decentralized computing system can store a portion of (e.g., a block of the plurality of blocks) or all of the blocks in the blockchain 50. Therefore, the system can verify data by ensuring the data is uniform across most, if not all, of the distributed system. Each node of the distributed system can be checked for tampering before adding new data.
- the data can include data associated with a cryptocurrency value (e.g., a ledger associated with a specific cryptocurrency value), data associated with a digital asset (e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset), data associated with a smart contract (e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met), and/or timestamp data (e.g., timestamp data for block creation, minting, a transaction, etc.).
- a cryptocurrency value e.g., a ledger associated with a specific cryptocurrency value
- data associated with a digital asset e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset
- data associated with a smart contract e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met
- timestamp data e.g., timestamp data for block creation, mint
- Figure IB depicts a first block 10, a second block 20, a third block 30, a fourth block 40, and an nth block 60. Although five blocks are depicted, any number of blocks can be utilized.
- the first block 10 can be a genesis block (e.g., a first overall block in the blockchain).
- the first block 10 can include a respective first hash 12 (e.g., a hash value associated with the first block 10).
- the first block 10 may include a first previous hash 14 (e.g., if the first block 10 has a block before it in the blockchain 50, then the hash of the previous block can be stored on the first block 10). Additionally and/or alternatively, the first block 10 can include data 16 and nonce 18.
- the second block 20 can follow the first block 10.
- the second block 20 can include a respective second hash 22 (e.g., a hash value associated with the second block 20).
- the second block 20 may include a second previous hash 24 (e.g., the second previous hash 24 can be the same as, or reference, the first hash 12). Additionally and/or alternatively, the second block 20 can include data 26 and nonce 28.
- the third block 30 can follow the second block 20.
- the third block 30 can include a respective third hash 32 (e.g., a hash value associated with the third block 30).
- the third block 30 may include a third previous hash 34 (e.g., the third previous hash 34 can be the same as, or reference, the second hash 22). Additionally and/or alternatively, the third block 30 can include data 36 and nonce 38.
- the fourth block 40, the nth block 60, and other potential blocks can include a respective hash, a respective previous hash, and data.
- the first data 16, the second data 26, the third data 36, and the data of the other blocks can include overlapping data, can differ, and/or be the same such that the data is duplicative for all blocks.
- each block can be associated with a different transaction (e.g., a different minting, a different sale, etc.).
- the first nonce 18, the second nonce 28, the third nonce 38, and the nonce’s of the other blocks can differ and may be solved during mining.
- the data in each block can include ledger data, which can include a timestamp, asset and/or cryptocurrency exchanged, actors involved in transaction, and/or a variety of other information.
- a plurality of different blockchains can be utilized for the systems and methods disclosed herein.
- the different blockchains can include different configurations.
- the different blockchains can include parallel chains, side chains, shared blocks, differing chains, varying permissions, varying purposes, varying number of blocks, and/or varying hash functions and/or varying hashing value lengths.
- the systems and methods can include one or more machine-learned model computing systems 900.
- the one or more machine-learned models can be utilized for a variety of tasks for enabling token data identification, obtainment, indexing, and deduplication.
- FIG. 9A depicts a block diagram of an example computing system 900 that performs token data identification, obtainment, indexing, and deduplication according to example embodiments of the present disclosure.
- the system 900 includes a user computing device 902, a server computing system 930, and a training computing system 950 that are communicatively coupled over a network 980.
- the user computing device 902 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 902 includes one or more processors 912 and a memory 914.
- the one or more processors 912 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 914 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 914 can store data 916 and instructions 918 which are executed by the processor 912 to cause the user computing device 902 to perform operations.
- the user computing device 902 can store or include one or more token indexing models 920.
- the token indexing models 920 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Example token indexing models 920 are discussed with reference to Figures 4 & 11.
- the one or more token indexing models 920 can be received from the server computing system 930 over network 980, stored in the user computing device memory 914, and then used or otherwise implemented by the one or more processors 912.
- the user computing device 902 can implement multiple parallel instances of a single token indexing model 920 (e.g., to perform parallel token data indexing across multiple instances of token data descriptive of a non-fungible token).
- the token indexing model can include one or more detection models, one or more segmentation models, one or more classification models, one or more augmentation models, one or more generation models, and/or one or more feature extractor models.
- the token indexing model can process blockchain data and/or web page data to generate index data descriptive of index information associated with one or more respective non-fungible tokens.
- the one or more token indexing models can include one or more token identification models.
- the one or more token identification models can process the blockchain data to identify token data, and one or more segmentation models can segment the token data from the blockchain data. The segmented token data can then be indexed via one or more additional machine-learned models of the token indexing model.
- one or more token indexing models 940 can be included in or otherwise stored and implemented by the server computing system 930 that communicates with the user computing device 902 according to a client-server relationship.
- the token indexing models 940 can be implemented by the server computing system 940 as a portion of a web service (e.g., a token indexing service).
- a web service e.g., a token indexing service
- one or more models 920 can be stored and implemented at the user computing device 902 and/or one or more models 940 can be stored and implemented at the server computing system 930.
- the user computing device 902 can also include one or more user input components 922 that receive user input.
- the user input component 922 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 930 includes one or more processors 932 and a memory 934.
- the one or more processors 932 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 934 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 934 can store data 936 and instructions 938 which are executed by the processor 932 to cause the server computing system 930 to perform operations.
- the server computing system 930 includes or is otherwise implemented by one or more server computing devices.
- server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 930 can store or otherwise include one or more machine-learned token indexing models 940.
- the models 940 can be or can otherwise include various machine-learned models.
- Example machine- learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Example models 940 are discussed with reference to Figures 4 & 11.
- the user computing device 902 and/or the server computing system 930 can train the models 920 and/or 940 via interaction with the training computing system 950 that is communicatively coupled over the network 980.
- the training computing system 950 can be separate from the server computing system 930 or can be a portion of the server computing system 930.
- the training computing system 950 includes one or more processors 952 and a memory 954.
- the one or more processors 952 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 954 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 954 can store data 956 and instructions 958 which are executed by the processor 952 to cause the training computing system 950 to perform operations.
- the training computing system 950 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 950 can include a model trainer 960 that trains the machine-learned models 920 and/or 940 stored at the user computing device 902 and/or the server computing system 930 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 960 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 960 can train the token indexing models 920 and/or 940 based on a set of training data 962.
- the training data 962 can include, for example, training blockchain data, training web page data, training transaction data, ground truth labels, ground truth index information, and/or ground truth segmentation masks.
- the training examples can be provided by the user computing device 902.
- the model 920 provided to the user computing device 902 can be trained by the training computing system 950 on user-specific data received from the user computing device 902. In some instances, this process can be referred to as personalizing the model.
- the model trainer 960 includes computer logic utilized to provide desired functionality.
- the model trainer 960 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 960 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 960 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 980 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 980 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- the input to the machine-learned model(s) of the present disclosure can be image data.
- the machine-learned model(s) can process the image data to generate an output.
- the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an image segmentation output.
- the machine- learned model(s) can process the image data to generate an image classification output.
- the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.).
- the machine-learned model(s) can process the image data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be text or natural language data.
- the machine-learned model(s) can process the text or natural language data to generate an output.
- the machine- learned model(s) can process the natural language data to generate a language encoding output.
- the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output.
- the machine- learned model(s) can process the text or natural language data to generate a classification output.
- the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output.
- the machine- learned model(s) can process the text or natural language data to generate a semantic intent output.
- the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.).
- the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- the input to the machine-learned model (s) of the present disclosure can be speech data.
- the machine-learned model(s) can process the speech data to generate an output.
- the machine-learned model(s) can process the speech data to generate a speech recognition output.
- the machine- learned model(s) can process the speech data to generate a speech translation output.
- the machine-learned model(s) can process the speech data to generate a latent embedding output.
- the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.).
- an encoded speech output e.g., an encoded and/or compressed representation of the speech data, etc.
- the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.).
- the machine-learned model(s) can process the latent encoding data to generate an output.
- the machine-learned model(s) can process the latent encoding data to generate a recognition output.
- the machine-learned model(s) can process the latent encoding data to generate a reconstruction output.
- the machine-learned model(s) can process the latent encoding data to generate a search output.
- the machine-learned model(s) can process the latent encoding data to generate a reclustering output.
- the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- the input to the machine-learned model (s) of the present disclosure can be statistical data.
- the machine-learned model(s) can process the statistical data to generate an output.
- the machine-learned model(s) can process the statistical data to generate a recognition output.
- the machine- learned model(s) can process the statistical data to generate a prediction output.
- the machine-learned model(s) can process the statistical data to generate a classification output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a visualization output.
- the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding).
- the task may be audio compression task.
- the input may include audio data and the output may comprise compressed audio data.
- the input includes visual data (e.g., one or more images or videos), the output comprises compressed visual data, and the task is a visual data compression task.
- the task may comprise generating an embedding for input data (e.g., input audio or visual data).
- the input includes visual data
- the task is a computer vision task.
- the input includes pixel data for one or more images and the task is an image processing task.
- the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class.
- the image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest.
- the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories.
- the set of categories can be foreground and background.
- the set of categories can be object classes.
- the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value.
- the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- the input includes audio data representing a spoken utterance and the task is a speech recognition task.
- the output may comprise a text output which is mapped to the spoken utterance.
- the task comprises encrypting or decrypting input data.
- the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
- Figure 9A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 902 can include the model trainer 960 and the training dataset 962.
- the models 920 can be both trained and used locally at the user computing device 902.
- the user computing device 902 can implement the model trainer 960 to personalize the models 920 based on user-specific data.
- Figure 9B depicts a block diagram of an example computing device 970 that performs according to example embodiments of the present disclosure.
- the computing device 970 can be a user computing device or a server computing device.
- the computing device 970 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- Figure 9C depicts a block diagram of an example computing device 990 that performs according to example embodiments of the present disclosure.
- the computing device 990 can be a user computing device or a server computing device.
- the computing device 990 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in Figure 9C, a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990.
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990.
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 990. As illustrated in Figure 9C, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- FIG. 2 depicts a block diagram of an example token data extraction system 1600 according to example embodiments of the present disclosure.
- the example token data extraction system 1600 can obtain blockchain data 1604 from a blockchain node 1602 and can process the blockchain data 1604 to extract token data 1616, which can then be utilized for one or more tasks (e.g., non-fungible token indexing, search, and/or analysis).
- the system can access a blockchain node 1602 via one or more application programming interfaces.
- Blockchain data 1604 can then be obtained via the blockchain node 1602.
- the blockchain data 1604 can be descriptive of a plurality of blockchain transactions.
- the blockchain data 1604 can include code data descriptive of byte code for a blockchain.
- the obtained blockchain data 1604 can be added to a blockchain log 1606.
- the blockchain log 1606 can be updated at given intervals and/or based on trigger events.
- the blockchain log 1606 can then be accessed to obtain stored blockchain data 1608 that can then be processed by an identification model 1610 to generate identification data 1612.
- the identification data 1612 can be descriptive of datasets determined to be associated with a particular non-fungible token.
- the identification can be based on an identified token ID, an identified contract address, an identified blockchain trigger event, an identified digital resource reference, and/or based on one or more standards.
- the identification model 1610 can include a machine-learned detection model, a machine-learned classification model, and/or a machine-learned semantics model.
- the identification data 1612 can then be processed by the segmentation model 1614 (and/or an extraction model) to segment the identified datasets from the blockchain data 1608 in order to generate the token data 1616.
- the segmentation model 1614 processes both obtained blockchain data 1608 obtained from the blockchain log 1606 and the identification data 1612.
- the segmented datasets may be concatenated 1620 (and/or assembled) in order to generate the token data 1616.
- FIG. 3 depicts a block diagram of an example token data aggregation system 1700 according to example embodiments of the present disclosure.
- the example token data aggregation system 1700 can obtain blockchain data 1702, determine data associated with a particular non-fungible token 1704, and generate token data 1712.
- blockchain data 1702 can be obtained from a blockchain and/or from a repository.
- the blockchain data can be processed to determine a particular non- fungible token 1704 associated with the blockchain data 1702.
- the blockchain data 1702 can be further processed to determine data associated with the particular non-fungible token 1704.
- the token data aggregation system 1700 can identify, segment, and/or generate descriptive data 1706, content data 1708, and/or transaction data 1710 associated with the particular non-fungible token 1704.
- the descriptive data 1706 can be based on freeform text data embedded in the blockchain code and/or referenced in the blockchain code.
- the content data 1708 can be associated with a digital resource (e.g., a digital asset) of the particular non- fungible token 1704.
- the content data 1708 can include a synthetic representation of the digital resource.
- the synthetic representation can be generated by following one or more reference addresses to obtain the digital resource, which can then be processed to generate the synthetic representation.
- the transaction data 1710 can be generated by identifying electronic ledger transactions associated with the particular non-fungible token 1704 and aggregating the data to generate transaction history data for the particular non-fungible token 1704.
- the transaction data 1701 can be identified based on a token ID and/or a contract address associated with the particular non-fungible token 1704.
- the descriptive data 1706, the content data 1708, and the transaction data 1710 can be aggregated to generate token data 1712.
- the token data 1712 can then be processed to generate index data for the particular non-fungible token 1704.
- FIG. 4 depicts a block diagram of an example token data generation system 1800 according to example embodiments of the present disclosure.
- the example token data generation system 1800 can obtain blockchain data 1802, process the blockchain data 1702 with one or more models, and output token data 1818.
- the blockchain data 1802 can be obtained from a blockchain log and/or a third party repository.
- the blockchain data 1802 can be processed with an identification model 1804 to generate identification data 1806.
- the identification data can be descriptive of subsets of the blockchain data 1802 that is associated with a particular non- fungible token.
- the identification data 1806 and the blockchain data 1802 can be processed with a segmentation model 1808 (and/or an extraction model) to segment (and/or extract) the subsets of the blockchain data 1802 associated with the particular non-fungible token.
- the segmentation model 1808 can generate first data 1810, second data 1812, and third data 1814 by segmenting the subsets from the blockchain data 1802.
- the first data 1810, the second data 1812, and the third data 1814 may be based on different portions of the blockchain data 1802 and/or may be associated with different types of data associated with the non-fungible token.
- the first data 1810 can be associated with a title, description, or community for the non-fungible token; the second data 1812 can be associated with a digital resource of the non-fungible token; and the third data 1814 can be associated with a transaction history for the non-fungible token.
- the first data 1810, the second data 1812, and the third data 1814 can be processed with a generation model 1816 to generate a token data 1818.
- the token data 1818 can include data associated with identifying characteristics of the non-fungible token.
- the token data 1818 can include data descriptive of a token ID 1820 and/or a contract address 1822 associated with the non-fungible token.
- the token ID 1820 and/or the contract address 1822 can be identified by the identification model 1804 and may be included in the identification data 1806.
- Figure 5 depicts a block diagram of an example synthetic representation generation system 1900 according to example embodiments of the present disclosure.
- the example synthetic representation generation system 1900 can obtain blockchain data 1902, process the blockchain data 1902, and generate a synthetic representation 1916 associated with the digital resource 1912 of a non-fungible token.
- the blockchain data 1902 can be processed to determine a first link 1904 associated with a non-fungible token.
- the first link 1904 can include a reference address associated with a digital resource 1912 for the non-fungible token.
- the first link 1904 can include a uniform resource identifier and/or a uniform resource locator.
- the first link 1904 can be utilized to navigate to a first landing address 1906.
- the first landing address 1906 (e.g., a first landing page) can be processed to determine and/or obtain a digital resource 1912.
- the first landing address 1906 can be processed to determine a second link 1908 associated with the digital resource 1912.
- the second link 1908 can include a uniform resource identifier and/or a uniform resource locator.
- the second link 1908 can be utilized to navigate to a second landing address 1910.
- the second landing address 1910 can include a web page with one or more digital resources.
- the second landing address 1910 can be processed to determine and/or obtain the digital resource 1912.
- the digital resource 1912 can be processed with a representation model 1914 to generate a synthetic representation 1916.
- the representation model 1914 can be configured and/or trained to process a digital resource 1912 to generate a preview of the digital resource 1912. Alternatively and/or additionally, the representation model 1914 can be trained to determine and/or generate a media content item that includes semantically-aware representation of the digital resource 1912.
- the synthetic representation 1916 can include a compressed version of the digital resource 1912. Alternatively and/or additionally, the synthetic representation 1916 can include a representative frame or snippet associated with the digital resource 1912. In some implementations, the synthetic representation 1916 can include a rendering of embedded code that is embedded in the blockchain.
- Figure 10 depicts a block diagram of an example indexing system 200 according to example embodiments of the present disclosure.
- the indexing system 200 is configured to receive blockchain data 202 descriptive of a blockchain that stores data associated with a plurality of non-fungible tokens and, as a result of receipt of the input data 202, provide output data 220 that is descriptive of a plurality of index datasets associated with the plurality of non-fungible tokens.
- the indexing system 200 can include one or more models and/or one or more functions for identifying token data and extracting relevant information for generating index data.
- the example indexing system 200 can include obtaining blockchain data 202 associated with a blockchain.
- the blockchain data 202 can include code for the blockchain. Additionally and/or alternatively, the blockchain data 202 can include script data (e.g., data descriptive of script that can be deployed to interact with smart contract code of the blockchain data 202) associated with a plurality of non-fungible tokens.
- script data e.g., data descriptive of script that can be deployed to interact with smart contract code of the blockchain data 202
- the blockchain data 202 can be processed to identify first token data for a first non-fungible token 204, second token data for a second non-fungible token 206, third token data for a third non-fungible token 208, and nth token data for a nth non-fungible token 210. Identifying the token data sets can involve parsing the blockchain data and determining if each parsed segment is associated with one or more non-fungible token characteristics. Alternatively and/or additionally, identifying the token data can include crawling the blockchain data to search for particular characteristics, structure, and/or features associated with token data.
- the first token data associated with the first non-fungible token 204 can be processed to generate first index data 212 associated with the first non-fungible token 204.
- the second token data associated with the second non-fungible token 206 can be processed to generate second index data 214 associated with the second non-fungible token 206.
- the third token data associated with the third non-fungible token 208 can be processed to generate third index data 216 associated with the third non-fungible token 208.
- the nth token data associated with the nth non-fungible token 210 can be processed to generate nth index data 218associated with the nth non-fungible token 210.
- the first index data 212, the second index data 214, the third index data 216, and the nth index data 218 can be stored in an index database 220, which can then be utilized for various tasks (e.g., non-fungible token search).
- the index datasets can include index information associated with a plurality of index item fields.
- the index datasets can include a title of the non-fungible token, a reference to the digital resource payload, descriptors, and/or a variety of other index items for annotating and/or characterizing aspects of the non-fungible token which may be searched.
- index data 310 can be generated based on blockchain data and/or web page data 326.
- the blockchain data can be processed to identify a subset of the blockchain data that is descriptive of token data 302.
- the token data 302 can be processed to determine one or more index items for the index data 310 generation.
- web page data 326 associated with the same or related non-fungible token to the non-fungible token associated with the token data 302 can be utilized to determine one or more additional index items for one or more index item fields.
- the token data 302 and/or the web page data 326 can be processed with one or more machine-learned models 324 to generate one or more outputs that can be utilized as index items for the index data 310.
- the input data for the one or more machine-learned models 324 can be obtained from other data sources.
- the index data 310 can include data descriptive of the blockchain 312 the non-fungible token is minted on.
- the index data 310 can include a reference 314 to the digital resource (e.g., a URI), time data 316 (e.g., a minting time, a first digital resource publication times, and/or a time difference between the two times), transaction data 318 (e.g., purchase times, amount of acquisitions, frequency of acquisitions, identities of purchasers and bidders, and/or auction event data), metadata 320 (e.g., stored by the blockchain, marketplace, and/or another data source), other machine- learned data 322, and/or other derived data.
- a reference 314 to the digital resource e.g., a URI
- time data 316 e.g., a minting time, a first digital resource publication times, and/or a time difference between the two times
- transaction data 318 e.g., purchase times, amount of acquisitions, frequency of acquisitions, identities of purchasers and bidders, and/or auction event data
- metadata 320 e.g., stored by the blockchain,
- FIG. 12 depicts a block diagram of an example search 400 according to example embodiments of the present disclosure.
- the example search 400 can include receiving a search query 402.
- the search query 402 can include one or more words, one or more images, and/or one or more other forms of input.
- the search query 402 can be processed by a search engine 404 which can then access a non-fungible token index database 406 to determine one or more non-fungible token search results 410 responsive to the search query 402.
- the search query 402 can be processed by the search engine 404 which can then access a web database 408 to determine one or more general web results 412 responsive to the search query 402.
- the one or more non-fungible token search results 410 and/or the one or more general web results 412 can be utilized to generate a search results page 414.
- the search results page 414 can then be provided for display.
- Figures 13A - 13C depict different example search result page configurations. Although three configurations are depicted, other variations may be utilized to provide search results for display.
- the different variations depicted can include a search interface 502, which can include a search query input box 504, one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516), one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526), and/or a knowledge panel 506.
- non-fungible token search results e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or
- the search query input box 504 can be configured to receive and/or display one or more search queries.
- the one or more non-fungible token search results and the one or more general web results can be determined and provided based on a determined responsiveness to an input search query.
- the knowledge panel 506 can include structured data associated with a topic determined to be responsive to an input query.
- FIG. 13A depicts an illustration of an example search results page 500 according to example embodiments of the present disclosure.
- the example search results page 500 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502. Additionally, the example search results page 500 includes a non-fungible token search results portion, which displays the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516).
- a first non-fungible token search result 510 e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516.
- the example search results page 500 can include a separate general web results portion, which can display the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526). Additionally and/or alternatively, the one or more non-fungible token search results and the one or more general web results can be provided in different formats (e.g., the non-fungible token search results can be provided with image thumbnails while the general web results can be displayed with only text).
- Figure 13B depicts an illustration of an example search results page 540 according to example embodiments of the present disclosure.
- the example search results page 540 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502.
- the example search results page 540 can include the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be displayed in an intermingled format, such that the different types of search results may be adjacent to one another.
- the order may be determined based on a determined score based on a responsiveness to a search query and/or based on other factors. The ordering may be based purely on score without preference to the type of result.
- FIG. 13C depicts an illustration of an example search results page 580 according to example embodiments of the present disclosure.
- the example search results page 580 can include both the one or more non-fungible token search results (e.g., a first non- fungible token search result 510, a second non-fungible token search result 512, a third non- fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be provided for display with media content item previews.
- the one or more non-fungible token search results e.g., a first non- fungible token search result 510, a second non-fungible token search result 512, a third non- fungible token search result 514, and/or a fourth non-fungible token search result 516
- FIG 14 depicts a block diagram of an example token identification system 1000 according to example embodiments of the present disclosure.
- the example token identification system 1000 can be configured to receive a blockchain data 1004 from a blockchain and/or a repository 1002 associated with a plurality of non-fungible tokens and, as a result of receipt of the blockchain data 1004, provide identification data 1014 that can be utilized to determine what data to index 1016.
- the token identification system 1000 can include an identification block (e.g., a machine-learned token identification model) that is operable to determine which subsets of data in the blockchain are associated with non-fungible tokens for indexing.
- Figure 14 depicts a block diagram of an example token data identification system 1000 according to example embodiments of the present disclosure.
- the token data identification system 1000 can include accessing a blockchain and/or a repository 1002 in order to obtain blockchain data 1004.
- the blockchain can be accessed via a blockchain node.
- the blockchain and/or the repository 1002 can be accessed to obtain blockchain data 1004 via an application programming interface.
- the repository can be a repository that stores blockchain data 1004 outside of the blockchain computing system.
- the repository may be generated by a third party computing system using one or more third party application programming interfaces.
- the blockchain data 1004 can include script data associated with a plurality of non-fungible tokens.
- the plurality of non-fungible tokens can be associated with a plurality of respective electronic ledgers.
- the blockchain data 1004 can be associated with a particular blockchain and/or a plurality of different blockchains.
- the blockchain data can include byte code data associated with a blockchain. Alternatively and/or additionally, the blockchain data can be associated with a leaf page of a web platform.
- the blockchain data 1004 can be processed by one or more blocks to generate identification data 1014.
- the identification data 1014 can be descriptive of one or more identified token data sets.
- identifying the one or more token data sets can include processing the blockchain data with a machine-learned token identification model.
- Processing the blockchain data 1004 to generate identification data 1014 can include determining one or more subsets of the blockchain data 1004 are descriptive of one or more token data sets that are associated with one or more non-fungible tokens.
- the determination can include parsing the blockchain data 1004.
- the parsing can be based on code semantics, data sub-structures, one or more code identifiers, and/or based on a plurality of other factors.
- the blockchain data 1004 can be processed to determine that one or more subsets of the blockchain data 1004 are associated with one or more blockchain trigger events 1006.
- the one or more subsets associated with the one or more blockchain trigger events 1006 can be determined to be candidate token data sets.
- the one or more blockchain trigger events 1006 can be associated with one or more smart contracts that comprise data descriptive of an if-then event that causes the transfer of a payload (e.g., a digital resource) in response to a transaction.
- the one or more candidate token data sets can be further processed to determine whether the blockchain trigger event 1006 is associated with a non-fungible token.
- the blockchain trigger 1006 event can be processed to determine an output action associated with the blockchain trigger event 1006.
- the output action can be processed to determine whether the output action is associated with a digital resource (e.g., a digital asset). If the output action is associated with a digital resource that is associated with a non-fungible token, the candidate token data may be identified as token data, which may then be indexed 1016.
- the token data may be identified based on one or more standards 1008.
- the one or more standards 1008 can be standards associated with a uniform structure for non-fungible tokens (e.g., EIP standards and/or ERC standards).
- the blockchain data 1004 can be crawled to search for one or more strings associated with one or more standard non-fungible token strings (e.g., strings associated with a uniform interface template and/or predetermined strings associated with a “function” and/or “event” portion of the script data).
- the subset can be determined to be token data, which can then be utilized to generate the identification data 1014.
- the candidate token data and/or the identified token data can be processed to determine the quality 1010 of the non-fungible token associated with the token data.
- the quality 1010 can be determined based on heuristic data and/or based on output data of one or more machine-learned models.
- the quality 1010 of the non-fungible token can be based on a determined authenticity or validity of the non-fungible token (e.g., whether the non-fungible token is suspicious), based on whether the digital resource associated with the non-fungible token includes distinguishing features (e.g., the digital resource amounts to more than white noise or mere slight differences from previously minted digital resources), based on a level of vulgarity or offensiveness (e.g., the digital resource may be of higher quality if the digital resource provides family friendly content that does not include harmful language or imagery), and/or based on how closely the token data conforms to the one or more uniform standards for non-fungible tokens.
- the quality 1010 can be utilized to generate the identification data 1014.
- the quality 1014 may be utilized to determine whether to index 1016 the token data and/or how to index 1016 the token data (e.g., full indexing, partial indexing, index with a quality tag or label, and/or not index).
- the blockchain data 1004 can be processed to determine other characteristics 1012 that may be utilized to generate the identification data 1014.
- the other characteristics 1014 can include data related to lazy minting, empty payloads, non-fungible token communities, pertinence of the non-fungible token, duplicate non-fungible tokens, type of digital resource (e.g., image, video, augmented-reality rendering asset, virtual-reality environment, audio, authentication certificate for physical object, domain, and/or virtual property), and/or recency of minting.
- the identification data 1014 can be provided to an indexing computing system, which can determine which (if any) subsets of the blockchain data 1004 to index 1016.
- identified token data of high quality e.g., token data associated with a non-fungible token from a validated publisher including a high resolution digital asset as payload with no vulgarity
- a data set with a low likelihood of being associated with a non-fungible token may not be indexed 1016.
- FIG. 15 depicts a block diagram of an example index filtering system 1100 according to example embodiments of the present disclosure.
- the example index filtering system 1100 can process blockchain data 1102, determine token data 1106 in the blockchain data 1102, and determine whether to index 1110 the token data 1106.
- the index filtering system 1100 can include a plurality of machine-learned models (e.g., an identification model 1104 to determine subsets of the blockchain data 1102 associated with non-fungible tokens and/or a quality model 1108 to determine a quality of the identified subsets of data) to determine what and how to index 1110.
- an identification model 1104 to determine subsets of the blockchain data 1102 associated with non-fungible tokens
- a quality model 1108 to determine a quality of the identified subsets of data
- blockchain data 1102 can be obtained from a blockchain node and/or a repository.
- the blockchain data 1102 can be associated with a blockchain.
- the blockchain data can be descriptive of byte code.
- the blockchain data 1102 can be processed by an identification model 1104 to determine and/or generate token data 1106.
- the token data 1106 can be associated with a non-fungible token.
- the token data 1106 can be generated by identifying a token ID and/or a contract address.
- the identification model 1104 can detect token IDs and/or contract addresses and can then obtain portions of the blockchain data associated with the token ID and/or the contract address, which can then be processed (e.g., the data can be processed for aggregating and/or concatenating the data) in order to generate the token data 1106.
- the identification model 1104 can determine and/or generate the token data 1106 by processing the blockchain data 1104 to determine subsets of the blockchain data 1102 associated with at least one of a blockchain event, one or more uniform non-fungible token standards, and/or a given non-fungible token intent.
- the token data 1106 can then be processed with a quality model 1108, which can then be utilized to determine whether to and/or how to index 1110 the token data.
- the quality model 1108 can process the token data 1106 to determine if the token data 1106 includes suspicious characteristics, potentially includes a bug, is associated with a high quality digital resource, and/or is vulgar or offensive.
- the quality model 1108 can generate a quality output (e.g., a quality metric), which can then be utilized to determine whether to index 1110 the token data 1108.
- token data sets with a threshold quality metric may be indexed 1110, while token data sets that do not meet the threshold may not be indexed and/or may be partially indexed.
- the quality metric, and/or one or more tags/labels associated with the quality metric may be indexed with the token data 1106.
- the determination on whether to index 1110 the token data 1106 may be based on a weighted score that can be based on identification data from the identification model 1104 and quality data from the quality model 1108.
- the one or more machine-learned models can be trained on labeled training examples and/or may be trained based on labeled features.
- the one or more machine-learned models can include one or more classification models, one or more feature extractors, one or more detection models, one or more segmentations models, and/or one or more augmentation models.
- the one or more machine-learned models can be trained for natural language processing, computer vision, image processing, video processing, latent encoding processing, audio processing, and/or encoding/decoding.
- Figure 16 depicts a block diagram of an example index determination system 1200 according to example embodiments of the present disclosure.
- the example index determination system 1200 can obtain blockchain data 1202, identify candidate token data 1204, generate identification data 1206 based on the identified candidate token data 1204, and generate an index determination 1212 based on the identification data.
- the index determination 1212 can include indexing the token data 1214, partially indexing 1216 the token data, or not indexing 1218 the token data.
- blockchain data 1202 can be obtained from a blockchain computing system.
- the blockchain data 1202 can include data descriptive of a plurality of non-fungible tokens associated with a plurality of digital resources.
- the blockchain data 1202 can be processed to identify candidate token data 1204 in the blockchain data. The identification can be based on determined blockchain trigger events, based on one or more uniform non- fungible token standards, based on a determined publisher intent, and/or based on a determined association with a digital resource (e.g., a digital asset).
- a digital resource e.g., a digital asset
- the candidate token data can then be processed to generate identification data 1206.
- the identification data can be descriptive of the candidate token data being associated with a non-fungible token.
- the identification data may include an identification metric descriptive of a likelihood that the candidate token data is associated with a non-fungible token.
- the identification data can then be processed to generate an index determination.
- the index determination 1212 can include data that can be transmitted to an indexing computing system to instruct the indexing computing system to index the token data 1214, partially index 1216 the token data, or not index 1218 the token data.
- the index determination 1212 can be based on the identification data such that candidate token data with a first threshold likelihood may be indexed 1214, candidate token data with a likelihood between a first threshold and a second threshold may be partially indexed 1216, and candidate token data with a likelihood below both thresholds may not be indexed 1218.
- the candidate token data sets determined to be associated with a non-fungible token may be indexed; however the level of indexing may be based on a quality metric, such that high quality token data sets may be fully indexed 1214, while low quality token data sets may be partially indexed 1216.
- Figure 17 depicts a block diagram of an example quality determination system 1300 according to example embodiments of the present disclosure.
- the quality determination system 1300 can obtain blockchain data 1302, determine token data 1304 in the blockchain data 1302, generate quality data 1306 for the token data, and determine whether to index 1310 the token data based on the quality data 1306.
- blockchain data 1302 can be obtained from a blockchain repository (e.g., blockchain data pre-filtered in a sandbox after being obtained from a blockchain node).
- the blockchain data 1302 can be processed to determine token data 1304 in the blockchain data 1302 (e.g., the blockchain data can be processed to determine a subset of the blockchain data includes data associated with a non-fungible token).
- the token data can then be processed to generate quality data 1306 associated with the token data.
- the quality data 1306 can be determined based on the resolution of the digital resource associated with the non-fungible token of the token data. Additionally and/or alternatively, the quality data 1306 may be generated based on a level of differentiation between the digital resource of the associated non-fungible token. The level of differentiation can be based on whether the digital resource amounts to more than just white noise, a blank image, and/or non-descript data. In some implementations, the level of differentiation can be based on whether the digital resource is the same or substantially similar to other digital resources associated with other non-fungible tokens. The minting date and/or the date of origin of the digital resource may be considered. Additionally and/or alternatively, the quality data 1306 may be based on whether the non-fungible token includes vulgar and/or offensive content (e.g., the digital resource depicts nudity and/or the title includes hate speech).
- the quality data 1306 can be utilized to generate one or more tags 1308 for the processed token data. Additionally and/or alternatively, the quality data 1306 can be utilized to determine whether to index 1310 the token data. [0222] The token data may be indexed 1312 based on the determination whether to index 1310. The indexing 1312 can include indexing the token data with the one or more generated tags 1308.
- FIG. 18 depicts a block diagram of an example token index deduplication 2000 according to example embodiments of the present disclosure.
- the example token index deduplication 2000 can be configured to receive a plurality of index datasets 2002 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 2002, provide an updated index database 2014 that is adjusted based on the determined duplication.
- the token index deduplication 2000 can include duplicate determination block 2004 that is operable to determine which index datasets are associated with one another.
- Figure 18 depicts a plurality of index datasets 2002 being processed to determine a plurality of duplicate index datasets.
- the plurality of index datasets 2002 can be processed with a duplicate determination block 2004 to determine plurality of duplicates including a first duplicate 2006, a second duplicate 2008, and an nth duplicate 2010. The determination can be based on digital resources (e.g., digital assets) of different identified tokens being the same (e.g., match and/or within a threshold similarity).
- the plurality of duplicates e.g., the first duplicate 2006, the second duplicate 2008, and/or the nth duplicate 2010
- the plurality of duplicates can be processed with an authenticity determination block 2012 to generate validation data.
- the validation data can include a determined authenticity of each of the duplicate index datasets. The authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
- the validation data can be utilized to adjust an index database to generate the updated index database 2014. Adjusting the index database can include removing a particular index dataset. For example, the index dataset generated based on the data obtained directly from the blockchain may be kept while the index dataset generated based on the data obtained from a web page may be removed. Alternatively and/or additionally, the index dataset determined to be fraudulent may be removed (e.g., the non-fungible token data may be obtained from or reference to a scam website).
- adjusting the index database can include merging the duplicate index datasets.
- adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
- Figure 19 depicts a block diagram of an example index validity determination 2100 according to example embodiments of the present disclosure.
- the index validity determination 2100 of Figure 19 includes duplication data 2102 that can be processed to generate validation data 2122.
- the duplication data 2102 can be descriptive of one or more index datasets associated with one or more non-fungible tokens.
- the duplication data 2102 can be descriptive of two or more indexed non-fungible tokens being the same (e.g., match or substantially similar).
- a first index dataset can be descriptive of a first non- fungible token associated with a first digital resource (e.g., a first digital asset that is a payload for the first non-fungible token).
- a second index dataset can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset that is a payload for the second non-fungible token).
- the first non-fungible token and the second non-fungible token can be the same non-fungible token which was indexed twice due to data being obtained from multiple sources that contain data associated with the non-fungible token.
- the first non- fungible token and the second non-fungible token can differ, and the first digital resource and the second digital resource may be the same (e.g., the digital assets may match and/or may include similar data with slight differences (e.g., the same scene being depicted with differing resolution and/or differing color saturation)).
- the duplication data 2102 can be processed 2110 to generate validation data 2122. Processing 2110 the duplication data 2102 can include obtaining and processing transaction data 2112 associated with each of the duplicate index datasets. The transaction data 2112 can be processed to determine whether any of the duplicates are associated with fraudulent transactions and/or fraudulent transactional trends. In some implementations, the transaction data 2112 can be processed to determine the more trendy and/or popular duplicate. Additionally and/or alternatively, the transaction data 2112 can be processed to determine different actors in the transactions that may be indicative of a non-fungible token’s validity. Price data may also be derived from the transaction data 2112 and can be utilized for index data validity. In some implementations, the price data can be obtained from a web page (e.g., a marketplace).
- a web page e.g., a marketplace
- source data 2114, URL and/or URI data 2116, and/or mint date data 2120 may be processed to determine a validity of each of the duplicates.
- the source data 2114 can be processed to determine which duplicates are derived from data of a trustworthy source.
- index data generated based on data directly obtained from a blockchain can be prioritized over index data generated based on data from an untrustworthy website (e.g., a website flagged as spam by one or more spam filters).
- the URL and/or URI data 2116 referencing the digital resource e.g., the digital asset
- the duplicate may be viewed as invalid. If the address has been changed, the validity may be put in question. Upscaling and movement can be a positive factor if the digital resource has not experienced a change that changes the nature of the digital resource. Additionally and/or alternatively, the mint date data 2120 can be utilized to determine which duplicate was published first, which can provide insight on possible non-fungible token validity.
- one or more other fraud detection 2118 techniques may be utilized to generate the validation data 2122.
- the validation data 2122 can include data descriptive of a determined validity (and/or authenticity) of each of the respective duplicate index datasets.
- the validation data 2122 can include one or more tags, labels, and/or annotations descriptive of determined factors that are descriptive of an index dataset validity.
- FIG. 20 depicts a block diagram of an example token index deduplication 2200 according to example embodiments of the present disclosure.
- the example token index deduplication 2200 can be configured to receive a plurality of index datasets 2202 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 2202, provide an updated index database 2214 that is adjusted based on the determined duplication.
- the token index deduplication 2200 can include duplicate determination block 2204 that is operable to determine which index datasets are associated with one another.
- Figure 20 depicts a plurality of index datasets 2202 being processed to determine a plurality of duplicate index datasets.
- the plurality of index datasets 2202 can be processed with a duplicate determination block 2204 to determine plurality of duplicates including a first duplicate 2206, a second duplicate 2208, and an nth duplicate 2210.
- the determination can be based on digital resources of different identified tokens being the same (e.g., match and/or within a threshold similarity).
- the plurality of duplicates (e.g., the first duplicate 2206, the second duplicate 2208, and/or the nth duplicate 2210) can be processed with an authenticity determination block 2212 to generate validation data.
- the validation data can include a determined authenticity of each of the duplicate index datasets.
- the authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
- the validation data can be utilized to adjust an index database to generate the updated index database. Adjusting the index database can include keeping 2214 one or more of the duplicate index datasets, merging 2216 one or more of the duplicate index datasets, and/or removing 2218 one or more of the duplicate datasets.
- One or more of the duplicate index datasets can be kept 2214 in order to ensure at least one of the non-fungible tokens associated with a particular digital resource is maintained for search purposes.
- the particular index dataset that is kept 2214 can be determined based on the source of the data, a determined authenticity (or validity), transaction data of one or more of the duplicates, the hosting location of the digital resource, the quality of the digital resource, the mint time, and/or metadata for the one or more duplicates.
- adjusting the index database can include merging 2216 the duplicate index datasets.
- certain duplicate index datasets can be selected for merging 2216.
- Merging 2216 the duplicate index datasets can include adding any non-duplicative data to one of the duplicate datasets and deleting the other duplicate index dataset.
- an index dataset generated based on data obtained directly from a blockchain can be complemented with data from an index dataset generated based on a web page, which can include descriptions of the digital resource, the author, and/or other data not stored directly on the blockchain.
- adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
- Adjusting the index database can include removing 2218 a particular index dataset.
- the index dataset generated based on the data obtained directly from the blockchain may be kept 2214 while the index dataset generated based on the data obtained from a web page may be removed 2218.
- the index dataset determined to be fraudulent may be removed 2218 (e.g., the non-fungible token data may be obtained from or reference to a scam website).
- Figure 21 depicts a block diagram of an example search results page generation 2300 according to example embodiments of the present disclosure.
- the systems and methods can receive a search query 2302.
- the search query 2302 can include one or more search terms, one or more input images, and/or one or more other inputs.
- the search query 2302 can be received from a user computing system associated with a user.
- the search query 2302 can be processed by a search engine to determine a plurality of search results 2304.
- the plurality of search results can be determined based on a determined responsiveness to the search query 2302.
- the plurality of search results can be processed by a ranking block 2306 to determine an order of display for the plurality of search results.
- the plurality of search results can be processed to determine whether to provide a warning or badge 2308 with one or more of the search results. For example, if one or more of the search results are non-fungible token search results, a badge indicating the type of search result may be provided. Additionally and/or alternatively, validation data associated with each of the respective non-fungible token search results may be provided via a warning or via a badge. In some implementations, a warning may be provided if a search result is indicative of a duplicate non-fungible token.
- the plurality of search results can be ranked by the ranking block 2306 based on a determined relevance, determined authenticity, and/or a determined context of each of the plurality of search results.
- a search results page 2310 can then be generated and provided based on the ranked search results and the determined warnings and badges.
- Figure 6 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain blockchain data from a blockchain computing system.
- the blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens.
- the blockchain data can be descriptive of blockchain transactions, which may be associated with a blockchain ledger.
- the code of the blockchain data can be associated with the one or more standards for token code.
- the computing system can store the blockchain data in a blockchain log.
- storing the blockchain data in a blockchain log can include preprocessing the blockchain data in a sandbox to determine if the blockchain data includes a bug, virus, and/or suspicious data.
- the preprocessing can utilize a sandbox environment to mitigate the spreading of any potential malicious content.
- a sandboxed blockchain node can be utilized to provide information about an address and/or other data in an “offline mode.”
- the computing system can process the blockchain data to determine token data associated with a non-fungible token of the plurality of non-fungible tokens.
- the determination can be based on the detection of a blockchain trigger event. Alternatively and/or additionally, the determination may be based on determining the token data is associated with a digital resource (e.g., a digital asset).
- the computing system can obtain standard data.
- the standard data can be descriptive of one or more standards for token code.
- the token data can be determined based at least in part on the one or more standards.
- the computing system can determine a portion of the token data includes descriptive data.
- the descriptive data can be associated with the non-fungible token.
- the descriptive data can include information determined to be associated with a particular identifying characteristic of a non-fungible token. The determination can be based on one or more standards associated with a structure of non-fungible token byte code.
- the descriptive data can include at least one of a digital asset associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non- fungible token, or creator identification associated with a creator of the non-fungible token.
- determining the portion of the token data includes the descriptive data can include parsing the token data to generate a plurality of segment datasets, processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications, and determining a particular segment dataset of the plurality of segment datasets includes descriptive data based on the plurality of segment classifications.
- determining the portion of the token data includes the descriptive data can include determining token identification data associated with the non-fungible token, determining a plurality of transactions in the blockchain data based on the token identification data, and determining the portion of the token data based on the plurality of transactions.
- the descriptive data can include transaction data (e.g., data descriptive of transaction history of a non-fungible token).
- the transaction data can be associated with an electronic ledger.
- the blockchain data may include embedded images, pointers, executable code, and other data structures that may be identified as descriptive data, which can be segmented from the blockchain data and stored.
- the computing system can segment the descriptive data from the blockchain data.
- a plurality of data strings associated with a particular non-fungible token can be identified and segmented from the blockchain data. The plurality of data strings can then be aggregated and/or concatenated.
- the computing system can store the descriptive data.
- the descriptive data can be stored in a database for retrieval and processing for future tasks.
- the storage may be locally and/or may be stored on a server computing system accessible by a plurality of users.
- Figure 7 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain blockchain data from a blockchain computing system.
- the blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens.
- the blockchain data can be obtained via a blockchain node.
- the blockchain data can be obtained from a repository separate from the blockchain computing system.
- obtaining the blockchain data can include accessing a blockchain node.
- the blockchain node can be associated with a particular blockchain.
- Obtaining the blockchain data can include recursively crawling the particular blockchain.
- the recursive crawling can occur at set intervals, trigger-based intervals (e.g., based on an event occurring (e.g., a social media post descriptive of anon-fungible token drop post)), and/or user-specified intervals.
- the computing system can process the blockchain data to determine a link in the blockchain data.
- the link can include at least one of a uniform resource identifier, a uniform resource locator, and/or an IPFS address.
- the computing system can obtain a landing page (and/or IPFS content) associated with the link.
- the landing page can be obtained based on the link.
- the landing page can include a digital asset.
- the digital asset can be a payload of a smart contract associated with the non-fungible token.
- the IPFS content may point to other (on
- the computing system can determine content data associated with the landing page.
- the content data can be associated with a non-fungible token of the plurality of non-fungible tokens.
- the content data can include a preview of a digital asset associated with the non-fungible token.
- the computing system can include determining a second link based on the landing page and obtaining a second landing page based on the second link.
- the second landing page can include the content data.
- the computing system can store the content data.
- the content data can include a preview of the digital resource (e.g., the digital asset) associated with the non- fungible token.
- obtaining and/or generating image data based on a digital resource for a non-fungible token can include a nested crawl to follow links and navigate to different landing pages.
- the content data can include a synthetic representation associated with the digital resource, (e.g., a synthetic representation of what the digital resource looks and/or sounds like).
- the synthetic representation can be analogous to (e.g., similar to) a preview of the digital resource.
- the synthetic representation can be indexed to be provided as a search result (e.g., an image search result, a video search result, and/or an audio search result) that can be displayed and/or provided adjacent to and/or with web2.0 search results.
- a digital resource can be accessed and processed to generate the synthetic representation.
- the synthetic representation can include a representative frame of a video digital asset.
- the synthetic representation can include a compressed video, a graphics interchange format, and/or an augmented video.
- Figure 8 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 800 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain blockchain data from a blockchain computing system.
- the blockchain data can include code associated with a plurality of non- fungible tokens.
- the computing system can process the blockchain data to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens.
- the first set of data can include freeform text data.
- processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include crawling the blockchain data to identify link data and obtaining content data associated with the link data.
- the computing system can process the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non- fungible tokens.
- the second set of data can include transactional data from an electronic ledger.
- processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include determining a plurality of datasets associated with non-fungible token transactions.
- the non-fungible token transactions can be associated with the particular non- fungible token.
- Processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include generating the second set of data based on the plurality of datasets.
- the computing system can segment the first set of data and the second set of data from the blockchain data.
- the segmentation can involve the utilization of a machine-learned segmentation model.
- the computing system can store the first set of data and the second set of data.
- the first set of data and the second set of data can be stored in a database.
- the first set of data and the second set of data can be provided to an indexing computing system for indexing data associated with the particular non-fungible token.
- Index data can then be generated for the particular non-fungible token based on the first set of data and the second set of data.
- the index data can include a preview of the digital resource associated with the non-fungible token. Additionally and/or alternatively, the index data can include a title, a description, transaction history, and/or publisher information associated with the non-fungible token. Generating index data can involve processing content data with one or more machine-learned models.
- the systems and methods disclosed herein can identify data associated with non- fungible tokens in a blockchain (e.g., in the code of a blockchain). For example, a plurality of non-fungible tokens can be identified and indexed based on a plurality of techniques.
- One technique can include analyzing (e.g., crawling) a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed.
- Another technique can include analyzing (e.g., crawling) anon-fungible token marketplace to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed.
- multiple techniques can be utilized for generating a more encompassing database for search.
- the systems and methods disclosed herein can include obtaining blockchain data from a blockchain computing system.
- the blockchain data can include one or more function signatures.
- the blockchain data can include script data associated with a digital asset.
- a particular portion (e.g., a subset) of the blockchain data can be determined to include token data.
- the token data can be descriptive of a non-fungible token associated with a digital asset.
- Index data can be generated based on the token data.
- the index data can include information obtained from the blockchain data.
- the index data can be associated with the digital asset.
- the index data can then be stored in an index database.
- the index database can then be utilized for a variety of purposes (e.g., non-fungible token search, data aggregation and analysis, training data for a machine-learned model, and/or for generating statistical representations).
- the systems and methods can obtain blockchain data (e.g., code from a blockchain) from a blockchain computing system (e.g., a decentralized computing system storing distributed data).
- the blockchain data can include one or more function signatures.
- the blockchain data can include script associated with a digital asset.
- the blockchain data may be obtained via a blockchain node.
- Blockchain data can include the code and/or records stored on the blockchain.
- the code can include the script and can be descriptive of a plurality of smart contracts.
- the blockchain data can include transactional data associated with the acquisition of digital assets and/or the exchange of digital currency (e.g., crypto currency).
- the transactional data may be descriptive of one or more mutations to the contract (e.g., “setURI”, etc.).
- the blockchain data can include metadata associated with one or more non-fungible tokens.
- the systems and methods disclosed herein can include determining a particular portion of the blockchain data includes token data.
- the token data can be descriptive of a non-fungible token associated with a digital asset.
- the systems and methods can determine a subset of the blockchain data includes token data based on the subset having a structure associated with one or more standards.
- the token data can be descriptive of a non-fungible token associated with the digital asset.
- the structure can include a format for code in the blockchain data associated with a standard format for non-fungible token code.
- the blockchain data can be parsed, and each parsed segment of the blockchain data can be processed to classify whether the parsed segment includes token data descriptive of a non-fungible token.
- the classification can be generated with a machine-learned classification model that has been trained to classify whether the parsed segment includes data associated with a non-fungible token (e.g., whether the data includes reference to a payload, meets one or more standards, and/or is descriptive of a smart contract).
- the blockchain data can be parsed with a machine- learned segmentation model trained to parse blockchain data based on one or more factors (e.g., syntax, semantics, structure, code length, payload characteristics, code features, latent encode markers, and/or another machine-learned characteristics).
- factors e.g., syntax, semantics, structure, code length, payload characteristics, code features, latent encode markers, and/or another machine-learned characteristics.
- determining the particular portion of the blockchain data includes the token data can include determining a particular portion of the blockchain data includes token data based on the one or more function signatures.
- the one or more function signatures can be associated with a non-fungible token standard.
- determining the particular portion of the blockchain data includes the token data can include determining the particular portion includes a smart contract associated with a digital media item.
- the digital media item can be a payload for the smart contract.
- the digital media item can be the digital asset.
- Index data can then be generated based on the token data.
- the index data can include information obtained from the blockchain data.
- the index data can be associated with the digital asset.
- the index data can include transaction data associated with the non-fungible token.
- the index data can include data descriptive of metadata associated with the non-fungible token.
- the index data can include a digital asset type associated with the digital asset.
- the digital asset type can be an augmented-reality rendering asset type, and the digital asset can be an augmented-reality rendering asset.
- the index data can include whether the URI (Uniform Resource Identifier) has changed and whether data (e.g., the pixels of an image and/or text of a text string) of the payload have changed when the URI has changed. Additionally and/or alternatively, the index data can include information descriptive of a change to the URI.
- the index data can include data that may be descriptive of factors that can be utilized to determine whether the non-fungible token involves fraud.
- generating index data based on the token data can include obtaining the digital asset associated with the non-fungible token, processing the digital asset to determine one or more features in the digital asset, and generating feature data descriptive of the one or more features.
- the index data can include the feature data.
- generating the index data can include determining the digital asset associated with the non-fungible token and processing the non-fungible token with a machine-learned model (e.g., a classification model, a detection model, a feature extractor model, and/or a semantics model) to determine one or more classifications, features, and/or attributes associated with the digital asset.
- a machine-learned model e.g., a classification model, a detection model, a feature extractor model, and/or a semantics model
- the one or more classifications, features, and/or attributes can be included in the index data.
- the index data can include a name associated with the non-fungible token and/or the digital asset, a name of the digital asset creator/publisher, transaction data (e.g., the current and/or past owners, purchase price, transactional trends, trends of related non-fungible tokens, gas price, etc.), a topic of the digital asset, non-fungible token metadata, pixel labels, non-fungible token description, freeform text associated with the non-fungible token, and/or notoriety associated with the non-fungible token, the publisher, or the creator.
- transaction data e.g., the current and/or past owners, purchase price, transactional trends, trends of related non-fungible tokens, gas price, etc.
- topic of the digital asset e.g., non-fungible token metadata, pixel labels, non-fungible token description, freeform text associated with the non-fungible token, and/or notoriety associated with the non-fungible token, the publisher, or the creator.
- the digital asset can include image data, video data, text data, audio data, a domain, an augmented-reality asset, a virtual-reality experience, and/or latent encoding data.
- the digital asset can include image data
- processing the digital asset can include processing the digital asset with a machine-learned model to determine one or more image features.
- generating the feature data descriptive of the one or more features can include determining one or more feature descriptor terms associated with the one or more features.
- the feature data can be descriptive of the one or more feature descriptor terms.
- the systems and methods can include determining a web content item is associated with the digital asset. A publication time associated with the web content item can be obtained. The systems and methods can determine a mint time associated with the non-fungible token based on the blockchain data. Time difference data can be generated based on the mint time and the publication time.
- the index data can include the time difference data.
- generating the index data based on the token data can include determining reference data associated with the digital asset based on the token data and determining a publisher of the non-fungible token based one the token data.
- the index data can include data descriptive of the reference data, the publisher, and a particular blockchain associated with the blockchain data.
- the systems and methods can store the index data in an index database.
- the index database can be stored on a server computing system.
- the index database can include a plurality of index datasets associated with a plurality of non-fungible tokens. For example, first token data can be identified to generate a first index dataset, second token data can be identified to generate a second index dataset, and third token data can be identified to generate a third index dataset.
- the first token data can be associated with a first non-fungible token
- the second token data can be associated with a second non-fungible token
- the third token data can be associated with a third non-fungible token.
- the index database can be utilized for a plurality of different uses.
- the index database can be utilized as a database for storing non-fungible token data for quick retrieval upon request or search.
- the systems and methods can include receiving a request for the digital asset from a user computing system and providing the token data to the user computing system.
- the index database can include index datasets generated based on blockchain data, web page data, and/or data obtained from other sources.
- the systems and methods disclosed herein can obtain web page data from a web page.
- the web page data can be descriptive of listing information for a non-fungible token.
- the web page data can include data associated with a digital asset.
- obtaining the web page data can include generating a snapshot of a web page listing the non-fungible token for sale.
- the web page data can be descriptive of a leaf page of a digital web platform website (e.g., a digital marketplace website) that hosts and/or facilitates the purchase and sales of the non-fungible tokens.
- the web page data can include a snapshot of a webpage, which can include image data, text data, and/or latent encoding data.
- a particular portion (e.g., a subset) of the web page data can be processed to determine the web page data includes token data.
- the token data can be descriptive of the non-fungible token associated with the digital asset.
- a digital marketplace website can be crawled to determine a plurality of leaf pages associated with a plurality of non-fungible tokens, and each leaf page can be processed to generate index data for each of the non-fungible tokens.
- Index data can then be generated based on the token data.
- the index data can include information obtained from the web page data.
- the index data can be associated with the digital asset. Generating the index data can include processing the image data, the text data, and/or the latent encoding data of the leaf page to determine data associated with a plurality of index fields to be included in the index data.
- the systems and methods can include storing the index data in an index database.
- the index database may be stored on a server computing system.
- the index database can be used to surface non-fungible token search results for a search engine. Additionally and/or alternatively, the index database can be utilized to determine statistics associated with non-fungible tokens. For example, trending non-fungible tokens of a certain type and/or creator can be determined and then utilized for non-fungible token ranking in marketplaces, search result pages, and/or for informing users for informed purchasing.
- the index database can include index data from a plurality of different sources (e.g., a plurality of different blockchains associated with a plurality of different blockchain computing systems and/or a plurality of different web pages associated with a plurality of different marketplaces).
- the index database can be utilized for a plurality of different tasks (e.g., search, statistical generation, and/or model training).
- the systems and methods can obtain blockchain data.
- the systems and methods can include determining a subset of the blockchain data is descriptive of a non-fungible token associated with a digital asset.
- Index data can be generated based at least in part on the subset of blockchain data.
- the index data can include reference data associated with the digital asset.
- the index data can be stored in a search database.
- the systems and methods can include receiving a search query from a user computing system.
- the systems and methods can determine the search query is associated with index data.
- a search result associated with the digital asset can then be provided to the user computing system.
- the systems and methods can include obtaining blockchain data (e.g., blockchain data obtained from a blockchain node associated with a blockchain computing system).
- the systems and methods can obtain web page data (e.g., marketplace data obtained via taking a snapshot of a web page associated with a non-fungible token marketplace).
- the systems and methods can include obtaining both blockchain data and web page data.
- the obtained data can be obtained via an application programming interface.
- the obtained data may be intervalley updated. The updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, type of digital asset, the particular blockchain, and/or based on cost.
- the systems and methods can then determine a subset of the obtained data (e.g., the blockchain data and/or the web page data) is descriptive of a non-fungible token associated with a digital asset.
- the determination can be based on a search for a particular structure, particular terms, and/or particular actors.
- the determination can be based on known digital asset creators/publishers, known digital asset attributes, known digital asset types, known digital asset names, known digital asset descriptions, metadata, and/or labels.
- the determination may be based on the subset of obtained data being EIP (EIP-721: Non- Fungible Token Standard, ETHEREUM IMPROVEMENT PROPOSALS (Jan.
- Index data can be generated based at least in part on the subset of obtained data (e.g., the blockchain data and/or the web page data).
- the index data can include reference data (e.g., script data referencing a URL (Uniform Resource Locator) or URI) associated with the digital asset.
- reference data e.g., script data referencing a URL (Uniform Resource Locator) or URI
- the index data can include digital asset creators/publishers, digital asset attributes, digital asset type, digital asset name, digital asset description, metadata, payload information, smart contract information, free form text, transactional data, blockchain information (e.g., information associated with the particular blockchain the non-fungible token is minted on), mint time, first publication time of digital asset, digital asset changes, the particular web page (e.g., the particular marketplace), and/or labels (e.g., pixel labels).
- the obtained data can be processed to determine a non-fungible token community associated with the particular non-fungible token, and the non-fungible token community can be indexed in the index data.
- the index data can be generated by processing the obtained data with one or more machine-learned models (e.g., a segmentation model, a detection model, a classification model, and/or a feature extractor model).
- Transaction history can be processed to determine price history for the non-fungible token, and the price history can be processed to index trend data and/or stability data. Additionally and/or alternatively, whether the non-fungible token was lazy minted or not may be indexed.
- the index data can include whether the non-fungible token was auctioned.
- the systems and methods can then store the index data in a search database.
- the search database can include a plurality of index datasets associated with a plurality of non- fungible tokens.
- the plurality of non-fungible tokens can be identified by processing data from a plurality of sources.
- the systems and methods can receive a search query from a user computing system.
- the search query can include one or more search terms.
- the search query can include one or more images, audio data, latent encoding data, and/or multimodal data.
- the search query can be processed to determine the search query is associated with the index data.
- the search query may be received and processed with a search engine.
- the search engine can be configured to crawl a blockchain, web pages, and/or the index database, or search database.
- determining the search query is associated with index data can include determining one or more search terms of the search query are descriptive of at least one of the digital asset, an author of the digital asset, or non-fungible token metadata.
- a search result associated with the digital asset can then be provided to the user computing system.
- the search result can include a preview of the digital asset.
- the search result can include an indicator indicating the search result is associated with a non-fungible token.
- providing the search result associated with the digital asset to the user computing system can include determining one or more web pages are associated with the search query, generating one or more general web results based on the one or more web pages, and providing a search results page to the user computing system.
- the search results page can include the search result and one or more general web results.
- the index data generated based on blockchain data and the index data generated based on web page data can be reconciled. For example, in an instance in which the blockchain data and web data are in conflict, the systems and methods can process the data, determine which data is more trustworthy, determine whether to merge the data, and/or determine whether to delete one or both sets of data.
- the index data may be intervalley updated.
- the updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, performance data, type of digital asset, the particular blockchain, time of minting (e.g., older non-fungible tokens may be updated less often due to larger computational cost associated with the crawl), and/or based on cost.
- the index database can include an index item field associated with the digital asset type such that non-fungible tokens associated with augmented-reality rendering assets can be differentiated from non-fungible tokens associated with images.
- the index data can include how to launch, run, and/or view the pay load (e.g., the digital asset). For example, a video player label, an image preview label, a particular augmented-reality application, and/or a particular device may be indexed.
- Data extraction for index data generation can be machine-learned, based on heuristics, and/or may be deterministic.
- the systems and methods disclosed herein can be utilized for search to allow a user to make a deliberate decision to invest or not invest in a particular non-fungible token.
- the systems and methods can be utilized to make Web3 technology easily accessible to a significant chunk of our users (and not just early adopters or crypto enthusiasts who are well versed in Web3).
- Web3 may work can be a significant departure from a general users mental model.
- the systems and methods may focus on simplifying the tech, jargon, applications, and/or setup.
- the blockchain computing system can include a decentralized system; however, the systems and methods disclosed herein can be implemented in a decentralized system, a closed-off ecosystem, and/or a hybrid system including portions completed by a decentralized system and portions completed by a centralized system.
- the systems and methods disclosed herein can be utilized for identity purposes.
- the systems and methods disclosed herein can involve and/or interface with a crypto wallet of a user to store user identity data to be utilized across Web3.
- a user may sign into websites, share personal data, prove identity, and/or transfer crypto currency based in part on the identity data.
- Wallet apps can be built-in to browser. In Web3, there may be a single mechanism to sign in while keeping your data for yourself.
- the blockchain computing system can store data descriptive of a variety of information, which can include non-fungible token Content IDs and/or ownership information for the non-fungible tokens. Non-fungible tokens can introduce scarcity and authenticity to digital items.
- the systems and methods disclosed herein can be implemented into a search engine to enhance image, video, and audio search.
- the systems and methods implemented into a search engine can signal to users who owns an image or video on the web and where the digital asset comes from, can enforce copyright rules for the digital asset, can detect if the digital asset has been tampered with or has trust issues, and/or can enable the sale or transfer of digital content on the web (e.g., non-fungible token marketplaces for images, music, and/or another form of digital asset).
- the systems and methods disclosed herein can include creator tokens.
- a Web3 model can enable creators to own their content and have a direct relationship with their followers/subscribers/fans, which can bypass today’s platforms. This can be very disruptive to video platforms, but may be an opportunity for search engines, which may not be on the top of the mind for creators.
- Creator tokens can be a way for fans to “invest” in their favorite creators while also enabling creators to create a community around their fans.
- the systems and methods disclosed herein can be utilized to provide an oracle system (e.g., a system that can provide service provider system for smart contracts to check whether something is real or has happened).
- an oracle system e.g., a system that can provide service provider system for smart contracts to check whether something is real or has happened.
- the systems and methods disclosed herein can include general information retrieval.
- the systems and methods can enable search to index the important parts of blockchain and make them accessible and useful.
- the systems and methods can include decentralized autonomous organization, which can be used to automate decision making.
- information about decentralized autonomous organization of search engines can be provided and may make the decision making more transparent.
- the systems and methods can enable ownership of any digital asset on the web by empowering creators and publishers to claim ownership of their digital content and set the rules of its usage in a scalable and high speed fashion. Additionally and/or alternatively, the systems and methods can enable ownership of any digital asset on the web by empowering search users to understand the provenance and history of a digital asset while also being able to take action on the digital asset in a way that is permitted by the original creator (e.g., buy the non-fungible token and/or use the non-fungible token as a ticket).
- the systems and methods can simultaneously create carrots for creators and publishers to publish non-fungible content on the web while also giving them tools to create this content and set rules of usage for the content.
- the carrots can be created to show who owns an image on the web or show items published by a creator/publisher, can block copies of an ‘owned’ digital asset or at least transfer any revenue generated from it to the original owner, can enable a user to sell and monetize generated content, and can enable royalty fees.
- the systems and methods can include tools for creators/publishers to create non-fungible content.
- the systems and methods can give creators/publishers easy tools to publish non-fungible content and set rules for the content usage that can both be done by casual creators as well as sophisticated large scale players.
- the systems and methods can include a smart contract blockchain that can be open, closed, and/or a hybrid of both.
- the systems and methods can be implemented to enable a non-fungible token marketplace across various digital asset platforms (e.g., an image platform, a video hosting platform, and/or a music hosting platform) and/or across various service platforms (e.g., a search engine, a social media platform, and/or a blog platform).
- various digital asset platforms e.g., an image platform, a video hosting platform, and/or a music hosting platform
- service platforms e.g., a search engine, a social media platform, and/or a blog platform.
- the creators and/or publishers can generate digital assets, mint the digital assets, sell the digital assets, and/or receive royalties for future sales of the digital assets.
- the non-fungible tokens can be utilized to access private chat groups or blogs inside different platforms and communities, can be used to set up avatars that are verified as being owned by a particular user, can enable quick communication between creators and owners, and can provide transactional history that can be used for future releases and purchases by providing insightful suggestions.
- the systems and methods disclosed herein can identify that a non-fungible token has been identified twice by comparing non-fungible tokens identified from a leaf page and non-fungible tokens identified by crawling a blockchain.
- a plurality of non-fungible tokens can be identified and indexed based on a plurality of techniques.
- One technique can include analyzing a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed.
- Another technique can include analyzing a non-fungible token leaf page (e.g., a web page associated with a non-fungible token marketplace) to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed.
- multiple techniques can be utilized for generating a more encompassing database for search; however, the use of multiple techniques can cause a non-fungible token to be indexed multiple times.
- the systems and methods disclosed herein can compare the identified marketplace non-fungible tokens against the identified blockchain non-fungible tokens to determine if a particular non-fungible token has been indexed multiple times.
- the comparison can include text processing, image processing, and/or latent encoding processing.
- Metadata, blockchain address data, and/or image data can be compared in order to determine a non-fungible token has been duplicated.
- the data of the two index events may be merged and/or all but one index event for that particular non-fungible token may be deleted.
- the systems and methods can include obtaining blockchain data from a blockchain computing system.
- the systems and methods can determine the blockchain data includes first token data.
- the first token data can be descriptive of a first non-fungible token associated with a first digital resource (e.g., a first digital asset).
- first index data can be generated based on the first token data.
- the first index data can be stored in an index database.
- Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface).
- the systems and methods can determine the web page data includes second token data.
- the second token data can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset). Second index data can be generated based on the second token data.
- the second index data can be stored in the index database.
- the systems and methods can determine the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) are a same digital resource (e.g., a same digital asset).
- the index database can be adjusted based on the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) being a same digital resource (e.g., a same digital asset).
- the determination of duplication may be based on other data. For example, matching contract addresses, matching token IDs, and/or matching blockchains.
- the index database can then be adjusted based on the determination.
- the systems and methods disclosed herein can deduplicate and/or flag duplicate instances of a token being indexed.
- the systems and methods can compare payloads of various tokens and contracts.
- the payloads (e.g., the digital assets) of different tokens can be compared to determine whether two or more tokens share the same payload (e.g., a digital asset with a slight variation (e.g., an image with a different saturation or cropping)).
- the determination can be generated by processing the payloads of different tokens with one or more machine-learned models.
- the determination can include image analysis (e.g., pixel analysis), video analysis, audio analysis, text analysis, and/or latent encoding analysis.
- Digital resources can be determined to be the same resource (e.g., the same asset) by determining the digital resources match and/or are substantially similar (e.g., within a threshold similarity).
- one or more actions can be determined.
- the one or more actions can include flagging in the index data of each associated token to indicate the respective tokens have the same payload.
- the one or more actions can include merging the index data of the tokens, removing the index data of at least one of the tokens, and/or generating data that links the index data of the related tokens.
- the one or more actions can be based at least in part on processing the transactional data of each of the tokens with duplicate payloads.
- the systems and methods can include processing a first transaction dataset and a second transaction dataset to determine whether the first token or the second token is more likely to be authentic (e.g., a valid token that was minted first and/or minted by the creator).
- the systems and methods can include fraud detection techniques, which may include the use of heuristics.
- the systems and methods can analyze the transaction data to determine the token associated with the original digital resource creator (e.g., the original digital asset creator). Alternatively and/or additionally, the systems and methods can process the transaction data to determine the token with the earliest mint date.
- the systems and methods can process the transaction data to determine whether one of the tokens has transactional trends that appear more fraudulent than the other. For example, a set of transactions consistently between two parties for a singular token may be a sign of fraudulent activity, while a chain of transactions between various parties during a trending period for that specific family of digital resources (e.g., that specific family of digital assets) may be viewed as a more authentic chain of transactions.
- the systems and methods may defer to the index data generated based on blockchain data obtained from a blockchain node over index data generated based on web page data (e.g., marketplace data).
- the systems and methods can utilize prior data generated based on other validation analysis to determine the authenticity and/or validation of the present analysis.
- the URL, the URI, and/or the IPFS address of the payload can be processed to determine the valid token. For example, a URL, URI, and/or IPFS address with an invalid address, outdated address, and/or a heavily altered address may be determined to be invalid.
- URLs and/or URIs referencing a questionable website can cause the associated token to be downranked or dropped in the index database.
- different blockchains and/or different web platforms may be prioritized over one another.
- an on-chain source may be prioritized over off- chain source.
- digital resources embedded directly on the blockchain data may be prioritized over digital resources merely referenced on-the-chain.
- Metadata indexed in the index database may be used to determine an authenticity of a particular token.
- the flagging or alert of questionable, or potentially fraudulent, tokens can be utilized to surface warnings when retrieving the questionable tokens (e.g., a warning provided with the search result for the questionable token).
- digital assets may be discussed in detail below, the systems and methods can be implemented for any digital resource (e.g., any digital resource associated with a non-fungible token).
- the systems or methods may flag common, or non-scarce, digital resources (e.g., the same artist may create 100 copies of the same piece of digital art intentionally (e.g., in a “limited series”, etc.).
- the systems and methods can obtain blockchain data from a blockchain computing system.
- the blockchain data can be associated with a particular blockchain and/or from a plurality of blockchains. Additionally and/or alternatively, the blockchain data can be obtained from a blockchain node.
- the blockchain computing system can include a decentralized, distributed computing system that stores data associated with a plurality of non-fungible tokens and a plurality of transactions associated with the non-fungible tokens.
- the blockchain data can be determined to include first token data.
- the first token data can be descriptive of a first non-fungible token associated with a first digital asset.
- the blockchain computing system can include a distributed computing system including a plurality of computing devices.
- the blockchain data can include embedded code associated with a plurality of non-fungible tokens.
- determining the blockchain data includes first token data can include crawling embedded code.
- the blockchain data can include the embedded code.
- the blockchain data can be processed to identify one or more code characteristics indicative of a non-fungible token (e.g., EIP compliant structure).
- the blockchain data can be parsed into segments that can be individually processed to determine if the segment includes non-fungible token data.
- First index data can be generated based on the first token data.
- the first index data can be stored in an index database.
- the first token data can include data descriptive of the payload (e.g., the digital asset associated with the non-fungible token).
- the first token data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
- Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface).
- the web page data can include a snapshot of a digital resource listing webpage associated with the second non-fungible token.
- the digital web platform user interface e.g., the digital marketplace user interface
- a leaf page can be obtained from a website associated with non-fungible tokens. The leaf page can be processed to generate the web page data.
- the web page data can be determined to include second token data.
- the second token data can be descriptive of a second non-fungible token associated with a second digital asset.
- the second token data can include reference data associated with the second digital asset.
- the second digital asset can depict an augmented version of a scene depicted in the first digital asset.
- Second index data can be generated based on the second token data.
- the second index data can be stored in the index database.
- the second index data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
- the first digital asset and the second digital asset can be determined to be a same digital asset.
- the determination can be based on determining the first digital asset of the first non-fungible token and determining the second digital asset of the second non-fungible token.
- the first digital asset and the second digital asset can be compared to determine similar and/overlapping data.
- the determination can include image processing, text processing, audio processing, video processing, and/or latent encoding processing.
- the determination can include processing the first digital asset and the second digital asset with one or more machine-learned models (e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models).
- the index database can be adjusted based on the first digital asset and the second digital asset being a same digital asset.
- the particular type of adjustment may be based on the transaction data of the non-fungible tokens, the source of the token data, and/or a variety of other factors.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include removing the second index data from the index database.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include merging the first index data and the second index data to generate augmented index data.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a first text entry associated with the first index data based on the first digital asset and the second digital asset being the same digital asset.
- adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a second text entry associated with the second index data based on the first digital asset and the second digital asset being the same digital asset.
- the second index entry can be stored in the index database.
- the systems and methods can include receiving a search request.
- the search request can be received from a user computing system.
- the search request can include one or more search terms, one or more input images, and/or one or more other forms of input data.
- One or more search results can be determined based on the index database.
- the one or more search results can be determined based on responsiveness to the search request. Additionally and/or alternatively, the one or more search results can be determined based on context data (e.g., a user computing system context, a global context, and/or a non-fungible token context.
- context data e.g., a user computing system context, a global context, and/or a non-fungible token context.
- the one or more search results can then be provided for display.
- the one or more search results can include a particular search result associated with the first digital asset.
- the one or more search results can be provided for display with one or more labels (e.g., a non-fungible token label, scam website label, questionable transactions label, a validation label, and/or a duplicate non-fungible token label).
- the systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain.
- the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace).
- a particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second index entries.
- the index database can be adjusted.
- the systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain.
- the plurality of first index entries can include a plurality of first index datasets associated with a plurality of first non-fungible tokens.
- the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace).
- the digital web platform can include a user interface for providing a plurality of non-fungible tokens for sale.
- the plurality of second index entries can include a plurality of second index datasets associated with a plurality of second non- fungible tokens.
- a particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second index entries.
- the determination can include comparing each of the plurality of first index entries with each of the plurality of second index entries.
- the comparison can include obtaining a plurality of first digital assets associated with the plurality of first index entries. Additionally and/or alternatively, the comparison can include obtaining a plurality of second digital assets associated with the plurality of second index entries.
- Each of the plurality of first digital assets can be compared to each of the plurality of second digital assets.
- the comparison can include processing the digital assets with one or more machine-learned models to determine if and/or which digital assets are the same (e.g., the digital assets match and/or are within a threshold similarity).
- the first payload can include a first digital asset.
- the second payload can include a second digital asset.
- the first digital asset and the second digital asset can match and/or be similar.
- determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token.
- the first non-fungible token can be associated with the particular first index entry.
- the second non-fungible token can be associated with the particular second index entry.
- the index database can be adjusted. Adjusting the index database can include merging index entries, removing index entries, and/or adding tags to each of the index entries determined to be duplicative.
- the systems and methods can include obtaining a particular index entry and a plurality of index entries.
- the plurality of index entries can be obtained from an index database.
- the particular index entry and the plurality of index entries can be processed to generate duplication data.
- the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry.
- Validation data can be generated based at least in part on the duplication data.
- the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry.
- the validation data can be provided as an output.
- the systems and methods can include obtaining a particular index entry and a plurality of index entries.
- the plurality of index entries can be obtained from an index database.
- the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain.
- the plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
- the particular index entry and the plurality of index entries can be processed to generate duplication data.
- the duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry.
- Validation data can be generated based at least in part on the duplication data.
- the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry.
- the validation data can be based at least in part on a timestamp associated with the particular index entry.
- the validation data can be descriptive of whether the non-fungible token was minted before another publication of the digital asset.
- generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital asset. The determination can be based on transaction data, mint times, publication times, particular blockchains, source of token data, the payload URI data, and/or digital asset quality.
- the validation may be generated with one or more machine-learned models.
- the validation data can be provided as an output.
- the validation data can be provided via one or more user-interface elements (e.g., banners, pop-ups, user-interface labels, and/or user-interface annotations).
- the validation data can be provided for display adjacent to a preview of the digital asset.
- the systems and methods can leverage blockchain trigger event determination and processing to identify data descriptive of a non-fungible token.
- the systems and methods can include obtaining blockchain data.
- the blockchain data can include byte code associated with a blockchain.
- the blockchain data can be processed to determine a subset of the blockchain data includes candidate token data.
- the candidate token data can be associated with a blockchain trigger event.
- An output action associated with the blockchain trigger event can be determined.
- the output action can be associated with a digital resource.
- the output action can be processed to determine the candidate token data is descriptive of a non-fungible token.
- Identification data can be provided as an output.
- the identification data can be descriptive of the candidate token data being associated with the non-fungible token.
- the systems and methods can obtain blockchain data.
- the blockchain data can be associated with a blockchain that stores data in a decentralized and distributed system.
- the blockchain data can include byte code associated with a blockchain.
- the blockchain data can be associated with a plurality of non-fungible tokens.
- the plurality of non-fungible tokens can be associated with a plurality of digital resources (e.g., a plurality of digital assets).
- the blockchain data can be obtained from a blockchain node associated with a particular blockchain.
- the blockchain data can include prefiltered blockchain data that has been processed to filter out data that may not be utilized during identification and/or indexing.
- the systems and methods can process the blockchain data to determine a subset of the blockchain data includes candidate token data.
- the candidate token data can be associated with a blockchain trigger event (e.g., an if-then event that can cause a transfer of a digital resource (e.g., a digital asset)).
- the candidate token data can be determined based on one or more standards associated with non-fungible token code standards. Additionally and/or alternatively, the candidate token data can include reference data associated with the digital resource.
- the blockchain trigger event can be associated with a smart contract.
- the candidate token data can be determined by parsing the blockchain data into segments that can be individually processed.
- the candidate token data may be determined based on the determination that the subset of blockchain data is associated with a smart contract.
- the smart contract can include a blockchain trigger event, and the blockchain trigger event can include an event in which a pay load (e.g., a digital resource) is transferred in response to a transfer request (e.g., a purchase of the digital resource with crypt currency).
- a pay load e.g., a digital resource
- a transfer request e.g., a purchase of the digital resource with crypt currency
- An output action associated with the blockchain trigger event can be determined.
- the output action can be associated with a digital resource.
- the output action can be a resulting action in response to the blockchain trigger event occurring.
- the output action can be associated with an embedded uniform resource identifier and/or an embedded uniform resource locator.
- processing the output action to determine the candidate token data is descriptive of the non-fungible token can include determining an entity associated with the output action and determining the entity is a digital resource (e.g., a digital asset) being transferred in response to the blockchain trigger event.
- the entity can be processed to determine the smart contract is an empty contract.
- the identification data may be descriptive of the candidate token data not being data to index.
- processing the output action to determine the candidate token data is descriptive of the non-fungible token can include determining the output action includes a link to a landing address (e.g., a landing web page and/or a landing storage file). Landing data associated with the landing address can be obtained. The landing data can then be processed to determine the landing data includes a digital resource (e.g., a digital asset). The digital resource can be determined to be associated with the non-fungible token.
- a landing address e.g., a landing web page and/or a landing storage file.
- Landing data associated with the landing address can be obtained.
- the landing data can then be processed to determine the landing data includes a digital resource (e.g., a digital asset).
- the digital resource can be determined to be associated with the non-fungible token.
- processing the output action to determine the candidate token data is descriptive of the non-fungible token can include obtaining, via an application programming interface, a uniform resource identifier.
- the output action can be processed to determine the candidate token data is descriptive of a non-fungible token.
- the determination can be determined based on the output action being associated with a digital resource (e.g., a digital asset). In some implementations, the determination can be determined based on the output action being descriptive of an intent for the smart contract to be associated with a non-fungible token.
- Identification data can be provided as an output.
- the identification data can be descriptive of the candidate token data being associated with the non-fungible token.
- the identification data can be generated based on the determination that the candidate token data is descriptive of the non-fungible token.
- the identification data can be descriptive of the candidate token data including token data for indexing.
- the systems and methods can include determining a validity of the candidate token data.
- the validity can be determined based on whether the candidate token data includes determined problematic characteristics.
- the identification data may be generated based at least in part on the validity.
- the systems and methods can include processing the output action to determine a digital resource (e.g., a digital asset) associated with the non- fungible token.
- the digital resource can be processed to determine a quality of the digital resource (e.g., the quality of the digital asset).
- the systems and methods can determine whether to index the candidate token data based at least in part on the identification data and the quality of the digital resource.
- the quality of the digital resource can be determined based on a resolution of the digital resource, a size of the digital resource, a machine-learned determination (e.g., an output of a machine-learned model that has processed data associated with the digital resource), and/or a determined uniqueness of the digital resource.
- the systems and methods can leverage standard data to identify token data in a blockchain code.
- the systems and methods can include obtaining blockchain data.
- the blockchain data can include byte code associated with a blockchain.
- the blockchain data can be processed to determine a subset of the blockchain data includes candidate token data.
- the candidate token data can be associated with a blockchain trigger event.
- the systems and methods can include obtaining standard data.
- the standard data can include one or more standards associated with standards for a non-fungible token.
- the candidate token data can be processed to determine the candidate token data is associated with the one or more standards.
- Identification data can be generated based on the candidate token data being associated with the one or more standards.
- the identification data can be descriptive of the candidate token data being associated with the non-fungible token.
- the identification data can be provided as output.
- the systems and methods can obtain blockchain data.
- the blockchain data can include byte code associated with a blockchain.
- the blockchain data can be associated with a plurality of smart contracts.
- the plurality of smart contracts may include a plurality of if-then logic sets.
- obtaining the blockchain data can include obtaining first node data from a blockchain node.
- the blockchain node can be associated with a particular blockchain.
- Obtaining the blockchain data can further include processing the first node data in a sandbox (e.g., an isolated computer environment to mitigate the spread of any potential unexpected consequences (e.g., a computer bug)) to generate a first portion of the blockchain data and storing the first portion of the blockchain data.
- a sandbox e.g., an isolated computer environment to mitigate the spread of any potential unexpected consequences (e.g., a computer bug)
- obtaining the blockchain data can include obtaining second node data from the blockchain node.
- the blockchain node can be associated with the particular blockchain.
- obtaining the blockchain data can further include processing the second node data in the sandbox to generate a second portion of the blockchain data and storing the second portion of the blockchain data.
- the blockchain data can be processed to determine a subset of the blockchain data includes candidate token data.
- the candidate token data can be associated with a blockchain trigger event.
- the blockchain trigger event can include an if- then event such that if a certain event occurs, a digital resource can have a transfer in ownership.
- the candidate token data may be determined based on the detection of a blockchain trigger event in the byte code of the blockchain.
- the systems and methods can obtain standard data.
- the standard data can include one or more standards associated with standards for a non-fungible token.
- the standards can be associated with predetermined interfaces for uniform interfacing with different non- fungible tokens.
- the smart contract structure can conform to the standards to enable a standard application programming interface to facilitate interactions with different non- fungible tokens (e.g., regardless of the particular publisher).
- the candidate token data can be processed to determine the candidate token data is associated with the one or more standards. The determination can include searching the candidate token data to determine whether one of the predetermined interfaces is included in the candidate token data. In some implementations, the candidate token data can be processed to identify whether a particular blockchain trigger event language (e.g., a function signature, which may include a particular string matching one of the predefined string templates for non-fungible tokens as indicated by the one or more standards) is included in the candidate token data.
- a particular blockchain trigger event language e.g., a function signature, which may include a particular string matching one of the predefined string templates for non-fungible tokens as indicated by the one or more standards
- Identification data can be generated based on the candidate token data being associated with the one or more standards.
- the identification data can be descriptive of the candidate token data being associated with the non-fungible token.
- the identification data can be provided as output.
- the identification data can be provided to a user computing system.
- the identification data can be provided to an indexing computing system to instruct the index computing system whether to index the candidate token data. For example, if the identification data is descriptive of the candidate token data being associated with a non-fungible token, the candidate token data may be indexed. Alternatively and/or additionally, if the identification data is descriptive of the candidate token data not being associated with a non-fungible token, the candidate token data may not be indexed.
- the candidate token data determined to be associated with a non- fungible token can be identified token data that can be stored for indexing and/or for other purposes (e.g., for machine-learning training to training one or more models to detect and identify token data associated with non-fungible token(s)).
- Index data can then be generated based on the candidate token data and the identification data.
- the identification data can be utilized to determine whether to and at what extent to index the candidate token data.
- data descriptive of the identification data can be indexed with other data associated with the candidate token data.
- the blockchain trigger event can be processed to determine a digital asset associated with the non-fungible token.
- the digital asset can be processed to determine the digital asset is vulgar, and the systems and methods can determine whether to index the candidate token data based at least in part on the identification data and the digital asset being vulgar.
- the token data may be identified based on a determined intent.
- the systems and methods can include obtaining blockchain data.
- the blockchain data can include byte code associated with a blockchain.
- the blockchain data can be processed to determine a subset of the blockchain data includes candidate token data.
- the candidate token data can be associated with a blockchain trigger event.
- the candidate token data can be processed to determine an intent associated with the candidate token data.
- the candidate token data can include reference data associated with a digital resource.
- the intent can be processed to determine the candidate token data is descriptive of a non-fungible token.
- identification data can be provided as an output. The identification data can be descriptive of the candidate token data being associated with the non-fungible token.
- the systems and methods can obtain blockchain data.
- the blockchain data can include byte code associated with a blockchain.
- the blockchain data may be obtained from a blockchain node. Alternatively and/or additionally, the blockchain data may be obtained from anon-blockchain repository.
- the blockchain data can be processed to determine a subset of the blockchain data includes candidate token data.
- the candidate token data can be associated with a blockchain trigger event.
- the candidate token data can include data descriptive of a smart contract.
- the blockchain trigger event can be an event that triggers the transfer of a payload of a smart contract.
- the candidate token data can be processed to determine an intent associated with the candidate token data.
- the candidate token data can include reference data associated with a digital resource.
- the intent can be determined based at least in part on the blockchain trigger event. Alternatively and/or additionally, the intent can be determined based at least in part on freeform text in the candidate blockchain data.
- the intent can be a minting intent to publish the non-fungible token on the blockchain.
- the intent can be determined by processing the candidate token data with a machine-learned model. The machine-learned model can be trained to determine whether the candidate token data is descriptive of script data structured to provide a non-fungible token functionality.
- the intent can be processed to determine the candidate token data is descriptive of a non-fungible token. For example, the intent can be processed to determine whether the intent meets a threshold likelihood of being a non-fungible token intent.
- the systems and methods can provide identification data as an output.
- the identification data can be descriptive of the candidate token data being associated with the non-fungible token.
- the identification data can be generated based at least in part on the determination that the intent is a non-fungible-token intent.
- the systems and methods disclosed herein can identify non-fungible token data based on whether the actions associated with a smart contract match (e.g., are the same or similar to) the actions of how anon-fungible token would act.
- the smart contract may include a “get URI” that can include an application programming interface for pulling a uniform resource identifier.
- the smart contract may include similar structure to one or more EIP-721 standards (EIP-721: Non-Fungible Token Standard, ETHEREUM IMPROVEMENT PROPOSALS (Jan. 24, 2018), https://eips.ethereum.org/EIPS/eip-72E).
- the blockchain can be crawled to identify payloads that may match (e.g., be the same as or substantially similar to) a digital asset of a non-fungible token.
- the systems and methods may identify token data sets even if the dataset includes deviations from the one or more standards.
- the systems and methods can include one or more pre-filtering techniques.
- the systems and methods can include filtering out any dataset associated with a suspicious address, a suspicious embedding, and/or a suspicious actor (e.g., an unknown publisher or an owner/publisher with an association to past scam- related non-fungible tokens).
- the identified token data can be further processed to determine whether and/or how to index the identified token data.
- the systems and methods can process the candidate token data to determine whether the token data is suspicious, potentially includes a bug, and/or includes a low quality digital asset.
- the token data may be determined to be suspicious based on an embedded uniform resource identifier and/or an embedded uniform resource locator. Alternatively and/or additionally, the token data may be determined to be suspicious based on the transaction data for the non-fungible token (e.g., suspicious strings of transactions, suspicious actors in the transactions, suspicious context surrounding the minting, etc.).
- the non-fungible token e.g., suspicious strings of transactions, suspicious actors in the transactions, suspicious context surrounding the minting, etc.
- a low quality digital resource e.g., a low quality digital asset
- can be a digital asset with little to no distinguishing features e.g., a white noise audio clip or a digital asset that is the same or substantially similar to a plurality of other digital assets or media files that pre-date the date of minting.
- a low quality digital asset can be a digital asset with poor resolution, heavy pixelation, heavy noise, file errors, and/or small in relative size to other non-fungible token digital assets of the same type or class.
- a low quality digital asset can be a digital asset with vulgar and/or offensive content.
- the systems and methods may obtain the digital asset associated with the token data.
- the digital asset can be processed to determine whether the digital asset includes vulgar and/or offensive material. If the digital asset is determined to include vulgar and/or offensive content, the respective token data may be flagged and/or tagged.
- the systems and methods can determine not to index the token data based on the tag and/or may index the token data with a tag indicating the vulgar and/or offensive nature of the digital asset.
- the tag can then be utilized to limit the surfacing of the indexed data for only a subset of users (e.g., users that allow the surfacing of vulgar and/or offensive content).
- the quality of the non-fungible token may be determined based on how compliant the token data is with EIP and ERC standards for non- fungible tokens.
- the compliance may be weighted based on which standards are met and which standards the token data is deficient.
- the quality can be based on whether the uniform resource identifier can be used to navigate to the digital asset without edits.
- the name and/or description associated with the token data can be processed to determine whether the name and/or description meet certain naming patterns or description patterns.
- token data can be identified as being associated with a particular non-fungible token grouping (e.g., a particular community) based on a determined artist name, a determined publisher, and/or by metadata associated with the non-fungible token. The grouping may be determined based on minting date, an association with an event, and/or based on the transaction history of the purchasers.
- the token data may be identified by processing the blockchain data and identifying a method signature.
- the method signature can be associated with the first four bytes of a hash.
- the method signature can be associated with a set uniform resource identifier with two parameters.
- the first parameter can include a token ID for the particular non-fungible token
- the second parameter can include a string of data.
- the systems and methods disclosed herein can crawl the blockchain by utilizing a peer to peer node running on one or more computing devices.
- the systems and methods can passively “listen” and then dump any new data into a log to be later processed.
- the systems and methods may involve “live watching” of the node at intervals (e.g., a manually set interval, a predetermined interval, and/or an automatically determined interval).
- the systems and methods can crawl the blockchain to determine if any changes have occurred and any change may be identified and added to the log.
- the systems and methods may leverage application programming interfaces to identify and obtain new data.
- the systems and methods can utilize non-blockchain repositories to obtain blockchain data.
- a third party application programming interface may obtain and store the blockchain data in a non-blockchain repository, which can be accessed by the systems and methods to obtain the blockchain data for processing.
- the systems and methods may search for a contract address and a token ID to identify token data. Additionally and/or alternatively, the systems and methods may crawl the web to identify non-fungible token drop events and/or lazy minting events. The systems and methods may monitor messaging applications and/or social media platforms to obtain data on potential minting events.
- the obtaining and processing of the blockchain data from the blockchain node can include one or more security techniques for mitigating the possibility of corrupting data due to opening or processing a bug or computer virus.
- the blockchain data can be obtained and stored in a sandbox.
- the data can be processed in the sandbox before indexing to ensure bugs and/or viruses do not affect the index database.
- the systems and methods can include customized blockchain nodes for different tasks.
- a plurality of blockchain nodes can be configured to obtain and filter blockchain data for a plurality of different purposes.
- One node may filter the blockchain data to obtain and process transactional data, while another node may filter the blockchain data to obtain and process newly minted non-fungible tokens.
- different nodes may be configured to identify and obtain data associated with different non-fungible token types.
- one node may be configured to identify and obtain token data for non-fungible tokens associated with images, while another node may be configured to identify and obtain token data for non-fungible tokens associated with domains.
- the plurality of nodes may be associated with different blockchains and/or may be associated with filtering based on different identification techniques. For example, a first node may obtain blockchain data to identify token data based on the identification of a digital asset payload, a second node may obtain data to be processed to determine token data based on naming patterns, and a third node may obtain blockchain data to process to determine token data based on one or more non-fungible token standards.
- the systems and methods may probe blockchains by sending beacon transactions to gauge and/or track network health, along with potentially tracking other data characteristics. The probing can be utilized in updating “data fetch” strategies, or approaches.
- the systems and methods may leverage more complex, dynamic fetching strategies, which may back off until transaction rates tick back up. The adjustment can help to potentially lower the cost of obtaining the “latest” data from a blockchain.
Abstract
Systems and methods for extracting data from blockchain transactions can include obtaining blockchain data, processing the blockchain data to determine token data, segmenting the token data from the blockchain data, and storing the segmented token data. The systems and methods can be utilized to extract descriptive data (e.g., non-fungible token titles, non-fungible token descriptions, and/or non-fungible token labels), content data (e.g., a preview of a digital resource associated with the non-fungible token), and/or transaction data (e.g., data descriptive of the transaction history of the non-fungible token). The extracted data can be indexed and can then be provided in a search results page based on a search query.
Description
EXTRACTING DATA FROM A BLOCKCHAIN
FIELD
[0001] The present disclosure relates generally to extracting token data from blockchain data. More particularly, the present disclosure relates to accessing a blockchain node, obtaining blockchain data, processing the blockchain data to identify token data, and extracting the token data.
BACKGROUND
[0002] Search engines can receive search queries and provide search results listing web pages determined to be responsive to the search query. The search engine may crawl the web to determine web pages that have certain terms. The search results can be generally indicated with captions and/or text titles. The search results can include text results, video results, and image results.
[0003] However, searching and identifying non-fungible token search results can be difficult. Searching for non-fungible tokens can be limited to finding general web pages that are associated with the different non-fungible tokens; however, the search engine may be unable to properly identify and verify the non-fungible token search result as a non-fungible token.
SUMMARY
[0004] Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.
[0005] One example aspect of the present disclosure is directed to a computing system. The system can include one or more processors and one or more non-transitory computer- readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations. The operations can include obtaining blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non-fungible tokens. The operations can include storing the blockchain data in a blockchain log and processing the blockchain data to determine token data associated with a non-fungible token of the plurality of non-fungible tokens. The operations can include determining a portion of the token data comprises descriptive data. In some implementations, the descriptive data can be associated with the
non-fungible token. The operations can include segmenting the descriptive data from the blockchain data. In some implementations, the operations can include storing the descriptive data.
[0006] In some implementations, the descriptive data can include information determined to be associated with a particular identifying characteristic of a non-fungible token. The determination can be based on one or more standards associated with a structure of non-fungible token byte code. In some implementations, determining the portion of the token data includes the descriptive data can include parsing the token data to generate a plurality of segment datasets, processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications, and determining a particular segment dataset of the plurality of segment datasets includes descriptive data based on the plurality of segment classifications.
[0007] In some implementations, the operations can include obtaining standard data. The standard data can be descriptive of one or more standards for token code. The token data can be determined based at least in part on the one or more standards. In some implementations, the code of the blockchain data can be associated with the one or more standards for token code. In some implementations, determining the portion of the token data includes the descriptive data can include determining token identification data associated with the non- fungible token, determining a plurality of transactions in the blockchain data based on the token identification data, and determining the portion of the token data based on the plurality of transactions. The descriptive data can include at least one of a digital asset associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non-fungible token, or creator identification associated with a creator of the non-fungible token.
[0008] Another example aspect of the present disclosure is directed to a computer- implemented method. The method can include obtaining, by a computing system including one or more processors, blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non-fungible tokens. The method can include processing, by the computing system, the blockchain data to determine a link in the blockchain data. The method can include obtaining, by the computing system, a landing page associated with the link. In some implementations, the landing page can be obtained based on the link. The method can include determining, by the computing system, content data associated with the landing page. The content data can be associated with a non-
fungible token of the plurality of non-fungible tokens. The method can include storing, by the computing system, the content data.
[0009] In some implementations, the link can include at least one of a uniform resource identifier or a uniform resource locator. The landing page can include a digital asset. The digital asset can be a payload of a smart contract associated with the non-fungible token. In some implementations, the content data can include a preview of a digital asset associated with the non-fungible token.
[0010] In some implementations, the method can include determining a second link based on the landing page and obtaining a second landing page based on the second link. The second landing page can include the content data. In some implementations, obtaining the blockchain data can include accessing a blockchain node. The blockchain node can be associated with a particular blockchain. Obtaining the blockchain data can include recursively crawling the particular blockchain.
[0011] Another example aspect of the present disclosure is directed to one or more non- transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations. The operations can include obtaining blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non- fungible tokens. The operations can include processing the blockchain data to determine a first set of data associated with a particular non-fungible token of the plurality of non- fungible tokens. The operations can include processing the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non- fungible tokens and storing the first set of data and the second set of data.
[0012] In some implementations, the operations can include segmenting the first set of data and the second set of data from the blockchain data. The first set of data can include freeform text data. The second set of data can include transactional data from an electronic ledger. In some implementations, the operations can include generating index data for the particular non-fungible token based on the first set of data and the second set of data.
[0013] In some implementations, processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include crawling the blockchain data to identify link data and obtaining content data associated with the link data. In some implementations, processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include determining a plurality of datasets associated
with non-fungible token transactions. The non-fungible token transactions can be associated with the particular non-fungible token. Processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non- fungible tokens can include generating the second set of data based on the plurality of datasets.
[0014] Other aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices. [0015] These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.
BRIEF DESCRIPTION OF THE DRAWINGS
[0016] Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which:
[0017] Figure 1A depicts a block diagram of an example computing system that performs token data extraction and non-fungible token indexing according to example embodiments of the present disclosure.
[0018] Figure IB depicts a block diagram of an example computing device that performs token data extraction and non-fungible token indexing according to example embodiments of the present disclosure.
[0019] Figure 2 depicts a block diagram of an example token data extraction system according to example embodiments of the present disclosure.
[0020] Figure 3 depicts a block diagram of an example token data aggregation system according to example embodiments of the present disclosure.
[0021] Figure 4 depicts a block diagram of an example token data generation system according to example embodiments of the present disclosure.
[0022] Figure 5 depicts a block diagram of an example synthetic representation generation system according to example embodiments of the present disclosure.
[0023] Figure 6 depicts a flow chart diagram of an example method to perform token data obtainment according to example embodiments of the present disclosure.
[0024] Figure 7 depicts a flow chart diagram of an example method to perform token data obtainment according to example embodiments of the present disclosure.
[0025] Figure 8 depicts a flow chart diagram of an example method to perform token data obtainment according to example embodiments of the present disclosure.
[0026] Figure 9A depicts a block diagram of an example computing system that performs token data obtainment and indexing according to example embodiments of the present disclosure.
[0027] Figure 9B depicts a block diagram of an example computing device that performs token data obtainment and indexing according to example embodiments of the present disclosure.
[0028] Figure 9C depicts a block diagram of an example computing system that performs token data obtainment and indexing according to example embodiments of the present disclosure.
[0029] Figure 10 depicts a block diagram of an example indexing system according to example embodiments of the present disclosure.
[0030] Figure 11 depicts a block diagram of an example index dataset according to example embodiments of the present disclosure.
[0031] Figure 12 depicts a block diagram of an example search according to example embodiments of the present disclosure.
[0032] Figure 13A depicts an illustration of an example search results page according to example embodiments of the present disclosure.
[0033] Figure 13B depicts an illustration of an example search results page according to example embodiments of the present disclosure.
[0034] Figure 13C depicts an illustration of an example search results page according to example embodiments of the present disclosure.
[0035] Figure 14 depicts a block diagram of an example token data identification system according to example embodiments of the present disclosure.
[0036] Figure 15 depicts a block diagram of an example index filtering system according to example embodiments of the present disclosure.
[0037] Figure 16 depicts a block diagram of an example index determination system according to example embodiments of the present disclosure.
[0038] Figure 17 depicts a block diagram of an example quality determination system according to example embodiments of the present disclosure.
[0039] Figure 18 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
[0040] Figure 19 depicts a block diagram of an example index validity determination according to example embodiments of the present disclosure.
[0041] Figure 20 depicts a block diagram of an example token index deduplication according to example embodiments of the present disclosure.
[0042] Figure 21 depicts a block diagram of an example search results page generation according to example embodiments of the present disclosure.
[0043] Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.
DETAILED DESCRIPTION
Overview
[0044] Generally, the present disclosure is directed to systems and methods for extracting blockchain data for indexing. In particular, the systems and methods can leverage one or more processing techniques and/or one or more segmentation techniques to extract relevant data. For example, the systems and methods can include obtaining blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non-fungible tokens. The blockchain data can be stored in a blockchain log. The blockchain data can be processed to determine token data associated with a non-fungible token of the plurality of non-fungible tokens. The systems and methods can include determining a portion of the token data includes descriptive data. In some implementations, the descriptive data can be associated with the non-fungible token. The descriptive data can be segmented from the blockchain data. In some implementations, the descriptive data can be stored.
[0045] The systems and methods disclosed herein can be utilized for enabling a non- fungible token search via a search engine. For example, a search query can be received. A search engine can process the search query and can determine a plurality of search results associated with the search query. In some implementations, one or more search results can be associated with non-fungible tokens. A particular search result can be associated with the index data. The one or more non-fungible token search results can be provided for display in a search results interface (e.g., a search results page). The one or more non-fungible token search results can be provided for display in a separate panel. Alternatively and/or additionally, the one or more non-fungible token search results can be provided for display adjacent to general search results. The one or more non-fungible token search results can be provided with one or more indicators indicating the non-fungible token nature (e.g., provided
with one or more labels, flags, and/or tags). In some implementations, the one or more non- fungible token search results can be provided with a generated preview of the digital resource based on the index data.
[0046] In some implementations, the systems and methods disclosed herein can be utilized for Web3 profiles, for Web3 transactions, and/or for Web3 identification.
[0047] The systems and methods can improve the search user interface and user experience by identifying and indexing relevant data that can be utilized for determining the non-fungible token is responsive to a search query. Additionally and/or alternatively, the index data can be leveraged to determine a ranking for the non-fungible token search result with relation to other search results. The systems and methods can be utilized to determine if a search result can be provided with a non-fungible token tag and/or can be given a ranking boost based on the association with an authenticated non-fungible token. Additionally and/or alternatively, the systems and methods can provide improved surfacing of digital resources of non-fungible tokens by identifying and extracting data that can be utilized to generate previews (e.g., graphical representations) of digital resources associated with respective non- fungible tokens. The previews can then be provided with the non-fungible token search result as a thumbnail and/or as a graphical representation of the non-fungible token.
[0048] The systems and methods can obtain blockchain data from a blockchain computing system. The blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens. The blockchain data can be descriptive of blockchain transactions, which may be associated with a blockchain ledger. In some implementations, the code of the blockchain data can be associated with the one or more standards for token code.
[0049] The blockchain data can be stored in a blockchain log. In some implementations, storing the blockchain data in a blockchain log can include preprocessing the blockchain data in a sandbox to determine if the blockchain data includes a bug, virus, and/or suspicious data. The preprocessing can utilize a sandbox environment to mitigate the spreading of any potential malicious content. Additionally and/or alternatively, the sandbox environment can be utilized to execute commands against a “running” node (e.g., a blockchain node that is disconnected from external networks).
[0050] The blockchain data can be processed to determine token data associated with a non-fungible token of the plurality of non-fungible tokens. The determination can be based on the detection of a blockchain trigger event. Alternatively and/or additionally, the
determination may be based on determining the token data is associated with a digital resource (e.g., a digital asset).
[0051] In some implementations, the systems and methods can obtain standard data. The standard data can be descriptive of one or more standards for token code. The token data can be determined based at least in part on the one or more standards.
[0052] The systems and methods can determine a portion of the token data includes descriptive data. The descriptive data can be associated with the non-fungible token. In some implementations, the descriptive data can include information determined to be associated with a particular identifying characteristic of a non-fungible token. The determination can be based on one or more standards associated with a structure of non-fungible token byte code. In some implementations, the descriptive data can include at least one of a digital resource (e.g., a digital asset) associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non-fungible token, or creator identification associated with a creator of the non-fungible token.
[0053] Alternatively and/or additionally, determining the portion of the token data includes the descriptive data can include parsing the token data to generate a plurality of segment datasets, processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications, and determining a particular segment dataset of the plurality of segment datasets includes descriptive data based on the plurality of segment classifications.
[0054] Alternatively and/or additionally, determining the portion of the token data includes the descriptive data can include determining token identification data associated with the non-fungible token, determining a plurality of transactions in the blockchain data based on the token identification data, and determining the portion of the token data based on the plurality of transactions.
[0055] In some implementations, the descriptive data can include transaction data (e.g., data descriptive of transaction history of a non-fungible token). The transaction data can be associated with an electronic ledger. The blockchain data may include embedded images, pointers, executable code, and other data structures that may be identified as descriptive data, which can be segmented from the blockchain data and stored.
[0056] The descriptive data can be segmented from the blockchain data. In some implementations, a plurality of data strings associated with a particular non-fungible token
can be identified and segmented from the blockchain data. The plurality of data strings can then be aggregated and/or concatenated.
[0057] The descriptive data can then be stored. The descriptive data can be stored in a database for retrieval and processing for future tasks. The storage may be locally and/or may be stored on a server computing system accessible by a plurality of users.
[0058] Additionally and/or alternatively, the systems and methods can be utilized for identifying and obtaining content data associated with a digital resource (e.g., a digital asset) associated with a non-fungible token. For example, the systems and methods can include obtaining blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non-fungible tokens. The blockchain data can be processed to determine a link in the blockchain data. A landing page associated with the link can be obtained. In some implementations, the landing page can be obtained based on the link. The systems and methods can determine content data associated with the landing page. The content data can be associated with a non-fungible token of the plurality of non-fungible tokens. The content data can be stored.
[0059] The systems and methods can obtain blockchain data from a blockchain computing system. The blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens. The blockchain data can be obtained via a blockchain node. In some implementations, the blockchain data can be obtained from a repository separate from the blockchain computing system.
[0060] In some implementations, obtaining the blockchain data can include accessing a blockchain node. The blockchain node can be associated with a particular blockchain. Obtaining the blockchain data can include recursively crawling the particular blockchain. The recursive crawling can occur at set intervals, trigger-based intervals (e.g., based on an event occurring (e.g., a social media post descriptive of a non-fungible token drop post)), and/or user-specified intervals. For example, the systems and methods can in intervals and/or continuously obtain blockchain data from the blockchain in association with the metadata of one or more particular non-fungible tokens in order to update the data as changes are made. [0061] The blockchain data can be processed to determine a link in the blockchain data. The link can include at least one of a uniform resource identifier, an IPFS address, or a uniform resource locator.
[0062] The systems and methods can obtain a landing page associated with the link. In some implementations, the landing page can be obtained based on the link. The landing page
can include a digital resource (e.g., a digital asset). The digital resource (e.g., the digital asset) can be a payload of a smart contract associated with the non-fungible token.
[0063] Content data associated with the landing page can be obtained. The content data can be associated with a non-fungible token of the plurality of non-fungible tokens. In some implementations, the content data can include a preview of a digital asset associated with the non-fungible token.
[0064] In some implementations, the systems and methods can include determining a second link based on the landing page and obtaining a second landing page based on the second link. The second landing page can include the content data.
[0065] The content data can be stored. The content data can include a preview of the digital resource (e.g., the digital asset) associated with the non-fungible token.
[0066] In some implementations, obtaining and/or generating image data based on a digital resource for a non-fungible token can include a nested crawl to follow links and navigate to different landing pages. Additionally and/or alternatively, the content data can include a synthetic representation associated with the digital resource, (e.g., a synthetic representation of what the digital resource looks and/or sounds like). The synthetic representation can be analogous to (e.g., similar to) a preview of the digital resource. The synthetic representation can be indexed to be provided as a search result (e.g., an image search result, a video search result, and/or an audio search result) that can be displayed and/or provided adjacent to and/or with web2.0 search results.
[0067] In some implementations, a digital resource can be accessed and processed to generate the synthetic representation. In some implementations, the synthetic representation can include a representative frame of a video digital asset. Alternatively and/or additionally, the synthetic representation can include a compressed video, a graphics interchange format, and/or an augmented video.
[0068] Additionally and/or alternatively, the systems and methods can include identifying a plurality of token datasets associated with a particular non-fungible token which can be identified and stored. For example, the systems and methods can include obtaining blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non-fungible tokens. The blockchain data can be processed to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens. The blockchain data can be processed to determine a second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens. The systems and methods can include storing the first set of data and the second set of data.
[0069] The systems and methods can obtain blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non- fungible tokens.
[0070] The blockchain data can be processed to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens. The first set of data can include freeform text data.
[0071] In some implementations, processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include crawling the blockchain data to identify link data and obtaining content data associated with the link data.
[0072] The systems and methods can include processing the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens. The second set of data can include transactional data from an electronic ledger.
[0073] In some implementations, processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include determining a plurality of datasets associated with non-fungible token transactions. The non-fungible token transactions can be associated with the particular non- fungible token. Processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include generating the second set of data based on the plurality of datasets.
[0074] Additionally and/or alternatively, the systems and methods can segment the first set of data and the second set of data from the blockchain data. The segmentation can involve the utilization of a machine-learned segmentation model.
[0075] The first set of data and the second set of data can be stored. In some implementations, the first set of data and the second set of data can be stored in a database. Alternatively and/or additionally, the first set of data and the second set of data can be provided to an indexing computing system for indexing data associated with the particular non-fungible token.
[0076] Index data can then be generated for the particular non-fungible token based on the first set of data and the second set of data. The index data can include a preview of the digital resource associated with the non-fungible token. Additionally and/or alternatively, the index data can include a title, a description, transaction history, and/or publisher information
associated with the non-fungible token. Generating index data can involve processing content data with one or more machine-learned models.
[0077] In some implementations, the systems and methods can obtain and/or determine more and more context upon each nesting crawl. An amalgamation of the context data can then be generated and/or stored.
[0078] Text data, transaction data, and/or media data (e.g., images, video, and/or audio) may be obtained via different techniques. For example, the text data may be obtained using natural language processing; the transaction data may be obtained using token ID detection, segmenting, and concatenation; and the media data may be obtained by navigating to different landing pages based on identified uniform resource identifiers.
[0079] In some implementations, the systems and methods can include obtaining lightweight, natural language text data descriptive of data stored on the blockchain (e.g., an open standard file format and data interchange format that may use human-readable text to store data objects including attribute - value pairs and arrays). The lightweight, natural language text data can be parsed, nested data can be obtained, and/or bag of words data can be obtained. In some implementations, the bag of words can be obtained by a machine- learned model to determine tags and correlations for search and ranking.
[0080] In some implementations, different blockchains can include different protocols (e.g., different languages, different syntax, different data structures, and/or different reference protocols) and/or different formatting types. The systems and methods can be adapted for different blockchains (e.g., adapted for different protocols and/or different formatting types). The adaptation can include using one or more conformer blocks to adapt for different protocols and/or different formatting types. The adaptation can include using one or more machine-learned models for processing blockchain data from different blockchains.
Alternatively and/or additionally, the adaptation can leverage deterministic functions and/or heuristics. The systems and methods may learn protocols for new blockchains to then map to universal set-up.
[0081] Additionally and/or alternatively, the systems and methods can identify, obtain, and/or aggregate transaction data associated with one or more non-fungible tokens. The transaction data can be descriptive of a transaction history associated with a non-fungible token. For example, the transaction data can include primitives such as timestamp, addresses involved, and/or lineage of the data over time. The obtained transaction data of different non- fungible tokens can be compared to generate comparative data. In some implementations gas
prices, amount of transactions, and/or mint data may be compared to generate comparative data.
[0082] In some implementations, the token data can be determined, segmented, and/or concatenated based on a token ID and/or a contract address. For example, the systems and methods can process blockchain data to identify a token ID and/or a contract address. Token data associated with the token ID and/or the contract address can be searched for and/or determined. The token data can be segmented from the blockchain data. The segmented data can then be aggregated.
[0083] The systems and methods may identify and/or obtain data associated with a reliability of the non-fungible token data. For example, data associated with the validation of a block in a blockchain (e.g., data associated with split chain data). Additionally and/or alternatively, composite signals can be obtained and taken into account to determine block reliability. The composite signals can be determined based on processing the blockchain data of a blockchain log. Calls (e.g., outward calls to peer-to-peer network) can be processed.
[0084] The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, the system and methods can provide systems and methods for extracting token data associated with one or more non-fungible tokens. For example, the systems and methods disclosed herein can process blockchain data to identify and extract a plurality of token data sets associated with one or more non-fungible tokens, which can be further processed to generate index data.
[0085] Another technical benefit of the systems and methods of the present disclosure is the ability to leverage identified data (e.g., token IDs and/or contract addresses) to determine transaction data for extraction for obtaining transaction history for a particular non-fungible token associated with a blockchain. For example, the systems and methods disclosed herein can process blockchain data to identify various data sets in a blockchain associated with a particular non-fungible token. The various data sets can be segmented from the rest of the blockchain data and can then be aggregated.
[0086] Another example of technical effect and benefit relates to improved computational efficiency and improvements in the functioning of a computing system. For example, the systems and methods disclosed herein can leverage the token data extraction to greatly reduce the computational power to index, search, and surface non-fungible token data. Additionally, the systems and methods disclosed herein can reduce the computational power utilized for generating the index database by identifying digital resources, processing the
digital resources, and generating synthetic representations that can be of a smaller size compared to the original digital resource.
[0087] With reference now to the Figures, example embodiments of the present disclosure will be discussed in further detail.
Example Devices and Systems
[0088] Figure 1 A depicts a block diagram of an example computing system 100 that performs token data extraction and non-fungible token indexing according to example embodiments of the present disclosure. The system 100 includes a user computing system 130, a server computing system 110, a creator computing system 150, and a blockchain computing system 170 that are communicatively coupled over a network 180.
[0089] The user computing system 130 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
[0090] The user computing system 130 includes one or more processors 132 and a memory 134. The one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the user computing system 130 to perform operations. [0091] The user computing system 130 can also include one or more user input components that receive user input. For example, the user input component can be a touch- sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. [0092] The server computing system 110 includes one or more processors 112 and a memory 114. The one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 114 can include one or more non-transitory computer-readable storage mediums, such as
RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 114 can store data 118 and instructions 116 which are executed by the processor 112 to cause the server computing system 110 to perform operations.
[0093] In some implementations, the server computing system 110 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 110 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
[0094] The blockchain computing system 170 includes one or more processors and a memory. The one or more processors can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory can store data and instructions which are executed by the processor to cause the blockchain computing system 170 to perform operations. In some implementations, the blockchain computing system 170 includes or is otherwise implemented by one or more server computing devices.
[0095] The network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
[0096] The computing system 100 can include a number of applications (e.g., applications 1 through N). Each application can be in communication with a central intelligence layer. Example applications can include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). [0097] The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the computing system 100. In some implementations, the central device data layer can communicate with a number
of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
[0098] Additionally and/or alternatively, Figure 1A depicts an exemplary computing system 100 that can be used to implement token data extraction and indexing according to aspects of the present disclosure. The system 100 has a user-server architecture that includes a server 110 that communicates with one or more user computing systems 130 over a network 180. However, the present disclosure can be implemented using other suitable architectures, which can include any number of computing systems communicating over a network 180.
[0099] The system 100 includes a server 110, such as, for example, a web server. The server 110 can be one or more computing devices that are implemented as a parallel computing system and/or a distributed computing system. In particular, multiple computing devices can act together as a single server 110. The server 110 can have one or more processor(s) 112 and a memory 114. The server 110 can also include a network interface used to communicate with one or more remote computing devices (e.g., user devices) 130 over a network 180.
[0100] The processor(s) 112 can be any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, or other suitable processing device. The memory 114 can include any suitable computing system or media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices. The memory 114 can store information accessible by processor(s) 112, including instructions 116 that can be executed by processor(s) 112. The instructions 116 can be any set of instructions that when executed by the processor(s) 112, cause the processor(s) 112 to provide desired functionality.
[0101] In particular, the instructions 116 can be executed by the processor(s) 112 to implement index adjustment (e.g., index deduplication). The user profile database 120 can be configured to store a plurality of user profiles associated with a plurality of users utilizing one or more user computing systems 130. In some implementations, the user profile database 120 can be configured to be utilized for facilitating one or more interactions. The facilitation of the one or more interactions can involve the use of a blockchain application programming interface (API) 122 to send data to and receive data from a blockchain computing system 170. For example, a server computing system 110 can utilize the blockchain API 122 to
update one or more ledgers 172 of the blockchain computing system 170. The one or more ledgers 172 can be associated with one or more tokens 174. The one or more tokens 174 can include one or more non-fungible tokens, which can include scripts associated with a digital asset (e.g., image data, video data, text data, latent encoding data, domain data, audio data, augmented-reality asset rendering data, and/or virtual-reality asset rendering data). In particular, the script can reference a specific digital asset that is provided for sale. The digital asset can include image data, text data, video data, latent encoding data, a domain name, a virtual property, an augmented-reality asset, a virtual-reality asset (e.g., a virtual-reality environment and/or a virtual-reality object for interaction in an environment), a smart contract, a physical item authentication, etc. In some implementations, the one or more ledgers 172 can be associated with cryptocurrency that can be utilized to make transactions in a physical marketplace and/or a virtual marketplace.
[0102] It will be appreciated that the term “element” can refer to computer logic utilized to provide desired functionality. Thus, any element, function, and/or instructions can be implemented in hardware, application specific circuits, firmware and/or software controlling a general purpose processor. In one implementation, the elements or functions are program code files stored on the storage device, loaded into memory and executed by a processor or can be provided from computer program products, for example computer executable instructions, that are stored in a tangible computer-readable storage medium such as RAM, hard disk or optical or magnetic media.
[0103] Memory 114 can also include data 118 that can be retrieved, manipulated, created, or stored by processor(s) 112. The data 118 can include search result data, ranking data, image data (e.g., digital maps, satellite images, aerial photographs, street-level photographs, synthetic models, paintings, personal images, portraits, etc.), video data, audio data, text data (e.g., books, articles, blogs, poems, etc.), latent encoding data, blockchain address data, tables, vector data (e.g., vector representations of roads, parcels, buildings, etc.), point of interest data (e.g., locales such as islands, cities, restaurants, hospitals, parks, hotels, and schools), or other data or related information. As an example, the data 118 can be used to access information and data associated with a specific digital asset, website, search result, blockchain, etc.
[0104] The data 118 can be stored in one or more databases. The one or more databases can be connected to the server 110 by a high bandwidth LAN or WAN, or can also be connected to server 110 through network 180. The one or more databases can be split up so that they are located in multiple locales.
[0105] The server 110 can exchange data with one or more user computing systems 130 over the network 180. Although two user computing systems 130 are illustrated in Figure 1A, any number of user computing systems 130 can be connected to the server 110 over the network 180. The user computing systems 130 can be any suitable type of computing device, such as a general purpose computer, special purpose computer, navigational device, laptop, desktop, integrated circuit, mobile device, smartphone, tablet, wearable-computing devices, a display with one or more processors coupled thereto and/or embedded therein, or other suitable computing device. Further, the user computing system 130 can be multiple computing devices acting together to perform operations or computing actions.
[0106] Similar to server 110, a user computing system 130 can include a processor(s) 132 and a memory 134. The memory 134 can store information accessible by processor(s) 132, including instructions that can be executed by processor(s) and data. As an example, memory 134 can store data 136 and instructions 138.
[0107] Instructions 138 can provide instructions for implementing a browser, a non- fungible token purchase, and/or a plurality of other functions. In particular, the user of user computing system 130 can exchange data with server 110 by using the browser to visit a website accessible at a particular web-address. The token data identification and non-fungible token indexing of the present disclosure can be provided as an element of a user interface of a website and/or application.
[0108] The data 136 can include data related to running a specialized application on the user computing system 130. In particular, the specialized application can be used to exchange data with server 110 over the network 160. The data 136 can include user-device-readable code for providing and implementing aspects of the present disclosure. Additionally and/or alternatively, the data 136 can include data related to previously inputted or received data.
For example, the data 136 can include data related to past occurrences of the special application.
[0109] The user computing system 130 can include various user input devices for receiving information from a user, such as a touch screen, touch pad, data entry keys, speakers, mouse, motion sensor, and/or a microphone suitable for voice recognition. Further, the user computing system 130 can have a display for presenting information, such as a user interface, displaying a digital asset, displaying pop-ups or application elements displayed in an interface, and/or other forms of information.
[0110] The user computing system 130 can also include a user profile 140 that can be used to identify a user of the user computing system 130. The user profile 140 can be
optionally used by the user to make one or more transactions which can then be recorded on one or more ledgers 172 of the blockchain computing system 170. The user profile 140 can be descriptive of user information, which can include identification numbers and/or payment account information. For example, the user profile 140 can include data associated with a crypto wallet, which may be linked to a browser application via an application extension and/or embedding.
[0111] The user computing system 130 can further include a graphics processing unit. Graphics processing unit can be used by processor 132 to index adjustment. In some embodiments, the user computing system 130 performs any and all index adjustment.
[0112] The user computing system 130 can include a network interface for communicating with a server 110 over a network 180. Network interface can include any components or configuration suitable for communication with server 110 over network 180, including, for example, one or more ports, transmitters, wireless cards, controllers, physical layer components, or other items for communication according to any currently known or future developed communications protocol or technology.
[0113] The network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof. The network 180 can also include a direct connection between a user computing system 130 and the server 110. In general, communication between the server 110 and a user computing system 130 can be carried via network interface using any type of wired and/or wireless connection, using a variety of communication protocols (e.g., TCP/IP, HTTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). [0114] In some implementations, the exemplary computing system 100 can include one or more creator computing systems 150. The one or more creator computing systems 150 can be utilized for generating images, videos, prose, poetry, audio, etc., which can then be provided for sale. The one or more creator computing systems 150 can include one or more processors 152, which can be utilized to execute one or more operations to implement the systems and methods disclosed herein. The one or more creator computing systems 150 can include one or more memory components 154, which can be utilized to store data 156 and one or more instructions 158. The data 156 can include data related to one or more applications, one or more media datasets, etc. The instructions 158 can include one or more operations for implementing the systems and methods disclosed herein.
[0115] The one or more creator computing systems 150 can store data associated with one or more digital assets 160 and/or one or more creator profiles 162. The one or more
digital assets 160 can include text data, image data, video data, audio data, latent encoding data, domain data, or a variety of other data formats. The one or more creator profiles 162 can include information associated with one or more “creators” of the one or more digital assets 160. The one or more creator profiles 162 can include identification data, transaction data, and/or crypto wallet data.
[0116] Additionally and/or alternatively, the exemplary computing system 100 can include one or more blockchain computing systems 170. The one or more blockchain computing systems 170 can include a plurality of computing devices being utilized for decentralized data storage, such that a plurality of “blocks” can be distributed throughout a network of computing devices to provide a secure system for data storage, which can include one or more ledgers 172 and one or more tokens 174. In some implementations, each of the one or more tokens 174 can be associated with at least a portion of the one or more ledgers 172.
[0117] Blockchain can refer to a system configured to securely record information. The blockchain can include a decentralized system that can render changing information extremely difficult. The blockchain can include a digital ledger of transactions that can be duplicated and distributed across a network of computing systems. Each block in the chain can include a number of transactions. When a new transaction occurs on the blockchain, a record of that transaction can be added to every computing device’s ledger. The blockchain can be utilized to track the exchange of currency and/or digital assets via the recording of transactions on the digital ledger, which can be propagated throughout the decentralized system. The currency exchanged and tracked via the blockchain computing system 170 can be referred to as cryptocurrency.
[0118] The tokens 174 can include one or more non-fungible tokens. The non-fungible tokens can be minted on a blockchain associated with the blockchain computing system 170. A non-fungible token (NFT) can be a certificate of authenticity of a digital asset. NFTs can be non-interchangeable thus making their worth depend on the price anyone may be willing to pay for the asset. NFTs can be printed on blockchains such that their scarcity and authenticity can be maintained. A digital asset can be defined as anything that is stored digitally and can be uniquely identifiable that organizations can use to realize value. Examples of digital assets can include a tweet, a social media comment, documents, audio, images, videos, logos, website domains, slide presentations, spreadsheets, CSS files and formats, executable code, and/or websites.
[0119] Figure IB depicts a block diagram of an example blockchain 50 that may be utilized by the blockchain computing system 170 of the exemplary computing system 100 of Figure 1 A. The example blockchain 50 can include a plurality of blocks that can be utilized to store data with one or more cryptographic features. The blockchain 50 can be stored on a decentralized computing system comprising a plurality of computing devices. The blockchain 50 can be a public blockchain (e.g., a blockchain that is open without access restrictions such that anyone with an internet access can send transactions or validate transactions as part of the decentralized, distributed system), a private blockchain (e.g., a blockchain that provides access based on permissions set by network administrators), or a hybrid blockchain (e.g., a blockchain with a combination of blocks with no restrictions and blocks with restrictions). The blockchain 50 can include proof of work features that can include one or more cryptographic forms of proof. The proof of work can be provided upon a request to update the blockchain 50 (e.g., a request to update the ledgers based on a new transaction). The proof of work can convey that a certain device or group of devices have performed a certain amount of computation, which can then be validated by other parties. Once validated, the blockchain 50 can be updated, or may remain unchanged in response to a failure to validate. The proof of work feature can be utilized to mitigate the computational cost of every device in the system having to perform the same computational functions and checks for determining a request is valid for updating the blockchain 50.
[0120] Each block can include a hash, a previous hash associated with the hash of the previous block, and data. In some implementations, each block can include a nonce. A hash can be a hash value of a fixed length that can be a fingerprint for the particular block. The hash value can be generated based on a hash function and may be changed each time a change is made to the data of that particular block. The previous hash can include a hash value of the block immediately preceding the particular block. The previous hash can be utilized to ensure the downstream ground truth stays unchanged unless proper validation occurs. The data can include transaction data (e.g., a transaction ledger), a timestamp, a value associated with a cryptocurrency value, anon-fungible token (e.g., anon-fungible token including a script that references a digital asset, nonce data, and/or general blockchain data. Nonce (i.e., a number only used once) can be a number added to a block in a blockchain that can meet a difficulty level restriction when a block is rehashed. The nonce can be a number that blockchain miners are solving for, in order to receive an incentive (e.g., cryptocurrency). [0121] The blockchain 50 can include one or more security protocols and/or features. The blockchain 50 can include a cryptographic system. For example, the blockchain 50 can
validate the blockchain 50 is valid by ensuring the stored previous hash stored in the block matches the hash value of the previous block from the last block back to the first block (e.g., the genesis block). In some implementations, the blockchain 50 can include proof of work validation that can rely on verifying proof of computation before implementing a change to the stored data (e.g., the stored ledger). Proof of work validation can take seconds, minutes, and/or hours based in part on the number of blocks in the blockchain 50. Additionally and/or alternatively, the blockchain 50 can be implemented on a distributed, decentralized computing system. In some implementations, each computing device in the distributed, decentralized computing system can store a portion of (e.g., a block of the plurality of blocks) or all of the blocks in the blockchain 50. Therefore, the system can verify data by ensuring the data is uniform across most, if not all, of the distributed system. Each node of the distributed system can be checked for tampering before adding new data.
[0122] The data can include data associated with a cryptocurrency value (e.g., a ledger associated with a specific cryptocurrency value), data associated with a digital asset (e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset), data associated with a smart contract (e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met), and/or timestamp data (e.g., timestamp data for block creation, minting, a transaction, etc.).
[0123] In particular, Figure IB depicts a first block 10, a second block 20, a third block 30, a fourth block 40, and an nth block 60. Although five blocks are depicted, any number of blocks can be utilized. The first block 10 can be a genesis block (e.g., a first overall block in the blockchain). The first block 10 can include a respective first hash 12 (e.g., a hash value associated with the first block 10). The first block 10 may include a first previous hash 14 (e.g., if the first block 10 has a block before it in the blockchain 50, then the hash of the previous block can be stored on the first block 10). Additionally and/or alternatively, the first block 10 can include data 16 and nonce 18.
[0124] The second block 20 can follow the first block 10. The second block 20 can include a respective second hash 22 (e.g., a hash value associated with the second block 20). The second block 20 may include a second previous hash 24 (e.g., the second previous hash 24 can be the same as, or reference, the first hash 12). Additionally and/or alternatively, the second block 20 can include data 26 and nonce 28.
[0125] The third block 30 can follow the second block 20. The third block 30 can include a respective third hash 32 (e.g., a hash value associated with the third block 30). The third block 30 may include a third previous hash 34 (e.g., the third previous hash 34 can be
the same as, or reference, the second hash 22). Additionally and/or alternatively, the third block 30 can include data 36 and nonce 38.
[0126] Additionally and/or alternatively, the fourth block 40, the nth block 60, and other potential blocks can include a respective hash, a respective previous hash, and data. The first data 16, the second data 26, the third data 36, and the data of the other blocks can include overlapping data, can differ, and/or be the same such that the data is duplicative for all blocks. In some implementations, each block can be associated with a different transaction (e.g., a different minting, a different sale, etc.). The first nonce 18, the second nonce 28, the third nonce 38, and the nonce’s of the other blocks can differ and may be solved during mining.
[0127] The data in each block can include ledger data, which can include a timestamp, asset and/or cryptocurrency exchanged, actors involved in transaction, and/or a variety of other information.
[0128] In some implementations, a plurality of different blockchains can be utilized for the systems and methods disclosed herein. The different blockchains can include different configurations. The different blockchains can include parallel chains, side chains, shared blocks, differing chains, varying permissions, varying purposes, varying number of blocks, and/or varying hash functions and/or varying hashing value lengths.
[0129] In some implementations, the systems and methods can include one or more machine-learned model computing systems 900. The one or more machine-learned models can be utilized for a variety of tasks for enabling token data identification, obtainment, indexing, and deduplication.
[0130] Figure 9A depicts a block diagram of an example computing system 900 that performs token data identification, obtainment, indexing, and deduplication according to example embodiments of the present disclosure. The system 900 includes a user computing device 902, a server computing system 930, and a training computing system 950 that are communicatively coupled over a network 980.
[0131] The user computing device 902 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
[0132] The user computing device 902 includes one or more processors 912 and a memory 914. The one or more processors 912 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and
can be one processor or a plurality of processors that are operatively connected. The memory 914 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 914 can store data 916 and instructions 918 which are executed by the processor 912 to cause the user computing device 902 to perform operations. [0133] In some implementations, the user computing device 902 can store or include one or more token indexing models 920. For example, the token indexing models 920 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models. Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks. Example token indexing models 920 are discussed with reference to Figures 4 & 11.
[0134] In some implementations, the one or more token indexing models 920 can be received from the server computing system 930 over network 980, stored in the user computing device memory 914, and then used or otherwise implemented by the one or more processors 912. In some implementations, the user computing device 902 can implement multiple parallel instances of a single token indexing model 920 (e.g., to perform parallel token data indexing across multiple instances of token data descriptive of a non-fungible token).
[0135] More particularly, the token indexing model can include one or more detection models, one or more segmentation models, one or more classification models, one or more augmentation models, one or more generation models, and/or one or more feature extractor models. The token indexing model can process blockchain data and/or web page data to generate index data descriptive of index information associated with one or more respective non-fungible tokens. In some implementations, the one or more token indexing models can include one or more token identification models. The one or more token identification models can process the blockchain data to identify token data, and one or more segmentation models can segment the token data from the blockchain data. The segmented token data can then be indexed via one or more additional machine-learned models of the token indexing model. [0136] Additionally or alternatively, one or more token indexing models 940 can be included in or otherwise stored and implemented by the server computing system 930 that communicates with the user computing device 902 according to a client-server relationship. For example, the token indexing models 940 can be implemented by the server computing
system 940 as a portion of a web service (e.g., a token indexing service). Thus, one or more models 920 can be stored and implemented at the user computing device 902 and/or one or more models 940 can be stored and implemented at the server computing system 930.
[0137] The user computing device 902 can also include one or more user input components 922 that receive user input. For example, the user input component 922 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
[0138] The server computing system 930 includes one or more processors 932 and a memory 934. The one or more processors 932 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 934 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 934 can store data 936 and instructions 938 which are executed by the processor 932 to cause the server computing system 930 to perform operations.
[0139] In some implementations, the server computing system 930 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 930 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
[0140] As described above, the server computing system 930 can store or otherwise include one or more machine-learned token indexing models 940. For example, the models 940 can be or can otherwise include various machine-learned models. Example machine- learned models include neural networks or other multi-layer non-linear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. Example models 940 are discussed with reference to Figures 4 & 11.
[0141] The user computing device 902 and/or the server computing system 930 can train the models 920 and/or 940 via interaction with the training computing system 950 that is communicatively coupled over the network 980. The training computing system 950 can be
separate from the server computing system 930 or can be a portion of the server computing system 930.
[0142] The training computing system 950 includes one or more processors 952 and a memory 954. The one or more processors 952 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory 954 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory 954 can store data 956 and instructions 958 which are executed by the processor 952 to cause the training computing system 950 to perform operations. In some implementations, the training computing system 950 includes or is otherwise implemented by one or more server computing devices.
[0143] The training computing system 950 can include a model trainer 960 that trains the machine-learned models 920 and/or 940 stored at the user computing device 902 and/or the server computing system 930 using various training or learning techniques, such as, for example, backwards propagation of errors. For example, a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function). Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
[0144] In some implementations, performing backwards propagation of errors can include performing truncated backpropagation through time. The model trainer 960 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
[0145] In particular, the model trainer 960 can train the token indexing models 920 and/or 940 based on a set of training data 962. The training data 962 can include, for example, training blockchain data, training web page data, training transaction data, ground truth labels, ground truth index information, and/or ground truth segmentation masks.
[0146] In some implementations, if the user has provided consent, the training examples can be provided by the user computing device 902. Thus, in such implementations, the model 920 provided to the user computing device 902 can be trained by the training computing system 950 on user-specific data received from the user computing device 902. In some instances, this process can be referred to as personalizing the model.
[0147] The model trainer 960 includes computer logic utilized to provide desired functionality. The model trainer 960 can be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some implementations, the model trainer 960 includes program files stored on a storage device, loaded into a memory and executed by one or more processors. In other implementations, the model trainer 960 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media. [0148] The network 980 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over the network 980 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
[0149] The machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
[0150] In some implementations, the input to the machine-learned model(s) of the present disclosure can be image data. The machine-learned model(s) can process the image data to generate an output. As an example, the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an image segmentation output. As another example, the machine- learned model(s) can process the image data to generate an image classification output. As another example, the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate a prediction output.
[0151] In some implementations, the input to the machine-learned model(s) of the present disclosure can be text or natural language data. The machine-learned model(s) can process the text or natural language data to generate an output. As an example, the machine- learned model(s) can process the natural language data to generate a language encoding output. As another example, the machine-learned model(s) can process the text or natural
language data to generate a latent text embedding output. As another example, the machine- learned model(s) can process the text or natural language data to generate a classification output. As another example, the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output. As another example, the machine- learned model(s) can process the text or natural language data to generate a semantic intent output. As another example, the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.). As another example, the machine-learned model(s) can process the text or natural language data to generate a prediction output.
[0152] In some implementations, the input to the machine-learned model (s) of the present disclosure can be speech data. The machine-learned model(s) can process the speech data to generate an output. As an example, the machine-learned model(s) can process the speech data to generate a speech recognition output. As another example, the machine- learned model(s) can process the speech data to generate a speech translation output. As another example, the machine-learned model(s) can process the speech data to generate a latent embedding output. As another example, the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a prediction output.
[0153] In some implementations, the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.). The machine-learned model(s) can process the latent encoding data to generate an output. As an example, the machine-learned model(s) can process the latent encoding data to generate a recognition output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reconstruction output. As another example, the machine-learned model(s) can process the latent encoding data to generate a search output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reclustering output. As another example, the machine-learned model(s) can process the latent encoding data to generate a prediction output.
[0154] In some implementations, the input to the machine-learned model (s) of the present disclosure can be statistical data. The machine-learned model(s) can process the
statistical data to generate an output. As an example, the machine-learned model(s) can process the statistical data to generate a recognition output. As another example, the machine- learned model(s) can process the statistical data to generate a prediction output. As another example, the machine-learned model(s) can process the statistical data to generate a classification output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a visualization output. As another example, the machine-learned model(s) can process the statistical data to generate a diagnostic output.
[0155] In some cases, the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). For example, the task may be audio compression task. The input may include audio data and the output may comprise compressed audio data. In another example, the input includes visual data (e.g., one or more images or videos), the output comprises compressed visual data, and the task is a visual data compression task. In another example, the task may comprise generating an embedding for input data (e.g., input audio or visual data).
[0156] In some cases, the input includes visual data, and the task is a computer vision task. In some cases, the input includes pixel data for one or more images and the task is an image processing task. For example, the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class. The image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest. As another example, the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories. For example, the set of categories can be foreground and background. As another example, the set of categories can be object classes. As another example, the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value. As another example, the image processing task can be motion estimation, where the network input includes multiple images,
and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
[0157] In some cases, the input includes audio data representing a spoken utterance and the task is a speech recognition task. The output may comprise a text output which is mapped to the spoken utterance. In some cases, the task comprises encrypting or decrypting input data. In some cases, the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
[0158] Figure 9A illustrates one example computing system that can be used to implement the present disclosure. Other computing systems can be used as well. For example, in some implementations, the user computing device 902 can include the model trainer 960 and the training dataset 962. In such implementations, the models 920 can be both trained and used locally at the user computing device 902. In some of such implementations, the user computing device 902 can implement the model trainer 960 to personalize the models 920 based on user-specific data.
[0159] Figure 9B depicts a block diagram of an example computing device 970 that performs according to example embodiments of the present disclosure. The computing device 970 can be a user computing device or a server computing device.
[0160] The computing device 970 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
[0161] As illustrated in Figure 9B, each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some implementations, the API used by each application is specific to that application.
[0162] Figure 9C depicts a block diagram of an example computing device 990 that performs according to example embodiments of the present disclosure. The computing device 990 can be a user computing device or a server computing device.
[0163] The computing device 990 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation
application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
[0164] The central intelligence layer includes a number of machine-learned models. For example, as illustrated in Figure 9C, a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990.
[0165] The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the computing device 990. As illustrated in Figure 9C, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
Example System Arrangements
[0166] Figure 2 depicts a block diagram of an example token data extraction system 1600 according to example embodiments of the present disclosure. In particular, the example token data extraction system 1600 can obtain blockchain data 1604 from a blockchain node 1602 and can process the blockchain data 1604 to extract token data 1616, which can then be utilized for one or more tasks (e.g., non-fungible token indexing, search, and/or analysis). [0167] For example, the system can access a blockchain node 1602 via one or more application programming interfaces. Blockchain data 1604 can then be obtained via the blockchain node 1602. The blockchain data 1604 can be descriptive of a plurality of blockchain transactions. In some implementations, the blockchain data 1604 can include code data descriptive of byte code for a blockchain.
[0168] The obtained blockchain data 1604 can be added to a blockchain log 1606. The blockchain log 1606 can be updated at given intervals and/or based on trigger events. The blockchain log 1606 can then be accessed to obtain stored blockchain data 1608 that can then be processed by an identification model 1610 to generate identification data 1612. The
identification data 1612 can be descriptive of datasets determined to be associated with a particular non-fungible token. The identification can be based on an identified token ID, an identified contract address, an identified blockchain trigger event, an identified digital resource reference, and/or based on one or more standards. The identification model 1610 can include a machine-learned detection model, a machine-learned classification model, and/or a machine-learned semantics model.
[0169] The identification data 1612 can then be processed by the segmentation model 1614 (and/or an extraction model) to segment the identified datasets from the blockchain data 1608 in order to generate the token data 1616. In some implementations, the segmentation model 1614 processes both obtained blockchain data 1608 obtained from the blockchain log 1606 and the identification data 1612. Alternatively and/or additionally, the segmented datasets may be concatenated 1620 (and/or assembled) in order to generate the token data 1616.
[0170] Figure 3 depicts a block diagram of an example token data aggregation system 1700 according to example embodiments of the present disclosure. In particular, the example token data aggregation system 1700 can obtain blockchain data 1702, determine data associated with a particular non-fungible token 1704, and generate token data 1712.
[0171] For example, blockchain data 1702 can be obtained from a blockchain and/or from a repository. The blockchain data can be processed to determine a particular non- fungible token 1704 associated with the blockchain data 1702. The blockchain data 1702 can be further processed to determine data associated with the particular non-fungible token 1704. The token data aggregation system 1700 can identify, segment, and/or generate descriptive data 1706, content data 1708, and/or transaction data 1710 associated with the particular non-fungible token 1704. The descriptive data 1706 can be based on freeform text data embedded in the blockchain code and/or referenced in the blockchain code. The content data 1708 can be associated with a digital resource (e.g., a digital asset) of the particular non- fungible token 1704.
[0172] The content data 1708 can include a synthetic representation of the digital resource. In some implementations, the synthetic representation can be generated by following one or more reference addresses to obtain the digital resource, which can then be processed to generate the synthetic representation.
[0173] The transaction data 1710 can be generated by identifying electronic ledger transactions associated with the particular non-fungible token 1704 and aggregating the data to generate transaction history data for the particular non-fungible token 1704. The
transaction data 1701 can be identified based on a token ID and/or a contract address associated with the particular non-fungible token 1704.
[0174] The descriptive data 1706, the content data 1708, and the transaction data 1710 can be aggregated to generate token data 1712. The token data 1712 can then be processed to generate index data for the particular non-fungible token 1704.
[0175] Figure 4 depicts a block diagram of an example token data generation system 1800 according to example embodiments of the present disclosure. In particular, the example token data generation system 1800 can obtain blockchain data 1802, process the blockchain data 1702 with one or more models, and output token data 1818.
[0176] For example, the blockchain data 1802 can be obtained from a blockchain log and/or a third party repository. The blockchain data 1802 can be processed with an identification model 1804 to generate identification data 1806. The identification data can be descriptive of subsets of the blockchain data 1802 that is associated with a particular non- fungible token.
[0177] The identification data 1806 and the blockchain data 1802 can be processed with a segmentation model 1808 (and/or an extraction model) to segment (and/or extract) the subsets of the blockchain data 1802 associated with the particular non-fungible token. In some implementations, the segmentation model 1808 can generate first data 1810, second data 1812, and third data 1814 by segmenting the subsets from the blockchain data 1802. The first data 1810, the second data 1812, and the third data 1814 may be based on different portions of the blockchain data 1802 and/or may be associated with different types of data associated with the non-fungible token. For example, the first data 1810 can be associated with a title, description, or community for the non-fungible token; the second data 1812 can be associated with a digital resource of the non-fungible token; and the third data 1814 can be associated with a transaction history for the non-fungible token.
[0178] The first data 1810, the second data 1812, and the third data 1814 can be processed with a generation model 1816 to generate a token data 1818. The token data 1818 can include data associated with identifying characteristics of the non-fungible token. The token data 1818 can include data descriptive of a token ID 1820 and/or a contract address 1822 associated with the non-fungible token. The token ID 1820 and/or the contract address 1822 can be identified by the identification model 1804 and may be included in the identification data 1806.
[0179] Figure 5 depicts a block diagram of an example synthetic representation generation system 1900 according to example embodiments of the present disclosure. In
particular, the example synthetic representation generation system 1900 can obtain blockchain data 1902, process the blockchain data 1902, and generate a synthetic representation 1916 associated with the digital resource 1912 of a non-fungible token. [0180] For example, the blockchain data 1902 can be processed to determine a first link 1904 associated with a non-fungible token. The first link 1904 can include a reference address associated with a digital resource 1912 for the non-fungible token. The first link 1904 can include a uniform resource identifier and/or a uniform resource locator.
[0181] The first link 1904 can be utilized to navigate to a first landing address 1906. The first landing address 1906 (e.g., a first landing page) can be processed to determine and/or obtain a digital resource 1912. Alternatively and/or additionally, the first landing address 1906 can be processed to determine a second link 1908 associated with the digital resource 1912. The second link 1908 can include a uniform resource identifier and/or a uniform resource locator. The second link 1908 can be utilized to navigate to a second landing address 1910. The second landing address 1910 can include a web page with one or more digital resources. The second landing address 1910 can be processed to determine and/or obtain the digital resource 1912.
[0182] The digital resource 1912 can be processed with a representation model 1914 to generate a synthetic representation 1916. The representation model 1914 can be configured and/or trained to process a digital resource 1912 to generate a preview of the digital resource 1912. Alternatively and/or additionally, the representation model 1914 can be trained to determine and/or generate a media content item that includes semantically-aware representation of the digital resource 1912.
[0183] The synthetic representation 1916 can include a compressed version of the digital resource 1912. Alternatively and/or additionally, the synthetic representation 1916 can include a representative frame or snippet associated with the digital resource 1912. In some implementations, the synthetic representation 1916 can include a rendering of embedded code that is embedded in the blockchain.
[0184] Figure 10 depicts a block diagram of an example indexing system 200 according to example embodiments of the present disclosure. In some implementations, the indexing system 200 is configured to receive blockchain data 202 descriptive of a blockchain that stores data associated with a plurality of non-fungible tokens and, as a result of receipt of the input data 202, provide output data 220 that is descriptive of a plurality of index datasets associated with the plurality of non-fungible tokens. Thus, in some implementations, the
indexing system 200 can include one or more models and/or one or more functions for identifying token data and extracting relevant information for generating index data. [0185] In particular, the example indexing system 200 can include obtaining blockchain data 202 associated with a blockchain. The blockchain data 202 can include code for the blockchain. Additionally and/or alternatively, the blockchain data 202 can include script data (e.g., data descriptive of script that can be deployed to interact with smart contract code of the blockchain data 202) associated with a plurality of non-fungible tokens.
[0186] The blockchain data 202 can be processed to identify first token data for a first non-fungible token 204, second token data for a second non-fungible token 206, third token data for a third non-fungible token 208, and nth token data for a nth non-fungible token 210. Identifying the token data sets can involve parsing the blockchain data and determining if each parsed segment is associated with one or more non-fungible token characteristics. Alternatively and/or additionally, identifying the token data can include crawling the blockchain data to search for particular characteristics, structure, and/or features associated with token data.
[0187] The first token data associated with the first non-fungible token 204 can be processed to generate first index data 212 associated with the first non-fungible token 204. The second token data associated with the second non-fungible token 206 can be processed to generate second index data 214 associated with the second non-fungible token 206. The third token data associated with the third non-fungible token 208 can be processed to generate third index data 216 associated with the third non-fungible token 208. The nth token data associated with the nth non-fungible token 210 can be processed to generate nth index data 218associated with the nth non-fungible token 210.
[0188] The first index data 212, the second index data 214, the third index data 216, and the nth index data 218 can be stored in an index database 220, which can then be utilized for various tasks (e.g., non-fungible token search). The index datasets can include index information associated with a plurality of index item fields. The index datasets can include a title of the non-fungible token, a reference to the digital resource payload, descriptors, and/or a variety of other index items for annotating and/or characterizing aspects of the non-fungible token which may be searched.
[0189] Figure 11 depicts a block diagram of an example index dataset 300 according to example embodiments of the present disclosure. In some implementations, index data 310 can be generated based on blockchain data and/or web page data 326. The blockchain data can be processed to identify a subset of the blockchain data that is descriptive of token data
302. The token data 302 can be processed to determine one or more index items for the index data 310 generation. Additionally and/or alternatively, web page data 326 associated with the same or related non-fungible token to the non-fungible token associated with the token data 302 can be utilized to determine one or more additional index items for one or more index item fields.
[0190] Additionally and/or alternatively, the token data 302 and/or the web page data 326 can be processed with one or more machine-learned models 324 to generate one or more outputs that can be utilized as index items for the index data 310. Alternatively and/or additionally, the input data for the one or more machine-learned models 324 can be obtained from other data sources. In some implementations, the index data 310 can include data descriptive of the blockchain 312 the non-fungible token is minted on. The index data 310 can include a reference 314 to the digital resource (e.g., a URI), time data 316 (e.g., a minting time, a first digital resource publication times, and/or a time difference between the two times), transaction data 318 (e.g., purchase times, amount of acquisitions, frequency of acquisitions, identities of purchasers and bidders, and/or auction event data), metadata 320 (e.g., stored by the blockchain, marketplace, and/or another data source), other machine- learned data 322, and/or other derived data.
[0191] Figure 12 depicts a block diagram of an example search 400 according to example embodiments of the present disclosure. The example search 400 can include receiving a search query 402. The search query 402 can include one or more words, one or more images, and/or one or more other forms of input. The search query 402 can be processed by a search engine 404 which can then access a non-fungible token index database 406 to determine one or more non-fungible token search results 410 responsive to the search query 402. Additionally and/or alternatively, the search query 402 can be processed by the search engine 404 which can then access a web database 408 to determine one or more general web results 412 responsive to the search query 402. The one or more non-fungible token search results 410 and/or the one or more general web results 412 can be utilized to generate a search results page 414. The search results page 414 can then be provided for display.
[0192] Figures 13A - 13C depict different example search result page configurations. Although three configurations are depicted, other variations may be utilized to provide search results for display. The different variations depicted can include a search interface 502, which can include a search query input box 504, one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a
third non-fungible token search result 514, and/or a fourth non-fungible token search result 516), one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526), and/or a knowledge panel 506. The search query input box 504 can be configured to receive and/or display one or more search queries. The one or more non-fungible token search results and the one or more general web results can be determined and provided based on a determined responsiveness to an input search query. Additionally and/or alternatively, the knowledge panel 506 can include structured data associated with a topic determined to be responsive to an input query.
[0193] Figure 13A depicts an illustration of an example search results page 500 according to example embodiments of the present disclosure. The example search results page 500 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502. Additionally, the example search results page 500 includes a non-fungible token search results portion, which displays the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516). The example search results page 500 can include a separate general web results portion, which can display the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526). Additionally and/or alternatively, the one or more non-fungible token search results and the one or more general web results can be provided in different formats (e.g., the non-fungible token search results can be provided with image thumbnails while the general web results can be displayed with only text).
[0194] Figure 13B depicts an illustration of an example search results page 540 according to example embodiments of the present disclosure. The example search results page 540 includes the search query input box 504 displayed at the top of the search interface 502 with a knowledge panel 506 displayed in a side panel of the search interface 502. The example search results page 540 can include the one or more non-fungible token search results (e.g., a first non-fungible token search result 510, a second non-fungible token search result 512, a third non-fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be displayed in an intermingled format, such that the different types of
search results may be adjacent to one another. The order may be determined based on a determined score based on a responsiveness to a search query and/or based on other factors. The ordering may be based purely on score without preference to the type of result.
[0195] Figure 13C depicts an illustration of an example search results page 580 according to example embodiments of the present disclosure. The example search results page 580 can include both the one or more non-fungible token search results (e.g., a first non- fungible token search result 510, a second non-fungible token search result 512, a third non- fungible token search result 514, and/or a fourth non-fungible token search result 516) and the one or more general web results (e.g., a first general web result 520, a second general web result 522, a third general web result 524, and/or a fourth general web result 526) can be provided for display with media content item previews.
[0196] Figure 14 depicts a block diagram of an example token identification system 1000 according to example embodiments of the present disclosure. In some implementations, the example token identification system 1000 can be configured to receive a blockchain data 1004 from a blockchain and/or a repository 1002 associated with a plurality of non-fungible tokens and, as a result of receipt of the blockchain data 1004, provide identification data 1014 that can be utilized to determine what data to index 1016. Thus, in some implementations, the token identification system 1000 can include an identification block (e.g., a machine-learned token identification model) that is operable to determine which subsets of data in the blockchain are associated with non-fungible tokens for indexing.
[0197] In particular, Figure 14 depicts a block diagram of an example token data identification system 1000 according to example embodiments of the present disclosure. For example, the token data identification system 1000 can include accessing a blockchain and/or a repository 1002 in order to obtain blockchain data 1004. The blockchain can be accessed via a blockchain node. In some implementations, the blockchain and/or the repository 1002 can be accessed to obtain blockchain data 1004 via an application programming interface. The repository can be a repository that stores blockchain data 1004 outside of the blockchain computing system. The repository may be generated by a third party computing system using one or more third party application programming interfaces.
[0198] The blockchain data 1004 can include script data associated with a plurality of non-fungible tokens. The plurality of non-fungible tokens can be associated with a plurality of respective electronic ledgers. The blockchain data 1004 can be associated with a particular blockchain and/or a plurality of different blockchains. The blockchain data can include byte
code data associated with a blockchain. Alternatively and/or additionally, the blockchain data can be associated with a leaf page of a web platform.
[0199] The blockchain data 1004 can be processed by one or more blocks to generate identification data 1014. The identification data 1014 can be descriptive of one or more identified token data sets. In some implementations, identifying the one or more token data sets can include processing the blockchain data with a machine-learned token identification model.
[0200] Processing the blockchain data 1004 to generate identification data 1014 can include determining one or more subsets of the blockchain data 1004 are descriptive of one or more token data sets that are associated with one or more non-fungible tokens. The determination can include parsing the blockchain data 1004. The parsing can be based on code semantics, data sub-structures, one or more code identifiers, and/or based on a plurality of other factors. Alternatively and/or additionally, the blockchain data 1004 can be processed to determine that one or more subsets of the blockchain data 1004 are associated with one or more blockchain trigger events 1006. The one or more subsets associated with the one or more blockchain trigger events 1006 can be determined to be candidate token data sets. The one or more blockchain trigger events 1006 can be associated with one or more smart contracts that comprise data descriptive of an if-then event that causes the transfer of a payload (e.g., a digital resource) in response to a transaction.
[0201] The one or more candidate token data sets can be further processed to determine whether the blockchain trigger event 1006 is associated with a non-fungible token. For example, the blockchain trigger 1006 event can be processed to determine an output action associated with the blockchain trigger event 1006. The output action can be processed to determine whether the output action is associated with a digital resource (e.g., a digital asset). If the output action is associated with a digital resource that is associated with a non-fungible token, the candidate token data may be identified as token data, which may then be indexed 1016.
[0202] Alternatively and/or additionally, the token data may be identified based on one or more standards 1008. The one or more standards 1008 can be standards associated with a uniform structure for non-fungible tokens (e.g., EIP standards and/or ERC standards). For example, the blockchain data 1004 can be crawled to search for one or more strings associated with one or more standard non-fungible token strings (e.g., strings associated with a uniform interface template and/or predetermined strings associated with a “function” and/or “event” portion of the script data). If a subset of the blockchain data meets a threshold
standards level (e.g., the subset includes the uniform interface template and/or conforms to one or more standards), the subset can be determined to be token data, which can then be utilized to generate the identification data 1014.
[0203] In some implementations, the candidate token data and/or the identified token data can be processed to determine the quality 1010 of the non-fungible token associated with the token data. The quality 1010 can be determined based on heuristic data and/or based on output data of one or more machine-learned models. In some implementations, the quality 1010 of the non-fungible token can be based on a determined authenticity or validity of the non-fungible token (e.g., whether the non-fungible token is suspicious), based on whether the digital resource associated with the non-fungible token includes distinguishing features (e.g., the digital resource amounts to more than white noise or mere slight differences from previously minted digital resources), based on a level of vulgarity or offensiveness (e.g., the digital resource may be of higher quality if the digital resource provides family friendly content that does not include harmful language or imagery), and/or based on how closely the token data conforms to the one or more uniform standards for non-fungible tokens. The quality 1010 can be utilized to generate the identification data 1014. In some implementations, the quality 1014 may be utilized to determine whether to index 1016 the token data and/or how to index 1016 the token data (e.g., full indexing, partial indexing, index with a quality tag or label, and/or not index).
[0204] In some implementations, the blockchain data 1004 can be processed to determine other characteristics 1012 that may be utilized to generate the identification data 1014. The other characteristics 1014 can include data related to lazy minting, empty payloads, non-fungible token communities, pertinence of the non-fungible token, duplicate non-fungible tokens, type of digital resource (e.g., image, video, augmented-reality rendering asset, virtual-reality environment, audio, authentication certificate for physical object, domain, and/or virtual property), and/or recency of minting.
[0205] The identification data 1014 can be provided to an indexing computing system, which can determine which (if any) subsets of the blockchain data 1004 to index 1016. For example, identified token data of high quality (e.g., token data associated with a non-fungible token from a validated publisher including a high resolution digital asset as payload with no vulgarity) may be indexed 1016, while a data set with a low likelihood of being associated with a non-fungible token may not be indexed 1016.
[0206] The indexed data can then be stored in an index database which can be utilized for enabling a non-fungible token search platform.
[0207] Figure 15 depicts a block diagram of an example index filtering system 1100 according to example embodiments of the present disclosure. In particular, the example index filtering system 1100 can process blockchain data 1102, determine token data 1106 in the blockchain data 1102, and determine whether to index 1110 the token data 1106. In some implementations, the index filtering system 1100 can include a plurality of machine-learned models (e.g., an identification model 1104 to determine subsets of the blockchain data 1102 associated with non-fungible tokens and/or a quality model 1108 to determine a quality of the identified subsets of data) to determine what and how to index 1110.
[0208] For example, blockchain data 1102 can be obtained from a blockchain node and/or a repository. The blockchain data 1102 can be associated with a blockchain. The blockchain data can be descriptive of byte code.
[0209] The blockchain data 1102 can be processed by an identification model 1104 to determine and/or generate token data 1106. The token data 1106 can be associated with a non-fungible token. In some implementations, the token data 1106 can be generated by identifying a token ID and/or a contract address. The identification model 1104 can detect token IDs and/or contract addresses and can then obtain portions of the blockchain data associated with the token ID and/or the contract address, which can then be processed (e.g., the data can be processed for aggregating and/or concatenating the data) in order to generate the token data 1106. Alternatively and/or additionally, the identification model 1104 can determine and/or generate the token data 1106 by processing the blockchain data 1104 to determine subsets of the blockchain data 1102 associated with at least one of a blockchain event, one or more uniform non-fungible token standards, and/or a given non-fungible token intent.
[0210] The token data 1106 can then be processed with a quality model 1108, which can then be utilized to determine whether to and/or how to index 1110 the token data. The quality model 1108 can process the token data 1106 to determine if the token data 1106 includes suspicious characteristics, potentially includes a bug, is associated with a high quality digital resource, and/or is vulgar or offensive. The quality model 1108 can generate a quality output (e.g., a quality metric), which can then be utilized to determine whether to index 1110 the token data 1108. In some implementations, token data sets with a threshold quality metric may be indexed 1110, while token data sets that do not meet the threshold may not be indexed and/or may be partially indexed. Alternatively and/or additionally, the quality metric, and/or one or more tags/labels associated with the quality metric, may be indexed with the token data 1106.
[0211] In some implementations, the determination on whether to index 1110 the token data 1106 may be based on a weighted score that can be based on identification data from the identification model 1104 and quality data from the quality model 1108.
[0212] The one or more machine-learned models can be trained on labeled training examples and/or may be trained based on labeled features. The one or more machine-learned models can include one or more classification models, one or more feature extractors, one or more detection models, one or more segmentations models, and/or one or more augmentation models. The one or more machine-learned models can be trained for natural language processing, computer vision, image processing, video processing, latent encoding processing, audio processing, and/or encoding/decoding.
[0213] Figure 16 depicts a block diagram of an example index determination system 1200 according to example embodiments of the present disclosure. In particular, the example index determination system 1200 can obtain blockchain data 1202, identify candidate token data 1204, generate identification data 1206 based on the identified candidate token data 1204, and generate an index determination 1212 based on the identification data. The index determination 1212 can include indexing the token data 1214, partially indexing 1216 the token data, or not indexing 1218 the token data.
[0214] For example, blockchain data 1202 can be obtained from a blockchain computing system. The blockchain data 1202 can include data descriptive of a plurality of non-fungible tokens associated with a plurality of digital resources. The blockchain data 1202 can be processed to identify candidate token data 1204 in the blockchain data. The identification can be based on determined blockchain trigger events, based on one or more uniform non- fungible token standards, based on a determined publisher intent, and/or based on a determined association with a digital resource (e.g., a digital asset).
[0215] The candidate token data can then be processed to generate identification data 1206. The identification data can be descriptive of the candidate token data being associated with a non-fungible token. The identification data may include an identification metric descriptive of a likelihood that the candidate token data is associated with a non-fungible token.
[0216] The identification data can then be processed to generate an index determination. The index determination 1212 can include data that can be transmitted to an indexing computing system to instruct the indexing computing system to index the token data 1214, partially index 1216 the token data, or not index 1218 the token data. The index determination 1212 can be based on the identification data such that candidate token data
with a first threshold likelihood may be indexed 1214, candidate token data with a likelihood between a first threshold and a second threshold may be partially indexed 1216, and candidate token data with a likelihood below both thresholds may not be indexed 1218. [0217] Alternatively and/or additionally, the candidate token data sets determined to be associated with a non-fungible token may be indexed; however the level of indexing may be based on a quality metric, such that high quality token data sets may be fully indexed 1214, while low quality token data sets may be partially indexed 1216.
[0218] Figure 17 depicts a block diagram of an example quality determination system 1300 according to example embodiments of the present disclosure. In particular, the quality determination system 1300 can obtain blockchain data 1302, determine token data 1304 in the blockchain data 1302, generate quality data 1306 for the token data, and determine whether to index 1310 the token data based on the quality data 1306.
[0219] For example, blockchain data 1302 can be obtained from a blockchain repository (e.g., blockchain data pre-filtered in a sandbox after being obtained from a blockchain node). The blockchain data 1302 can be processed to determine token data 1304 in the blockchain data 1302 (e.g., the blockchain data can be processed to determine a subset of the blockchain data includes data associated with a non-fungible token).
[0220] The token data can then be processed to generate quality data 1306 associated with the token data. The quality data 1306 can be determined based on the resolution of the digital resource associated with the non-fungible token of the token data. Additionally and/or alternatively, the quality data 1306 may be generated based on a level of differentiation between the digital resource of the associated non-fungible token. The level of differentiation can be based on whether the digital resource amounts to more than just white noise, a blank image, and/or non-descript data. In some implementations, the level of differentiation can be based on whether the digital resource is the same or substantially similar to other digital resources associated with other non-fungible tokens. The minting date and/or the date of origin of the digital resource may be considered. Additionally and/or alternatively, the quality data 1306 may be based on whether the non-fungible token includes vulgar and/or offensive content (e.g., the digital resource depicts nudity and/or the title includes hate speech).
[0221] The quality data 1306 can be utilized to generate one or more tags 1308 for the processed token data. Additionally and/or alternatively, the quality data 1306 can be utilized to determine whether to index 1310 the token data.
[0222] The token data may be indexed 1312 based on the determination whether to index 1310. The indexing 1312 can include indexing the token data with the one or more generated tags 1308.
[0223] Figure 18 depicts a block diagram of an example token index deduplication 2000 according to example embodiments of the present disclosure. In some implementations, the example token index deduplication 2000 can be configured to receive a plurality of index datasets 2002 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 2002, provide an updated index database 2014 that is adjusted based on the determined duplication. Thus, in some implementations, the token index deduplication 2000 can include duplicate determination block 2004 that is operable to determine which index datasets are associated with one another.
[0224] In particular, Figure 18 depicts a plurality of index datasets 2002 being processed to determine a plurality of duplicate index datasets. For example, the plurality of index datasets 2002 can be processed with a duplicate determination block 2004 to determine plurality of duplicates including a first duplicate 2006, a second duplicate 2008, and an nth duplicate 2010. The determination can be based on digital resources (e.g., digital assets) of different identified tokens being the same (e.g., match and/or within a threshold similarity). [0225] The plurality of duplicates (e.g., the first duplicate 2006, the second duplicate 2008, and/or the nth duplicate 2010) can be processed with an authenticity determination block 2012 to generate validation data. The validation data can include a determined authenticity of each of the duplicate index datasets. The authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
[0226] The validation data can be utilized to adjust an index database to generate the updated index database 2014. Adjusting the index database can include removing a particular index dataset. For example, the index dataset generated based on the data obtained directly from the blockchain may be kept while the index dataset generated based on the data obtained from a web page may be removed. Alternatively and/or additionally, the index dataset determined to be fraudulent may be removed (e.g., the non-fungible token data may be obtained from or reference to a scam website).
[0227] Alternatively and/or additionally, adjusting the index database can include merging the duplicate index datasets. In some implementations, adjusting the index database can include adding data to the existing index datasets. The added data can include references
to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
[0228] Figure 19 depicts a block diagram of an example index validity determination 2100 according to example embodiments of the present disclosure. In particular, the index validity determination 2100 of Figure 19 includes duplication data 2102 that can be processed to generate validation data 2122. The duplication data 2102 can be descriptive of one or more index datasets associated with one or more non-fungible tokens. The duplication data 2102 can be descriptive of two or more indexed non-fungible tokens being the same (e.g., match or substantially similar). For example, a first index dataset can be descriptive of a first non- fungible token associated with a first digital resource (e.g., a first digital asset that is a payload for the first non-fungible token). A second index dataset can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset that is a payload for the second non-fungible token). In some implementations, the first non-fungible token and the second non-fungible token can be the same non-fungible token which was indexed twice due to data being obtained from multiple sources that contain data associated with the non-fungible token. Alternatively and/or additionally, the first non- fungible token and the second non-fungible token can differ, and the first digital resource and the second digital resource may be the same (e.g., the digital assets may match and/or may include similar data with slight differences (e.g., the same scene being depicted with differing resolution and/or differing color saturation)).
[0229] The duplication data 2102 can be processed 2110 to generate validation data 2122. Processing 2110 the duplication data 2102 can include obtaining and processing transaction data 2112 associated with each of the duplicate index datasets. The transaction data 2112 can be processed to determine whether any of the duplicates are associated with fraudulent transactions and/or fraudulent transactional trends. In some implementations, the transaction data 2112 can be processed to determine the more trendy and/or popular duplicate. Additionally and/or alternatively, the transaction data 2112 can be processed to determine different actors in the transactions that may be indicative of a non-fungible token’s validity. Price data may also be derived from the transaction data 2112 and can be utilized for index data validity. In some implementations, the price data can be obtained from a web page (e.g., a marketplace).
[0230] Additionally and/or alternatively, source data 2114, URL and/or URI data 2116, and/or mint date data 2120 may be processed to determine a validity of each of the duplicates. For example, the source data 2114 can be processed to determine which
duplicates are derived from data of a trustworthy source. In particular, index data generated based on data directly obtained from a blockchain can be prioritized over index data generated based on data from an untrustworthy website (e.g., a website flagged as spam by one or more spam filters). In some implementations, the URL and/or URI data 2116 referencing the digital resource (e.g., the digital asset) can be processed to determine if a digital resource is available, has been changed, has been upscaled, and/or has been moved. If the link is dead, the duplicate may be viewed as invalid. If the address has been changed, the validity may be put in question. Upscaling and movement can be a positive factor if the digital resource has not experienced a change that changes the nature of the digital resource. Additionally and/or alternatively, the mint date data 2120 can be utilized to determine which duplicate was published first, which can provide insight on possible non-fungible token validity.
[0231] In some implementations, one or more other fraud detection 2118 techniques may be utilized to generate the validation data 2122.
[0232] The validation data 2122 can include data descriptive of a determined validity (and/or authenticity) of each of the respective duplicate index datasets. The validation data 2122 can include one or more tags, labels, and/or annotations descriptive of determined factors that are descriptive of an index dataset validity.
[0233] Figure 20 depicts a block diagram of an example token index deduplication 2200 according to example embodiments of the present disclosure. In some implementations, the example token index deduplication 2200 can be configured to receive a plurality of index datasets 2202 descriptive of token data for a plurality of non-fungible tokens and, as a result of receipt of the plurality of index datasets 2202, provide an updated index database 2214 that is adjusted based on the determined duplication. Thus, in some implementations, the token index deduplication 2200 can include duplicate determination block 2204 that is operable to determine which index datasets are associated with one another.
[0234] In particular, Figure 20 depicts a plurality of index datasets 2202 being processed to determine a plurality of duplicate index datasets. For example, the plurality of index datasets 2202 can be processed with a duplicate determination block 2204 to determine plurality of duplicates including a first duplicate 2206, a second duplicate 2208, and an nth duplicate 2210. The determination can be based on digital resources of different identified tokens being the same (e.g., match and/or within a threshold similarity).
[0235] The plurality of duplicates (e.g., the first duplicate 2206, the second duplicate 2208, and/or the nth duplicate 2210) can be processed with an authenticity determination
block 2212 to generate validation data. The validation data can include a determined authenticity of each of the duplicate index datasets. The authenticity can include analyzing the source of the data, the mint date, the quality of the associated digital resource, and/or the publisher.
[0236] The validation data can be utilized to adjust an index database to generate the updated index database. Adjusting the index database can include keeping 2214 one or more of the duplicate index datasets, merging 2216 one or more of the duplicate index datasets, and/or removing 2218 one or more of the duplicate datasets.
[0237] One or more of the duplicate index datasets can be kept 2214 in order to ensure at least one of the non-fungible tokens associated with a particular digital resource is maintained for search purposes. The particular index dataset that is kept 2214 can be determined based on the source of the data, a determined authenticity (or validity), transaction data of one or more of the duplicates, the hosting location of the digital resource, the quality of the digital resource, the mint time, and/or metadata for the one or more duplicates.
[0238] Alternatively and/or additionally, adjusting the index database can include merging 2216 the duplicate index datasets. In some implementations, certain duplicate index datasets can be selected for merging 2216. Merging 2216 the duplicate index datasets can include adding any non-duplicative data to one of the duplicate datasets and deleting the other duplicate index dataset. For example, an index dataset generated based on data obtained directly from a blockchain can be complemented with data from an index dataset generated based on a web page, which can include descriptions of the digital resource, the author, and/or other data not stored directly on the blockchain. In some implementations, adjusting the index database can include adding data to the existing index datasets. The added data can include references to the other duplicates, one or more tags indicating the duplicate nature, and/or one or more weights associated with the determined authenticity.
[0239] Adjusting the index database can include removing 2218 a particular index dataset. For example, the index dataset generated based on the data obtained directly from the blockchain may be kept 2214 while the index dataset generated based on the data obtained from a web page may be removed 2218. Alternatively and/or additionally, the index dataset determined to be fraudulent may be removed 2218 (e.g., the non-fungible token data may be obtained from or reference to a scam website).
[0240] Figure 21 depicts a block diagram of an example search results page generation 2300 according to example embodiments of the present disclosure. In some implementations, the systems and methods can receive a search query 2302. The search query 2302 can include
one or more search terms, one or more input images, and/or one or more other inputs. In some implementations, the search query 2302 can be received from a user computing system associated with a user.
[0241] The search query 2302 can be processed by a search engine to determine a plurality of search results 2304. The plurality of search results can be determined based on a determined responsiveness to the search query 2302. The plurality of search results can be processed by a ranking block 2306 to determine an order of display for the plurality of search results. Additionally and/or alternatively, the plurality of search results can be processed to determine whether to provide a warning or badge 2308 with one or more of the search results. For example, if one or more of the search results are non-fungible token search results, a badge indicating the type of search result may be provided. Additionally and/or alternatively, validation data associated with each of the respective non-fungible token search results may be provided via a warning or via a badge. In some implementations, a warning may be provided if a search result is indicative of a duplicate non-fungible token.
[0242] The plurality of search results can be ranked by the ranking block 2306 based on a determined relevance, determined authenticity, and/or a determined context of each of the plurality of search results. A search results page 2310 can then be generated and provided based on the ranked search results and the determined warnings and badges.
Example Methods
[0243] Figure 6 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
[0244] At 602, a computing system can obtain blockchain data from a blockchain computing system. The blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens. The blockchain data can be descriptive of blockchain transactions, which may be associated with a blockchain ledger. In some implementations, the code of the blockchain data can be associated with the one or more standards for token code.
[0245] At 604, the computing system can store the blockchain data in a blockchain log. In some implementations, storing the blockchain data in a blockchain log can include
preprocessing the blockchain data in a sandbox to determine if the blockchain data includes a bug, virus, and/or suspicious data. The preprocessing can utilize a sandbox environment to mitigate the spreading of any potential malicious content. Alternatively and/or additionally, a sandboxed blockchain node can be utilized to provide information about an address and/or other data in an “offline mode.”
[0246] At 606, the computing system can process the blockchain data to determine token data associated with a non-fungible token of the plurality of non-fungible tokens. The determination can be based on the detection of a blockchain trigger event. Alternatively and/or additionally, the determination may be based on determining the token data is associated with a digital resource (e.g., a digital asset).
[0247] In some implementations, the computing system can obtain standard data. The standard data can be descriptive of one or more standards for token code. The token data can be determined based at least in part on the one or more standards.
[0248] At 608, the computing system can determine a portion of the token data includes descriptive data. The descriptive data can be associated with the non-fungible token. In some implementations, the descriptive data can include information determined to be associated with a particular identifying characteristic of a non-fungible token. The determination can be based on one or more standards associated with a structure of non-fungible token byte code. In some implementations, the descriptive data can include at least one of a digital asset associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non- fungible token, or creator identification associated with a creator of the non-fungible token. [0249] Alternatively and/or additionally, determining the portion of the token data includes the descriptive data can include parsing the token data to generate a plurality of segment datasets, processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications, and determining a particular segment dataset of the plurality of segment datasets includes descriptive data based on the plurality of segment classifications.
[0250] Alternatively and/or additionally, determining the portion of the token data includes the descriptive data can include determining token identification data associated with the non-fungible token, determining a plurality of transactions in the blockchain data based on the token identification data, and determining the portion of the token data based on the plurality of transactions.
[0251] In some implementations, the descriptive data can include transaction data (e.g., data descriptive of transaction history of a non-fungible token). The transaction data can be associated with an electronic ledger. The blockchain data may include embedded images, pointers, executable code, and other data structures that may be identified as descriptive data, which can be segmented from the blockchain data and stored.
[0252] At 610, the computing system can segment the descriptive data from the blockchain data. In some implementations, a plurality of data strings associated with a particular non-fungible token can be identified and segmented from the blockchain data. The plurality of data strings can then be aggregated and/or concatenated.
[0253] At 612, the computing system can store the descriptive data. The descriptive data can be stored in a database for retrieval and processing for future tasks. The storage may be locally and/or may be stored on a server computing system accessible by a plurality of users.
[0254] Figure 7 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
[0255] At 702, a computing system can obtain blockchain data from a blockchain computing system. The blockchain data can include code data (e.g., byte code) associated with a plurality of non-fungible tokens. The blockchain data can be obtained via a blockchain node. In some implementations, the blockchain data can be obtained from a repository separate from the blockchain computing system.
[0256] In some implementations, obtaining the blockchain data can include accessing a blockchain node. The blockchain node can be associated with a particular blockchain.
Obtaining the blockchain data can include recursively crawling the particular blockchain. The recursive crawling can occur at set intervals, trigger-based intervals (e.g., based on an event occurring (e.g., a social media post descriptive of anon-fungible token drop post)), and/or user-specified intervals.
[0257] At 704, the computing system can process the blockchain data to determine a link in the blockchain data. The link can include at least one of a uniform resource identifier, a uniform resource locator, and/or an IPFS address.
[0258] At 706, the computing system can obtain a landing page (and/or IPFS content) associated with the link. In some implementations, the landing page can be obtained based on
the link. The landing page can include a digital asset. The digital asset can be a payload of a smart contract associated with the non-fungible token. The IPFS content may point to other (on|off)-IPFS content.
[0259] At 708, the computing system can determine content data associated with the landing page. The content data can be associated with a non-fungible token of the plurality of non-fungible tokens. In some implementations, the content data can include a preview of a digital asset associated with the non-fungible token.
[0260] In some implementations, the computing system can include determining a second link based on the landing page and obtaining a second landing page based on the second link. The second landing page can include the content data.
[0261] At 710, the computing system can store the content data. The content data can include a preview of the digital resource (e.g., the digital asset) associated with the non- fungible token.
[0262] In some implementations, obtaining and/or generating image data based on a digital resource for a non-fungible token can include a nested crawl to follow links and navigate to different landing pages. Additionally and/or alternatively, the content data can include a synthetic representation associated with the digital resource, (e.g., a synthetic representation of what the digital resource looks and/or sounds like). The synthetic representation can be analogous to (e.g., similar to) a preview of the digital resource. The synthetic representation can be indexed to be provided as a search result (e.g., an image search result, a video search result, and/or an audio search result) that can be displayed and/or provided adjacent to and/or with web2.0 search results.
[0263] In some implementations, a digital resource can be accessed and processed to generate the synthetic representation. In some implementations, the synthetic representation can include a representative frame of a video digital asset. Alternatively and/or additionally, the synthetic representation can include a compressed video, a graphics interchange format, and/or an augmented video.
[0264] Figure 8 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. Although Figure 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 800 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
[0265] At 802, a computing system can obtain blockchain data from a blockchain computing system. The blockchain data can include code associated with a plurality of non- fungible tokens.
[0266] At 804, the computing system can process the blockchain data to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens. The first set of data can include freeform text data.
[0267] In some implementations, processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include crawling the blockchain data to identify link data and obtaining content data associated with the link data.
[0268] At 806, the computing system can process the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non- fungible tokens. The second set of data can include transactional data from an electronic ledger.
[0269] In some implementations, processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include determining a plurality of datasets associated with non-fungible token transactions. The non-fungible token transactions can be associated with the particular non- fungible token. Processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens can include generating the second set of data based on the plurality of datasets.
[0270] Additionally and/or alternatively, the computing system can segment the first set of data and the second set of data from the blockchain data. The segmentation can involve the utilization of a machine-learned segmentation model.
[0271] At 808, the computing system can store the first set of data and the second set of data. In some implementations, the first set of data and the second set of data can be stored in a database. Alternatively and/or additionally, the first set of data and the second set of data can be provided to an indexing computing system for indexing data associated with the particular non-fungible token.
[0272] Index data can then be generated for the particular non-fungible token based on the first set of data and the second set of data. The index data can include a preview of the digital resource associated with the non-fungible token. Additionally and/or alternatively, the index data can include a title, a description, transaction history, and/or publisher information
associated with the non-fungible token. Generating index data can involve processing content data with one or more machine-learned models.
Example Indexing and Uses
[0273] The systems and methods disclosed herein can identify data associated with non- fungible tokens in a blockchain (e.g., in the code of a blockchain). For example, a plurality of non-fungible tokens can be identified and indexed based on a plurality of techniques. One technique can include analyzing (e.g., crawling) a blockchain to identify data associated with a non-fungible token. The data can then be parsed to determine identifiable data that can be indexed. Another technique can include analyzing (e.g., crawling) anon-fungible token marketplace to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed. In some implementations, multiple techniques can be utilized for generating a more encompassing database for search.
[0274] The systems and methods disclosed herein can include obtaining blockchain data from a blockchain computing system. The blockchain data can include one or more function signatures. In some implementations, the blockchain data can include script data associated with a digital asset. A particular portion (e.g., a subset) of the blockchain data can be determined to include token data. The token data can be descriptive of a non-fungible token associated with a digital asset. Index data can be generated based on the token data. The index data can include information obtained from the blockchain data. In some implementations, the index data can be associated with the digital asset. The index data can then be stored in an index database. The index database can then be utilized for a variety of purposes (e.g., non-fungible token search, data aggregation and analysis, training data for a machine-learned model, and/or for generating statistical representations).
[0275] The systems and methods can obtain blockchain data (e.g., code from a blockchain) from a blockchain computing system (e.g., a decentralized computing system storing distributed data). The blockchain data can include one or more function signatures. In some implementations, the blockchain data can include script associated with a digital asset. The blockchain data may be obtained via a blockchain node. Blockchain data can include the code and/or records stored on the blockchain. The code can include the script and can be descriptive of a plurality of smart contracts. The blockchain data can include transactional data associated with the acquisition of digital assets and/or the exchange of digital currency (e.g., crypto currency). In some implementations, the transactional data may be descriptive of
one or more mutations to the contract (e.g., “setURI”, etc.). The blockchain data can include metadata associated with one or more non-fungible tokens.
[0276] The systems and methods disclosed herein can include determining a particular portion of the blockchain data includes token data. The token data can be descriptive of a non-fungible token associated with a digital asset. Alternatively and/or additionally, the systems and methods can determine a subset of the blockchain data includes token data based on the subset having a structure associated with one or more standards. The token data can be descriptive of a non-fungible token associated with the digital asset. In some implementations, the structure can include a format for code in the blockchain data associated with a standard format for non-fungible token code.
[0277] In some implementations, the blockchain data can be parsed, and each parsed segment of the blockchain data can be processed to classify whether the parsed segment includes token data descriptive of a non-fungible token. The classification can be generated with a machine-learned classification model that has been trained to classify whether the parsed segment includes data associated with a non-fungible token (e.g., whether the data includes reference to a payload, meets one or more standards, and/or is descriptive of a smart contract). In some implementations, the blockchain data can be parsed with a machine- learned segmentation model trained to parse blockchain data based on one or more factors (e.g., syntax, semantics, structure, code length, payload characteristics, code features, latent encode markers, and/or another machine-learned characteristics).
[0278] In some implementations, determining the particular portion of the blockchain data includes the token data can include determining a particular portion of the blockchain data includes token data based on the one or more function signatures. The one or more function signatures can be associated with a non-fungible token standard.
[0279] Alternatively and/or additionally, determining the particular portion of the blockchain data includes the token data can include determining the particular portion includes a smart contract associated with a digital media item. The digital media item can be a payload for the smart contract. In some implementations, the digital media item can be the digital asset.
[0280] Index data can then be generated based on the token data. The index data can include information obtained from the blockchain data. In some implementations, the index data can be associated with the digital asset. The index data can include transaction data associated with the non-fungible token. The index data can include data descriptive of metadata associated with the non-fungible token. In some implementations, the index data
can include a digital asset type associated with the digital asset. The digital asset type can be an augmented-reality rendering asset type, and the digital asset can be an augmented-reality rendering asset. The index data can include whether the URI (Uniform Resource Identifier) has changed and whether data (e.g., the pixels of an image and/or text of a text string) of the payload have changed when the URI has changed. Additionally and/or alternatively, the index data can include information descriptive of a change to the URI. The index data can include data that may be descriptive of factors that can be utilized to determine whether the non-fungible token involves fraud.
[0281] In some implementations, generating index data based on the token data can include obtaining the digital asset associated with the non-fungible token, processing the digital asset to determine one or more features in the digital asset, and generating feature data descriptive of the one or more features. The index data can include the feature data.
[0282] In some implementations, generating the index data can include determining the digital asset associated with the non-fungible token and processing the non-fungible token with a machine-learned model (e.g., a classification model, a detection model, a feature extractor model, and/or a semantics model) to determine one or more classifications, features, and/or attributes associated with the digital asset. The one or more classifications, features, and/or attributes can be included in the index data. The index data can include a name associated with the non-fungible token and/or the digital asset, a name of the digital asset creator/publisher, transaction data (e.g., the current and/or past owners, purchase price, transactional trends, trends of related non-fungible tokens, gas price, etc.), a topic of the digital asset, non-fungible token metadata, pixel labels, non-fungible token description, freeform text associated with the non-fungible token, and/or notoriety associated with the non-fungible token, the publisher, or the creator.
[0283] The digital asset can include image data, video data, text data, audio data, a domain, an augmented-reality asset, a virtual-reality experience, and/or latent encoding data. In some implementations, the digital asset can include image data, and processing the digital asset can include processing the digital asset with a machine-learned model to determine one or more image features.
[0284] Alternatively and/or additionally, generating the feature data descriptive of the one or more features can include determining one or more feature descriptor terms associated with the one or more features. The feature data can be descriptive of the one or more feature descriptor terms.
[0285] In some implementations, the systems and methods can include determining a web content item is associated with the digital asset. A publication time associated with the web content item can be obtained. The systems and methods can determine a mint time associated with the non-fungible token based on the blockchain data. Time difference data can be generated based on the mint time and the publication time. In some implementations, the index data can include the time difference data.
[0286] Alternatively and/or additionally, generating the index data based on the token data can include determining reference data associated with the digital asset based on the token data and determining a publisher of the non-fungible token based one the token data. The index data can include data descriptive of the reference data, the publisher, and a particular blockchain associated with the blockchain data.
[0287] The systems and methods can store the index data in an index database. The index database can be stored on a server computing system. The index database can include a plurality of index datasets associated with a plurality of non-fungible tokens. For example, first token data can be identified to generate a first index dataset, second token data can be identified to generate a second index dataset, and third token data can be identified to generate a third index dataset. The first token data can be associated with a first non-fungible token, the second token data can be associated with a second non-fungible token, and the third token data can be associated with a third non-fungible token.
[0288] The index database can be utilized for a plurality of different uses. For example, the index database can be utilized as a database for storing non-fungible token data for quick retrieval upon request or search. The systems and methods can include receiving a request for the digital asset from a user computing system and providing the token data to the user computing system.
[0289] The index database can include index datasets generated based on blockchain data, web page data, and/or data obtained from other sources.
[0290] Alternatively and/or additionally, the systems and methods disclosed herein can obtain web page data from a web page. The web page data can be descriptive of listing information for a non-fungible token. In some implementations, the web page data can include data associated with a digital asset. Additionally and/or alternatively, obtaining the web page data can include generating a snapshot of a web page listing the non-fungible token for sale. In some implementations, the web page data can be descriptive of a leaf page of a digital web platform website (e.g., a digital marketplace website) that hosts and/or facilitates
the purchase and sales of the non-fungible tokens. The web page data can include a snapshot of a webpage, which can include image data, text data, and/or latent encoding data.
[0291] A particular portion (e.g., a subset) of the web page data can be processed to determine the web page data includes token data. The token data can be descriptive of the non-fungible token associated with the digital asset. Alternatively and/or additionally, a digital marketplace website can be crawled to determine a plurality of leaf pages associated with a plurality of non-fungible tokens, and each leaf page can be processed to generate index data for each of the non-fungible tokens.
[0292] Index data can then be generated based on the token data. In some implementations, the index data can include information obtained from the web page data. The index data can be associated with the digital asset. Generating the index data can include processing the image data, the text data, and/or the latent encoding data of the leaf page to determine data associated with a plurality of index fields to be included in the index data. [0293] The systems and methods can include storing the index data in an index database. The index database may be stored on a server computing system. In some implementations, the index database can be used to surface non-fungible token search results for a search engine. Additionally and/or alternatively, the index database can be utilized to determine statistics associated with non-fungible tokens. For example, trending non-fungible tokens of a certain type and/or creator can be determined and then utilized for non-fungible token ranking in marketplaces, search result pages, and/or for informing users for informed purchasing.
[0294] The index database can include index data from a plurality of different sources (e.g., a plurality of different blockchains associated with a plurality of different blockchain computing systems and/or a plurality of different web pages associated with a plurality of different marketplaces). The index database can be utilized for a plurality of different tasks (e.g., search, statistical generation, and/or model training). For example, the systems and methods can obtain blockchain data. The systems and methods can include determining a subset of the blockchain data is descriptive of a non-fungible token associated with a digital asset. Index data can be generated based at least in part on the subset of blockchain data. The index data can include reference data associated with the digital asset. In some implementations, the index data can be stored in a search database. The systems and methods can include receiving a search query from a user computing system. The systems and methods can determine the search query is associated with index data. A search result associated with the digital asset can then be provided to the user computing system.
[0295] The systems and methods can include obtaining blockchain data (e.g., blockchain data obtained from a blockchain node associated with a blockchain computing system). Alternatively and/or additionally, the systems and methods can obtain web page data (e.g., marketplace data obtained via taking a snapshot of a web page associated with a non-fungible token marketplace). In some implementations, the systems and methods can include obtaining both blockchain data and web page data. The obtained data can be obtained via an application programming interface. In some implementations, the obtained data may be intervalley updated. The updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, type of digital asset, the particular blockchain, and/or based on cost.
[0296] The systems and methods can then determine a subset of the obtained data (e.g., the blockchain data and/or the web page data) is descriptive of a non-fungible token associated with a digital asset. The determination can be based on a search for a particular structure, particular terms, and/or particular actors. The determination can be based on known digital asset creators/publishers, known digital asset attributes, known digital asset types, known digital asset names, known digital asset descriptions, metadata, and/or labels. The determination may be based on the subset of obtained data being EIP (EIP-721: Non- Fungible Token Standard, ETHEREUM IMPROVEMENT PROPOSALS (Jan. 24, 2018), https://eips.ethereum.org/EIPS/eip-721.) compliant. In some implementations, strict compliance may not need to be followed. For example, data types may deviate from the spec of the standards. The functional nature and/or the spirit of the data may be determined to be associated with a non-functional token.
[0297] Index data can be generated based at least in part on the subset of obtained data (e.g., the blockchain data and/or the web page data). In some implementations, the index data can include reference data (e.g., script data referencing a URL (Uniform Resource Locator) or URI) associated with the digital asset. The index data can include digital asset creators/publishers, digital asset attributes, digital asset type, digital asset name, digital asset description, metadata, payload information, smart contract information, free form text, transactional data, blockchain information (e.g., information associated with the particular blockchain the non-fungible token is minted on), mint time, first publication time of digital asset, digital asset changes, the particular web page (e.g., the particular marketplace), and/or labels (e.g., pixel labels). In some implementations, the obtained data can be processed to determine a non-fungible token community associated with the particular non-fungible token, and the non-fungible token community can be indexed in the index data.
[0298] In some implementations, the index data can be generated by processing the obtained data with one or more machine-learned models (e.g., a segmentation model, a detection model, a classification model, and/or a feature extractor model). Transaction history can be processed to determine price history for the non-fungible token, and the price history can be processed to index trend data and/or stability data. Additionally and/or alternatively, whether the non-fungible token was lazy minted or not may be indexed. The index data can include whether the non-fungible token was auctioned.
[0299] The systems and methods can then store the index data in a search database. The search database can include a plurality of index datasets associated with a plurality of non- fungible tokens. In some implementations, the plurality of non-fungible tokens can be identified by processing data from a plurality of sources.
[0300] In some implementations, the systems and methods can receive a search query from a user computing system. The search query can include one or more search terms. Alternatively and/or additionally the search query can include one or more images, audio data, latent encoding data, and/or multimodal data.
[0301] The search query can be processed to determine the search query is associated with the index data. The search query may be received and processed with a search engine. The search engine can be configured to crawl a blockchain, web pages, and/or the index database, or search database.
[0302] In some implementations, determining the search query is associated with index data can include determining one or more search terms of the search query are descriptive of at least one of the digital asset, an author of the digital asset, or non-fungible token metadata. [0303] A search result associated with the digital asset can then be provided to the user computing system. The search result can include a preview of the digital asset. Alternatively and/or additionally, the search result can include an indicator indicating the search result is associated with a non-fungible token.
[0304] In some implementations, providing the search result associated with the digital asset to the user computing system can include determining one or more web pages are associated with the search query, generating one or more general web results based on the one or more web pages, and providing a search results page to the user computing system. The search results page can include the search result and one or more general web results. [0305] In some implementations, the index data generated based on blockchain data and the index data generated based on web page data can be reconciled. For example, in an instance in which the blockchain data and web data are in conflict, the systems and methods
can process the data, determine which data is more trustworthy, determine whether to merge the data, and/or determine whether to delete one or both sets of data.
[0306] In some implementations, the index data may be intervalley updated. The updates can occur at set intervals and/or may be obtained at a frequency based on transaction trends, performance data, type of digital asset, the particular blockchain, time of minting (e.g., older non-fungible tokens may be updated less often due to larger computational cost associated with the crawl), and/or based on cost.
[0307] The index database can include an index item field associated with the digital asset type such that non-fungible tokens associated with augmented-reality rendering assets can be differentiated from non-fungible tokens associated with images. In some implementations, the index data can include how to launch, run, and/or view the pay load (e.g., the digital asset). For example, a video player label, an image preview label, a particular augmented-reality application, and/or a particular device may be indexed.
[0308] Data extraction for index data generation can be machine-learned, based on heuristics, and/or may be deterministic.
[0309] The systems and methods disclosed herein can be utilized for search to allow a user to make a deliberate decision to invest or not invest in a particular non-fungible token. [0310] In particular, the systems and methods can be utilized to make Web3 technology easily accessible to a significant chunk of our users (and not just early adopters or crypto enthusiasts who are well versed in Web3). The way Web3 may work can be a significant departure from a general users mental model. For example, the systems and methods may focus on simplifying the tech, jargon, applications, and/or setup.
[0311] The blockchain computing system can include a decentralized system; however, the systems and methods disclosed herein can be implemented in a decentralized system, a closed-off ecosystem, and/or a hybrid system including portions completed by a decentralized system and portions completed by a centralized system.
[0312] In some implementations, the systems and methods disclosed herein can be utilized for identity purposes. For example, the systems and methods disclosed herein can involve and/or interface with a crypto wallet of a user to store user identity data to be utilized across Web3. A user may sign into websites, share personal data, prove identity, and/or transfer crypto currency based in part on the identity data.
[0313] Wallet apps can be built-in to browser. In Web3, there may be a single mechanism to sign in while keeping your data for yourself.
[0314] The blockchain computing system can store data descriptive of a variety of information, which can include non-fungible token Content IDs and/or ownership information for the non-fungible tokens. Non-fungible tokens can introduce scarcity and authenticity to digital items.
[0315] The systems and methods disclosed herein can be implemented into a search engine to enhance image, video, and audio search. For example, the systems and methods implemented into a search engine can signal to users who owns an image or video on the web and where the digital asset comes from, can enforce copyright rules for the digital asset, can detect if the digital asset has been tampered with or has trust issues, and/or can enable the sale or transfer of digital content on the web (e.g., non-fungible token marketplaces for images, music, and/or another form of digital asset).
[0316] The systems and methods disclosed herein can include creator tokens. A Web3 model can enable creators to own their content and have a direct relationship with their followers/subscribers/fans, which can bypass today’s platforms. This can be very disruptive to video platforms, but may be an opportunity for search engines, which may not be on the top of the mind for creators. Creator tokens can be a way for fans to “invest” in their favorite creators while also enabling creators to create a community around their fans.
[0317] In some implementations, the systems and methods disclosed herein can be utilized to provide an oracle system (e.g., a system that can provide service provider system for smart contracts to check whether something is real or has happened).
[0318] The systems and methods disclosed herein can include general information retrieval. The systems and methods can enable search to index the important parts of blockchain and make them accessible and useful.
[0319] The systems and methods can include decentralized autonomous organization, which can be used to automate decision making. In some implementations, information about decentralized autonomous organization of search engines can be provided and may make the decision making more transparent.
[0320] In some implementations, the systems and methods can enable ownership of any digital asset on the web by empowering creators and publishers to claim ownership of their digital content and set the rules of its usage in a scalable and high speed fashion. Additionally and/or alternatively, the systems and methods can enable ownership of any digital asset on the web by empowering search users to understand the provenance and history of a digital asset while also being able to take action on the digital asset in a way that is permitted by the
original creator (e.g., buy the non-fungible token and/or use the non-fungible token as a ticket).
[0321] In some implementations, the systems and methods can simultaneously create carrots for creators and publishers to publish non-fungible content on the web while also giving them tools to create this content and set rules of usage for the content.
[0322] For example, the carrots can be created to show who owns an image on the web or show items published by a creator/publisher, can block copies of an ‘owned’ digital asset or at least transfer any revenue generated from it to the original owner, can enable a user to sell and monetize generated content, and can enable royalty fees.
[0323] Additionally and/or alternatively, the systems and methods can include tools for creators/publishers to create non-fungible content. For example, the systems and methods can give creators/publishers easy tools to publish non-fungible content and set rules for the content usage that can both be done by casual creators as well as sophisticated large scale players.
[0324] In some implementations, the systems and methods can include a smart contract blockchain that can be open, closed, and/or a hybrid of both.
[0325] The systems and methods can be implemented to enable a non-fungible token marketplace across various digital asset platforms (e.g., an image platform, a video hosting platform, and/or a music hosting platform) and/or across various service platforms (e.g., a search engine, a social media platform, and/or a blog platform). The creators and/or publishers can generate digital assets, mint the digital assets, sell the digital assets, and/or receive royalties for future sales of the digital assets.
[0326] The non-fungible tokens can be utilized to access private chat groups or blogs inside different platforms and communities, can be used to set up avatars that are verified as being owned by a particular user, can enable quick communication between creators and owners, and can provide transactional history that can be used for future releases and purchases by providing insightful suggestions.
Example Deduplication Systems and Methods
[0327] The systems and methods disclosed herein can identify that a non-fungible token has been identified twice by comparing non-fungible tokens identified from a leaf page and non-fungible tokens identified by crawling a blockchain. For example, a plurality of non- fungible tokens can be identified and indexed based on a plurality of techniques. One technique can include analyzing a blockchain to identify data associated with a non-fungible
token. The data can then be parsed to determine identifiable data that can be indexed. Another technique can include analyzing a non-fungible token leaf page (e.g., a web page associated with a non-fungible token marketplace) to identify non-fungible tokens for sale. Data related to the non-fungible tokens can then be obtained and indexed. In some implementations, multiple techniques can be utilized for generating a more encompassing database for search; however, the use of multiple techniques can cause a non-fungible token to be indexed multiple times. For deduplication, the systems and methods disclosed herein can compare the identified marketplace non-fungible tokens against the identified blockchain non-fungible tokens to determine if a particular non-fungible token has been indexed multiple times. The comparison can include text processing, image processing, and/or latent encoding processing. Metadata, blockchain address data, and/or image data can be compared in order to determine a non-fungible token has been duplicated. In response to a duplication being identified, the data of the two index events may be merged and/or all but one index event for that particular non-fungible token may be deleted.
[0328] The systems and methods can include obtaining blockchain data from a blockchain computing system. The systems and methods can determine the blockchain data includes first token data. The first token data can be descriptive of a first non-fungible token associated with a first digital resource (e.g., a first digital asset). In some implementations, first index data can be generated based on the first token data. The first index data can be stored in an index database. Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface). The systems and methods can determine the web page data includes second token data. The second token data can be descriptive of a second non-fungible token associated with a second digital resource (e.g., a second digital asset). Second index data can be generated based on the second token data. The second index data can be stored in the index database. In some implementations, the systems and methods can determine the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) are a same digital resource (e.g., a same digital asset). The index database can be adjusted based on the first digital resource (e.g., the first digital asset) and the second digital resource (e.g., the second digital asset) being a same digital resource (e.g., a same digital asset). Alternatively and/or additionally, the determination of duplication may be based on other data. For example, matching contract addresses, matching token IDs, and/or matching blockchains. The index database can then be adjusted based on the determination.
[0329] For example, the systems and methods disclosed herein can deduplicate and/or flag duplicate instances of a token being indexed. The systems and methods can compare payloads of various tokens and contracts. The payloads (e.g., the digital assets) of different tokens can be compared to determine whether two or more tokens share the same payload (e.g., a digital asset with a slight variation (e.g., an image with a different saturation or cropping)). The determination can be generated by processing the payloads of different tokens with one or more machine-learned models. The determination can include image analysis (e.g., pixel analysis), video analysis, audio analysis, text analysis, and/or latent encoding analysis. Digital resources (e.g., digital assets) can be determined to be the same resource (e.g., the same asset) by determining the digital resources match and/or are substantially similar (e.g., within a threshold similarity). In response to determining the payloads match, one or more actions can be determined. The one or more actions can include flagging in the index data of each associated token to indicate the respective tokens have the same payload. Alternatively and/or additionally, the one or more actions can include merging the index data of the tokens, removing the index data of at least one of the tokens, and/or generating data that links the index data of the related tokens.
[0330] In some implementations, the one or more actions can be based at least in part on processing the transactional data of each of the tokens with duplicate payloads. For example, the systems and methods can include processing a first transaction dataset and a second transaction dataset to determine whether the first token or the second token is more likely to be authentic (e.g., a valid token that was minted first and/or minted by the creator). In some implementations, the systems and methods can include fraud detection techniques, which may include the use of heuristics. The systems and methods can analyze the transaction data to determine the token associated with the original digital resource creator (e.g., the original digital asset creator). Alternatively and/or additionally, the systems and methods can process the transaction data to determine the token with the earliest mint date. Alternatively and/or additionally, the systems and methods can process the transaction data to determine whether one of the tokens has transactional trends that appear more fraudulent than the other. For example, a set of transactions consistently between two parties for a singular token may be a sign of fraudulent activity, while a chain of transactions between various parties during a trending period for that specific family of digital resources (e.g., that specific family of digital assets) may be viewed as a more authentic chain of transactions.
[0331] In some implementations, the systems and methods may defer to the index data generated based on blockchain data obtained from a blockchain node over index data generated based on web page data (e.g., marketplace data).
[0332] Alternatively and/or additionally, the systems and methods can utilize prior data generated based on other validation analysis to determine the authenticity and/or validation of the present analysis. In some implementations, the URL, the URI, and/or the IPFS address of the payload can be processed to determine the valid token. For example, a URL, URI, and/or IPFS address with an invalid address, outdated address, and/or a heavily altered address may be determined to be invalid. URLs and/or URIs referencing a questionable website can cause the associated token to be downranked or dropped in the index database. In some implementations, different blockchains and/or different web platforms (e.g., different marketplaces, different posts, or different other content platforms) may be prioritized over one another.
[0333] Alternatively and/or additionally, an on-chain source may be prioritized over off- chain source. In some implementations, digital resources embedded directly on the blockchain data may be prioritized over digital resources merely referenced on-the-chain. Metadata indexed in the index database may be used to determine an authenticity of a particular token.
[0334] The flagging or alert of questionable, or potentially fraudulent, tokens can be utilized to surface warnings when retrieving the questionable tokens (e.g., a warning provided with the search result for the questionable token). Although digital assets may be discussed in detail below, the systems and methods can be implemented for any digital resource (e.g., any digital resource associated with a non-fungible token). Alternatively and/or additionally, the systems or methods may flag common, or non-scarce, digital resources (e.g., the same artist may create 100 copies of the same piece of digital art intentionally (e.g., in a “limited series”, etc.).
[0335] In particular, the systems and methods can obtain blockchain data from a blockchain computing system. The blockchain data can be associated with a particular blockchain and/or from a plurality of blockchains. Additionally and/or alternatively, the blockchain data can be obtained from a blockchain node. In some implementations, the blockchain computing system can include a decentralized, distributed computing system that stores data associated with a plurality of non-fungible tokens and a plurality of transactions associated with the non-fungible tokens.
[0336] The blockchain data can be determined to include first token data. The first token data can be descriptive of a first non-fungible token associated with a first digital asset. In some implementations, the blockchain computing system can include a distributed computing system including a plurality of computing devices. The blockchain data can include embedded code associated with a plurality of non-fungible tokens. In some implementations, determining the blockchain data includes first token data can include crawling embedded code. The blockchain data can include the embedded code. Alternatively and/or additionally, the blockchain data can be processed to identify one or more code characteristics indicative of a non-fungible token (e.g., EIP compliant structure). In some implementations, the blockchain data can be parsed into segments that can be individually processed to determine if the segment includes non-fungible token data.
[0337] First index data can be generated based on the first token data. The first index data can be stored in an index database. The first token data can include data descriptive of the payload (e.g., the digital asset associated with the non-fungible token). In some implementations, the first token data can include data descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
[0338] Web page data can be obtained from a digital web platform user interface (e.g., a digital marketplace user interface). In some implementations, the web page data can include a snapshot of a digital resource listing webpage associated with the second non-fungible token. The digital web platform user interface (e.g., the digital marketplace user interface) can be provided by a web platform computing system (e.g., a marketplace computing system) that hosts a non-fungible token marketplace for selling and displaying non-fungible tokens. Alternatively and/or additionally, a leaf page can be obtained from a website associated with non-fungible tokens. The leaf page can be processed to generate the web page data.
[0339] The web page data can be determined to include second token data. The second token data can be descriptive of a second non-fungible token associated with a second digital asset. The second token data can include reference data associated with the second digital asset. In some implementations, the second digital asset can depict an augmented version of a scene depicted in the first digital asset.
[0340] Second index data can be generated based on the second token data. The second index data can be stored in the index database. The second index data can include data
descriptive of the non-fungible token’s creator/publisher, description of the digital asset, mint time, transaction data associated with the non-fungible token, the particular blockchain associated with the non-fungible token, a digital asset type, a determined likelihood of fraudulence score, and/or one or more determined tags.
[0341] The first digital asset and the second digital asset can be determined to be a same digital asset. The determination can be based on determining the first digital asset of the first non-fungible token and determining the second digital asset of the second non-fungible token. The first digital asset and the second digital asset can be compared to determine similar and/overlapping data. The determination can include image processing, text processing, audio processing, video processing, and/or latent encoding processing. In some implementations, the determination can include processing the first digital asset and the second digital asset with one or more machine-learned models (e.g., an image classification model, an audio classification model, a video classification model, an object detection model, a feature extractor model, and/or one or more recognition models).
[0342] The index database can be adjusted based on the first digital asset and the second digital asset being a same digital asset. The particular type of adjustment may be based on the transaction data of the non-fungible tokens, the source of the token data, and/or a variety of other factors.
[0343] In some implementations, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include removing the second index data from the index database.
[0344] Alternatively and/or additionally, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include merging the first index data and the second index data to generate augmented index data.
[0345] Alternatively and/or additionally, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a first text entry associated with the first index data based on the first digital asset and the second digital asset being the same digital asset.
[0346] Alternatively and/or additionally, adjusting the index database based on the first digital asset and the second digital asset being the same digital asset can include adjusting a second text entry associated with the second index data based on the first digital asset and the second digital asset being the same digital asset. In some implementations, the second index entry can be stored in the index database.
[0347] In some implementations, the systems and methods can include receiving a search request. The search request can be received from a user computing system. The search request can include one or more search terms, one or more input images, and/or one or more other forms of input data.
[0348] One or more search results can be determined based on the index database. The one or more search results can be determined based on responsiveness to the search request. Additionally and/or alternatively, the one or more search results can be determined based on context data (e.g., a user computing system context, a global context, and/or a non-fungible token context.
[0349] The one or more search results can then be provided for display. The one or more search results can include a particular search result associated with the first digital asset. In some implementations, the one or more search results can be provided for display with one or more labels (e.g., a non-fungible token label, scam website label, questionable transactions label, a validation label, and/or a duplicate non-fungible token label).
[0350] The systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain. In some implementations, the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace). A particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second index entries. In response to determining the particular first index entry is associated with the particular second index entry, the index database can be adjusted.
[0351] The systems and methods can generate a plurality of first index entries for an index database based on crawling a blockchain. The plurality of first index entries can include a plurality of first index datasets associated with a plurality of first non-fungible tokens.
[0352] Additionally and/or alternatively, the systems and methods can generate a plurality of second index entries for the index database based on crawling a digital web platform (e.g., a digital marketplace). The digital web platform can include a user interface for providing a plurality of non-fungible tokens for sale. The plurality of second index entries can include a plurality of second index datasets associated with a plurality of second non- fungible tokens.
[0353] A particular first index entry of the plurality of first index entries can be determined to be associated with a particular second index entry of the plurality of second
index entries. The determination can include comparing each of the plurality of first index entries with each of the plurality of second index entries. The comparison can include obtaining a plurality of first digital assets associated with the plurality of first index entries. Additionally and/or alternatively, the comparison can include obtaining a plurality of second digital assets associated with the plurality of second index entries. Each of the plurality of first digital assets can be compared to each of the plurality of second digital assets. The comparison can include processing the digital assets with one or more machine-learned models to determine if and/or which digital assets are the same (e.g., the digital assets match and/or are within a threshold similarity).
[0354] In some implementations, the first payload can include a first digital asset. The second payload can include a second digital asset. In some implementations, the first digital asset and the second digital asset can match and/or be similar.
[0355] In some implementations, determining the particular first index entry of the plurality of first index entries is associated with the particular second index entry of the plurality of second index entries can include determining a first payload associated with a first non-fungible token is same as a second payload associated with a second non-fungible token. The first non-fungible token can be associated with the particular first index entry. In some implementations, the second non-fungible token can be associated with the particular second index entry.
[0356] In response to determining the particular first index entry is associated with the particular second index entry, the index database can be adjusted. Adjusting the index database can include merging index entries, removing index entries, and/or adding tags to each of the index entries determined to be duplicative.
[0357] Alternatively and/or additionally, the systems and methods can include obtaining a particular index entry and a plurality of index entries. The plurality of index entries can be obtained from an index database. The particular index entry and the plurality of index entries can be processed to generate duplication data. The duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry. Validation data can be generated based at least in part on the duplication data. In some implementations, the validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry. The validation data can be provided as an output.
[0358] The systems and methods can include obtaining a particular index entry and a plurality of index entries. The plurality of index entries can be obtained from an index
database. In some implementations, the plurality of index entries can include one or more index entries obtained by extracting data from a blockchain. The plurality of index entries can include one or more index entries obtained by extracting data from a non-fungible token marketplace.
[0359] The particular index entry and the plurality of index entries can be processed to generate duplication data. The duplication data can be descriptive of whether one or more different index entries of the plurality of index entries are associated with a digital asset associated with the particular index entry.
[0360] Validation data can be generated based at least in part on the duplication data. The validation data can be associated with an authenticity of a non-fungible token associated with the particular index entry. In some implementations, the validation data can be based at least in part on a timestamp associated with the particular index entry. The validation data can be descriptive of whether the non-fungible token was minted before another publication of the digital asset.
[0361] In some implementations, generating the validation data based at least in part on the duplication data can include determining the particular index entry is authentic by determining the particular index entry is associated with a first minting of the digital asset. The determination can be based on transaction data, mint times, publication times, particular blockchains, source of token data, the payload URI data, and/or digital asset quality. The validation may be generated with one or more machine-learned models.
[0362] The validation data can be provided as an output. The validation data can be provided via one or more user-interface elements (e.g., banners, pop-ups, user-interface labels, and/or user-interface annotations). In some implementations, the validation data can be provided for display adjacent to a preview of the digital asset.
Example Identification Systems and Methods
[0363] The systems and methods can leverage blockchain trigger event determination and processing to identify data descriptive of a non-fungible token. The systems and methods can include obtaining blockchain data. The blockchain data can include byte code associated with a blockchain. The blockchain data can be processed to determine a subset of the blockchain data includes candidate token data. In some implementations, the candidate token data can be associated with a blockchain trigger event. An output action associated with the blockchain trigger event can be determined. The output action can be associated with a digital resource. The output action can be processed to determine the candidate token data is
descriptive of a non-fungible token. Identification data can be provided as an output. The identification data can be descriptive of the candidate token data being associated with the non-fungible token.
[0364] The systems and methods can obtain blockchain data. The blockchain data can be associated with a blockchain that stores data in a decentralized and distributed system. For example, the blockchain data can include byte code associated with a blockchain. The blockchain data can be associated with a plurality of non-fungible tokens. The plurality of non-fungible tokens can be associated with a plurality of digital resources (e.g., a plurality of digital assets). In some implementations, the blockchain data can be obtained from a blockchain node associated with a particular blockchain. The blockchain data can include prefiltered blockchain data that has been processed to filter out data that may not be utilized during identification and/or indexing.
[0365] The systems and methods can process the blockchain data to determine a subset of the blockchain data includes candidate token data. The candidate token data can be associated with a blockchain trigger event (e.g., an if-then event that can cause a transfer of a digital resource (e.g., a digital asset)). In some implementations, the candidate token data can be determined based on one or more standards associated with non-fungible token code standards. Additionally and/or alternatively, the candidate token data can include reference data associated with the digital resource. The blockchain trigger event can be associated with a smart contract. In some implementations, the candidate token data can be determined by parsing the blockchain data into segments that can be individually processed. The candidate token data may be determined based on the determination that the subset of blockchain data is associated with a smart contract. The smart contract can include a blockchain trigger event, and the blockchain trigger event can include an event in which a pay load (e.g., a digital resource) is transferred in response to a transfer request (e.g., a purchase of the digital resource with crypt currency).
[0366] An output action associated with the blockchain trigger event can be determined. The output action can be associated with a digital resource. In some implementations, the output action can be a resulting action in response to the blockchain trigger event occurring. The output action can be associated with an embedded uniform resource identifier and/or an embedded uniform resource locator.
[0367] In some implementations, processing the output action to determine the candidate token data is descriptive of the non-fungible token can include determining an entity associated with the output action and determining the entity is a digital resource (e.g., a
digital asset) being transferred in response to the blockchain trigger event. Alternatively and/or additionally, the entity can be processed to determine the smart contract is an empty contract. In response to the smart contract being an empty contract, the identification data may be descriptive of the candidate token data not being data to index.
[0368] Alternatively and/or additionally, processing the output action to determine the candidate token data is descriptive of the non-fungible token can include determining the output action includes a link to a landing address (e.g., a landing web page and/or a landing storage file). Landing data associated with the landing address can be obtained. The landing data can then be processed to determine the landing data includes a digital resource (e.g., a digital asset). The digital resource can be determined to be associated with the non-fungible token.
[0369] Alternatively and/or additionally, processing the output action to determine the candidate token data is descriptive of the non-fungible token can include obtaining, via an application programming interface, a uniform resource identifier.
[0370] The output action can be processed to determine the candidate token data is descriptive of a non-fungible token. The determination can be determined based on the output action being associated with a digital resource (e.g., a digital asset). In some implementations, the determination can be determined based on the output action being descriptive of an intent for the smart contract to be associated with a non-fungible token.
[0371] Identification data can be provided as an output. The identification data can be descriptive of the candidate token data being associated with the non-fungible token. The identification data can be generated based on the determination that the candidate token data is descriptive of the non-fungible token. The identification data can be descriptive of the candidate token data including token data for indexing.
[0372] In some implementations, the systems and methods can include determining a validity of the candidate token data. The validity can be determined based on whether the candidate token data includes determined problematic characteristics. The identification data may be generated based at least in part on the validity.
[0373] In some implementations, the systems and methods can include processing the output action to determine a digital resource (e.g., a digital asset) associated with the non- fungible token. The digital resource can be processed to determine a quality of the digital resource (e.g., the quality of the digital asset). The systems and methods can determine whether to index the candidate token data based at least in part on the identification data and the quality of the digital resource. The quality of the digital resource can be determined based
on a resolution of the digital resource, a size of the digital resource, a machine-learned determination (e.g., an output of a machine-learned model that has processed data associated with the digital resource), and/or a determined uniqueness of the digital resource.
[0374] Alternatively and/or additionally, the systems and methods can leverage standard data to identify token data in a blockchain code. For example, the systems and methods can include obtaining blockchain data. The blockchain data can include byte code associated with a blockchain. The blockchain data can be processed to determine a subset of the blockchain data includes candidate token data. The candidate token data can be associated with a blockchain trigger event. The systems and methods can include obtaining standard data. In some implementations, the standard data can include one or more standards associated with standards for a non-fungible token. The candidate token data can be processed to determine the candidate token data is associated with the one or more standards. Identification data can be generated based on the candidate token data being associated with the one or more standards. In some implementations, the identification data can be descriptive of the candidate token data being associated with the non-fungible token. The identification data can be provided as output.
[0375] The systems and methods can obtain blockchain data. The blockchain data can include byte code associated with a blockchain. The blockchain data can be associated with a plurality of smart contracts. The plurality of smart contracts may include a plurality of if-then logic sets.
[0376] In some implementations, obtaining the blockchain data can include obtaining first node data from a blockchain node. The blockchain node can be associated with a particular blockchain. Obtaining the blockchain data can further include processing the first node data in a sandbox (e.g., an isolated computer environment to mitigate the spread of any potential unexpected consequences (e.g., a computer bug)) to generate a first portion of the blockchain data and storing the first portion of the blockchain data.
[0377] Additionally and/or alternatively, obtaining the blockchain data can include obtaining second node data from the blockchain node. The blockchain node can be associated with the particular blockchain. In some implementations, obtaining the blockchain data can further include processing the second node data in the sandbox to generate a second portion of the blockchain data and storing the second portion of the blockchain data.
[0378] The blockchain data can be processed to determine a subset of the blockchain data includes candidate token data. In some implementations, the candidate token data can be associated with a blockchain trigger event. The blockchain trigger event can include an if-
then event such that if a certain event occurs, a digital resource can have a transfer in ownership. The candidate token data may be determined based on the detection of a blockchain trigger event in the byte code of the blockchain.
[0379] The systems and methods can obtain standard data. The standard data can include one or more standards associated with standards for a non-fungible token. The standards can be associated with predetermined interfaces for uniform interfacing with different non- fungible tokens. The smart contract structure can conform to the standards to enable a standard application programming interface to facilitate interactions with different non- fungible tokens (e.g., regardless of the particular publisher).
[0380] The candidate token data can be processed to determine the candidate token data is associated with the one or more standards. The determination can include searching the candidate token data to determine whether one of the predetermined interfaces is included in the candidate token data. In some implementations, the candidate token data can be processed to identify whether a particular blockchain trigger event language (e.g., a function signature, which may include a particular string matching one of the predefined string templates for non-fungible tokens as indicated by the one or more standards) is included in the candidate token data.
[0381] Identification data can be generated based on the candidate token data being associated with the one or more standards. The identification data can be descriptive of the candidate token data being associated with the non-fungible token.
[0382] The identification data can be provided as output. The identification data can be provided to a user computing system. In some implementations, the identification data can be provided to an indexing computing system to instruct the index computing system whether to index the candidate token data. For example, if the identification data is descriptive of the candidate token data being associated with a non-fungible token, the candidate token data may be indexed. Alternatively and/or additionally, if the identification data is descriptive of the candidate token data not being associated with a non-fungible token, the candidate token data may not be indexed. The candidate token data determined to be associated with a non- fungible token can be identified token data that can be stored for indexing and/or for other purposes (e.g., for machine-learning training to training one or more models to detect and identify token data associated with non-fungible token(s)).
[0383] Index data can then be generated based on the candidate token data and the identification data. The identification data can be utilized to determine whether to and at what
extent to index the candidate token data. In some implementations, data descriptive of the identification data can be indexed with other data associated with the candidate token data. [0384] In some implementations, the blockchain trigger event can be processed to determine a digital asset associated with the non-fungible token. The digital asset can be processed to determine the digital asset is vulgar, and the systems and methods can determine whether to index the candidate token data based at least in part on the identification data and the digital asset being vulgar.
[0385] Alternatively and/or additionally, the token data may be identified based on a determined intent. For example, the systems and methods can include obtaining blockchain data. The blockchain data can include byte code associated with a blockchain. The blockchain data can be processed to determine a subset of the blockchain data includes candidate token data. In some implementations, the candidate token data can be associated with a blockchain trigger event. The candidate token data can be processed to determine an intent associated with the candidate token data. The candidate token data can include reference data associated with a digital resource. The intent can be processed to determine the candidate token data is descriptive of a non-fungible token. In some implementations, identification data can be provided as an output. The identification data can be descriptive of the candidate token data being associated with the non-fungible token.
[0386] The systems and methods can obtain blockchain data. The blockchain data can include byte code associated with a blockchain. The blockchain data may be obtained from a blockchain node. Alternatively and/or additionally, the blockchain data may be obtained from anon-blockchain repository.
[0387] The blockchain data can be processed to determine a subset of the blockchain data includes candidate token data. The candidate token data can be associated with a blockchain trigger event. In some implementations, the candidate token data can include data descriptive of a smart contract. The blockchain trigger event can be an event that triggers the transfer of a payload of a smart contract.
[0388] The candidate token data can be processed to determine an intent associated with the candidate token data. The candidate token data can include reference data associated with a digital resource. In some implementations, the intent can be determined based at least in part on the blockchain trigger event. Alternatively and/or additionally, the intent can be determined based at least in part on freeform text in the candidate blockchain data. The intent can be a minting intent to publish the non-fungible token on the blockchain. In some implementations, the intent can be determined by processing the candidate token data with a
machine-learned model. The machine-learned model can be trained to determine whether the candidate token data is descriptive of script data structured to provide a non-fungible token functionality.
[0389] The intent can be processed to determine the candidate token data is descriptive of a non-fungible token. For example, the intent can be processed to determine whether the intent meets a threshold likelihood of being a non-fungible token intent.
[0390] The systems and methods can provide identification data as an output. The identification data can be descriptive of the candidate token data being associated with the non-fungible token. The identification data can be generated based at least in part on the determination that the intent is a non-fungible-token intent.
[0391] In some implementations, the systems and methods disclosed herein can identify non-fungible token data based on whether the actions associated with a smart contract match (e.g., are the same or similar to) the actions of how anon-fungible token would act. For example, the smart contract may include a “get URI” that can include an application programming interface for pulling a uniform resource identifier. Additionally and/or alternatively, the smart contract may include similar structure to one or more EIP-721 standards (EIP-721: Non-Fungible Token Standard, ETHEREUM IMPROVEMENT PROPOSALS (Jan. 24, 2018), https://eips.ethereum.org/EIPS/eip-72E). Alternatively and/or additionally, the blockchain can be crawled to identify payloads that may match (e.g., be the same as or substantially similar to) a digital asset of a non-fungible token. The systems and methods may identify token data sets even if the dataset includes deviations from the one or more standards.
[0392] Additionally and/or alternatively, the systems and methods can include one or more pre-filtering techniques. For example, the systems and methods can include filtering out any dataset associated with a suspicious address, a suspicious embedding, and/or a suspicious actor (e.g., an unknown publisher or an owner/publisher with an association to past scam- related non-fungible tokens).
[0393] In some implementations, the identified token data can be further processed to determine whether and/or how to index the identified token data. For example, the systems and methods can process the candidate token data to determine whether the token data is suspicious, potentially includes a bug, and/or includes a low quality digital asset.
[0394] The token data may be determined to be suspicious based on an embedded uniform resource identifier and/or an embedded uniform resource locator. Alternatively and/or additionally, the token data may be determined to be suspicious based on the
transaction data for the non-fungible token (e.g., suspicious strings of transactions, suspicious actors in the transactions, suspicious context surrounding the minting, etc.).
[0395] Determining the potential of a bug can be based on heuristics and/or machine- learned techniques (e.g., the processing of the token data with a machine-learned model). [0396] A low quality digital resource (e.g., a low quality digital asset) can be a digital asset with little to no distinguishing features (e.g., a white noise audio clip or a digital asset that is the same or substantially similar to a plurality of other digital assets or media files that pre-date the date of minting). Alternatively and/or additionally, a low quality digital asset can be a digital asset with poor resolution, heavy pixelation, heavy noise, file errors, and/or small in relative size to other non-fungible token digital assets of the same type or class. In some implementations, a low quality digital asset can be a digital asset with vulgar and/or offensive content. For example, the systems and methods may obtain the digital asset associated with the token data. The digital asset can be processed to determine whether the digital asset includes vulgar and/or offensive material. If the digital asset is determined to include vulgar and/or offensive content, the respective token data may be flagged and/or tagged. The systems and methods can determine not to index the token data based on the tag and/or may index the token data with a tag indicating the vulgar and/or offensive nature of the digital asset. The tag can then be utilized to limit the surfacing of the indexed data for only a subset of users (e.g., users that allow the surfacing of vulgar and/or offensive content).
[0397] Alternatively and/or additionally, the quality of the non-fungible token may be determined based on how compliant the token data is with EIP and ERC standards for non- fungible tokens. The compliance may be weighted based on which standards are met and which standards the token data is deficient. In some implementations, the quality can be based on whether the uniform resource identifier can be used to navigate to the digital asset without edits.
[0398] In some implementations, the name and/or description associated with the token data can be processed to determine whether the name and/or description meet certain naming patterns or description patterns.
[0399] In some implementations, token data can be identified as being associated with a particular non-fungible token grouping (e.g., a particular community) based on a determined artist name, a determined publisher, and/or by metadata associated with the non-fungible token. The grouping may be determined based on minting date, an association with an event, and/or based on the transaction history of the purchasers.
[0400] Alternatively and/or additionally, the token data may be identified by processing the blockchain data and identifying a method signature. The method signature can be associated with the first four bytes of a hash. In some implementations, the method signature can be associated with a set uniform resource identifier with two parameters. The first parameter can include a token ID for the particular non-fungible token, and the second parameter can include a string of data.
[0401] The systems and methods disclosed herein can crawl the blockchain by utilizing a peer to peer node running on one or more computing devices. The systems and methods can passively “listen” and then dump any new data into a log to be later processed. Alternatively and/or additionally, the systems and methods may involve “live watching” of the node at intervals (e.g., a manually set interval, a predetermined interval, and/or an automatically determined interval). The systems and methods can crawl the blockchain to determine if any changes have occurred and any change may be identified and added to the log. In some implementations, the systems and methods may leverage application programming interfaces to identify and obtain new data.
[0402] In some implementations, the systems and methods can utilize non-blockchain repositories to obtain blockchain data. For example, a third party application programming interface may obtain and store the blockchain data in a non-blockchain repository, which can be accessed by the systems and methods to obtain the blockchain data for processing.
[0403] When crawling the blockchain and/or when crawling the web, the systems and methods may search for a contract address and a token ID to identify token data. Additionally and/or alternatively, the systems and methods may crawl the web to identify non-fungible token drop events and/or lazy minting events. The systems and methods may monitor messaging applications and/or social media platforms to obtain data on potential minting events.
[0404] The obtaining and processing of the blockchain data from the blockchain node can include one or more security techniques for mitigating the possibility of corrupting data due to opening or processing a bug or computer virus. For example, the blockchain data can be obtained and stored in a sandbox. The data can be processed in the sandbox before indexing to ensure bugs and/or viruses do not affect the index database.
[0405] In some implementations, the systems and methods can include customized blockchain nodes for different tasks. For example, a plurality of blockchain nodes can be configured to obtain and filter blockchain data for a plurality of different purposes. One node may filter the blockchain data to obtain and process transactional data, while another node
may filter the blockchain data to obtain and process newly minted non-fungible tokens. Additionally and/or alternatively, different nodes may be configured to identify and obtain data associated with different non-fungible token types. For example, one node may be configured to identify and obtain token data for non-fungible tokens associated with images, while another node may be configured to identify and obtain token data for non-fungible tokens associated with domains. The plurality of nodes may be associated with different blockchains and/or may be associated with filtering based on different identification techniques. For example, a first node may obtain blockchain data to identify token data based on the identification of a digital asset payload, a second node may obtain data to be processed to determine token data based on naming patterns, and a third node may obtain blockchain data to process to determine token data based on one or more non-fungible token standards. [0406] In some implementations, the systems and methods may probe blockchains by sending beacon transactions to gauge and/or track network health, along with potentially tracking other data characteristics. The probing can be utilized in updating “data fetch” strategies, or approaches. For example, if a beacon transaction is taking a longer time to process for a given amount of gas, the systems and methods may leverage more complex, dynamic fetching strategies, which may back off until transaction rates tick back up. The adjustment can help to potentially lower the cost of obtaining the “latest” data from a blockchain.
Additional Disclosure
[0407] The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
[0408] While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and
equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.
Claims
1. A computing system, the system comprising: one or more processors; and one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising: obtaining blockchain data from a blockchain computing system, wherein the blockchain data comprises code associated with a plurality of non-fungible tokens; storing the blockchain data in a blockchain log; processing the blockchain data to determine token data associated with a non- fungible token of the plurality of non-fungible tokens; determining a portion of the token data comprises descriptive data, wherein the descriptive data is associated with the non-fungible token; segmenting the descriptive data from the blockchain data; and storing the descriptive data.
2. The system of any preceding claim, wherein the descriptive data comprises information determined to be associated with a particular identifying characteristic of a non- fungible token, and wherein the determination is based on one or more standards associated with a structure of non-fungible token byte code.
3. The system of any preceding claim, wherein determining the portion of the token data comprises the descriptive data comprises: parsing the token data to generate a plurality of segment datasets; processing each of the plurality of segment datasets with a machine-learned natural language processing model to generate a plurality of segment classifications; and determining a particular segment dataset of the plurality of segment datasets comprise descriptive data based on the plurality of segment classifications.
4. The system of any preceding claim, wherein the operations further comprise: obtaining standard data, wherein the standard data is descriptive of one or more standards for token code; and
wherein the token data is determined based at least in part on the one or more standards.
5. The system of claim 4, wherein the code of the blockchain data is associated with the one or more standards for token code.
6. The system of any preceding claim, wherein determining the portion of the token data comprises the descriptive data comprises: determining token identification data associated with the non-fungible token; determining a plurality of transactions in the blockchain data based on the token identification data; and determining the portion of the token data based on the plurality of transactions.
7. The system of any preceding claim, wherein the descriptive data comprises at least one of a digital asset associated with the non-fungible token, transaction data associated with the non-fungible token, a name associated with the non-fungible token, a description associated with the non-fungible token, or creator identification associated with a creator of the non-fungible token.
8. A computer-implemented method, the method comprising: obtaining, by a computing system comprising one or more processors, blockchain data from a blockchain computing system, wherein the blockchain data comprises code associated with a plurality of non-fungible tokens; processing, by the computing system, the blockchain data to determine a link in the blockchain data; obtaining, by the computing system, a landing page associated with the link, wherein the landing page is obtained based on the link; determining, by the computing system, content data associated with the landing page, wherein the content data is associated with a non-fungible token of the plurality of non- fungible tokens; and storing, by the computing system, the content data.
9. The method of any preceding claim, wherein the link comprises at least one of a uniform resource identifier or a uniform resource locator.
10. The method of any preceding claim, wherein the landing page comprises a digital asset, wherein the digital asset is a payload of a smart contract associated with the non- fungible token.
11. The method of any preceding claim, wherein the content data comprises a preview of a digital asset associated with the non-fungible token.
12. The method of any preceding claim, further comprising: determining a second link based on the landing page; obtaining a second landing page based on the second link; and wherein the second landing page comprises the content data.
13. The method of any preceding claim, wherein obtaining the blockchain data comprises: accessing a blockchain node, wherein the blockchain node is associated with a particular blockchain; and recursively crawling the particular blockchain.
14. One or more non-transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations, the operations comprising: obtaining blockchain data from a blockchain computing system, wherein the blockchain data comprises code associated with a plurality of non-fungible tokens; processing the blockchain data to determine a first set of data associated with a particular non-fungible token of the plurality of non-fungible tokens; processing the blockchain data to determine a second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens; and storing the first set of data and the second set of data.
15. The one or more non-transitory computer-readable media of any preceding claim, wherein the operations further comprise: segmenting the first set of data and the second set of data from the blockchain data.
16. The one or more non-transitory computer-readable media of any preceding claim, wherein the first set of data comprises freeform text data.
17. The one or more non-transitory computer-readable media of any preceding claim, wherein the second set of data comprises transactional data from an electronic ledger.
18. The one or more non-transitory computer-readable media of any preceding claim, wherein the operations further comprise: generating index data for the particular non-fungible token based on the first set of data and the second set of data.
19. The one or more non-transitory computer-readable media of any preceding claim, wherein processing the blockchain data to determine the first set of data associated with the particular non-fungible token of the plurality of non-fungible tokens comprises: crawling the blockchain data to identify link data; and obtaining content data associated with the link data.
20. The one or more non-transitory computer-readable media of any preceding claim, wherein processing the blockchain data to determine the second set of data associated with the particular non-fungible token of the plurality of non-fungible tokens comprise: determining a plurality of datasets associated with non-fungible token transactions, wherein the non-fungible token transactions are associated with the particular non-fungible token; and generating the second set of data based on the plurality of datasets.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2022/037432 WO2024019699A1 (en) | 2022-07-18 | 2022-07-18 | Extracting data from a blockchain |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2022/037432 WO2024019699A1 (en) | 2022-07-18 | 2022-07-18 | Extracting data from a blockchain |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2024019699A1 true WO2024019699A1 (en) | 2024-01-25 |
Family
ID=82850582
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2022/037432 WO2024019699A1 (en) | 2022-07-18 | 2022-07-18 | Extracting data from a blockchain |
Country Status (1)
Country | Link |
---|---|
WO (1) | WO2024019699A1 (en) |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200242105A1 (en) * | 2019-01-24 | 2020-07-30 | Peoplebrowsr, Inc. | Platform for creating and using actionable non-fungible tokens (?nft) |
US20210390531A1 (en) * | 2020-06-15 | 2021-12-16 | Icecap, LLC | Diamond custody system with blockchain non-fungible tokens (nfts) |
US20220210061A1 (en) * | 2018-10-16 | 2022-06-30 | Eluvio, Inc. | Access control and ownership transfer of digital content using a decentralized content fabric and ledger |
-
2022
- 2022-07-18 WO PCT/US2022/037432 patent/WO2024019699A1/en unknown
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220210061A1 (en) * | 2018-10-16 | 2022-06-30 | Eluvio, Inc. | Access control and ownership transfer of digital content using a decentralized content fabric and ledger |
US20200242105A1 (en) * | 2019-01-24 | 2020-07-30 | Peoplebrowsr, Inc. | Platform for creating and using actionable non-fungible tokens (?nft) |
US20210390531A1 (en) * | 2020-06-15 | 2021-12-16 | Icecap, LLC | Diamond custody system with blockchain non-fungible tokens (nfts) |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
Pasquini et al. | Media forensics on social media platforms: a survey | |
US9595053B1 (en) | Product recommendation using sentiment and semantic analysis | |
US20170270600A1 (en) | Visually generated consumer product presentation | |
Teyssou et al. | The InVID plug-in: web video verification on the browser | |
US10878020B2 (en) | Automated extraction tools and their use in social content tagging systems | |
Wang et al. | You are your photographs: Detecting multiple identities of vendors in the darknet marketplaces | |
US11514124B2 (en) | Personalizing a search query using social media | |
US9104683B2 (en) | Enabling intelligent media naming and icon generation utilizing semantic metadata | |
KR20100044669A (en) | Method, system and computer-readable recording medium for providing information on goods based on image matching | |
US20130283231A1 (en) | Method and System for Compiling a Unique Sample Code for an Existing Digital Sample | |
WO2023108980A1 (en) | Information push method and device based on text adversarial sample | |
US10489373B1 (en) | Method and apparatus for generating unique hereditary sequences and hereditary key representing dynamic governing instructions | |
Rama et al. | A large scale study of reader interactions with images on Wikipedia | |
US9460199B2 (en) | Application of text analytics to determine provenance of an object | |
Lawton et al. | eDiscovery in digital forensic investigations | |
Andrunyk et al. | Information System of Photostock Web Galleries Based on Machine Learning Technology. | |
Zhang et al. | An exploratory study on utilising the web of linked data for product data mining | |
WO2024019699A1 (en) | Extracting data from a blockchain | |
WO2024005825A1 (en) | Identifying non-fungible tokens and related content for indexing | |
WO2024005824A1 (en) | Deduplication of non-fungible tokens in search index | |
WO2024005823A1 (en) | Generating a comprehensive non-fungible token search index | |
CN113887191A (en) | Method and device for detecting similarity of articles | |
Dubettier et al. | File type identification tools for digital investigations | |
US20240054190A1 (en) | Digital Rights Management for NFTs Across Search Surfaces | |
Cao | E-Commerce Big Data Mining and Analytics |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 22753865Country of ref document: EPKind code of ref document: A1 |