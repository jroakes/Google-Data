US6453070B1 - Diacritical processing for unconstrained, on-line handwriting recognition using a forward search - Google Patents
Diacritical processing for unconstrained, on-line handwriting recognition using a forward search Download PDFInfo
- Publication number
- US6453070B1 US6453070B1 US09/042,829 US4282998A US6453070B1 US 6453070 B1 US6453070 B1 US 6453070B1 US 4282998 A US4282998 A US 4282998A US 6453070 B1 US6453070 B1 US 6453070B1
- Authority
- US
- United States
- Prior art keywords
- diacritical
- character
- diacriticals
- score
- potential
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/22—Character recognition characterised by the type of writing
- G06V30/226—Character recognition characterised by the type of writing of cursive writing
- G06V30/2268—Character recognition characterised by the type of writing of cursive writing using stroke segmentation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/32—Digital ink
- G06V30/333—Preprocessing; Feature extraction
- G06V30/347—Sampling; Contour coding; Stroke extraction
Definitions
- the present invention relates to diacritical processing for unconstrained, on-line handwriting recognition using a forward search.
- Handwriting is a process with an inherent temporal structure; it consists of a pen being driven along a trajectory in time. Such temporal information, however, gets lost when an input script is scanned from a page (i.e., “off-line” recognition), but temporal information is available when the input script is captured using a digitizing tablet (i.e., “on-line” recognition). Recognition in the off-line case is difficult because it is necessary to deal with overlapping or touching characters, unintentional pen lifts and different stroke widths. Such events sometimes significantly alter the topological pattern of characters in the input script. These events, however, have little or no influence on the dynamic pattern of motion in the writing. As a result, on-line recognition systems commonly use time-based representation schemes.
- Time-based representations are subject to a source of misinformation as well.
- the letter “E” can be written using multiple pen trajectories generating temporal variations that are not apparent in its static representation. While such variations in trajectory can be relatively large in isolated characters, it is believed that the number of variations is limited when writing naturally run-on text.
- FIG. 1 illustrates an example image for the word “city” written in cursive style with diacriticals in the order in which the body, the i-dot and the t-cross of the word were written.
- the word “city” is usually written with three ink portions—the first ink portion is the main body of the word, the second ink portion is the dot for the “i” and the third ink portion is the cross of the “t”. Delayed diacriticals constitute a problem for time ordered representations because all the evidence for a character may not be contiguous.
- Delayed diacriticals introduce significant complexity to the design of an on-line handwriting recognizer, because processing the delayed diacriticals requires some reordering of the time domain information. As shown above in FIG. 1, it is common in cursive writing to write the body of a “t”, “j” or “i” (and sometimes an “x” or “f”) during the writing of the word, and then to return and dot or cross the letter once the word is complete. Apostrophes may also be written at the end of the word in a similar way. A difficulty arises because the recognizer has to look ahead when scoring one of these characters to find the mark occurring later in the input script that completes the character.
- the procedure may end up discarding ink which is valuable for character disambiguation (e.g., between a cursive style “i” and a cursive style “e” or between a cursive style “t” and a cursive style “l”).
- Each of these vectors typically represents geometrical properties of a short contiguous ink fragment (i.e., strokes) as shown in FIG. 2 . Pairing each of these vectors, y t , with an indication of whether or not those sections of the ink were later horizontally covered by a diacritical mark (as described in M. Schenkel, I. Guyon and D. Henderson, “On-line cursive script recognition using time-delay neural networks and hidden markov models”, IEEE Conf. on Acoustics, Speech and Signal Processing, Australia, 1994; and G.
- Seni “Large Vocabulary Recognition of On-Line Handwritten Cursive Words”, IEEE Transactions on Pattern Analysis and Machine Intelligence, 18(6), June, 1996) is still a further previously proposed procedure to address the problem of delayed diacriticals.
- the problem with this approach is that it does not allow for a strict accounting of the ink—that is, this approach does not ensure that every piece of ink in the input is used exactly once.
- FIG. 1 illustrates an example image of a word written in cursive style with diacriticals
- FIG. 2 illustrates the example image of the word in FIG. 1 divided into a sequence of feature vectors
- FIG. 3 illustrates a block diagram of a system architecture for an on-line recognizer according to the preferred embodiment of the present invention
- FIG. 4 illustrates a corresponding list of diacriticals for the example image of the word in FIG. 1 according to the preferred embodiment of the present invention
- FIG. 5 illustrates a mapping between the list of diacriticals and a bit field according to the preferred embodiment of the present invention
- FIG. 6 illustrates a typical structure of a theory according to the preferred embodiment of the present invention
- FIG. 7 illustrates a specific example according to the preferred embodiment of the present invention.
- FIG. 8 illustrates a search tree for a dictionary for FIG. 7 according to the preferred embodiment of the present invention.
- FIG. 9 illustrates a general block diagram according to the preferred embodiment of the present invention.
- a method and apparatus is described herein which allows trying a number of different treatments of potential diacriticals to determine whether it is better to treat a given piece of ink as a diacritical or not, directly compare the two outcomes by score and keep a strict accounting of the ink.
- the use of a forward search (as described in J. J. Odell, V. Valtchev, P. C. Woodland, S. J. Young, “A one pass decoder design for large vocabulary recognition”, Proc. Human Language Technology Workshop, Plainsboro, N.J., March, 1994 and incorporated herein by reference) provides the present invention with a natural mechanism for considering alternative treatments of diacriticals. and diacritical-containing characters.
- the preferred embodiment of the present invention generates theories that embody different diacritical treatments and scores them, allowing the normal competitive mechanisms of the forward search determine which theories survive to propagate.
- the preferred embodiment of the present invention accounts for the ink contained in hypothetical diacriticals. Specifically, the preferred embodiment of the present invention ensures that if a given piece of ink is used as a diacritical mark (e.g., as the dot of an “i”), the same given piece of ink is not used again later as either a diacritical mark or a separate character. The preferred embodiment of the present invention further ensures that if a piece of ink is not used as a diacritical, the piece of ink must be used as another character, or, conversely, the theory must be penalized for not using the ink.
- a diacritical mark e.g., as the dot of an “i”
- the system 10 is comprised of three modules: a preprocessor module 12 , a character recognizer module 20 and a search module 30 .
- the preprocessor module 12 has an input 14 to receive ink, a first output 16 to output a sequence of feature vectors 17 and a second output 18 to output a list of diacriticals 19 (described in detail below).
- the character recognizer module 20 is coupled to the pre-processor module 12 .
- the character recognizer module 20 has a first input 22 to receive the sequence of feature vectors 17 , a second input 24 to receive the list of diacriticals 19 , a third input 26 to receive a character scoring query 37 (described in detail below) and an output 28 to output a recognition score 29 (described in detail below) in response to the character scoring query 37 .
- the search module 30 is coupled to the character recognizer module 20 and the pre-processor module 12 .
- the search module 30 has a first input 32 to receive a length of the sequence of feature vectors 17 , a second input 34 to receive the recognition score 29 , a first output 36 to output the character scoring query 37 and a second output 38 to output ranked interpretation strings.
- at least one of the following is coupled to the search module 30 : a word and line segmentation logic module 40 , a dictionary 42 and a language model 44 .
- the preferred embodiment of the present invention accounts efficiently and accurately for every potential diacritical in the ink. Accounting efficiently and accurately for every diacritical in the ink is first introduced by considering a single word that is completely written before recognition starts.
- the first step involves the pre-processor module 12 identifying likety diacritcal marks by scanning the ink. Good candidates for diacritical marks are shorty simple pieces of ink.
- a list of these diacriticals 19 is built corresponding to the example image for the word “city” in FIGS. 1 and 2.
- Start stroke 13 and end stroke 13 where 13 represents feature vector y 13 , corresponds to the dot of the “i” in the word “city” illustrated in FIG. 2 .
- Start stroke 15 and end stroke 15 where 15 represents feature vector y 15 , corresponds to the cross of the “t” in the word “city” illustrated in FIG. 2 .
- the diacritical-containing characters are processed by scoring them twice.
- One variant of the diacritical-containing character is scored Without adding a diacritical.
- the other variant of the diacritical-containing character is scored by. selecting a most appropriate diacritical mark from the list of diacriticals 19 and presenting the ink for the body of the character together with the ink for the diacritical to the character recognizer module 20 for scoring.
- a “fuzzy” logic method is used to identify the most appropriate diacritical mark. For example, if the character recognizer module 20 is at looking for a t-cross, the character recognizer module 20 develops a score for each diacritical in the list 19 using a weighted sum of various measurements, including the distance of the midpoint of the diacritical from the midpoint of the character body, the extent to which the diacritical is above the center line of the writing, the extent to which the diacritical mark is a short, horizontal line that is wider than it is tall, and so on (as described in G. Seni, “External Word Segmentation of Off-line Handwritten Text Lines”, Pattern Recognition, 27(1), January, 1994).
- the diacritical mark that scores the highest is the diacritical mark used to attach to a character hypothesis for scoring.
- the search module 30 takes whichever variant scored the highest and uses that as the score for a character theory.
- a theory consists of a current character hypothesis, as well as a record of a character string preceding the current character hypothesis. Each theory thus encodes an interpretation of all of the ink processed up to a point by the search.
- a data structure e.g., a 32-bit bit field 50 having a plurality of data units is added to each theory as a means for recording the diacriticals that have been previously used at this point.
- FIG. 5 illustrates a mapping between the list of diacriticals 19 and the bit-field 50 .
- Each bit in the bit field corresponds to an entry in the list of diacriticals 19 .
- the contents of the bit field 50 are copied into each new theory as it is created by propagation, so that each theory knows which diacriticals have been previously used by the theories that preceded it.
- FIG. 6 is a typical structure of the theory in a forward search extended to include diacritical-related fields.
- StartDiacriticals (StartDiacs) 60 is the bit-field inherited from the parent theory.
- Diacritical (Diac) 62 is the bit-field of diacriticals used by this theory's model.
- Exit used diacriticals (ExitUsedDiacs) 64 is a logic AND of StartDiacs 60 and Diac 62 , which is to be passed to descendant theories. Dashed fields 66 , Score 68 and Diac 62 , are computed but not actually stored in the theory.
- the character recognizer module 20 would set the second bit in the bit field. Setting the second bit in the bit-field indicates that the ink corresponding to entry number two is used as a diacritical.
- the above-described method of accounting provides extremely compact storage for previously used diacritical information, and it allows the system 10 to test very efficiently that a piece of ink is used exactly once.
- the character recognizer module 20 can refuse to consider any diacriticals that have been previously used simply by checking the appropriate bit in the bit-field attached to the theory (as stated previously, this is a binary AND operation, which is ordinarily a single clock cycle instruction). Similarly, the character recognizer module 20 can refuse to, score (or give a very bad score to) a character that uses ink that overlaps any previously used diacritical.
- the present invention further ensures that if a piece., of ink is not used as a diacritical, it must be used as another character or, conversely, the theory must be penalized for not using it.
- the character recognizer module 20 scores an end-of-word (EOW) theory, it can check that all subsequent ink has been used as a diacritical. This is often the case when diacriticals are written at the end of the word—the last character ends, but there is still some ink in the original writing order that should have been used in the course of processing the various t's, i's, x's and apostrophes in the body of the word.
- the character recognizer module 20 views the theory with suspicion and penalizes the theory.
- the system 10 disregards the corresponding ink—that is, the ink must either have been used earlier as a diacritical, or more recently as part of a character. In either case, the ink is accounted for and the system 10 no longer needs to track the ink.
- the list of diacriticals 19 is transformed into a ring, in which the oldest diacriticals are replaced once the search point has advanced beyond them.
- the easiest approach to implement the concept of transforming the list of diacriticals 19 into a ring is to find the first thirty-two diacriticals (or whatever number of bits in the bit field the system is utilizing) in writing order by scanning the ink, and then stopping the scan.
- ink representing a diacritical is replaced by ink representing a next potential diacritical in writing order by restarting the scan where the scan previously left off.
- Transforming the list of diacriticals 19 into a ring gives the present invention the ability to account efficiently and accurately for every potential diacritical in the writing, subject to two limitations.
- the first limitation is that diacriticals must be written after the character in which they appear—otherwise the preprocessor module 12 cannot discard the diacriticals once the search point advances beyond them, as the diacriticals will be needed to complete a character in the future. In practice, this rules out writing in which a t-cross is written before the word, and then the word is written underneath the t-cross to link up and complete the character “t”. This is a degenerate case, and research in handwriting recognition has not observed anybody who tries to write in this manner. It is important to note that the first limitation applies only to anticipatory diacriticals. It is perfectly acceptable to draw the t-cross first and then immediately draw the body of the “t”. Drawing the t-cross immediately followed by the body of the “t” still preserves the normal left-to-right flow of the writing and the search automatically creates a character hypothesis containing all of the relevant ink.
- the second limitation is equally minor as the first limitation.
- the writer must complete all of the characters in a word by writing the corresponding diacriticals before advancing too far in his writing. If the writer writes an entire sentence before dotting an “i” in the first word, the list of diacriticals 19 may fill up before the dot is encountered. Generally, people complete each word as it is written before going on to the next word. Thus, it is not an unreasonable restriction on a real system to require such a limitation.
- the pre-processor module 12 performs some low-level operations on the raw ink such as re-sampling, filtering, smoothing and size normalization (as described in W. Guerfali and R. Plamandon, “Normalizing and Restoring On-Line Handwriting”, Pattern Recognition, 26(3);419-431, 1993).
- the sequence of feature vectors Y 17 and the list of diacriticals D 19 are made available to the character recognizer module 20 .
- the length of the sequence of feature vectors 17 is passed on to the search module 30 , which carries on T score-propagate steps.
- the observed input y t is compared against a set of open theories, and a probability of that theory generating the input is multiplied into the theory's ongoing score.
- a theory is a product of n probabilities, one for each time step. The theories are directly compared, and some subset may be selected for further evaluation.
- Each theory has the possibility of propagating to generate a set of new theories which encode possible completions of the utterance from the current point in time. By carefully controlling the rate of new theory propagation and the destruction of obsolete theories, the exponential growth of the search space is controlled.
- Probabilities are generated by sending character scoring queries 37 from the search module 30 to the character recognizer module 20 .
- These character scoring queries 37 specify the character associated with the theory in question, the time step when the theory was created, the current time step, and a bit-field with bits set indicating previously used diacriticals.
- the character recognizer module 20 responds with a recognition score 29 and updates the diacritical bit-field if an unused diacritical was claimed by the given character hypothesis.
- the search module 30 outputs a ranked list of possible interpretation strings which represents the input ink.
- FIGS. 7 and 8 illustrate a specific search example with diacriticals.
- input ink for the word “it” has been divided into six feature vectors and two potential diacriticals have been identified as shown in FIG. 7 .
- the “n”-theory 88 and the “t”-theory 90 score reasonably well and thus propagate into EOW theories.
- the Diac bit-field in the “t”-theory 90 indicates that the character recognizer module 20 used the second potential diacritical from the list of diacriticals 19 . This diacritical is correct, but also is the only diacritical available since the StartDiacs bit-field of the theory indicated that entry number one was previously used by a parent theory.
- the EOW theory 106 corresponding to the word “it”, however, scores well because the two diacriticals were previously used at previous time steps.
- FIG. 9 illustrates a general block diagram according to the preferred embodiment of the present invention.
- the above-described system is preferably stored on a storage medium 52 having stored thereon a set of instructions, which when loaded into a microprocessor 54 causes the microprocessor 54 to scan an ink stream of handwritten input to identify potential diacriticals, build a list of diacriticals, traverse the ink stream, process a potential diacritical-containing character, score the diacritical-containing character with a selected diacritical from the list of diacriticals to generate a score, use the score for a theory, wherein the theory consists of a current character hypothesis and a record of a character string preceding the current character hypothesis, add a bit-field to the theory, wherein each bit in the bit-field corresponds to an entry in the list of diacriticals and, as a new theory is created by propagation, copy contents of the bit-field into the new theory, wherein a bit in the bit field of the theory is set corresponding to the selected diacritical
- the above-described system is stored on a storage medium 52 having stored thereon a set of instructions, which when loaded into a microprocessor 54 causes the microprocessor 54 to scan an ink stream of handwritten input to identify potential diacriticals, build a list of diacriticals, traverse the ink stream, process a potential diacritical-containing character, score the potential diacritical-containing character without adding a diacritical to generate a first score for a first variant of the potential diacritical-containing character, score the diacritical-containing character with at least one diacritical selected from the list of diacriticals to generate at least a second score for at least a second variant of the potential diacritical-containing character, compare the first score with the at least second score in order to make a decision as to which variant of the potential diacritical-containing character produced a highest score, use the highest score as a score for a theory, wherein the theory consists of a current character hypothesis and a record of a character string preceding the current character hypothesis, and record the
Abstract
Description
Claims (14)
Priority Applications (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/042,829 US6453070B1 (en) | 1998-03-17 | 1998-03-17 | Diacritical processing for unconstrained, on-line handwriting recognition using a forward search |
DE69927313T DE69927313T2 (en) | 1998-03-17 | 1999-03-16 | Processing of diacritical marks to recognize non-coercive handwriting using a forward search |
AT99105383T ATE305157T1 (en) | 1998-03-17 | 1999-03-16 | PROCESSING DIACRITICS TO RECOGNIZE NON-FORWARD HANDWRITING USING FORWARD SEARCH |
EP99105383A EP0944020B1 (en) | 1998-03-17 | 1999-03-16 | Diacritical processing for unconstrained, on-line handwriting recognition using a forward search |
ARP990101146A AR019006A1 (en) | 1998-03-17 | 1999-03-17 | DIACRITIC PROCESSING METHOD FOR THE RECOGNITION OF HAND-WRITING ON LINE, NOT FORCED, THAT USES A DIRECT SEARCH; METHOD OF RECOGNITION OF HANDWRITING THAT HANDS USED, APPLIANCE USED FOR SUCH RECOGNITION, AND STORAGE MEANS |
BR9901016-0A BR9901016A (en) | 1998-03-17 | 1999-03-17 | Diacritical processing for inline recognition, not constrained using an advanced search |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/042,829 US6453070B1 (en) | 1998-03-17 | 1998-03-17 | Diacritical processing for unconstrained, on-line handwriting recognition using a forward search |
Publications (1)
Publication Number | Publication Date |
---|---|
US6453070B1 true US6453070B1 (en) | 2002-09-17 |
Family
ID=21923970
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/042,829 Expired - Lifetime US6453070B1 (en) | 1998-03-17 | 1998-03-17 | Diacritical processing for unconstrained, on-line handwriting recognition using a forward search |
Country Status (6)
Country | Link |
---|---|
US (1) | US6453070B1 (en) |
EP (1) | EP0944020B1 (en) |
AR (1) | AR019006A1 (en) |
AT (1) | ATE305157T1 (en) |
BR (1) | BR9901016A (en) |
DE (1) | DE69927313T2 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050091500A1 (en) * | 1999-11-30 | 2005-04-28 | Canon Kabushiki Kaisha | Signature authentication device, signature authentication method, and computer program product |
US20060239560A1 (en) * | 2005-02-28 | 2006-10-26 | Zi Decuma Ab | Recognition graph |
US20070009151A1 (en) * | 2005-06-23 | 2007-01-11 | Microsoft Corporation | Handwriting recognition using neural networks |
US20070280537A1 (en) * | 2006-06-05 | 2007-12-06 | Microsoft Corporation | Balancing out-of-dictionary and in-dictionary recognition scores |
CN100354882C (en) * | 2003-11-14 | 2007-12-12 | 株式会社东芝 | Information processing apparatus and signature data input programs |
EP3772015A1 (en) * | 2019-07-31 | 2021-02-03 | MyScript | Text line extraction |
US11354364B2 (en) * | 2008-07-21 | 2022-06-07 | Verizon Patent And Licensing Inc. | Client application fingerprinting based on analysis of client requests |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR101145986B1 (en) | 2005-02-28 | 2012-05-21 | 지 데쿠마 아베 | Segmentation-based recognition |
Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3710321A (en) * | 1971-01-18 | 1973-01-09 | Ibm | Machine recognition of lexical symbols |
US4611346A (en) * | 1983-09-29 | 1986-09-09 | International Business Machines Corporation | Method and apparatus for character recognition accommodating diacritical marks |
US5373566A (en) * | 1992-12-24 | 1994-12-13 | Motorola, Inc. | Neural network-based diacritical marker recognition system and method |
US5454046A (en) * | 1993-09-17 | 1995-09-26 | Penkey Corporation | Universal symbolic handwriting recognition system |
US5463696A (en) | 1992-05-27 | 1995-10-31 | Apple Computer, Inc. | Recognition system and method for user inputs to a computer system |
US5559897A (en) | 1994-01-21 | 1996-09-24 | Lucent Technologies Inc. | Methods and systems for performing handwriting recognition from raw graphical image data |
US5590257A (en) * | 1991-03-20 | 1996-12-31 | Forcier; Mitchell D. | Script character processing method and system with bit-mapped document editing |
US5717939A (en) * | 1991-11-18 | 1998-02-10 | Compaq Computer Corporation | Method and apparatus for entering and manipulating spreadsheet cell data |
US5768423A (en) * | 1994-09-02 | 1998-06-16 | Panasonic Technologies Inc. | Trie structure based method and apparatus for indexing and searching handwritten databases with dynamic search sequencing |
US5812698A (en) * | 1995-05-12 | 1998-09-22 | Synaptics, Inc. | Handwriting recognition system and method |
US5812697A (en) * | 1994-06-10 | 1998-09-22 | Nippon Steel Corporation | Method and apparatus for recognizing hand-written characters using a weighting dictionary |
US5903668A (en) * | 1992-05-27 | 1999-05-11 | Apple Computer, Inc. | Method and apparatus for recognizing handwritten words |
US5999703A (en) * | 1997-03-27 | 1999-12-07 | Eastman Kodak Company | Computer program product for modifying the black channel of an output device profile without altering its colorimetric accuracy |
US6018591A (en) * | 1994-07-04 | 2000-01-25 | Hewlett-Packard Company | Scribble matching |
-
1998
- 1998-03-17 US US09/042,829 patent/US6453070B1/en not_active Expired - Lifetime
-
1999
- 1999-03-16 EP EP99105383A patent/EP0944020B1/en not_active Expired - Lifetime
- 1999-03-16 DE DE69927313T patent/DE69927313T2/en not_active Expired - Fee Related
- 1999-03-16 AT AT99105383T patent/ATE305157T1/en not_active IP Right Cessation
- 1999-03-17 AR ARP990101146A patent/AR019006A1/en active IP Right Grant
- 1999-03-17 BR BR9901016-0A patent/BR9901016A/en not_active IP Right Cessation
Patent Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3710321A (en) * | 1971-01-18 | 1973-01-09 | Ibm | Machine recognition of lexical symbols |
US4611346A (en) * | 1983-09-29 | 1986-09-09 | International Business Machines Corporation | Method and apparatus for character recognition accommodating diacritical marks |
US5590257A (en) * | 1991-03-20 | 1996-12-31 | Forcier; Mitchell D. | Script character processing method and system with bit-mapped document editing |
US5717939A (en) * | 1991-11-18 | 1998-02-10 | Compaq Computer Corporation | Method and apparatus for entering and manipulating spreadsheet cell data |
US5463696A (en) | 1992-05-27 | 1995-10-31 | Apple Computer, Inc. | Recognition system and method for user inputs to a computer system |
US5903668A (en) * | 1992-05-27 | 1999-05-11 | Apple Computer, Inc. | Method and apparatus for recognizing handwritten words |
US5373566A (en) * | 1992-12-24 | 1994-12-13 | Motorola, Inc. | Neural network-based diacritical marker recognition system and method |
US5454046A (en) * | 1993-09-17 | 1995-09-26 | Penkey Corporation | Universal symbolic handwriting recognition system |
US5559897A (en) | 1994-01-21 | 1996-09-24 | Lucent Technologies Inc. | Methods and systems for performing handwriting recognition from raw graphical image data |
US5812697A (en) * | 1994-06-10 | 1998-09-22 | Nippon Steel Corporation | Method and apparatus for recognizing hand-written characters using a weighting dictionary |
US6018591A (en) * | 1994-07-04 | 2000-01-25 | Hewlett-Packard Company | Scribble matching |
US5768423A (en) * | 1994-09-02 | 1998-06-16 | Panasonic Technologies Inc. | Trie structure based method and apparatus for indexing and searching handwritten databases with dynamic search sequencing |
US5812698A (en) * | 1995-05-12 | 1998-09-22 | Synaptics, Inc. | Handwriting recognition system and method |
US5999703A (en) * | 1997-03-27 | 1999-12-07 | Eastman Kodak Company | Computer program product for modifying the black channel of an output device profile without altering its colorimetric accuracy |
Non-Patent Citations (5)
Title |
---|
C.C. Tappert, A Divide and Conquer Cursive Script Recognizer, Oct. 7, 1988, pp. 1-8. |
Giovanni Seni and Edward Cohen, External Word Segmentation of Off-Line Handwritten Text Lines, Aug. 6, 1993, pp. 41-52. |
Giovanni Seni, Rohini K. Srihari and Nasser Nasrabadi, Large Vocabulary Recognition of On-Line Handwriten Cursive Words, Jul, 1996, pp. 757-762. |
J.J. Odell, V. Valtchev, P.C. Woodland, S.J. Young, A One Pass Decoder Design For Large Vocabulary Recognition, Proc. Human Language Technology Workshop, Plainsboro, NJ, Mar. 1994, pp. 405-410. |
Wacef Guerfali and Rejean Plamondon, Normalizing and Restoring On-Line Handwriting, pp. 419-431. |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050091500A1 (en) * | 1999-11-30 | 2005-04-28 | Canon Kabushiki Kaisha | Signature authentication device, signature authentication method, and computer program product |
US7415141B2 (en) | 1999-11-30 | 2008-08-19 | Canon Kabushiki Kaisha | Signature authentication device, signature authentication method, and computer program product |
CN100354882C (en) * | 2003-11-14 | 2007-12-12 | 株式会社东芝 | Information processing apparatus and signature data input programs |
US7756335B2 (en) * | 2005-02-28 | 2010-07-13 | Zi Decuma Ab | Handwriting recognition using a graph of segmentation candidates and dictionary search |
US20060239560A1 (en) * | 2005-02-28 | 2006-10-26 | Zi Decuma Ab | Recognition graph |
US20070009151A1 (en) * | 2005-06-23 | 2007-01-11 | Microsoft Corporation | Handwriting recognition using neural networks |
US7428516B2 (en) | 2005-06-23 | 2008-09-23 | Microsoft Corporation | Handwriting recognition using neural networks |
US20070280537A1 (en) * | 2006-06-05 | 2007-12-06 | Microsoft Corporation | Balancing out-of-dictionary and in-dictionary recognition scores |
US7899251B2 (en) * | 2006-06-05 | 2011-03-01 | Microsoft Corporation | Balancing out-of-dictionary and in-dictionary recognition scores |
US11354364B2 (en) * | 2008-07-21 | 2022-06-07 | Verizon Patent And Licensing Inc. | Client application fingerprinting based on analysis of client requests |
EP3772015A1 (en) * | 2019-07-31 | 2021-02-03 | MyScript | Text line extraction |
WO2021018973A1 (en) * | 2019-07-31 | 2021-02-04 | Myscript | Text line extraction |
CN114341954A (en) * | 2019-07-31 | 2022-04-12 | 迈思慧公司 | Text line extraction |
US11393231B2 (en) | 2019-07-31 | 2022-07-19 | Myscript | System and method for text line extraction |
CN114341954B (en) * | 2019-07-31 | 2023-06-30 | 迈思慧公司 | Text line extraction |
Also Published As
Publication number | Publication date |
---|---|
EP0944020B1 (en) | 2005-09-21 |
DE69927313D1 (en) | 2005-10-27 |
DE69927313T2 (en) | 2006-06-29 |
BR9901016A (en) | 2000-10-10 |
EP0944020A3 (en) | 2002-05-29 |
ATE305157T1 (en) | 2005-10-15 |
EP0944020A2 (en) | 1999-09-22 |
AR019006A1 (en) | 2001-12-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5559897A (en) | Methods and systems for performing handwriting recognition from raw graphical image data | |
Graves et al. | Unconstrained on-line handwriting recognition with recurrent neural networks | |
Lorigo et al. | Offline Arabic handwriting recognition: a survey | |
Chen et al. | Variable duration hidden Markov model and morphological segmentation for handwritten word recognition | |
Bharath et al. | HMM-based lexicon-driven and lexicon-free word recognition for online handwritten Indic scripts | |
CN109800414B (en) | Method and system for recommending language correction | |
JP4274941B2 (en) | Method and apparatus for decoding handwritten characters | |
JP4568774B2 (en) | How to generate templates used in handwriting recognition | |
US20080008387A1 (en) | Method and apparatus for recognition of handwritten symbols | |
Sin et al. | Ligature modeling for online cursive script recognition | |
Abdelaziz et al. | A large vocabulary system for Arabic online handwriting recognition | |
Zeki | The segmentation problem in arabic character recognition the state of the art | |
CN1324068A (en) | Explanatory and search for handwriting sloppy Chinese characters based on shape of radicals | |
Srihari et al. | A multi-level perception approach to reading cursive script | |
Jemni et al. | Out of vocabulary word detection and recovery in Arabic handwritten text recognition | |
Cao et al. | A probabilistic method for keyword retrieval in handwritten document images | |
Cheriet | Visual recognition of Arabic handwriting: challenges and new directions | |
US6453070B1 (en) | Diacritical processing for unconstrained, on-line handwriting recognition using a forward search | |
Nguyen et al. | OCR error correction for unconstrained Vietnamese handwritten text | |
Madhvanath et al. | Syntactic methodology of pruning large lexicons in cursive script recognition | |
Manke et al. | A connectionist recognizer for on-line cursive handwriting recognition | |
US6567548B2 (en) | Handwriting recognition system and method using compound characters for improved recognition accuracy | |
Jemni et al. | Improving recurrent neural networks for offline arabic handwriting recognition by combining different language models | |
Paquet et al. | HANDWRITING RECOGNITION: APPLICATION ON BANILCHZEQUES | |
Govindaraju et al. | Handwritten text recognition |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SENI, GIOVANNI;SEYBOLD, JOHN;REEL/FRAME:009815/0554;SIGNING DATES FROM 19990218 TO 19990225 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034474/0001Effective date: 20141028 |