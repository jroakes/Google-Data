US5924128A - Pseudo zero cycle address generator and fast memory access - Google Patents
Pseudo zero cycle address generator and fast memory access Download PDFInfo
- Publication number
- US5924128A US5924128A US08/668,262 US66826296A US5924128A US 5924128 A US5924128 A US 5924128A US 66826296 A US66826296 A US 66826296A US 5924128 A US5924128 A US 5924128A
- Authority
- US
- United States
- Prior art keywords
- address
- memory
- register
- bits
- instruction
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
- 230000015654 memory Effects 0.000 title claims abstract description 192
- 238000006073 displacement reaction Methods 0.000 claims abstract description 81
- 238000000034 method Methods 0.000 claims abstract description 46
- 239000000872 buffer Substances 0.000 claims description 41
- 230000008901 benefit Effects 0.000 abstract description 9
- 230000008569 process Effects 0.000 description 13
- 238000012545 processing Methods 0.000 description 9
- 238000007792 addition Methods 0.000 description 7
- 230000008520 organization Effects 0.000 description 7
- 238000003491 array Methods 0.000 description 5
- 230000001934 delay Effects 0.000 description 5
- 238000010586 diagram Methods 0.000 description 5
- 238000004364 calculation method Methods 0.000 description 3
- 239000004020 conductor Substances 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 238000010200 validation analysis Methods 0.000 description 2
- 230000004913 activation Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000014509 gene expression Effects 0.000 description 1
- 238000002955 isolation Methods 0.000 description 1
- 230000000873 masking effect Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/34—Addressing or accessing the instruction operand or the result ; Formation of operand address; Addressing modes
- G06F9/355—Indexed addressing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3824—Operand accessing
- G06F9/383—Operand prefetching
Definitions
- the present invention relates to a method and apparatus for generating a memory address used by a programming instruction. More particularly, the present invention relates to a method and apparatus for estimating the address of a data cache in less than one instruction cycle.
- the fastest memory access path includes three instruction cycles.
- the first instruction cycle is spent generating the memory address.
- the memory is provided with the memory address so that the data will be accessed and made available at the start of the third instruction cycle.
- a full instruction cycle may be needed in order to generate that memory address. For example, if the instruction identifies the memory address as a displacement from a known address, a full instruction cycle is required in order to add the displacement to the known address. Once the memory address is known, the memory can be accessed and the instruction execution completed.
- high speed memories e.g. high speed data caches
- the delay caused by generating the memory address may force the instruction to be stalled by a central processing unit.
- a full instruction cycle must pass before the CPU may resume processing the instruction.
- VLIW Very Long Instruction Word
- a compiler concatenates several, e.g. 8-16, instructions or parcels into one. If the one very long word is stalled, then all of its instructions are stalled.
- Designing computer systems of the Von Neumann type includes considerations such as the fastest possible cycle time for the central processing unit (CPU), instruction and data cache (I-cache and D-cache) subsystems which can be accessed with similar cycle times as the CPU ("single cycle access"), and having adequate bandwidth between the CPU and caches, i.e. the number of bytes which may be transmitted with each clock cycle. Any of these considerations taken individually may be sufficient to throttle the flow of data and instructions through the system.
- the present invention is designed to permit the cache to be accessed with one cycle latency, i.e. waiting only one cycle.
- the cache must receive as early in the instruction cycle as possible the address which is to be used to initiate the access, i.e. the access to the data cache array.
- most instruction set architectures perform the address generation phase by adding the full address widths of an immediate value and a value contained in a register, or adding together the full address widths of two registers ("base" plus "index").
- base plus "index”
- the pseudo zero cycle addressing scheme of the present invention operates under a just-in-time addressing premise.
- Cache memory is normally configured in such a way that it is addressed by several incremental address portions. For example, a column select, row select and a late select may be used to select the address for a cache memory location. These different addressing fields must be addressed at varying instances in time so that the memory location will be specified. For example, depending upon cache configuration, row selection and column selection might be required prior to late selection.
- the concepts of the present invention allow the address of the desired location in cache to be partially specified prior to combining the base address and displacement so that the address portions first needed are first available.
- the most significant bits of the cache address might specify a row address and a column address, portions of the memory address which are not affected by the displacement. It is a premise of the system of the present application to access the most easily accessed address portions first while the more difficult to ascertain address portions are calculated.
- the just-in-time addressing of the present invention allows the CPU to calculate the portions of the address specified by both base address and displacement last, giving the processor the maximum amount of time to perform those calculations.
- the address portions which must be accessed first are provided in areas which may be directly read by the base or the displacement, while address portions which are calculated based upon both the base address and displacement must be accessed later. Thus, there is an opportunity to calculate these latter address portions in such a way that the fastest possible addressing of the cache memory may be performed.
- this fast address generation from the base and displacement is performed between the instruction cycle which causes the accessing of the instruction and the instruction cycle in which information is transferred out of the appropriate location in cache memory. Between these two time consecutive instruction cycles, address generation from the base and displacement address portions is performed. Accordingly, a full addressing from cache is possible within two instruction cycles.
- the generated address may be used to access information found within a cache buffer prior to actual storage of the information into its ultimate location in the cache.
- the system of the present invention uses a cache address to look not only for the contents of the specified cache memory location, but also for information in the cache buffer which is bound for that cache memory location.
- a method and apparatus for retrieving information from a location in memory within a reduced number of instruction cycles comprising the steps of (a) providing a load instruction having a displacement field specifying in part the address of the location in memory; (b) calculating the address of the location in memory from at least said displacement field; (c) accessing the location in memory based on said address calculated in said step (b), said steps (a) and (c) of respectively providing and accessing being performed in consecutive instruction cycles with said step (b) being performed therebetween.
- the objects may also be fulfilled by providing a method and apparatus for generating a memory address in an address register, the method comprising the steps of receiving an instruction command into an instruction register, the instruction command including a base register identifier and a displacement identifier; accessing a base register identified by the base register identifier; gating a first set of bits from the base register into a first predetermined portion of an address register; gating a second set of bits from the displacement identifier into a second predetermined portion of the address register; and adding a third set of bits from the base register to a fourth set of bits from the displacement identifier and providing a sum output, the sum output being providing to a third predetermined portion of the address register.
- the objects may also be fulfilled by providing a method and apparatus for retrieving a desired one of a plurality of information elements as it is being stored into a main memory, each information element being provided to the main memory from a buffer bank and having a target address associated therewith specifying a location in main memory, the method comprising the steps of holding, in the buffer bank, at least one first information element to be stored into the main memory; providing target address data associated with each first information element held in step (a); providing a load command requesting contents of a desired memory address in the main memory where desired information is to be retrieved; comparing at least a portion of the desired memory address with a corresponding portion of the target address, and producing a comparison result when the compared portions are identical; forwarding the first information element from the buffer bank to an output port if the comparison result of step (c) is produced.
- FIG. 1A is a schematic representation of circuitry according to one embodiment of the present invention.
- FIG. 1B is a flow diagram illustrating operation of the embodiment described with respect to FIG. 1A.
- FIG. 2 is a schematic representation of circuitry according to another embodiment of the present invention.
- FIG. 3 is a schematic block diagram illustrating access to a data cache using the embodiment described with respect to FIG. 2;
- FIG. 4 shows a format of an effective address utilized in the embodiment of FIGS. 2 and 3;
- FIG. 5 is a schematic representation of circuitry according to yet another embodiment of the present invention.
- FIG. 6 is a flow diagram illustrating operation of the embodiment of FIG. 2;
- FIG. 7 is a schematic representation of a two bit fast adder illustrated in FIGS. 2 and 5;
- FIG. 8 illustrates an application of the present invention to retrieving information from a store buffer prior to its actual storage in a data cache
- FIG. 9 is a flow diagram illustrating operation of the embodiment described with respect to FIG. 8.
- FIG. 1A shows an Instruction Register 10 which receives an instruction to be executed by the CPU.
- a load instruction which reads information from memory
- a store instruction which writes information to memory are of particular importance to the present invention because of their interaction with the memory.
- the memory is preferably a Data Cache 12, which is accessed based upon an effective address provided in an Address Register 16.
- Address Register 16 is operatively associated with Data Cache 12 through conventional hardware circuitry known to those skilled in the art, which circuitry needs not be further detailed herein.
- a Base Register 13 is provided, and is preferably a General Purpose Register operatively associated with the CPU and with the Instruction Register 10.
- FIG. 1A also shows the displacement field (bits 18-31) of the Instruction Register 10 in isolation at reference numeral 14.
- D-form format provides a displacement field (bits 18-31 in FIG. 1A) embedded into the instruction register or instruction primitive.
- the displacement will be described in more detail below, and essentially indicates the distance from a base address in the data cache 12 where the desired information is to be found. It is to be understood, however, that the present invention may be adapted to other instruction formats as well.
- the instruction also has an OP Code field which indicates the type of instruction and may be supplemented by Extended OP Code fields if necessary.
- the instruction provides a base register, such as bits 6-11 in FIG. 1A. The use of six bits indicates that a total of 64 base registers may be accessed by the instruction, although the number of base registers would actually depend on the architecture of the CPU.
- the instruction also contains the identity of a target register, e.g. bits 12-17 in FIG. 1A.
- the target register identifies a register, preferably a General Purpose Register, to which data will be written. After a load instruction, the target register will ultimately hold the information found at the data cache address which is accessed by the present invention.
- the memory location in the data cache 12 to be accessed has an address which is based upon the displacement field 14 of the Instruction Register 10 and the contents of the base register 13.
- the base register 13 contains a 64-bit address pointing to a base memory location in data cache 12.
- FIG. 1A a data cache 12 is illustrated in FIG. 1A, it is to be understood that other types of memory may also be accessed by the present invention.
- Instruction caches (I-caches) and other memories are possible; if memories or memory types are used together, then respective memories may be accessed depending on the type of instruction held in Instruction Register 10.
- Data cache 12 is preferably organized by the compiler according to predetermined object sizes. That is, the compiler lays out data objects in an alignment in memory.
- the data cache itself may be physically organized according to object sizes, but it is preferable to have the objects organized by the compiler.
- the compiler may organize data in the data cache 12 to hold information in predetermined blocks of 32 bytes. By forcing all information to be stored in data cache 12 at intervals of 32 bytes, the compiler achieves alignment of the object sizes.
- the present invention takes advantage of this alignment (which is typically 16, 32, 64 bytes, etc. (powers of two)) by assuming that the lower several bits held in base register 13 are 0's. In FIG. 1A, 32-byte alignment is used, as indicated by the assumption that the base register contains five 0's as its least significant bits (i.e. bits 59-63).
- the displacement field 14 identifies an offset from the data cache location pointed to by the base register's contents.
- the first several bits (18-22) of displacement field 14 in instruction register 10 are essentially unused in FIG. 1A because the data object organization forced by the compiler is such that the nine lower bits (23-31) are enough to represent most of the displacements which will be encountered by the system. This is merely an illustration of the present invention and should not be considered limiting.
- FIG. 1A takes advantage of the data organization by using displacements 14 which are in one direction only and indicated only by unsigned integers.
- the present embodiment assumes that the computing environment is designed such that most of the cache addresses generated by the (base + displacement) arithmetic will fall within a distance from the base address that is significantly smaller than the largest displacement size. In other words, most cache addresses will be close to the base address.
- the memory address may be estimated with significant accuracy, on the order of about 90% when empirically tested.
- the embodiment of FIG. 1A formulates a guess of the most likely cache address by manipulating the base address bits held in base register 13 and the displacement bits held in the displacement field 14.
- the manipulation includes using a 4-bit fast adder 11 for adding only some of the bits from base register 13 and displacement 14.
- FIG. 1B illustrates a preferred operation of the embodiment of FIG. 1A.
- the process of generating the address includes five component phases, and is completed before the expiration of one instruction cycle.
- a first instruction cycle is initiated, beginning with a decode on a load or store instruction residing in the Instruction Register 10.
- the base register field 17 in the Instruction Register 10 is used to identify the base register 13, preferably a General Purpose Register GPR, which contains a base address.
- the base address corresponds to a location in data cache 12.
- base register 13 is shown to have 64 bits (0-63), although the actual length would depend on the CPU architecture.
- the fast 4-bit adder 11 adds respective four-bit sub-fields from the base register 13 and from the displacement field 14 of the Instruction Register 10.
- adder 11 is respectively provided with bits 55-58 from the base register 13, and bits 23-26 from the displacement field 14 of the Instruction Register 10.
- the sum from 4-bit adder 11 is available within only a few logic switch delays because the adder is preferably implemented using fast logic circuitry. It should be noted that the 4-bit adder of this embodiment is exemplary only, and any suitable sized adder could be used, as appropriate.
- the reliability of the present invention is high, it is preferable, if not essential, also to utilize a full (conventional) address generation path using the full address widths for the address computation.
- the full address generation path is initiated in Phase 1 as a backup of the inventive address generation, and will be used to verify that the fast address generation of the present embodiment has resulted in a correct address estimation. Because the full address generation path is time consuming, it cannot be completed until very late in the first instruction cycle (see Phase 4); so late, in fact, that the data cache cannot retrieve the desired information until the second instruction cycle has expired.
- an "instruction cycle" is to be distinguished from a clock cycle; an instruction cycle typically will include multiple clock cycles.
- the low order five bits (bits 59-63) included in the base register 13 are assumed to be zero, as stated above. Accordingly, the present embodiment takes advantage of the data organization by making it unnecessary to add those bits (59-63) of base register 13 to the corresponding bits (27-31) of displacement field 14. Instead, bits 59-63 of base register 13 can be ignored, and bits 27-31 gated directly into the address register 16.
- the appropriate number of low order bits (58-63) in the base register 13 will be assumed to be zero or simply ignored.
- the appropriate number of least significant bits (bits 26-31) in the displacement field 14 of the Instruction Register 10 will be gated to the Address Register 16.
- the least significant bits in the base register 13 may be forced to zero under control of the compiler if object alignment is compiler enforced.
- Phase 2 the sum produced by 4-bit adder 11 is inspected for a carry-out. If the sum is five bits long, then a carry-out is produced by adder 11 (like the "carry" of pencil-and-paper addition). If the sum is four or fewer bits, then no carry-out is produced.
- the CPU must stall the load or store instruction held in Instruction Register 10 until the cache address is generated and its contents made available.
- this wait is the same as would be encountered in conventional full-address generating techniques. Accordingly, the present embodiment does not cause any additional time delay.
- the estimated memory address in Address Register 16 is gated to the data cache 12.
- the data cache 12 initiates an access to the array based on the estimated address and provides the desired information. Accordingly, the estimated cache address is generated early enough to permit the data cache to have the address before expiration of a the first instruction cycle.
- the data cache retrieves the information from the address and forwards it for storage in the target register.
- the present embodiment thus provides single cycle latency, allowing the system must wait only one cycle for the memory to be accessed. Accordingly, the present embodiment generates the cache address in what appears to be zero instruction cycles.
- FIG. 2 is directed to a 2-cycle pipeline embodiment. It is also possible to adapt the present invention to a single-cycle D-cache. For example, if the embodiment is used in systems having generous clock cycles (i.e. a slow clock), then it is certainly possible to pipeline the cache access into a single cycle in which the address is generated and the information retrieved from memory. However, with current microprocessor science, it is unlikely that clock speeds would be so generous.
- generous clock cycles i.e. a slow clock
- Phase IV the address generated along the full address generation path is compared to the address produced according to the present embodiment.
- a preliminary validation test was preferably performed in Phase 2 by looking for the carry-out from adder 11.
- An additional validation is preferably performed here by comparing the addresses generated by the two paths. If the two addresses are not identical, then the information retrieved from the cache is thrown away (e.g. not forwarded). The cache array access is reinitiated using the address from the full address generation path. Subsequent operations which depend on the information accessed from the cache are stalled by the CPU until the correct information becomes available in the next instruction cycle.
- the address estimated by the present embodiment is found to be identical to that produced by the full path (Phase 4), then the estimate was correct and the information from the cache 12 is already available for use in the next immediate instruction cycle.
- the present embodiment generates the memory address within instruction cycles by relying on the organization of data, and reduces the likelihood of bottlenecks in the address generation path.
- the present embodiment may be configured for known computing structures and data object organizations used by typical application programs. By having the cache array access initiated as early in the instruction cycle as possible, the present embodiment provides the ability to perform single cycle data cache access. This may increase system performance by 20% or more.
- D-cache data cache
- I-cache instruction cache
- the present embodiment is particularly suitable for use with VLIW (Very Long Instruction Word) architecture.
- VLIW Very Long Instruction Word
- This architecture is often provided with a layered memory subsystem having, for example, four levels of cache memory (the lowest levels being designated L0 and L1).
- L0 and L1 levels of cache memory
- FIGS. 2-4 another embodiment implementing the concepts of the present invention is shown in FIGS. 2-4.
- FIG. 2 shows an instruction register having a different format than that shown in FIG. 1A.
- the exact format used to implement the present invention may be any of a variety of formats, as long as the designated fields are known.
- a D-form Instruction format is used.
- an Instruction Register 21 is provided with an OP field designating the type of instruction.
- the instruction may be load/store instructions, which are of particular relevance to the present embodiment because of their interaction with memory.
- the S and XO fields of Instruction Register 21 can also be used to help specify the instruction type.
- Field RT designates the target register, which is preferably a General Purpose Register to which information from memory is to be transferred.
- Field RA designates the base register, which is also preferably a General Purpose Register GPR and which designates a base address in the memory.
- the base address is similar to the base address discussed with respect to the embodiment of FIG. 1A.
- the displacement field of the Instruction Register 21 is discussed below.
- a data cache 31 may represent the L1 D-cache and is preferably configured to include eight interleaves of data cache arrays.
- Each data cache array is, in turn, physically configured as four subarrays, demarked in FIG. 3 by bold lines.
- Each subarray contains 256 bit lines and 64 common wordlines.
- the 256 bit lines in each subarray may be configured to correspond to four double words DW.
- Each data cache array therefore may output 16 DWs.
- the D-cache may be accessed by one or more RS ports.
- An RS (Read/Store) Port is a conventional port through which a D-cache receives an address. In operation, whenever an RS port presents a new address to the D-cache, information stored at that address is forwarded to the same RS port. This operation is conventional and need not be further discussed herein. Outputs from the D-cache which are directed to a given RS port may be buffered at the RS port, so that they may be forwarded to particular destinations, as appropriate. Although only one RS port is shown in FIG. 3, it is common to provide more than one.
- the D-cache of FIG. 3 is accessed by presenting an effective address at one of the RS ports.
- An example of an Effective Address Register is shown in FIG. 4, including sub-fields labelled Word Line Select (Row Address Select; RAS) at bits 50-53; Late Select at bits 54-55; Word Line Select (Column Address Select; CAS) at bits 56-57; DW (Double Word) Select at bits 58-60; and Byte Select at bits 61-63.
- RAS Row Address Select
- Late Select at bits 54-55
- Word Line Select Cold Address Select
- CAS Write Address Select
- DW Double Word
- Bits 0-49 in the Effective Address Register are not used for accessing the D-cache although they are preferably used to access the cache directory, as is well known to those skilled in the art.
- the cache directory is the source for the Set Select bits (0-1) used by the first selector block 32 as will be described.
- the effective address of FIG. 4 is obtained by the operation of the circuitry shown in FIG. 2.
- Address bits 50-53 Row Address Select or RAS
- RAS Row Address Select
- Address bits 56-57 Cold Address Select or CAS
- the CAS bits are needed approximately two switch delays later than the RAS bits.
- the wordline decoder & driver shown in FIG. 3 is conventional and need not be further described herein.
- the D-cache memory array activates memory cells for any Read/Store (RS) Port that presents a new address to the array. There is no decoding and no chip select activation during the load operation.
- bits 58-60 in the effective address (DW Select; FIG. 4) are decoded and used in order to gate write data and write enable signals (not shown in FIG. 3) to the requested DW location in the array 31.
- each of the eight cache arrays 31 is physically configured as four subarrays each having 256 bit lines, four double words DW are available from each subarray upon decoding of the RAS and CAS bits.
- Late Select bits 54-55 from the effective address (FIG. 4) are used to choose one of the four DWs available from each subarray.
- Set Select bits 0-1 (not shown in FIG. 4) determine the final DW to be forwarded from the data cache array corresponding to the respective interleave.
- the Set Select bits are determined from the access of the data cache directory.
- the estimated address bits 50-63 from the Effective Address Register are used to access the cache directory, while the remaining bits 0-49 of the Effective Address Register are used to compare against the tag found in the directory. This is conventional and need not be further detailed herein. Accessing the directory occurs in parallel with the access of the data cache array.
- First selector block 32 in FIG. 3 includes conventional hardware logic circuits, as does second selector block 33.
- N can be any integer, and usually is between one and eight.
- the memory structure for this implementation of the present invention may be configured in any manner appropriate for a prescribed computing environment. Depending on how the memory is organized, and the number of subdivisions used to access a particular memory location, one or more of the RAS, CAS, etc. address select bits may be omitted, or additional sets of address select bits may be added.
- the present invention is designed to provide the appropriate address select bits at appropriate time intervals.
- the RAS bits (50-53) used first to select the row address, are gated directly to the Effective Address Register (e.g. FIG. 4) from the base register 22 designated by the base register field RA in the Instruction Register 21. By gating them directly to the effective address register, these bits are available immediately.
- FIG. 2 includes the Instruction Register 21, and base register 22 identified by the RA field of the Instruction Register 21.
- the Instruction Register preferably contains eleven bits (0-10) in a displacement field, which is analogous to the displacement field of Instruction Register 10 (FIG. 1A).
- Circuitry for manipulating bits 0-10 of the displacement field and bits 50-63 of base register 22 includes logic gates (not shown) for gating the Row Address Select (RAS) bits 50-53 of the base register 22 directly to the Effective Address Register (e.g. FIG. 4).
- a 4-bit adder A 23 adds bits 7-10 from the Instruction Register 21 with bits 60-63 of the base register 22.
- a first 2-bit adder B 24 adds bits 5-6 from the Instruction Register 21 with bits 58-59 from the base register 22.
- a second 2-bit adder C 25 adds bits 3-4 from the Instruction Register 21 with bits 56-57 from the base register 22.
- a third 2-bit adder D 26 add bits 1-2 from the Instruction Register 21 with bits 54-55 from base register 22. In the embodiment of FIG. 2, bit 0 in the displacement register is not used for the addressing process.
- a carry-out bit from first 2-bit adder B 24 is provided to second 2-bit adder C 25.
- a carry-out bit from second 2-bit adder C 25 is provided to third 2-bit adder D 26.
- a carry-out from 4-bit adder A 23 will be described below, and is preferably not forwarded to the first 2-bit adder B 24.
- second 2-bit adder C 25 produces the CAS Select bits within approximately two switch delays after the RAS bits are available.
- the use of separate 2-bit adders C and D (25 and 26) is preferable over a single 4-bit adder because the CAS Select bits are needed sooner than the Late Select bits, and a 4-bit adder would take more time than the 2-bit adder C 25.
- the 2-bit adder B 24 adds bits 58-59 from the base register RA to bits 5-6 from the displacement field of the Instruction Register in order to produce Double Word Interleave Select bits for the Effective Address Register (e.g. FIG. 4). Although these DW Select bits 58-59 are not needed as soon as the CAS Select bits when data is read from the D-cache, their timing becomes more critical during a store operation. Accordingly, it is also preferable that the 2-bit adder B 24 be a fast adder so as to provide the DW Select bits as early as possible during the instruction cycle. The three bits of the DW Select are obtained from the 2-bit adder B 24 and (one bit) from the 4-bit adder A 23.
- the Byte Select bits output from 4-bit adder A (23) are used later in processing to select one or more particular bytes from the DW which was obtained from the D-cache. Therefore, the Byte Select bits need not be available as quickly as the other addressing bits. It may be possible to use a conventional, slower adder in order to implement adder A. However, this depends on the computing environment, the data organization, and the speed necessary to effect addressing between consecutive instruction cycles. Because 4-bit adder A 23 is preferably a slower adder than the first 2-bit adder B 24, its carry-out is preferably not supplied to adder B 24.
- an alternative slower address generating process is preferably used in parallel with the inventive process described herein. If the alternative process is used, then a comparison should be made to see whether the address generated by the alternative process is the same as the address generated by the present embodiment. This "comparison" may be performed efficiently by determining whether carry-outs are produced by one or more of the adders.
- validating the estimated effective address which will be held in the Effective Address Register can be performed by observing whether a carryout was produced by the 4-bit adder A 23 or by the third 2-bit adder D 26. If either of these adders has produced a carry-out, then it is more than likely that the effective address loaded into the Effective Address Register (e.g. FIG. 4) was incorrectly estimated. For example, the carry-outs should have been included in the addition but were not, thus resulting in probable errors in the DW Select bits or the RAS bits in the Effective Address Register. Therefore, the data extracted from the D-cache using the incorrect effective address should be discarded.
- FIG. 6 shows the sequence of steps performed in the embodiment of FIG. 2.
- Two address generation routines AGENs are performed in parallel. The first is the AGEN estimation of the present embodiment, in step 61. A full, slower AGEN routine is performed in step 62, and is not expected to be completed until after execution of steps 63 and 67. If the estimating AGEN routine shows a violation, for example by producing a carry-out is produced by adder 23 and/or adder 26, then the CPU is instructed to stall for one instruction cycle because it must wait for a D-cache access using the slower address from step 62 (steps 63 and 65).
- AGENs address generation routine
- step 63 If no violation is found in the estimating AGEN (step 63), then operation proceeds to step 67, in which information extracted from cache using the estimated AGEN is allowed to pass through the RS port which presented the address to the array (step 68). On the other hand, if a violation was found in step 63, then the information extracted from cache will not be gated, and the system waits (stalls) until information is extracted from cache using the address generated by the full, slower AGEN of step 62 (step 66).
- the estimating AGEN process of this embodiment takes advantage of the fact that the compiler will force alignment on the base register. As indicated previously, if 16-byte alignment is applied to the memory, then the lower four bits in the base register are expected to be zero. See FIG. 2. Similarly, if the alignment is 32-byte, then the lower five bits are expected to be zero as shown in FIG. 1A. Other byte-size alignment is, of course, possible.
- the illustrated circuit is appropriate for D-cache architecture which uses three different address subdivisions, each using different paths through the array access. If the compiler is certain that the bottom eleven bits of the base register RA are zeros, then it can prepare ahead of time to skip the bit-addition in the adders altogether. The compiler may permit instructions to use directly the eleven bits of displacement from the Instruction Register for a load instruction.
- the compiler may perform pre-calculations in order to fill a base register with a faux base address so that the instruction displacement value does not cause a carry out from adder D.
- the compiler may perform these pre-calculations by, for example, squeezing in an extra instruction or taking advantage of spare parcels in VLIW architecture, and can perform them well before the load instruction is to be performed. In other words, the compiler may look ahead for possible problems and avoid likely adder carry-out situations, such as when it is aware of unusual alignments of the base register RA.
- the compiler will allow the bottom eleven bits to be used in both the base register RA and the displacement field of the Instruction Register for all store instructions. For load instructions, only those bits of the displacement field which will not cause a carry-out of adder D are used, based on the assumptions of the data organization. If adder A 23 and/or D 26 produces a carry-out, then a stall cycle is required to complete the cache load operation.
- FIG. 5 differs from that of FIG. 2 by allowing positive or negative displacement from the base address contained in base register 52.
- This embodiment may be implemented using two's complement in the displacement field of the Instruction Register 51, with the 0 bit of the Instruction Register indicating whether displacement is positive or negative. The 0 bit will likely be used in the full address generation path, but is not used in the fast address estimation path.
- a carry-out is expected from the third 2-bit adder D for validating the estimated address.
- the critical path through the estimating AGEN process in the embodiments of FIGS. 2 and 5 is the second 2-bit adder C (25 or 55) which forms the wordline CAS bits.
- the CAS bits must traverse a distance to arrive at the L1 D-cache arrays. Rather than try to drive a long conductor from one driver, the conductor's path to the cache arrays is typically divided into shorter paths using buffer circuits to keep the signal from being slowed excessively by resistive/capacitive delays.
- the adders A, B, C, and D preferably double as these buffer circuits. That is, the logic circuitry of the adders is used not only to perform addition, but also to divide the wire path into shorter paths, thereby masking any extra delay in this critical path.
- the second 2-bit adder C is formed by performing two separate 2-bit additions. Once using a forced carry-in bit and once with a forced "no carry-in bit” situation, thereby producing two sums. The correct sum is then selected from the two using the true carry-out from the 2-bit adder B.
- FIG. 7 shows the addition of 2-bit values (A0, A1; A0 being the lesser significant bit) and (B0, B1; B0 being the lesser significant bit). These values are generic representations of respective pairs of bits to be added. It is also noted that this implementation may also be adapted for 2-bit adders B and D.
- the addition is preferably implemented using four adders 71, 72, 73, 74.
- the sum of the more significant bit position A1, B1 may be expressed as:
- the carry-out is from the lower significant bits and can be expressed as:
- Cin represents the carry-in from a lesser significant bit position. If the adder of FIG. 7 represents adder C of FIGS. 2 and 5, then Cin would come from adder B.
- An adder which implements these expressions and produces the sum in only two switch delays may include, for example, 2 ⁇ 2 AND-OR gates for the A1,B1 bit position and OR, NOR, AND, and NAND gates for the A0,B0 position, all leading to 3 ⁇ 4 AND-OR gates for selecting the correct sum according to the true carry-in. Referring to FIG. 7, the respective sum outputs from adders 71 and 72 are provided to a 2-way selector 75. The sum outputs from adders 73 and 74 are provided to a second 2-way selector 76.
- the 2-way selectors 75 and 76 are respectively provided with the true carry-in. As stated above, if FIG. 7 were used to implement the 2-bit adder C, then the true carry-in would be provided from the 2-bit adder B.
- the 2-way selectors 75 and 76 provide the correct two-bit sum, which may correspond to CAS Select bits. Additional logic is included in the 2-bit adder C in order to determine whether a carry-out is to be provided to the 2-bit adder D.
- C1 represents the 1-bit carry-in from the sum of bits A0 and B0.
- the present invention is applicable for use in various environments in which an address must be generated. Another implementation of the present invention is possible in current complex programming environments.
- programming routines include one or more main routine which calls on one or more subroutines for smaller processing tasks.
- the routine will often tell the subroutine to perform its task, so that when the routine needs the results of that task, the results will be available. It is conventional for a subroutine to place its processing results into memory so that they can be retrieved by the routine when needed.
- a store instruction it is increasingly common, however, for a store instruction to be immediately followed by a request for the information being stored. That is, an instruction to store data into memory at the end of a subroutine is immediately followed by a next instruction from the main routine requesting that the data be read out for further processing. In this case, the data is not available for the next instruction because the physical process of storing data into memory takes longer than the time necessary to execute the "store instruction.”
- the store instruction in effect, sends the data toward the memory, but the data is often staggered through several buffer circuits before it finally ends up in the memory itself. Accordingly, the data is not actually stored in the memory until after the expiration of the "store instruction" cycle and therefore are not stored fast enough for the next instruction to have access to it from memory.
- the compiler must stall the next instruction for at least one full instruction cycle.
- FIG. 8 An implementation of the present invention is shown in FIG. 8 to permit data, which are on their way to being stored in memory, e.g. a data cache, to be immediately available for the next instruction cycle.
- an exemplary embodiment shows data being stored from, for example, one or more general purpose registers GPRs. The data is first forwarded to a Store Buffer Data Bank 1, then to a Store Buffer Data Bank 2, then to a Store Buffer Data Bank 3, and finally to the memory. These Buffer Banks are conventional and their operation need not be further described. Their number may also vary. Although the preferred implementation taps the outputs from Buffer Data Bank 1, outputs from the other Buffer Data Banks may also (or in the alternative) be tapped.
- the memory (not shown) is described as a Data Cache, although the implementation will find applicability to other memory types.
- FIG. 8 is illustrated particularly for VLIW architecture, although the implementation is not to be limited thereto.
- Each block 81 in Store Buffer Data Bank 1 may hold a double word DW.
- Other data element sizes are also possible, so reference to DWs should not to be considered limiting on the present invention.
- a given subroutine's results may include one DW or several DWs. For each DW to be stored, a respective address is also provided. This address is supplied to a respective block 81A of the Store Buffer Address Bank 1.
- the generation of addresses to be found in blocks 81A of Store Buffer Address Bank 1 is conventional, and is not part of the present invention. Accordingly, no further discussion is necessary.
- the inventive address estimation is performed using the bits contained in the next immediate instruction, which will be found in an Instruction Register.
- the Instruction Register is not shown in FIG. 8 but is analogous to those shown in FIGS. 1, 2 and 5.
- the estimated address will be held in an Effective Address Register, analogous to that shown in FIG. 4.
- the estimated address held in the Effective Address Register is compared with each of the addresses found in blocks the Store Buffer Address Bank 1, in order to determine whether any of the incoming data from the GPRs are on their way to the memory address which the current instruction wishes to access.
- the address comparison preferably includes only the bits which were manipulated in the address estimation process. For example, only fourteen bits (50-63) were manipulated in FIGS. 2 and 4. A comparison of those bits will be performed in each of the comparators 82 of FIG. 8. If the comparison shows that the estimated address matches one of those held in the Store Buffer Address Bank 1, then the DW in a block 81 which corresponds to that address block 81A will be selected by selector 83 and passed on to the RS port "N" from which the instruction came. Thus, data which are in the process of being stored become, with the benefit of the present invention, available for use in the next immediate instruction cycle.
- the estimated address held in the Effective Address Register (not shown) is also preferably forwarded to the memory (e.g. D-Cache in FIG. 8) as in the previously discussed embodiments.
- FIG. 8 is particularly suitable for VLIW architecture, it is to be understood that other memory (and computing) architectures may be used.
- the estimated address generation AGEN step 91 is performed in parallel with the full address generation routine 92.
- Step 93 tests for a violation in the estimated AGEN of step 91. If there is no violation, for example no carry out was produced by the adders, then the estimated AGEN is compared against the addresses from the Store Buffer Address Bank 1, in step 95. If the estimated AGEN does not match any of the addresses from Store Buffer Address Bank 1, then the fast address routine of FIG. 9 is exited, leaving only the full address routine. That is, the full address routine may extract information from the Store Buffer Data Bank even though the fast address generation routine fails.
- step 95 of the estimated AGEN in one of the comparators 82 If there is a match in step 95 of the estimated AGEN in one of the comparators 82, then the fast address routine proceeds to step 97 in which the corresponding information from Store Buffer Data Bank 1 is gated to the requesting port. From step 97, the process returns at step 100.
- step 97 gates the information to the requesting RS port
- step 97 also is input to an AND decision block 98.
- step 94 the full address generation routine has been ongoing.
- step 94 the full AGEN is compared against the full addresses contained in Store Buffer Address Bank 1.
- a determination is made in step 96 whether there is a positive comparison of the full addresses. If there is no positive comparison of the full address, and the fast address routine found a positive comparison, then AND decision block 98 provides an output to step 99. Step 99 stalls the processor because the information which is being gated at step 97 is incorrect.
- step 93 if a violation is found in the estimated AGEN, for example a carry-out is produced from an adder, AND if step 96 determines that the full AGEN result compares to an address held in the Buffer Address Bank, then the information from the Store Buffer Data Bank 1 is gated to the requesting RS port in step 101, albeit one cycle later than would have occurred in step 97. From step 101, the routine returns at step 100.
Abstract
Description
{(A1B1) OR (A1B1)} XOR (carry-out)
(A0Cin OR B0Cin OR A0B0)
Claims (37)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/668,262 US5924128A (en) | 1996-06-20 | 1996-06-20 | Pseudo zero cycle address generator and fast memory access |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/668,262 US5924128A (en) | 1996-06-20 | 1996-06-20 | Pseudo zero cycle address generator and fast memory access |
Publications (1)
Publication Number | Publication Date |
---|---|
US5924128A true US5924128A (en) | 1999-07-13 |
Family
ID=24681630
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/668,262 Expired - Lifetime US5924128A (en) | 1996-06-20 | 1996-06-20 | Pseudo zero cycle address generator and fast memory access |
Country Status (1)
Country | Link |
---|---|
US (1) | US5924128A (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB2352065A (en) * | 1999-07-14 | 2001-01-17 | Element 14 Ltd | A memory access system |
US6192458B1 (en) * | 1998-03-23 | 2001-02-20 | International Business Machines Corporation | High performance cache directory addressing scheme for variable cache sizes utilizing associativity |
US6263404B1 (en) * | 1997-11-21 | 2001-07-17 | International Business Machines Corporation | Accessing data from a multiple entry fully associative cache buffer in a multithread data processing system |
US6742112B1 (en) * | 1999-12-29 | 2004-05-25 | Intel Corporation | Lookahead register value tracking |
US20060179266A1 (en) * | 2005-02-09 | 2006-08-10 | International Business Machines Corporation | System and method for generating effective address |
US20090132783A1 (en) * | 2007-11-20 | 2009-05-21 | Qualcomm Incorporated | System and Method of Determining an Address of an Element Within a Table |
US20120233440A1 (en) * | 2011-03-07 | 2012-09-13 | Nigel John Stephens | Address generation in a data processing apparatus |
US20150178197A1 (en) * | 2013-12-23 | 2015-06-25 | Sandisk Technologies Inc. | Addressing Auto address Assignment and Auto-Routing in NAND Memory Network |
US9324389B2 (en) | 2013-05-29 | 2016-04-26 | Sandisk Technologies Inc. | High performance system topology for NAND memory systems |
US9728526B2 (en) | 2013-05-29 | 2017-08-08 | Sandisk Technologies Llc | Packaging of high performance system topology for NAND memory systems |
Citations (77)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3626427A (en) * | 1967-01-13 | 1971-12-07 | Ibm | Large-scale data processing system |
US3671942A (en) * | 1970-06-05 | 1972-06-20 | Bell Telephone Labor Inc | A calculator for a multiprocessor system |
US4068305A (en) * | 1975-05-12 | 1978-01-10 | Plessey Handel Und Investments Ag | Associative processors |
US4200926A (en) * | 1972-05-22 | 1980-04-29 | Texas Instruments Incorporated | Electronic calculator implemented in semiconductor LSI chips with scanned keyboard and display |
US4561051A (en) * | 1984-02-10 | 1985-12-24 | Prime Computer, Inc. | Memory access method and apparatus in multiple processor systems |
US4587610A (en) * | 1984-02-10 | 1986-05-06 | Prime Computer, Inc. | Address translation systems for high speed computer memories |
US4747043A (en) * | 1984-02-10 | 1988-05-24 | Prime Computer, Inc. | Multiprocessor cache coherence system |
US4750154A (en) * | 1984-07-10 | 1988-06-07 | Prime Computer, Inc. | Memory alignment system and method |
US4760519A (en) * | 1983-07-11 | 1988-07-26 | Prime Computer, Inc. | Data processing apparatus and method employing collision detection and prediction |
US4761755A (en) * | 1984-07-11 | 1988-08-02 | Prime Computer, Inc. | Data processing system and method having an improved arithmetic unit |
US4794517A (en) * | 1985-04-15 | 1988-12-27 | International Business Machines Corporation | Three phased pipelined signal processor |
US4833599A (en) * | 1987-04-20 | 1989-05-23 | Multiflow Computer, Inc. | Hierarchical priority branch handling for parallel execution in a parallel processor |
US4837738A (en) * | 1986-11-05 | 1989-06-06 | Honeywell Information Systems Inc. | Address boundary detector |
US4847755A (en) * | 1985-10-31 | 1989-07-11 | Mcc Development, Ltd. | Parallel processing method and apparatus for increasing processing throughout by parallel processing low level instructions having natural concurrencies |
US4884198A (en) * | 1986-12-18 | 1989-11-28 | Sun Microsystems, Inc. | Single cycle processor/cache interface |
US4920477A (en) * | 1987-04-20 | 1990-04-24 | Multiflow Computer, Inc. | Virtual address table look aside buffer miss recovery method and apparatus |
US4959776A (en) * | 1987-12-21 | 1990-09-25 | Raytheon Company | Method and apparatus for addressing a memory by array transformations |
US5021945A (en) * | 1985-10-31 | 1991-06-04 | Mcc Development, Ltd. | Parallel processor system for processing natural concurrencies and method therefor |
US5029069A (en) * | 1987-06-30 | 1991-07-02 | Mitsubishi Denki Kabushiki Kaisha | Data processor |
US5051940A (en) * | 1990-04-04 | 1991-09-24 | International Business Machines Corporation | Data dependency collapsing hardware apparatus |
US5053986A (en) * | 1990-02-21 | 1991-10-01 | Stardent Computer, Inc. | Circuit for preservation of sign information in operations for comparison of the absolute value of operands |
US5057837A (en) * | 1987-04-20 | 1991-10-15 | Digital Equipment Corporation | Instruction storage method with a compressed format using a mask word |
US5081575A (en) * | 1987-11-06 | 1992-01-14 | Oryx Corporation | Highly parallel computer architecture employing crossbar switch with selectable pipeline delay |
US5081574A (en) * | 1985-04-15 | 1992-01-14 | International Business Machines Corporation | Branch control in a three phase pipelined signal processor |
EP0474297A2 (en) * | 1990-09-05 | 1992-03-11 | Koninklijke Philips Electronics N.V. | Very long instruction word machine for efficient execution of programs with conditional branches |
EP0479390A2 (en) * | 1990-10-05 | 1992-04-08 | Koninklijke Philips Electronics N.V. | Processing device including a memory circuit and a group of functional units |
US5119324A (en) * | 1990-02-20 | 1992-06-02 | Stardent Computer | Apparatus and method for performing arithmetic functions in a computer system |
US5127092A (en) * | 1989-06-15 | 1992-06-30 | North American Philips Corp. | Apparatus and method for collective branching in a multiple instruction stream multiprocessor where any of the parallel processors is scheduled to evaluate the branching condition |
US5175824A (en) * | 1989-05-08 | 1992-12-29 | Trw Inc. | Crossbar switch connected modular multiprocessor system with processor timing relationship selected and synchronized to be appropriate for function being performed |
US5179680A (en) * | 1987-04-20 | 1993-01-12 | Digital Equipment Corporation | Instruction storage and cache miss recovery in a high speed multiprocessing parallel processing apparatus |
US5182811A (en) * | 1987-10-02 | 1993-01-26 | Mitsubishi Denki Kabushiki Kaisha | Exception, interrupt, and trap handling apparatus which fetches addressing and context data using a single instruction following an interrupt |
US5197137A (en) * | 1989-07-28 | 1993-03-23 | International Business Machines Corporation | Computer architecture for the concurrent execution of sequential programs |
US5197135A (en) * | 1990-06-26 | 1993-03-23 | International Business Machines Corporation | Memory management for scalable compound instruction set machines with in-memory compounding |
US5201039A (en) * | 1987-09-30 | 1993-04-06 | Mitsubishi Denki Kabushiki Kaisha | Multiple address-space data processor with addressable register and context switching |
US5201057A (en) * | 1987-01-22 | 1993-04-06 | Uht Augustus K | System for extracting low level concurrency from serial instruction streams |
US5204841A (en) * | 1990-07-27 | 1993-04-20 | International Business Machines Corporation | Virtual multi-port RAM |
US5212780A (en) * | 1988-05-09 | 1993-05-18 | Microchip Technology Incorporated | System for single cycle transfer of unmodified data to a next sequentially higher address in a semiconductor memory |
US5214763A (en) * | 1990-05-10 | 1993-05-25 | International Business Machines Corporation | Digital computer system capable of processing two or more instructions in parallel and having a coche and instruction compounding mechanism |
US5222229A (en) * | 1989-03-13 | 1993-06-22 | International Business Machines | Multiprocessor system having synchronization control mechanism |
US5222221A (en) * | 1986-06-17 | 1993-06-22 | Yeda Research And Development Co., Ltd. | Method and apparatus for implementing a concurrent logic program |
US5261066A (en) * | 1990-03-27 | 1993-11-09 | Digital Equipment Corporation | Data processing system and method with small fully-associative cache and prefetch buffers |
US5274790A (en) * | 1990-04-30 | 1993-12-28 | Nec Corporation | Cache memory apparatus having a plurality of accessibility ports |
US5276821A (en) * | 1989-11-10 | 1994-01-04 | Kabushiki Kaisha Toshiba | Operation assignment method and apparatus therefor |
US5287467A (en) * | 1991-04-18 | 1994-02-15 | International Business Machines Corporation | Pipeline for removing and concurrently executing two or more branch instructions in synchronization with other instructions executing in the execution unit |
US5295249A (en) * | 1990-05-04 | 1994-03-15 | International Business Machines Corporation | Compounding preprocessor for cache for identifying multiple instructions which may be executed in parallel |
US5299321A (en) * | 1990-12-18 | 1994-03-29 | Oki Electric Industry Co., Ltd. | Parallel processing device to operate with parallel execute instructions |
US5299319A (en) * | 1990-04-04 | 1994-03-29 | International Business Machines Corporation | High performance interlock collapsing SCISM ALU apparatus |
US5301340A (en) * | 1990-10-31 | 1994-04-05 | International Business Machines Corporation | IC chips including ALUs and identical register files whereby a number of ALUs directly and concurrently write results to every register file per cycle |
US5303357A (en) * | 1991-04-05 | 1994-04-12 | Kabushiki Kaisha Toshiba | Loop optimization system |
US5303356A (en) * | 1990-05-04 | 1994-04-12 | International Business Machines Corporation | System for issuing instructions for parallel execution subsequent to branch into a group of member instructions with compoundability in dictation tag |
US5307506A (en) * | 1987-04-20 | 1994-04-26 | Digital Equipment Corporation | High bandwidth multiple computer bus apparatus |
US5313551A (en) * | 1988-12-28 | 1994-05-17 | North American Philips Corporation | Multiport memory bypass under software control |
US5317718A (en) * | 1990-03-27 | 1994-05-31 | Digital Equipment Corporation | Data processing system and method with prefetch buffers |
US5317734A (en) * | 1989-08-29 | 1994-05-31 | North American Philips Corporation | Method of synchronizing parallel processors employing channels and compiling method minimizing cross-processor data dependencies |
EP0605927A1 (en) * | 1992-12-29 | 1994-07-13 | Koninklijke Philips Electronics N.V. | Improved very long instruction word processor architecture |
US5333280A (en) * | 1990-04-06 | 1994-07-26 | Nec Corporation | Parallel pipelined instruction processing system for very long instruction word |
US5347639A (en) * | 1991-07-15 | 1994-09-13 | International Business Machines Corporation | Self-parallelizing computer system and method |
US5355335A (en) * | 1991-06-25 | 1994-10-11 | Fujitsu Limited | Semiconductor memory device having a plurality of writing and reading ports for decreasing hardware amount |
US5355460A (en) * | 1990-06-26 | 1994-10-11 | International Business Machines Corporation | In-memory preprocessor for compounding a sequence of instructions for parallel computer system execution |
US5359718A (en) * | 1991-03-29 | 1994-10-25 | International Business Machines Corporation | Early scalable instruction set machine alu status prediction apparatus |
US5361385A (en) * | 1992-08-26 | 1994-11-01 | Reuven Bakalash | Parallel computing system for volumetric modeling, data processing and visualization |
US5367694A (en) * | 1990-08-31 | 1994-11-22 | Kabushiki Kaisha Toshiba | RISC processor having a cross-bar switch |
US5384722A (en) * | 1993-03-10 | 1995-01-24 | Intel Corporation | Apparatus and method for determining the Manhattan distance between two points |
US5386562A (en) * | 1992-05-13 | 1995-01-31 | Mips Computer Systems, Inc. | Circular scheduling method and apparatus for executing computer programs by moving independent instructions out of a loop |
US5398321A (en) * | 1991-02-08 | 1995-03-14 | International Business Machines Corporation | Microcode generation for a scalable compound instruction set machine |
US5404469A (en) * | 1992-02-25 | 1995-04-04 | Industrial Technology Research Institute | Multi-threaded microprocessor architecture utilizing static interleaving |
US5408658A (en) * | 1991-07-15 | 1995-04-18 | International Business Machines Corporation | Self-scheduling parallel computer system and method |
US5412784A (en) * | 1991-07-15 | 1995-05-02 | International Business Machines Corporation | Apparatus for parallelizing serial instruction sequences and creating entry points into parallelized instruction sequences at places other than beginning of particular parallelized instruction sequence |
US5414822A (en) * | 1991-04-05 | 1995-05-09 | Kabushiki Kaisha Toshiba | Method and apparatus for branch prediction using branch prediction table with improved branch prediction effectiveness |
US5420809A (en) * | 1993-11-30 | 1995-05-30 | Texas Instruments Incorporated | Method of operating a data processing apparatus to compute correlation |
US5421022A (en) * | 1993-06-17 | 1995-05-30 | Digital Equipment Corporation | Apparatus and method for speculatively executing instructions in a computer system |
US5426743A (en) * | 1991-03-29 | 1995-06-20 | International Business Machines Corporation | 3-1 Arithmetic logic unit for simultaneous execution of an independent or dependent add/logic instruction pair |
US5428807A (en) * | 1993-06-17 | 1995-06-27 | Digital Equipment Corporation | Method and apparatus for propagating exception conditions of a computer system |
US5434972A (en) * | 1991-01-11 | 1995-07-18 | Gec-Marconi Limited | Network for determining route through nodes by directing searching path signal arriving at one port of node to another port receiving free path signal |
US5440751A (en) * | 1991-06-21 | 1995-08-08 | Compaq Computer Corp. | Burst data transfer to single cycle data transfer conversion and strobe signal conversion |
US5448703A (en) * | 1993-05-28 | 1995-09-05 | International Business Machines Corporation | Method and apparatus for providing back-to-back data transfers in an information handling system having a multiplexed bus |
US5448705A (en) * | 1991-07-08 | 1995-09-05 | Seiko Epson Corporation | RISC microprocessor architecture implementing fast trap and exception state |
-
1996
- 1996-06-20 US US08/668,262 patent/US5924128A/en not_active Expired - Lifetime
Patent Citations (78)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3626427A (en) * | 1967-01-13 | 1971-12-07 | Ibm | Large-scale data processing system |
US3671942A (en) * | 1970-06-05 | 1972-06-20 | Bell Telephone Labor Inc | A calculator for a multiprocessor system |
US4200926A (en) * | 1972-05-22 | 1980-04-29 | Texas Instruments Incorporated | Electronic calculator implemented in semiconductor LSI chips with scanned keyboard and display |
US4068305A (en) * | 1975-05-12 | 1978-01-10 | Plessey Handel Und Investments Ag | Associative processors |
US4760519A (en) * | 1983-07-11 | 1988-07-26 | Prime Computer, Inc. | Data processing apparatus and method employing collision detection and prediction |
US4777594A (en) * | 1983-07-11 | 1988-10-11 | Prime Computer, Inc. | Data processing apparatus and method employing instruction flow prediction |
US4747043A (en) * | 1984-02-10 | 1988-05-24 | Prime Computer, Inc. | Multiprocessor cache coherence system |
US4587610A (en) * | 1984-02-10 | 1986-05-06 | Prime Computer, Inc. | Address translation systems for high speed computer memories |
US4561051A (en) * | 1984-02-10 | 1985-12-24 | Prime Computer, Inc. | Memory access method and apparatus in multiple processor systems |
US4750154A (en) * | 1984-07-10 | 1988-06-07 | Prime Computer, Inc. | Memory alignment system and method |
US4761755A (en) * | 1984-07-11 | 1988-08-02 | Prime Computer, Inc. | Data processing system and method having an improved arithmetic unit |
US5081574A (en) * | 1985-04-15 | 1992-01-14 | International Business Machines Corporation | Branch control in a three phase pipelined signal processor |
US4794517A (en) * | 1985-04-15 | 1988-12-27 | International Business Machines Corporation | Three phased pipelined signal processor |
US4847755A (en) * | 1985-10-31 | 1989-07-11 | Mcc Development, Ltd. | Parallel processing method and apparatus for increasing processing throughout by parallel processing low level instructions having natural concurrencies |
US5021945A (en) * | 1985-10-31 | 1991-06-04 | Mcc Development, Ltd. | Parallel processor system for processing natural concurrencies and method therefor |
US5222221A (en) * | 1986-06-17 | 1993-06-22 | Yeda Research And Development Co., Ltd. | Method and apparatus for implementing a concurrent logic program |
US4837738A (en) * | 1986-11-05 | 1989-06-06 | Honeywell Information Systems Inc. | Address boundary detector |
US4884198A (en) * | 1986-12-18 | 1989-11-28 | Sun Microsystems, Inc. | Single cycle processor/cache interface |
US5201057A (en) * | 1987-01-22 | 1993-04-06 | Uht Augustus K | System for extracting low level concurrency from serial instruction streams |
US5057837A (en) * | 1987-04-20 | 1991-10-15 | Digital Equipment Corporation | Instruction storage method with a compressed format using a mask word |
US5307506A (en) * | 1987-04-20 | 1994-04-26 | Digital Equipment Corporation | High bandwidth multiple computer bus apparatus |
US4833599A (en) * | 1987-04-20 | 1989-05-23 | Multiflow Computer, Inc. | Hierarchical priority branch handling for parallel execution in a parallel processor |
US4920477A (en) * | 1987-04-20 | 1990-04-24 | Multiflow Computer, Inc. | Virtual address table look aside buffer miss recovery method and apparatus |
US5179680A (en) * | 1987-04-20 | 1993-01-12 | Digital Equipment Corporation | Instruction storage and cache miss recovery in a high speed multiprocessing parallel processing apparatus |
US5029069A (en) * | 1987-06-30 | 1991-07-02 | Mitsubishi Denki Kabushiki Kaisha | Data processor |
US5201039A (en) * | 1987-09-30 | 1993-04-06 | Mitsubishi Denki Kabushiki Kaisha | Multiple address-space data processor with addressable register and context switching |
US5182811A (en) * | 1987-10-02 | 1993-01-26 | Mitsubishi Denki Kabushiki Kaisha | Exception, interrupt, and trap handling apparatus which fetches addressing and context data using a single instruction following an interrupt |
US5081575A (en) * | 1987-11-06 | 1992-01-14 | Oryx Corporation | Highly parallel computer architecture employing crossbar switch with selectable pipeline delay |
US4959776A (en) * | 1987-12-21 | 1990-09-25 | Raytheon Company | Method and apparatus for addressing a memory by array transformations |
US5212780A (en) * | 1988-05-09 | 1993-05-18 | Microchip Technology Incorporated | System for single cycle transfer of unmodified data to a next sequentially higher address in a semiconductor memory |
US5313551A (en) * | 1988-12-28 | 1994-05-17 | North American Philips Corporation | Multiport memory bypass under software control |
US5222229A (en) * | 1989-03-13 | 1993-06-22 | International Business Machines | Multiprocessor system having synchronization control mechanism |
US5175824A (en) * | 1989-05-08 | 1992-12-29 | Trw Inc. | Crossbar switch connected modular multiprocessor system with processor timing relationship selected and synchronized to be appropriate for function being performed |
US5127092A (en) * | 1989-06-15 | 1992-06-30 | North American Philips Corp. | Apparatus and method for collective branching in a multiple instruction stream multiprocessor where any of the parallel processors is scheduled to evaluate the branching condition |
US5197137A (en) * | 1989-07-28 | 1993-03-23 | International Business Machines Corporation | Computer architecture for the concurrent execution of sequential programs |
US5317734A (en) * | 1989-08-29 | 1994-05-31 | North American Philips Corporation | Method of synchronizing parallel processors employing channels and compiling method minimizing cross-processor data dependencies |
US5276821A (en) * | 1989-11-10 | 1994-01-04 | Kabushiki Kaisha Toshiba | Operation assignment method and apparatus therefor |
US5119324A (en) * | 1990-02-20 | 1992-06-02 | Stardent Computer | Apparatus and method for performing arithmetic functions in a computer system |
US5053986A (en) * | 1990-02-21 | 1991-10-01 | Stardent Computer, Inc. | Circuit for preservation of sign information in operations for comparison of the absolute value of operands |
US5261066A (en) * | 1990-03-27 | 1993-11-09 | Digital Equipment Corporation | Data processing system and method with small fully-associative cache and prefetch buffers |
US5317718A (en) * | 1990-03-27 | 1994-05-31 | Digital Equipment Corporation | Data processing system and method with prefetch buffers |
US5051940A (en) * | 1990-04-04 | 1991-09-24 | International Business Machines Corporation | Data dependency collapsing hardware apparatus |
US5299319A (en) * | 1990-04-04 | 1994-03-29 | International Business Machines Corporation | High performance interlock collapsing SCISM ALU apparatus |
US5333280A (en) * | 1990-04-06 | 1994-07-26 | Nec Corporation | Parallel pipelined instruction processing system for very long instruction word |
US5274790A (en) * | 1990-04-30 | 1993-12-28 | Nec Corporation | Cache memory apparatus having a plurality of accessibility ports |
US5295249A (en) * | 1990-05-04 | 1994-03-15 | International Business Machines Corporation | Compounding preprocessor for cache for identifying multiple instructions which may be executed in parallel |
US5303356A (en) * | 1990-05-04 | 1994-04-12 | International Business Machines Corporation | System for issuing instructions for parallel execution subsequent to branch into a group of member instructions with compoundability in dictation tag |
US5214763A (en) * | 1990-05-10 | 1993-05-25 | International Business Machines Corporation | Digital computer system capable of processing two or more instructions in parallel and having a coche and instruction compounding mechanism |
US5197135A (en) * | 1990-06-26 | 1993-03-23 | International Business Machines Corporation | Memory management for scalable compound instruction set machines with in-memory compounding |
US5355460A (en) * | 1990-06-26 | 1994-10-11 | International Business Machines Corporation | In-memory preprocessor for compounding a sequence of instructions for parallel computer system execution |
US5204841A (en) * | 1990-07-27 | 1993-04-20 | International Business Machines Corporation | Virtual multi-port RAM |
US5367694A (en) * | 1990-08-31 | 1994-11-22 | Kabushiki Kaisha Toshiba | RISC processor having a cross-bar switch |
EP0474297A2 (en) * | 1990-09-05 | 1992-03-11 | Koninklijke Philips Electronics N.V. | Very long instruction word machine for efficient execution of programs with conditional branches |
EP0479390A2 (en) * | 1990-10-05 | 1992-04-08 | Koninklijke Philips Electronics N.V. | Processing device including a memory circuit and a group of functional units |
US5301340A (en) * | 1990-10-31 | 1994-04-05 | International Business Machines Corporation | IC chips including ALUs and identical register files whereby a number of ALUs directly and concurrently write results to every register file per cycle |
US5299321A (en) * | 1990-12-18 | 1994-03-29 | Oki Electric Industry Co., Ltd. | Parallel processing device to operate with parallel execute instructions |
US5434972A (en) * | 1991-01-11 | 1995-07-18 | Gec-Marconi Limited | Network for determining route through nodes by directing searching path signal arriving at one port of node to another port receiving free path signal |
US5398321A (en) * | 1991-02-08 | 1995-03-14 | International Business Machines Corporation | Microcode generation for a scalable compound instruction set machine |
US5359718A (en) * | 1991-03-29 | 1994-10-25 | International Business Machines Corporation | Early scalable instruction set machine alu status prediction apparatus |
US5426743A (en) * | 1991-03-29 | 1995-06-20 | International Business Machines Corporation | 3-1 Arithmetic logic unit for simultaneous execution of an independent or dependent add/logic instruction pair |
US5414822A (en) * | 1991-04-05 | 1995-05-09 | Kabushiki Kaisha Toshiba | Method and apparatus for branch prediction using branch prediction table with improved branch prediction effectiveness |
US5303357A (en) * | 1991-04-05 | 1994-04-12 | Kabushiki Kaisha Toshiba | Loop optimization system |
US5287467A (en) * | 1991-04-18 | 1994-02-15 | International Business Machines Corporation | Pipeline for removing and concurrently executing two or more branch instructions in synchronization with other instructions executing in the execution unit |
US5440751A (en) * | 1991-06-21 | 1995-08-08 | Compaq Computer Corp. | Burst data transfer to single cycle data transfer conversion and strobe signal conversion |
US5355335A (en) * | 1991-06-25 | 1994-10-11 | Fujitsu Limited | Semiconductor memory device having a plurality of writing and reading ports for decreasing hardware amount |
US5448705A (en) * | 1991-07-08 | 1995-09-05 | Seiko Epson Corporation | RISC microprocessor architecture implementing fast trap and exception state |
US5347639A (en) * | 1991-07-15 | 1994-09-13 | International Business Machines Corporation | Self-parallelizing computer system and method |
US5408658A (en) * | 1991-07-15 | 1995-04-18 | International Business Machines Corporation | Self-scheduling parallel computer system and method |
US5412784A (en) * | 1991-07-15 | 1995-05-02 | International Business Machines Corporation | Apparatus for parallelizing serial instruction sequences and creating entry points into parallelized instruction sequences at places other than beginning of particular parallelized instruction sequence |
US5404469A (en) * | 1992-02-25 | 1995-04-04 | Industrial Technology Research Institute | Multi-threaded microprocessor architecture utilizing static interleaving |
US5386562A (en) * | 1992-05-13 | 1995-01-31 | Mips Computer Systems, Inc. | Circular scheduling method and apparatus for executing computer programs by moving independent instructions out of a loop |
US5361385A (en) * | 1992-08-26 | 1994-11-01 | Reuven Bakalash | Parallel computing system for volumetric modeling, data processing and visualization |
EP0605927A1 (en) * | 1992-12-29 | 1994-07-13 | Koninklijke Philips Electronics N.V. | Improved very long instruction word processor architecture |
US5384722A (en) * | 1993-03-10 | 1995-01-24 | Intel Corporation | Apparatus and method for determining the Manhattan distance between two points |
US5448703A (en) * | 1993-05-28 | 1995-09-05 | International Business Machines Corporation | Method and apparatus for providing back-to-back data transfers in an information handling system having a multiplexed bus |
US5428807A (en) * | 1993-06-17 | 1995-06-27 | Digital Equipment Corporation | Method and apparatus for propagating exception conditions of a computer system |
US5421022A (en) * | 1993-06-17 | 1995-05-30 | Digital Equipment Corporation | Apparatus and method for speculatively executing instructions in a computer system |
US5420809A (en) * | 1993-11-30 | 1995-05-30 | Texas Instruments Incorporated | Method of operating a data processing apparatus to compute correlation |
Non-Patent Citations (13)
Title |
---|
Austin et al., "Zero-Cycle Loads: Microarchitecture Support for Reducing Load Latency", Microarchitecture, 1995 International Symposium. pp. 82-92, Nov. 1995. |
Austin et al., Zero Cycle Loads: Microarchitecture Support for Reducing Load Latency , Microarchitecture, 1995 International Symposium. pp. 82 92, Nov. 1995. * |
G.F. Grohoski, IBM Technical Disclosure Bulletin, vol. 33, No. 10B, Mar. 1991, pp. 253 259, Zero Cycle Branches in Simple RISC Design . * |
G.F. Grohoski, IBM Technical Disclosure Bulletin, vol. 33, No. 10B, Mar. 1991, pp. 253-259, "Zero-Cycle Branches in Simple RISC Design". |
Kemal Ebcioglu, IBM Research Division, Research Report "Some Design Ideas for A VLIW Architecture for Sequential-Natured Software," Proceedings of IFIP WG 10.3 Working Conference on Parallel Processing, (M. Cosnard et al., eds.) 1988. |
Kemal Ebcioglu, IBM Research Division, Research Report Some Design Ideas for A VLIW Architecture for Sequential Natured Software, Proceedings of IFIP WG 10.3 Working Conference on Parallel Processing, (M. Cosnard et al., eds.) 1988. * |
P.G. Emma, et al., IBM Technical Disclosure Bulletin, vol. 31, No. 8, Jan. 1989, pp. 12 13, Effecting A One Cycle Cache Access In A Pipeline Having Combined D/A Using A Belt . * |
P.G. Emma, et al., IBM Technical Disclosure Bulletin, vol. 31, No. 8, Jan. 1989, pp. 12-13, "Effecting A One-Cycle Cache Access In A Pipeline Having Combined D/A Using A Belt". |
Smith et al., "The Microarchitecture of Superscalar Processors," Proceedings of the IEEE, vol. 83, No. 12. pp. 1609-1624, Dec. 1995. |
Smith et al., The Microarchitecture of Superscalar Processors, Proceedings of the IEEE, vol. 83, No. 12. pp. 1609 1624, Dec. 1995. * |
Todd M. Austin et al., "Streamlining Data Cache Access with Fast Address Calculation," Comp. Sci Dept. University of Wisconsin-Madison, International Sumposium on Computer Architecture, pp. 369-380, Jun. 1995. |
Todd M. Austin et al., Streamlining Data Cache Access with Fast Address Calculation, Comp. Sci Dept. University of Wisconsin Madison, International Sumposium on Computer Architecture, pp. 369 380, Jun. 1995. * |
U.S. Statutory Invention Registration H1291, Hinton et al., Feb. 1, 1994. * |
Cited By (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6263404B1 (en) * | 1997-11-21 | 2001-07-17 | International Business Machines Corporation | Accessing data from a multiple entry fully associative cache buffer in a multithread data processing system |
US6192458B1 (en) * | 1998-03-23 | 2001-02-20 | International Business Machines Corporation | High performance cache directory addressing scheme for variable cache sizes utilizing associativity |
US20050044342A1 (en) * | 1999-07-14 | 2005-02-24 | Broadcom Corporation | Memory acess system |
US6662292B1 (en) | 1999-07-14 | 2003-12-09 | Broadcom Corporation | Memory access system |
GB2352065B (en) * | 1999-07-14 | 2004-03-03 | Element 14 Ltd | A memory access system |
US20040088518A1 (en) * | 1999-07-14 | 2004-05-06 | Broadcom Corporation | Memory access system |
GB2352065A (en) * | 1999-07-14 | 2001-01-17 | Element 14 Ltd | A memory access system |
US7143265B2 (en) | 1999-07-14 | 2006-11-28 | Broadcom Corporation | Computer program product memory access system |
US6816959B2 (en) | 1999-07-14 | 2004-11-09 | Broadcom Corporation | Memory access system |
US6742112B1 (en) * | 1999-12-29 | 2004-05-25 | Intel Corporation | Lookahead register value tracking |
US7017026B2 (en) | 1999-12-29 | 2006-03-21 | Sae Magnetics (H.K.) Ltd. | Generating lookahead tracked register value based on arithmetic operation indication |
US20040215934A1 (en) * | 1999-12-29 | 2004-10-28 | Adi Yoaz | Register value tracker |
US20060179266A1 (en) * | 2005-02-09 | 2006-08-10 | International Business Machines Corporation | System and method for generating effective address |
US7360058B2 (en) * | 2005-02-09 | 2008-04-15 | International Business Machines Corporation | System and method for generating effective address |
US20080162887A1 (en) * | 2005-02-09 | 2008-07-03 | Rachel Marie Flood | System for generating effective address |
US7809924B2 (en) | 2005-02-09 | 2010-10-05 | International Business Machines Corporation | System for generating effective address |
US20090132783A1 (en) * | 2007-11-20 | 2009-05-21 | Qualcomm Incorporated | System and Method of Determining an Address of an Element Within a Table |
US7877571B2 (en) * | 2007-11-20 | 2011-01-25 | Qualcomm, Incorporated | System and method of determining an address of an element within a table |
US20120233440A1 (en) * | 2011-03-07 | 2012-09-13 | Nigel John Stephens | Address generation in a data processing apparatus |
US8954711B2 (en) * | 2011-03-07 | 2015-02-10 | Arm Limited | Address generation in a data processing apparatus |
US9495163B2 (en) | 2011-03-07 | 2016-11-15 | Arm Limited | Address generation in a data processing apparatus |
US9324389B2 (en) | 2013-05-29 | 2016-04-26 | Sandisk Technologies Inc. | High performance system topology for NAND memory systems |
US9728526B2 (en) | 2013-05-29 | 2017-08-08 | Sandisk Technologies Llc | Packaging of high performance system topology for NAND memory systems |
US10103133B2 (en) | 2013-05-29 | 2018-10-16 | Sandisk Technologies Llc | Packaging of high performance system topology for NAND memory systems |
US20150178197A1 (en) * | 2013-12-23 | 2015-06-25 | Sandisk Technologies Inc. | Addressing Auto address Assignment and Auto-Routing in NAND Memory Network |
US9703702B2 (en) * | 2013-12-23 | 2017-07-11 | Sandisk Technologies Llc | Addressing auto address assignment and auto-routing in NAND memory network |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US4594682A (en) | Vector processing | |
JP2750311B2 (en) | Apparatus and method for controlling execution of data operations in a data processing device | |
JP3659340B2 (en) | Circuit, product, and method for speculatively executing instructions using instruction history caching | |
US4439827A (en) | Dual fetch microsequencer | |
JP3177156B2 (en) | High-speed register file | |
US5890222A (en) | Method and system for addressing registers in a data processing unit in an indirect addressing mode | |
US5396641A (en) | Reconfigurable memory processor | |
US4229801A (en) | Floating point processor having concurrent exponent/mantissa operation | |
US6779102B2 (en) | Data processor capable of executing an instruction that makes a cache memory ineffective | |
KR100346515B1 (en) | Temporary pipeline register file for a superpipe lined superscalar processor | |
US4541045A (en) | Microprocessor architecture employing efficient operand and instruction addressing | |
JPS60179851A (en) | Data processor | |
US4348724A (en) | Address pairing apparatus for a control store of a data processing system | |
US5924128A (en) | Pseudo zero cycle address generator and fast memory access | |
EP0772819B1 (en) | Apparatus and method for efficiently determining addresses for misaligned data stored in memory | |
JP3641031B2 (en) | Command device | |
US4491908A (en) | Microprogrammed control of extended integer and commercial instruction processor instructions through use of a data type field in a central processor unit | |
US4954947A (en) | Instruction processor for processing branch instruction at high speed | |
US5434986A (en) | Interdependency control of pipelined instruction processor using comparing result of two index registers of skip instruction and next sequential instruction | |
US4360869A (en) | Control store organization for a data processing system | |
US5940625A (en) | Density dependent vector mask operation control apparatus and method | |
US5197145A (en) | Buffer storage system using parallel buffer storage units and move-out buffer registers | |
US5832533A (en) | Method and system for addressing registers in a data processing unit in an indexed addressing mode | |
EP0187713B1 (en) | System memory for a reduction processor evaluating programs stored as binary directed graphs employing variable-free applicative language codes | |
US6405233B1 (en) | Unaligned semaphore adder |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LUICK, DAVE A.;KIEFER, KENNETH J.;KUNKEL, STEVE R.;AND OTHERS;REEL/FRAME:008149/0027;SIGNING DATES FROM 19960712 TO 19960717 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 12 |
|
SULP | Surcharge for late payment |
Year of fee payment: 11 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044144/0001Effective date: 20170929 |