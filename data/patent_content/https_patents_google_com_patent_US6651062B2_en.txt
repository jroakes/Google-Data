US6651062B2 - Method and apparatus for managing data for use by data applications - Google Patents
Method and apparatus for managing data for use by data applications Download PDFInfo
- Publication number
- US6651062B2 US6651062B2 US09/386,571 US38657199A US6651062B2 US 6651062 B2 US6651062 B2 US 6651062B2 US 38657199 A US38657199 A US 38657199A US 6651062 B2 US6651062 B2 US 6651062B2
- Authority
- US
- United States
- Prior art keywords
- data
- network
- database
- management systems
- information
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/27—Replication, distribution or synchronisation of data between databases or within a distributed database system; Distributed database system architectures therefor
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- the present invention relates generally to management of information and, more particularly, to management of data among distributed computer systems.
- Management applications for network, software and/or systems management have become commonplace.
- Management applications are generally software applications that are executed on standalone computer systems. These management systems provide information regarding one or more entities, such as computers and network communication devices. In particular, these systems gather information from the entities and present them to a network administrator for analysis and interpretation. The network administrator in turn provides corrective actions, configuration changes, and the like to maintain and/or improve network and systems performance.
- SPECTRUM network management system available from Aprisma Management Technologies, Inc.
- the WinWatch management application available from Metrix, S.A. is an example of a system that provides management for end-user computer systems and servers.
- Systems Management Server (SMS) available from the Microsoft Corporation provides similar information for managing software and systems.
- a recent trend is to manage higher-level entities such as business processes and applications, whereby minimum service levels to users may be maintained.
- a business process may depend on the performance of one or more other entities, such as another process, a networking device, computer system or other entity that affects the business process.
- an application may be managed wherein the state of the application depends on the status of various software processes, hardware devices, and communications between them. Due to the need for managing business processes and applications, new software applications have been designed to manage them.
- the NERVECENTER management system available from Seagate, Inc. is an example of a business process management system.
- the PATROL management application available from BMC Software provides application management functions. Other management systems are available.
- NMS network management system
- a network management system generally cannot determine chargebacks to a user based on performance data of a computer system such as a file server.
- Data warehouses are a known solution for storing large amounts of data. Data warehouses are generally accessed directly by consumers of its data, and the data is generally loaded manually by database entry personnel.
- a data warehouse generally refers to an extract of operational data for the purposes of efficient query-only processing.
- data warehouses are used for storing business-related data such as financial or production information, wherein use of the warehouse facilitates improved decision making.
- a data warehouse typically contains a wide variety of data that presents a coherent picture of business conditions at a single point in time, and this picture is used for decision support.
- One such data warehouse product is the ORACLE WAREHOUSE software system available from the Oracle Corporation.
- Data marts Similar to a data warehouse, a data mart helps one make informed business decisions.
- Data marts typically contain highly-focused data specific to a department or individual line of business, such as sales, marketing, or finance. Since data marts databases tend to be smaller than that of a data warehouse (data marts are typically under 100 GB in size), data marts are easier to manage and implement.
- a system for managing information comprising a data manager that accepts data from a plurality of management systems and processes and stores that data in a data warehouse.
- the data manager comprises an agent configured to accept information from the plurality of systems and which maps the accepted information into database fields of the data warehouse and a database accessor that stores the accepted information in the data warehouse.
- the agent deletes duplicate data received from more than one source.
- at least one of the plurality of management systems is a network management system.
- the database accessor utilizes a standard database interface to one or more proprietary data warehouses.
- the agent is a push agent configured to push data to the database accessor at a specified interval.
- the agent is a pulling agent configured to pull one or more systems for obtaining management data and provides the management data to the database accessor.
- the one or more systems are network management systems.
- the network management systems store different types of management information in network management databases.
- the system can determine and control how much information is to be stored in a local database.
- a filtering and scheduling interface allows users to decide what types of information they wish to replicate to the data warehouse and how often.
- a standard database interface is provided to maintain independence from the underlying proprietary database.
- the database interface is a CORBA interface.
- the data warehouse stores object-oriented objects.
- system for management of network data.
- Network data is aggregated from multiple data sources into the data warehouse, wherein the data can be provided to software applications.
- the system integrates disparate data sources into the data warehouse by for example, performing data filtering, collation, compression, and mapping the data into database fields of the data warehouse.
- this system provides consolidated information to applications that can perform high-level analysis. Because information is stored in the data warehouse and a standard interface is provided to access the warehouse, a consistent, reusable set of services for obtaining management data is available.
- the system is capable of tracking trends and changes in network devices and software models of the devices. For example, a network accounting application can integrate usage data from different network managers and devices and network probe information, allowing a user to see a consolidated graph or billing statement.
- the system can trend business processes, showing over time which processes have failed most often and what components have caused those failures. Further, in yet another embodiment, the system can determine chargebacks for users consuming network resources, such as bandwidth.
- FIG. 1 is a block diagram of a computer system suitable for incorporating an embodiment of the present invention
- FIG. 2 is a block diagram depicting a system incorporating an embodiment of the present invention
- FIG. 3 is a block diagram depicting another system incorporating an embodiment of the present invention.
- FIG. 4 is a block diagram depicting a layered view of a system providing information to data users from one or more data providers in accordance with one embodiment of the invention
- FIG. 5 is a block diagram of objects of a data management system in accordance with one embodiment of the invention.
- FIG. 6 is a block diagram of a data management system and an agent in accordance with one embodiment of the invention.
- FIG. 7 is a block diagram of a data management system and an agent in accordance with one embodiment of the invention.
- FIG. 8 is a flow chart depicting the import of model data into a data warehouse
- FIG. 9 is a representation of a graphical user interface for managing policies
- FIG. 10 is a representation of a graphical user interface for listing information regarding created policies
- FIG. 11 is a representation of a graphical user interface for listing history information regarding created policies
- FIG. 12 is a representation of a graphical user interface for configuring network monitoring
- FIG. 13 is a representation of a graphical user interface for configuring a network accounting report.
- FIG. 14 is a representation of a graphical user interface for configuring a network link report.
- the exemplary network system 100 includes a plurality of management systems 102 A-B interconnected through network 104 .
- Network 104 may be, for example, a local area network (LAN), metropolitan area network (MAN), wide area network (WAN), etc., or other network used to communicate information between systems.
- Network 104 may also include one or more managed entities 103 A-B that may be managed by management systems 102 A-B, such as an end-user computer, network server, router, switch, application, process or other manageable entity.
- Network 104 may contain any combination of management systems and managed entities.
- Computer system 101 may be a general purpose computer system, which typically includes a processor 105 connected to a memory system 106 via an interconnection mechanism such as a computer bus 111 .
- I/O devices 107 , 108 such as disk controllers, graphics cards, or the like may be included in computer system 101 .
- the computer is capable of executing an operating system and is generally programmable by using a high level computer programming language such as the C++ programming language.
- Computer system 101 includes a software program stored in memory system 106 , which causes the processor to perform operations of data management system 210 .
- data management system 210 receives information from one or more data sources, processes the information according to policies, and stores the information in a data warehouse.
- the data warehouse can be accessed by applications that perform analysis with the data.
- the general purpose computer system 101 preferably includes a commercially available processor 105 , such as the Celeron, Pentium, Pentium II or Pentium III microprocessor from Intel Corporation, PowerPC microprocessor, SPARC processor, PA-RISC processor or 68000 Series microprocessor from Motorola. Many other processors are also available.
- a processor generally includes an operating system which may be, for example, DOS, Windows 95, Windows 98, Windows NT, or Windows 2000 operating systems from the Microsoft Corporation, the System 7.X operating systems from Apple Computer, the Solaris operating system from Sun Microsystems, the Unix operating system and its variants available from many vendors including Sun Microsystems, Inc., Hewlett Packard, Red Hat Computing and AT&T, or the NetWare operating system available from Novell, Inc.
- the operating system controls the execution of other computer programs and provides scheduling, debugging, input/output control, accounting, computation, storage assignment, data management, memory management, communication control and related services.
- Processor 105 and an operating system define a computer platform for which application programs and high-level programming languages are written.
- Management system 102 may be any type of computer system as described above, with a network interface card (NIC) or other communication device installed to communicate over network 104 .
- NIC network interface card
- Memory system 106 may be any commonly available random access memory (RAM) or read-only memory (ROM), a hard drive, CD ROM, tape system, or the like used to store and/or retrieve data.
- RAM random access memory
- ROM read-only memory
- the data management system 210 of the present invention is preferably implemented in C++, however, it may be implemented in any other well-known software language.
- the data management system 210 may be implemented in interpreted object-orientated programming language, such as JAVA, ActiveX, or SmallTalk.
- System 210 may also be configured to execute within a browser application, such as the Netscape Navigator browser available from Netscape, Inc. or the Microsoft Internet Explorer browser available from Microsoft.
- data management system 210 may operate as a computer implemented process accessible through a browser interface.
- data management system 210 is capable of residing on any well-known computing platform.
- Software techniques for performing data management functions in accordance with the present invention typically reside in memory 106 and may be stored on a computer-readable medium such as, for example, magnetic disk, compact disk, magnetic tape, or optical media.
- a software embodiment of the present invention may be, for example, loaded into computer system 101 using an appropriate peripheral device as known in the art.
- software implementing another embodiment of the present invention may be stored, for example, on a server located in network 104 , and installed or executed over network 104 . It should be understood, however, that the present invention is not limited to a particular computer platform, particular operating system, or particular processor.
- the exemplary environments identified above are given by way of example only; the invention may be implemented in a variety of computer systems having a variety of system architectures.
- FIG. 2 shows a block diagram depicting a system in accordance with one embodiment of the present invention.
- Database management system 210 receives information from one or more data sources 207 A-B, 208 A-B and stores the information in a data warehouse 203 , whereby software applications 202 may access and perform analysis on the stored data, and provide analysis results to a user.
- Data management system 210 may include a database accessor 204 which provides an interface to the data warehouse for managing and storing information in the data warehouse 203 .
- Database accessor 204 may use one or more database policies 209 to determine when information is to be sent to the data warehouse 203 .
- Database policy 209 may also specify a source of the data and the frequency by which data should be obtained from the data source.
- System 210 also includes agents 205 , 206 which provide the ability to interface to other systems, extract data from them, and map the data into the data warehouse 203 .
- a push agent 205 is used to push unsolicited data from data sources 207 A and 207 B into warehouse 203 .
- Data which can be pushed includes information types that are regularly stored in the data warehouse at regular intervals. For example, a network management station may, after a two week period, push data collected that is more than two weeks old to database accessor 204 .
- Push agent 205 may reside on a computer system that includes management system 210 , or the push agent 205 may be located on a computer system such as a network management system. According to one embodiment, the push agent 205 has access to a management system database located on the network management, and provides information from that database to database accessor 204 for storage in data warehouse 203 .
- system 210 may include a polling agent 206 , which performs requests 201 to data sources 208 A-B and receives responses 212 .
- Agent 206 may be used to obtain data from sources at specified intervals.
- an external system controls the loading of data into the warehouse using push agents.
- Polling agent 206 may include a polling manager, which allows for scheduling and configuring of polling requests. Polling may be performed according to database policies 209 , which may include as parameters system locations, types and frequencies of the data that is obtained. It should be understood that system 210 may perform any method for obtaining data, such as polling, received pushed data, or any other method.
- Data warehouse 203 may be, for example, a commercially available data warehouse product, such as ORACLE WAREHOUSE available from the Oracle Corporation. Data warehouse products from other companies including Microsoft, Sybase, and Informix and others may also be used. Other types of data warehouses may be used. Alternatively, a distributed data warehouse or data marts may be used to store and serve data.
- ORACLE WAREHOUSE available from the Oracle Corporation.
- Data warehouse products from other companies including Microsoft, Sybase, and Informix and others may also be used.
- Other types of data warehouses may be used.
- a distributed data warehouse or data marts may be used to store and serve data.
- Data sources may be, for example, management servers, network entities or any other source of management data.
- the term “data” and “information” are used synonymously in this application, and can be used interchangeably.
- FIG. 3 shows a block diagram of a system wherein multiple management systems 301 - 304 transmit data to data management system 210 .
- Data may be transmitted through a communications network such as a LAN, or through any method available. If a management system is located on the same computer system as system 210 , data may be transferred through common file structures, interprocess communication, or by any manner available.
- Management systems 301 - 304 may be the same type of management system, such as a network management system, or they may be different. Management systems 301 - 304 may store similar or dissimilar types of data. Management systems 301 - 304 obtain information from network entities 305 A-J, either by polling or receiving pushed data. Such information may include configuration data, performance data, or any data which is relevant to the operation and control of the network entity 305 .
- a network entity 305 A may be a router
- management system 301 may be, for example, a SpectroSERVER network management system available from Aprisma Management Technologies, Inc., Portsmouth, N.H., U.S.A.
- Router 305 A may send unsolicited messages, commonly referred to as traps, to management system 301 , the traps indicating an operational state of network entity 305 A.
- management system 301 may obtain information from router 305 A by polling the device through a network management protocol, such as SNMP (simple network management protocol). Received information may be stored by system 210 in data warehouse 203 . It should be understood that any method for communicating information may be used.
- Data management system 210 may perform processing on received data including filtering, collating, compression, and mapping data into database fields of the data warehouse 203 .
- a trap when a trap is received by a management system of a network entity, and is passed on to an agent 205 , 206 , some of the data fields of the trap may not be needed by application 202 . Therefore, unnecessary data may be deleted.
- management systems 301 - 304 may not be the same type of management system, and therefore data formats represented in the management systems 301 - 304 may need to be mapped to a common database format by the database accessor 204 . Further, data received from data sources may be compressed by the database accessor 204 prior to storing the data in data warehouse 203 such that database space is conserved.
- More than one management system may also collect information about a particular network entity.
- management systems 303 and 304 may both collect the same or overlapping information from network entity 305 G.
- Data management system 210 may delete redundant information before storing it in the data warehouse 203 .
- Information that is stored in the data warehouse may include event or trap information, topology data, configuration data, network object data, performance data or any other data regarding computer systems management.
- the data sources may include management systems such as the SpectroSERVER available from Aprisma Management Technologies, Inc., which manages LANs, WANs, SNA networks, and other types of networks.
- Another data source may include the SPECTRUM SecureFast Flow Admission Server (FAS) and SecureFast VLAN manager which are Aprisma Management Technologies, Inc. management systems that manage Aprisma Management Technologies, Inc.'s SecureFast packet switches and cell switch networks.
- FAS SPECTRUM SecureFast Flow Admission Server
- SecureFast VLAN manager which are Aprisma Management Technologies, Inc. management systems that manage Aprisma Management Technologies, Inc.'s SecureFast packet switches and cell switch networks.
- Another data source may include Aprisma Management Technologies, Inc.'s SecureFast Virtual Remote Access management system (SF VRA) which provides information regarding remote access of users to a network.
- SF VRA SecureFast Virtual Remote Access management system
- other sources including BMC PATROL, Metric WinWatch, and Microsoft SMS discussed above may be sources or users of data.
- telecommunications management network (TMN) and their communication devices may also provide data to be stored in data warehouse 203 . It should be understood that many different sources of data may be used, and this list is not exhaustive or limiting.
- Data warehouse 203 may be thought of as a single physical database, or a single virtual database comprising individual physical databases distributed geographically throughout network 104 . Because data is stored in a single repository, it is now possible for applications 202 to access a larger set of data types than previously possible. For example, a networking accounting application can combine usage data from SPECTRUM, SecureFast FAS, SecureFast VRA and RMON network management systems. This capability allows the user to see usage for multiple network media types including traditional LAN, virtual LAN, ATM and remote access. Conventionally, an analysis of this type would require four views, or worse yet, four different applications to obtain information from the four different management systems. Unlike conventional systems, management system 210 provides a single source of information in data warehouse 203 .
- FIG. 4 depicts a layered view of a system providing information to data users from one or more data providers in accordance with one embodiment of the invention.
- each layer has specific responsibilities and may be constructed using object-oriented programming.
- Data user 402 is a consumer of data produced by data provider 410 .
- Data provider 410 may include one or more agents such as a pull or push agent discussed above with reference to FIGS. 2 and 3.
- Data providers 410 may provide statistical, event, model, and call record data.
- Data provider 410 may provide other types of data.
- Data user 402 may be, for example, an application 202 such as a capacity planning, billing, accounting application, or the like.
- Interface layers 403 and 409 provide an external interface to data users 402 and providers 410 , respectively.
- Interface layers 403 , 409 include, in an object-oriented environment, interface objects.
- An interface object represents an encapsulation of business concepts not specific to a particular application.
- data management system 210 provides interface objects for statistics, topology, and call records data, but, according to one embodiment, interface objects are not based on applications 202 .
- abstracting objects based on business concepts the complexity of system 210 is reduced. For example, a method which obtains call records could be used for both capacity planning and a billing application.
- interface objects manage the creation and deletion of business objects which encapsulate business rules for a given topic into a class structure.
- a business object called “topology” contains business rules for obtaining topology data from the data warehouse 203 , to include the structure of the data in the database, any error checking of the data, and any data dependency checking.
- interface objects may map client application requests to an appropriate business object within business object layers 404 , 408 that will perform the service.
- interface objects may perform error recovery functions in the event that a client's communication disconnects due to error, or catch exceptions “thrown” or generated by business objects and provide handling of exceptions and status messages to the calling client objects.
- client interface objects provide transaction management for each service they provide. If an exception occurs during the processing of a service, the interface object will ensure changes are rolled back prior to passing the exception to the calling client object.
- Interface objects may also utilize a security object to provide transaction-level security.
- Business object layers 404 , 408 may include two types of business objects, one which extracts data from the data warehouse and provides it to client applications, and another for exporting data.
- Business objects may be C++ objects which do not need interface object functionality for communicating with data users and data providers.
- Business objects extract data from the data warehouse, and include functional components which support different applications 202 .
- business objects may include objects providing statistical, landscape, and call record data in support of capacity planning and billing and accounting applications.
- Higher levels of business objects such as a decision support object may in turn rely on capacity planning and accounting information, which are subsequently reliant on underlying statistical, landscape and call record data.
- Statistical objects may provide the ability of client programs to obtain various sets of data associated with performance statistics associated with a customer or model.
- a statistics object may contain a method which, when invoked, obtains attributes and values for a given time period for one or more models. Further, statistical objects may obtain statistics for a given customer or user.
- Landscape objects may provide the ability for applications 202 to obtain information about a network domain and its entities. For example, methods in a landscape object may allow an application 202 to obtain all of the model types in a given category. Further, the object may support obtaining basic information for all landscapes in the data warehouse, which contain one or more model categories. A landscape object method may obtain data that allows a graphical rendering of a network topology of one or more domains. Also, a landscape object may support retrieving basic information on models within a landscape in the data warehouse.
- Call record data objects may provide the ability to provide call record data for a given customer. It should be understood that other object types could be used, and system 210 is not limited to the objects described above.
- Business objects may use standard C++ exception handling to handle exceptions, and may have the capability of catching exceptions that they are capable of handling, or allow the exception to be propagated to interface objects.
- interface objects pass exceptions to client applications 202 using Corba exception handling, which is well-known.
- Database access layers 405 , 407 contain object-oriented class structures which, in one embodiment, provide a vendor-independent database interface to business objects.
- Database access objects provide connection management functions such as connection and disconnection from data warehouse 203 , which is represented by a physical database 406 .
- Physical database 406 as discussed above, may be a commercially available database such as the ORACLE WAREHOUSE software system implemented as software executing on a computer system.
- Database access layers may by implemented by a commercially-available programming product such as Pro-C or Oracle Call Interface (OCI) available from the Oracle Corporation. It should be understood that other database interfaces may be used to allow business objects to access data in data warehouse 203 .
- the database access objects provide a wrapping function between a business object and a conventional interface of the data warehouse 203 .
- Such functions may include the set attributes, set tables, set clauses, submit query, and submit procedure functions as shown in FIG. 5 .
- the database access objects 501 map requests from business objects 502 into database actions to be performed on the data warehouse 203 .
- the set attributes function 503 set attributes for a particular database table.
- the set tables function 504 allows a user or process to specify a table upon which operations can be performed.
- the set clauses function 505 allows a user or process to create a search clause which specifies a search query.
- the submit query function 506 allows a user or process to submit a database query.
- the submit procedure function 507 allows a user or process to submit a query for batch processing.
- Data management system 210 may include a VLAN agent 602 which is an example of a push agent.
- Model agent 610 and Statistics and Event agent 607 are examples of polling agents.
- VLAN agent 602 is responsible for storing VLAN call record data in data warehouse 203 .
- VLAN agent 602 provides an interface object 603 which provides methods for placing data in data warehouse 203 .
- the VLAN agent calls methods on one or more database access objects 601 to store data in data warehouse 203 .
- Statistics and Events agent 607 is responsible for reading statistics and events data from a management system such as Aprisma Management Technologies, Inc.'s SpectroSERVER network management system.
- Polling agent 206 B will collect data from the management system specified by database policies 209 .
- Agent 206 B will perform data mapping, reduction and collation operations, and call methods of a database access objects 601 to store data in warehouse 203 .
- Dispatcher/collator 609 will control access to data on the network management system.
- Model agent 610 is responsible for reading landscape and topology data from a network manager such as a SpectroSERVER network management system.
- the model agent may use the well-known Spectrum API (SAPI) to access each SpectroSERVER.
- SAPI Spectrum API
- the model agent 610 collects data from the SpectroSERVER for a time period specified in the database policies 209 , and calls methods of database access objects to store data in warehouse 203 .
- agents 610 and 607 reside on a SpectroSERVER management system. Further, communication with agents 610 , 607 may be performed through CORBA interfaces 606 called through interface objects 604 , 605 , respectively.
- FIG. 7 shows one embodiment of a system using management systems from Aprisma Management Technologies, Inc.
- data management system 701 obtains information from data sources Spectrum SpectroSERVER 704 , VLAN Manager 705 , and RMON II network probe 706 systems.
- System 701 stores the information in a data warehouse 203 which is located on a data warehouse server 730 in network 104 (shown by arrow at right side of FIG. 7, with regard to network 104 of FIG. 1 ).
- System 701 utilizes database objects 707 to store information. These objects 707 may be, for example, provided as client software such as the Software Data Warehouse (SDW) client, available from Oracle, or a Structured Query Language (SQL) client available from Microsoft.
- SDW Software Data Warehouse
- SQL Structured Query Language
- System 701 includes SSAPI agent 720 which collects object data from SpectroSERVER 704 and VLAN Manager 705 using the SSAPI programming interface.
- IACS agent 721 collects events and statistics data from both SpectroSERVER 704 and VLAN Manager 705 systems.
- Topology Agent 722 collects information pertinent to determining topology from systems 704 , 705 .
- System 701 may also include an RMON II Agent 723 for collecting remote monitoring data from one or more RMON probes 706 .
- Purge Agent 724 may be a process, which periodically purges data from one or more databases. Agents 720 - 724 may be processes spawned in memory of a computer system by ImportService 718 which controls importing of data into data warehouse 203 . ImportService 718 imports data based on policies, which are managed by PolicySched 717 . PolicySched 717 reviews stored policies and triggers the collection of data by agents 720 - 724 . Data management system 701 also includes a scripting service such as Perl5 714 to issue command line scripts discussed in more detail below with respect to import of data. Further, system 701 includes CORBA osagent 725 and CORBA oad 726 which facilitate CORBA communications between system 701 and other CORBA-enabled systems as is known in the art.
- ImportService 718 which controls importing of data into data warehouse 203 .
- ImportService 718 imports data based on policies, which are managed by PolicySched 717 . PolicySched 717 reviews stored
- Web browser 708 may access a data server TA Data Server on a web server system 703 which controls access to data warehouse data through IoService 715 .
- Information may be served to web browser 708 by web server 709 in a standard manner using the well-known HTTP communication protocol.
- object data may be communicated using CORBA.
- Web server system 703 also includes a CORBA osagent 710 and scripting service Perl5 ( 713 ) to facilitate displaying data and the executing functions.
- FIG. 8 is a flow chart depicting the overall process 800 for importing data into data warehouse 203 .
- process 800 begins.
- data management system 210 verifies database information, such as a database version and layout of the database described by a database schema.
- system 210 spawns an agent process to collect information from data sources 207 - 208 according to database policies 209 (see FIG. 2 ).
- Database policies may be stored local to system 210 as well as in data warehouse 203 .
- system 210 constructs a list of policies to be executed on one or more data sources 207 - 208 .
- system 210 queries a database of data sources for data source information.
- This database of data sources may be stored in data warehouse 203 or in memory of system 210 .
- Data warehouse 203 may be maintained by a data warehouse server system 730 .
- System 210 queries the database for policies specified by the list of policies at step 806 .
- system 210 creates a final list of database policies to be executed by merging a local list of policies with that stored in database 203 .
- the database policies are executed by one or more agents 205 , 206 , and information is collected from data sources 207 - 208 .
- process 800 ends.
- Data management system 701 performs software/schema version check by:
- SSAPI Agent 720 is started with a list of policy IDs that are models imports to complete.
- a query is issued to the database (cs_agent_name) of data warehouse 203 to retrieve export_type (the type of data source), agent_name (the machine name of the data source), and exec_constraint (the constraints for querying the data source).
- a query is issued to a database of policy (cs_export_policy) to retrieve the list of policies specified on the command line.
- Each of the policies are executed in an order, such as in serial order.
- SSAPI agent 720 connects and sends a log message to IoService 715 indicating that the import has started.
- IoService 715 performs a single insert into cs_log_message to save the log message.
- a list of subimports is constructed (relation, model, model_type, attribute, association) corresponding to subgroups of information to be stored in warehouse 203 .
- the agent 720 connects and sends a log message to IoService 715 indicating that the import has completed.
- IoService 715 performs a single insert into cs_log message.
- b Run a script called load_dim.sql to rebuild/update tables storing information regarding links and attributes of the network entities: cs_attribute_dimension, cs_generic_attribute, cs_attr_genattr_link, cs_mt_category_link, cs_model_dimension, cs_Category_genattr_link.
- VL Map a mapping called VL Map from the SpectroSERVER 704 to obtain the landscape handle of the server which is used to uniquely identify the landscape.
- SDW DATABASE: create model in SDW (i.e. insert new CS_Model row with new SDW model key and info just read via SSAPI); model_handle newly created SDW model key; ⁇ ⁇ SDW DATABASE: unlock CS_Model; ⁇
- model type is not in the database then add it to a list
- a query is issued to the database (cs_agent_name) to retrieve the import agent data.
- a query is issued to the data warehouse database (cs_export_policy) to retrieve the policy specified on the command line.
- IoService performs a single insert into cs_log_message.
- the agent connects and sends a log message to IoService indicating that the import has completed:
- IoService performs a single insert into cs_log_message.
- SDW DATABASE: create model in SDW (i.e. insert new CS_Model row with new SDW model key and info just read via SSAPI); model_handle newly created SDW model key; ⁇ ⁇ SDW DATABASE: unlock CS_Model; ⁇ return model_handle; exit; 10.
- SDW DATABASE call stored procedure CS_SDW_UPDATE_STAT, which processes the data just inserted into the work table:
- FIG. 9 is a representation of a graphical user interface for managing policies.
- FIG. 9 shows a user interface screen 901 for allowing a network administrator to create policies for importing data into data warehouse 203 .
- Interface 901 allows an administrator to specify a data source 902 , which, in accordance with one embodiment, is a network management server such as a SpectroSERVER network management system.
- Interface 901 also allows an administrator to specify a machine name 903 which identifies the network management system's logical name.
- a timezone 904 for the management server may be specified such that data may be collected at a specified time at the management system.
- Machine port 905 allows the administrator to specify a port of the management server through which data will be transmitted.
- Data type 906 field allows an administrator to specify what types of data will be collected from the management system. Interface 901 also allows an administrator to specify a frequency schedule at which data will be transferred to data warehouse 203 . By selecting button 909 , an administrator may save the policy information in database policies 209 (see FIG. 2 ).
- FIG. 10 is a representation of a graphical user interface for listing information regarding created policies. Specifically, FIG. 10 shows a user interface screen 1001 that accepts input and displays information to an administrator regarding policies in database policies 209 .
- Warehouse location 1002 indicates for which data warehouse the created policies apply.
- Data source 1003 indicates the data source from which the data is obtained.
- Data type 1004 indicates a type of data that is collected from the management system.
- Machine 1005 indicates a machine name 903 which identifies the network management system's logical name.
- Last status 1006 indicates the last status of a policy that was executed by data management system 210 . Status 1006 may indicate, for example, whether the execution was successful, is currently in progress, or is currently in an idle or sleep mode.
- Enabled status 1007 indicates whether the policy is enabled (policies can be enabled or disabled by the administrator).
- Field 1008 indicates when the next execution of the policy will occur.
- FIG. 11 is a representation of a graphical user interface for listing history information regarding created policies.
- interface 1101 shows a policy history to an administrator. History information may be stored by data management system 210 in its own database or within data warehouse 203 .
- Field 1102 shows the last status of a policy execution, whereby system 210 could indicate whether or not the execution of the policy was successful or an error occurred.
- Field 1103 indicates the last failure of the policy execution.
- Field 1104 indicates the last time the policy successfully completed an execution.
- Interface 1101 lists, in a table or other type of indication to the user, a list of history items corresponding to actions regarding a particular policy.
- Field time 1105 indicates the time at which the history entry occurred.
- Message type 1106 indicates the type of message entered in the history list. Message type 1106 may indicate whether the message was a fatal error, merely informational, or other information associated with a corresponding list entry.
- Message field 1107 indicates an action performed by system 210 , an error encountered, or other information related
- FIG. 12 is a representation of a graphical user interface for configuring network monitoring.
- a graphical user interface may be provided to an administrator for configuring network monitoring on one or more management systems such as a SecureFast VLAN or Flow Admission Server (FAS), and SecureFast Virtual Remote Access (VRA) to provide information for an application 202 such as capacity planning and monitoring.
- View 1202 shows the landscapes available to be monitored.
- Selected field 1203 indicates one or more landscapes that may be selected.
- Handle 1204 indicates a database handle of the landscape such that the landscape may be located in data warehouse 203 .
- Name field 1205 indicates a logical name of a landscape.
- Description field 1206 indicates a description of the landscape. The description may describe attributes of the landscape network, such as the size, number of users, types of network media, and the like.
- FIG. 13 is a representation of a graphical user interface for configuring a network accounting report.
- an administrator may wish to obtain graphical reports regarding a high-level application, such as network accounting or capacity management.
- interface 1301 is presented to an administrator for defining a network accounting report.
- Data warehouse 203 is accessed based upon report parameters supplied in interface 1301 .
- Accounting may be performed based on a specified time period, data sources, group of sources, or parameters such as cost or bytes.
- a graphical or textual type report may be produced based on the report parameters provided in area 1305 .
- FIG. 14 is a representation of a graphical user interface for configuring a network link report.
- information stored from various data sources may be accessed by an application 202 .
- information may be collected from multiple network domains by multiple network management systems. This information may be consolidated or combined in data warehouse 203 .
- Interface 1401 accepts parameters from a user to present to the user utilization statistics based on links in the network.
- system 203 may show a graph 1402 to an administrator to show the percent utilization for links of systems based on a specified time period.
- the graph 1402 may be based on the number of bytes, packets, or other parameter used to show capacity of a communication link.
- graphical user interfaces described above are merely examples of presenting data to an administrator, and the invention is not limited to the embodiments described herein.
- Other interfaces may be used, including terminal-based interfaces, X-window interfaces, those available through operating systems such as Windows 98, Windows 2000, and Windows NT, and the like.
Abstract
Description
if (spectrum_model_handle = last one encountered) |
{ |
model_handle = last one determined; |
} |
else |
{ |
SDW DATABASE: lock CS_Model to all other updates; |
SDW DATABASE: search for CS_Model entry with given Spectrum |
model handle, |
either active, or inactive with time_stamp within model start/end times |
if (Spectrum model matches an inactive entry in SDW) |
{ |
model is inactive - model_handle = existing SDW model key |
} |
else -- Spectrum model not found in SDW, or an active match is found |
{ |
SPECTRUM: get model data from SpectroSERVER via a SSAPI call; |
if (model is in SDW and is active) |
{ |
if (model is not in SPECTRUM or |
(model is in SPECTRUM but differs from that in SDW, |
i.e. different model type or creation time)) |
{ |
SDW DATABASE: deactivate model in SDW |
(i.e. update end_time_key = now); |
} |
} |
if (no active model in SDW and present in SPECTRUM) |
{ |
SDW DATABASE: create model in SDW |
(i.e. insert new CS_Model row with new SDW model key |
and info just read via SSAPI); |
model_handle = newly created SDW model key; |
} |
} |
SDW DATABASE: unlock CS_Model; |
} |
Section: main |
Entry point |
------------------------------------------------------------------- |
SDW DATABASE: check software, database schema versions; |
if (version mismatch) |
{ |
exit with error; |
} |
define policy for import; |
processPolicy(policy); |
exit; |
------------------------------------------------------------------- |
Section: processPolicy(policy) |
Process an events import policy |
------------------------------------------------------------------- |
SDW DATABASE: update status in CS_Export_Policy to RUNNING; |
SDW DATABASE: write “Import Policy Triggered” log message |
SDW DATABASE: connect to SDW database |
SDW DATABASE: check for initial run condition |
SDW DATABASE: disconnect from SDW database |
if (this is an initial import run) |
{ |
SDW DATABASE: drop all indexes (4) from CS_Event; |
} |
performImport(policy); |
if (this is an initial import run) |
{ |
SDW DATABASE: create all indexes for CS_Event; |
} |
SDW DATABASE: update status in CS_Export_Policy to SLEEPING or ERROR; |
SDW DATABASE: write “Import Policy Completed” log message |
exit; |
------------------------------------------------------------------- |
Section: performImport(policy) |
Perform the import |
------------------------------------------------------------------- |
SDW DATABASE: update start time in CS_Export_Policy to current time; |
SPECTRUM: connect to SpectroSERVER, using machine/port defined with policy; |
get landscape handle from SpectroSERVER; |
disconnect from SpectroSERVER; |
determine time range for import; |
for (each period (1 day or shorter) in time range) |
{ |
start = start time of period; |
end = end time of period; |
importEvents(landscape_handle, start, end); |
SDW DATABASE: update cutoff time in CS_Export_Policy = end; |
} |
exit; |
------------------------------------------------------------------- |
Section: importEvents(landscape_handle, start, end) |
Import events from landscape for given period |
------------------------------------------------------------------- |
SPECTRUM: get events from landscape for time period (start, end), using |
the form of CsDataDispatcherCollator::request_events() which requests |
all events for all models in the given landscape. Results are written into |
temp files stored in the working directory ./; |
SDW DATABASE: connect to SDW database (connection for import operations) |
for (each group of 1000 or less events extracted from temp files) |
{ |
event_list = list of events; |
SDW DATABASE: loadDatabase(event_list); -- Insert events into database |
} |
if (any events remain in event_list) |
{ |
SDW DATABASE: loadDatabase(event_list); -- Insert events into database |
} |
SDW DATABASE: disconnect from SDW database |
exit; |
------------------------------------------------------------------- |
Section: loadDatabase(event_list) |
Write events data to SDW database |
------------------------------------------------------------------- |
initialize array of event rows to be inserted into database; |
for (each event in event_list) |
{ |
spectrum_model_handle - Spectrum model handle from event data; |
time_stamp = time stamp from event data; |
SDW DATABASE: model_handle mapToSDWModel(spectrum_model_handle, |
time_stamp); |
-- (map SPECTRUM model to internal SDW model) |
construct new event row, add to event array; |
} |
SDW DATABASE: insert array into event table CS_Event, using |
Oracle array insert (one insert command sent with array of row values, |
normally of size 1000); |
SDW DATABASE: commit the transaction; |
exit; |
------------------------------------------------------------------- |
Section: mapToSDWModel(spectrum_model_handle, time_stamp) |
Map spectrum_model_handle to internal SDW model_handle |
------------------------------------------------------------------- |
if (spectrum_model_handle = last one encountered) |
{ |
model_handle = last one determined; |
} |
else |
{ |
SDW DATABASE: lock CS_Model to all other updates; |
SDW DATABASE: search for CS_Model entry with given Spectrum model handle, |
either active, or inactive with time_stamp within model start/end times |
if (Spectrum model matches an inactive entry in SDW) |
{ |
model is inactive - model_handle = existing SDW model key |
} |
else -- Spectrum model not found in SDW, or an active match is found |
{ |
SPECTRUM: get model data from SpectroSERVER via a SSAPI call; |
if (model is in SDW and is active) |
{ |
if (model is not in SPECTRUM or |
(model is in SPECTRUM but differs from that in SDW, |
i.e. different model type or creation time)) |
{ |
SDW DATABASE: deactivate model in SDW |
(i.e. update end_time key = now); |
} |
} |
if (no active model in SDW and present in SPECTRUM) |
{ |
SDW DATABASE: create model in SDW |
(i.e. insert new CS_Model row with new SDW model key |
and info just read via SSAPI); |
model_handle = newly created SDW model key; |
} |
} |
SDW DATABASE: unlock CS_Model; |
} |
return model_handle; |
exit; |
10. IACSAgent Logic Flow (Statistics Import) |
Section: main |
Entry point |
------------------------------------------------------------------- |
SDW DATABASE: check software, database schema versions; |
if (version mismatch) |
{ |
exit with error; |
} |
define policy for import; |
processPolicy(policy); |
exit; |
------------------------------------------------------------------- |
Section: processPolicy(policy) |
Process a statistics import policy |
------------------------------------------------------------------- |
SDW DATABASE: update status in CS_Export_Policy to RUNNING; |
SDW DATABASE: write “Import Policy Triggered” log message |
SDW DATABASE: connect to SDW database |
SDW DATABASE: check for initial run condition |
SDW DATABASE: disconnect from SDW database |
if (this is an initial import run) |
{ |
SDW DATABASE: drop time key index for CS_Statistic; |
} |
performImport(policy); |
if (this is an initial import run) |
{ |
SDW DATABASE: create time key index for CS_Statistic; |
} |
SDW DATABASE: update status in CS_Export_Policy to SLEEPING or ERROR; |
SDW DATABASE: write “Import Policy Completed” log message |
exit; |
------------------------------------------------------------------- |
Section: performImport(policy) |
Perform the import |
------------------------------------------------------------------- |
SDW DATABASE: update start time in CS Export Policy to current time; |
SPECTRUM: connect to SpectroSERVER, using machine/port defined with policy; |
get landscape handle from SpectroSERVER; |
disconnect from SpectroSERVER; |
SDW DATABASE: connect to SDW database; |
SDW DATABASE: get aggregation period (normally 3600) from CS_Parameter; |
SDW DATABASE: disconnect from SDW database; |
determine time range for import; |
for (each period (1 day or shorter) in time range) |
{ |
start = start time of period; |
end = end time of period; |
importStatistics(landscape_handle, start, end); |
SDW DATABASE: update cutoff time in CS_Export_Policy = end; |
} |
exit; |
------------------------------------------------------------------- |
Section: importStatistics(landscape_handle, start, end) |
Import statistics from landscape for given period |
------------------------------------------------------------------- |
SPECTRUM: get compressed statistics for all logged attributes in landscape, |
for time period (start, end), using the form of |
CsDataDispatcherCollator::request_data() which requests all statistics |
for all models in a given landscape logged within the given time range. |
Results are written into temp files stored in the working directory ./; |
SDW DATABASE: connect to SDW database (connection for import operations) |
for (each model/attribute returned from DAS) |
{ |
spectrum_model_handle = Spectrum model handle from returned data; |
time_stamp = first time value from returned data; |
SDW DATABASE: model_handle = mapToSDWModel(spectrum_model_handle, |
time_stamp); |
-- (map SPECTRUM model to internal SDW model) |
data_list = uncompressed time/value list for model/attribute; |
prepare aggregation_list: scan data_list calculating base level (1 hour) |
statistic entries for insertion into database; |
if (number of aggregation_list entries >= 1000) |
{ |
SDW DATABASE: loadDatabase(aggregation_list); -- Transfer to database |
} |
} |
if (aggregation_list not empty) |
{ |
SDW DATABASE: loadDatabase(aggregation_list); -- Transfer to database |
} |
SDW DATABASE: disconnect from SDW database |
exit; |
------------------------------------------------------------------- |
Section: mapToSDWModel(spectrum_model_handle, time_stamp) |
Map spectrum_model_handle to internal SDW model_handle |
------------------------------------------------------------------- |
if (spectrum_model_handle = last one encountered) |
{ |
model_handle = last one determined; |
} |
else |
{ |
SDW DATABASE: lock CS_Model to all other updates; |
SDW DATABASE: search for CS_Model entry with given Spectrum model handle, |
either active, or inactive with time stamp within model start/end times |
if (Spectrum model matches an inactive entry in SDW) |
{ |
model is inactive - model_handle = existing SDW model key |
} |
else -- Spectrum model not found in SDW, or an active match is found |
{ |
SPECTRUM: get model data from SpectroSERVER via a SSAPI call; |
if (model is in SDW and is active) |
{ |
if (model is not in SPECTRUM or |
(model is in SPECTRUM but differs from that in SDW, |
i.e. different model type or creation time)) |
{ |
SDW DATABASE: deactivate model in SDW |
(i.e. update end_time_key = now); |
} |
} |
if (no active model in SDW and present in SPECTRUM) |
{ |
SDW DATABASE: create model in SDW |
(i.e. insert new CS_Model row with new SDW model key |
and info just read via SSAPI); |
model_handle = newly created SDW model key; |
} |
} |
SDW DATABASE: unlock CS_Model; |
} |
return model_handle; |
exit; |
------------------------------------------------------------------- |
Section: loadDatabase(aggregation_list) |
Write statistics data to SDW database |
------------------------------------------------------------------- |
Claims (28)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/386,571 US6651062B2 (en) | 1998-08-31 | 1999-08-31 | Method and apparatus for managing data for use by data applications |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US9857698P | 1998-08-31 | 1998-08-31 | |
US09/386,571 US6651062B2 (en) | 1998-08-31 | 1999-08-31 | Method and apparatus for managing data for use by data applications |
Publications (2)
Publication Number | Publication Date |
---|---|
US20020188584A1 US20020188584A1 (en) | 2002-12-12 |
US6651062B2 true US6651062B2 (en) | 2003-11-18 |
Family
ID=22269945
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/386,571 Expired - Lifetime US6651062B2 (en) | 1998-08-31 | 1999-08-31 | Method and apparatus for managing data for use by data applications |
Country Status (5)
Country | Link |
---|---|
US (1) | US6651062B2 (en) |
EP (1) | EP1116138A1 (en) |
AU (1) | AU5797599A (en) |
CA (1) | CA2342241A1 (en) |
WO (1) | WO2000013112A1 (en) |
Cited By (64)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020026433A1 (en) * | 2000-04-05 | 2002-02-28 | Kuiper Wilko Juurt Jan | Knowledge system and methods of business alerting and business analysis |
US20020174417A1 (en) * | 2001-03-30 | 2002-11-21 | Michael Sijacic | Defining and creating custom data fields within process management software |
US20020178159A1 (en) * | 2001-02-06 | 2002-11-28 | O'brien Christopher | Data mining system, method and apparatus for industrial applications |
US20020184355A1 (en) * | 2001-06-04 | 2002-12-05 | Deats Kevin A. | Method and system for reporting event data to requesting subscribers |
US20030078943A1 (en) * | 2001-10-19 | 2003-04-24 | Mcgeorge Vernon E. | Conduits for multiple data sources |
US20030093429A1 (en) * | 2001-11-12 | 2003-05-15 | Hitachi, Inc. | Data warehouse system |
US20030140137A1 (en) * | 2001-12-21 | 2003-07-24 | Networks Associates Technology, Inc | Enterprise Network analyzer architecture framework |
US20040041838A1 (en) * | 2002-09-04 | 2004-03-04 | Adusumilli Venkata J.R.B. | Method and system for graphing data |
US6789117B1 (en) * | 2001-12-21 | 2004-09-07 | Networks Associates Technology, Inc. | Enterprise network analyzer host controller/agent interface system and method |
US20040215584A1 (en) * | 2003-04-24 | 2004-10-28 | International Business Machines Corporation | Scheduling for data warehouse ETL processing and data mining execution |
US20040225726A1 (en) * | 2000-04-28 | 2004-11-11 | Deluca Steve A. | System and method for implementing a user interface in a client management tool |
US20050005011A1 (en) * | 2000-04-28 | 2005-01-06 | Microsoft Corporation | System and method for implementing integrated polling functions in a client management tool |
US20050033765A1 (en) * | 2000-04-28 | 2005-02-10 | Microsoft Corporation | System and method for caching data in a client management tool |
US6895586B1 (en) | 2000-08-30 | 2005-05-17 | Bmc Software | Enterprise management system and method which includes a common enterprise-wide namespace and prototype-based hierarchical inheritance |
US20050138150A1 (en) * | 2003-07-11 | 2005-06-23 | Computer Associates Think, Inc. | System and method for graphically presenting change and configuration management information |
US20050192975A1 (en) * | 2004-02-12 | 2005-09-01 | Interdigital Technology Corporation | Resource management system for electronic devices |
US20050256896A1 (en) * | 2004-05-11 | 2005-11-17 | Wolfgang Pfeifer | Local data repository generation |
US20050265083A1 (en) * | 1999-08-06 | 2005-12-01 | Elcommerce.Com.Inc. | Method and system for monitoring a supply-chain |
US20050271047A1 (en) * | 2004-06-02 | 2005-12-08 | Huonder Russell J | Method and system for managing multiple overlapping address domains |
US20050289171A1 (en) * | 2000-04-28 | 2005-12-29 | Microsoft Corporation | System and method for managing database files in a client management tool |
US20060004821A1 (en) * | 2004-05-21 | 2006-01-05 | Sapan Bhasker | Method and system for web-based enterprise change and configuration management reports |
US6996510B1 (en) * | 2000-01-21 | 2006-02-07 | Metasolv Software, Inc. | System and method for modeling communication networks |
US20060155849A1 (en) * | 2000-04-28 | 2006-07-13 | Microsoft Corporation | System and method for implementing polling agents in a client management tool |
US20060168187A1 (en) * | 2000-04-28 | 2006-07-27 | Microsoft Corporation | System and method for archiving within a client management tool |
US20060218157A1 (en) * | 2005-03-22 | 2006-09-28 | Microsoft Corporation | Dynamic cube services |
US7151966B1 (en) | 2002-06-04 | 2006-12-19 | Rockwell Automation Technologies, Inc. | System and methodology providing open interface and distributed processing in an industrial controller environment |
US7154857B1 (en) | 2001-12-21 | 2006-12-26 | Mcafee, Inc. | Enterprise network analyzer zone controller system and method |
US20070055769A1 (en) * | 2005-09-07 | 2007-03-08 | Martin Kolb | Systems and methods for smart client remote data monitoring |
US20070055972A1 (en) * | 2005-08-24 | 2007-03-08 | International Business Machines Corporation | Model-driven software deployment in an application server |
US20070226389A1 (en) * | 2002-09-30 | 2007-09-27 | Electronic Data Systems, A Delaware Corporation | Generation of computer resource utilization data per computer application |
US20070255774A1 (en) * | 2006-04-28 | 2007-11-01 | Sap Ag | Method and system for detecting memory leaks and copying garbage collection files |
US20070255773A1 (en) * | 2006-04-28 | 2007-11-01 | Sap Ag | Method and system for inspecting memory leaks and analyzing contents of garbage collection files |
US20070255775A1 (en) * | 2006-04-28 | 2007-11-01 | Sap Ag | Method and system for inspecting memory leaks |
US7330473B1 (en) | 2002-04-12 | 2008-02-12 | Rockwell Automation Technologies, Inc. | System and methodology providing network data exchange between industrial control components |
US20080133029A1 (en) * | 2004-11-09 | 2008-06-05 | Thomas Heimke | Method For Interlinking Technical Data And System For Operating And Observing An Industrial Plant |
US7437446B2 (en) | 2002-09-30 | 2008-10-14 | Electronic Data Systems Corporation | Reporting of abnormal computer resource utilization data |
US20090013318A1 (en) * | 2002-09-12 | 2009-01-08 | Harry Aderton | System and method for updating network computer systems |
US7512906B1 (en) | 2002-06-04 | 2009-03-31 | Rockwell Automation Technologies, Inc. | System and methodology providing adaptive interface in an industrial controller environment |
US7523180B1 (en) | 2000-04-28 | 2009-04-21 | Microsoft Corporation | System and method for service chain management in a client management tool |
US7539724B1 (en) | 2002-06-04 | 2009-05-26 | Rockwell Automation Technologies, Inc. | Instant messaging for event notification and exchanging data in an industrial controller environment |
US20090222484A1 (en) * | 2008-02-28 | 2009-09-03 | Nordhielm Bradley D | Method and system for reviewing business activity of a business entity |
US7606890B1 (en) * | 2002-06-04 | 2009-10-20 | Rockwell Automation Technologies, Inc. | System and methodology providing namespace and protocol management in an industrial controller environment |
US20100106747A1 (en) * | 2008-10-23 | 2010-04-29 | Benjamin Honzal | Dynamically building and populating data marts with data stored in repositories |
US20100179957A1 (en) * | 2009-01-09 | 2010-07-15 | Linkage Technology Group Co., Ltd. | Polling Method of Switch Status Based on Timer-triggered Scheduler of Stored Procedures |
US7865461B1 (en) | 2005-08-30 | 2011-01-04 | At&T Intellectual Property Ii, L.P. | System and method for cleansing enterprise data |
US20120117109A1 (en) * | 2009-06-02 | 2012-05-10 | Nokia Siemens Networks Oy | Network element integration |
US8296412B2 (en) | 2000-01-03 | 2012-10-23 | International Business Machines Corporation | Method and system for event impact analysis |
US20130232114A1 (en) * | 2012-01-31 | 2013-09-05 | Yahoo! Inc. | Probe System For Replication Monitoring |
US9182946B2 (en) | 2013-03-15 | 2015-11-10 | Russell Sellers | Method of generating a computer architecture representation in a reusable syntax and grammar |
US9363336B2 (en) | 2012-02-09 | 2016-06-07 | Rockwell Automation Technologies, Inc. | Smart device for industrial automation |
US9438648B2 (en) | 2013-05-09 | 2016-09-06 | Rockwell Automation Technologies, Inc. | Industrial data analytics in a cloud platform |
US9477936B2 (en) | 2012-02-09 | 2016-10-25 | Rockwell Automation Technologies, Inc. | Cloud-based operator interface for industrial automation |
US9483477B2 (en) | 2015-01-19 | 2016-11-01 | Sas Institute Inc. | Automated data intake system |
US9703902B2 (en) | 2013-05-09 | 2017-07-11 | Rockwell Automation Technologies, Inc. | Using cloud-based data for industrial simulation |
US9709978B2 (en) | 2013-05-09 | 2017-07-18 | Rockwell Automation Technologies, Inc. | Using cloud-based data for virtualization of an industrial automation environment with information overlays |
US9786197B2 (en) | 2013-05-09 | 2017-10-10 | Rockwell Automation Technologies, Inc. | Using cloud-based data to facilitate enhancing performance in connection with an industrial automation system |
US9942196B2 (en) | 2014-05-01 | 2018-04-10 | The Johns Hopkins University | Canonical network isolator component |
US9989958B2 (en) | 2013-05-09 | 2018-06-05 | Rockwell Automation Technologies, Inc. | Using cloud-based data for virtualization of an industrial automation environment |
US10026049B2 (en) | 2013-05-09 | 2018-07-17 | Rockwell Automation Technologies, Inc. | Risk assessment for industrial systems using big data |
US10496061B2 (en) | 2015-03-16 | 2019-12-03 | Rockwell Automation Technologies, Inc. | Modeling of an industrial automation environment in the cloud |
US10831410B2 (en) | 2016-10-19 | 2020-11-10 | International Business Machines Corporation | Managing maintenance of tape storage systems |
US11042131B2 (en) | 2015-03-16 | 2021-06-22 | Rockwell Automation Technologies, Inc. | Backup of an industrial automation plant in the cloud |
US11243505B2 (en) | 2015-03-16 | 2022-02-08 | Rockwell Automation Technologies, Inc. | Cloud-based analytics for industrial automation |
US11513477B2 (en) | 2015-03-16 | 2022-11-29 | Rockwell Automation Technologies, Inc. | Cloud-based industrial controller |
Families Citing this family (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB2343763B (en) | 1998-09-04 | 2003-05-21 | Shell Services Internat Ltd | Data processing system |
US6522875B1 (en) | 1998-11-17 | 2003-02-18 | Eric Morgan Dowling | Geographical web browser, methods, apparatus and systems |
IES20000466A2 (en) | 1999-08-03 | 2001-03-21 | Performix Res Ltd | A performance management system |
US8074256B2 (en) | 2000-01-07 | 2011-12-06 | Mcafee, Inc. | Pdstudio design system and method |
AU2001227862A1 (en) * | 2000-01-13 | 2001-07-24 | Stanley Benjamin Smith | Process and system for gathering and handling information |
WO2001084385A1 (en) * | 2000-05-01 | 2001-11-08 | Telefonaktiebolaget Lm Ericsson (Publ) | A telecommunication data warehouse arrangement |
US20020093527A1 (en) * | 2000-06-16 | 2002-07-18 | Sherlock Kieran G. | User interface for a security policy system and method |
US7917647B2 (en) | 2000-06-16 | 2011-03-29 | Mcafee, Inc. | Method and apparatus for rate limiting |
US7167842B1 (en) * | 2000-06-27 | 2007-01-23 | Ncr Corp. | Architecture and method for operational privacy in business services |
US6785666B1 (en) | 2000-07-11 | 2004-08-31 | Revenue Science, Inc. | Method and system for parsing navigation information |
AU2001280534A1 (en) * | 2000-07-13 | 2002-01-30 | Aprisma Management Technologies, Inc. | Method and apparatus for a comprehensive network management system |
AUPQ968100A0 (en) * | 2000-08-25 | 2000-09-21 | Telstra Corporation Limited | A management system |
AU2000274418A1 (en) * | 2000-09-29 | 2002-04-15 | Performix Research Limited | Integration of data processing systems |
JP2002140404A (en) * | 2000-11-02 | 2002-05-17 | Hitachi Ltd | Data base integration processing method and device for executing the same and recording medium with its processing program recorded |
US20030033346A1 (en) * | 2001-08-10 | 2003-02-13 | Sun Microsystems, Inc. | Method, system, and program for managing multiple resources in a system |
WO2003040890A2 (en) * | 2001-11-09 | 2003-05-15 | Sun Microsystems, Inc. | Method, system, and program for rendering a visualization of network devices |
US20030236764A1 (en) * | 2002-06-19 | 2003-12-25 | Lev Shur | Data architecture to support shared data resources among applications |
DE10253385A1 (en) * | 2002-11-15 | 2004-06-03 | Siemens Ag | Device for providing access to data |
US7703018B2 (en) * | 2003-05-22 | 2010-04-20 | International Business Machines Corporation | Apparatus and method for automating the diagramming of virtual local area networks |
GB2411018A (en) * | 2004-02-16 | 2005-08-17 | Haller Technology Ltd | System for accessing data held in a plurality of storage locations |
US7283993B2 (en) * | 2004-04-29 | 2007-10-16 | International Business Machines Corporation | Methods, systems, and media for handling errors in script files |
US10733666B1 (en) | 2005-06-30 | 2020-08-04 | Sun Microsystems Inc. | System and method for defining a privacy zone within a network |
DE102006021543A1 (en) * | 2006-05-08 | 2007-11-15 | Abb Technology Ag | System and method for the automated acceptance and evaluation of the quality of mass data of a technical process or a technical project |
US20100057678A1 (en) * | 2008-08-28 | 2010-03-04 | Gene Fein | Import/export modeling system |
KR20120135809A (en) * | 2011-06-07 | 2012-12-17 | 삼성전자주식회사 | Accounting apparatus, image forming device and accounting methods thereof |
US8510807B1 (en) | 2011-08-16 | 2013-08-13 | Edgecast Networks, Inc. | Real-time granular statistical reporting for distributed platforms |
US10546057B2 (en) * | 2011-10-28 | 2020-01-28 | Microsoft Technology Licensing, Llc | Spreadsheet program-based data classification for source target mapping |
US9411616B2 (en) * | 2011-12-09 | 2016-08-09 | Ca, Inc. | Classloader/instrumentation approach for invoking non-bound libraries |
US11615157B2 (en) | 2020-09-29 | 2023-03-28 | Oxylabs, Uab | Optimizing scraping requests through browsing profiles |
US11729057B1 (en) | 2022-02-07 | 2023-08-15 | The Bank Of New York Mellon | Application architecture drift detection system |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5752246A (en) * | 1995-06-07 | 1998-05-12 | International Business Machines Corporation | Service agent for fulfilling requests of a web browser |
US5790789A (en) * | 1996-08-02 | 1998-08-04 | Suarez; Larry | Method and architecture for the creation, control and deployment of services within a distributed computer environment |
US5995973A (en) * | 1997-08-29 | 1999-11-30 | International Business Machines Corporation | Storing relationship tables identifying object relationships |
US6058394A (en) * | 1997-08-29 | 2000-05-02 | International Business Machines Corporation | Manager server selects an agent server to execute query based on availability of the server connections to data source and target |
US6061724A (en) * | 1997-01-29 | 2000-05-09 | Infovista Sa | Modelling process for an information system, in particular with a view to measuring performance and monitoring the quality of service, and a measurement and monitoring system implementing this process |
US6067542A (en) * | 1995-10-20 | 2000-05-23 | Ncr Corporation | Pragma facility and SQL3 extension for optimal parallel UDF execution |
US6167405A (en) * | 1998-04-27 | 2000-12-26 | Bull Hn Information Systems Inc. | Method and apparatus for automatically populating a data warehouse system |
US6308174B1 (en) * | 1998-05-05 | 2001-10-23 | Nortel Networks Limited | Method and apparatus for managing a communications network by storing management information about two or more configuration states of the network |
-
1999
- 1999-08-31 EP EP99945366A patent/EP1116138A1/en not_active Withdrawn
- 1999-08-31 AU AU57975/99A patent/AU5797599A/en not_active Abandoned
- 1999-08-31 CA CA002342241A patent/CA2342241A1/en not_active Abandoned
- 1999-08-31 WO PCT/US1999/019963 patent/WO2000013112A1/en not_active Application Discontinuation
- 1999-08-31 US US09/386,571 patent/US6651062B2/en not_active Expired - Lifetime
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5752246A (en) * | 1995-06-07 | 1998-05-12 | International Business Machines Corporation | Service agent for fulfilling requests of a web browser |
US6067542A (en) * | 1995-10-20 | 2000-05-23 | Ncr Corporation | Pragma facility and SQL3 extension for optimal parallel UDF execution |
US5790789A (en) * | 1996-08-02 | 1998-08-04 | Suarez; Larry | Method and architecture for the creation, control and deployment of services within a distributed computer environment |
US6061724A (en) * | 1997-01-29 | 2000-05-09 | Infovista Sa | Modelling process for an information system, in particular with a view to measuring performance and monitoring the quality of service, and a measurement and monitoring system implementing this process |
US5995973A (en) * | 1997-08-29 | 1999-11-30 | International Business Machines Corporation | Storing relationship tables identifying object relationships |
US6058394A (en) * | 1997-08-29 | 2000-05-02 | International Business Machines Corporation | Manager server selects an agent server to execute query based on availability of the server connections to data source and target |
US6167405A (en) * | 1998-04-27 | 2000-12-26 | Bull Hn Information Systems Inc. | Method and apparatus for automatically populating a data warehouse system |
US6308174B1 (en) * | 1998-05-05 | 2001-10-23 | Nortel Networks Limited | Method and apparatus for managing a communications network by storing management information about two or more configuration states of the network |
Non-Patent Citations (4)
Title |
---|
C. Bontempo et al., "The IBM Data Warehouse Architecture", Communications of the Association For Computing Machinery, U.S. Association For Computing Machinery, New York, vol. 41, No. 9, Sep. 1998 (1998-09), pp. 38-51 (XP000791963). |
M.H. Derbyshire, "An Architecture For A Business Data Warehouse," The ICL Systems Journal, GB, International Computers Limited, vol. 11, No. 1, May 1996 (1996-05), pp. 23-47 (XP000631249). |
R. Conine, "The Data Warehouse In The Telecommunications Industry," Noms 98, 1998 IEEE Network Operations and Management Symposium, Conference Proceedings (CAT. No. 98CH36158), Noms 98, 1998 IEEE Network Operations and Management Symposium, New Orleans, LA, USA, Feb. 15-20, 1998, pp. 205-209, vol. 1 (XP000799773). |
V.J. Anand et al., "Data Warehouse Architecture For DSS Applications," Avis. Australian Journal of Information Systems, AU, Wollongong, vol. 4, No. 1, Sep. 1996 (1996-09), pp. 43-53 (XP002074805). |
Cited By (116)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090164599A1 (en) * | 1999-08-06 | 2009-06-25 | Perry Brian M | Method and System for Monitoring a Supply-Chain |
US20050265083A1 (en) * | 1999-08-06 | 2005-12-01 | Elcommerce.Com.Inc. | Method and system for monitoring a supply-chain |
US20090150663A1 (en) * | 1999-08-06 | 2009-06-11 | Elcommerce.Com Incorporated | Method And System For Monitoring A Supply-Chain |
US8296412B2 (en) | 2000-01-03 | 2012-10-23 | International Business Machines Corporation | Method and system for event impact analysis |
US6996510B1 (en) * | 2000-01-21 | 2006-02-07 | Metasolv Software, Inc. | System and method for modeling communication networks |
US20020026433A1 (en) * | 2000-04-05 | 2002-02-28 | Kuiper Wilko Juurt Jan | Knowledge system and methods of business alerting and business analysis |
US20040225726A1 (en) * | 2000-04-28 | 2004-11-11 | Deluca Steve A. | System and method for implementing a user interface in a client management tool |
US20060168187A1 (en) * | 2000-04-28 | 2006-07-27 | Microsoft Corporation | System and method for archiving within a client management tool |
US7882215B2 (en) | 2000-04-28 | 2011-02-01 | Microsoft Corporation | System and method for implementing polling agents in a client management tool |
US7523180B1 (en) | 2000-04-28 | 2009-04-21 | Microsoft Corporation | System and method for service chain management in a client management tool |
US7549124B2 (en) * | 2000-04-28 | 2009-06-16 | Microsoft Corporation | System and method for implementing a user interface in a client management tool |
US20050005011A1 (en) * | 2000-04-28 | 2005-01-06 | Microsoft Corporation | System and method for implementing integrated polling functions in a client management tool |
US20050033765A1 (en) * | 2000-04-28 | 2005-02-10 | Microsoft Corporation | System and method for caching data in a client management tool |
US20050289171A1 (en) * | 2000-04-28 | 2005-12-29 | Microsoft Corporation | System and method for managing database files in a client management tool |
US20060155849A1 (en) * | 2000-04-28 | 2006-07-13 | Microsoft Corporation | System and method for implementing polling agents in a client management tool |
US6895586B1 (en) | 2000-08-30 | 2005-05-17 | Bmc Software | Enterprise management system and method which includes a common enterprise-wide namespace and prototype-based hierarchical inheritance |
US7228310B2 (en) * | 2001-02-06 | 2007-06-05 | Siemens Energy & Automation, Inc. | Data mining system, method and apparatus for industrial applications |
US20020178159A1 (en) * | 2001-02-06 | 2002-11-28 | O'brien Christopher | Data mining system, method and apparatus for industrial applications |
US20020174417A1 (en) * | 2001-03-30 | 2002-11-21 | Michael Sijacic | Defining and creating custom data fields within process management software |
US20020184355A1 (en) * | 2001-06-04 | 2002-12-05 | Deats Kevin A. | Method and system for reporting event data to requesting subscribers |
US20030078943A1 (en) * | 2001-10-19 | 2003-04-24 | Mcgeorge Vernon E. | Conduits for multiple data sources |
US20030093429A1 (en) * | 2001-11-12 | 2003-05-15 | Hitachi, Inc. | Data warehouse system |
US6789117B1 (en) * | 2001-12-21 | 2004-09-07 | Networks Associates Technology, Inc. | Enterprise network analyzer host controller/agent interface system and method |
US7154857B1 (en) | 2001-12-21 | 2006-12-26 | Mcafee, Inc. | Enterprise network analyzer zone controller system and method |
US20030140137A1 (en) * | 2001-12-21 | 2003-07-24 | Networks Associates Technology, Inc | Enterprise Network analyzer architecture framework |
US7522531B2 (en) | 2001-12-21 | 2009-04-21 | Mcafee, Inc. | Intrusion detection system and method |
US7330473B1 (en) | 2002-04-12 | 2008-02-12 | Rockwell Automation Technologies, Inc. | System and methodology providing network data exchange between industrial control components |
US20090228122A1 (en) * | 2002-06-04 | 2009-09-10 | Rockwell Automation Technologies, Inc. | System and methodology providing adaptive interface in an industrial controller environment |
US7606890B1 (en) * | 2002-06-04 | 2009-10-20 | Rockwell Automation Technologies, Inc. | System and methodology providing namespace and protocol management in an industrial controller environment |
US8132127B2 (en) | 2002-06-04 | 2012-03-06 | Rockwell Automation Technologies, Inc. | System and methodology providing adaptive interface in an industrial controller environment |
US7151966B1 (en) | 2002-06-04 | 2006-12-19 | Rockwell Automation Technologies, Inc. | System and methodology providing open interface and distributed processing in an industrial controller environment |
US7539724B1 (en) | 2002-06-04 | 2009-05-26 | Rockwell Automation Technologies, Inc. | Instant messaging for event notification and exchanging data in an industrial controller environment |
US10018993B2 (en) | 2002-06-04 | 2018-07-10 | Rockwell Automation Technologies, Inc. | Transformation of industrial data into useful cloud information |
US7512906B1 (en) | 2002-06-04 | 2009-03-31 | Rockwell Automation Technologies, Inc. | System and methodology providing adaptive interface in an industrial controller environment |
US20040041838A1 (en) * | 2002-09-04 | 2004-03-04 | Adusumilli Venkata J.R.B. | Method and system for graphing data |
US20190065166A1 (en) * | 2002-09-12 | 2019-02-28 | Computer Sciences Corporation | System and method for updating network computer systems |
US20150301816A1 (en) * | 2002-09-12 | 2015-10-22 | Computer Sciences Corporation | System and method for updating network computer systems |
US8375108B2 (en) * | 2002-09-12 | 2013-02-12 | Computer Sciences Corporation | System and method for updating network computer systems |
US20150261522A1 (en) * | 2002-09-12 | 2015-09-17 | Computer Sciences Corporation | System and method for updating network computer systems |
US20170269920A1 (en) * | 2002-09-12 | 2017-09-21 | Computer Sciences Corporation | System and method for updating network computer systems |
US20090013318A1 (en) * | 2002-09-12 | 2009-01-08 | Harry Aderton | System and method for updating network computer systems |
US20070226389A1 (en) * | 2002-09-30 | 2007-09-27 | Electronic Data Systems, A Delaware Corporation | Generation of computer resource utilization data per computer application |
US7469285B2 (en) * | 2002-09-30 | 2008-12-23 | Electronic Data Systems Corporation | Generation of computer resource utilization data per computer application |
US7437446B2 (en) | 2002-09-30 | 2008-10-14 | Electronic Data Systems Corporation | Reporting of abnormal computer resource utilization data |
US20040215584A1 (en) * | 2003-04-24 | 2004-10-28 | International Business Machines Corporation | Scheduling for data warehouse ETL processing and data mining execution |
US7058615B2 (en) * | 2003-04-24 | 2006-06-06 | International Business Machines Corporation | Scheduling for data warehouse ETL processing and data mining execution |
US20050138150A1 (en) * | 2003-07-11 | 2005-06-23 | Computer Associates Think, Inc. | System and method for graphically presenting change and configuration management information |
US20050192975A1 (en) * | 2004-02-12 | 2005-09-01 | Interdigital Technology Corporation | Resource management system for electronic devices |
US20100167751A1 (en) * | 2004-02-12 | 2010-07-01 | Interdigital Technology Corporation | Resource management system for electronic devices |
US7424470B2 (en) * | 2004-05-11 | 2008-09-09 | Sap Ag | Local data repository generation |
US20050256896A1 (en) * | 2004-05-11 | 2005-11-17 | Wolfgang Pfeifer | Local data repository generation |
US8429609B2 (en) | 2004-05-21 | 2013-04-23 | Ca, Inc. | Method and system for web-based enterprise change and configuration management reports |
US20060004821A1 (en) * | 2004-05-21 | 2006-01-05 | Sapan Bhasker | Method and system for web-based enterprise change and configuration management reports |
US20050271047A1 (en) * | 2004-06-02 | 2005-12-08 | Huonder Russell J | Method and system for managing multiple overlapping address domains |
US20080133029A1 (en) * | 2004-11-09 | 2008-06-05 | Thomas Heimke | Method For Interlinking Technical Data And System For Operating And Observing An Industrial Plant |
US7587410B2 (en) * | 2005-03-22 | 2009-09-08 | Microsoft Corporation | Dynamic cube services |
US20060218157A1 (en) * | 2005-03-22 | 2006-09-28 | Microsoft Corporation | Dynamic cube services |
US20070055972A1 (en) * | 2005-08-24 | 2007-03-08 | International Business Machines Corporation | Model-driven software deployment in an application server |
US7512942B2 (en) * | 2005-08-24 | 2009-03-31 | International Business Machines Corporation | Model-driven software deployment in an application server |
US7865461B1 (en) | 2005-08-30 | 2011-01-04 | At&T Intellectual Property Ii, L.P. | System and method for cleansing enterprise data |
US8117255B2 (en) * | 2005-09-07 | 2012-02-14 | Sap Ag | Systems and methods for smart client remote data monitoring |
US20070055769A1 (en) * | 2005-09-07 | 2007-03-08 | Martin Kolb | Systems and methods for smart client remote data monitoring |
US8229979B2 (en) * | 2006-04-28 | 2012-07-24 | Sap Ag | Method and system for inspecting memory leaks |
US20100205230A1 (en) * | 2006-04-28 | 2010-08-12 | Sap Ag | Method and System for Inspecting Memory Leaks and Analyzing Contents of Garbage Collection Files |
US20070255775A1 (en) * | 2006-04-28 | 2007-11-01 | Sap Ag | Method and system for inspecting memory leaks |
US20070255774A1 (en) * | 2006-04-28 | 2007-11-01 | Sap Ag | Method and system for detecting memory leaks and copying garbage collection files |
US7734666B2 (en) | 2006-04-28 | 2010-06-08 | Sap Ag | Method and system for inspecting memory leaks and analyzing contents of garbage collection files |
US20070255773A1 (en) * | 2006-04-28 | 2007-11-01 | Sap Ag | Method and system for inspecting memory leaks and analyzing contents of garbage collection files |
US8793289B2 (en) | 2006-04-28 | 2014-07-29 | Sap Ag | Method and system for detecting memory leaks and copying garbage collection files |
US7953772B2 (en) | 2006-04-28 | 2011-05-31 | Sap Ag | Method and system for inspecting memory leaks and analyzing contents of garbage collection files |
US7899835B2 (en) | 2008-02-28 | 2011-03-01 | Caterpillar, Inc. | Method and system for reviewing business activity of a business entity |
US20090222484A1 (en) * | 2008-02-28 | 2009-09-03 | Nordhielm Bradley D | Method and system for reviewing business activity of a business entity |
US7970728B2 (en) * | 2008-10-23 | 2011-06-28 | International Business Machines Corporation | Dynamically building and populating data marts with data stored in repositories |
US20100106747A1 (en) * | 2008-10-23 | 2010-04-29 | Benjamin Honzal | Dynamically building and populating data marts with data stored in repositories |
US20100179957A1 (en) * | 2009-01-09 | 2010-07-15 | Linkage Technology Group Co., Ltd. | Polling Method of Switch Status Based on Timer-triggered Scheduler of Stored Procedures |
US20120117109A1 (en) * | 2009-06-02 | 2012-05-10 | Nokia Siemens Networks Oy | Network element integration |
US8886603B2 (en) * | 2012-01-31 | 2014-11-11 | Yahoo! Inc. | Probe system for replication monitoring |
US20130232114A1 (en) * | 2012-01-31 | 2013-09-05 | Yahoo! Inc. | Probe System For Replication Monitoring |
US9568908B2 (en) | 2012-02-09 | 2017-02-14 | Rockwell Automation Technologies, Inc. | Industrial automation app-store |
US9477936B2 (en) | 2012-02-09 | 2016-10-25 | Rockwell Automation Technologies, Inc. | Cloud-based operator interface for industrial automation |
US10965760B2 (en) | 2012-02-09 | 2021-03-30 | Rockwell Automation Technologies, Inc. | Cloud-based operator interface for industrial automation |
US9565275B2 (en) | 2012-02-09 | 2017-02-07 | Rockwell Automation Technologies, Inc. | Transformation of industrial data into useful cloud information |
US9568909B2 (en) | 2012-02-09 | 2017-02-14 | Rockwell Automation Technologies, Inc. | Industrial automation service templates for provisioning of cloud services |
US10749962B2 (en) | 2012-02-09 | 2020-08-18 | Rockwell Automation Technologies, Inc. | Cloud gateway for industrial automation information and control systems |
US11470157B2 (en) | 2012-02-09 | 2022-10-11 | Rockwell Automation Technologies, Inc. | Cloud gateway for industrial automation information and control systems |
US9413852B2 (en) | 2012-02-09 | 2016-08-09 | Rockwell Automation Technologies, Inc. | Time-stamping of industrial cloud data for synchronization |
US10139811B2 (en) | 2012-02-09 | 2018-11-27 | Rockwell Automation Technologies, Inc. | Smart device for industrial automation |
US10116532B2 (en) | 2012-02-09 | 2018-10-30 | Rockwell Automation Technologies, Inc. | Cloud-based operator interface for industrial automation |
US9363336B2 (en) | 2012-02-09 | 2016-06-07 | Rockwell Automation Technologies, Inc. | Smart device for industrial automation |
US9965562B2 (en) | 2012-02-09 | 2018-05-08 | Rockwell Automation Technologies, Inc. | Industrial automation app-store |
US9182946B2 (en) | 2013-03-15 | 2015-11-10 | Russell Sellers | Method of generating a computer architecture representation in a reusable syntax and grammar |
US9954972B2 (en) | 2013-05-09 | 2018-04-24 | Rockwell Automation Technologies, Inc. | Industrial data analytics in a cloud platform |
US10564633B2 (en) | 2013-05-09 | 2020-02-18 | Rockwell Automation Technologies, Inc. | Using cloud-based data for virtualization of an industrial automation environment with information overlays |
US10026049B2 (en) | 2013-05-09 | 2018-07-17 | Rockwell Automation Technologies, Inc. | Risk assessment for industrial systems using big data |
US9989958B2 (en) | 2013-05-09 | 2018-06-05 | Rockwell Automation Technologies, Inc. | Using cloud-based data for virtualization of an industrial automation environment |
US9786197B2 (en) | 2013-05-09 | 2017-10-10 | Rockwell Automation Technologies, Inc. | Using cloud-based data to facilitate enhancing performance in connection with an industrial automation system |
US10204191B2 (en) | 2013-05-09 | 2019-02-12 | Rockwell Automation Technologies, Inc. | Using cloud-based data for industrial simulation |
US9709978B2 (en) | 2013-05-09 | 2017-07-18 | Rockwell Automation Technologies, Inc. | Using cloud-based data for virtualization of an industrial automation environment with information overlays |
US10257310B2 (en) | 2013-05-09 | 2019-04-09 | Rockwell Automation Technologies, Inc. | Industrial data analytics in a cloud platform |
US11676508B2 (en) | 2013-05-09 | 2023-06-13 | Rockwell Automation Technologies, Inc. | Using cloud-based data for industrial automation system training |
US11295047B2 (en) | 2013-05-09 | 2022-04-05 | Rockwell Automation Technologies, Inc. | Using cloud-based data for industrial simulation |
US10726428B2 (en) | 2013-05-09 | 2020-07-28 | Rockwell Automation Technologies, Inc. | Industrial data analytics in a cloud platform |
US9703902B2 (en) | 2013-05-09 | 2017-07-11 | Rockwell Automation Technologies, Inc. | Using cloud-based data for industrial simulation |
US10816960B2 (en) | 2013-05-09 | 2020-10-27 | Rockwell Automation Technologies, Inc. | Using cloud-based data for virtualization of an industrial machine environment |
US9438648B2 (en) | 2013-05-09 | 2016-09-06 | Rockwell Automation Technologies, Inc. | Industrial data analytics in a cloud platform |
US10984677B2 (en) | 2013-05-09 | 2021-04-20 | Rockwell Automation Technologies, Inc. | Using cloud-based data for industrial automation system training |
US9942196B2 (en) | 2014-05-01 | 2018-04-10 | The Johns Hopkins University | Canonical network isolator component |
US9483477B2 (en) | 2015-01-19 | 2016-11-01 | Sas Institute Inc. | Automated data intake system |
US11409251B2 (en) | 2015-03-16 | 2022-08-09 | Rockwell Automation Technologies, Inc. | Modeling of an industrial automation environment in the cloud |
US11243505B2 (en) | 2015-03-16 | 2022-02-08 | Rockwell Automation Technologies, Inc. | Cloud-based analytics for industrial automation |
US11042131B2 (en) | 2015-03-16 | 2021-06-22 | Rockwell Automation Technologies, Inc. | Backup of an industrial automation plant in the cloud |
US11513477B2 (en) | 2015-03-16 | 2022-11-29 | Rockwell Automation Technologies, Inc. | Cloud-based industrial controller |
US10496061B2 (en) | 2015-03-16 | 2019-12-03 | Rockwell Automation Technologies, Inc. | Modeling of an industrial automation environment in the cloud |
US11880179B2 (en) | 2015-03-16 | 2024-01-23 | Rockwell Automation Technologies, Inc. | Cloud-based analytics for industrial automation |
US11927929B2 (en) | 2015-03-16 | 2024-03-12 | Rockwell Automation Technologies, Inc. | Modeling of an industrial automation environment in the cloud |
US10831410B2 (en) | 2016-10-19 | 2020-11-10 | International Business Machines Corporation | Managing maintenance of tape storage systems |
Also Published As
Publication number | Publication date |
---|---|
CA2342241A1 (en) | 2000-03-09 |
WO2000013112A1 (en) | 2000-03-09 |
US20020188584A1 (en) | 2002-12-12 |
AU5797599A (en) | 2000-03-21 |
EP1116138A1 (en) | 2001-07-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6651062B2 (en) | Method and apparatus for managing data for use by data applications | |
US10891297B2 (en) | Method and system for implementing collection-wise processing in a log analytics system | |
US20210049150A1 (en) | Generating and distributing delta files associated with mutable events in a distributed system | |
US6141777A (en) | System and method for reporting telecommunication service conditions | |
EP0961439B1 (en) | Network management event storage and manipulation using relational database technology | |
US6789115B1 (en) | System for collecting, analyzing, and reporting high volume multi-web server usage | |
US7685261B1 (en) | Extensible architecture for the centralized discovery and management of heterogeneous SAN components | |
US20080250057A1 (en) | Data Table Management System and Methods Useful Therefor | |
US8130924B2 (en) | Methods and apparatus for processing and display of voice data | |
US20090077569A1 (en) | Network management system event notification shortcut | |
JP2000503183A (en) | Communication network management system and method | |
EP1386240A2 (en) | Synthetic transaction monitor | |
EP2204010A1 (en) | Method and apparatus for propagating accelerated events in a network management system | |
WO2016161381A1 (en) | Method and system for implementing a log parser in a log analytics system | |
JP2003198599A (en) | Method for metering network usage | |
WO1998042102A1 (en) | Service level agreement management in data networks | |
Ahn | SIGMOD challenges paper: database issues in telecommunications network management | |
US20080120320A1 (en) | Apparatus, system, and method for reporting on enterprise data processing system configurations | |
US8880664B1 (en) | Method and apparatus for generating a network profile and device profile | |
US20080243872A1 (en) | Computer network security data management system and method | |
US7499937B2 (en) | Network security data management system and method | |
US7133912B1 (en) | System and method for measuring usage of gateway processes utilized in managing network elements | |
US7636720B2 (en) | Associating and using information in a metadirectory | |
JPH05300254A (en) | Customer access information collection system | |
CN117891813A (en) | Method and device for realizing data sharing based on data catalogue |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: CABLETRON SYSTEMS, INC., NEW HAMPSHIREFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GHANNAM, JEFF;LOOMIS, TODD A.;LEWIS, LUNDY M.;AND OTHERS;REEL/FRAME:010540/0726;SIGNING DATES FROM 19991025 TO 20000105 |
|
AS | Assignment |
Owner name: APRISMA MANAGEMENT TECHNOLOGIES, INC., NEW HAMPSHIFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CABLETRON SYSTEMS, INC.;REEL/FRAME:011590/0363Effective date: 20000929Owner name: APRISMA MANAGEMENT TECHNOLOGIES, INC.,NEW HAMPSHIRFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CABLETRON SYSTEMS, INC.;REEL/FRAME:011590/0363Effective date: 20000929 |
|
AS | Assignment |
Owner name: FOOTHILL CAPITAL CORPORATION, A CALIFORNIA CORPORAFree format text: SECURITY INTEREST;ASSIGNOR:APRISMA MANAGEMENT TECHNOLOGIES, INC., A DELAWARE CORPORATION;REEL/FRAME:013447/0331Effective date: 20021014 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: APRISMA MANAGEMENT TECHNOLOGIES, INC,NEW HAMPSHIREFree format text: RELEASE OF SECURITY INTEREST RECORDED 10262002 R/F 013447/0331;ASSIGNOR:WELLS FARGO FOOTHILL, INC. (FORMERLY KNOWN AS FOOTHILL CAPITAL CORPORATION);REEL/FRAME:018668/0833Effective date: 20050222Owner name: APRISMA MANAGEMENT TECHNOLOGIES, INC, NEW HAMPSHIRFree format text: RELEASE OF SECURITY INTEREST RECORDED 10262002 R/F 013447/0331;ASSIGNOR:WELLS FARGO FOOTHILL, INC. (FORMERLY KNOWN AS FOOTHILL CAPITAL CORPORATION);REEL/FRAME:018668/0833Effective date: 20050222 |
|
AS | Assignment |
Owner name: CONCORD COMMUNICATIONS, INC.,MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:APRISMA MANAGEMENT TECHNOLOGIES, INC.;REEL/FRAME:019028/0320Effective date: 20070208Owner name: CONCORD COMMUNICATIONS, INC., MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:APRISMA MANAGEMENT TECHNOLOGIES, INC.;REEL/FRAME:019028/0320Effective date: 20070208 |
|
AS | Assignment |
Owner name: COMPUTER ASSOCIATES THINK, INC.,NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CONCORD COMMUNICATIONS, INC.;REEL/FRAME:019047/0414Effective date: 20070208Owner name: COMPUTER ASSOCIATES THINK, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CONCORD COMMUNICATIONS, INC.;REEL/FRAME:019047/0414Effective date: 20070208 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:COMPUTER ASSOCIATES THINK, INC.;REEL/FRAME:028801/0049Effective date: 20120330 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044213/0313Effective date: 20170929 |