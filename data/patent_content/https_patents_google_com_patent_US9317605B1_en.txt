BACKGROUND
This specification relates to search engines.
A search engine may receive a search query, and may search for resources on a network using the terms of the search query. The search engine may generate a search engine results page that includes multiple search results, each search result including, for example, links to resources that the search engine identifies as relevant to the query terms.
A search engine may also provide an auto-completion service. For instance, if a user begins typing characters into a search box of a search engine home page, an auto-completion engine at the search engine may provide the user with suggested query terms based on the entered characters. For example, if the user enters the characters “cot.” into a search box, the auto-completion engine may provide the user with suggested query terms such as “coffee,” “coffee bean,” and “coffin.” If the user selects a particular suggested query term, the query term is submitted to the search engine as part of a search query, as though the user had entered the entire suggested query term and submitted the search query themselves.
SUMMARY
This specification describes technologies relating to search engines. To illustrate, a user who is searching for resources using a search engine may wish to restrict their search to a particular search corpus. In some implementations, a search corpus represents a categorization of resources that are related to one another—e.g., related by topic or format. For example, the user may know that he or she is searching for a news article, e.g., in the “news” corpus, or an image, e.g., in the “images” corpus, or a place on a map, e.g., in the “places” corpus, but may or may not be aware of the best query terms for satisfying their information need. When the user begins entering a query term, the user is presented with auto-completions, e.g., suggested query terms, and suggested search corpora associated with the auto-completions. Thus, the user can choose a search corpus which relates to the type of resource the user is looking for, along with the auto-completion, before the search query is submitted.
For example, if a user enters “cot” the top ranked auto-completion may be “coffee.” Many users searching for coffee want to find nearby places to get a cup of coffee. However, there may be a significant portion of users who search for the history of coffee, or for images of coffee. Thus, when presenting the auto-completion, “coffee,” to a particular user, the user may be presented with a “coffee” auto-completion associated with a local search corpus, a “coffee” auto-completion associated with a universal search corpus, and a “coffee” auto-completion associated with an image search corpus. Each corpus corresponds to a plurality of resources that are each relevant to that corpus, and each resource may be relevant to, and/or identified in, more than one corpus.
For example, the “places” corpus, e.g., the search corpus associated with places to buy a cup of coffee, may be the corpus most likely to be chosen by any given user searching for coffee; thus, the “coffee” auto-completion and “places” corpus may be presented to the user as a first search suggestion. A second corpus, “images,” may also be presented along with the auto-completion, “coffee,” as a second search suggestion—e.g., because the images corpus may be the second most likely corpus for the “coffee” query. A third corpus presented with the auto-completion, “coffee,” may be the “universal” corpus. The universal corpus may be associated with some corpora, with all corpora, or with all corpora except those also presented to the user—e.g., the “universal” corpus may include all corpora except the “places” and “images” corpora. Selection of a particular auto-completion and corpus may cause submission of a query to a search engine, which may provide search results for the selected auto-completion, the search results being limited to resources related to the corpus or corpora associated with the selected auto-completion. If a resource is related to more than one corpus, it may be included in search results for each of its associated corpora.
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of determining that an auto-completion has a strong correlation with two or more different search corpora, and providing a representation of each of the two or more corpora when presenting the auto-completion to the user. Searches conducted using the auto-completion are performed on the search corpus associated with the user-selected representation.
Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving characters from a user device, obtaining an auto-completion that corresponds to the received characters, obtaining corpora and respective corpus scores associated with the auto-completion, selecting corpora based on the corpus scores, and providing the user device with data identifying the auto-completion and the selected corpora. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
These and other embodiments can each optionally include one or more of the following features. The received characters may make up a partial query term, and the characters may be included in an auto-completion request that is sent by the user device. In addition, selecting corpora may comprise selecting corpora whose respective corpus scores satisfy a threshold, or selecting the n corpora that have the n highest corpus scores. Selecting corpora may comprise selecting at least one corpus whose respective corpus score satisfies a threshold and selecting a universal search corpus. Providing data identifying the auto-completion and corpora to a user device may comprise providing user interface elements corresponding to the auto-completion and each corpora, wherein selection of a corpus' user interface element causes presentation of resources that correspond to the auto-completion and the selected corpus.
Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving characters from a user, transmitting the characters to a forking engine, receiving (i) an auto-completion that corresponds to the one or more characters, and (ii) at least first and second corpora associated with the auto-completion, each corpus corresponding to a plurality of resources that each relate to the corpus; and, displaying a representation of the auto-completion with the first and second corpora. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
These and other embodiments can each optionally include one or more of the following features. Characters may be received through a search box, and the auto-completion and representations of the corpora may be displayed in the search box, or in a drop-down list beneath the search box.
Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A user who is searching for information and begins typing a query will be presented with auto-completions and corpora to assist the user in submitting a query for resources associated with the selected auto-completion and corpus, enhancing the user's search experience. The display of auto-completions and corpora on a user device may be configured in a manner that is easy for a user to understand and interact with. Presenting auto-completions and corpora in or with a search box is also compact, and does not require a large area for display.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
BRIEF DESCRIPTION OF THE DRAWINGS
FIG. 1 is a diagram of an example environment in which forked auto-completions are presented.
FIG. 2 is a flow chart of an example process for providing forked auto-completions.
FIG. 3 is a flow chart of an example process for receiving forked auto-completions.
FIG. 4 is an example display of forked auto-completions.
FIG. 5 is an example display of forked auto-completions.
FIG. 6 is an example display of forked auto-completions.
FIG. 7 is an example display of forked auto-completions.
FIG. 8 is a block diagram of an example data processing apparatus.
Like reference numbers and designations in the various drawings indicate like elements.
DETAILED DESCRIPTION
FIG. 1 is a diagram of an example environment 100 in which forked auto-completions are presented. In general, the environment 100 includes a client device 102 coupled to a forking engine 104 through a search system front end 105 and over a network 106. The forking engine 104 may also be coupled to an auto-completion engine 108 and a corpus engine 110, which may be coupled, respectively, to an auto-completion index 112 and a corpus index 114. A search engine 116 may be connected to and accessible by the user device 102 through the search system front end 105 and the network 106. In addition, the example environment 100 generally includes resources 118, which are accessible by the user device 102 through the network 106.
A user device 102 is an electronic device that is owned by or otherwise under control of a user and is capable of communicating over the network 106. Example user devices 102 include personal computers, music players, tablet computers, e-book readers, mobile communication devices, and other devices that can send and receive data over the network 106. A user device 102 typically includes a user application, such as a web browser, to facilitate the sending and receiving of data, including resources 118, over the network 106. A resource 118 is any data that can be provided over the network 106. Resources include HTML pages, word processing documents, and portable document format (PDF) documents, images, video, and feed sources, to name only a few.
A user application, e.g., web browser, included in a user device 102 may facilitate searching the network 106 for resources 118 by including a search box 120 and a search button 122. In some implementations, the search box 120 and search button 122 may be provided to the user device 102 by the search system front end 105. A user may enter one or more characters into the search box 120 and interact with the search button 122 to initiate a search for resources—e.g., using a search engine 116. Before interacting with the search button 122 or the search engine 116, a user may enter one or more characters into the user device 102, e.g., using the search box 120, which may be sent by the user device 102 to the forking engine 104 through the network 106 and search system front end 105.
The forking engine 104 receives one or more characters from a user device 102. In some implementations, the one or more characters make up a partial query term. For example, a user may enter the characters “cot.” in a search box 120 as the beginning characters for a search query—e.g., the user may be searching for “coffee,” “coffee beans,” or “coffins”. The characters, “cof,” may be sent by the user device 102 to the forking engine 104 before the user finishes typing the query, and without interaction with the search button 122.
The forking engine 104 obtains an auto-completion corresponding to the one or more characters. In some implementations, the auto-completion represents a suggested search term. For example, the forking engine 104 may provide the auto-completion engine 108 with the characters, “cof.” The auto-completion engine 108 may then search the auto-completion index 112 to identify an auto-completion based on the characters, “cof,” for presentation as a suggested search term. The auto-completion engine 108 may identify the most relevant or popular auto-completion, e.g., based on the search term most often submitted as a query given the first characters, “cof”, but many suitable methods for determining an auto-completion exist. Example auto-completions for the characters, “cof,” include “coffee,” “coffee bean,” “coffee shop,” and “coffin.” The auto-completion obtained by the forking engine 104 may be the most popular auto-completion for the given one or more characters—e.g., “coffee”.
The forking engine 104 obtains data identifying two or more corpora and a respective corpus score associated with the auto-completion for each identified corpus. For example, the corpus engine 110 may receive the auto-completion, “coffee,” and search the corpus index 114 to identify at least two corpora for “coffee” and corpus scores for each identified corpus. A corpus score generally represents a measure of confidence that the respective corpus will be chosen by a user when presented with the auto-completion. Each corpus score may be measured on a scale, for example, 1 to 100, where 1 indicates the lowest measure of confidence and 100 indicates the highest level of confidence, or a probabilistic scale of confidence using a range of 0.0 to 1.0; many suitable score scales exist for representing confidence.
In some implementations, the corpus score may be based on metrics associated with the auto-completion. For example, the corpus engine 110 may generate a corpus score for “coffee” based on a click-through rate, e.g., the rate at which a resource is selected in response to a query, associated with the resources provided in response to the query, “coffee.” Consider an example wherein resources belonging to the “places” corpus are selected for 75% of “coffee” queries, resources belonging to the “images” corpus are selected for 15% of “coffee” queries, and resources belonging to the “news” corpus are selected for 5% of “coffee” queries. An example set of corpora and respective corpus scores for “coffee” (using a probabilistic scale of confidence, based on click-through rate, using a range of 0.0 to 1.0) may be as follows: {places: 0.75, images: 0.15, news: 0.05 . . . }. Any appropriate metric or combination of metrics may be used as a basis for calculating the corpus score, such as click length or general traffic for resources provided in response to a query.
In some implementations, if a resource belonging to multiple corpora is selected when presented in response to a query, the corpus score for one or more of the multiple corpora may be affected. For example, if a user who searches for “coffee” selects a result that is in both the “news” and “blog” corpora, corpus scores for both corpora—or only the more popular corpus—may be increased. In some implementations, user-specific metrics may be used to calculate corpus scores. For example, if a user searching for “coffee” selects results from the “places” corpus for 100% of the user's “coffee” searches, the corpus score for “coffee”—for that particular user—may be 1.0.
An example set of corpora and respective corpus scores for “coffee” (using a scale of 1 to 100) may be as follows: {places: 80, images: 35, news: 15, universal: 5 . . . }. The foregoing example set indicates that, when a user searches for “coffee,” there is a high confidence that the user is likely to search for “coffee” in the “places” corpus—e.g., the user wants to find a place that sells coffee. There is a somewhat low confidence that the user is likely to search the “images” corpus for “coffee,” there is a low confidence that the user is likely to search for “coffee” in the “news” corpus, and a very low confidence that the user is likely to search for “coffee” in the “universal” corpus.
The forking engine 104 selects two or more of the corpora based on the respective corpus scores. In some implementations, the forking engine 104 selects at least one corpus whose respective corpus score satisfies a threshold, and the forking engine 104 also selects the “universal” corpus. In the above example, if the threshold is 50, the “places” corpus would be selected along with the “universal” corpus. If the threshold was 30, the “places” and “images” corpora may be selected along with the “universal” corpus. In some implementations, a predetermined number of corpora may be selected. For example, if four corpora are identified, and each of the four have respective corpus scores that satisfy the corpus score threshold, the forking engine 104 may nevertheless only select two of the four corpora.
The forking engine 104 provides data that identifies the auto-completion and the selected corpora to the user device 102. In some implementations, providing data that identifies the auto-completion and the selected corpora to the user device 102 includes providing a respective visual representation associated with each of the selected corpora. For example, if the auto-completion is “coffee,” and if the selected corpora are the “places” and “universal” corpora, the forking engine 104 may “fork” the auto-completion, and cause the user device 102 to display “coffee” below the search box 120 one time for each corpus. On one side of the auto-completion fork, a “coffee” auto-completion may be accompanied by text or an icon that represents the “places” corpus, while another side of the auto-completion fork may display the “coffee” auto-completion accompanied by text or an icon that represents the “universal” corpus.
When a user selects one of the displayed auto-completions and corpora, the user device 102 may send a query to the search engine 116 through the search system front and 105 and the network 106. The query may include the user selected auto-completion and corpus. When the search engine 116 receives the query, the search engine 116 may search for resources in the selected corpus which are most relevant to the selected auto-completion. Each resource included in the selected corpus relates to that selected corpus—e.g., resources included in the “images” corpus relate to images, and are likely to include, or consist of, images. For example, if a user selects the “coffee” auto-completion with the “places” corpora, the user device 102 sends this information to the search engine 116, which searches the places corpus for resources relevant to “coffee”—e.g., searches a map of a location close to the location of the user device 102 for places related to “coffee”.
FIG. 2 is a flow chart of an example process 200 for providing forked auto-completions. The process 200 may be used by a data processing apparatus that is used to realize the forking engine 104. In particular, process 200 is used to provide auto-completions and corpora to a user device.
One or more characters are received from a user device (202). The forking engine 104 generally receives the characters through the network 106. In some implementations, the one or more characters are included in an auto-completion request which was sent to the forking engine 104 by the user device 102. For example, a user may enter “bas” in search box of a user device, and the user device may transmit those three characters to the forking engine 104 as part of a request to provide an auto-completion.
An auto-completion corresponding to the one or more characters is obtained (204). In some implementations, the one or more characters are provided to an auto-completion engine 108, which obtains an auto-completion for the one or more characters from an auto-completion index. For example, if an auto-completion engine is provided with “bas,” it may query an auto-completion index, which may include auto-completions, e.g., suggested search terms, based on “bas.”
There may be multiple auto-completions for “bas,” and they may be ranked in the auto-completion index—e.g., ranked by a user selection rate which represents the rate at which a particular auto-completion is selected when presented in response to an auto-completion request. Example auto-completions for “bas” may include “baseball,” “baseball bat,” “bass,” and “basket.” More than one auto-completion may be obtained, and the auto-completion(s) may be obtained based on rank.
Data identifying two or more corpora and a respective corpus score associated with the auto-completion for each identified corpus is obtained (206). In some implementations, an auto-completion is provided to the corpus engine 110, which obtains corpus data for the auto-completion from a corpus index. The corpus data may identify two or more corpora and respective corpus scores associated with the auto-completion.
For example, the corpus engine may query the corpus index using the auto-completion, “baseball.” The corpus index may reference the following set of corpora and their respective corpus scores for “baseball” (on a scale from 1 to 100): {places: 7, images: 39, videos: 31, news: 91, shopping: 44, literature: 19, blogs: 10, patents: 4, universal: 29}. The corpus engine may then obtain, from the corpus index, the foregoing set of corpora and corpus scores for “baseball.”
Two or more of the corpora are selected based on the respective corpus scores (208). In some implementations, the forking engine 104 selects the top n corpora with the top n corpus scores. Given the example set above, and where n=3, the chosen corpora would be “news,” “shopping,” and “images” (corpus scores of 91, 44 and 39, respectively). In some implementations, the forking engine selects at least one corpus having a corpus score which satisfies a corpus score threshold. For example, given a corpus score threshold of 40, the “news” and “shopping” corpora in the above example would be selected.
In some implementations, the forking engine selects at least one corpus having a corpus score which satisfies a threshold, and also selects a particular corpus. This would ensure that a particular corpus is always selected, even if it does not meet the corpus score threshold. In some contexts it may be desirable to always select a particular corpus—e.g., if a particular user often searches for news, the “news” corpus may always be selected for that particular user, regardless of the corpus score. In some implementations, the particular corpus is selected for a user based on past user interaction, such as the user's selection of that particular corpus more often than any other corpus, or based on the user's selection of that particular corpus a threshold percent of the times the user is provided with the corpora choices. In some implementations, the particular corpus may be selected based on explicit user preference provided by the user. Given the above example corpus scores for “news,” “shopping,” and “images” (corpus scores of 91, 44 and 39, respectively), an example corpus score threshold of 80, and the particular corpus, “universal,” the “news” and “universal” corpora would be selected by the forking engine.
Data that identifies the auto-completion and the selected corpora to the user device is provided (210). The forking engine 104 provides the data to the user device 102 across the network 106. In some implementations, the provided data causes presentation of a plurality of user interface elements on the user device, and at least two user interface elements correspond to the auto-completion and the selected corpora. For example, the data may cause a user device to present one or more auto-completions for “bas”—e.g., “baseball,” “baseball bat,” “bass,” “basket”- to a user, along with the respective corpora for one or more of those auto-completions—e.g., “baseball: news,” and “baseball: universal”. Presentation of user interface elements is more particularly described with reference to FIG. 3 through FIG. 7 below.
In some implementations, selection of one of the user interface elements causes presentation of at least one resource corresponding to the auto-completion and the corpus to which the selected user interface element corresponds. For example, if a user selects the user interface element corresponding to “baseball: news,” a query for “baseball” in the “news” corpus may be transmitted to the search engine 116, which may return, as search results, data identifying news articles associated with “baseball.”
FIG. 3 is a flow chart of an example process for receiving forked auto-completions. The process 300 may be used by a data processing apparatus that is used to realize the user device 102. In particular, process 200 is used to display forked auto-completions on a user device 102.
One or more characters are received from a user (302). In some implementations, the characters are received through a search box 122 of a user application included in a user device 102. For example, the user might enter the characters, “cof,” into the search box of a web browser included in a mobile device.
The one or more characters are transmitted to a forking engine (304). The one or more characters may be transmitted by way of an auto-completion request sent by the user device 102 across the network 106. In some implementations, the transmission of the auto-completion request may be performed without the user's interaction with a search button 122.
Data identifying (i) an auto-completion that corresponds to the one or more characters, and (ii) at least first and second corpora associated with the auto-completion is received (306). The data may be received at the user device 102 from the forking engine 104 across the network 106. For example, the user device may receive data indicating the auto-completion, “coffee,” and the corpora, “places” and “universal.” The received data may also include other auto-completions for “cof” and associated corpora.
A representation of the auto-completion and the first corpus, and a representation of the auto-completion and the second corpus are displayed (308). Each representation is displayed on the user device 102. Example representations include, but are not limited to, text, icons, buttons and other visual representations which indicate the auto-completion and corpus to a user. In some implementations, each representation is displayed in a drop-down list beneath the search box. Example implementations for displaying the representations are discussed below with reference to FIG. 4 through FIG. 7.
FIG. 4 is an example display of forked auto-completions. The display may be shown on a user device 102 upon receiving data identifying an auto-completion and at least first and second corpora associated with the auto-completion. In this example, the representations are displayed in a drop-down list beneath the search box 120. The first row 402 of the drop-down list is a display of the auto-completion, “coffee,” and the first corpus, “places” (depicted by the icon and text, “near me”). The second row 404 of the drop-down list is a display of the auto-completion, “coffee,” and the second corpus, “universal” (depicted by the icon and text, “topic”). In this example, other auto-completions for “cot” without associated corpora, are also displayed in the drop-down list—e.g., “coffee bean,” “coffee shop,” etc.
FIG. 5 is an example display of forked auto-completions. The display may be shown on a user device 102 upon receiving data identifying an auto-completion and at least first and second corpora associated with the auto-completion. In this example, the representations are displayed in a drop-down list beneath the search box 120. The first row 502 of the drop-down list is a display of the auto-completion, “coffee,” the second corpus, “universal” (depicted by the first icon 504), and the first corpus, “places” (depicted by the second icon 506). In this example, other auto-completions for “cof,” without associated corpora, are also displayed in the drop-down list—e.g., “coffee bean,” “coffee shop,” etc.
FIG. 6 is an example display of forked auto-completions. The display may be shown on a user device 102 upon receiving data identifying an auto-completion and at least first and second corpora associated with the auto-completion. In this example, the representations are displayed in a drop-down list beneath the search box 120. The first row 602 of the drop-down list is a display of the auto-completion, “coffee,” and the second corpus, “universal” (depicted by the auto-completion only). The second row 604 of the drop-down list is a display of the auto-completion, “coffee,” and the first corpus, “places” (depicted by the icon and text, “near me”). In this example, other auto-completions for “cof,” without associated corpora, are also displayed in the drop-down list—e.g., “coffee bean,” “coffee shop,” etc.
FIG. 7 is an example display of forked auto-completions. The display may be shown on a user device 102 upon receiving data identifying an auto-completion and at least first and second corpora associated with the auto-completion. In this example, the representations are displayed in the search box 120 and a drop-down list beneath the search box. The first row 702 of the drop-down list is a display of the auto-completion, “coffee.” The representations of the corpora are displayed as icons in the search box. The second corpus, “universal,” is depicted by the first icon 704, and the first corpus, “places,” is depicted by the second icon 706. In this example, other auto-completions for “cof,” without associated corpora, are also displayed in the drop-down list—e.g., “coffee bean,” “coffee shop,” etc.
FIG. 8 is a block diagram of an example data processing apparatus 800 that can be used to perform operations described above. The apparatus 800 includes a processor 810, a memory 820, a storage device 830, and an input/output device 840. Each of the components 810, 820, 830, and 840 can be interconnected, for example, using a system bus 850. The processor 810 is capable of processing instructions for execution within the system 800. In one implementation, the processor 810 is a single-threaded processor. In another implementation, the processor 810 is a multi-threaded processor. The processor 810 is capable of processing instructions stored in the memory 820 or on the storage device 830.
The memory 820 stores information within the apparatus 800. In one implementation, the memory 820 is a computer-readable medium. In one implementation, the memory 820 is a volatile memory unit. In another implementation, the memory 820 is a non-volatile memory unit.
The storage device 830 is capable of providing mass storage for the apparatus 800. In one implementation, the storage device 830 is a computer-readable medium. In various different implementations, the storage device 830 can include, for example, a hard disk device, an optical disk device, a storage device that is shared over a network by multiple computing devices, e.g., a cloud storage device, or some other large capacity storage device.
The input/output device 840 provides input/output operations for the apparatus 800. In one implementation, the input/output device 840 can include one or more of a network interface devices, e.g., an Ethernet card, a serial communication device, e.g., and RS-232 port, and/or a wireless interface device, e.g., and 802.11 card. In another implementation, the input/output device can include driver devices configured to receive input data and send output data to other input/output devices, e.g., keyboard, printer and display devices 860. Other implementations, however, can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, etc.
Although an example data processing apparatus has been described in FIG. 8, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media—e.g., multiple CDs, disks, or other storage devices.
The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files—e.g., files that store one or more modules, sub-programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device—e.g., a universal serial bus (USB) flash drive—to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network—e.g., the Internet—and peer-to-peer networks—e.g., ad hoc peer-to-peer networks.
The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data, e.g., an HTML page, to a client device—e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device. Data generated at the client device, e.g., a result of the user interaction, can be received from the client device at the server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.