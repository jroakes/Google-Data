US8983898B1 - Extracting instance attributes from text - Google Patents
Extracting instance attributes from text Download PDFInfo
- Publication number
- US8983898B1 US8983898B1 US14/027,586 US201314027586A US8983898B1 US 8983898 B1 US8983898 B1 US 8983898B1 US 201314027586 A US201314027586 A US 201314027586A US 8983898 B1 US8983898 B1 US 8983898B1
- Authority
- US
- United States
- Prior art keywords
- instance
- information
- attribute
- attributes
- instances
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/36—Creation of semantic tools, e.g. ontology or thesauri
- G06F16/367—Ontology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
-
- G06F17/30707—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/353—Clustering; Classification into predefined classes
-
- G06F17/30734—
Definitions
- This disclosure relates to information extraction.
- the Internet provides access to a wide variety of resources, e.g., video and/or audio files, web pages for particular subjects, news articles, and so on.
- Resources of particular interest to a user can be identified by a search engine in response to a user query.
- the user query includes one or more search terms, and the search engine uses these terms to identify documents that are responsive to the user query.
- semantics related to the words in a language can be used to derive semantic relations among the words.
- a search engine can use these semantic relations as an aid in finding documents or terms that are related to the terms of the user query.
- semantic concepts are labeled according to classes, with each class representing a particular semantic concept.
- the semantic concept of painkillers can be represented by the class of the same name.
- Each class has one or more instances that belong to the class.
- An instance is an object that belongs to the class.
- the class “painkillers” includes the instances of cloxacillin, vicodin, and other types of drugs that are typically classified as painkillers.
- Each instance in turn, can have one or more attributes, each of which describes a quality or characteristic of the instance. Knowing what attributes are associated with the instance described by the search term (e.g., whether “cost” or “side effects” is associated with “cloxacillin”) can help the search engine in the search process.
- cloxacillin a conventional method can submit list-seeking queries that describe the instance or class (e.g., “cloxacillin” or “antibiotics”) as search terms to general-purpose web search engines and analyze documents retrieved in response to the queries.
- Common structural patterns e.g., Hyper-Text Markup Language (HTML) structures
- HTML Hyper-Text Markup Language
- one aspect of the subject matter described in this specification can be embodied in method that include the actions of receiving a first information instance, the first information instance being a first semantic object belonging to one or more first information classes, wherein the first semantic object is a word or a phrase; identifying second information instances related to the first information instance, each second information instance being a second semantic object belonging to one or more second information classes, wherein each second semantic object is a word or a phrase, and wherein each information class represents a particular semantic concept; identifying, in a graph stored in a memory and representing information instances and attributes describing the information instances, first attributes describing the first information instance and second attributes describing the second information instances, wherein the graph includes attribute nodes each representing a respective attribute, instance nodes each representing a respective information instance, and edges each connecting an attribute node and an instance node, each edge representing that a non zero likelihood exists that the attribute of the connected attribute is related to the information instance of the connected instance node, and
- the method can optionally include receiving a query including a query term, the query term identifying the first information instance; ranking the first and second attributes based on the relatedness values; refining the query using the first and second attributes according to the ranking of the first and second attributes based on the relatedness values; and displaying the refined query on a display device.
- Calculating the relatedness value can include calculating a weighted list that maps the first and second attributes to the first information instance and second information instances; and calculating a transition probability the first information instance and second information instances to the first and second attributes based on the weighted list.
- Calculating the transition probability can include calculating a weight of an attribute in reference to an information instance, the attribute being one among the first and second attributes, and the information instance being one among the first information instance and second information instances; dividing the weight by a sum of weights of all weights of the first and second attributes in reference to the information instance; and designating a quotient resulting from the dividing as the transition probability.
- Identifying the second information instances can include identifying one or more information classes to which the first information instance belongs; identifying information instances belonging to the identified information classes; and designating the identified information instances belonging to the identified information classes as the second information instances.
- Performing the random walks can include, from the first information instance, executing a first random move to one of the information classes; from the one of the information classes, executing a second random move to a second information instance belonging to the information class; and from the second information instance, executing a third random move to an attribute. Additionally or alternatively, performing the random walks can include, from the first information instance, executing a first random move to the first information instance; and from the first information instance, executing a second random move to an attribute.
- Identifying the second information instances based on the first information instances can include identifying the second information instances based on distributional similarities between the first information instance and the second information instances, the distributional similarities measuring an extent to which the first information instance and the second information instances appear in identical textual contexts.
- Performing the random walks can include, from the first information instance, executing a first random move to one of the second information instances; and from the one of the second information instances, executing a second random move to an attribute.
- Calculating the relatedness values can include calculating, for each attribute of the first and second attributes, a relatedness value that measures a relatedness between the first information instance and the attribute based on a probability that the random walks that start from the first information instance end at the attribute.
- FIG. 1 is a block diagram of an example system implementing techniques for extracting instance attributes from text.
- FIG. 2 is an example instance-attribute graph illustrating relationships between information instances and attributes.
- FIG. 3 is an example extended graph illustrating relationships between information instances and attributes based on class membership.
- FIG. 4 is an example graph illustrating relationships between information instances, classes, and attributes, including loop-back features.
- FIG. 5 is an example graph illustrating relationships between instances and attributes based on distribution similarity.
- FIG. 6 is an example graph illustrating relationships between instances and attributes based on distribution similarity and class membership.
- FIG. 7 is a flowchart illustrating an example process of extracting instance attributes from text.
- FIG. 1 is a block diagram of an example system 100 implementing techniques for extracting instance attributes from text.
- the system 100 extracts attributes from an example information instance 110 .
- the system 100 can receive information instance 110 , for example, from a query submitted by a user, from an electronic document hosted on a website, or from a data processing request submitted from an application program.
- the information instances are semantic objects that belong to information classes.
- the information classes each describe a semantic concept.
- an information class of “antibiotics” describes words that have meaning relating to a specific class of drugs.
- the information instance of “cloxacillin” is a specific semantic object, e.g., a word whose meaning relates to an identifiable instance of the information class.
- the system 100 can extract a set of attributes describing properties of information instance 110 . More specifically, using an attribute acquisition module 112 , the system 100 can retrieve the most relevant attributes (e.g., side effects, cost, etc.) that describe properties of information instance 110 .
- a property of information instance 110 is a property that is commonly associated with the information instance 110 historically or logically.
- the attribute acquisition module 112 can extract the relevant attributes from an instance-attribute database 108 .
- the instance-attribute database 108 stores known mappings between one or more instances and one or more attributes.
- the known mappings can be generated from text repository 102 .
- the text repository 102 can include historical user queries, web content, and other information that can be used as clues to associate a particular instance with an attribute.
- the system 100 can determine that the attribute “pharmacokinetics” describes at least one aspect or characteristic of information instance “cloxacillin,” and store a mapping between “pharmacokinetics” and “cloxacillin” in instance-attribute database 108 .
- the attribute acquisition module 112 can extract attributes that describe other information instances that are related to the information instance 110 .
- the information instance 110 is referred to as a first information instance, and the other information instances are referred to a second information instances.
- the attribute acquisition module 112 can associate the attributes describing the second information instances to the information instance 110 .
- the process of associating an attribute that describes a first information instance and that does not describe a second information instance is referred to as propagating the attribute.
- the attribute acquisition module 112 can increase the number of attributes associated with the information instance 110 to include both attributes that initially describe the information instance 110 and attributes that do not initially describe the information instance 110 .
- the attribute acquisition module 112 can identify the second information instances that are related to the information instance 110 by consulting relation databases (e.g., instance-instance database 104 and/or instance-class database 106 ).
- Instance-instance database 104 can store second information instances that are similarly distributed as an information instance. Distributional similarities can capture an extent to which textual contexts in which the words or phrases occur are similar, with the intuition that phrases that occur in similar contexts tend to share similar attributes. Two information instances are similarly distributed if they appear in a corpus of documents in a similar pattern, including, for example, appearing frequently in a same body of text. Distribution similarities can be measured using similarity scores, which can be calculated using an external process. Similarity scores can range from zero (two information instances never appear together or appear separately in common contexts in text) to one (two information instances always appear together).
- the system 100 can identify the second information instances that are similarly distributed as the first information instance by, for example, calculating a similarity score to be associated with the first and second information instance.
- the similarity score can measure how often the second information instances and first information instance appear in same contexts, e.g., in a same sentence, a same paragraph, a same electronic document, or a same website, based on an analysis of content in text repository 102 .
- the system 100 can determine that two information instances are similarly distributed when the similarity score satisfies a distribution similarity threshold.
- the system 100 can calculate a similarity score between “vicodin” and “cloxacillin” based on a frequency that the two terms appear together or in similar contexts, and determine that “vicodin” and “cloxacillin” are similarly distributed if the similarity score satisfies a threshold. Additionally or alternatively, the system 100 can calculate the similarity score between two information instances by examining a collection of user submitted queries in text repository 102 .
- the system 100 can determine that two information instances are similarly distributed even though the two instances are not exactly similar in text or in meaning. For example, the system 100 can determine that information instance “vicodin” is similarly distributed as information instance 110 “cloxacillin” because “vicodin” appears with “cloxacillin” within a same document or same user query sufficiently frequently, even though “vicodin” and “cloxacillin” may not be similar to each other in spelling or meaning.
- the system 100 can further consult instance-attribute database 108 to identify attributes (e.g., “pregnancy”) that describe the second information instances (e.g., “vicodin”) and propagate the attribute to the first information instance (e.g., “cloxacillin”).
- attributes e.g., “pregnancy”
- system includes an instance-class database 106 .
- Instance-class database 106 can store information instances as well as classes to which the information instances belong. Information instances in a same class share similar traits.
- a class of instances can be in the form of a set of instances (e.g., ⁇ “ampicillin,” “oxacillin,” “cloxacillin,” “benzylpenicillin” ⁇ ) associated with a corresponding class label (e.g., “antibiotics”) that describes the shared trait.
- the classes will be referred to by their class labels (e.g., as “class ‘antibiotics”).
- Classes of information instances can be generated from content (e.g., webpages and/or user queries) in text repository 102 using various information classification techniques from a third party.
- attribute acquisition module 112 can identify the classes (e.g., “antibiotics”) to which the first information instance (e.g., information instance 110 ) belongs. Attribute acquisition module 112 can further identify the second information instances (e.g., “ampicillin” and “oxacillin”) that belong to the same classes, for example, by consulting the instance-class database 106 again. Attribute acquisition module 112 can consult instance-attribute database 108 to identify attributes that describe the second information instances. For example, system can identify attribute “side effects” describing “ampicillin” and attribute “cost” describing “oxacillin.”
- classes e.g., “antibiotics”
- Attribute acquisition module 112 can further identify the second information instances (e.g., “ampicillin” and “oxacillin”) that belong to the same classes, for example, by consulting the instance-class database 106 again. Attribute acquisition module 112 can consult instance-attribute database 108 to identify attributes that describe the second information instances. For example
- Attribute acquisition module 112 of the system 100 can aggregate the attributes “pharmacokinetics” (directly describing information instance 110 ), “side effects” (describing second information instance “ampicillin”), “cost” (describing second information instance “oxacillin”), and “pregnancy” (describing second information instance “vicodin”). Attribute acquisition module 112 can designate the aggregated attributes 114 as instance attributes extracted for information instance 110 “cloxacillin” and the attributes for the other instances.
- the system 100 propagates the attributes (e.g., “side effects”) from one information instance (e.g., “ampicillin”) to another information instance (e.g., information instance 110 “cloxacillin”), thus increasing the number of attributes associated with the information instance.
- Aggregated attributes 114 can have various uses (e.g., for refining a user's search query or for generating a list of properties describing various aspects of a particular term).
- Information instance 110 can belong to a large number of classes (e.g., “penicillin,” “Beta-lactam antibiotics,” “antibiotics,” “prescription medicine,” “medicine,” and so on). Likewise, each class can include a large number of instances. In addition, many second information instances can be distributed similarly to information instance 110 . Each information instance can have a large number of attributes. In propagating the attributes, the system 100 can identify which of those attributes do describe the properties of information instance 110 , and which ones do not. The system 100 can make the identification by calculating a relatedness value for each attribute and ranking the attributes. The system 100 can limit the attributes propagated to information instance 110 to those attributes that, measured by a relatedness value, are most likely to describe the properties of information instance 110 . Other attributes (e.g., lower-ranked attributes) can be omitted from propagation. Further details on how the system 100 identifies relevant attributes associated with information instance 110 are described below.
- classes e.g., “penicillin,” “Beta-lactam antibiotics,” “
- FIG. 2 is an example instance-attribute graph 200 illustrating relationships between information instances and attributes.
- instance-attribute graph 200 will be described in reference to system 100 , which can store graph 200 in one or more data structures on a memory device of the system 100 .
- the system 100 can use instance-attribute graph 200 to identify the relevant attributes for an information instance.
- instance-attribute graph 200 The topology of instance-attribute graph 200 will be used to illustrate information instances and attributes describing properties of the information instances.
- Instance-attribute graph 200 includes attribute nodes 202 a - e and instance nodes 242 a - b as well as edges between attribute nodes 202 and instance nodes 242 .
- Attribute nodes 202 a - e can represent attributes a(0)-a(4), respectively.
- Instance nodes 242 a and 242 b can represent two information instances i(0) and i(1), respectively.
- An edge between an instance node (e.g., instance node 242 a ) and an attribute node (e.g., attribute node 202 b ) can indicate that there is a likelihood (e.g., a probability that is greater than zero) that instance node 242 a is related to attribute node 202 b .
- Each edge is associated with a value (e.g., P(0,1)) that is used to calculate a probability of transition in a random walk from an information instance to an attribute (e.g., from information instances i(0) to attribute a(1)), which will be used to identify the relevant attributes.
- the random walk is a computer formalization of a trajectory that includes taking successive random moves from one node (source) of a graph to another node (target) of the graph. Each move is associated with a probability of transition (or transition probability), which defines the probability of starting from a source node (e.g., node 242 a ) to a destination node (e.g., node 202 b ).
- A(j) is the weighted list of all attributes of information instance i(j)
- a(m) is an attribute
- w(j, m) is a weight of the relationship between information instance i(j) and attribute a(m) as determined by the existing attribute extraction method
- is a number of attributes in the set.
- A(j) can include all attributes for all information instances, even those that are not deemed to be related to information instance i(j).
- the system 100 normalizes the weights in the list such that the weights sum up to a normalized total (e.g., one). Using the normalized weight, the system 100 calculates values of all edges in FIG. 2 .
- a value e.g., value P(0, 1) of an edge (e.g., the edge between instance node 242 a representing information instance i(0) and attribute node 202 b representing attribute a(1)) is used to measure a probability of transitioning from information instance i(0) to of attribute a(1).
- a probability of transitioning from information instance i(j) to attribute a(k) is, in some implementations, calculated using the following formula:
- P(j, k) is the probability of transition between information instance i(j) and attribute a(k).
- A is a set of all attributes for all information instances.
- A is a set of attributes that are related to information instance i(j).
- W(j, k) is a weight of attribute a(k) in reference to information instance i(j).
- W(j, k) can have a value of zero in some situations (e.g., when attribute a(k) does not describe information instance i(j)). In these situations, P(j, k) can have a value of zero.
- the edges between an information instance (e.g., information instance i(0)) and attributes that do not describe the information instance (e.g., attributes a(2)-a(4)) can be omitted from graph 200 . In some implementations, these edges can be represented in graph 200 , where each of these edges can be associated with a transition probability of zero.
- the system 100 initially identifies only attributes a(0) and a(1) for i(0) from instance-attribute database 108 , and the system 100 initially identifies only attributes a(2), a(3), and a(4) for i(1) from the same database. Under these circumstances, using the propagation process, the system 100 can still relate all attributes a(0)-a(4) to both information instances i(0) and i(1) as attributes that describe information instances i(0) and i(1), if the system 100 determines that information instances i(0) and i(1) are related.
- edges between an information instance and attributes initially identified as describing the information instance are represented in solid lines, where edges between an information instance and attributes that are propagated to the information instance are represented in dashed lines.
- propagating the attributes includes creating edges between an information instance attributes that are propagated to the information instance.
- the dashed lines are added after the random walks are performed.
- the system 100 can create the edges between instance nodes 242 and attribute nodes 202 if original edges between an information instance and attributes that do not describe the information instance (e.g., the dashed lines) were not initially included from graph 200 .
- the dashed lines are in existence before the random walks are performed.
- the system 100 can adjust the transition probability for an existing edge if the original edges between an information instance and attributes that do not describe the information instance (e.g., the dashed lines) were included in graph 200 but each has an original transition probability of zero.
- FIG. 3 is an example extended graph 300 illustrating relationships between information instances and attributes based on class membership.
- Extended graph 300 can be an extension of instance-attribute graph 200 .
- extended graph 300 will be described in reference to system 100 , which can store the extended graph 300 in one or more data structures on a memory device of the system 100 .
- Extended graph 300 includes instance nodes 244 and attribute nodes 204 , as well as edges between instance nodes 244 and attribute nodes 204 .
- the edges are associated with probabilities of transition from instance nodes 244 to attribute nodes 204 .
- the extended graph 300 can further include class nodes 245 a and 245 b , representing information classes c(0) and c(1).
- Information instances i(0) and i(1) can relate to each other in various ways. For example, some types of relationships between information instances i(0) and i(1) are described in “IsA” pairs, where each of the information instances i(0) and i(1) “is a” particular instance of a class (e.g., class c(0) or c(1)) and forms an “IsA” pair with the class.
- Information instances i(0) and i(1) can each be a member of multiple classes. For example, information instances i(0) and i(1) can each form an “IsA” pair with class c(0) and an “IsA” pair with class c(1).
- IsA pairs can be represented as weighted pairs that include an information instance and an associated class (e.g., information instance “audi” and class “car manufacturers”; or information instance “cloxacillin” and class “antibiotics”). If two information instances belong to a same class, the system 100 can determine that the two information instances are likely to share attributes. For example, if information instances i(0) and i(1) belong to a same class (e.g., c(0)), the system 100 can determine that attribute a(0), which describes information instances i(0), is likely to also describe information instance i(1).
- the “IsA” pairs allow for an extension of instance-attribute graph 200 , by adding a layer for the classes c(0) and c(1).
- Classes c(0) and c(1) of information instance i(0) and i(1) can be identified using existing information classification methods.
- the existing information classification methods can also be used to calculate a weight measuring a probability the a particular information instance (e.g., information instance i(0)) belongs to a particular class (e.g., class c(1)). From the classes and weights, the system 100 creates a weighted list of classes for an information instance.
- C ( j ) [( c (0), w ( j, 0)),( c (1), w ( j, 1)), . . . ,( c (
- C(j) is the weighted list of all classes to which information instance i(j) belongs
- is a number of all classes
- w(j, m) is a weight calculated by the existing method that represents a probability that information instance i(j) belongs to class c(m).
- C(j) includes all classes, even those classes to which information instance i(j) does not belong.
- the weights in the weighted list C(j) are normalized such that all weights add up to a normalized total (e.g., one).
- the system 100 uses the normalized weights to produce a class probability distribution P(c, j, m), where c(m) is a class of the information instance i(j), and “c” is a notation mark indicating that the probability transition is from an information instance to a class.
- probability P(c, j, m) measures a probability of transitioning from information instance i(j) to a class c(m).
- the probability distributions P(c, j, m) are associated with edges pointing from instance nodes 244 to class nodes 245 .
- aggregation and normalization of weights by classes e.g., classes c(0) and c(1)
- information instances e.g., information instances i(0) and i(1)
- P(i, m, j) a probability distribution of weights by classes (e.g., classes c(0) and c(1)) rather than information instances (e.g., information instances i(0) and i(1))
- a probability distribution P(i, m, j) which indicates a probability of transitioning from a class c(m) to an information instance i(j) in extended graph 300 , where “i” is a notation mark indicating that the probability transition is from a class to an information instance.
- the probability distribution P(i, m, j) can be associated with edges pointing from class nodes 245 to instance nodes 244 .
- Extended graph 300 can be used to propagate attributes across information instances using random walks.
- the system 100 performs random walks on extended graph 300 by taking successive random moves.
- the random walks are used to propagate attributes from one information instance (e.g., information instance i(1)) to another (e.g., information instance i(0)) when the two information instances belong to a same class (e.g., class c(0) and/or c(1)).
- the following random moves are performed during the random walks on extended graph 300 :
- each original information instance i(j) is assigned a ranked list of attributes, where the attributes can be sorted by the probability of reaching them when departing an instance node representing information instance i(j) via the three stages.
- the system 100 can apply a threshold value to the ranked list. Those attributes having probabilities of being reached that satisfy the threshold can be associated to the information instance i(j) as instance attributes.
- FIG. 4 is an example graph 400 illustrating relationships between information instances, classes, and attributes including loop-back features.
- graph 400 will be described in reference to system 100 , which can store graph 400 in one or more data structures on a memory device of the system 100 .
- Graph 400 includes instance nodes 246 and attribute nodes 206 , as well as edges between instance nodes 246 and attribute nodes 206 .
- the edges are associated with probabilities of transition from instance nodes 246 to attribute nodes 206 .
- graph 400 includes class nodes 247 a and 247 b , representing information classes c(0) and c(1). Edges between instance nodes 246 and class nodes 247 are associated with probabilities of transitions from instance nodes 246 to class nodes 247 as well as probabilities of transition from class nodes 247 to instance nodes 246 .
- edges 232 are added.
- Edges 232 are loop-back edges that point from an instance node 246 back to the same instance node 246 .
- edge 232 a can point from instance node 246 a (representing information instance i(0)) back to instance node 246 a
- edge 232 b can point from instance node 246 b (representing information instance i(1)) back to instance node 246 b .
- Edges 232 can be utilized to address the situations in which an information instance is not related with any class, and for distinguishing which attributes were initially assigned to the information instance.
- edge 232 a is utilized as an alternative to stages (1) and (2) of the random walk as described above. Lacking a class to which information instance i(0) belongs, a random move cannot be made from information instance i(0) to a non-existent class of information instance i(0). Edge 232 a allows the move to a class to be skipped. For example, the system 100 can perform a move from information instance i(0) to information instance i(0) in place of the stages (1) and (2) of the random walks, following edge 232 a.
- the edges 232 can be utilized to provide additional ways to retain information distinguishing which attributes were initially assigned to the information instances (e.g., attributes a(0) and a(1) to information instance i(0)), and which attributes are propagated (e.g., attributes a(2), a(3), and a(4) originally assigned to information instance i(1) and propagated to information instance i(0)).
- Some advantages of retaining the information include reducing an impact of possible noise in the classes. For example, some classes are general catchall classes (e.g., a class of information “cloxacillin” can be “entities” or “kinds”), which may not be particularly useful during attribute propagation.
- Some advantages of retaining the information can alternatively or additionally include enhancing the ability to distinguish accidental common class membership.
- information instances i(0) and i(1) belong to the same class
- the most prominent attributes of the two information instances can be significantly different within a given textual data source.
- the most salient attributes for the former typically relate to “leader” and “political system,” whereas the most salient attributes for the latter typically relate to “tourism,” “geography,” and “history.”
- Edges 232 are added in graph 400 to address the issues arising from “catch-all” classes and accidental common class membership. Each edge 232 is associated with a transition probability equal to a value P(I).
- P(I) is a configurable constant.
- the propagation of attributes using classes includes modified random walks that proceed as follows:
- FIG. 5 is an example graph 500 illustrating relationships between information instances and attributes based on distribution similarity. For convenience, graph 500 will be described in reference to the system 100 , which can store extended graph 500 in one or more data structures on a memory device of the system 100 .
- Distributional similarities can scale well to large text collections, since acquisition of distributional similarities can be done through parallel implementations. Distributional similarities can be calculated by a process external to the system 100 , or, alternatively, the system 100 can be configured to determine distributional similarities.
- Extended graph 500 includes instance nodes 248 and attribute nodes 208 , as well as edges between instance nodes 248 and attribute nodes 208 .
- the edges between instance nodes 248 and attribute nodes 208 can be associated with probabilities of transition from instance nodes 248 to attribute nodes 208 .
- the system 100 can use existing methods to extract similarly distributed information instances for a given information instance i(j).
- I is the weighted list all information instances distributionally similar to information instance i(j)
- is a number of all information instances
- w(j, m) is a weight (e.g., a similarity score) between information instances i(j) and i(m), calculated by the existing method.
- the weights can be normalized such that all weights add up to a normalized total (e.g. one).
- Edges from instance nodes 248 to attribute nodes 208 of graph 500 are associated with the normalized weights.
- edges 236 are added to graph 500 , each edge 236 corresponding to a probably of transition for one instance node (e.g., instance node 248 a representing an information instance i(0)) to another instance node (e.g., instance node 248 b representing a similarly distributed information instance i(1)).
- Edges 234 representing transitions from each instance node 248 to itself are added.
- Each edge 234 (e.g., edge 234 a ) is associated with a probability P(I).
- Probability P(I) can be tuned to give more or less weight to the original attributes (e.g., attributes a(0) and a(1) of information instance i(0)) over propagated attributes (e.g., attributes a(2), a(3), and a(4) of information instance i(i)).
- the system 100 can propagate the attributes in a two-stage process, first transitioning from an instance node (e.g., instance node 248 a ) to itself or to other instance nodes representing similar information instances (e.g., instance node 248 b ), and then transitioning to attribute nodes (e.g., attribute nodes 208 ).
- an instance node e.g., instance node 248 a
- other instance nodes representing similar information instances
- attribute nodes e.g., attribute nodes 208
- FIG. 6 is an example graph 600 illustrating relationships between information instances and attributes based on distribution similarity and class membership. For convenience, graph 600 will be described in reference to the system 100 , which can store extended graph 600 in one or more data structures on a memory device of the system 100 .
- Graph 600 includes instance nodes 250 and attribute nodes 210 , as well as edges between instance nodes 250 and attribute nodes 210 .
- the edges are associated with probabilities of transition from instance nodes 250 to attribute nodes 210 .
- graph 600 can further include class nodes 251 a and 251 b , representing information classes c(0) and c(1).
- Graph 600 includes edges between instance nodes 250 and class nodes 251 as well as edges between instance nodes 250 and instance nodes 250 , each edge associated with a transition probability.
- probabilities that are associated with edges going out from instance nodes 250 are normalized so their sum is a normalized total (e.g., one):
- P(s, j, m) is a probability of transition from information instance i(j) to information instance i(m) that is similarly distributed as i(j); s is a notation mark meaning a transition from one instance to another instance; P(c, j, n) is a probability of transition from information instance i(j) to class c(n) to which information instance i(j) belongs; I is a set of all information instances similarly distributed as i(j), and C is a set of all classes to which information instance i(j) belongs.
- P(I) is a value designated for looping back (e.g., from information instance i(j) back to i(j)
- the system 100 propagates attributes (e.g., attributes a(2), a(3), and a(4) that describe one information instance (e.g., information instance i(1)) to another information instance (e.g., information instance i(0)).
- the propagation can be a two-stage process. In a first stage, the system 100 can calculate, for each instance node 250 , the probability of transitioning to any instance node 250 in graph 600 by either one of the following moves:
- the system 100 can move from an instance node 250 reached in the first stage to an attribute node 210 .
- the system can calculate a probability of transitioning from an information instance i(j) to an attribute a(k), which is governed by transition probability P(i, k).
- the system 100 calculates a relatedness value between an information instance and an attribute using the following formula:
- R(j, k) is the relatedness value between information instance i(j) and attribute a(k);
- P(I) is a loop-back transition probability from information instance i(j) to i(j);
- P(s, j, m) is a transition probability from information instance i(j) to i(m); I is the set
- the system 100 can acquire a ranked list of attributes [a(0), a(1), a(2), . . . , a(n)], such that as many relevant attributes as possible are among the attributes situated earlier in the ranked list.
- FIG. 7 is a flowchart illustrating an example process 700 of extracting instance attributes from text.
- the process 700 can, for example, be implemented in a system such as the system 100 of FIG. 1 .
- the system receives a first information instance.
- the first information instance is a first semantic object belonging to one or more first information classes.
- the system receives a query including a query term.
- the query term can identify the first information instance.
- the system 100 can receive a search query that includes a term “cloxacillin” that can be identified as information instance 110 .
- the system identifies a second information instance related to the first information instance.
- the second information instances are second semantic objects belonging to the one or more second information classes.
- the system 100 can identify the information instances “ampicillin,” “oxacillin,” and “vicodin” that are related to information instance 110 “cloxacillin.”
- the second information instances can be identified by “IsA” relations with one or more classes (e.g., “antibiotics”), or distributional similarity, or both.
- the system identifies second information instances when the second information instances form “IsA” pairs with a class with which the first information instance is in an “IsA” relationship.
- the system identifies the second information instances when the second information instances belong to the same classes as the first information instance does.
- the system identifies one or more classes (e.g., classes c(0) and c(1) of FIG. 3 ) to which the first information instance (e.g., information instance i(0) of FIG. 3 ) belongs.
- the system identifies other information instances (e.g., information instance i(1)) belonging to the identified information classes.
- the system designates the identified information instances (e.g., information instance i(1)) belonging to the identified information classes as the second information instances.
- the system can identify the classes and information instances belong to the classes using instance-class database 106 .
- the system identifies the second information instances based on distributional similarities between the first information instance (e.g., information instance i(0) of FIG. 5 ) and the second information instances (e.g., information instance i(1) of FIG. 5 ).
- the distributional similarities can measure an extent to which the first information instance and the second information instance appear in identical textual contexts.
- the textual contexts can include a set of user queries as well as a set of web pages and other electronic document.
- the distributional similarities can be stored in, for example, instance-instance database 104 .
- the system identifies, in a graph stored in a memory and representing information instances and attributes that describe the information instances, first attributes describing the first information instance and second attributes describing the second information instances.
- the graph can be, for example, graph 200 of FIG. 2 including first information instance i(0) and a second information instance i(1), and attributes a(0) through a(4).
- the graph can have edges that represent probabilities of transition from the information instances to the attributes, as described above in reference to FIG. 2 .
- the graph can be stored in instance-attribute database 108 .
- the system performs random walks in the graph from the first information instance to the identified attributes through the second information instances.
- the system adds class nodes (e.g., class nodes 251 of FIG. 6 ), various edges between information instances and classes (e.g., edges between instance nodes 250 and class nodes 251 ), various edges between information instances (e.g., edges between instance nodes 250 a and 250 b ), and various loop-back edges (e.g., edges 238 ).
- the system performs the random walks following the paths that are made of the edges.
- the system performs the random walks following a path that starts from the first information instance (e.g., information instance i(0) of FIG. 6 ) to a class (e.g., class c(0) of FIG. 6 ), from the class to the second information instances (e.g., information instance i(1) of FIG. 6 ), and from the second information instances to the attributes (e.g., attributes a(0) through a(4) of FIG. 6 ).
- the system performs the random walks following a path that starts from the first information instance (e.g., information instance i(0) of FIG. 6 ) to the second information instances (e.g., information instance i(1) of FIG.
- stage 708 includes performing random walks from the first information instance to the first information instance (e.g., following edges 238 of FIG. 6 ), and then from the first information instance to the attributes (e.g., a(0)-a(4) of FIG. 6 ).
- the system calculates relatedness values that measure transition probabilities of the random walks from the first information instance to the first attributes (e.g., attributes that directly describe the first information instance), and from the first information instance to the second attributes (e.g., attributes that are propagated to the first information instance).
- Calculating the relatedness values can include calculating, for each attribute of the first and second attributes, a relatedness value that measures a relatedness between the first information instance and the attribute based on a probability that the random walks that start from the first information instance end at the attribute.
- the relatedness value between a first information instance e.g., information instance i(0) of FIG. 6
- a particular attribute e.g., attribute a(0) of FIG. 6
- the relatedness value between the information instance and the attribute is calculated using formula (6) as described above.
- calculating the transition probability in stage 712 includes calculating a weight of an attribute in reference to an information instance.
- the attribute can be one among the first and second attributes (e.g., any attribute a(0) through a(4) of FIG. 26 ).
- the information instance can be one among the first information instance and second information instances (e.g., any information instance i(0) or i(1) of FIG. 6 ).
- the system can divide the weight by a sum of weights of all weights of the first and second attributes in reference to the information instance, and designating a quotient resulting from the dividing as the transition probability.
- the system can calculate the transition probability using formula (2) as described above.
- the system stores at least a portion of the first and second attributes in association with the first information instance on a storage device based on the relatedness values.
- the system ranks the first and second attributes (e.g., attributes a(0)-a(4) of FIG. 6 ) based on the relatedness values between each of the first and second attributes and the first information instance (e.g., information instance i(0) of FIG. 6 ).
- the system stores one or more top-ranked attributes in association with the first information instance.
- the system determines a threshold value.
- the system stores one or more attributes whose relatedness values corresponding to the first information instance satisfies the threshold.
- the system uses result of the relatedness values to refine queries.
- the first information instance (e.g., information instance i(0) of FIG. 6 ) can be identified by a query term from a query received by the system.
- the system can rank the first and second attributes based on the relatedness values.
- the system refines the query using the first and second attributes according to the rankings of the first and second attributes based on the relatedness values.
- the system can display the refined query on a display device. For example, the system receives a user query that contains a term that identifies “cloxacillin” as information instance 110 .
- the system identifies a first attribute (e.g., “pharmacokinetics”) and second attributes (e.g., “side effects,” “cost,” and “pregnancy”).
- the system ranks the attributes and uses the ranked attributes to refine the query.
- the refined query can include terms “cloxacillin pharmacokinetics” or “cloxacillin side effects.”
- the system can display the refined query on a display device.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal
- a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, a personal computer system, desktop computer, laptop, notebook, netbook computer, mainframe computer system, handheld computer, workstation, network computer, application server, storage device, a consumer electronics device such as a camera, camcorder, set top box, mobile device, video game console, handheld video game device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- code that creates an execution environment for the computer program in question e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program can, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, a network routing device, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or a routing device, e.g., a network router, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs executing on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
- An electronic document (which for brevity will simply be referred to as a document) can, but need not, correspond to a file.
- a document can be stored in a portion of a file that holds other documents, in a single file dedicated to the document in question, or in multiple coordinated files.
- the apparatus, methods, flow diagrams, and structure block diagrams described in this patent document may be implemented in computer processing systems including program code comprising program instructions that are executable by the computer processing system. Other implementations may also be used. Additionally, the flow diagrams and structure block diagrams described in this patent document, which describe particular methods and/or corresponding acts in support of steps and corresponding functions in support of disclosed structural means, may also be utilized to implement corresponding software structures and algorithms, and equivalents thereof.
Abstract
Description
A(j)=[(a(0),w(j,0)),(a(1),w(j,1)), . . . ,(a(|A|),w(j,|A|))] (1)
where A(j) is the weighted list of all attributes of information instance i(j), a(m) is an attribute, w(j, m) is a weight of the relationship between information instance i(j) and attribute a(m) as determined by the existing attribute extraction method, and |A| is a number of attributes in the set. In some implementations, A(j) can include all attributes for all information instances, even those that are not deemed to be related to information instance i(j). An attribute (e.g., attribute a(n)) that does not describe information instance i(j) can have a weight of zero (e.g., w(j, n)=0).
where P(j, k) is the probability of transition between information instance i(j) and attribute a(k). In some implementations, A is a set of all attributes for all information instances. In other implementations, A is a set of attributes that are related to information instance i(j). W(j, k) is a weight of attribute a(k) in reference to information instance i(j).
C(j)=[(c(0),w(j,0)),(c(1),w(j,1)), . . . ,(c(|C|),w(j,|C|))] (3)
where C(j) is the weighted list of all classes to which information instance i(j) belongs, |C| is a number of all classes, and w(j, m) is a weight calculated by the existing method that represents a probability that information instance i(j) belongs to class c(m). In some implementations, C(j) includes all classes, even those classes to which information instance i(j) does not belong. The weight between the information instance i(j) and a class c(k) to which information instance i(j) does not belong is zero (e.g., w(j, k)=0).
-
- 1. From an instance node 244 (e.g.,
instance node 244 a, representing information instance i(0)), execute a random move to one of the class nodes of the instance node (e.g.,class node 245 a, representing class c(0), to which information instance i(0) belongs). The probability of the move is governed by the probability P(c, j, m) where j and m can be values indicating source and destination, respectively (e.g., j=0 and m=1, when the move is from information instance i(0) to class c(1)). The moves can follow the edges pointing from instance nodes 244 to class nodes 245. - 2. From a class node 245 reached in stage (1) (e.g.,
class node 245 a representing class c(0)), execute a random move to an instance node that belongs to the class node (e.g.,instance node 244 b, representing information instance i(i) that belongs to class c(0)). The probability of each move is governed by probability P(i, m, j) where j and m can be values indicating source and destination, respectively (e.g., j=1 and m=1, when the move is from class c(1) to information instance i(1)). The move can follow the edges pointing from class nodes 245 to instance node 244. - 3. From an instance node 244 reached in stage (2) (e.g.,
instance node 244 b, representing information instance i(1)), execute a random move to one of the attribute nodes of the instance node (e.g., attributenode 204 c, representing attribute a(2), which describes information instance i(1)). The probability of each move is governed by the probability P(j, m) where j and m can be values indicating source and destination, respectively (e.g., j=1 and m=2, when the move is from information instance i(1) to attribute a(2)). The move can follow the edges pointing from instance nodes 244 to attribute nodes 204.
- 1. From an instance node 244 (e.g.,
-
- 1. From each instance node (e.g.,
instance node 246 a representing information instance i(0)), with probability P(I), remain in the same instance node. With probability 1.0-P(I), start a random walk, which will have two stages (e.g., to class nodes 247, and to other instances nodes 246). - 2. From an instance node that has been reached in stage (1) (e.g.,
instance node 246 a representing information instance i(0)), execute a random move to an attribute node 206, following the edges between instance nodes 246 to attribute nodes 206 ingraph 400. By the end, each original information instance i(j) can be assigned a list of attributes. The list of attributes can be a ranked list, sorted by the probability of reaching them when departing from information instance i(j).
- 1. From each instance node (e.g.,
I(j)=[(i(0),w(j,0)),(i(1),w(j,1)), . . . ,(i(|I|),w(j,|I|))] (4)
where I is the weighted list all information instances distributionally similar to information instance i(j), |I| is a number of all information instances, and w(j, m) is a weight (e.g., a similarity score) between information instances i(j) and i(m), calculated by the existing method. In some implementations, I is a list of all information instances, regardless of weather the information instances are distributionally similar to information instance i(j). For those information instances (e.g., i(k)) not distributionally similar to information instance i(j), the weight can be zero (e.g., w(j, k)=0). The weights can be normalized such that all weights add up to a normalized total (e.g. one).
where P(s, j, m) is a probability of transition from information instance i(j) to information instance i(m) that is similarly distributed as i(j); s is a notation mark meaning a transition from one instance to another instance; P(c, j, n) is a probability of transition from information instance i(j) to class c(n) to which information instance i(j) belongs; I is a set of all information instances similarly distributed as i(j), and C is a set of all classes to which information instance i(j) belongs. P(I) is a value designated for looping back (e.g., from information instance i(j) back to i(j)). An example value of P(I) is ⅓.
-
- 1. by following the self-loop (e.g., edges 238 a and 238 b), governed by probability P(I);
- 2. by randomly walking in two moves through the class nodes, for example, by following edges from
instance nodes 250 to class nodes 251 and from class nodes 251 toinstance nodes 250. The probability of the transition from an information instance i(j) to an information instance i(k) through a class c(m) can be calculated from transition probabilities P(c, j, m) and P(i, m, k); or - 3. by randomly walking to a distributionally similar information instance, for example, by following edges from one
instance node 250 to another instance node. The probability of the transition from a first information instance i(j) to a second information instance i(k) can be calculated from transition probability P(s, j, k).
where R(j, k) is the relatedness value between information instance i(j) and attribute a(k); P(I) is a loop-back transition probability from information instance i(j) to i(j); P(s, j, m) is a transition probability from information instance i(j) to i(m); I is the set of all information instances; |I| is a number of all information instances, P(c, j, l) is a transition probability from information instance i(j) to class c(1); C is the set of all classes; |C| is a number of all classes, and P(i, l, n) is a transition probability from a class c(1) to an instance i(n). The values P(I), P(s, j, m), and P(c, j, 1) satisfy the constraints set forth in formula (5).
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/027,586 US8983898B1 (en) | 2010-04-09 | 2013-09-16 | Extracting instance attributes from text |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US32280110P | 2010-04-09 | 2010-04-09 | |
US13/084,504 US8538916B1 (en) | 2010-04-09 | 2011-04-11 | Extracting instance attributes from text |
US14/027,586 US8983898B1 (en) | 2010-04-09 | 2013-09-16 | Extracting instance attributes from text |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/084,504 Continuation US8538916B1 (en) | 2010-04-09 | 2011-04-11 | Extracting instance attributes from text |
Publications (1)
Publication Number | Publication Date |
---|---|
US8983898B1 true US8983898B1 (en) | 2015-03-17 |
Family
ID=49122488
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/084,504 Expired - Fee Related US8538916B1 (en) | 2010-04-09 | 2011-04-11 | Extracting instance attributes from text |
US14/027,586 Active US8983898B1 (en) | 2010-04-09 | 2013-09-16 | Extracting instance attributes from text |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/084,504 Expired - Fee Related US8538916B1 (en) | 2010-04-09 | 2011-04-11 | Extracting instance attributes from text |
Country Status (1)
Country | Link |
---|---|
US (2) | US8538916B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120221549A1 (en) * | 2010-10-28 | 2012-08-30 | Sap Ag | Database Calculation Engine |
US20150112994A9 (en) * | 2010-09-03 | 2015-04-23 | Robert Lewis Jackson, JR. | Automated stratification of graph display |
US9128998B2 (en) | 2010-09-03 | 2015-09-08 | Robert Lewis Jackson, JR. | Presentation of data object hierarchies |
CN107038211A (en) * | 2017-02-28 | 2017-08-11 | 大连理工大学 | A kind of paper impact factor appraisal procedure based on quantum migration |
CN107133266A (en) * | 2017-03-31 | 2017-09-05 | 北京奇艺世纪科技有限公司 | The detection method and device and database update method and device of video lens classification |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9264505B2 (en) * | 2013-01-31 | 2016-02-16 | Hewlett Packard Enterprise Development Lp | Building a semantics graph for an enterprise communication network |
US9355166B2 (en) * | 2013-01-31 | 2016-05-31 | Hewlett Packard Enterprise Development Lp | Clustering signifiers in a semantics graph |
US20150227973A1 (en) * | 2013-02-20 | 2015-08-13 | Stremor Corporation | Systems and methods for organizing search results and targeting advertisements |
CN104615687B (en) * | 2015-01-22 | 2018-05-22 | 中国科学院计算技术研究所 | A kind of entity fine grit classification method and system towards knowledge base update |
CN110246550B (en) * | 2019-06-12 | 2022-12-06 | 西安电子科技大学 | Drug combination prediction method based on drug similarity network data |
Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010000356A1 (en) | 1995-07-07 | 2001-04-19 | Woods William A. | Method and apparatus for generating query responses in a computer-based document retrieval system |
US20040034632A1 (en) | 2002-07-31 | 2004-02-19 | International Business Machines Corporation | Automatic query refinement |
US6823333B2 (en) | 2001-03-02 | 2004-11-23 | The United States Of America As Represented By The Administrator Of The National Aeronautics And Space Administration | System, method and apparatus for conducting a keyterm search |
US20050198026A1 (en) | 2004-02-03 | 2005-09-08 | Dehlinger Peter J. | Code, system, and method for generating concepts |
US20070233656A1 (en) | 2006-03-31 | 2007-10-04 | Bunescu Razvan C | Disambiguation of Named Entities |
US7366715B2 (en) | 2003-12-17 | 2008-04-29 | International Business Machines Corporation | Processing, browsing and extracting information from an electronic document |
US20090083226A1 (en) | 2007-09-20 | 2009-03-26 | Jaya Kawale | Techniques for modifying a query based on query associations |
US20090271363A1 (en) | 2008-04-24 | 2009-10-29 | Lexisnexis Risk & Information Analytics Group Inc. | Adaptive clustering of records and entity representations |
US20090282012A1 (en) | 2008-05-05 | 2009-11-12 | Microsoft Corporation | Leveraging cross-document context to label entity |
US20100145678A1 (en) | 2008-11-06 | 2010-06-10 | University Of North Texas | Method, System and Apparatus for Automatic Keyword Extraction |
US20100195909A1 (en) | 2003-11-19 | 2010-08-05 | Wasson Mark D | System and method for extracting information from text using text annotation and fact extraction |
US20110035456A1 (en) | 2009-08-05 | 2011-02-10 | Disney Enterprises, Inc. | Methods and arrangements for content filtering |
US7890526B1 (en) | 2003-12-30 | 2011-02-15 | Microsoft Corporation | Incremental query refinement |
-
2011
- 2011-04-11 US US13/084,504 patent/US8538916B1/en not_active Expired - Fee Related
-
2013
- 2013-09-16 US US14/027,586 patent/US8983898B1/en active Active
Patent Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010000356A1 (en) | 1995-07-07 | 2001-04-19 | Woods William A. | Method and apparatus for generating query responses in a computer-based document retrieval system |
US6823333B2 (en) | 2001-03-02 | 2004-11-23 | The United States Of America As Represented By The Administrator Of The National Aeronautics And Space Administration | System, method and apparatus for conducting a keyterm search |
US20040034632A1 (en) | 2002-07-31 | 2004-02-19 | International Business Machines Corporation | Automatic query refinement |
US20100195909A1 (en) | 2003-11-19 | 2010-08-05 | Wasson Mark D | System and method for extracting information from text using text annotation and fact extraction |
US7366715B2 (en) | 2003-12-17 | 2008-04-29 | International Business Machines Corporation | Processing, browsing and extracting information from an electronic document |
US7890526B1 (en) | 2003-12-30 | 2011-02-15 | Microsoft Corporation | Incremental query refinement |
US20050198026A1 (en) | 2004-02-03 | 2005-09-08 | Dehlinger Peter J. | Code, system, and method for generating concepts |
US20070233656A1 (en) | 2006-03-31 | 2007-10-04 | Bunescu Razvan C | Disambiguation of Named Entities |
US20090083226A1 (en) | 2007-09-20 | 2009-03-26 | Jaya Kawale | Techniques for modifying a query based on query associations |
US20090271363A1 (en) | 2008-04-24 | 2009-10-29 | Lexisnexis Risk & Information Analytics Group Inc. | Adaptive clustering of records and entity representations |
US20090282012A1 (en) | 2008-05-05 | 2009-11-12 | Microsoft Corporation | Leveraging cross-document context to label entity |
US20100145678A1 (en) | 2008-11-06 | 2010-06-10 | University Of North Texas | Method, System and Apparatus for Automatic Keyword Extraction |
US20110035456A1 (en) | 2009-08-05 | 2011-02-10 | Disney Enterprises, Inc. | Methods and arrangements for content filtering |
Non-Patent Citations (6)
Title |
---|
Davidov et al. "Superior and Efficient Fully Unsupervised Pattern-based Concept Acquisition Using an Unsupervised Parser," In Proceedings of the Thirteenth Conference on Computational Natural Language Learning, CoNLL '09, Jun. 2009, 9 pages. |
Durme et al. "Weakly-Supervised Acquisition of open-Domain Classes and Class Attributes from Web Documents and Query logs" Proceedings of ACL-08: HL T, p. 19-27, Jun. 2008. |
Hughes et al. "Lexical Semantic Relatedness with Random Graph Walks" Proceedings of Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learning, p. 581-589, Jun. 2007. |
Marco De Boni, et al. "Automated Discovery of Telic Relations for WordNet," In Proceedings of the First International WordNet Conference, 2002, 6 pages. |
Szumlanski et al., "Automatically Acquiring a Semantic Network of Related Concepts," Proceedings of the 19th ACM International Conference on Information and Knowledge Management, CIKM'10, Oct. 2010, 10 pages. |
Talukdar et al. "Weakly-Supervised Acquisition of Labeled Class Instances using Graph Random Walks" Proceedings of the 2008 Conference on Empirical Methods in Nature language Processing, p. 582-590, Oct. 2008. |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150112994A9 (en) * | 2010-09-03 | 2015-04-23 | Robert Lewis Jackson, JR. | Automated stratification of graph display |
US9128998B2 (en) | 2010-09-03 | 2015-09-08 | Robert Lewis Jackson, JR. | Presentation of data object hierarchies |
US9177041B2 (en) * | 2010-09-03 | 2015-11-03 | Robert Lewis Jackson, JR. | Automated stratification of graph display |
US9280574B2 (en) | 2010-09-03 | 2016-03-08 | Robert Lewis Jackson, JR. | Relative classification of data objects |
US10394778B2 (en) | 2010-09-03 | 2019-08-27 | Robert Lewis Jackson, JR. | Minimal representation of connecting walks |
US20120221549A1 (en) * | 2010-10-28 | 2012-08-30 | Sap Ag | Database Calculation Engine |
US9311356B2 (en) * | 2010-10-28 | 2016-04-12 | Sap Se | Database calculation engine |
US9672250B2 (en) | 2010-10-28 | 2017-06-06 | Sap Se | Database calculation engine |
CN107038211A (en) * | 2017-02-28 | 2017-08-11 | 大连理工大学 | A kind of paper impact factor appraisal procedure based on quantum migration |
CN107133266A (en) * | 2017-03-31 | 2017-09-05 | 北京奇艺世纪科技有限公司 | The detection method and device and database update method and device of video lens classification |
CN107133266B (en) * | 2017-03-31 | 2020-02-18 | 北京奇艺世纪科技有限公司 | Method and device for detecting video shot type and method and device for updating database |
Also Published As
Publication number | Publication date |
---|---|
US8538916B1 (en) | 2013-09-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8983898B1 (en) | Extracting instance attributes from text | |
CN110704743B (en) | Semantic search method and device based on knowledge graph | |
US8326091B1 (en) | Ranking of images and image labels | |
US8051080B2 (en) | Contextual ranking of keywords using click data | |
US9104979B2 (en) | Entity recognition using probabilities for out-of-collection data | |
US11797620B2 (en) | Expert detection in social networks | |
US9318027B2 (en) | Caching natural language questions and results in a question and answer system | |
US8880548B2 (en) | Dynamic search interaction | |
US9171081B2 (en) | Entity augmentation service from latent relational data | |
US9406020B2 (en) | System and method for natural language querying | |
US8484225B1 (en) | Predicting object identity using an ensemble of predictors | |
US10592571B1 (en) | Query modification based on non-textual resource context | |
US20100241647A1 (en) | Context-Aware Query Recommendations | |
US20150095300A1 (en) | System and method for mark-up language document rank analysis | |
US9342561B2 (en) | Creating and using titles in untitled documents to answer questions | |
US20170242900A1 (en) | Generating contextual search presentations | |
US9697099B2 (en) | Real-time or frequent ingestion by running pipeline in order of effectiveness | |
US10152478B2 (en) | Apparatus, system and method for string disambiguation and entity ranking | |
US11263400B2 (en) | Identifying entity attribute relations | |
EP3485394B1 (en) | Contextual based image search results | |
JP2015500525A (en) | Method and apparatus for information retrieval | |
Grütze et al. | CohEEL: Coherent and efficient named entity linking through random walks | |
US11720626B1 (en) | Image keywords | |
US20230368509A1 (en) | Multimodal machine learning image and text combined search method | |
US11704350B2 (en) | Search term extraction and optimization from natural language text files |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ALFONSECA, ENRIQUE;PASCA, MARIUS;ROBLEDO-ARNUNCIO, ENRIQUE;SIGNING DATES FROM 20110613 TO 20110614;REEL/FRAME:031354/0735 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |