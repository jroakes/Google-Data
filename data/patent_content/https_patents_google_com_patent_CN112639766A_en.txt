CN112639766A - Improving offline map data availability - Google Patents
Improving offline map data availability Download PDFInfo
- Publication number
- CN112639766A CN112639766A CN201880097172.1A CN201880097172A CN112639766A CN 112639766 A CN112639766 A CN 112639766A CN 201880097172 A CN201880097172 A CN 201880097172A CN 112639766 A CN112639766 A CN 112639766A
- Authority
- CN
- China
- Prior art keywords
- offline
- geographic
- client device
- data
- coverage
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000004891 communication Methods 0.000 claims abstract description 16
- 230000004044 response Effects 0.000 claims abstract description 13
- 238000000034 method Methods 0.000 claims description 76
- 238000009877 rendering Methods 0.000 claims description 2
- 238000007726 management method Methods 0.000 description 18
- 238000010586 diagram Methods 0.000 description 8
- 230000008569 process Effects 0.000 description 7
- 238000013507 mapping Methods 0.000 description 6
- 238000012360 testing method Methods 0.000 description 5
- 230000006870 function Effects 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000002085 persistent effect Effects 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 230000008520 organization Effects 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 239000008186 active pharmaceutical agent Substances 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 238000012550 audit Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 230000001186 cumulative effect Effects 0.000 description 1
- 230000001351 cycling effect Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 238000006073 displacement reaction Methods 0.000 description 1
- 230000003628 erosive effect Effects 0.000 description 1
- 230000007717 exclusion Effects 0.000 description 1
- 230000014509 gene expression Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 230000000737 periodic effect Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 230000008054 signal transmission Effects 0.000 description 1
- XLYOFNOQVPJJNP-UHFFFAOYSA-N water Substances O XLYOFNOQVPJJNP-UHFFFAOYSA-N 0.000 description 1
- 230000003442 weekly effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/29—Geographical information databases
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W4/00—Services specially adapted for wireless communication networks; Facilities therefor
- H04W4/02—Services making use of location information
- H04W4/021—Services related to particular areas, e.g. point of interest [POI] services, venue services or geofences
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W64/00—Locating users or terminals or network equipment for network management purposes, e.g. mobility management
- H04W64/003—Locating users or terminals or network equipment for network management purposes, e.g. mobility management locating network equipment
Abstract
Geographic data corresponding to a certain geographic zone of the offline coverage is stored in a memory of the computing device. An indication of a geographic boundary is obtained, the geographic boundary defining an area smaller than and contained within the geographic zone. A current location of the computing device relative to the geographic boundary is determined, and in response to determining that the current location is outside of the area, additional geographic data is retrieved via the wireless communication network to extend the geographic zone of offline coverage. At least some of the geographic data corresponding to the expanded geographic zone is provided via a user interface of the computing device while the computing device is offline.
Description
Technical Field
The present disclosure relates to digital maps, and more particularly, to generating digital maps that include information of interest specific to a user viewing the digital maps.
Background
Today, many electronic devices, such as personal computers, tablets, mobile phones, navigators provided as dedicated devices or embedded in head units of vehicles, etc., can provide digital maps of geographic zones (areas) and step-by-step directions for navigating through geographic zones by driving, walking, cycling, or using public transportation. Specialized mapping applications or "apps" as well as general-purpose applications such as web browsers can provide digital maps and/or navigation guidance.
Today, many geographic systems retrieve geographic data from a network server, such as map data to render digital maps, or interest point data to service geographic search queries. These geographic systems retrieve data as needed and do not rely on permanent pre-stored databases. However, these systems often suffer from insufficient connectivity or bandwidth, and thus, devices at a certain location sometimes cannot generate a digital map or service a geographic query.
Disclosure of Invention
A client device of the present disclosure retrieves geographic data for geographic tiles of offline coverage from a server via a wireless communication network before reaching a location in those geographic tiles. The offline management system determines the extent of the blocks covered offline and when the client device should request additional geographic data. The blocks covered offline are based on predicted destinations to which the client device may travel and padding regions (padding regions) of those predicted destinations. The offline management system may determine the extent of the blocks of offline coverage in view of the quality of network coverage, e.g., using the estimated bandwidths of the various service providers at the various areas and the speeds at which the client devices are expected to move through the areas. Thus, the management system reduces the likelihood that the client device can neither retrieve the relevant geographic zone from the server nor pre-store the relevant geographic zone in its memory.
In determining the scope of the offline covered tiles, the offline management system may use the navigation route along which the client device is currently moving, or a possible destination to which the client device generally tends to travel from the current location of the client device when no navigation route is requested. More generally, the offline management system may use any suitable combination of non-personal signals (e.g., popularity of a location, historical data, availability and size of roads to the location) and personal signals (e.g., locations previously visited by the user operating the client device or locations "liked" by the user when the user has indicated by operating certain controls or installing certain applications that the offline management system may use the personal signals to retrieve geographic data).
To determine the fill area, the offline management system in the example embodiment calculates the amount of data expected to be received by the client device at various geographic locations, which may be mapped to some fixed-size cell (at least when transformed or projected) to make the calculation limited, and determines various locations that the client device may reach for a given "budget," e.g., represented in megabytes of data. The offline management system then determines the amount of data needed to cover the area made up of these locations reachable for a given budget, and adjusts the budget as needed. The offline management system then repeats these calculations until the values representing the amount of data and budget required to cover the area converge.
In addition, to more efficiently serve client devices in real-time, the server-side components of the offline management system may pre-compute geographic data covering possible destinations of geographic locations as well as fill areas of various locations.
One example embodiment of these techniques is a method for obtaining geographic data for offline use. The method comprises the following steps: storing, in a memory of a computing device, geographic data corresponding to a certain geographic zone of an offline overlay; obtaining, by one or more processors, an indication of a geographic boundary, the geographic boundary defining an area smaller than and contained within the geographic zone; determining, by one or more processors, a current location of a computing device relative to a geographic boundary; in response to determining that the current location is outside the area, retrieving additional geographic data via the wireless communication network to extend a geographic zone of offline coverage; and providing at least some of the geographic data corresponding to the expanded geographic zone while the computing device is offline.
In various embodiments, this method includes one or more of the following additional features. Retrieving additional geographic data includes transmitting a request to a network server specifying a current location of the computing device and an indication of a geographic zone of offline coverage. The request also specifies a network operator of the computing device at the current location. The request also specifies a navigation route to be followed by the computing device. The request also specifies a current speed and/or an expected future speed at which the computing device is traveling. Retrieving additional geographic data includes receiving geographic data from a network server for locations to which the computing device may travel. Requesting additional geographic data includes requesting map data for rendering a digital map.
Another example embodiment of these techniques is a computing device comprising one or more processors and a non-transitory computer-readable memory storing instructions. The instructions, when executed by one or more processors, cause a computing device to implement any of the methods described above.
Another example embodiment of these techniques is a method for providing geographical data to a client device for offline use. The method includes receiving, by one or more processors from a client device via a communication network, an indication of a current location of the client device; identifying, by the one or more processors, geographic data to be provided to the client device to define a block of offline coverage, including determining boundaries of the block of offline coverage based on an amount of geographic data expected to be received by the client device prior to reaching certain points within the block of offline coverage; and provide the geographic data to the client device.
In various embodiments, this method includes one or more of the following additional features. Determining the boundary of the block of offline coverage includes determining, within the block of offline coverage, an area that is smaller than and contained within the block of offline coverage such that the client device is expected to receive geographic data for the area of offline coverage by the time the client device reaches any point in the area. The method includes providing an indication of a boundary of the area to the client device such that the client device requests additional geographic data upon reaching the indicated boundary. The method includes receiving, from a client device via a communication network, an indication of a geographic zone for which the client device currently stores previously received geographic data. When the method includes receiving this indication, the method may include determining whether a version of previously received geographic data is suitable for use in an area of offline coverage; and not providing the previously received geographic data to the client device when the version of the previously received geographic data is suitable for use in the offline covered area. The method includes determining a network bandwidth for the units within the area based on the historical data.
Yet another example embodiment of these techniques is a method for providing geographical data to a client device for offline use. The method includes receiving, by one or more processors from a client device via a communication network, an indication of a current location of the client device; identifying, by one or more processors, geographic data to be provided to a client device to define a block of offline coverage, including determining an area within the block of offline coverage such that the client device is expected to receive geographic data for the area of offline coverage by the time the client reaches any point in the area; and providing the geographic data and an indication of the boundary of the area to the client device for the client device to request additional geographic data upon reaching the indicated boundary.
Drawings
FIG. 1 is a block diagram of an example system in which the offline management system of the present disclosure may operate;
FIG. 2 is a messaging diagram of a scenario in which a client device requests geographic data from a geographic data server for potential offline use;
FIG. 3 is a flow diagram of an example method for obtaining geographic data from a geographic data server for potential offline use, which may be implemented in a client device operating in the system of FIG. 1;
FIG. 4 is a flow diagram of an example method for removing offline geographic data from local memory that may be implemented in a client device operating in the system of FIG. 1;
FIG. 5 is a flow diagram of an example method for determining offline geographic data and boundaries of areas with sufficient offline coverage, which may be implemented in a map data server operating in the system of FIG. 1;
FIG. 6 illustrates an example of applying the cell S2 to a geographic zone;
FIG. 7 illustrates an example relationship between the S2 cell and map tiles used to generate a digital map;
fig. 8 schematically illustrates an example list of map tiles corresponding to a predicted destination of some S2 cell that the offline management system of fig. 1 may use to identify offline geographic data to be provided to a client device;
fig. 9 illustrates an example data structure storing indications of expected bandwidths for various combinations of the S2 element and the network operator;
FIG. 10 illustrates an example mapping of various combinations of map tiles and operator values to a list of map tiles used in offline population;
FIG. 11 is a flow diagram of an example method for calculating offline population requirements for a geographic cell, which may be implemented in a map data server operating in the system of FIG. 1;
12A-C schematically illustrate example scenarios in which a client device reaches a check-in limit and requests additional geographic data;
13A-E schematically illustrate example scenarios in which the system of FIG. 1 determines which geographic data should be provided to a client device for potential offline use;
14A and 14B schematically illustrate an example scenario in which the server of FIG. 1 generates Mercator coverage for a set of S2 cells corresponding to a predicted destination of a client device;
15A-F schematically illustrate example scenarios in which the system of FIG. 1 iteratively determines fill areas for offline geographic data; and
16A-C schematically illustrate generating a populated area for offline geographic data corresponding to a navigation route.
Detailed Description
The offline management system of the present disclosure may be implemented in the computing environment 100 of fig. 1. The offline management system may include an offline data controller 102 and an offline data manager 104 that define server-side components and client-side components, respectively. Some of the functions discussed below may be implemented in the offline data controller 102, some may be implemented in the offline data manager 104, and some may be distributed between the components 102 and 104.
The example computing environment 100 includes a client device 110, a geographic data server 112, and a communication network 114, which communication network 114 may be a Wide Area Network (WAN), such as the internet.
In an example embodiment, the client device 110 operates as a component of a vehicle. For example, the client device 110 may be a navigation device embedded in a head unit of a vehicle to provide mapping, navigation, searching, and other functionality. In this embodiment, the client device 110 may be communicatively coupled to a vehicle component 116 that may include various sensors 118 that indicate location, orientation, speed, temperature, various operating parameters of the vehicle (such as tire pressure or whether windshield wipers have been activated, etc.).
In another implementation, the client device 110 is a portable computing device, such as a smartphone, that interfaces via a wired or wireless short-range network, such as Universal Serial Bus (USB) orclient device 110 may be any suitable computing device, such as a laptop computer, a tablet computer, a wearable device, and so forth.
The client device 110 may include a network interface 120, the network interface 120 configured to communicate with the map data server 112 and other devices via the network 114 using any suitable protocol. The client device 110 may also include a user interface 122 configured to receive typed input, gesture-based input, voice input, etc., and to, for example, display images, output audio, and generate haptic output. The user 122 in the example embodiment comprises a touch screen. In addition, the client device 110 may include one or more general-purpose processors 124, non-transitory computer-readable memory 126, and a graphics card 128 (e.g., including one or more graphics processing units or GPUs). The memory 126 may include persistent components (e.g., a hard disk) as well as non-persistent components (e.g., RAM). In other implementations, client device 110 may include additional components or, conversely, not include some of the components shown in fig. 1.
The geographic data server 112 may be a network server implemented as a single device or a group of devices. One or more of these devices may include one or more processors 130 and non-transitory computer-readable memory 132 storing instructions executable on the one or more processors 130. These instructions may implement, among other software components, the offline data controller 102 as well as the network coverage module 140 and the location predictor 142. More generally, geographic data server 112 may include any suitable type of processing hardware that implements the functionality of modules 102, 140, and 142.
With continued reference to fig. 1, the geographic data server 112 may be coupled to a geographic database 150, a network coverage database 152, a location history database 154, and a predicted destination and fill database 156. Each of databases 150, 152, 154, and 156 may be implemented in a single storage device or multiple storage devices.
The geographic database 150 may store map data that includes descriptions of geometry (geometry) for various map features, such as buildings and other structures, roads, parks, bodies of water, and the like. In addition to roads designed for vehicles, map data may describe bicycle lanes, sidewalks, railway paths, shipping routes, airline routes, and the like. Map features may be defined in a vector graphics format, according to which an image may be described in terms of geometric primitives based on mathematical expressions, or another suitable scalable format. Depending on the implementation, map features may be defined in only two dimensions (2D), in three dimensions (3D) as a wire frame to which a grid texture is applied, in a "two-point five" dimension (2.5D) as a 2D polygon that "sticks out" to a third dimension, and so on. In some cases, the map data may also include raster images, e.g., in a bitmap format. In addition, the map data may also include text tags and various forms of metadata, such as links to remote resources.
The geographic database 150 may store map data in a format of map tiles that generally correspond to a 2D organization of geospatial data into a quadtree. Each tile at a given zoom level is divided into four tiles at the next level up to the highest magnification level. Similarly, a 3D organization of geospatial data may be implemented using octree, where a cube volume contains map geometry at a certain zoom level and is subdivided into eight cube volumes at the next zoom level, each of which typically contains more detailed map geometry. To map the earth's surface onto a plane for 2D representation, an inkcard holder (Mercator) or other suitable projection may be used. Although the following examples refer to map data organized into 2D map tiles, the techniques may also be extended to 3D map data organized into octrees.
In an example embodiment, the geographic data server 112 references the region in the geographic database 150 using the S2 cells, the S2 cells corresponding to subsections of a unit sphere generated by projecting the sphere onto a cube. The level (level) of the S2 cell indicates how much the sphere has been subdivided. At level L there are 6 x 4LAnd an S2 unit. The geographic data server 112 may also reference regions in the geographic database 150 using the Mercator tile coordinates, which are subsections of a unit sphere generated using Mercator projections. Scaling of tile coordinates indicates how much the sphere has been subdivided, 4 at the zoom level ZZThe Mercator map coordinates.
In addition to map data, the geographic database 150 may store point of interest (POI) data, which may include geographic coordinates of various places. For some of these places, geographic database 150 may store business (business) data, such as business hours, descriptions of products and services offered, user reviews, and so forth. POIs need not always correspond to businesses, and may also include landmarks (e.g., monuments, fountains), famous buildings and other structures, locations of events, and so forth. Additionally, the geographic database 150 may store speech recognizer models that may be used to detect local queries, such as names of local POIs or other locally common phrases.
The network coverage database 152 may store indications of how much bandwidth is available at various locations, which may be referenced using the unit S2, the Mercator tile coordinates, or in any other suitable manner. These indications may be operator (carrier) specific. Examples of network coverage tables that the network coverage database 152 may store are discussed below with reference to fig. 10.
Still referring to FIG. 1, the memory 126 of the client device 110 may store instructions that implement various software applications, such as a geographic application 160. The geographic application 160 may generate interactive digital maps, obtain navigation directions (directions), provide data related to geo-located services in response to geographic queries, retrieve and display geographic commerce data (such as coupons and offers), and so forth. For example, depending on the implementation, the geographic application 160 may operate as a standalone application or as a component of another application (such as a web browser).
The memory 126 of the client device 110 may also store a map tile 162 that includes geographic data for one or more geographic tiles for offline coverage. Additionally, the memory 126 may store a sign-on limit 164, or an indication of a geographic boundary that defines an area within a geographic block of offline coverage. Additionally or alternatively, the memory 126 may store sign-on boundaries based on time rather than geography. The time-based sign-on threshold may define a time interval during which the client does not need to request additional geographic data. As discussed in more detail below, the offline data manager 104 operating in the client device 110 may request additional geographic data to expand the geographic zone of offline coverage upon reaching the check-in limit 164.
In some embodiments, offline data controller 102 pre-computes predicted destinations and fills for various geographic locations and stores the pre-computed data in database 156. Examples of predicted destinations that database 156 may store are discussed below with reference to fig. 8, and example fill tables that database 156 may store are discussed below with reference to fig. 10.
In operation, under some specific conditions, the client device 110 requests geographic data from the geographic data server 112 for potential offline use, and in response, the geographic data server 112 provides the geographic data to the client device 110, which is selected to reduce the likelihood that the geographic application 160 will not be able to display a geographic map via the user interface 122 due to insufficient network coverage. When client device 110 is operating in an offline mode, geographic application 160 may use map tiles 162 and/or other offline geographic data received from server 112 to generate an offline map, display information about the business, provide navigation guidance, service geographic queries based on typed input or voice input (using one or more voice recognition models received from server 112), and so forth. Next, the operation of the offline management system in various scenarios will be discussed in more detail with reference to fig. 2-16C.
Referring first to FIG. 2, diagram 200 illustrates example messaging between client device 110 and geo-data server 112 in a scenario where client device 110 requests geo-data from geo-data server 112 for potential offline use. Unlike interactions where the client device 110 requests map data for a particular geographic region (such as when a user types "Los Angeles, CA" or positions a map viewport over Los Angeles, CA), where the client device 110 does not request geographic data for a particular geographic region, the geographic data server 112 determines which geography the client device may need in the future.
To more efficiently service such requests from client devices 110 and similar client devices, geographic data server 112 may pre-calculate predicted destinations and fill information at block 202. Depending on the implementation, the geographic data server 112 may perform block 202 daily, weekly, or according to any other suitable schedule.
At block 204, the client device 110 compares its current location to the sign-on limit. When the current location is outside of the check-in limit or within some threshold distance from the check-in limit, the client device 110 may transmit a request 206 to the geographic data server 112. When the check-in limit is time-based, the client device 110 may check whether a sufficient amount of time has elapsed since the client device 110 last determined whether it should request additional processed data for potential offline use. In some implementations, the client device 110 can check for a geographic location-based check-in limit and a time-based check-in limit. In this manner, even when the client device 110 is not outside of the geographic sign-on limit, the client device may request new geographic data if the age of the geographic data currently stored in the local memory has exceeded a threshold number of hours, days, weeks, etc. Additionally, the geographic data server 112 may provide the client device 110 with a time-based sign-on boundary in some cases to simplify the sign-on logic at the client device 110, as it is generally easier to check a time interval than to determine whether a point is outside of a shape (especially a complex shape). If the client device 110 has not received a sign-on limit from the geographic data server 112, the client device 110 may set the sign-on limit to an initial value, such as a minimum radius around the current location of the client device, to immediately trigger transmission of the request 206.
The request 206 may, for example, include an indication of the current location of the client device 110 in the form of Global Positioning Service (GPS) coordinates. The request 206 may include an indication of a navigation route being followed by the client device 110. Additionally, the request 206 may include an indication of the network operator so that the geographic data server 112 may more accurately determine the amount of padding. This indication may include a Mobile Country Code (MCC) and Mobile Network Code (MNC) tuple, or any other suitable information for identifying a network operator. Still further, the request 206 may include an indication of a desired format of geographic data. In general, client devices may support different binary formats for grid map tiles, vector map tiles, search results, routing information, and so forth. Moreover, request 206 may include an indication of an area for which client device 110 has stored offline geographic data in local memory (e.g., memory 126 of fig. 1).
The geo-data server 112 may then determine the range of geographic tiles that the client device 110 covers offline and the map tiles that the geo-data server 112 must provide to the client device 110 to cover this tile, according to the parameters specified in the request 206 (block 208). To do so, the geographic data server 112 may query the database 156 to determine the predicted destination and fill. The geographic data server 112 also determines a new sign-on limit.
The geographic data server 112 then initiates a process of providing the geographic data and the check-in limit to the client device 110 via the sequence of responses 210. In an example embodiment, the initial response from the geographic data server 112 includes a list of URLs or other references to a portion of the geographic data to be downloaded and a sign-in limit. Because geographic data server 112 may need to provide a relatively large amount of information (e.g., X MB) in response to request 206, the location of client device 110 may change significantly during the time X MB is transmitted over the communication network. The geographic data server 112 thus determines a sign-on limit such that the client device 110 requests geographic data to complete the retrieval of offline geographic data before reaching any edge of the offline covered geographic zone. During and after the process of receiving geographic data, client device 110 may continue to compare its location to the sign-on limit, as shown in block 212.
For further clarity, fig. 3 illustrates an example method 300 for obtaining geographic data from a geographic data server for potential offline use, which may be implemented in a suitable client device. For example, the offline management system may implement the method 300 in a client-side component (e.g., the offline data manager 104).
The method 300 begins at block 302 where the offline data manager 104 stores geographic data for the blocks of the offline overlay in the memory of the client device. The offline data manager 104 may store geographic data, for example, in the form of map tiles.
At block 304, the offline data manager 104 may obtain an indication of the current check-in limit for the geographically covered region. The sign-on threshold generally defines an area that is smaller than and fully contained within the geographic coverage area. For example, referring to fig. 12A, the sign-on limit 1202 defines an area within a larger geographic block of the offline coverage 1200.
The offline data manager 104 determines the current location of the client device at block 306 and determines whether the current location is within the check-in limit at block 308. If the current location is within the check-in limit, such as the case in FIG. 12A (where the current location of the client device is represented by location indicator 1204), then flow returns to block 306. Flow may return to block 306 after a certain time interval for offline data manager 104 to periodically test the current location for a sign-on threshold. In some implementations, the time interval may depend on a current speed of the client device. Thus, when the client device is moving quickly, the offline data manager 104 tests the current location against the check-in limits relatively frequently, and when the client device is moving slowly, the offline data manager 104 tests the current location against the check-in limits relatively infrequently. Otherwise, if the current location is outside of the check-in limit or sufficiently close to the check-in limit (see, e.g., location 1204-2 in FIG. 12B), then flow proceeds to block 310.
At block 310, the offline data manager 104 may retrieve additional geographic data and the new check-in limit. To this end, offline data manager 104 may transmit message 206, as shown in FIG. 2. The geographic data server may thus respond with a set of responses 210.
In some cases, at block 312, the client device provides offline geographic data via a user interface. For example, a user may request a digital map of locations within a geographic region covered offline, submit a geographic query, and so forth. As another example, the geographic application 160 may display a digital map to illustrate the navigation route. In general, block 312 may be performed at any time during the execution of method 300, or block 312 may be performed as part of a separate process independent of method 300.
Referring now to fig. 4, the offline data manager 104 may also audit the offline geographic data to remove some of the data, thereby preventing the geographic data from occupying too much of the local storage of the client device 110, which may be implemented in a persistent portion of the memory 126.
The method 400 begins at block 402, where a trigger event for auditing (or "garbage collecting") offline geographic data is detected at block 402. In an example embodiment, the triggering event is the retrieval of new geographic data, e.g., the transmission of a request 206 or the receipt of one or more responses 210 (see FIG. 2). The triggering event may alternatively be the expiration of a periodic timer. As another alternative, the triggering event may be a command issued by offline data controller 102 upon detection of a particular condition, such as a request to download a certain amount of geographic data. At block 404, the offline data manager 104 identifies offline geographic data currently stored in memory. Then, at block 406 and 412, the offline geographic data may attempt to identify portions of the offline geographic data that may be removed with minimal risk of failing to provide the user with a digital map of the particular section upon request. Blocks 406-412 may be performed in any desired order.
The checks and tests performed by the offline data manager 104 at block 406-412 may include checking whether the data for a particular region is older than X days, where X may be 30, 90, 365, or any suitable number (block 406); whether a new version of data covering a certain area has been downloaded (408); whether the client device has insufficient memory (block 410); whether more than N regions of offline geographic data are stored in the memory of the client device (block 412). The offline data manager 104 may enforce the condition of block 412 because the performance of the client device may degrade when the amount of offline geographic data in memory is large. Additional examples of checks and tests that offline data manager 104 may perform to determine whether certain offline geographic data should be removed are how recently geographic application 160 has used this data to display digital maps, provide search results, provide navigation, and the like. After determining how recently certain data was used, the offline data manager 104 may first remove the least recently used data. Additionally, in some implementations, the offline data controller 102 may assist the offline data manager 104 in determining which offline geographic data should be removed from memory.
At block 414, the offline data manager 104 may remove old or replaced data when one of the conditions of blocks 406 or 408 is met, or remove the least recently used region when one of the conditions of blocks 410 or 412 is met.
Alternatively, the offline data manager 104 may determine that the data identified as old at block 406 should be used as a backup if the client device fails to download new data. Also, rather than sending all map tiles corresponding to the new version, the offline data manager 104 may request the geographic data server to provide a description of the differences between map tiles corresponding to the old version and map tiles corresponding to the new version to reduce the amount of data transmitted via the communication network. For areas or nearby tiles, the offline data controller 102 may compute a "diff" raster image, diff vector-based map tiles, or any other suitable description of the differences between the versions that have been downloaded to the client device 110 and are available for download.
Fig. 5 illustrates an example method 500 for determining geographic data and boundaries of an area with sufficient offline coverage. The offline management system may implement method 500 in a server-side component (e.g., offline data controller 102). Consider next the method 500 in conjunction with the diagrams in fig. 6-10.
At block 502, the offline data controller 102 may receive a request for offline geographic data from a client device. As discussed above, for example, offline data controller 102 may receive message 206 that includes some or all of the parameters listed in fig. 2. Thus, the offline data controller 102 receives an indication of the current location of the client device, an indication of the network operator, and the like.
Next, at block 504, the offline data controller 102 may identify a predicted destination for the client device. When the client device identifies a navigation route in the request 206 (see fig. 2), the offline data controller 102 may determine that the entire tile within Xkm of the navigation route corresponds to the client device's possible destination, and thus the offline data controller 102 may select a map tile that covers the entire tile at a certain zoom level. This example scenario is further illustrated in fig. 16A-C. When the length of the navigation route exceeds a certain threshold, the offline data controller 102 may select map data for tiles that are only within Xkm of the first Ykm of the navigation route.
When the client device does not specify a navigation route, the offline data controller 102 may rely on the location predictor 142 to determine locations where the client may travel based on the aggregated historical data for the set of users. The location predictor 142 may pre-compute this information for efficiency and then retrieve the pre-computed predicted destination from the database 156. As a more specific example, offline data controller 102 may determine which cells (rather than points or particular coordinates) the user device is likely to travel to given the cell in which the user device is currently located.
For example, referring to fig. 6, geographic zone 600 may be divided into grid 610 of S2 cells 612, 614, 616, etc. Each cell at a particular level may cover an area of some fixed size. An example current location 610 of the client device is within element 602.
As shown in fig. 7, the mesh 610 of S2 need not correspond to a map tile into which the corresponding geographic data is divided. For example, the grid 700 of map tiles at a certain zoom level Z includes tiles T1,1、T1,2、…T10,6Where each tile has an x coordinate and a y coordinate. Thus, as shown in FIG. 7, the example unit 612 and the map tile T2,3、T3,3、T2,4And T3,4And (4) overlapping. Map block T2,3、T3,3、T2,4And T3,4May correspond to Mercator tile coordinates.
FIG. 8 illustrates a set 800 of example predictions for a map tile that the location predictor 142 may generate for the example unit 612. In general, the location predictor 142 may determine where a client device is likely to be within X hours given the current location of the client device. The set of predictions 800 consists of tiles from the grid 700 of fig. 7: in this example, the set of predictions 800 includes tile T1,5、T2,5、T3,5、T4,5、T2,4、T3,4、T2,3、T3,3And T3,2. Each of these tiles covers an area that a client device located in unit 612 may travel to. Thus, the set of predictions 800 approximates the predicted geographic region of the unit 612. To identify the regions that make up the predicted destination block represented by the predicted set 800The location predictor 142 of FIG. 1 may apply a set of prediction rules as discussed above with reference to the database 154. When the location predictor 142 fails to apply the appropriate rules, the location predictor 142 may simply select a map tile within a particular radius of the current location of the client device.
The predicted destination and fill database 156 may store S2 cell to tile coordinate set mappings using tables, lists, trees, or any other suitable data structure, e.g., cell 612->{T1,5，T2,5，T3,5，T4,5，T2,4，T3,4，T2,3，T3,3，T3,2}. In some implementations, the database 156 also stores a score for each map tile, where the score indicates a likelihood that the map tile is useful. For example, as shown in fig. 14A and 14B, the location predictor 142 in some cases applies a fractional filter to the predicted destination block 800 to reduce the number of tiles.
Referring again to fig. 5, at block 506, the offline data controller 102 may identify the fill areas of tiles in the predicted destination block. In general, the offline data controller 102 determines a fill area for each location to account for the client device's displacement relative to the predicted geographic zone when the client device is downloading the corresponding geographic data. For example, if the predicted set of map tiles 800 occupies 100MB, and the client device can download 10MB per minute on average while traveling at a speed of 60 miles per hour, then the client device travels 10 miles before completing the 100MB download. If the offline covered geographic area coincides with the predicted destination area covered by the predicted set of map tiles 800, then the client device is 10 miles closer to the edge of the offline covered geographic area after the download is complete. In this new location, the client device may need to download additional geographic data, but if the quality of the available network coverage is poor, the client device may exceed the "no return point" or the point at which the client device needs to download more data than it had bandwidth and time to download before reaching the edge of the geographic zone of offline coverage.
Thus, the offline data controller 102 ensures that the client device downloads geographical data for a sufficiently large chunk such that when the client device requests additional geographical data, the client device will continue to have network coverage while downloading the additional geographical data. Offline data controller 102 determines the fill area for a location as the set of all points that can be reached from that location before X MB, the size of the data covering the area to be downloaded at that location, can be downloaded. Once the offline data controller 102 augments the predicted destination block with padding areas for all locations in the predicted destination block, the resulting offline covered block has the following characteristics: all points within the predicted destination region block precede no-return points.
Consider an example iterative technique for determining offline fill requirements for a geographic cell in detail with reference to fig. 11. To implement such an iterative technique, the offline data controller 102 may use a data structure 900 schematically illustrated in fig. 9, the data structure 900 storing indications of the individual S2 elements and the bandwidths of the individual network operators. Thus, for example, data structure 900 may indicate that network operator C1 provides approximately 5Mbps at element 612, and that network operators C1, C2, and C3 provide approximately 10Mbps, 5Mbps, and 7Mbps, respectively, at element 620.
Using the method of fig. 11 or another suitable technique, the offline data controller 102 may generate an example map 1000 that provides a list of map tiles to be used as fill areas for the various map tiles and network operators. Thus, according to the mapping 1000, when using network operator C1, for tile T4,3The filled region being tile T2,2And T3,2And for block T when network operator C2 is used4,3The filled region being tile T2,2、T3,2、T2,3、T4,4. At block 506, the offline data controller 102 may find the fill regions for all tiles included in the predicted set 800 corresponding to the predicted destination tile.
At block 508, the offline data controller 102 excludes offline data already available at the client device from the extended area, which includes the predicted destination tile determined at block 504 and the fill area determined at block 506. As discussed above, the client device may report offline geographic data that is already available as part of the request 206 (see fig. 2). Example exclusion of offline data that is already available is schematically illustrated in fig. 12C.
In some implementations, the geographic data server 112 updates the data in the geographic database 150 frequently, but with relatively small changes. To conserve bandwidth, the offline data controller 102 may determine whether versions of certain geographic data are close enough to versions of the same geographic data available at the client device when the versions are not identical. When the versions are close enough, the offline data controller 102 excludes this data from the download. The offline data controller 102 may apply one or several heuristics to compare versions, such as, for example, determining whether a map tile language, a legal country, and a style for vector data applied in a corresponding map tile match. Another example heuristic may include determining whether the route versions (presumably defined by map tile versions) are identical. Yet another example heuristic may include determining whether the search languages match and the search versions (also defined separately from the map tile versions) differ from each other by no more than X days (e.g., 14 days).
Next, at block 510, the offline data controller 102 determines a check-in limit for the offline covered tile. The offline data controller 102 first identifies a set of all data for which the client has been or soon will be downloaded, i.e., data corresponding to the geographic zone of offline coverage at the client device. The offline data controller 102 then erodes or reduces the geographic area of offline coverage along the perimeter so that the client device never reaches the no-return point. Because the offline data controller 102 has determined the fill area, the offline data controller 102 may associate the sign-in limit with the boundary of the predicted destination tile. Thus, the sign-on limit for a region encompasses all points in the region that contain padding.
As one example, when a client device is operating in a vehicle driving to a mountain area without coverage, the client device should begin downloading the entire block without coverage early enough for the client device to complete the download before losing network connectivity. The offline data controller 102 thus provides a check-in margin that triggers the early start of the download.
At block 512, the offline data controller 102 provides the geographic data and the check-in limit to the client device. Referring again to fig. 2, the geographic data server in which offline data controller 102 operates may send response 210 to the client device.
In some implementations, the offline data controller 102 prioritizes the geographic data being downloaded to the client device, e.g., based on relevance to advanced security features and/or how important different types of geographic data are to navigation (e.g., gasoline and food can be prioritized relative to landmarks). In this way, if the client device reaches the no-return point, the client device may still have significant geographic data in local memory.
Additionally, when offline data controller 102 determines that a large amount of geographic data for a large geographic area should be downloaded to a client device, offline data controller 102 may split the data into portions and prioritize the download based on the proximity of the portions to the client device.
Referring now to fig. 11, an example method 1100 for calculating an offline fill area for a geographic cell may be implemented in the offline data controller 102. The offline data controller 102 may periodically perform the method 1100 for a number of units in batch mode prior to receiving a request from a client device. However, in other embodiments or scenarios, offline data controller 102 performs method 1100 in real-time upon receiving a request from a client device. The method 1100 is generally based on an iterative technique in which the steps of identifying reachable locations on some "budget" of data can affect the budget, and some of the steps of the method 1100 are repeated until values representing the amount of data and the budget needed to cover the area converge.
In block 1102, the offline data controller 102 sets the initial size of the budget 1100 to X. For example, when a client device at a particular location does not yet have any offline geographic data, the initial size of the budget 1100 may be the cumulative size of the predicted set 800 of map tiles (see fig. 8). The unit of X may be, for example, megabytes or MBs.
Next, at block 1104, the offline data controller 102 finds a set of all points reachable with budget X. Offline data controller 102 may generally apply any desired level of granularity to the set of points. In an example embodiment, each of the S2 cells is associated with a single location (e.g., a centroid of a cell accessible through a road or a point in the S2 cell). The offline data controller 102 may apply Dijkstra's algorithm, a modification of Dijkstra's algorithm, or any suitable shortest path algorithm to find the shortest path from the current location of the client device to the various points.
As part of finding the set of points, the offline data controller 102 at block 1106 may calculate a cost to traverse the cell. For a given cell, offline data controller 102 may select the expected bandwidth of the current network operator available to the client device at that cell, e.g., 5Mbps for cell 612, as shown in fig. 9. As discussed above, the client device may specify a network operator in the request 206 (see fig. 2). The offline data controller 102 may then multiply the expected bandwidth by the linear size of the cell, and also by the expected speed at which the client device will traverse the linear size of the cell. In an example configuration, the expected speed is set to a fixed maximum value for the vehicle, such as 100mph or 160 kmh. In another example embodiment, the offline data controller 102 determines the expected speed based on historical data for a large collection of vehicles. Thus, for example, a certain S2 may cover a densely populated city block in which vehicles have historically been traveling at only 40mph or 60 kmh. The product of bandwidth, size and speed corresponds to the cost of traversing the unit.
Note that units with poor network coverage and thus low bandwidth have a lower cost of traversing the unit. Thus, the same budget selected at block 1102 covers a larger number of cells of poor network coverage. Thus, the offline data controller 102 may generate a fill area that extends deeply to areas that are not covered or that are covered very little (such as mountainous areas). However, to prevent the client device from downloading map tiles that cover oceans and other blocks that cars cannot enter, the offline data controller 102 may limit the search at block 1104 to only those S2 cells that contain roads. As another example, referring again to fig. 8, because the network coverage is worse where the client device goes to a location in the upper left corner that will be traversed, the set 800 of predictions for cell 612 extends farther to the upper left corner than directly to the right of cell 612.
In some implementations, the offline data controller 102 detects that the network population extends too much for some tiles (e.g., grows to cover the entire continent), and the offline data controller 102 limits the extension based on the maximum number of S2 cells, based on the maximum distance from the location of the cell, or based on any other suitable principle.
Next, at block 1110, the size of the block generated at block 1104 is calculated and set to the new budget. In particular, offline data controller 102 may calculate the total size of all cells reachable from a given cell according to the shortest path algorithm and for the budget used in performing the previous instance of block 1104.
If the size calculated at block 1110 is not greater than the previously used budget, then the offline data controller 102 may determine that convergence has been achieved at block 1112 and proceed to block 1114. Otherwise, if the size is greater than the previously used budget, then the size is used as the new budget and flow returns to block 1104. The offline data controller 102 can always achieve convergence because any geographical area is limited, but in most cases, convergence is achieved quickly when the set of cells at block 1104 has robust network coverage.
At block 1114, the offline data controller 102 adds a new entry to the mapping 1000 shown in fig. 10. In the example of FIG. 10, the offline data controller 102 maintains these entries in the map tile format rather than the S2 cell format, and therefore when usedNetwork operator C2 time table 1000 for tile T4,3Can specify a fill region T2,2，T3,2，T2,3，T4,4}. More generally, offline data controller 102 may define and index the populated areas in any suitable geographic format.
As an alternative to performing block 1114, when servicing a request from a client device in real-time, the offline data controller 102 uses the results of performing block 102 and 112 to apply the populated areas directly to the previously computed predicted geographic tiles to determine the entire set of map tiles to be provided to the client device in response to the request 206.
For further clarity, fig. 12A-16C next illustrate several example scenarios in accordance with which the offline management system of the present disclosure may operate.
First, fig. 12A-C schematically illustrate an example scenario from the perspective of a client device, such as device 110 of fig. 1, in which the client device reaches a check-in limit and requests additional geographic data. In the initial state of fig. 12A, the client device has a block 1200 of offline overlays. The check-in limit 1202 bounds the area within the block 1200 of the offline overlay, and the current location 1204 of the client device is within the check-in limit.
As shown in FIG. 12B, the client device then moves to a new location 1204-01 and reaches a sign-on limit 1202. The client device thus sends a message to the geographic data server similar to message 206 of fig. 2, and in response, the geographic data server provides additional geographic data, shown as shaded area 1210, and provides an updated check-in limit 1202-01.
Thus, the block of offline geographic coverage now covers areas 1200 and 1210 (fig. 12C). The client device may continue to move to the new location 1204-02 where the client device is within the updated sign-on limit 1202-01, thus eliminating the need to request additional geographic data at the location 1204-02.
13A-E schematically illustrate example scenarios from the perspective of a server, such as geographic data server 112 of FIG. 1, in which the server determines which geographic data should be provided to the client device for potential offline use.
Fig. 13A illustrates an example tile 1300 of offline coverage, as discussed above, with the server eroding down to a check-in limit 1302 based on connectivity. In fig. 13B, the server determines the predicted destination block 1306 for location 1310. The server may then populate the predicted destination tile 1306 based on network connectivity to generate an expanded area 1320 (fig. 13C). The server may then remove the existing region geometry from the expanded region 1320 to identify a tile 1330 (shaded in fig. 13D) for download to the client device. Finally, the server may erode the union of geographic zones 1300 and 1320 to generate a new check-in limit 1340 (see fig. 13E).
Fig. 14A and 14B schematically illustrate an example scenario in which the server of fig. 1 generates Mercator coverage for a set of S2 cells corresponding to a predicted destination of a client device. In particular, the server may generate a predicted destination tile 1400 for the S2 unit 1402 (fig. 14A), filter the predicted destination tile 1400 based on the scores to generate a modified predicted destination tile 1410 and generate a Mercator overlay 1420 for the modified predicted destination tile 1410 (fig. 14B).
Fig. 15A-F schematically illustrate an example determination of network fill for a predicted geographic zone.
The server may calculate the size of the predicted destination block or area for each unit of S2. Fig. 15A illustrates an example predicted destination block 1510 of unit 1500. The server can then expand the area around the unit 1500 to cover units that can download X MBs. The resulting region 1520 is shown in fig. 15B. As discussed above, the server may apply a shortest path search to identify units reachable by budget X.
The server may then calculate a Mercator coverage 1522 of the region 1520 (fig. 15C). Referring to FIG. 15D, the server may then populate the network with 1530-1, 1530-2, 1530-3, … 1530-N and the union of the geographic region 1520 to generate a new tile 1540 having a new size X'. Thus, regions 1540 and 1520 have different sizes, as more clearly illustrated in fig. 15E. Thus, a new size X' is used in determining a new iteration of network population, and the process continues until sizes 1540, 1550, 1560, etc. converge (FIG. 15F)
16A-C, the process of identifying a fill area for navigating a route is substantially similar to the process discussed above, except that the filling applies to locations around the route rather than to predicted destinations. For example, in fig. 16A, the server may identify a set of units 1610, each unit within a particular distance of the route 1600. FIG. 16B then illustrates the union of the cells 1610 with the corresponding fill areas 1620-1, 1620-2, 1620-3, … 1620-N.
The result of this union is shown in fig. 16C as block 1650 of offline coverage. The area covered by the unit 1610 defines the check-in limits for the block 1650 covered offline.
Additional considerations
The following additional considerations apply to the foregoing discussion. Throughout the specification, multiple instances may implement a component, an operation, or a structure described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations, one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in the example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the subject matter of the present disclosure.
Furthermore, certain embodiments are described herein as comprising logic or multiple components and modules. The modules may constitute either software modules (e.g., code stored on a machine-readable medium) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In an example embodiment, one or more computer systems (e.g., a standalone, client, or server computer system) or one or more hardware modules (e.g., a processor or a set of processors) of a computer system may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.
In various embodiments, a hardware module may comprise permanently configured special-purpose circuitry or logic (e.g., as a special-purpose processor, such as a Field Programmable Gate Array (FPGA) or an application-specific integrated circuit (ASIC)) to perform certain operations. A hardware module may also include programmable logic or circuitry (e.g., as encompassed in a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module in a dedicated and permanently configured circuit or in a temporarily configured circuit (e.g., configured by software) may be dictated by cost and time considerations.
Thus, the term hardware should be understood to encompass a tangible entity, which refers to an entity that is physically constructed, permanently configured (e.g., hardwired), or temporarily configured (e.g., programmed) to operate in a certain manner or to perform certain operations described herein. As used herein, "hardware-implemented module" refers to a hardware module. Considering embodiments in which the hardware modules are temporarily configured (e.g., programmed), each hardware module need not be configured or instantiated at any one time. For example, where the hardware modules include a general-purpose processor configured using software, the general-purpose processor may be configured as respective different hardware modules at different times. Software may be configured accordingly on a processor, for example, to constitute a particular hardware module at one time and to constitute a different hardware module at a different time.
A hardware module may provide information to and receive information from other hardware. Thus, the described hardware modules may be considered communicatively coupled. In case a plurality of such hardware modules are present at the same time, then the communication may be realized by signal transmission (e.g. by means of suitable circuits and buses) connecting the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times, communication between such hardware modules may be achieved, for example, by storing and retrieving information in memory structures accessible to the multiple hardware modules. For example, one hardware module may perform an operation and store the output of the operation in a memory device communicatively coupled thereto. Another hardware module may then access the memory device at a later time to retrieve and process the stored output. The hardware modules may also initiate communication with input or output devices and may operate on resources (e.g., collections of information).
The methods discussed above may include one or more functional blocks, modules, individual functions or routines in the form of tangible computer-executable instructions that are stored in a non-transitory computer-readable storage medium and executed using a processor of a computing device (e.g., a server, personal computer, smartphone, tablet computer, smartwatch, mobile computing device, or other personal computing device as described herein). The methods discussed above may be included as part of any back-end server (e.g., a map data server, a navigation server, or any other type of server computing device as described herein), such as a portable device module of an example environment, or as part of a module external to such an environment. Although the drawings may be described with reference to other drawings for ease of explanation, the methods discussed above may be used with other objects and user interfaces. Furthermore, while the above explanation describes steps of the method discussed above as being performed by a particular device, these are done for illustrative purposes only.
Various operations of the example methods described herein may be performed, at least in part, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. In some example embodiments, the modules referred to herein may comprise processor-implemented modules.
Similarly, the methods or routines described herein may be implemented at least in part by a processor. For example, at least some of the operations of the method may be performed by one or more processors or processor-implemented hardware modules. The execution of certain operations may be distributed among one or more processors, and not only reside within a single machine, but are also deployed across multiple machines. In some example embodiments, one or more processors may be located at a single location (e.g., within a home environment, an office environment, or as a server farm), while in other embodiments, processors may be distributed across multiple locations.
The one or more processors may also be operable to support execution of related operations in a "cloud computing" environment or as SaaS. For example, as indicated above, at least some of the operations may be performed by a set of computers (as an example of machines including processors) that are accessible via a network (e.g., the internet) and via one or more appropriate interfaces (e.g., APIs).
Additionally, the figures depict some embodiments of the example environment for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.
After reading this disclosure, those skilled in the art will recognize additional alternative structural and functional designs for generating offline geographic data through the principles disclosed herein. Thus, while particular embodiments and applications have been illustrated and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes, and variations apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and apparatus disclosed herein without departing from the spirit and scope as defined in the appended claims.
Claims (15)
1. A method for obtaining geo data for offline use, the method comprising:
storing, in a memory of a computing device, geographic data corresponding to a certain geographic zone of an offline overlay;
obtaining, by one or more processors, an indication of a geographic boundary bounding an area smaller than and contained within the geographic zone,
determining, by the one or more processors, a current location of the computing device relative to a geographic boundary;
in response to determining that the current location is outside the area, retrieving additional geographic data via the wireless communication network to extend a geographic zone of offline coverage; and
at least some of the geographic data corresponding to the expanded geographic zone is provided via a user interface of the computing device while the computing device is offline.
2. The method of claim 1, wherein retrieving additional geographic data comprises transmitting a request to a network server specifying a current location of the computing device and an indication of a geographic zone of offline coverage.
3. The method of claim 2, wherein the request further specifies a network operator of the computing device at the current location.
4. The method of claim 2 or 3, wherein the request further specifies a navigation route to be followed by the computing device.
5. The method of any of claims 2-4, wherein the request further specifies a current speed of travel and/or an expected future speed of the computing device.
6. The method of any of the preceding claims, wherein retrieving additional geographic data comprises receiving geographic data from a network server for locations to which the computing device is likely to travel.
7. The method of any one of the preceding claims, wherein requesting additional geographic data comprises requesting map data for rendering a digital map.
8. A computing device, comprising:
one or more processors; and
a non-transitory computer-readable medium having instructions stored thereon that, when executed by the one or more processors, cause a computing device to implement the method of any of claims 1-7.
9. A method for providing geographical data to a client device for offline use, the method comprising:
receiving, by one or more processors from a client device via a communication network, an indication of a current location of the client device;
identifying, by the one or more processors, geographic data to be provided to the client device to define a block of offline coverage, including determining boundaries of the block of offline coverage based on an amount of geographic data expected to be received by the client device prior to reaching certain points within the block of offline coverage; and
the geographic data is provided to the client device.
10. The method of claim 9, wherein determining boundaries of a block of offline coverage comprises determining an area within a block of offline coverage that is smaller than and contained within the block of offline coverage such that the client device is expected to receive geographic data for the area of offline coverage by the time the client reaches any point in the area.
11. The method of claim 9 or 10, further comprising: an indication of the boundary of the area is provided to the client device such that the client device requests additional geographic data upon reaching the indicated boundary.
12. The method of any of claims 9-11, further comprising: an indication of a geographic bin for which the client device currently stores previously received geographic data is received from the client device via a communication network.
13. The method of claim 12, further comprising:
determining whether a version of previously received geographic data is suitable for use in an area of offline coverage, an
The previously received geographic data is not provided to the client device when a version of the previously received geographic data is suitable for use in an area of offline coverage.
14. The method of any of claims 9 to 13, further comprising: network bandwidth for units within the area is determined based on the historical data.
15. A server device, comprising:
one or more processors; and
a non-transitory computer-readable medium storing instructions thereon that, when executed by the one or more processors, cause a computing device to implement the method of any of claims 9-14.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2018/054617 WO2020072074A1 (en) | 2018-10-05 | 2018-10-05 | Improving offline map data availability |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112639766A true CN112639766A (en) | 2021-04-09 |
Family
ID=64184177
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880097172.1A Pending CN112639766A (en) | 2018-10-05 | 2018-10-05 | Improving offline map data availability |
Country Status (4)
Country | Link |
---|---|
US (2) | US11741135B2 (en) |
EP (1) | EP3799639A1 (en) |
CN (1) | CN112639766A (en) |
WO (1) | WO2020072074A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111263329B (en) * | 2018-11-30 | 2021-06-22 | 华为技术有限公司 | Internet of vehicles communication method, distribution module, central server and regional server |
GB2596093A (en) * | 2020-06-17 | 2021-12-22 | Daimler Ag | An adaptive map streaming system for autonomous vehicle(s) and method thereof |
CN115221159A (en) * | 2021-04-20 | 2022-10-21 | 华为技术有限公司 | Positioning method and related device |
CN113360281B (en) * | 2021-06-02 | 2024-05-07 | 成都比格图数据处理有限公司 | Multithreading tile downloading and reading method for offline map |
Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN103017783A (en) * | 2012-12-05 | 2013-04-03 | 中兴通讯股份有限公司 | Navigation method and system, map data management cloud end and data updating method thereof |
US20130124563A1 (en) * | 2011-11-16 | 2013-05-16 | Google Inc. | Controlling pre-fetching of map data tiles based on selectable parameters |
US8849942B1 (en) * | 2012-07-31 | 2014-09-30 | Google Inc. | Application programming interface for prefetching map data |
US20140379850A1 (en) * | 2013-06-24 | 2014-12-25 | Google Inc. | System and Method for Providing Geospatial Assets |
CN104252371A (en) * | 2014-09-04 | 2014-12-31 | 百度在线网络技术（北京）有限公司 | Method and device for optimizing map loading performance |
US9063951B1 (en) * | 2011-11-16 | 2015-06-23 | Google Inc. | Pre-fetching map data based on a tile budget |
US20150379618A1 (en) * | 2013-02-14 | 2015-12-31 | Hunt Ltd. | Device, system, and method of converting online browsing to offline purchases |
CN105973244A (en) * | 2015-10-29 | 2016-09-28 | 乐卡汽车智能科技（北京）有限公司 | Method, navigation method and equipment for obtaining map information |
WO2016191674A1 (en) * | 2015-05-28 | 2016-12-01 | Google Inc. | Dynamically integrating offline and online data in a geographic application |
US20170219359A1 (en) * | 2015-12-21 | 2017-08-03 | Invensense, Inc. | Method and system for estimating uncertainty for offline map information aided enhanced portable navigation |
US20180231391A1 (en) * | 2017-02-15 | 2018-08-16 | Telenav, Inc. | Navigation system with location based parser mechanism and method of operation thereof |
US20180267527A1 (en) * | 2017-03-17 | 2018-09-20 | Essential Products, Inc. | Handheld mobile device for adaptive vehicular operations |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8711181B1 (en) | 2011-11-16 | 2014-04-29 | Google Inc. | Pre-fetching map data using variable map tile radius |
US8803920B2 (en) | 2011-12-12 | 2014-08-12 | Google Inc. | Pre-fetching map tile data along a route |
US9389088B2 (en) | 2011-12-12 | 2016-07-12 | Google Inc. | Method of pre-fetching map data for rendering and offline routing |
CN104205891B (en) * | 2011-12-30 | 2019-02-26 | 瑞典爱立信有限公司 | Virtual SIM card cloud platform |
US9769030B1 (en) | 2013-02-11 | 2017-09-19 | Amazon Technologies, Inc. | Page prefetching |
US20140378159A1 (en) | 2013-06-24 | 2014-12-25 | Amazon Technologies, Inc. | Using movement patterns to anticipate user expectations |
US8938488B1 (en) * | 2013-12-27 | 2015-01-20 | Linkedin Corporation | Techniques for populating a content stream on a mobile device |
US20160180721A1 (en) * | 2014-10-03 | 2016-06-23 | Ivan Otulic | System and method for tracking, surveillance and remote control of powered personal recreational vehicles |
US9734072B2 (en) | 2015-03-24 | 2017-08-15 | Macom Connectivity Solutions, Llc | Main memory prefetch operation and multiple prefetch operation |
US10299074B2 (en) | 2016-05-09 | 2019-05-21 | Microsoft Technology Licensing, Llc | Offline map download |
US9786027B1 (en) | 2016-06-16 | 2017-10-10 | Waygate, Inc. | Predictive bi-adaptive streaming of real-time interactive computer graphics content |
US10499186B2 (en) * | 2017-06-02 | 2019-12-03 | Apple Inc. | User interface for providing offline access to maps |
DE102017009510A1 (en) | 2017-10-12 | 2018-03-29 | Daimler Ag | Method for updating a digital map in a vehicle |
-
2018
- 2018-10-05 WO PCT/US2018/054617 patent/WO2020072074A1/en unknown
- 2018-10-05 US US16/603,548 patent/US11741135B2/en active Active
- 2018-10-05 EP EP18799904.0A patent/EP3799639A1/en active Pending
- 2018-10-05 CN CN201880097172.1A patent/CN112639766A/en active Pending
-
2023
- 2023-08-29 US US18/458,123 patent/US20230409611A1/en active Pending
Patent Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130124563A1 (en) * | 2011-11-16 | 2013-05-16 | Google Inc. | Controlling pre-fetching of map data tiles based on selectable parameters |
US9063951B1 (en) * | 2011-11-16 | 2015-06-23 | Google Inc. | Pre-fetching map data based on a tile budget |
US8849942B1 (en) * | 2012-07-31 | 2014-09-30 | Google Inc. | Application programming interface for prefetching map data |
CN103017783A (en) * | 2012-12-05 | 2013-04-03 | 中兴通讯股份有限公司 | Navigation method and system, map data management cloud end and data updating method thereof |
US20150379618A1 (en) * | 2013-02-14 | 2015-12-31 | Hunt Ltd. | Device, system, and method of converting online browsing to offline purchases |
US20140379850A1 (en) * | 2013-06-24 | 2014-12-25 | Google Inc. | System and Method for Providing Geospatial Assets |
CN104252371A (en) * | 2014-09-04 | 2014-12-31 | 百度在线网络技术（北京）有限公司 | Method and device for optimizing map loading performance |
WO2016191674A1 (en) * | 2015-05-28 | 2016-12-01 | Google Inc. | Dynamically integrating offline and online data in a geographic application |
CN105973244A (en) * | 2015-10-29 | 2016-09-28 | 乐卡汽车智能科技（北京）有限公司 | Method, navigation method and equipment for obtaining map information |
US20170219359A1 (en) * | 2015-12-21 | 2017-08-03 | Invensense, Inc. | Method and system for estimating uncertainty for offline map information aided enhanced portable navigation |
US20180231391A1 (en) * | 2017-02-15 | 2018-08-16 | Telenav, Inc. | Navigation system with location based parser mechanism and method of operation thereof |
US20180267527A1 (en) * | 2017-03-17 | 2018-09-20 | Essential Products, Inc. | Handheld mobile device for adaptive vehicular operations |
Non-Patent Citations (3)
Title |
---|
LUK KNAPEN 等: "Likelihood-based offline map matching of GPS recordings using global trace information", 《TRANSPORTATION RESEARCH PART C: EMERGING TECHNOLOGIES》, 31 August 2018 (2018-08-31), pages 13 - 35 * |
刘亚秋 等: "基于云计算的手机智能出租车呼叫系统", 《计算机工程》, 15 April 2014 (2014-04-15), pages 14 - 18 * |
刘洪源 等: "利用ArcGIS Server和GeoGlobe软件实现天地图瓦片数据的切割", 《测绘与空间地理信息》, 25 April 2018 (2018-04-25), pages 151 - 153 * |
Also Published As
Publication number | Publication date |
---|---|
EP3799639A1 (en) | 2021-04-07 |
WO2020072074A1 (en) | 2020-04-09 |
US20210334294A1 (en) | 2021-10-28 |
US20230409611A1 (en) | 2023-12-21 |
US11741135B2 (en) | 2023-08-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8738284B1 (en) | Method, system, and computer program product for dynamically rendering transit maps | |
US20230409611A1 (en) | Improving Offline Map Data Availability | |
US9239246B2 (en) | Method, system, and computer program product for visual disambiguation for directions queries | |
EP2671049B1 (en) | Systems and methods for generating electronic map displays with points-of-interest information | |
EP2671051B1 (en) | Systems and methods for generating electronic map displays with points-of-interest based on density thresholds | |
US9389088B2 (en) | Method of pre-fetching map data for rendering and offline routing | |
US8589075B1 (en) | Method, system, and computer program product for visualizing trip progress | |
JP4695830B2 (en) | Area map providing device for moving body | |
US7953548B2 (en) | Location-based information determination | |
CN108731692B (en) | Apparatus and method for providing map data and system thereof | |
US9360335B1 (en) | Dynamic rerouting during navigation | |
US10788330B2 (en) | Route generation based on aggregated path data | |
CN104221008A (en) | Pre-fetching map tile data along a route | |
WO2016184501A1 (en) | System and method for accelerating route search | |
US10677598B2 (en) | Map-centric map matching method and apparatus | |
CN107092623B (en) | Interest point query method and device | |
US11480439B2 (en) | Method, apparatus, and computer program product for traffic optimized routing | |
US9392044B2 (en) | System and method for providing geospatial assets | |
US10983987B2 (en) | Navigation system with update mechanism and method of operation thereof | |
CN114563003A (en) | Path planning method and device, electronic equipment and storage medium | |
CN112654837A (en) | Selecting points of interest for display on a personalized digital map | |
CN104280040A (en) | Vehicle range projection estimation | |
US20210325192A1 (en) | Fine-Tuned Navigation Directions | |
CN104713544A (en) | Location information display method and equipment | |
WO2004099719A1 (en) | Method and system for providing map information to mobile device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |