US8423885B1 - Updating search engine document index based on calculated age of changed portions in a document - Google Patents
Updating search engine document index based on calculated age of changed portions in a document Download PDFInfo
- Publication number
- US8423885B1 US8423885B1 US13/209,593 US201113209593A US8423885B1 US 8423885 B1 US8423885 B1 US 8423885B1 US 201113209593 A US201113209593 A US 201113209593A US 8423885 B1 US8423885 B1 US 8423885B1
- Authority
- US
- United States
- Prior art keywords
- document
- age
- cluster
- checksum
- documents
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 claims description 77
- 230000008569 process Effects 0.000 claims description 41
- 230000009193 crawling Effects 0.000 claims 4
- 238000010586 diagram Methods 0.000 description 15
- 238000004891 communication Methods 0.000 description 8
- 238000004364 calculation method Methods 0.000 description 6
- 230000006870 function Effects 0.000 description 5
- 230000002431 foraging effect Effects 0.000 description 3
- 230000007246 mechanism Effects 0.000 description 3
- HFHZKZSRXITVMK-UHFFFAOYSA-N oxyphenbutazone Chemical compound O=C1C(CCCC)C(=O)N(C=2C=CC=CC=2)N1C1=CC=C(O)C=C1 HFHZKZSRXITVMK-UHFFFAOYSA-N 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 230000008520 organization Effects 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 239000002699 waste material Substances 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000000593 degrading effect Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- the World Wide Web (“web”) contains a vast amount of information that is ever-changing.
- Existing web-based information retrieval systems use web crawlers to identify information on the web.
- a web crawler is a program that exploits the link-based structure of the web to browse the web in a methodical, automated manner.
- a web crawler may start with addresses (e.g., Uniform Resource Locators (URLs)) of links to visit. For each address on the list, the web crawler may visit the document associated with the address. The web crawler may identify outgoing links within the visited document and add addresses associated with these links to the list of addresses.
- addresses e.g., Uniform Resource Locators (URLs)
- URLs Uniform Resource Locators
- An indexer creates an index of the documents crawled by the web crawler.
- a problem that indexers face is how to handle duplicate content on the web. For example, the same document may appear duplicated or substantially duplicated in different forms or at different places on the web.
- a document may include some content (e.g., a random advertisement or a related links section) that changes frequently, and some content that does not change over time.
- the document may also be a duplicate of one or more other documents. If the document is crawled at two different points in time, the document may include different advertisements.
- the indexer may be provided with two versions of the document corresponding to the different crawl times. Due to the changing advertisement, the indexer may not appropriately identify one of the versions of the document as a duplicate of the one or more other documents.
- indexers face is what may be referred to as “crawl skew.”
- a document e.g., a blog page
- its duplicate may include content that continuously grows over time and may cause crawl skew.
- the document and its duplicate may be crawled at two different points in time (e.g., the document may be crawled after the duplicate and may include new content not included in the duplicate).
- the indexer may be provided with the document and its duplicate. However, due to the new content, the indexer may not appropriately identify the document and the duplicate as a duplicates.
- indexing duplicate documents wastes space in the index. Also, indexing duplicate documents, and thus making the duplicate documents available for serving as search results leads to an undesirable experience for the user. A user does not want to be presented with multiple documents containing the same, or substantially the same, content.
- a computing device-implemented method may include receiving a document, comparing the document with a prior version of the document, and determining, based on the comparison, at least one first portion of the document that is common with the prior version of the document, and at least one second portion of the document that is uncommon with the prior version of the document.
- the method may also include determining an age of the at least one first portion and the at least one second portion, and determining whether the age of the at least one first portion is greater than or equal to an age threshold, and that the age of the at least one second portion is less than the age threshold.
- the method may also include calculating a checksum of the document based on the at least one first portion but not the at least one second portion, and storing the calculated checksum.
- a computing device-implemented system may include means for receiving an aged version of a document, means for comparing the aged version of the document with a prior version of the document, and means for determining at least one first portion of the aged version of the document that is common with the prior version of the document based on the comparison.
- the system may also include means for determining at least one second portion of the aged version of the document that is uncommon with the prior version of the document based on the comparison, means for determining an age of the at least one first portion and the at least one second portion, and means for determining whether the age of the at least one first portion is greater than or equal to an age threshold, and that the age of the at least one second portion is less than the age threshold.
- the system may further include means for calculating a checksum of the aged version of the document based on the at least one first portion but not the at least one second portion, means for determining whether the calculated checksum matches a checksum associated with a cluster of duplicate documents, and means for associating the aged version of the document with the cluster of duplicate documents when the calculated checksum matches the checksum associated with the cluster of duplicate documents.
- a system may include a memory to store a plurality of instructions, and a processor to execute instructions in the memory to: receive a document, compare the document with a prior version of the document, determine, based on the comparison, at least one first portion of the document that is common with the prior version of the document, and at least one second portion of the document that is uncommon with the prior version of the document, determine an age of the at least one first portion and the at least one second portion, determine whether the age of the at least one first portion is greater than or equal to an age threshold, and that the age of the at least one second portion is less than the age threshold, calculate a checksum of the document based on the at least one first portion but not the at least one second portion, and associate the document with a cluster of duplicate documents when the calculated checksum matches the checksum associated with the cluster of duplicate documents.
- a computing device-implemented method may include receiving a document that includes new content and aged content, comparing the document with a prior version of the document that includes the aged content but not the new content, and separating the new content and the aged content based on the comparison.
- the method may also include determining ages associated with the new content and the aged content, determining whether the ages of the new content and the aged content are greater than or equal to an age threshold, calculating a checksum of the document based on the aged content when the age of the aged content is greater than or equal to the age threshold, and the age of the new content is less than the age threshold, and storing the calculated checksum.
- FIG. 1 depicts a diagram of an overview of an exemplary implementation described herein;
- FIG. 2 illustrates a diagram of an exemplary network in which systems and methods described herein may be implemented
- FIG. 3 depicts a diagram of exemplary components of a device that may correspond to document host and/or a crawler/indexer system of the network illustrated in FIG. 2 ;
- FIG. 4 illustrates a diagram of exemplary functional components of the crawler/indexer system of the network depicted in FIG. 2 ;
- FIG. 5 depicts a diagram of exemplary functional components of a crawler engine of the crawler/indexer system illustrated in FIG. 4 ;
- FIG. 6 illustrates a diagram of exemplary functional components of a document age analyzer of the crawler/indexer system depicted in FIG. 4 ;
- FIG. 7 depicts a diagram of exemplary functional components of a crawl skew analyzer of the crawler/indexer system illustrated in FIG. 4 ;
- FIGS. 8A and 8B illustrate exemplary portions of tables capable of being generated and/or maintained by the crawl skew analyzer depicted in FIG. 7 ;
- FIG. 8C illustrates exemplary interactions between the table portions depicted in FIGS. 8A and 8B ;
- FIGS. 9 and 10 depict exemplary operations capable of being performed by the crawl skew analyzer illustrated in FIG. 7 on the portions of tables illustrated in FIGS. 8A and 8B ;
- FIG. 11 illustrates exemplary documents received during different crawl times and experiencing high frequency content changes
- FIGS. 12 and 13 depict exemplary documents experiencing crawl skew
- FIG. 14 illustrates a diagram of exemplary functional components of an indexing engine of the crawler/indexer system depicted in FIG. 4 ;
- FIGS. 15-18 depict flow charts of an exemplary process for aging portions of a document, according to implementations described herein.
- a “document,” as the term is used herein, is to be broadly interpreted to include any machine-readable and machine-storable work product.
- a document may include, for example, an e-mail, a file, a combination of files, one or more files with embedded links to other files, a news group posting, a blog, a web advertisement, a Uniform Resource Locator (URL), etc.
- URL Uniform Resource Locator
- Web pages often include textual information and may include embedded information (such as meta information, images, hyperlinks, etc.) and/or embedded instructions (such as Javascript, etc.).
- a “web site,” as used herein, is to be broadly interpreted to include a collection of related documents, such as documents associated with a same host or organization.
- the collection of related documents might include all or a subset of the documents associated with a traditional web site, directory, or sub-directory, or some other set of documents that are related to each other (e.g., on the same host or associated with the same organization).
- crawl skew and documents with high frequency content changes may pose problems by wasting resources (e.g., computer, storage, and/or network resources) and degrading a user's search experience (e.g., by presenting multiple documents with essentially the same content). Implementations described herein may age one or more portions of such documents so that documents with high frequency content changes and/or documents that experience crawl skew may be kept in the same duplicate clusters as documents having the same and/or similar content.
- resources e.g., computer, storage, and/or network resources
- degrading a user's search experience e.g., by presenting multiple documents with essentially the same content.
- a prior version (e.g., a previously crawled version) of a document may include original content, and an aged version (e.g., a currently crawled version) of the document may include the original content, as well as new or changed content.
- a document age analyzer may analyze a prior version of the document and the aged version of the document. The document age analyzer may determine ages of portions of the document based on a comparison of the aged version of the document with the prior version of the document.
- the document age analyzer may identify portions of the aged version of the document with ages greater than an age threshold, and may calculate a checksum of the aged version of the document based on the identified portions (e.g., based on the original or aged content).
- a crawl skew analyzer may associate the aged version of the document with a cluster of duplicate documents (e.g., via a duplicate cluster identifier (ID)). Such an arrangement may ensure that the different versions of documents are associated with the same cluster of duplicate documents, which may improve duplicate clustering.
- checksum is to be broadly interpreted to include a hash function, a form of redundancy check, a way to protect the integrity of information and/or data by detecting errors in the information and/or data that are transmitted through space or time, or a mechanism that adds components of a message (e.g., asserted bits), and stores the resulting value.
- FIG. 2 is a diagram of an exemplary network 200 in which systems and methods described herein may be implemented.
- network 200 may include multiple document hosts 210 connected to a crawler/indexer system 220 via a network 230 .
- Four document hosts 210 and a single crawler/indexer system 220 have been illustrated as connected to network 230 for simplicity. In practice, there may be more, fewer, or a different arrangement of document hosts 210 and/or crawler/indexer systems 220 .
- Document hosts 210 may include entities that store and/or manage documents.
- An entity may be defined as a device, such as a stationary or portable computer, a personal digital assistant (PDA), a laptop computer, a telephone device, or another type of computation or communication device, a thread or process running on one of these devices, and/or an object executable by one of these devices.
- PDA personal digital assistant
- Crawler/indexer system 220 may include an entity that crawls, processes, indexes, and/or maintains documents.
- crawler/indexer system 220 may crawl a corpus of documents (e.g., web documents), index the documents, and/or store information associated with the documents in a repository of documents. While crawler/indexer system 220 is shown as a single entity, it may be possible for crawler/indexer system 220 to be implemented as two or more separate (and possibly distributed) entities.
- Network 230 may include a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN) or a cellular network, an intranet, the Internet, or a combination of networks.
- Document hosts 210 and crawler/indexer system 220 may connect to network 230 via wired and/or wireless connections. The connections may either be direct or indirect connections.
- FIG. 3 depicts a diagram of exemplary components of a device 300 that may correspond to a document host 210 and/or crawler/indexer system 220 .
- device 300 may include a bus 310 , a processor 320 , a main memory 330 , a read only memory (ROM) 340 , a storage device 350 , an input device 360 , an output device 370 , and a communication interface 380 .
- Bus 310 may include a path that permits communication among the components of device 300 .
- Processor 320 may include a processor, a microprocessor, or processing logic that may interpret and execute instructions.
- Main memory 330 may include a random access memory (RAM) or another type of dynamic storage device that may store information and instructions for execution by processor 320 .
- ROM 340 may include a ROM device or another type of static storage device that may store static information and instructions for use by processor 320 .
- Storage device 350 may include a magnetic and/or optical recording medium and its corresponding drive.
- Input device 360 may include a component that permits an operator to input information to device 300 , such as a keyboard, a mouse, a pen, voice recognition and/or biometric mechanisms, etc.
- Output device 370 may include a component that outputs information to the operator, including a display, a printer, a speaker, etc.
- Communication interface 380 may include any transceiver-like mechanism that enables device 300 to communicate with other devices and/or systems.
- communication interface 380 may include components for communicating with another device or system via a network, such as network 230 .
- Device 300 may perform certain operations described herein. Device 300 may perform these operations in response to processor 320 executing software instructions contained in a computer-readable medium, such as memory 330 .
- a computer-readable medium may be defined as a physical or logical memory device.
- the software instructions may be read into memory 330 from another computer-readable medium, such as storage device 350 , or from another device via communication interface 380 .
- the software instructions contained in memory 330 may cause processor 320 to perform processes described herein.
- hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein.
- implementations described herein are not limited to any specific combination of hardware circuitry and software.
- FIG. 3 shows exemplary components of device 300
- device 300 may contain fewer, different, or additional components than depicted in FIG. 3
- one or more components of device 300 may perform one or more other tasks described as being performed by one or more other components of device 300 .
- FIG. 4 is a diagram of exemplary functional components of crawler/indexer system 220 .
- crawler/indexer system 220 may include a crawler engine 410 , a document age analyzer 420 , a crawl skew analyzer 430 , and an indexing engine 440 connected to a database 450 .
- crawler engine 410 , document age analyzer 420 , crawl skew analyzer 430 , and/or indexing engine 440 may be implemented by software and/or hardware within crawler/indexer system 220 .
- crawler engine 410 may be implemented by software and/or hardware within another device or a group of devices separate from or including crawler/indexer system 220 .
- Crawler engine 410 may operate from a list of addresses to fetch corresponding documents from a corpus of documents (e.g., the web). Crawler engine 410 may extract the addresses (e.g., URLs) associated with the outgoing links in the document and may add the addresses to the list of addresses to be crawled. Crawler engine 410 may also store information associated with the document, such as all or part of the document, in database 450 . Further details of crawler engine 410 are provided below in connection with, for example, FIG. 5 .
- Document age analyzer 420 may analyze versions of a document that has been crawled (e.g., via crawler engine 410 ) at different points in time. For example, in one implementation, document age analyzer 420 may analyze a prior version (e.g., a previously crawled version) of a document and an aged version (e.g., a currently crawled version) of the document. Document age analyzer 420 may determine ages of portions of the document based on a comparison of the aged version of the document with the prior version of the document. Document age analyzer 420 may identify portions of the document with ages greater than an age threshold, and may calculate a checksum of the aged version of the document based on the identified portions. Further details of document age analyzer 420 are provided below in connection with, for example, FIG. 6 .
- Crawl skew analyzer 430 may associate a calculated checksum (e.g., the checksum calculated by document age analyzer 420 ) with a cluster of duplicate documents.
- crawl skew analyzer 430 may associate the calculated checksum with a cluster of duplicate documents (e.g., via a duplicate cluster ID) associated with a checksum that matches the calculated checksum. Further details of crawl skew analyzer 430 are provided below in connection with, for example, FIG. 7 .
- Indexing engine 440 may operate upon documents crawled by crawler engine 410 and/or processed by document age analyzer 420 and/or crawl skew analyzer 430 . For example, indexing engine 440 may create an index of such documents, and may store the index in database 450 . Indexing engine 440 may operate upon a cluster of duplicate documents to select one of these documents as representative of the cluster. For example, indexing engine 440 may index portions of the document with a certain minimum age (e.g., as identified by document age analyzer 420 ).
- Database 450 may be embodied within a single memory device or within multiple (possibly distributed) memory devices.
- Database 450 may store the list of addresses used by crawler engine 410 , information associated with documents crawled by crawler engine 410 , a list of checksums compiled by document age analyzer 420 , a list of checksums and associated duplicate cluster identifiers (IDs) compiled by crawl skew analyzer 430 , a list of duplicate cluster IDs and associated address (e.g., URLs) compiled by crawl skew analyzer 430 , and/or the index generated by indexing engine 440 .
- IDs duplicate cluster identifiers
- crawler/indexer system 220 may contain fewer, different, or additional functional components than depicted in FIG. 4 .
- one or more functional components of crawler/indexer system 220 may perform one or more other tasks described as being performed by one or more other functional components of crawler/indexer system 220 .
- FIG. 5 is a diagram of exemplary functional components of crawler engine 410 .
- crawler engine 410 may include fetch bots 500 and a content manager 510 .
- crawler engine 410 may be implemented by software and/or hardware within crawler/indexer system 220 .
- crawler engine 410 may be implemented by software and/or hardware within another device or a group of devices separate from or including crawler/indexer system 220 .
- a fetch bot 500 may fetch a document from a corpus of documents, and may provide the fetched document to content manager 510 .
- Fetch bots 500 may operate from a list of addresses provided by content manager 510 .
- Content manager 510 may parse a document fetched by a fetch bot 500 to identify outgoing links that the fetched document contains. Content manager 510 may add addresses associated with the outgoing links to a list of addresses that it maintains. Content manager 510 may provide addresses from the list to fetch bots 500 as instructions for fetch bots 500 to fetch (i.e., crawl) the corresponding documents. Content manager 510 may also store information 520 associated with the fetched documents (e.g., all or part of the fetched documents) in database 450 ( FIG. 4 ).
- crawler engine 410 may contain fewer, different, or additional functional components than depicted in FIG. 5 .
- one or more functional components of crawler engine 410 may perform one or more other tasks described as being performed by one or more other functional components of crawler engine 410 .
- FIG. 6 is a diagram of exemplary functional components of document age analyzer 420 .
- document age analyzer 420 may include a content age assigner 600 , an aged content identifier 610 , and a checksum calculator 620 .
- document age analyzer 420 may be implemented by software and/or hardware within crawler/indexer system 220 .
- document age analyzer 420 may be implemented by software and/or hardware within another device or a group of devices separate from or including crawler/indexer system 220 .
- Content age assigner 600 may retrieve a set of documents 630 from database 450 , and may analyze documents 630 .
- content age assigner 600 may analyze information associated with documents 630 (e.g., addresses, contents, metadata (e.g., refresh meta tags, refresh headers, status codes, crawl times, etc.) to determine ages of portions of documents 630 .
- content age assigner 600 may receive an aged version of a document (e.g., a document retrieved from a current crawl), and may compare the aged version of the document with one or more prior versions of the document (e.g., versions of the document retrieved from prior crawls) to identify aged (e.g., reused or common) and/or new (or changed) content 640 associated with the document.
- Content age assigner 600 may provide aged/new content 640 to aged content identifier 610 .
- Content age assigner 600 may utilize a variety of techniques to compare the aged and prior version(s) of the document.
- the versions of the document may be stored as a sequence of portions or tokens (e.g., words, phrases, one or more characters, etc.).
- An age field or parameter may be associated with each token, and may indicate an age of the token.
- Content age assigner 600 may determine the age parameter of the token by comparing crawl times associated with the versions of the document.
- content age assigner 600 may set a token's age parameter based on a difference between crawl times of a document associated with the token (e.g., using a counting function).
- content age assigner 600 may set a token's age parameter to a value (e.g., five). If an aged version of the document was crawled at 2:00 AM, content age assigner 600 may set the same token's age parameter to another value (e.g., four).
- Content age assigner 600 may compare the age parameters to an age threshold (e.g., a minimum age threshold), and may determine if a document token (e.g., a portion of the document) is aged (e.g., greater than or equal to the minimum age threshold) and/or is new (e.g., less than the minimum age threshold) based on the age parameters. Further details of tokens and age parameters are provided below in connection with, for example, FIGS. 11-13 .
- an age threshold e.g., a minimum age threshold
- content age assigner 600 may identify aged/new content 640 using a longest common subsequence (LCS) process or a winnowing process.
- the longest common subsequence process may include determining a longest subsequence common to sequences in a set of sequences.
- content age assigner 600 may identify aged content as a longest subsequence (e.g., portions of a document) common to both aged and prior versions of the document.
- Content age assigner 600 may identify new content as portions of the document uncommon to both the aged and prior versions of the document.
- the LCS process may include an algorithm that compares an aged document with a small number of previous documents.
- Content age assigner 600 may utilize the winnowing process (e.g., as set forth in Schleimer et al., “Winnowing: Local Algorithms for Document Fingerprinting,” Proceedings Of The 2003 ACM SIGMOD International Conference On Management Of Data (June 2003), the disclosure of which is incorporated by reference herein in its entirety) to determine a set of fingerprints for each version of the document, to identify aged content based on an intersection of the sets of fingerprints, and to identify new content based on content from the new document falling outside of the intersection of the sets of fingerprints.
- the winnowing process may include an approximate approach that efficiently compares re-crawled documents with a larger number of previous versions of the document.
- Aged content identifier 610 may receive aged/new content 640 from content age assigner 600 , and may remove new (or changed) content 650 from aged/new content 640 .
- Aged content identifier 610 may provide new content 650 to database 450 .
- New content 650 may be indexed by indexing engine 440 , depending upon the information contained in new content 650 . For example, if new content 650 relates to the content of the document being analyzed by document age analyzer 420 , new content 650 may be indexed by indexing engine 440 . In another example, if new content 650 relates to an advertisement, new content 650 may not be indexed by indexing engine 440 .
- aged content identifier 610 may remove new content 650 from aged/new content 640 , and may provide aged content 660 to checksum calculator 620 and/or database 450 .
- Checksum calculator 620 may receive aged content 660 from aged content identifier 610 , and may calculate a checksum 670 of aged content 660 .
- aged content 660 may include one or more portions of the document with age(s) greater than or equal to the minimum age threshold.
- checksum calculator 620 may calculate a checksum of the document based on the identified one or more portions of the document with age(s) greater than or equal to the minimum age threshold.
- Checksum calculator 620 may calculate checksum 670 using typical checksum calculation techniques. For example, checksum calculator 620 may calculate checksum 670 by adding components (e.g., bits) of associated aged content 660 , and outputting a resulting value. As further shown in FIG. 6 , checksum calculator 620 may provide checksum 670 to database 450 .
- checksum calculator 620 calculates the checksum of aged content 660 , different versions of documents with high frequency content changes (e.g., new content 650 ) may be associated with the same duplicate cluster. This may by prevent waste of resources (e.g., computer, storage, and/or network resources) and degradation of a user's search experience (e.g., by presenting multiple documents with essentially the same content).
- resources e.g., computer, storage, and/or network resources
- document age analyzer 420 may contain fewer, different, or additional functional components than depicted in FIG. 6 .
- one or more functional components of document age analyzer 420 may perform one or more other tasks described as being performed by one or more other functional components of document age analyzer 420 .
- FIG. 7 is a diagram of exemplary functional components of crawl skew analyzer 430 .
- crawl skew analyzer 430 may include a checksum/cluster identifier (ID) associator 700 , a cluster ID/URL associator 710 , and a checksum comparer 720 .
- ID checksum/cluster identifier
- crawl skew analyzer 430 may be implemented by software and/or hardware within crawler/indexer system 220 .
- crawl skew analyzer 430 may be implemented by software and/or hardware within another device or a group of devices separate from or including crawler/indexer system 220 .
- Crawl skew analyzer 430 may address the problem of crawl skew by implementing a “checksum ownership” process. For example, assume that a prior version of a document (e.g., a blog page) and its duplicate contain aged content, that an aged (e.g., re-crawled) version of the document contains the aged content and new content (e.g., a new blog posting), and that the duplicate does not contain the new content. When the new content becomes old enough to be considered in the age-based checksum described above (e.g., checksum 670 ), the checksums associated with the aged version of the document and the duplicate may be different. Thus, the aged version of document and its duplicate may not be considered duplicates.
- the checksum ownership process may address such crawl skew by enabling the aged version of the document and the duplicate to remain as duplicates for an extended period of time.
- Checksum/cluster ID associator 700 may retrieve cluster identifiers (IDs) 730 (e.g., that may identify one or more clusters of duplicate documents) and checksums 740 (e.g., checksum 670 ) from database 450 , and may associate one or more checksums 740 with each of cluster IDs 730 .
- Checksum/cluster ID associator 700 may provide associated checksums/cluster IDs 750 to database 450 and/or to checksum comparer 720 .
- checksum/cluster ID associator 700 may compare a checksum 740 with a checksum associated with a specific cluster ID 730 , and may associate checksum 740 with the specific cluster ID 730 if checksum 740 matches the checksum associated with the specific cluster ID 730 .
- FIG. 8A illustrates an exemplary portion 800 of a table capable of being generated and/or maintained (e.g., updated) by checksum/cluster ID associator 700 .
- table portion 800 may include a checksum column 810 , a cluster ID column 820 , and a number of entries (e.g., entries 830 and 840 ) associated with checksum column 810 and cluster ID column 820 .
- the information contained in table portion 800 may correspond to associated checksums/cluster IDs 750 provided by checksum/cluster ID associator 700 .
- table portion 800 may be stored in a storage device (e.g., main memory 330 , ROM 340 , and/or storage device 350 ) associated with crawler/indexer system 220 , such as database 450 .
- table portion 800 may be stored in a storage device associated with another device that may be accessed by crawler/indexer system 220 (e.g., via communication interface 380 ).
- Checksum column 810 may include information associated with checksums 740 (e.g., checksum 670 ) retrieved from database 450 by checksum/cluster ID associator 700 .
- checksum column 810 may include entries 830 for a first checksum (e.g., “CHECKSUM 1 ”), a second checksum (e.g., “CHECKSUM 2 ”), and a third checksum (e.g., “CHECKSUM 3 ”), and entry 840 for a fourth checksum (e.g., “CHECKSUM 4 ”).
- Cluster ID column 820 may include information associated with cluster IDs 730 retrieved from database 450 by checksum/cluster ID associator 700 .
- cluster ID column 820 may include entries 830 for a first cluster ID (e.g., “CLUSTER ID 1 ”), and entry 840 for a second cluster ID (e.g., “CLUSTER ID 2 ”).
- the first and second checksums of entries 830 may be associated with the first cluster ID
- the third and fourth checksums of entry 840 may be associated with the second cluster ID.
- cluster ID/URL associator 710 may retrieve cluster identifiers (IDs) 730 (e.g., that may identify one or more clusters of duplicate documents) and addresses (e.g., URLs) 760 (e.g., that may identify documents associated with checksums 740 ) from database 450 , and may associate each of cluster IDs 730 with one or more URLs 760 .
- Cluster ID/URL associator 710 may provide associated cluster IDs/URLs 770 to database 450 and/or to checksum comparer 720 .
- cluster ID/URL associator 710 may associate a specific cluster ID 730 with URLs that identify documents associated with checksums 740 that match (or substantially match) the checksum associated with the specific cluster ID 730 .
- FIG. 8B illustrates an exemplary portion 850 of a table capable of being generated and/or maintained (e.g., updated) by cluster ID/URL associator 710 .
- table portion 850 may include a cluster ID column 860 , an address column 870 , and a number of entries (e.g., entries 880 and 890 ) associated with cluster ID column 860 and address column 870 .
- the information contained in table portion 850 may correspond to associated cluster IDs/URLs 770 provided by cluster ID/URL associator 710 .
- table portion 850 may be stored in a storage device (e.g., main memory 330 , ROM 340 , and/or storage device 350 ) associated with crawler/indexer system 220 , such as database 450 . In other implementations, table portion 850 may be stored in a storage device associated with another device that may be accessed by crawler/indexer system 220 (e.g., via communication interface 380 ).
- a storage device e.g., main memory 330 , ROM 340 , and/or storage device 350
- table portion 850 may be stored in a storage device associated with another device that may be accessed by crawler/indexer system 220 (e.g., via communication interface 380 ).
- Cluster ID column 860 may include information associated with cluster IDs 730 retrieved from database 450 by cluster ID/URL associator 710 .
- cluster ID column 860 may include entries 880 for a first cluster ID (e.g., “CLUSTER ID 1 ”), and entries 890 for a second cluster ID (e.g., “CLUSTER ID 2 ”).
- Address column 870 may include information associated with URLs 760 retrieved from database 450 by cluster ID/URL associator 710 .
- address column 870 may include entries 880 for a first URL (e.g., “A.COM”) and a second URL (e.g., “B.COM”), and entries 890 for a third URL (e.g., “C.COM”) and a fourth URL (e.g., “D.COM”).
- the first and second URLs of entries 880 may be associated with the first cluster ID (i.e., they are duplicated of each other), and the third and fourth URLs of entries 890 may be associated with the second cluster ID.
- CLUSTER ID 1 and CLUSTER ID 2 both contain two documents, as per table portion 850 ( FIG. 8B ).
- CLUSTER ID 1 may contain “A.COM” and “B.COM”
- CLUSTER ID 2 may contain “C.COM” and “D.COM.”
- table portion 800 FIG. 8A
- “A.COM” may begin to assume the content of “C.COM” (or “D.COM”).
- the additional paragraph may be added to “A.COM.”
- the additional paragraph may be considered new content and therefore may be disregarded in the checksum computation until enough time passes. Therefore, “A.COM” may remain in its cluster with “B.COM.”
- Half-way through the waiting period, the additional paragraph may also be added to “B.COM.”
- the waiting period for “A.COM” is complete, it may assume CHECKSUM 3 / 4 , as indicated by reference number 891 in FIG. 8C , but it may take time for “B.COM” to also assume CHECKSUM 3 / 4 .
- A.COM has assumed CHECKSUM 3 / 4 , it may be clustered with “C.COM” and “D.COM.” On the other hand, “A.COM” and “B.COM” may remain clustered. This may be resolved by merging the two clusters, i.e., creating a new cluster identifier (e.g., CLUSTER ID 3 ) that may correspond to CHECKSUMS 1 - 4 in table portion 800 , as indicated by reference number 892 .
- CLUSTER ID 3 a new cluster identifier
- table portion 850 may be updated, as indicated by reference number 893 , so that the four documents (e.g., “A.COM,” “B.COM,” “C.COM,” and “D.COM”) may belong to CLUSTER ID 3 , and CHECKSUMS 1 - 4 may be owned by CLUSTER ID 3 .
- the four documents e.g., “A.COM,” “B.COM,” “C.COM,” and “D.COM”
- CHECKSUMS 1 - 4 may be owned by CLUSTER ID 3 .
- checksum comparer 720 may compare the checksum (e.g., “CHECKSUM 3 / 4 ”) associated with “A.COM” to the checksum column of table portion 800 to determine if the checksum (e.g., “CHECKSUM 3 / 4 ”) matches any of the checksum entries provided in the checksum column.
- Checksum comparer 720 may determine that “A.COM” may be clustered with “C.COM” and “D.COM,” but may remain clustered with “B.COM.”
- Checksum comparer 720 may provide the checksum (e.g., “CHECKSUM 3 / 4 ”) associated with “A.COM” to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive the checksum (e.g., “CHECKSUM 3 / 4 ”) associated with “A.COM”, and may create a new entry in table portion 800 that includes multiple checksums (e.g., “CHECKSUMS 1 - 4 ”) and a new cluster ID (e.g., “CLUSTER ID 3 ”).
- Cluster ID/URL associator 710 may receive the checksums (e.g., “CHECKSUMS 1 - 4 ”), and may update table portion 850 so that the new cluster ID (e.g., “CLUSTER ID 3 ”) is associated with the four documents (e.g., “A.COM,” “B.COM,” “C.COM,” and “D.COM”).
- checksum comparer 720 may receive associated checksums/cluster IDs 750 from checksum/cluster ID associator 700 , may receive associated cluster IDs/URLs 770 from cluster ID/URL associator 710 , and may receive checksums 740 and/or URLs 760 .
- Checksum comparer 720 may determine if calculated checksums (e.g., checksums 740 ) match checksums associated with a cluster ID (e.g., matches checksums provided in associated checksum/cluster ID 750 ).
- Checksum comparer 720 may compare calculated checksums (e.g., checksums 740 ) with checksums provided in associated checksums/cluster IDs 750 (e.g., with checksums provided in table portion 800 ( FIG. 8A )). If the calculated checksums match one of the checksums provided in associated checksums/cluster IDs 750 , checksum comparer 720 may provide matching checksums 780 to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive matching checksums 780 , and may verify matching checksums 780 with corresponding cluster IDs, as described above in connection with checksum/cluster ID associator 700 and in connection with FIG. 8A .
- Cluster ID/URL associator 710 may receive matching checksums 780 , and may add URLs associated with checksums 780 to the corresponding cluster IDs, as described above in connection with cluster ID/URL associator 710 and in connection with
- FIG. 9 depicts exemplary operations capable of being performed by crawl skew analyzer 430 on table portions 800 and 850 illustrated in FIGS. 8A and 8B .
- checksum comparer 720 receives a new URL (e.g., “E.COM”) that includes checksum (e.g., “CHECKSUM 1 ”), as indicated by reference number 910 .
- Checksum comparer 720 may compare the checksum (e.g., “CHECKSUM 1 ”) to the checksum column of table portion 800 to determine if the checksum (e.g., “CHECKSUM 1 ”) matches any of the checksum entries provided in the checksum column.
- CHECKSUM 1 the checksum column of table portion 800
- checksum comparer 720 may determine whether the checksum (e.g., “CHECKSUM 1 ”) matches the first entry of the checksum column, as indicated by reference number 920 .
- Checksum comparer 720 may provide the matching checksum (e.g., “CHECKSUM 1 ”) to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive the matching checksum (e.g., “CHECKSUM 1 ”), and may verify the matching checksum (e.g., “CHECKSUM 1 ”) with a corresponding cluster ID (e.g., “CLUSTER ID 1 ”).
- Cluster ID/URL associator 710 may receive the matching checksum (e.g., “CHECKSUM 1 ”), and may create a new entry 930 in table portion 850 that includes the cluster ID (e.g., “CLUSTER ID 1 ”) and the URL (e.g., “E.COM”) associated with the matching checksum (e.g., “CHECKSUM 1 ”), as indicated by reference number 940 .
- the matching checksum e.g., “CHECKSUM 1
- URL e.g., “E.COM”
- checksum comparer 720 may provide non-matching checksums 790 to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive non-matching checksums 790 , and may associate non-matching checksums 790 with corresponding new cluster IDs.
- Cluster ID/URL associator 710 may receive non-matching checksums 790 , and may add URLs associated with non-matching checksums 790 to the corresponding new cluster IDs.
- FIG. 10 depicts exemplary operations capable of being performed by crawl skew analyzer 430 on table portions 800 and 850 illustrated in FIGS. 8A and 8B .
- checksum comparer 720 receives a new URL (e.g., “E.COM”) that includes checksum (e.g., “CHECKSUM 5 ”), as indicated by reference number 1010 .
- Checksum comparer 720 may compare the checksum (e.g., “CHECKSUM 5 ”) to the checksum column of table portion 800 to determine if the checksum (e.g., “CHECKSUM 5 ”) matches any of the checksum entries provided in the checksum column.
- CHECKSUM 5 the checksum column of table portion 800
- checksum comparer 720 may determine whether the checksum (e.g., “CHECKSUM 5 ”) does not match an entry of the checksum column, as indicated by reference number 1020 .
- Checksum comparer 720 may provide the non-matching checksum (e.g., “CHECKSUM 5 ”) to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive the non-matching checksum (e.g., “CHECKSUM 5 ”), and may create an entry in table portion 800 that includes the non-matching checksum (e.g., “CHECKSUM 5 ”) and a new cluster ID (e.g., “CLUSTER ID 3 ”), as indicated by reference number 1030 .
- the non-matching checksum e.g., “CHECKSUM 5
- CLUSTER ID 3 e.g., “CLUSTER ID 3 ”
- Cluster ID/URL associator 710 may receive the non-matching checksum (e.g., “CHECKSUM 5 ”), and may create a new entry 1040 in table portion 850 that includes the new cluster ID (e.g., “CLUSTER ID 3 ”) and the URL (e.g., “E.COM”) associated with the non-matching checksum (e.g., “CHECKSUM 5 ”), as indicated by reference number 1050 .
- the non-matching checksum e.g., “CHECKSUM 5
- URL e.g., “E.COM”
- crawl skew analyzer 430 may contain fewer, different, or additional functional components than depicted in FIG. 7 .
- one or more functional components of crawl skew analyzer 430 may perform one or more other tasks described as being performed by one or more other functional components of crawl skew analyzer 430 .
- FIGS. 11-13 illustrate exemplary functions capable of being performed by document age analyzer 420 and crawl skew analyzer 430 .
- FIG. 11 depicts exemplary documents 1100 received during different crawl times that are experiencing high frequency content changes.
- a crawl 1105 of a document 1110 may occur on day “X,” at 1:00 AM, and a re-crawl 1115 of document 1110 may occur on day “X,” at 2:00 AM.
- Document 1110 may include a sequence of portions or tokens 1120 (e.g., words, phrases, one or more characters, etc.).
- Tokens 1120 associated with crawl 1105 may include unchanging content 1125 and changing content 1130 (e.g., “advertisement 1 ”).
- Tokens associated with re-crawl 1115 may include unchanging content 1125 and changing content 1135 (e.g., “advertisement 2 ”).
- Age parameters 1140 - 1155 may be associated with each token 1120 , and may indicate an age of each token 1120 .
- Document age analyzer 420 e.g., content age assigner 600 of document age analyzer 420 ) may set age parameters 1140 - 1155 of tokens 1120 based on a crawl time associated with document 1110 .
- content age assigner 600 may set age parameter 1145 of changing content 1130 to a value (e.g., “0”) that is less than age parameter 1140 (e.g., “16”) of unchanging content 1125 .
- content age assigner 600 may set age parameter 1155 of changing content 1135 to a value (e.g., “0”) that is less than age parameter 1150 (e.g., “17”) of unchanging content 1125 .
- Content age assigner 600 may compare age parameters 1140 - 1155 to an age threshold (e.g., a minimum age threshold), and may determine if portions of documents 1120 and 1140 are aged (e.g., greater than or equal to the minimum age threshold) and/or are new (e.g., less than the minimum age threshold) based on age parameters 1150 and 1155 .
- an age threshold e.g., a minimum age threshold
- Document age analyzer 420 may calculate checksums 1160 of the crawled and re-crawled versions of document 1110 .
- checksums 1160 of the crawled and re-crawled versions of document 1110 may match (e.g., may equal “CHECKSUM”) because checksum calculator 620 may exclude changing portions 1130 and 1135 from the calculation (i.e., may calculate checksums 1160 based only on unchanging content 1125 ).
- document 1110 may remain associated with the same duplicate cluster despite including a portion experiencing high frequency content changes.
- FIGS. 12 and 13 depict exemplary documents 1200 and 1300 experiencing crawl skew.
- a document 1210 e.g., a blog page
- another document 1220 may include common content 1230 .
- checksums 1240 e.g., “CHECKSUM 1 ”
- Checksums 1240 may match (e.g., indicating that documents 1210 and 1220 are duplicates) since both documents 1210 and 1220 may include common content 1230 .
- Document 1210 may be re-crawled (e.g., as shown by re-crawled document 1250 ) at a later time, but document 1220 may not be re-crawled.
- Re-crawled document 1250 may contain common content 1230 and new content 1260 (e.g., a new blog posting), and document 1220 may still include only common content 1230 .
- checksums 1240 and 1270 e.g., “CHECKSUM 1 ” may be calculated for documents 1220 and 1250 , respectively.
- Checksums 1240 and 1270 may match (e.g., indicating that documents 1220 and 1250 are duplicates) since both documents 1220 and 1250 may include common content 1230 , and the age-based checksum technique may exclude new content 1260 from the calculation of checksum 1270 . This may enable document 1220 and re-crawled document 1250 to remain as duplicates for an extended period of time.
- crawl skew analyzer 430 may address this situation. As shown in FIG. 13 , such a situation may be only temporary. As illustrated, document 1220 may eventually be re-crawled (e.g., as shown by re-crawled document 1300 ) and may include common content 1230 and new content 1260 . New content 1260 of re-crawled document 1300 may become old enough to be considered in the calculation of the age-based checksum.
- checksums 1320 may be calculated for documents 1250 and 1300 .
- Checksums 1320 may match (e.g., indicating that documents 1250 and 1300 are duplicates) since both documents 1250 and 1300 may include common content 1230 and new content 1260 , and the age-based checksum technique may include new content 1260 in the calculation of checksums 1320 . This may enable re-crawled document 1250 and re-crawled duplicate document 1300 to once again be considered duplicates.
- FIG. 14 is a diagram of exemplary functional components of indexing engine 440 .
- indexing engine 440 may include a duplicate detector 1400 and an indexer 1410 .
- indexing engine 440 may be implemented by software and/or hardware within crawler/indexer system 220 .
- indexing engine 440 may be implemented by software and/or hardware within another device or a group of devices separate from or including crawler/indexer system 220 .
- Duplicate detector 1400 may place crawled documents into duplicate clusters.
- Duplicate detector 1400 may use one or more of a number of techniques to determine whether two documents are duplicates (including substantial duplicates) of each other. The techniques may generally fall into the categories of content-based clustering and predictive clustering. Content-based clustering may require an analysis of the contents of the documents to identify duplicates. Predictive clustering may identify duplicate documents without analyzing the contents of the documents.
- An example of a content-based clustering technique may involve duplicate detector 1400 computing a checksum or hash over the content, or a portion of the content, of a document.
- duplicate detector 1400 may receive checksums (e.g., from database 450 ) computed by document age analyzer 420 (e.g., by checksum calculator 620 ). Two documents with the same checksum or hash may be considered duplicates of each other. The age-based checksums provided by document age analyzer 420 may ensure that the two documents remain duplicates even when a portion of one of the documents contains new content.
- An example of a predictive clustering technique may involve computing checksums or hashes over a web site, a directory or subdirectory, or a combination of address parameters, and generating a set of rules that given an address, predicts a cluster identifier (ID) for the document associated with that address.
- a separate set of rules may be generated for each web site, directory, subdirectory, or address parameter combination.
- Some of these rules may list address prefixes that are equivalents of each other. For example, these rules might specify that www.mysite.com, mysite.com, www.geocities.com/mysite, and geocities.com/mysite are equivalents of each other. Thus, each of these addresses may map to the same cluster ID. Some other rules may identify address parameters that are irrelevant.
- these rules might specify that given the address www.forum.com/posts, a post identifier (postid) parameter matters, but a session identifier (sid) parameter does not matter.
- each of these addresses may map to the same cluster ID.
- Duplicate detector 1400 may place each crawled document into a cluster.
- the cluster may have a single document or thousands or millions of documents.
- Duplicate detector 1400 may rank the documents in a cluster in some manner to create a ranked list.
- duplicate detector 1400 may use information that reflects a quality of the documents to rank the documents within the ranked list. In one implementation, this information may include a measure of quality, such as the document's link-based score.
- Indexer 1410 may index one or more top-ranked documents from each of the ranked lists. For example, indexer 1410 may take the text or other data of a top-ranked document in a ranked list, extract individual terms or other data from the text of the document, and sort those terms or other data (e.g., alphabetically) in an index. Other techniques for extracting and indexing content, that are more complex than simple word-level indexing, may also or alternatively be used, including techniques for indexing XML data, images, videos, etc. Each entry in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
- indexing engine 440 may contain fewer, different, or additional functional components than depicted in FIG. 14 .
- one or more functional components of indexing engine 440 may perform one or more other tasks described as being performed by one or more other functional components of indexing engine 440 .
- FIGS. 15-18 depict flow charts of an exemplary process 1500 for aging portions of a document, according to implementations described herein.
- exemplary process 1500 may be performed by document age analyzer 420 and/or crawl skew analyzer 430 .
- exemplary process 1500 may be performed by one or more other components, possibly in conjunction with document age analyzer 420 and/or crawl skew analyzer 430 .
- process 1500 may begin with receipt of an aged version of a document (block 1510 ), and a comparison of the aged version of the document with one or more prior versions of the document to determine one or more portions of the aged version of the document that have changed and/or not changed (block 1520 ).
- content age assigner 600 of document age analyzer 420 may receive an aged version of a document (e.g., a document retrieved from a current crawl), and may compare the aged version of the document with one or more prior versions of the document (e.g., versions of the document retrieved from prior crawls).
- the versions of the document may be stored as a sequence of portions or tokens (e.g., words, phrases, one or more characters, etc.).
- An age field or parameter may be associated with each token, and may indicate an age of the token.
- Content age assigner 600 may increase the age parameter of the token based on crawl times associated with the versions of the document.
- age(s) of one or more portions of the aged version of the document may be determined based on the comparison (block 1530 ), and one or more portions of the aged version of the document with age(s) greater than or equal to an age threshold may be identified (block 1540 ).
- content age assigner 600 of document age analyzer 420 may identify aged (e.g., reused or common) and/or new (or changed) content 640 associated with the document.
- content age assigner 600 may compare age parameters to an age threshold (e.g., a minimum age threshold), and may determine if a document token (e.g., a portion of the document) is aged (e.g., greater than or equal to the minimum age threshold) and/or is new (e.g., less than the minimum age threshold) based on the age parameters.
- an age threshold e.g., a minimum age threshold
- a checksum of the aged version of the document may be calculated based on the one or more identified portions (block 1550 ), and the calculated checksum may be stored (block 1560 ).
- aged content identifier 610 of document age analyzer 420 may receive aged/new content 640 from content age assigner 600 , and may remove new (or changed) content 650 from aged/new content 640 .
- Aged content identifier 610 may remove aged content 660 from aged/new content 640 , and may provide aged content 660 to checksum calculator 620 .
- Checksum calculator 620 may receive aged content 660 from aged content identifier 610 , and may calculate checksum 670 of aged content 660 .
- aged content 660 may include one or more portions of the document with age(s) greater than or equal to the minimum age threshold.
- checksum calculator 620 may calculate a checksum of the document based on the identified one or more portions of the document with age(s) greater than or equal to the minimum age threshold.
- Checksum calculator 620 may provide checksum 670 to database 450 .
- checksum ownership processing may be performed with the calculated checksum (block 1570 ).
- crawl skew analyzer 430 may address the problem of crawl skew by implementing a checksum ownership process. For example, assume that a prior version of a document (e.g., a blog page) and its duplicate contain aged content, that an aged (e.g., re-crawled) version of the document contains the aged content and new content (e.g., a new blog posting), and that the duplicate does not contain the new content.
- the checksums associated with the aged version of the document and the duplicate may be different.
- the aged version of document and its duplicate may not be considered duplicates.
- the checksum ownership process may address such crawl skew by enabling the aged version of the document and the duplicate to remain as duplicates for an extended period of time.
- Process block 1520 may include the process blocks depicted in FIG. 16 . As shown in FIG. 16 , process block 1520 may include determining the one or more portions of the aged version of the document that match one or more portions of the prior version(s) of the document based on a longest common subsequence procedure (block 1600 ) or based on a winnowing procedure (block 1610 ). For example, in implementations described above in connection with FIG. 6 , content age assigner 600 of document age analyzer 420 may identify aged/new content 640 using a longest common subsequence (LCS) process or a winnowing process. The longest common subsequence process may include determining a longest subsequence common to sequences in a set of sequences.
- LCS longest common subsequence
- content age assigner 600 may identify aged content as a longest subsequence (e.g., portions of a document) common to both the aged and prior versions of the document.
- the LCS process may include an algorithm that compares an aged document with a small number of previous documents.
- Content age assigner 600 may utilize the winnowing process (e.g., as set forth in Schleimer et al., “Winnowing: Local Algorithms for Document Fingerprinting,” Proceedings Of The 2003 ACM SIGMOD International Conference On Management Of Data (June 2003)) to determine a set of fingerprints for each version of the document, to identify aged content based on an intersection of the sets of fingerprints, and to identify new content based on content from the new document falling outside of the intersection of the sets of fingerprints.
- the winnowing process may include an approximate approach that efficiently compares re-crawled documents with a larger number of previous versions of the document.
- Process block 1530 may include the process blocks depicted in FIG. 17 . As shown in FIG. 17 , process block 1530 may include analyzing age parameter(s) of token(s) associated with the portion(s) of the aged version of the document (block 1700 ), and increasing the age parameter(s) based on crawl times associated with the aged and prior versions of the document (block 1710 ). For example, in implementations described above in connection with FIG. 6 , the versions of the document may be stored as a sequence of portions or tokens (e.g., words, phrases, one or more characters, etc.). An age field or parameter may be associated with each token, and may indicate an age of the token. Content age assigner 600 may determine the age parameter of the token by comparing crawl times associated with the versions of the document.
- portions or tokens e.g., words, phrases, one or more characters, etc.
- An age field or parameter may be associated with each token, and may indicate an age of the token.
- Content age assigner 600 may determine the age parameter of the token by
- content age assigner 600 may set a token's age parameter based on a difference between crawl times of a document associated with the token (e.g., using a counting function). For example, if it is currently 6:00 AM and a prior version of a document was crawled at 1:00 AM, content age assigner 600 may set a token's age parameter to a value (e.g., five). If an aged version of the document was crawled at 2:00 AM, content age assigner 600 may set the same token's age parameter to another value (e.g., four).
- Process block 1570 may include the process blocks depicted in FIG. 18 . As shown in FIG. 18 , process block 1570 may including determining whether the calculated checksum matches a checksum associated with a cluster of duplicates (block 1800 ). For example, in implementations described above in connection with FIGS. 7 and 8A , checksum comparer 720 of crawl skew analyzer 430 may receive associated checksums/cluster IDs 750 from checksum/cluster ID associator 700 , may receive associated cluster IDs/URLs 770 from cluster ID/URL associator 710 , and may receive checksums 740 and/or URLs 760 .
- Checksum comparer 720 may determine if calculated checksums (e.g., checksums 740 ) match checksums associated with a cluster ID (e.g., matches checksums provided in associated checksum/cluster ID 750 ). Checksum comparer 720 may compare calculated checksums (e.g., checksums 740 ) with checksums provided in associated checksums/cluster IDs 750 (e.g., with checksums provided in table portion 800 ( FIG. 8A )).
- calculated checksums e.g., checksums 740
- Checksum comparer 720 may compare calculated checksums (e.g., checksums 740 ) with checksums provided in associated checksums/cluster IDs 750 (e.g., with checksums provided in table portion 800 ( FIG. 8A )).
- the calculated checksum may be verified with the matching cluster of duplicates (block 1820 ), and the cluster of duplicates and an address associated with the aged version of the document may be merged with another cluster based on a presence of an address in one of the clusters that assumes a checksum owned by the other cluster (block 1830 ).
- checksum comparer 720 may provide matching checksums 780 to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive matching checksums 780 , and may verify matching checksums 780 with corresponding cluster IDs.
- Cluster ID/URL associator 710 may receive matching checksums 780 , and may add URLs associated with checksums 780 to the corresponding cluster IDs.
- a new cluster of duplicates may be created (block 1840 ), the calculated checksum may be associated with the new cluster of duplicates (block 1850 ), and an address associated with the aged version of the document may be added the new cluster of duplicates (block 1860 ).
- checksum comparer 720 may provide non-matching checksums 790 to checksum/cluster ID associator 700 and cluster ID/URL associator 710 .
- Checksum/cluster ID associator 700 may receive non-matching checksums 790 , and may associate non-matching checksums 790 with corresponding new cluster IDs.
- Cluster ID/URL associator 710 may receive non-matching checksums 790 , and may add URLs associated with non-matching checksums 790 to the corresponding new cluster IDs.
- a representative may be selected for the matching and/or new cluster of duplicates (block 1870 ), and the representative may be indexed (block 1880 ).
- duplicate detector 1400 may place each crawled document into a cluster, and may rank the documents in a cluster in some manner to create a ranked list.
- Indexer 1410 may index one or more top-ranked documents from each of the ranked lists. In one example, indexer 1410 may take the text or other data of a top-ranked document in a ranked list, extract individual terms or other data from the text of the document, and sort those terms or other data (e.g., alphabetically) in an index.
- indexing may also or alternatively be used, including techniques for indexing XML data, images, videos, etc.
- Each entry in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
- Implementations described herein may age one or more portions of documents so that documents with high frequency content changes and/or documents that experience crawl skew may be kept in the same duplicate clusters as documents having the same and/or similar content.
- component is intended to be broadly interpreted to refer to hardware, software, or a combination of hardware and software.
Abstract
A system receives a document that includes new content and aged content, and compares the document with a prior version of the document that includes the aged content but not the new content. The system also separates the new content and the aged content based on the comparison, determines ages associated with the new content and the aged content, and determines whether the ages of the new content and the aged content are greater than or equal to an age threshold. The system further calculates a checksum of the document based on the aged content when the age of the aged content is greater than or equal to the age threshold, and the age of the new content is less than the age threshold, and stores the calculated checksum.
Description
This application is a continuation of U.S. patent application Ser. No. 12/363,529, filed on Jan. 30, 2009, the disclosure of which is hereby incorporated by reference herein.
The World Wide Web (“web”) contains a vast amount of information that is ever-changing. Existing web-based information retrieval systems use web crawlers to identify information on the web. A web crawler is a program that exploits the link-based structure of the web to browse the web in a methodical, automated manner.
A web crawler may start with addresses (e.g., Uniform Resource Locators (URLs)) of links to visit. For each address on the list, the web crawler may visit the document associated with the address. The web crawler may identify outgoing links within the visited document and add addresses associated with these links to the list of addresses.
An indexer creates an index of the documents crawled by the web crawler. A problem that indexers face is how to handle duplicate content on the web. For example, the same document may appear duplicated or substantially duplicated in different forms or at different places on the web.
Another problem that indexers face is high frequency content changes for the same document. For example, a document may include some content (e.g., a random advertisement or a related links section) that changes frequently, and some content that does not change over time. The document may also be a duplicate of one or more other documents. If the document is crawled at two different points in time, the document may include different advertisements. The indexer may be provided with two versions of the document corresponding to the different crawl times. Due to the changing advertisement, the indexer may not appropriately identify one of the versions of the document as a duplicate of the one or more other documents.
Still another problem that indexers face is what may be referred to as “crawl skew.” For example, a document (e.g., a blog page) and its duplicate may include content that continuously grows over time and may cause crawl skew. The document and its duplicate may be crawled at two different points in time (e.g., the document may be crawled after the duplicate and may include new content not included in the duplicate). The indexer may be provided with the document and its duplicate. However, due to the new content, the indexer may not appropriately identify the document and the duplicate as a duplicates.
It is undesirable for the indexer to index all of the duplicate documents. For example, indexing duplicate documents wastes space in the index. Also, indexing duplicate documents, and thus making the duplicate documents available for serving as search results leads to an undesirable experience for the user. A user does not want to be presented with multiple documents containing the same, or substantially the same, content.
According to one aspect, a computing device-implemented method may include receiving a document, comparing the document with a prior version of the document, and determining, based on the comparison, at least one first portion of the document that is common with the prior version of the document, and at least one second portion of the document that is uncommon with the prior version of the document. The method may also include determining an age of the at least one first portion and the at least one second portion, and determining whether the age of the at least one first portion is greater than or equal to an age threshold, and that the age of the at least one second portion is less than the age threshold. The method may also include calculating a checksum of the document based on the at least one first portion but not the at least one second portion, and storing the calculated checksum.
According to another aspect, a computing device-implemented system may include means for receiving an aged version of a document, means for comparing the aged version of the document with a prior version of the document, and means for determining at least one first portion of the aged version of the document that is common with the prior version of the document based on the comparison. The system may also include means for determining at least one second portion of the aged version of the document that is uncommon with the prior version of the document based on the comparison, means for determining an age of the at least one first portion and the at least one second portion, and means for determining whether the age of the at least one first portion is greater than or equal to an age threshold, and that the age of the at least one second portion is less than the age threshold. The system may further include means for calculating a checksum of the aged version of the document based on the at least one first portion but not the at least one second portion, means for determining whether the calculated checksum matches a checksum associated with a cluster of duplicate documents, and means for associating the aged version of the document with the cluster of duplicate documents when the calculated checksum matches the checksum associated with the cluster of duplicate documents.
According to yet another aspect, a system may include a memory to store a plurality of instructions, and a processor to execute instructions in the memory to: receive a document, compare the document with a prior version of the document, determine, based on the comparison, at least one first portion of the document that is common with the prior version of the document, and at least one second portion of the document that is uncommon with the prior version of the document, determine an age of the at least one first portion and the at least one second portion, determine whether the age of the at least one first portion is greater than or equal to an age threshold, and that the age of the at least one second portion is less than the age threshold, calculate a checksum of the document based on the at least one first portion but not the at least one second portion, and associate the document with a cluster of duplicate documents when the calculated checksum matches the checksum associated with the cluster of duplicate documents.
According to a further aspect, a computing device-implemented method may include receiving a document that includes new content and aged content, comparing the document with a prior version of the document that includes the aged content but not the new content, and separating the new content and the aged content based on the comparison. The method may also include determining ages associated with the new content and the aged content, determining whether the ages of the new content and the aged content are greater than or equal to an age threshold, calculating a checksum of the document based on the aged content when the age of the aged content is greater than or equal to the age threshold, and the age of the new content is less than the age threshold, and storing the calculated checksum.
The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments described herein and, together with the description, explain these embodiments. In the drawings:
The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit the invention.
In the description to follow, reference will be made to “documents” and “web sites.” A “document,” as the term is used herein, is to be broadly interpreted to include any machine-readable and machine-storable work product. A document may include, for example, an e-mail, a file, a combination of files, one or more files with embedded links to other files, a news group posting, a blog, a web advertisement, a Uniform Resource Locator (URL), etc. In the context of the Internet, a common document is a web page. Web pages often include textual information and may include embedded information (such as meta information, images, hyperlinks, etc.) and/or embedded instructions (such as Javascript, etc.). A “web site,” as used herein, is to be broadly interpreted to include a collection of related documents, such as documents associated with a same host or organization. For example, the collection of related documents might include all or a subset of the documents associated with a traditional web site, directory, or sub-directory, or some other set of documents that are related to each other (e.g., on the same host or associated with the same organization).
In the context of indexing, the presence of crawl skew and documents with high frequency content changes may pose problems by wasting resources (e.g., computer, storage, and/or network resources) and degrading a user's search experience (e.g., by presenting multiple documents with essentially the same content). Implementations described herein may age one or more portions of such documents so that documents with high frequency content changes and/or documents that experience crawl skew may be kept in the same duplicate clusters as documents having the same and/or similar content.
For example, in one exemplary implementation, as shown in FIG. 1 , a prior version (e.g., a previously crawled version) of a document may include original content, and an aged version (e.g., a currently crawled version) of the document may include the original content, as well as new or changed content. A document age analyzer may analyze a prior version of the document and the aged version of the document. The document age analyzer may determine ages of portions of the document based on a comparison of the aged version of the document with the prior version of the document. The document age analyzer may identify portions of the aged version of the document with ages greater than an age threshold, and may calculate a checksum of the aged version of the document based on the identified portions (e.g., based on the original or aged content). A crawl skew analyzer may associate the aged version of the document with a cluster of duplicate documents (e.g., via a duplicate cluster identifier (ID)). Such an arrangement may ensure that the different versions of documents are associated with the same cluster of duplicate documents, which may improve duplicate clustering.
A “checksum,” as the term is used herein, is to be broadly interpreted to include a hash function, a form of redundancy check, a way to protect the integrity of information and/or data by detecting errors in the information and/or data that are transmitted through space or time, or a mechanism that adds components of a message (e.g., asserted bits), and stores the resulting value.
Document hosts 210 may include entities that store and/or manage documents. An entity may be defined as a device, such as a stationary or portable computer, a personal digital assistant (PDA), a laptop computer, a telephone device, or another type of computation or communication device, a thread or process running on one of these devices, and/or an object executable by one of these devices.
Crawler/indexer system 220 may include an entity that crawls, processes, indexes, and/or maintains documents. For example, crawler/indexer system 220 may crawl a corpus of documents (e.g., web documents), index the documents, and/or store information associated with the documents in a repository of documents. While crawler/indexer system 220 is shown as a single entity, it may be possible for crawler/indexer system 220 to be implemented as two or more separate (and possibly distributed) entities.
The software instructions may be read into memory 330 from another computer-readable medium, such as storage device 350, or from another device via communication interface 380. The software instructions contained in memory 330 may cause processor 320 to perform processes described herein. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus, implementations described herein are not limited to any specific combination of hardware circuitry and software.
Although FIG. 3 shows exemplary components of device 300, in other implementations, device 300 may contain fewer, different, or additional components than depicted in FIG. 3 . In still other implementations, one or more components of device 300 may perform one or more other tasks described as being performed by one or more other components of device 300.
Although FIG. 4 shows exemplary functional components of crawler/indexer system 220, in other implementations, crawler/indexer system 220 may contain fewer, different, or additional functional components than depicted in FIG. 4 . In still other implementations, one or more functional components of crawler/indexer system 220 may perform one or more other tasks described as being performed by one or more other functional components of crawler/indexer system 220.
A fetch bot 500 may fetch a document from a corpus of documents, and may provide the fetched document to content manager 510. Fetch bots 500 may operate from a list of addresses provided by content manager 510.
Although FIG. 5 shows exemplary functional components of crawler engine 410, in other implementations, crawler engine 410 may contain fewer, different, or additional functional components than depicted in FIG. 5 . In still other implementations, one or more functional components of crawler engine 410 may perform one or more other tasks described as being performed by one or more other functional components of crawler engine 410.
Alternatively and/or additionally, content age assigner 600 may identify aged/new content 640 using a longest common subsequence (LCS) process or a winnowing process. The longest common subsequence process may include determining a longest subsequence common to sequences in a set of sequences. In one implementation, content age assigner 600 may identify aged content as a longest subsequence (e.g., portions of a document) common to both aged and prior versions of the document. Content age assigner 600 may identify new content as portions of the document uncommon to both the aged and prior versions of the document. The LCS process may include an algorithm that compares an aged document with a small number of previous documents. Content age assigner 600 may utilize the winnowing process (e.g., as set forth in Schleimer et al., “Winnowing: Local Algorithms for Document Fingerprinting,” Proceedings Of The 2003 ACM SIGMOD International Conference On Management Of Data (June 2003), the disclosure of which is incorporated by reference herein in its entirety) to determine a set of fingerprints for each version of the document, to identify aged content based on an intersection of the sets of fingerprints, and to identify new content based on content from the new document falling outside of the intersection of the sets of fingerprints. The winnowing process may include an approximate approach that efficiently compares re-crawled documents with a larger number of previous versions of the document.
Because checksum calculator 620 calculates the checksum of aged content 660, different versions of documents with high frequency content changes (e.g., new content 650) may be associated with the same duplicate cluster. This may by prevent waste of resources (e.g., computer, storage, and/or network resources) and degradation of a user's search experience (e.g., by presenting multiple documents with essentially the same content).
Although FIG. 6 shows exemplary functional components of document age analyzer 420, in other implementations, document age analyzer 420 may contain fewer, different, or additional functional components than depicted in FIG. 6 . In still other implementations, one or more functional components of document age analyzer 420 may perform one or more other tasks described as being performed by one or more other functional components of document age analyzer 420.
Checksum/cluster ID associator 700 may retrieve cluster identifiers (IDs) 730 (e.g., that may identify one or more clusters of duplicate documents) and checksums 740 (e.g., checksum 670) from database 450, and may associate one or more checksums 740 with each of cluster IDs 730. Checksum/cluster ID associator 700 may provide associated checksums/cluster IDs 750 to database 450 and/or to checksum comparer 720. In one implementation, for example, checksum/cluster ID associator 700 may compare a checksum 740 with a checksum associated with a specific cluster ID 730, and may associate checksum 740 with the specific cluster ID 730 if checksum 740 matches the checksum associated with the specific cluster ID 730.
Returning to FIG. 7 , cluster ID/URL associator 710 may retrieve cluster identifiers (IDs) 730 (e.g., that may identify one or more clusters of duplicate documents) and addresses (e.g., URLs) 760 (e.g., that may identify documents associated with checksums 740) from database 450, and may associate each of cluster IDs 730 with one or more URLs 760. Cluster ID/URL associator 710 may provide associated cluster IDs/URLs 770 to database 450 and/or to checksum comparer 720. In one implementation, for example, cluster ID/URL associator 710 may associate a specific cluster ID 730 with URLs that identify documents associated with checksums 740 that match (or substantially match) the checksum associated with the specific cluster ID 730.
In one example, as depicted in FIG. 8C , it may be assumed that two clusters (e.g., CLUSTER ID1 and CLUSTER ID2) both contain two documents, as per table portion 850 (FIG. 8B ). For example, CLUSTER ID1 may contain “A.COM” and “B.COM,” and CLUSTER ID2 may contain “C.COM” and “D.COM.” Further, as per table portion 800 (FIG. 8A ), there may be two checksums, each of which may be associated with and/or owned by one of the two clusters. This situation may have arisen because both “A.COM” and “B.COM” may have only included content that resulted in CHECKSUM 1 or CHECKSUM 2, whereas “C.COM” and “D.COM” may have only included content that resulted in CHECKSUM 3 or CHECKSUM 4. At some point in time, one of these documents may be crawled, and, at which time, the content may be considered to be new and hence removable, which may produce more checksums to be owned by the same clusters. It may be further assumed that the content of “C.COM” and “D.COM” is an amended version of the content of “A.COM” and B.COM″ (e.g., content with an additional paragraph). At some point in time, “A.COM” may begin to assume the content of “C.COM” (or “D.COM”). In other words, the additional paragraph may be added to “A.COM.” The additional paragraph may be considered new content and therefore may be disregarded in the checksum computation until enough time passes. Therefore, “A.COM” may remain in its cluster with “B.COM.” Half-way through the waiting period, the additional paragraph may also be added to “B.COM.” When the waiting period for “A.COM” is complete, it may assume CHECKSUM 3/4, as indicated by reference number 891 in FIG. 8C , but it may take time for “B.COM” to also assume CHECKSUM 3/4. If “A.COM” has assumed CHECKSUM 3/4, it may be clustered with “C.COM” and “D.COM.” On the other hand, “A.COM” and “B.COM” may remain clustered. This may be resolved by merging the two clusters, i.e., creating a new cluster identifier (e.g., CLUSTER ID3) that may correspond to CHECKSUMS 1-4 in table portion 800, as indicated by reference number 892. Subsequently, table portion 850 may be updated, as indicated by reference number 893, so that the four documents (e.g., “A.COM,” “B.COM,” “C.COM,” and “D.COM”) may belong to CLUSTER ID3, and CHECKSUMS 1-4 may be owned by CLUSTER ID3.
In one exemplary implementation, checksum comparer 720 may compare the checksum (e.g., “CHECKSUM 3/4”) associated with “A.COM” to the checksum column of table portion 800 to determine if the checksum (e.g., “CHECKSUM 3/4”) matches any of the checksum entries provided in the checksum column. Checksum comparer 720 may determine that “A.COM” may be clustered with “C.COM” and “D.COM,” but may remain clustered with “B.COM.” Checksum comparer 720 may provide the checksum (e.g., “CHECKSUM 3/4”) associated with “A.COM” to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive the checksum (e.g., “CHECKSUM 3/4”) associated with “A.COM”, and may create a new entry in table portion 800 that includes multiple checksums (e.g., “CHECKSUMS 1-4”) and a new cluster ID (e.g., “CLUSTER ID3”). Cluster ID/URL associator 710 may receive the checksums (e.g., “CHECKSUMS 1-4”), and may update table portion 850 so that the new cluster ID (e.g., “CLUSTER ID3”) is associated with the four documents (e.g., “A.COM,” “B.COM,” “C.COM,” and “D.COM”).
Returning to FIG. 7 , checksum comparer 720 may receive associated checksums/cluster IDs 750 from checksum/cluster ID associator 700, may receive associated cluster IDs/URLs 770 from cluster ID/URL associator 710, and may receive checksums 740 and/or URLs 760. Checksum comparer 720 may determine if calculated checksums (e.g., checksums 740) match checksums associated with a cluster ID (e.g., matches checksums provided in associated checksum/cluster ID 750). Checksum comparer 720 may compare calculated checksums (e.g., checksums 740) with checksums provided in associated checksums/cluster IDs 750 (e.g., with checksums provided in table portion 800 (FIG. 8A )). If the calculated checksums match one of the checksums provided in associated checksums/cluster IDs 750, checksum comparer 720 may provide matching checksums 780 to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive matching checksums 780, and may verify matching checksums 780 with corresponding cluster IDs, as described above in connection with checksum/cluster ID associator 700 and in connection with FIG. 8A . Cluster ID/URL associator 710 may receive matching checksums 780, and may add URLs associated with checksums 780 to the corresponding cluster IDs, as described above in connection with cluster ID/URL associator 710 and in connection with FIG. 8B.
To illustrate this, FIG. 9 depicts exemplary operations capable of being performed by crawl skew analyzer 430 on table portions 800 and 850 illustrated in FIGS. 8A and 8B . For this example, it is assumed that checksum comparer 720 receives a new URL (e.g., “E.COM”) that includes checksum (e.g., “CHECKSUM 1”), as indicated by reference number 910. Checksum comparer 720 may compare the checksum (e.g., “CHECKSUM 1”) to the checksum column of table portion 800 to determine if the checksum (e.g., “CHECKSUM 1”) matches any of the checksum entries provided in the checksum column. As further shown in FIG. 9 , checksum comparer 720 may determine whether the checksum (e.g., “CHECKSUM 1”) matches the first entry of the checksum column, as indicated by reference number 920. Checksum comparer 720 may provide the matching checksum (e.g., “CHECKSUM 1”) to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive the matching checksum (e.g., “CHECKSUM 1”), and may verify the matching checksum (e.g., “CHECKSUM 1”) with a corresponding cluster ID (e.g., “CLUSTER ID1”). Cluster ID/URL associator 710 may receive the matching checksum (e.g., “CHECKSUM 1”), and may create a new entry 930 in table portion 850 that includes the cluster ID (e.g., “CLUSTER ID1”) and the URL (e.g., “E.COM”) associated with the matching checksum (e.g., “CHECKSUM 1”), as indicated by reference number 940.
Returning to FIG. 7 , if the calculated checksums do not match one of the checksums provided in associated checksums/cluster IDs 750, checksum comparer 720 may provide non-matching checksums 790 to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive non-matching checksums 790, and may associate non-matching checksums 790 with corresponding new cluster IDs. Cluster ID/URL associator 710 may receive non-matching checksums 790, and may add URLs associated with non-matching checksums 790 to the corresponding new cluster IDs.
To illustrate this, FIG. 10 depicts exemplary operations capable of being performed by crawl skew analyzer 430 on table portions 800 and 850 illustrated in FIGS. 8A and 8B . For this example, it is assumed that checksum comparer 720 receives a new URL (e.g., “E.COM”) that includes checksum (e.g., “CHECKSUM 5”), as indicated by reference number 1010. Checksum comparer 720 may compare the checksum (e.g., “CHECKSUM 5”) to the checksum column of table portion 800 to determine if the checksum (e.g., “CHECKSUM 5”) matches any of the checksum entries provided in the checksum column. As further shown in FIG. 10 , checksum comparer 720 may determine whether the checksum (e.g., “CHECKSUM 5”) does not match an entry of the checksum column, as indicated by reference number 1020. Checksum comparer 720 may provide the non-matching checksum (e.g., “CHECKSUM 5”) to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive the non-matching checksum (e.g., “CHECKSUM 5”), and may create an entry in table portion 800 that includes the non-matching checksum (e.g., “CHECKSUM 5”) and a new cluster ID (e.g., “CLUSTER ID3”), as indicated by reference number 1030. Cluster ID/URL associator 710 may receive the non-matching checksum (e.g., “CHECKSUM 5”), and may create a new entry 1040 in table portion 850 that includes the new cluster ID (e.g., “CLUSTER ID3”) and the URL (e.g., “E.COM”) associated with the non-matching checksum (e.g., “CHECKSUM 5”), as indicated by reference number 1050.
Although FIG. 7 shows exemplary functional components of crawl skew analyzer 430, in other implementations, crawl skew analyzer 430 may contain fewer, different, or additional functional components than depicted in FIG. 7 . In still other implementations, one or more functional components of crawl skew analyzer 430 may perform one or more other tasks described as being performed by one or more other functional components of crawl skew analyzer 430.
As further shown in FIG. 11 , since changing content 1135 is newer than unchanging content 1125, content age assigner 600 may set age parameter 1155 of changing content 1135 to a value (e.g., “0”) that is less than age parameter 1150 (e.g., “17”) of unchanging content 1125. Content age assigner 600 may compare age parameters 1140-1155 to an age threshold (e.g., a minimum age threshold), and may determine if portions of documents 1120 and 1140 are aged (e.g., greater than or equal to the minimum age threshold) and/or are new (e.g., less than the minimum age threshold) based on age parameters 1150 and 1155.
Document age analyzer 420 (e.g., checksum calculator 620 of document age analyzer 420) may calculate checksums 1160 of the crawled and re-crawled versions of document 1110. As shown in FIG. 11 , checksums 1160 of the crawled and re-crawled versions of document 1110 may match (e.g., may equal “CHECKSUM”) because checksum calculator 620 may exclude changing portions 1130 and 1135 from the calculation (i.e., may calculate checksums 1160 based only on unchanging content 1125). Thus, document 1110 may remain associated with the same duplicate cluster despite including a portion experiencing high frequency content changes.
When new content 1260 becomes old enough to be considered in the calculation of the age-based checksum described above, the checksums associated with document 1220 and re-crawled document 1250 may be different (i.e., not considered duplicates). However, crawl skew analyzer 430 may address this situation. As shown in FIG. 13 , such a situation may be only temporary. As illustrated, document 1220 may eventually be re-crawled (e.g., as shown by re-crawled document 1300) and may include common content 1230 and new content 1260. New content 1260 of re-crawled document 1300 may become old enough to be considered in the calculation of the age-based checksum. Thus, using the age-based checksum technique described above, checksums 1320 (e.g., “CHECKSUM 2”) may be calculated for documents 1250 and 1300. Checksums 1320 may match (e.g., indicating that documents 1250 and 1300 are duplicates) since both documents 1250 and 1300 may include common content 1230 and new content 1260, and the age-based checksum technique may include new content 1260 in the calculation of checksums 1320. This may enable re-crawled document 1250 and re-crawled duplicate document 1300 to once again be considered duplicates.
An example of a content-based clustering technique may involve duplicate detector 1400 computing a checksum or hash over the content, or a portion of the content, of a document.
In another example, duplicate detector 1400 may receive checksums (e.g., from database 450) computed by document age analyzer 420 (e.g., by checksum calculator 620). Two documents with the same checksum or hash may be considered duplicates of each other. The age-based checksums provided by document age analyzer 420 may ensure that the two documents remain duplicates even when a portion of one of the documents contains new content.
An example of a predictive clustering technique may involve computing checksums or hashes over a web site, a directory or subdirectory, or a combination of address parameters, and generating a set of rules that given an address, predicts a cluster identifier (ID) for the document associated with that address. A separate set of rules may be generated for each web site, directory, subdirectory, or address parameter combination. Some of these rules may list address prefixes that are equivalents of each other. For example, these rules might specify that www.mysite.com, mysite.com, www.geocities.com/mysite, and geocities.com/mysite are equivalents of each other. Thus, each of these addresses may map to the same cluster ID. Some other rules may identify address parameters that are irrelevant. For example, these rules might specify that given the address www.forum.com/posts, a post identifier (postid) parameter matters, but a session identifier (sid) parameter does not matter. Thus, these rules might identify the addresses www.forum.com/posts/postid=108/sid=162 and www.forum.com/posts/postid=108/sid=867 as equivalents of each other. Thus, each of these addresses may map to the same cluster ID.
Indexer 1410 may index one or more top-ranked documents from each of the ranked lists. For example, indexer 1410 may take the text or other data of a top-ranked document in a ranked list, extract individual terms or other data from the text of the document, and sort those terms or other data (e.g., alphabetically) in an index. Other techniques for extracting and indexing content, that are more complex than simple word-level indexing, may also or alternatively be used, including techniques for indexing XML data, images, videos, etc. Each entry in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
Although FIG. 14 shows exemplary functional components of indexing engine 440, in other implementations, indexing engine 440 may contain fewer, different, or additional functional components than depicted in FIG. 14 . In still other implementations, one or more functional components of indexing engine 440 may perform one or more other tasks described as being performed by one or more other functional components of indexing engine 440.
As shown in FIG. 15 , process 1500 may begin with receipt of an aged version of a document (block 1510), and a comparison of the aged version of the document with one or more prior versions of the document to determine one or more portions of the aged version of the document that have changed and/or not changed (block 1520). For example, in implementations described above in connection with FIG. 6 , content age assigner 600 of document age analyzer 420 may receive an aged version of a document (e.g., a document retrieved from a current crawl), and may compare the aged version of the document with one or more prior versions of the document (e.g., versions of the document retrieved from prior crawls). In one example, the versions of the document may be stored as a sequence of portions or tokens (e.g., words, phrases, one or more characters, etc.). An age field or parameter may be associated with each token, and may indicate an age of the token. Content age assigner 600 may increase the age parameter of the token based on crawl times associated with the versions of the document.
As further shown in FIG. 15 , age(s) of one or more portions of the aged version of the document may be determined based on the comparison (block 1530), and one or more portions of the aged version of the document with age(s) greater than or equal to an age threshold may be identified (block 1540). For example, in implementations described above in connection with FIG. 6 , content age assigner 600 of document age analyzer 420 may identify aged (e.g., reused or common) and/or new (or changed) content 640 associated with the document. In one example, content age assigner 600 may compare age parameters to an age threshold (e.g., a minimum age threshold), and may determine if a document token (e.g., a portion of the document) is aged (e.g., greater than or equal to the minimum age threshold) and/or is new (e.g., less than the minimum age threshold) based on the age parameters.
Returning to FIG. 15 , a checksum of the aged version of the document may be calculated based on the one or more identified portions (block 1550), and the calculated checksum may be stored (block 1560). For example, in implementations described above in connection with FIG. 6 , aged content identifier 610 of document age analyzer 420 may receive aged/new content 640 from content age assigner 600, and may remove new (or changed) content 650 from aged/new content 640. Aged content identifier 610 may remove aged content 660 from aged/new content 640, and may provide aged content 660 to checksum calculator 620. Checksum calculator 620 may receive aged content 660 from aged content identifier 610, and may calculate checksum 670 of aged content 660. In one example, aged content 660 may include one or more portions of the document with age(s) greater than or equal to the minimum age threshold. Thus, checksum calculator 620 may calculate a checksum of the document based on the identified one or more portions of the document with age(s) greater than or equal to the minimum age threshold. Checksum calculator 620 may provide checksum 670 to database 450.
As further shown in FIG. 15 , checksum ownership processing may be performed with the calculated checksum (block 1570). For example, in implementations described above in connection with FIG. 7 , crawl skew analyzer 430 may address the problem of crawl skew by implementing a checksum ownership process. For example, assume that a prior version of a document (e.g., a blog page) and its duplicate contain aged content, that an aged (e.g., re-crawled) version of the document contains the aged content and new content (e.g., a new blog posting), and that the duplicate does not contain the new content. When the new content becomes old enough to be considered in the age-based checksum described above (e.g., checksum 670), the checksums associated with the aged version of the document and the duplicate may be different. Thus, the aged version of document and its duplicate may not be considered duplicates. The checksum ownership process may address such crawl skew by enabling the aged version of the document and the duplicate to remain as duplicates for an extended period of time.
As further shown in FIG. 18 , if the checksums match (block 1810—YES), the calculated checksum may be verified with the matching cluster of duplicates (block 1820), and the cluster of duplicates and an address associated with the aged version of the document may be merged with another cluster based on a presence of an address in one of the clusters that assumes a checksum owned by the other cluster (block 1830). For example, in implementations described above in connection with FIG. 7 , if the calculated checksums match one of the checksums provided in associated checksums/cluster IDs 750, checksum comparer 720 may provide matching checksums 780 to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive matching checksums 780, and may verify matching checksums 780 with corresponding cluster IDs. Cluster ID/URL associator 710 may receive matching checksums 780, and may add URLs associated with checksums 780 to the corresponding cluster IDs.
Returning to FIG. 18 , if the checksums do not match (block 1810—NO), a new cluster of duplicates may be created (block 1840), the calculated checksum may be associated with the new cluster of duplicates (block 1850), and an address associated with the aged version of the document may be added the new cluster of duplicates (block 1860). For example, in implementations described above in connection with FIG. 7 , if the calculated checksums do not match one of the checksums provided in associated checksums/cluster IDs 750, checksum comparer 720 may provide non-matching checksums 790 to checksum/cluster ID associator 700 and cluster ID/URL associator 710. Checksum/cluster ID associator 700 may receive non-matching checksums 790, and may associate non-matching checksums 790 with corresponding new cluster IDs. Cluster ID/URL associator 710 may receive non-matching checksums 790, and may add URLs associated with non-matching checksums 790 to the corresponding new cluster IDs.
As further shown in FIG. 18 , a representative may be selected for the matching and/or new cluster of duplicates (block 1870), and the representative may be indexed (block 1880). For example, in implementations described above in connection with FIG. 14 , duplicate detector 1400 may place each crawled document into a cluster, and may rank the documents in a cluster in some manner to create a ranked list. Indexer 1410 may index one or more top-ranked documents from each of the ranked lists. In one example, indexer 1410 may take the text or other data of a top-ranked document in a ranked list, extract individual terms or other data from the text of the document, and sort those terms or other data (e.g., alphabetically) in an index. Other techniques for extracting and indexing content, that are more complex than simple word-level indexing, may also or alternatively be used, including techniques for indexing XML data, images, videos, etc. Each entry in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
Implementations described herein may age one or more portions of documents so that documents with high frequency content changes and/or documents that experience crawl skew may be kept in the same duplicate clusters as documents having the same and/or similar content.
The foregoing description provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.
For example, while a series of blocks has been described with regard to FIGS. 15-18 , the order of the blocks may be modified in other implementations. Further, non-dependent blocks may be performed in parallel.
As used herein, the term “component,” is intended to be broadly interpreted to refer to hardware, software, or a combination of hardware and software.
Systems and methods, as described above, may be implemented in many different forms of software, firmware, and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these systems and methods is not limiting of the invention. Thus, the operation and behavior of the systems and methods were described without reference to the specific software code—it being understood that software and control hardware can be designed to implement the systems and methods based on the description herein.
Even though particular combinations of features are recited in the claims and/or disclosed in the specification, these combinations are not intended to limit the invention. In fact, many of these features may be combined in ways not specifically recited in the claims and/or disclosed in the specification.
No element, act, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article “a” is intended to include one or more items. Where only one item is intended, the term “one” or similar language is used. Further, the phrase “based on” is intended to mean “based, at least in part, on” unless explicitly stated otherwise.
Claims (21)
1. A method comprising:
determining, by a computer device, at least one first portion of a document that is also within a prior version of the document and at least one second portion of the document that is not within the prior version of the document;
determining, by the computer device, a first age of the at least one first portion and a second age of the at least one second portion;
calculating, by the computer device and based on the first age satisfying an age threshold and the second age not satisfying the age threshold, a checksum of the document based on the at least one first portion and not based on the at least one second portion, the first age satisfying the age threshold when the first age is greater than or equal to the age threshold; and
storing, by the computer device, the calculated checksum.
2. The method of claim 1 , further comprising:
crawling a corpus of documents to fetch the document;
extracting one or more addresses associated with one or more links in the document;
adding the one or more addresses to a list of addresses for subsequent crawling; and
storing information associated with the document.
3. The method of claim 1 , further comprising:
comparing the document with the prior version of the document using a longest common subsequence process; or
comparing the document with the prior version of the document using a winnowing process,
the at least one first portion and the at least one second portion being determined based on a result of the comparing.
4. The method of claim 1 , further comprising:
associating the calculated checksum with a cluster of duplicate documents.
5. The method of claim 4 , further comprising:
selecting one of the documents in the cluster of duplicate documents as representative of the cluster of duplicate documents; and
indexing the selected document without indexing at least one other document in the cluster of duplicate documents.
6. The method of claim 1 , further comprising:
associating a token with at least one of the at least one first portion or the at least one second portion;
analyzing an age parameter of the token;
increasing the age parameter each time the document is crawled; and
determining the first age of the least one first portion or the second age of the at least one second portion based on the increased age parameter.
7. The method of claim 6 , where the age parameter of the token is determined based on a difference between a first crawl time and a second crawl time.
8. A device comprising:
a processor; and
a memory including a plurality of instructions that, when executed by the processor, cause the processor to:
determine at least one first portion of a document that is also within a prior version of the document and at least one second portion of the document that is not within the prior version of the document;
determine a first age of the at least one first portion and a second age of the at least one second portion;
calculate, based on the first age satisfying an age threshold and the second age not satisfying the age threshold, a checksum of the document based on the at least one first portion and not based on the at least one second portion, the first age satisfying the age threshold when the first age is greater than or equal to the age threshold; and
store the calculated checksum.
9. The device of claim 8 , where the processor is further to:
crawl a corpus of documents to fetch the document;
extract one or more addresses associated with one or more links in the document;
add the one or more addresses to a list of addresses for subsequent crawling; and
store information associated with the document.
10. The device of claim 8 , where the processor is further to:
compare the document with the prior version of the document using a longest common subsequence process; or
compare the document with the prior version of the document using a winnowing process,
the at least one first portion and the at least one second portion being determined based on a result of the comparing.
11. The device of claim 8 , where the processor is further to:
associate the calculated checksum with a cluster of duplicate documents.
12. The device of claim 11 , where the processor is further to:
select one of the documents in the cluster of duplicate documents as representative of the cluster of duplicate documents; and
index the selected document without indexing at least one other document in the cluster of duplicate documents.
13. The device of claim 8 , where the processor is further to:
associate a token with at least one of the at least one first portion or the at least one second portion;
analyze an age parameter of the token;
increase the age parameter each time the document is crawled; and
determine the first age of the least one first portion or the second age of the at least one second portion based on the increased age parameter.
14. The device of claim 13 , where the processor is further to:
determine the age parameter of the token by calculating a difference between a first crawl time and a second crawl time.
15. A non-transitory computer-readable storage medium comprising:
one or more instructions which, when executed by at least one processor, cause the at least one processor to:
determine at least one first portion of a document that is also within a prior version of the document and at least one second portion of the document that is not within the prior version of the document;
determine a first age of the at least one first portion and a second age of the at least one second portion;
calculate, based on the first age satisfying an age threshold and the second age not satisfying the age threshold, a checksum of the document based on the at least one first portion and not based on the at least one second portion, the first age satisfying the age threshold when the first age is greater than or equal to the age threshold; and
store the calculated checksum.
16. The medium of claim 15 , where the one or more instructions further cause the at least one processor to:
crawl a corpus of documents to fetch the document;
extract one or more addresses associated with one or more links in the document;
add the one or more addresses to a list of addresses for subsequent crawling; and
store information associated with the document.
17. The medium of claim 15 , where the one or more instructions further cause the at least one processor to:
compare the document with the prior version of the document using a longest common subsequence process; or
compare the document with the prior version of the document using a winnowing process,
the at least one first portion and the at least one second portion being determined based on a result of the comparing.
18. The medium of claim 15 , where the one or more instructions further cause the at least one processor to:
associate the calculated checksum with a cluster of duplicate documents.
19. The medium of claim 18 , where the one or more instructions further cause the at least one processor to:
select one of the documents in the cluster of duplicate documents as representative of the cluster of duplicate documents; and
index the selected document without indexing at least one other document in the cluster of duplicate documents.
20. The medium of claim 15 , where the one or more instructions further cause the at least one processor to:
associate a token with at least one of the at least one first portion or the at least one second portion;
determine an age parameter of the token by calculating a difference between a first crawl time and a second crawl time;
increase the age parameter each time the document is crawled; and
determine the first age of the least one first portion or the second age of the at least one second portion based on the increased age parameter.
21. A method comprising:
determining, by a computer device, at least one first portion of a document that is also within a prior version of the document and at least one second portion of the document that is not within the prior version of the document;
determining, by the computer device, a first age of the at least one first portion and a second age of the at least one second portion;
calculating, by the computer device and based on the first age satisfying an age threshold and the second age not satisfying the age threshold, a checksum of the document based on the at least one first portion and not based on the at least one second portion, the first age satisfying the age threshold when the first age is greater than or equal to the age threshold;
associating the calculated checksum with a cluster of duplicate documents;
selecting one of the documents in the cluster of duplicate documents as representative of the cluster of duplicate documents;
storing information regarding the selected document in an index without storing information regarding at least one other document, in the cluster of duplicate documents, in the index; and
providing search results based on a search of the index, the search results including the information regarding selected document.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/209,593 US8423885B1 (en) | 2009-01-30 | 2011-08-15 | Updating search engine document index based on calculated age of changed portions in a document |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/363,529 US8001462B1 (en) | 2009-01-30 | 2009-01-30 | Updating search engine document index based on calculated age of changed portions in a document |
US13/209,593 US8423885B1 (en) | 2009-01-30 | 2011-08-15 | Updating search engine document index based on calculated age of changed portions in a document |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/363,529 Continuation US8001462B1 (en) | 2009-01-30 | 2009-01-30 | Updating search engine document index based on calculated age of changed portions in a document |
Publications (1)
Publication Number | Publication Date |
---|---|
US8423885B1 true US8423885B1 (en) | 2013-04-16 |
Family
ID=44358669
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/363,529 Active 2030-02-07 US8001462B1 (en) | 2009-01-30 | 2009-01-30 | Updating search engine document index based on calculated age of changed portions in a document |
US13/209,593 Active US8423885B1 (en) | 2009-01-30 | 2011-08-15 | Updating search engine document index based on calculated age of changed portions in a document |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/363,529 Active 2030-02-07 US8001462B1 (en) | 2009-01-30 | 2009-01-30 | Updating search engine document index based on calculated age of changed portions in a document |
Country Status (1)
Country | Link |
---|---|
US (2) | US8001462B1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10657177B1 (en) * | 2014-12-31 | 2020-05-19 | Groupon, Inc. | Method and apparatus for implementing a search index generator |
US10891340B2 (en) | 2018-11-16 | 2021-01-12 | Yandex Europe Ag | Method of and system for updating search index database |
US20220237042A1 (en) * | 2018-08-20 | 2022-07-28 | Google Llc | Resource pre-fetch using age threshold |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8001462B1 (en) | 2009-01-30 | 2011-08-16 | Google Inc. | Updating search engine document index based on calculated age of changed portions in a document |
US9069884B2 (en) * | 2009-09-08 | 2015-06-30 | International Business Machines Corporation | Processing special attributes within a file |
US8650195B2 (en) * | 2010-03-26 | 2014-02-11 | Palle M Pedersen | Region based information retrieval system |
US8332408B1 (en) | 2010-08-23 | 2012-12-11 | Google Inc. | Date-based web page annotation |
US20130091421A1 (en) * | 2011-10-11 | 2013-04-11 | International Business Machines Corporation | Time relevance within a soft copy document or media object |
US10534856B2 (en) * | 2016-10-17 | 2020-01-14 | International Business Machines Corporation | Atom-based sensible synchronization for information indexing |
CN108595459B (en) * | 2017-12-30 | 2022-02-15 | 北京百度网讯科技有限公司 | Relationship index updating method and device and electronic equipment |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5956722A (en) | 1997-09-23 | 1999-09-21 | At&T Corp. | Method for effective indexing of partially dynamic documents |
US6012087A (en) | 1997-01-14 | 2000-01-04 | Netmind Technologies, Inc. | Unique-change detection of dynamic web pages using history tables of signatures |
US6349296B1 (en) | 1998-03-26 | 2002-02-19 | Altavista Company | Method for clustering closely resembling data objects |
US20020032772A1 (en) | 2000-09-14 | 2002-03-14 | Bjorn Olstad | Method for searching and analysing information in data networks |
US6547829B1 (en) | 1999-06-30 | 2003-04-15 | Microsoft Corporation | Method and system for detecting duplicate documents in web crawls |
US20030105744A1 (en) | 2001-11-30 | 2003-06-05 | Mckeeth Jim | Method and system for updating a search engine |
US6638314B1 (en) | 1998-06-26 | 2003-10-28 | Microsoft Corporation | Method of web crawling utilizing crawl numbers |
US20050144193A1 (en) | 2003-09-30 | 2005-06-30 | Monika Henzinger | Systems and methods for determining document freshness |
US20050262089A1 (en) | 2004-05-06 | 2005-11-24 | Oracle International Corporation | Web server for multi-version Web documents |
US20060248063A1 (en) | 2005-04-18 | 2006-11-02 | Raz Gordon | System and method for efficiently tracking and dating content in very large dynamic document spaces |
US20060294052A1 (en) | 2005-06-28 | 2006-12-28 | Parashuram Kulkami | Unsupervised, automated web host dynamicity detection, dead link detection and prerequisite page discovery for search indexed web pages |
US20070094254A1 (en) | 2003-09-30 | 2007-04-26 | Google Inc. | Document scoring based on document inception date |
US20070226206A1 (en) | 2006-03-23 | 2007-09-27 | Dmitri Pavlovski | Consecutive crawling to identify transient links |
US7366718B1 (en) | 2001-01-24 | 2008-04-29 | Google, Inc. | Detecting duplicate and near-duplicate files |
US20080104256A1 (en) | 2006-10-26 | 2008-05-01 | Yahoo! Inc. | System and method for adaptively refreshing a web page |
US7627613B1 (en) | 2003-07-03 | 2009-12-01 | Google Inc. | Duplicate document detection in a web crawler system |
US7644107B2 (en) | 2004-09-30 | 2010-01-05 | Microsoft Corporation | System and method for batched indexing of network documents |
US7725452B1 (en) | 2003-07-03 | 2010-05-25 | Google Inc. | Scheduler for search engine crawler |
US7818312B2 (en) | 2004-11-22 | 2010-10-19 | International Business Machines Corporation | Methods and apparatus for assessing web page decay |
US8001462B1 (en) | 2009-01-30 | 2011-08-16 | Google Inc. | Updating search engine document index based on calculated age of changed portions in a document |
-
2009
- 2009-01-30 US US12/363,529 patent/US8001462B1/en active Active
-
2011
- 2011-08-15 US US13/209,593 patent/US8423885B1/en active Active
Patent Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6012087A (en) | 1997-01-14 | 2000-01-04 | Netmind Technologies, Inc. | Unique-change detection of dynamic web pages using history tables of signatures |
US5956722A (en) | 1997-09-23 | 1999-09-21 | At&T Corp. | Method for effective indexing of partially dynamic documents |
US6434573B1 (en) | 1997-09-23 | 2002-08-13 | At&T Corp. | Method for effective indexing of partially dynamic documents |
US6349296B1 (en) | 1998-03-26 | 2002-02-19 | Altavista Company | Method for clustering closely resembling data objects |
US6638314B1 (en) | 1998-06-26 | 2003-10-28 | Microsoft Corporation | Method of web crawling utilizing crawl numbers |
US6547829B1 (en) | 1999-06-30 | 2003-04-15 | Microsoft Corporation | Method and system for detecting duplicate documents in web crawls |
US20020032772A1 (en) | 2000-09-14 | 2002-03-14 | Bjorn Olstad | Method for searching and analysing information in data networks |
US7366718B1 (en) | 2001-01-24 | 2008-04-29 | Google, Inc. | Detecting duplicate and near-duplicate files |
US20030105744A1 (en) | 2001-11-30 | 2003-06-05 | Mckeeth Jim | Method and system for updating a search engine |
US20050015394A1 (en) | 2001-11-30 | 2005-01-20 | Mckeeth Jim | Method and system for updating a search engine |
US7725452B1 (en) | 2003-07-03 | 2010-05-25 | Google Inc. | Scheduler for search engine crawler |
US7627613B1 (en) | 2003-07-03 | 2009-12-01 | Google Inc. | Duplicate document detection in a web crawler system |
US20050144193A1 (en) | 2003-09-30 | 2005-06-30 | Monika Henzinger | Systems and methods for determining document freshness |
US20070094254A1 (en) | 2003-09-30 | 2007-04-26 | Google Inc. | Document scoring based on document inception date |
US20070100817A1 (en) | 2003-09-30 | 2007-05-03 | Google Inc. | Document scoring based on document content update |
US20050262089A1 (en) | 2004-05-06 | 2005-11-24 | Oracle International Corporation | Web server for multi-version Web documents |
US7644107B2 (en) | 2004-09-30 | 2010-01-05 | Microsoft Corporation | System and method for batched indexing of network documents |
US7818312B2 (en) | 2004-11-22 | 2010-10-19 | International Business Machines Corporation | Methods and apparatus for assessing web page decay |
US20060248063A1 (en) | 2005-04-18 | 2006-11-02 | Raz Gordon | System and method for efficiently tracking and dating content in very large dynamic document spaces |
US20060294052A1 (en) | 2005-06-28 | 2006-12-28 | Parashuram Kulkami | Unsupervised, automated web host dynamicity detection, dead link detection and prerequisite page discovery for search indexed web pages |
US20070226206A1 (en) | 2006-03-23 | 2007-09-27 | Dmitri Pavlovski | Consecutive crawling to identify transient links |
US20080104256A1 (en) | 2006-10-26 | 2008-05-01 | Yahoo! Inc. | System and method for adaptively refreshing a web page |
US8001462B1 (en) | 2009-01-30 | 2011-08-16 | Google Inc. | Updating search engine document index based on calculated age of changed portions in a document |
Non-Patent Citations (1)
Title |
---|
Schleimer et al., "Winnowing: Local Algorithms for Document Fingerprinting," SIGMOD, 10 pages (2003). * |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10657177B1 (en) * | 2014-12-31 | 2020-05-19 | Groupon, Inc. | Method and apparatus for implementing a search index generator |
US11379523B2 (en) | 2014-12-31 | 2022-07-05 | Groupon, Inc. | Method and apparatus for implementing a search index generator |
US11886503B2 (en) | 2014-12-31 | 2024-01-30 | Groupon, Inc. | Method and apparatus for implementing a search index generator |
US20220237042A1 (en) * | 2018-08-20 | 2022-07-28 | Google Llc | Resource pre-fetch using age threshold |
US11720407B2 (en) * | 2018-08-20 | 2023-08-08 | Google Llc | Resource pre-fetch using age threshold |
US10891340B2 (en) | 2018-11-16 | 2021-01-12 | Yandex Europe Ag | Method of and system for updating search index database |
Also Published As
Publication number | Publication date |
---|---|
US8001462B1 (en) | 2011-08-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8423885B1 (en) | Updating search engine document index based on calculated age of changed portions in a document | |
US6615209B1 (en) | Detecting query-specific duplicate documents | |
US8112432B2 (en) | Query rewriting with entity detection | |
US8140505B1 (en) | Near-duplicate document detection for web crawling | |
US6658423B1 (en) | Detecting duplicate and near-duplicate files | |
JP4857075B2 (en) | Method and computer program for efficiently retrieving dates in a collection of web documents | |
US7783626B2 (en) | Pipelined architecture for global analysis and index building | |
US8554759B1 (en) | Selection of documents to place in search index | |
Bharat et al. | A comparison of techniques to find mirrored hosts on the WWW | |
US8812493B2 (en) | Search results ranking using editing distance and document information | |
US7788253B2 (en) | Global anchor text processing | |
JP4866421B2 (en) | A method to identify alternative spelling of search string by analyzing user's self-correcting search behavior | |
JP4785838B2 (en) | Web server for multi-version web documents | |
US20040167876A1 (en) | Method and apparatus for improved web scraping | |
WO2008097856A2 (en) | Search result delivery engine | |
US20150172299A1 (en) | Indexing and retrieval of blogs | |
US7636732B1 (en) | Adaptive meta-tagging of websites | |
Wu et al. | Searching services" on the web": A public web services discovery approach | |
CN110889023A (en) | Distributed multifunctional search engine of elastic search | |
US8661069B1 (en) | Predictive-based clustering with representative redirect targets | |
US8521746B1 (en) | Detection of bounce pad sites | |
US9424340B1 (en) | Detection of proxy pad sites | |
US20080033953A1 (en) | Method to search transactional web pages | |
Weng et al. | Semantic keywords-based duplicated web pages removing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |