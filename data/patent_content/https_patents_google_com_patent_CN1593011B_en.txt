CN1593011B - Method and apparatus for adaptive data compression - Google Patents
Method and apparatus for adaptive data compression Download PDFInfo
- Publication number
- CN1593011B CN1593011B CN02806626XA CN02806626A CN1593011B CN 1593011 B CN1593011 B CN 1593011B CN 02806626X A CN02806626X A CN 02806626XA CN 02806626 A CN02806626 A CN 02806626A CN 1593011 B CN1593011 B CN 1593011B
- Authority
- CN
- China
- Prior art keywords
- symbol
- code
- index
- character string
- stored
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/3084—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction using adaptive string matching, e.g. the Lempel-Ziv method
- H03M7/3088—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction using adaptive string matching, e.g. the Lempel-Ziv method employing the use of a dictionary, e.g. LZ78
Abstract
We present a method and apparatus for performing adaptive data compression. An alphabet and vocabulary in the encoder and decoder is built adaptively and stored in a dictionary as symbols are to be encoded and decoded. Each time an unknown symbol is to be encoded by the encoder, the encoder adds the symbol to the dictionary and transmits it in plain in the encoded string. The code words transmitted by the encoder include symbols and indexes. The state of a prefix bit preceding the code word indicates whether the code word is a plain symbol or an index of a symbol or string of symbols stored in the dictionary. The decoder examines the prefix bit of each code word as it is received to determine if the code word stores a symbol in plain or in index. If the code word stores a symbol in plain, the decoder learns the symbol by adding a sequence of symbols resulting from the concatenation of previously decoded symbols and the first symbol of the currently decoded symbol and by adding the symbol to its dictionary. If the code word stores an index, the decoder decodes the code word by extracting the symbol or sequence of symbols stored in the dictionary at the respective index in the dictionary.
Description
Background of invention
Data compression is meant the process of reduction expression Given information desired data amount.The basis of reduction process is to remove redundancy or unnecessary data.Data compression technique can reduce the expense of information stores and message transmission.Data compression technique is used to many aspects, and the coding that narrows down to voice and vision signal from simple file all can be used data compression technique.
Data compression is divided into two types: lossless compress and lossy compression method.In lossless compress, can carry out strict retrieval in the output at decoder in the source information of encoder input.In lossy compression method, information is not carried out strict retrieval, but the amount of information of loss is an acceptable for the situation of using this compress technique.Lossy compression method is mainly used in the compression of language, audio frequency, image and vision signal.The purpose of compression algorithm is to use minimum byte number to come expression signal, can keep this signal to be understood and perception again simultaneously.The information that all human sense organs can not be discovered can be removed.
The free of losses compress technique in not allowing information loss, for example is used for compact executable file, source code file, satellite image and imaging of medical with situation about using.Lossless compressiong also can obtain certain applications in the lossy compression method scheme, in the hope of obtaining better compression ratio.
A famous technology that is used for lossless compress is exactly a lzw algorithm, and lzw algorithm is a general-purpose algorithm, and the basis of this algorithm is according to unalterable rules character string to be resolved.This algorithm is based on a notion, and this notion is exactly that the sequence often used can be used than expressing whole sequence requirement byte still less and encodes.Lzw algorithm need carry out initialization process to the form that has the source word symbol.Before the starting cataloged procedure, the width of symbol is chosen, and the source word symbol of symbol is generated and is stored in the coding form of encoder.When the symbol sebolic addressing of receiving was encoded, when sequence was added code library to, can encode with being less than the byte of expressing the whole sequence requirement by the sequence that contains in the code library with selected symbol (vocabulary) for lzw algorithm.The size of source word symbol and the width of symbol are irrelevant.For example, width is the source word symbol that the symbol of 1 bit (8 bytes) needs 28 (256) inputs, and width is the source word symbol that the symbol of 2 bits (16 byte) needs 216 (64K) input.Generally speaking, lzw algorithm is used for the symbol that width is 1 bit.Lzw algorithm is searched for coding schedule so that find the longest source word symbol that matches with the symbol sebolic addressing received, and the longest source character index of storing in the code library that matches with symbol string is sent.
Fig. 1 shows is the coding schedule 100 of carrying out used lzw algorithm in the past in the encoder of lossless data compression.This LZW coding schedule may be an addressable internal memory of ternary.Encoder uses the source word symbol 106 be stored in the LZW coding schedule 100 and the symbol sebolic addressing 102 of 108 pairs of inputs of code library to be compiled into the index value sequence.Coding schedule 100 in the encoder 110 and the decoding table 120 in the decoder 112 contain source word symbol 106 and code library 108.Index sequence 114 is transferred out by encoder 110, and is decoded by decoder 112.The character string 104 of decoder 112 outputs has identical symbol with the symbol sebolic addressing 102 of input.Before encoder 110 began the symbol sebolic addressing 102 of input encoded, source word symbol 106 was stored in the LZW coding schedule 100 of encoder 110 and decoder 112.Be sent to the index sequence 114 of decoder 112 or be stored in unformatted text symbol the source word symbol 106 from encoder 110, or be stored in the symbol string index in the code library 108.Encoder 110 and decoder 112 are learned new symbol sebolic addressing by according with according to initial source word, and create input item independently thus in code library separately.Encoder 110 is added into new symbol sebolic addressing in code library, and will learn in the past that the index of symbol or symbol sebolic addressing sends to decoder 112 with index sequence 114 these forms.Decoder is learned new character string equally, and new character string is stored on the new index position of LZW decoding table 120 in the code table 108.
What Fig. 2 showed is the process that former LZW technology is compressed the character string of encoder input shown in Figure 1.Begin the character string of input resolved or before decoder began decoding, source word symbol 106 was stored in the LZW coding schedule 100 at encoder 110.In coding schedule 100 and decoding table 120,8 used source word symbols 106 of character are stored on the position of index 0～255.5 contents of 256 addresses are revealed in the source word symbol 106.Symbol "/" is stored on the position of index 47, symbol " b " is stored on the position of index 98, symbol " d " is stored on the position of index 100, symbol " e " is stored on the position of index 101, symbol " t " is stored on the position of index 116, and symbol " w " is present on the position of index 119.Index 256 locational another input items 256 of source word symbol 106 are being stored the end of string sign indicating number in the LZW coding schedule 100, and the index 257 locational input items 257 of code library 108 are being stored and overflowed sign indicating number in the LZW coding schedule 100.
The character string 102 of input is received by encoder 110.The character string 102 of 110 pairs of inputs of encoder is resolved, and sends out index sequence 114.Encoder 110 is by resolving the character string 102 of input and coming character string 102 is encoded by search the longest correspondence code that is complementary with this character string in LZW coding schedule 100.The character string 102 of input is sent out away as index sequence, is used for the input of LZW coding schedule 100.Index can be the designator of a certain input item in source word symbol 106 or the code library 108.
As shown in the LZW coding schedule 100, the index that stores input item in the source word symbol 106 of symbol "/" is 47.Coding schedule 100 only stores source word symbol 106 at first.When encoder was received character string 102, encoder came character string 102 is resolved according to the width of character.Encoder is selected a certain character in the character string 102, and searches this character in LZW coding schedule 100.Encoder is learned code vocabulary altogether by known character and this character string are added.If this character is found, then this character and next character carry out adduction, search at the character string that is formed by these two characters in LZW coding schedule 100 then.If this character string is not stored in the LZW coding schedule 100, then the index of the index of previous identified character or character string is sent out away, and this new character string is added in the LZW coding schedule 100.
Using the encoder operation process of lzw algorithm can be that the character of a letter (8) is illustrated by input character sequence 102 and width; As shown in Figure 2, character string 102 is "/wed/we/wee/web/wet/ ".Coding schedule 100 stores original character, and original character all has an input item for each 8 character, and wherein character comprises "/", " w ", " e ", " d ", " b " and " t ".
From symbol "/", it is that "/" carries out adduction with character late " w " on 47 the position that symbol "/" is stored in index in the LZW coding schedule 100 to the parsing of input character sequence 102.Encoder can be searched character string "/w " in coding schedule, because not storage "/w " in the LZW coding schedule 100, so encoder is by learning "/w " in next sequence index 258 storages "/w ".The index of "/", promptly 47 these index that have been identified character are sent out away in index sequence 104.
To the parsing of character string 102 next from character " w ".Encoder is searched character " w " in LZW coding schedule 100.It is that character " w " carries out adduction with next character " e " on 119 the position that character " w " is stored in index in the LZW coding schedule 100, and encoder is searched character string " we " in coding schedule.Because " we " is not stored in the coding schedule 100, so character string " we " is learned by being stored in the next sequence index 259.
Next parsing to character string 102 begins from character " e ". and it is on 101 the position that character " e " is stored in index the LZW coding schedule 100, character " e " carries out adduction with next character " d " of input of character string, encoder is searched character string " ed " in coding schedule. because " ed " is not stored in the coding schedule 100, so character string " ed " is learned by being stored in the next sequence index 260. the index of previous identified character " e " promptly 101 is sent out away in index sequence 104.
To the parsing of character string 102 next from character " d ".It is that character " d " carries out adduction with next character "/" of input of character string on 100 the position that character " d " is stored in index in the LZW coding schedule 100, and encoder is searched character string " d/ " in coding schedule.Because " d/ " is not stored in the coding schedule 100, so character string " d/ " is learned by being stored in the next sequence index 261.The index of previous identified character " d " promptly 100 is sent out away in index sequence 104.
To the parsing of character string 102 next from character "/".It is that character "/" carries out adduction with next character " w " of input of character string on 47 the position that character "/" is stored in index in the LZW coding schedule 100, and encoder is searched character string "/w " in coding schedule.Because "/w " is stored in index 258 places of coding schedule 100, character "/w " carries out adduction with the character " e " of input of character string 102, encoder is searched character string "/we " in coding schedule, because "/we " is not stored in the coding schedule 100, so character string "/we " is learned by being stored in the next sequence index 262.The index of the identified character string in front "/w " promptly 258 is sent out away in index sequence 104.
For example, for the character that width is 8, if found the content that is complementary with 24 character strings "/we ", then encoder sends one 9 index (character string "/we " is stored in the address in the code library) to decoder.So just the figure place of transmitting has been dropped to 9 from 24.After receiving 9 index, the character string "/we " that decoder will be stored in 9 position indexes returns in the copy of code library.If the sequence that is not complementary in the code library, then encoder sends the index of single character "/", " w " and " e ".
Send character string 102 these 20 symbols and need 160 (20 symbols * 8/symbol).Lzw algorithm has dropped to 126 (14 index * 9) with the figure place that sends.When the character string 102 of input was resolved, the code vocabulary that code library 108 is stored in the coding schedule 100 was increasing, and the length that is stored in character string in the coding schedule is also increasing.For example, the character string "/wee " of 4 characters represented in index 264.
The character string that is stored in the coding schedule is big more, and then compression effectiveness is good more, because the quantity of the index that transmits has reduced.Also can improve compression effectiveness by the width that increases character.Yet, 1 of the every increase of character duration, the needed initial source character of lzw algorithm will increase by 2.Therefore, be the character of several bytes and dialect for width, the initial source character is encoded will need a very big table, so that big to the degree that does not conform to practicality.
Summary of the invention
The present invention does not need the symbol of the source word in the code library is carried out initialization process.In the present invention, source word symbol and code vocabulary are learned and are stored in the code library the character string of importing being carried out in the cataloged procedure.
In addition, in the former lzw algorithm, bigger character needs bigger character index width.A character of being made up of 256 byte symbols need begin with 9 position indexes, and the initial index that the character of 16384 double byte symbol compositions needs is 17.The width of index can directly have influence on compression ratio.In the present invention, the size of character is to the not directly influence of index width.In addition, having only the symbol of being used by the source just to be added in the code library goes.Therefore, the present invention is applicable to sparse source.
Code library is searched for, so that symbol or the symbol sebolic addressing finding out in character string to be received.In case do not store this symbol in the discovery code library, then, it learns this symbol in code library by being stored in, this unformatted symbol is sent out away with the form of coding word.
In case store a certain symbol or symbol sebolic addressing in the discovery code library, the index of then symbol or symbol sebolic addressing institute memory location in code library is sent out away with the code form. and the situation of code word prefix area can show that the content of code word is the unformatted symbol that will be learned, still an index. and the index of code library can change width according to the quantity of roger symbol or the quantity of character string.
The width of symbol can be selected according to the type of data.For example, in the text transmission course, a byte can define a letter easily.Yet, for the audio or video data, under the wideer situation of symbol, data stream resolved and can obtain better compression effectiveness.Because not all symbol all is stored in the code library at the very start, but just is stored when they occur, thus the big symbol of width can be used, and needn't worry that initial overload problem appears in internal memory.
The diagram brief introduction
Below in conjunction with of the more specifically explanation of appended diagram, can be expressly understood foregoing various purposes of the present invention, characteristics and advantage by this paper to preferred embodiment; Identical with reference to the identical parts of character representative in different graphic.Appended figure might not be drawn in proportion, in order to show principle of the present invention, the place that highlights is arranged in the figure.
What Fig. 1 showed is the coding schedule of encoder formation when the LZW technology is carried out lossless data compression before using and the decoding table that decoder forms.
What Fig. 2 showed is the compression process that former LZW technology is carried out input of character string in the encoder shown in Figure 1.
What Fig. 3 showed is when carrying out lossless compress according to principle of the present invention, formed coding schedule of encoder and the formed decoding table of decoder.
What Fig. 4 A showed is the code character that encoder sends in coded string in unformatted symbol mode, and unformatted symbol is learned by encoder shown in Figure 3.
What Fig. 4 B showed is the code character of a certain symbol in the character string that is sent out, and this symbol is the symbol of being learned, and is stored in the coding schedule and decoding table shown in Figure 3.
Shown in Figure 5 is when input of character string is compiled into the code that is sent out, coding schedule and control logic that encoder shown in Figure 3 forms.
Fig. 6 is a flow chart, and it has shown when input of character string is encoded, the employed method of control logic shown in Figure 5.
Fig. 7 is a flow chart, and it has shown when determining the state of index width and code library, the performed step of step 618 among Fig. 6.
Fig. 8 A-8B is a flow chart, and it has shown when the coded string that receives is decoded, the employed method of decoder shown in Figure 3.
What Fig. 9 showed is character string, the content in input of character string being handled back encoder code library and the character string of importing behind the coding.
Detailed description of the present invention
Being described as follows of the preferred embodiment of the invention.
Contain with good grounds principle of the present invention among Fig. 3 and carry out the encoder 310 and the decoder 312 of lossless compress; Encoder contains coding schedule 300, decoder contains decoding table 320. encoders 310 and decoder 312 is beginning Code And Decode under code library 308 state that the storing initial source word does not accord with. when encoder is resolved the character string 302 of input, character is wherein learned. and input of character string is that unit is resolved with the symbol. and symbol can be an any width, for example symbol can be made up of a plurality of letters. and each the code front in encoder output can add one 1 prefix, can make decoder learn this character like this. when encoder 310 is learned a symbol, encoder 310 sends this symbol by the form of unformatted mode with code, and add in the code front 1 be designated as " 0 " if prefix. this symbol is a known symbol, then encoder 310 adds a prefix that is designated as " 1 " in the index front that sends. in the present invention, the width of symbol without limits, because be not subject to the initial form of memory size in the present invention. character is dynamically learned. for the coding word is decoded, if decoder 312 at first will be discerned the prefix bit that shows data type. this numerical value is " 0 ", if then decoder 312 is directly exported this symbol. this numerical value is " 1 ", and then decoder uses code library that index is translated code.
When having or not format symbol to send to decoder 312, decoder 312 just adds the symbol of receiving in the code library 308 of decoder.Therefore, do not need to store whole source word symbol.And the symbol that has only decoder to receive just is stored in the code library 308.
Different with lzw algorithm in the past, before encoder 310 began input of character string 302 resolved, the source word of this symbol symbol was not stored in the coding schedule 300.Encoder 310 is learned this source word symbol and code when input of character string 302 is resolved.The symbol that encoder 310 will newly be learned sends with coded string 314 these forms by unformatted mode, and decoder can learn the source word symbol like this.
The character string 302 that encoder 310 is received is carried out coding, so that remove redundancy or unnecessary data.Encoder 310 is encoded according to selected symbol intervals and the 308 pairs of character strings of receiving of code library that are stored in the coding schedule 300.Character string 314 after encoded is sent to decoder 312.Character string 314 behind the coding is string encoding words.Each coding word all contains symbol or index, and this index is corresponding with the symbol string of storage in the code library 308.
In a certain embodiment, the coding schedule 300 in the encoder 310 and decoding table 320 in the decoder 312 is formed at binary or ternary content can be compiled in the addressed memory.This content can be compiled addressed memory and have search and learning functionality.If can compile in content does not have search index to exist in the addressed memory, then search and learning functionality can make content can compile addressed memory acquisition search index.If store search index in content can be compiled the input item of addressed memory, then content can be compiled addressed memory and turns back to and the corresponding address of search index.If do not have stores search indexes in content can be compiled the input item of addressed memory, then content can be compiled addressed memory and can compile and learn a new search index in the input item of addressed memory by new search index being stored in content.
Coding schedule 300 and decoding table 320 use two input items to carry out initialization process, and this binomial is input as end of string 316 and overflows sign indicating number 318.When the index of sign indicating number 318 was overflowed in transmission, then presentation code table 300 was full.When coding schedule 300 was expired, except that end of string with overflow the sign indicating number, all the other all inputs all were eliminated, and when receiving character string, character and code are learned again again.Overflow sign indicating number and be sent to decoder, decoder 312 can carry out initialization process to its decoding table 320 like this.The initialization process of coding schedule 300 will describe in conjunction with Fig. 6 below.The index of this input item of end of string is sent out away when cataloged procedure finishes.
Owing to do not need the initial source character, so the width of symbol no longer is subjected to coming from the restriction of the required internal memory of storing initial source word symbol, in addition, the width of initial index also no longer is subjected to the influence of source character boundary. because symbol sends by coded string 312, this can make decoder 312 learn new character, so in cataloged procedure, can make amendment to the width of symbol. in cataloged procedure, can monitor compression ratio, can suitably revise the width of symbol in order to improve compression ratio. for example, when carrying out exchanges data on the internet, the type of compressed data is convertible into the required data type of user. for example, the required file type of user can be transformed into image file from audio file, and then changing into text. the width of symbol can change with the variation that is transmitted file type in the present invention, like this for the specific character string of being received, the width of symbol can be optimized selection. and same, bigger symbol can be compressed under the internal memory situation that need not big storing initial source word symbol as one 4 * 4 block of pixels (16 byte) in piece image.
The Breadth Maximum of symbol depends on the physical width of coding schedule 300 and decoding table 320.For example, the symbol of one 7 byte (56) content that can be stored in one 72 bit wide can be compiled in the addressed memory.The content of 72 bit wides can be compiled addressed memory provides 56 (7 bytes) to store this symbol, provides 14 to store the index that another content can be compiled the addressed memory input again.144 content can be compiled addressed memory can store wideer symbol.The form that sends to coding word the coded string 314 of decoder 312 from encoder 310 will describe in conjunction with Fig. 4 A-4B.
In another embodiment, encoder 310 and decoder 312 can be used as to instruct to be stored in the internal memory and by processor and carry out.
What Fig. 4 A showed is the code of coded string 314, and coded string 314 is that encoder 310 shown in Figure 3 sends when sending the unformatted symbol of being learned.When encoder 310 was learned a new symbol by unformatted symbol is stored in the coding schedule 300, encoder 310 sent this symbol to decoder 312 by unformatted mode with the form of coded string 314.This symbol is sent out in the unformatted mode that is stored in the unformatted sign field 406.There is a prefix bit 404 front of unformatted sign field 406.Prefix bit 404 is decided to be " 0 " to show that what follow later is unformatted symbol.For example, the width of if symbol is 2 bytes, and is "/w " by the symbol learned, and then "/w " is stored in the unformatted sign field 406, and " 0 " is stored in the prefix bit 404.
Fig. 4 B shows is code in the coded string 314, and the coded string 314 here is that encoder sends when sending known symbol or character string; Symbol that these are known or character string are stored in the coding schedule shown in Figure 3 300.The coding word comprises table index district 408, and there is prefix bit this front, index area.Table index is stored in the table index district 408, is the prefix bit that is designated as " 1 " before table index district 408.Table index district 408 is storing the index of this input item, and input item is being stored symbol or the character string in coding schedule 300 and the decoding table 320.
The width in table index district 408 changes according to the input item quantity of storage in coding schedule 300 and the decoding table 320.For example, if the input of coding schedule 300 and decoding table 320 storages is less than 4, then the width in table index district 408 is 2.If the input of coding schedule 300 and decoding table 320 storages is between 128 to 255, then the width in table index district 408 is 8.
Fig. 5 shows is control logic 500 and encoder shown in Figure 3 used coding schedule 300 when input of character string 502 is compiled as coded string 314.500 pairs of input of character string 502 of control logic are resolved to generate coded string 314.The coded string 314 that control logic sent contains the coding word, and the coding word contains unformatted symbol or table index; Unformatted symbol is stored in the unformatted sign field 406, and the prefix bit 404 of 406 fronts, unformatted sign field is decided to be " 0 ", and table index is stored in the table index district 408, and the prefix bit 404 of 408 fronts, table index district is decided to be " 1 ".
Input of character string 502 contains a plurality of symbols.The width of symbol is variable, and symbol can be single-letter or byte (8), or multibyte.The width of symbol can be according to the type of data in the input of character string 502 and is dynamically changed.For example, if what handling is text, the then symbol width can be chosen to be a letter (8).If what handling is image file, the then symbol width can be 16 bytes.Control logic 500 comes input of character string 502 is resolved according to selected symbol intervals.
The width of symbol can dynamic change.Encoder 310 can be monitored compression ratio (input figure place/output figure place), if the low or unexpected decline of this ratio, then control logic 500 performed compression algorithm different symbol intervals dynamically on probation are also selected the width with optimum compression ratio.For example, will set some threshold value for compression ratio, when compression ratio reaches threshold level, the width of symbol will change, and the width of symbol is tried out.Code when symbol intervals changes will be preserved, and will reach agreement between encoder 310 and the decoder 312, and decoder 312 just can be discerned the symbol intervals that makes new advances like this.
In addition, when encoder 310 reindexing width, encoder can send the code (not being the employed code of character string in the code library) of a specific reservation after new symbol intervals.
A kind of method of reindexing width is to empty whole coding schedule 300 and learn the symbol with new width again.If new symbol intervals can provide high compression ratio immediately, then this method is effective.If but new width is not suitable for the type of data in the input of character string 502 (Fig. 5), the method for then this reindexing width may have infringement.
Another kind of available method is a part of removing in the code library 308, and the character string that for example will not have a plurality of new symbol intervals is removed.This is a kind of middle scheme, because new symbol intervals can the character string of roger begin from code library 308 (Fig. 3).
Control logic 500 comprises character string register 512, input character string pointer 514, index precision register 516, current string length register 518, input quantity register 520 and finally adds length register 522.Control logic 500 uses character string registers 512 and input character string pointer 514 to come input of character string 502 is resolved, and makes index of reference precision register 516 follow the trail of the figure place that table index district 408 will send in the code that coded string 314 sent.Character string register 512 is used to stores search indexes, and it is being the pointer of symbol in the handled input of character string 502 of control logic 500 (Fig. 5) that input character string pointer 514 is used to store current.
The quantity of input register 520 just can increase when symbol or character string are added in the code library 308.Encoder 310 can be monitored so that check whether code library 308 is full the quantity of input register 520.In case it is full to be checked through code library 308, then encoder 310 empties its code library 308, and will overflow the sign indicating number send to decoder, decoder also can empty its code library 308 (Fig. 3) like this.
Content in the up-to-date interpolation length register 522 is used to the length of character string is followed the trail of, and tracked character string is that up-to-date adding in the code library 308 goes.If this register is decided to be " 1 ", then there is a symbol newly to add in the code library 308.Lengthy content in the current string register 518 is the symbol quantity that extracts from input of character string 502, and input of character string 502 is used as search index at present.
If first symbol is not stored in the code library 308, then coding schedule 300 is by learning that 508 show that coding schedule learns in the code library 308 that by search index 504 is stored in 500 pairs of search index 504. control logics learn that 508 monitor, learning search index 504 in case find coding schedule 300, then control logic 500 sends this symbol as the form of unformatted symbol with code, illustrated as the front in conjunction with Fig. 4 A, unformatted symbol is arranged in unformatted sign field 406, the prefix bit 404 of its front is set to " 0 ". after decoder 312 finds that prefix bit 404 is set as " 0 ", if decoder 312 is learned this symbol by this unformatted symbol of unformatted sign field 406 storages in the code library 308 is stored in the decoding table 320 next sequence index. coding schedule 300 has found the item that is complementary with search index, the index 510 of item is sent to the item that matches that control logic 500. has found search index 504 if then match, and then encoder 310 is searched the longer symbol string that matches with this search index in code library 308. and control logic 500 adds the next symbol of current sign and input of character string 502 altogether; Do not find this search index if provide next search index 504., then learn this search index in the coding schedule 300 by this character string (current sign adds next symbol) is stored in this.
With in language, monogram got up and to learn vocabulary the same, can learn character string like this.The longest-prefix index that matches sends in coded string 314, and coded string 314 is stored in the table index district 408 (Fig. 4 B), and the prefix bit 404 of its front is set to " 1 ".This method of character string of learning will describe below in conjunction with Fig. 9.
Control logic 500 is resolved input of character string 502 according to selected symbol intervals.Coding schedule 300 only stores 3 input items at first, promptly end of string, overflow sign indicating number and character duration changes sign indicating number; Wherein character duration variation sign indicating number is an optional input item.The next symbol that control logic 500 is selected in the input of character string, and at coding schedule 300 these symbols of search.If found this symbol, then control logic 500 adds the next symbol in this symbol and the input of character string 502 altogether.Control logic constantly adds the symbol in the input of character string altogether, until find a current symbol string of not storing in coding schedule 300.The long symbol string indexing that control logic 500 will match sends, and adds the prefix bit that is set to " 1 " before this index.
If a certain symbol is not stored in the coding schedule 300, then control logic 500 sends the unformatted symbol of this symbol, and adds the prefix that is set to " 0 " in its front, and decoder 312 (Fig. 5) is just can learn this symbol like this.
When symbol and symbol string were stored in the coding schedule 300, the quantity of 500 pairs of inputs of control logic was monitored.Whenever the quantity of input has surpassed 2 power, then control logic 500 just increases the width of index.Control logic 500 is also monitored coding schedule 300 used input item quantity, thereby determines whether coding schedule 300 is full.In case find that coding schedule 300 is full, then control logic 500 comes coding schedule 300 is carried out initialization by input item and the symbol string of removing all stored symbols, and send one to decoder 312 and overflow sign indicating number, decoder 312 just can carry out initialization process to its decoding table 320 like this.
In addition, control logic 500 can be monitored compression ratio, and decision is not effectively being carried out initialization to coding schedule 300 under the compression situation." adaptability of code library size restriction in the LZW data compression process " literary composition of people such as K.Ouaissa is illustrated the method for monitoring compression ratio, the IEEE international information theory that this article was held in Canada September nineteen ninety-five is drilled to beg in the meeting and is delivered, and this article is merged in this paper at this by quoting as proof.
Fig. 6 shows is the flow process of control logic method therefor when input of character string 502 is encoded shown in Figure 5.Fig. 6 will describe in conjunction with Fig. 5.
In step 600, coding schedule 300 carries out initialization, control logic 500 is carried out execution. and by end of string sign indicating number " 0 " is stored in first input of index " 0 ", and will overflows sign indicating number " 1 " and be stored in to be stored on the index " 2 " in second input of index " 1 " or with the change width sign indicating number code library is carried out initialization process; It is an optional operating procedure that the change width sign indicating number is stored on the index " 2 ". for simplifying explanation herein, do not carry out width change sign indicating number in conjunction with the embodiment that Fig. 6 describes. in this embodiment, the width of symbol is changeless. index precision register 516 is set to " 1 ", current character string length 518 is set to " 1 ", the quantity that is stored in input 520 in the code library is set to 2, here there is not symbol intervals to change sign indicating number, up-to-date interpolation length 522 is set to " 1 ", for the index of first character in the character string 502, input character string pointer 514 is set to " 0 ", and character string register 512 is set as vacant (NULI character). and next process continues execution in step 601.
In step 601, control logic is chosen the next symbol in the input of character string 502, and with the symbol of storage in this symbol and the character string register 512 adduction mutually, perhaps selected symbol is added in the null character string register 512, next continue execution in step 602.
In step 602, control logic 500 by with the content in the character string register 512 as search index 504 send to coding schedule 300 in code library, search for character string register 512 in the input item that is complementary of content.Control logic 500 sends the instruction of " search for and learn " equally in instruction group 506.Next continue execution in step 604.
In step 604,500 pairs of control logics learn the state of item 508 is monitored so that determine whether search index is learned, because search index is not stored in the coding schedule 300.Show that search index is being obtained disconnected knowing, and then continues execution in step 606 if learn the state of item 508.If found search index 504, then continue execution in step 620.
In step 606, do not find search index 504 in the coding schedule 300.Search index 504 is stored on the next index position of coding schedule 300.Next process continues execution in step 608.
In step 608, control logic 500 is stored in the quantity of symbol in the character string register 512 according to being stored in numerical value inspection in the current character string length 518.If current character string length 518 is set to " 1 ", then process continues execution in step 610, and this symbol is sent in unformatted mode.If the content in the current character string length 518 is greater than 1, this symbol that shows storage in the character string register 512 is more than 1, and next process continues execution in step 612.
In step 610, control logic 500 is according to sending in conjunction with the unformatted symbol of the illustrated process of Fig. 4 A with storage in the character string register 512, and adds the prefix bit 404 that is set to " 0 " before this symbol.Next process continues execution in step 616.
In step 612,500 pairs of up-to-date interpolation length items 522 of control logic are checked to determine up-to-date string length of adding in the code library 308.If the string length of up-to-date storage is " 1 ", i.e. symbol, then process continues execution in step 616; If not, then process continues execution in step 614.
In step 614, control logic 500 is by sending in conjunction with the illustrated index with the previous character string that matches in the table index district 408 of Fig. 4 B, and the prefix bit 404 of this index front is set to " 1 ".This character string is known, and therefore, the previous index that is identified symbol string is sent out away.Next process continues execution in step 616.
In step 616, control logic 500 is determined the up-to-date length of adding content in the current character string length 518 to 522.Current character string length 518 is set to " 1 ".Next process continues execution in step 617.
In step 617, control logic 500 is made as the character string register vacant.Next process continues execution in step 618.
In step 618, control logic 500 checks whether the code library 308 in the coding schedule 300 is full.Control logic 500 checks also whether index precision register 516 should increase.Step 618 will describe in conjunction with Fig. 7 hereinafter.
In step 620, control logic 500 is advanced to input character string pointer 514 character late of input of character string 502.Next process continues execution in step 621.
In step 621, control logic 500 increases the symbol quantity of storage in the current character string length 518.Next process continues execution in step 622.
In step 622, control logic 500 determines whether input of character string 502 has more symbol to encode.If the character string pointer does not point to the end of string sign indicating number, then there is more symbol to need decoding.If significant character is arranged, then process continues execution in step 601.If pointed end of string sign indicating number, then process continues execution in step 624.
In step 624, control logic 500 has been finished the coding to input of character string 502.If this character string is present in the code library 308, then control logic transmits the index of this character string, and the prefix bit 404 that comes coded string 314 fronts is set to " 1 ".Process is so far all finished.Control logic 500 sends end of string item code " 1 ", if this character string stores the end of string item, then the prefix bit 404 of coded string 314 is set to " 1 ".
If the compression of input of character string 502 does not have multiple symbol intervals, then encoder 310 sends a specific code to decoder 312, remaining figure place in the is-symbol that this code is followed later, and what followed the back again is unformatted symbol.For example, if input of character string is " 123456789 ", and symbol intervals is two characters, and then resolving the border is 12,34,56,78,9.Therefore, last character＞9=is a part symbol.Therefore, " 9 " are sent out away with this form of 1. particular code .9 (8) .8 (figure place that will resolve).
Fig. 7 is a flow chart, and it has shown the performed step of step 618 among Fig. 6, and whether the current index width that this step is used for determining to be stored in the index precision register 516 will increase.Fig. 7 has also shown the step that reinitializes of when code library 308 is expired coding schedule 300.
If code library 308 is full, then have one overflow the sign indicating number send to decoder 312, this shows should carry out clear operation.All input items in the coding schedule 300 are disposed in the clear operation meeting, and by this is stored on index " 0 " position and will overflows sign indicating number and is stored in index " 1 " position and simultaneously the index width is initially set " 1 " and comes coding schedule 300 is reinitialized processing with end of string.The power of the input item quantity leap 2 in being stored in coding schedule 300 is inferior once, and the index width just increases by 1.
In step 700, the content of control logic 500 from input item quantity item 520 determines whether code library 308 is full.If code library 308 is full, then process continues execution in step 706.If discontented, then process continues execution in step 702.
In step 702, control logic 500 is determined the content in the input quantity item 520 in the coding schedule 300, and whether the input item quantity in definite coding schedule 300 has reached 2 power.When the width of index is initial be 1, when the index of up-to-date storage input item reached 2 power time in coding schedule 300, the width of index just increased.For example, the input item when the code library storage is less than 2
3The time, the index stores 3 of 516 pairs of three bit wides of index precision register then, when 8 input items of storage, the width of index is increased to 4 from 3.If when coding schedule 300 reached 2 power time, process continued execution in step 704.If do not reach this power, then process continues execution in step 622.
In step 704, coding schedule 300 reaches 2 power, and index precision register 516 is increased.Index precision register 516 shows has passed in table index district 408 for how many positions.Process is execution in step 622 next.
In step 706, code library 308 is full.The sign indicating number that overflows that control logic 500 will be stored in 308 second inputs of code library sends.Overflow sign indicating number and be sent out away in coded string 314, decoder 312 can know that coding schedule 300 is being cleared like this, and decoder 312 also can empty the code library 308 of decoder 312.Next process continues execution in step 708.
In step 708, all the form inputs in the coding schedule 300 are cleared.Next process continues execution in step 710.
In step 710, coding schedule 300 is initialised.At code library 308 under the situation that the width of not selecting symbol can change is by storing " 0 " on the 1st input item of index " 0 " and storing " 1 " and carry out initialized on second input item of index " 1 ".Index precision register 516 is set to 1, and the input quantity 520 that is stored in the code library 308 is set to 2, and up-to-date interpolation length 522 is set to " 1 ", and input character string pointer 514 is set to the index of this position in the current sign.Next process continues execution in step 622.
Fig. 8 A-8B is a flow chart, it has shown decoder 312 shown in Figure 3 employed method when the coded string of being received 314 is decoded. for the code that receives is decoded, decoder 312 contains a plurality of registers. and register comprises the old indexed registers that is used to store up-to-date decoding community string index community, also comprises being used to the decoding character string register storing the new indexed registers of index and be used to store current decoding character string (unformatted) and a certain symbol; This symbol of being stored in the decoding character string register equates with first symbol of current decoding character string.
It is a symbol or an index that 312 couples of first of being received of decoder check with what determine to be received.Decoder uses the known symbol string that is stored in the decoding table 320 to come alternate index, thereby realizes receiving the decoding of index.Decoder 312 is learned the unformatted symbol of being received by unformatted symbol being stored on next the sequential index position in the decoding table 320.
In step 800, decoder 312 is chosen the 1st from coded string 314.Under the situation of not selecting symbol intervals to change, code library 308 only stores the binomial input at first in the decoder.Decoder 312 is learned symbol from the coded string of being received 314, and symbol is filled in the code library 308.The 1st bit table of the 1st coded string 314 that decoder 312 is received understands that first code comprises unformatted sign field 406, and this unformatted sign field stores the unformatted symbol that decoder 312 will be learned.
In step 802, the 1st that is received is set to " 0 ", and this shows before the symbol that is stored in unformatted sign field 406 prefix bit 404.Decoder 312 is chosen this unformatted symbol from coded string 314.Selected figure place depends on selected symbol intervals.For example, if selected symbol intervals is 16, below then decoder 312 is chosen from coding input of character string 314 16.Next process continues execution in step 804.
In step 804, this unformatted symbol is added on the next sequence index of code library 308 in the decoding table 320.Next process continues execution in step 806.
In step 806, old indexed registers is set as the index that code library 308 has added symbol, and next process continues execution in step 808.
In step 808, decoder is exported away the symbol in the coded string 314 that receives with decoding output string 304 these forms.Next process continues execution in step 810.
In step 810, decoder 312 is chosen next bit from coded string 314, thereby determines whether this code comprises unformatted symbol or index.Next process continues execution in step 812.
In step 812, decoder checks the next bit in the coded string 314 that receives, thereby determines whether it is set at " 1 " to table index 408, or unformatted symbol 406 is set at " 0 ".If next bit is set to " 0 ", then process continues execution in step 813, thereby unformatted symbol 406 is handled.If next bit is set to " 1 ", then process continues execution in step 830, thereby table index 408 is handled.
In step 813, the position below decoder 312 is chosen from coded string 314.Following figure place depends on the width of symbol.Decoder 312 is stored in these positions in the coded string register.Next process continues execution in step 814.
In step 814, will decode first symbol of character string of decoder 312 is stored in a certain sign register.Next process continues execution in step 814.
In step 814, will decode first symbol of character string of decoder 312 is stored in a certain sign register.Next process continues execution in step 815.
In step 815, decoder 312 is stored in character string on the old index position and the resulting character string of decoding symbols adduction in the next sequence index of code library 308. when having character string or symbol to add in the code library 308, if decoder 312 is just checked the input quantity in the code library 308 and whether has been reached 2 power. the input quantity in the code library 308 has reached 2 power, then decoder 312 is by the precision that increases index in conjunction with the illustrated step of Fig. 7. and different with encoder 310 is, decoder 312 need not to check whether code library 308 full because full load condition by encoder 310 sent overflow the sign indicating number represented. next process continues execution in step 816.
In step 816, decoder 312 is stored in decoded symbol on the next sequence index of code library 308.Next process continues execution in step 818.
In step 818, the index of the index of decoding back symbol or decoding back character string is stored in the old indexed registers.Next process continues execution in step 820.
In step 820, the decoding character string that decoder 312 will be stored in the character string register is exported away.Next process continues execution in step 822.
In step 822, whether decoder 312 determines to have in the coded string 314 more position to need decoding.If have, then process continues execution in step 810.If no, then process so far is all over.
In step 830, new indexed registers is set to the content of next index in the table index district 408.The figure place that is stored in the new indexed registers depends on the index precision that encoder is selected.Next process continues execution in step 832.
In step 832, the content in 312 pairs of new indexed registers of decoder is checked.The index that decoder 312 checks are received is the end of string sign indicating number or overflows sign indicating number.If the index of being received is to overflow sign indicating number, then decoding table is carried out initialization process according to the explanation of encoder 310 being done in conjunction with Fig. 7.If the index of receiving is the end of string sign indicating number, then process is all finished.If the index of receiving is neither the end of string sign indicating number neither overflow sign indicating number, then decoder will determine whether this new index is effective.If this new index is effective, then process continues execution in step 834.If this new index is invalid, then process continues execution in step 836.
In step 834, decoder 312 is stored in the decoded result of this new index in the decoding character string register of code library.Next process continues execution in step 840.
In step 836, it is invalid that new index is identified.Decoder 312 is stored in the decoded result of old index in the decoding character string register.Next process continues execution in step 838.
In step 838, decoder 312 is set decoding character strings equal the to decode adduction of character string and symbol.Next process continues execution in step 840.
In step 840, decoder 312 is first symbol in the decoding character string with the content setting of a certain sign register.Next process continues execution in step 842.
In step 842, the character string and this symbol that are stored on the code library 308 old index positions carry out adduction, and the result of adduction is stored on the next sequence index of code library.Next process continues execution in step 818.
What Fig. 9 showed is content and the coded string in the code library 308 in input of character string, the input of character string 502 processed back encoders.Fig. 9 will describe in conjunction with Fig. 5 and Fig. 6.
In step 600, code library 308 is stored on index " 1 " position and carries out initialization by the end of string sign indicating number being stored on index " 0 " position and will overflowing sign indicating number.In the illustrated embodiment, the width of symbol is fixed on 2 letters (16).Yet the width of symbol is not limited to 16, and symbol intervals can be by on-the-fly modifying of having illustrated.Input of character string 502 contains a plurality of symbols 904
1-904
10The symbol 904 of the 1st 16 bit wides of input of character string 502
1Be "/w ", the symbol 904 of last 16 bit wide
10Be " t/ ".
In step 601,500 pairs of input of character string 502 of control logic are resolved, and with the 1st symbol 904
1"/w " extracts from input of character string 502.The symbol that extracts from input of character string 502 depends on the content the character string pointer register 514.Content in the character string pointer register 514 is pointed to the 1st symbol 904 in the input of character string 502 at first
1, character string register 512 is vacant.Control logic 500 is with symbol 904
1Add altogether with the content in the vacant character string register 512.
In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
1In step 604, in code library 308, do not find symbol 904
1In step 606, coding schedule 300 passes through symbol 904
1The next sequence index that is stored in code library 308 is to learn symbol 904 on the index " 2 "
1, and show symbol 904
1Learn by learning item 508.In step 608, the symbol quantity that is stored in the character string 502 is " 1 ", so process continues execution in step 610.In step 610, control logic 500 word 906 of will encoding
1Send in coded string 314, decoder 312 can be learned symbol 904 like this
1Coding word 906
1Contain unformatted symbol 904
1, as illustrated in conjunction with Fig. 4 A, 904
1The front has the prefix bit 404 that is set to " 0 ".
At unformatted symbol 904
1After being sent out, control logic 500 is made amendment at step 616,617 and 618 pairs of each registers.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set at " 1 ".In step 617, control logic is set at character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) at input of character string 502, and process continues execution in step 601 and so that continue input of character string 502 resolved.
In step 601, the content in the input of character string pointer register 514 is still pointed to the 1st symbol 904 in the input of character string 502
1Control logic 500 is extracted the 1st symbol 904 once more
1, and the content in this symbol and the vacant character string register 512 added altogether.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
1In step 604, find symbol 904 at code library 308
1, because symbol 904
1In execution in step 601-622 process, be stored in the code library 308.
In step 620, symbol 904
1Found, control logic 500 promotes the input character string pointer forward, makes the next symbol 904 in this pointed input of character string 502
2In step 621, control logic 500 increases the quantity that is stored in symbol in the character string register 512.In step 622, control logic 500 has determined whether that from input of character string 502 more symbol will encode.Process continues execution in step 601, second symbol " ed " of input of character string pointed input of character string 502 and character string register 512 first symbols 904 of storage
1"/w ".
In step 601, control logic 500 is with symbol 904
1With next symbol 904 in the input of character string 502
2Add altogether.In step 602, the character string that control logic 500 obtains adduction "/wed " sends to coding schedule 300 as search index 504.In step 604, do not find symbol string "/wed " at coding schedule 300.In step 606,, promptly learn symbol string "/wed " on the index " 3 " by symbol string "/wed " being stored in the next index position of code library 308.Symbol string "/wed " is not stored in unformatted mode.On the contrary, symbol string "/wed " is to store with the index form with reference to its prefix.The prefix of symbol string "/wed " is "/w ", and this prefix is stored on the position of index " 2 ".Symbol string "/wed " is stored on the position of index " 3 ", is stored as table index " 2 " and " ed " store with unformatted form as "/w ".In step 608, the symbol quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines whether up-to-date symbol quantity is 1 in the up-to-date interpolation character string, in step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set at " 1 ".In step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
Content in the character string pointer register 514 is pointed to symbol 904
2Character string register 512 is empty.In step 601, control logic is with the next symbol 904 in the input of character string 502
2Add altogether with the content in the vacant character string register 512.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
2" ed " sends to coding schedule 300 as search index.300 of coding schedules are searched symbol 904 in code library 308
2In step 604, symbol 904
2Do not have found.In step 606, coding schedule 300 passes through symbol 904
2Be stored on the index " 4 " of code library 308 and learn symbol 904
2And show that coding schedule is just by learning that 508 are learning symbol 904
2In step 608.The symbol quantity of storage is " 1 ", so next process continues execution in step 610.In step 610, control logic 500 is with code 906
2Send in coded string 314, decoder just can be learned this symbol like this.Code 906
2Contain unformatted symbol 904
2, illustrated as the front in conjunction with Fig. 4 A, unformatted symbol 904
2Be added with the prefix bit 404 that is set to " 0 " before.
Sending out unformatted symbol 904
2Afterwards, 500 pairs of various registers of control logic are made amendment.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522.Current character string length 518 is set to " 1 ".In step 617, control logic 500 is set at character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
In step 601, the content in the input of character string pointer register 514 is still pointed to the symbol 904 in the input of character string 502
2Control logic 500 is with symbol 904
2Add altogether with the content in the vacant character string register 512.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 in code library 308
2In step 604, because symbol 904
2In the previous circulation of step 601～622, be present in the code library 308, so in this step, found this symbol at code library 308.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
3In step 621, control logic 500 increases the symbol quantity that is stored in the character string register 512.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
3"/w ", the character string register contains symbol 904
2" ed ".
In step 601, control logic 500 will be stored in the symbol 904 in the character string register 502
2With the next symbol 904 in the input of character string 502
3The phase adduction.In step 602, control logic 500 sends to coding schedule 300 with symbol string " ed/w " as search index.Coding schedule 300 is searched symbol string " ed/w " at code library 308.
In step 604, do not find symbol string " ed/w ".In step 606, by learning character string " ed/w " on index 5 positions that this character string are stored in code library 308.This character string is not stored in unformatted mode.On the contrary, character string " ed/w " with reference to storing under its prefix situation, is identical because symbol " ed " is stored in that index 4 and "/w " store in unformatted mode with index 4.Character quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines that the up-to-date symbol quantity in the up-to-date interpolation character string is 1, in step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set to 1, and in step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character in the input of character string 502, next process continues execution in step 601.
Content in the character string pointer register 514 is pointed to symbol 904
3Character string register 512 is vacant.In step 601, the next symbol 904 in control logic 500 half input of character string 502
3Add altogether with the content in the character string register 512. in step 602, control logic 500 is the content in the character string register 512, i.e. symbol 904 in the input of character string 502
3"/w " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 in code library 308
3In step 604, because "/w " has been stored on index 2 positions of code library 308, so at step 604 symbol 904 in this previous cycle of step 601-622
3Found.
In step 620, control logic advances input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
4In step 621, the symbol quantity that control logic 500 will be stored in the character string register 512 increases to 2.In step 622, control logic 500 determines whether input of character string 502 also has symbol to encode.Next process continues execution in step 601, the next symbol 904 that input character string pointer 514 points in the input of character string
4" e/ ", character string register 512 stored symbols 904
3"/w ".
In step 601, control logic 500 is with symbol 904
3With the next symbol 904 in the input of character string 502
4Add altogether.In step 602, control logic 500 sends to coding schedule 300 with symbol string "/we/ " as search index 504.Coding schedule 300 is searched symbol string "/we/ " in code library 308.In step 604, symbol string "/we/ " is not found.In step 606, symbol string "/we/ " is by being stored on code library 308 index 6 and learned.Symbol string is not stored in unformatted mode.Because symbol "/w " has been stored on the index 2, so symbol string "/we/ " is stored with index 1 under the prefix situation of reference key 1.Symbol string "/we/ " is stored on the index 6, and "/w " is stored on the index 2, and " e/ " is stored in unformatted mode.Symbol quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines that the up-to-date symbol quantity in the up-to-date interpolation character string is 2, and in step 614, control logic 500 is with code 906
3In coded string 314, send.Code 906
3Contain index 2, as illustrated in conjunction with Fig. 4 B, there is the prefix bit that is set to " 1 " front of this index 2.
In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set to " 1 ".In step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
The content of character string pointer register 514 is pointed to symbol 904
4" e/ ".Character string register 512 is vacant.In step 601, control logic is with next symbol 904 in the input of character string 502
4Content in " e/ " and the vacant character string register 512 adds altogether.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
4" e/ " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
4In step 604, symbol 904
4Not found.In step 606, coding schedule 300 passes through symbol 904
4Be stored on the index " 7 " of code library 308 and learn symbol 904
4And show that coding schedule is just by learning that 508 are learning symbol 904
4In step 608, the symbol quantity of storage is " 1 ", so next process continues execution in step 610.In step 610, control logic 500 is with code 906
4Send in coded string 314, decoder just can be learned this symbol like this.Code 906
4Contain unformatted symbol 904
4, illustrated as the front in conjunction with Fig. 4 A, unformatted symbol 904
4Be added with the prefix bit 404 that is set to " 0 " before.
Sending out unformatted symbol 904
4Afterwards, 500 pairs of various registers of control logic are made amendment.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522.Current character string length 518 is set to " 1 ".In step 617, control logic 500 is set at character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
In step 601, the content in the input of character string pointer register 514 is still pointed to the symbol 904 in the input of character string 502
4Control logic 500 is with symbol 904
4Add altogether with the content in the vacant character string register 512.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 in code library 308
4In step 604, because symbol 904
2In the previous circulation of step 601～622, be present in the code library 308, so in this step, found this symbol at code library 308.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
5In step 621, the symbol quantity that control logic 500 will be stored in the character string register 512 increases to 2.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
5" we ", character string register-stored symbol 904
4" e/ ".
In step 601, control logic 500 is with symbol 904
4With next symbol 904 in the input of character string 502
5Add altogether.In step 602, the character string that control logic 500 obtains adduction " e/we " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol string " e/we " in code library 308.In step 604, do not find symbol string " e/we " at coding schedule 300.In step 606,, promptly learn symbol string " e/we " on the index " 8 " by symbol string " e/we " being stored in the next index position of code library 308.Symbol string " e/we " is not stored in unformatted mode.On the contrary, symbol string " e/we " is to store with index 7 with reference to the index form of its prefix, because " e/ " is stored on the index 7.Symbol string " e/we " is stored on the index 8, and " e/ " is stored on the index 7, and " we " stores with unformatted form.Symbol quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines whether up-to-date symbol quantity is 1 in the up-to-date interpolation character string, in step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set at " 1 ".In step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
The content of character string pointer register 514 is pointed to symbol 904
5Character string register 512 is vacant.In step 601, control logic is with next symbol 904 in the input of character string 502
5Content in " we " and the vacant character string register 512 adds altogether.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
5" we " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
5In step 604, symbol 904
5Not found.In step 606, coding schedule 300 passes through symbol 904
5Be stored on the index 9 of code library 308 and learn symbol 904
5, and show that coding schedule is just by learning that 508 are learning symbol 904
5In step 608, the symbol quantity of storage is " 1 ", so next process continues execution in step 610.In step 610, control logic 500 is with code 906
5Send in coded string 314, decoder just can be learned this symbol like this.Code 906
5Contain unformatted symbol 904
5, illustrated as the front in conjunction with Fig. 4 A, unformatted symbol 904
4Be added with the prefix bit 404 that is set to " 0 " before.
Sending out unformatted symbol 904
5Afterwards, 500 pairs of various registers of control logic are made amendment.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522.Current character string length 518 is set to " 1 ".In step 617, control logic 500 is set at character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
In step 601, the content in the input of character string pointer register 514 is still pointed to the symbol 904 in the input of character string 502
5Control logic 500 is with symbol 904
5Add altogether with the content in the vacant character string register 512.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 in code library 308
5In step 604, because symbol 904
5In the previous circulation of step 601～622, be present in the code library 308, so in this step, found this symbol at code library 308.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
6In step 621, the symbol quantity that control logic 500 will be stored in the character string register 512 increases to 2.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
6"/e ", character string register-stored symbol 904
5" we ".
In step 601, control logic 500 is with symbol 904
5With next symbol 904 in the input of character string 502
6Add altogether.In step 602, the character string that control logic 500 obtains adduction " wee/ " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol string " wee/ " in code library 308.In step 604, do not find symbol string " wee/ " at coding schedule 300.In step 606,, promptly learn symbol string " wee/ " on the index 10 by symbol string " wee/ " being stored in the next index position of code library 308.Symbol string " wee/ " is not stored in unformatted mode.On the contrary, symbol string " wee/ " is to store with index 9 with reference to the index form of its prefix, because " we " is stored on the index 9.Symbol string " wee/ " be used as (9, e/) be stored on the index 10, " e/ " is stored as index 9, " we " stores with unformatted form.Symbol quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines whether up-to-date symbol quantity is 1 in the up-to-date interpolation character string, in step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set at " 1 ".In step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
The content of character string pointer register 514 is pointed to symbol 904
6Character string register 512 is vacant.In step 601, control logic is with next symbol 904 in the input of character string 502
6Content in " e/ " and the vacant character string register 512 adds altogether.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
6" e/ " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
6In step 604, symbol 904
69 places are found at index.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
7In step 621, control logic 500 will increase the quantity of symbol.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
7" we ", character string register-stored symbol 904
6" e/ ".
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502.In step 621, control logic 500 will increase the quantity of symbol.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
7" we ", character string register-stored symbol 904
6" e/ ".
In step 601, control logic 500 is with symbol 904
6With next symbol 904 in the input of character string 502
7Add altogether. in step 602, the character string that control logic 500 obtains adduction " e/we " sends to coding schedule 300. coding schedules 300 as search index 504 and search symbol string " e/we " in code library 308. in step 604, found symbol string " e/we " at index 8. in step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
8In step 621, the symbol quantity that control logic 500 will be stored in the character string register 512 increases to 3.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
8" b/ ", character string register 512 stored symbols strings " e/we ".
In step 601, control logic 500 is with symbol 904
8Content in the character string register 512 adds altogether.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 " e/web/ " as search index 504.Coding schedule 300 is searched symbol string " e/web/ " in code library 308.In step 604, symbol string " e/web/ " is not found.In step 606, coding schedule 300 symbol strings " e/web/ " are stored on the index 11 of code library 308 and learn symbol string " e/web/ ".Symbol string " e/web/ " is not stored in unformatted mode.On the contrary, symbol string " e/web/ " is to store with index 8 with reference to the index form of its prefix, because " e/we " is stored on the index 8.Symbol string " e/web/ " be used as (8, b/) be stored on the index 11, " e/we " is stored on the index 8, " b/ " stores with unformatted form.Symbol quantity in the character string register 512 is 3.Therefore, in step 612, control logic 500 determines that up-to-date symbol quantity is not 1 in the up-to-date interpolation character strings, in step 614, control logic 500 in coded string 314 with code 906
6Send.Code 906
6Contain index 8, symbol string " e/we " is stored on the index 8, and is illustrated in conjunction with Fig. 4 B as the front, is added with the prefix bit that is set to " 1 " before the index 8.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
The content of character string pointer register 514 is pointed to symbol 904
8Character string register 512 is vacant.In step 601, control logic is with next symbol 904 in the input of character string 502
8Content in " b/ " and the vacant character string register 512 adds altogether.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
8" b/ " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
8In step 604, symbol 904
8Not found.In step 606, coding schedule 300 passes through symbol 904
8Be stored on the index 12 of code library 308 and learn symbol 904
8, and show that coding schedule is just by learning that 508 are learning symbol 904
8In step 608, the symbol quantity of storage is " 1 ", so next process continues execution in step 610.In step 610, control+system logic 500 is with code 906
7Send in coded string 314, decoder just can be learned this symbol like this.Code 906
7Contain unformatted symbol 904
8, illustrated as the front in conjunction with Fig. 4 A, unformatted symbol 904
8Be added with the prefix bit 404 that is set to " 0 " before.
Sending out unformatted symbol 904
8Afterwards, 500 pairs of various registers of control logic are made amendment.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522.Current character string length 518 is set to " 1 ".In step 617, control logic 500 is set at character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
Character string register 512 is vacant.In step 601, the content in the input of character string pointer register 514 is still pointed to the symbol 904 in the input of character string 502
8Control logic 500 is with symbol 904
8Add altogether with the content in the character string register 512.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 in code library 308
8In step 604, because symbol 904
8In the previous circulation of step 601～622, be present in the code library 308, so in this step, found this symbol at code library 308.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
9In step 621, control logic 500 increases the quantity of symbol.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
9" we ", character string register-stored symbol 904
8" b/ ".
In step 601, control logic 500 is with symbol 904
8With next symbol 904 in the input of character string 502
9Add altogether.In step 602, the character string that control logic 500 obtains adduction " b/we " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol string " b/we " in code library 308.In step 604, do not find symbol string " b/we " at coding schedule 300.In step 606,, promptly learn symbol string " b/we " on the index 13 by symbol string " b/we " being stored in the next index position of code library 308.This symbol string is not stored in unformatted mode.On the contrary, symbol string " b/we " is to store with index 12 with reference to the index form of its prefix, because " b/ " is stored on the index 12.Symbol string " b/we " be used as (12, we) be stored on the index 13, " b/ " is stored as index 12, " we " stores with unformatted form.Symbol quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines whether up-to-date symbol quantity is 1 in the up-to-date interpolation character string, in step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set at " 1 ".In step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
The content of character string pointer register 514 is pointed to symbol 904
9Character string register 512 is vacant.In step 601, control logic is with next symbol 904 in the input of character string 502
9Content in " we " and the vacant character string register 512 adds altogether.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
9" we " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
9In step 604, symbol 904
9Found.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol 904 in its sensing input of character string 502
9In step 621, control logic 500 increases the quantity of symbol.In step 622, control logic 500 determines whether input of character string 502 also has symbol to need coding.Next process continues execution in step 601, at this moment the next symbol 904 in the input of character string pointed input of character string
10" t/ ", character string register-stored symbol 904
9" we ".
In step 601, control logic 500 is with symbol 904
9With next symbol 904 in the input of character string 502
10Add altogether.In step 602, the character string that control logic 500 obtains adduction " wet/ " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol string " wet/ " in code library 308.In step 604, do not find symbol string " wet/ " at coding schedule 300.In step 606,, promptly learn symbol string " wet/ " on the index 14 by symbol string " wet/ " being stored in the next index position of code library 308.This symbol string is not stored in unformatted mode.On the contrary, symbol string " wet/ " is to store with index 9 with reference to the index form of its prefix, because " we " is stored on the index 9.Symbol string " wet/ " be used as (9, t/) be stored on the index 14, " we " is stored as index 9, " t/ " stores with unformatted form.Symbol quantity in the character string register 512 is 2.Therefore, in step 612, control logic 500 determines that up-to-date symbol quantity is not 1 in the up-to-date interpolation character strings, in step 614, control logic 500 in coded string 314 with code 906
8Send.Code 906
8Contain index 9, illustrated as the front in conjunction with Fig. 4 B, be added with the prefix bit that is set to " 1 " before the index 9.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522, and current character string length 518 is set at " 1 ".In step 617, control logic 500 is made as character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
The content of character string pointer register 514 is pointed to symbol 904
10Character string register 512 is vacant.In step 601, control logic is with next symbol 904 in the input of character string 502
10Content in " t/ " and the vacant character string register 512 adds altogether.In step 602, control logic 500 is the content in the character string register 512, i.e. next symbol 904 in the input of character string 502
10" t/ " sends to coding schedule 300 as search index 504.Coding schedule 300 is searched symbol 904 at code library 308
10In step 604, do not find symbol 904 at coding schedule 300
10In step 606, by with 904
10Be stored in the next index position of code library 308, promptly learn 904 on the index 15
10, and show that coding schedule is just by learning that 508 are learning symbol 904
8In step 608, the symbol quantity of storage is " 1 ", so process continues execution in step 610.In step 610, control logic 500 word 906 of will encoding
9Send in coded string 314, decoder 312 can be learned symbol 906 like this
9Coding word 906
9Contain unformatted symbol 904
9, as illustrated in conjunction with Fig. 4 A, 904
9The front has the prefix bit 404 that is set to " 0 ".
Sending out unformatted symbol 904
10Afterwards, 500 pairs of various registers of control logic are made amendment.In step 616, control logic 500 is set at content in the current character string length 518 with up-to-date interpolation length 522.Current character string length 518 is set to " 1 ".In step 617, control logic 500 is set at character string register 512 vacant.
In step 622, control logic 500 determines whether also have significant character (not being the end of string sign indicating number) in the input of character string 502, next process continues execution in step 601.
Character string register 512 is vacant.In step 601, the content in the input of character string pointer register 514 is still pointed to the symbol 904 in the input of character string 502
10Control logic 500 is with symbol 904
10Add altogether with the content in the character string register 512.In step 602, control logic 500 sends to coding schedule 300 with the content in the character string register 512 as search index 504.Coding schedule 300 is searched symbol 904 in code library 308
10In step 604, because symbol 904
10In the previous circulation of step 601～622, be present in the code library 308, so in this step, found this symbol at code library 308.
In step 620, control logic is pushed ahead input character string pointer 514, makes the next symbol in its sensing input of character string 502.In step 621, control logic 500 increases the quantity of symbol.
In step 622, control logic 500 has detected the end of string sign indicating number, and next process continues execution in step 624.
In step 624, control logic 500 with the index of end of string sign indicating number at coding word 906
10In send.
If suppose 904
1～904
10Each symbol all is 16 bit wides, does not then comprise the end of string sign indicating number and has 160 of the input of character string needs (10X16) of 10 characters.Code string 906
1-10The figure place that sends 120 have been reduced to.120 these numerals are calculated by following: 906
1, 906
2, 906
4, 906
1, 906
5, 906
7With 906
9The unformatted symbol of these 7 code is (6X17) position, code 906
3In index 2 be 3, code 906
6, 906
8, 906
10In index 8,9,10 be 5.Compare with lzw algorithm, this method needs internal memory still less to come storage code, and needs figure place still less when sending encoded data stream 314.Because symbol can be learned, and the character string that receives repetition or roger, so this method has reached bigger compression effectiveness.
Processing to coded data 314 uses the indicated method of Fig. 8 A-8B to carry out by decoder.
Though the present invention is specifically described in conjunction with preferred embodiment, but those of skill in the art it should be understood that, under the situation that does not break away from this paper claims institute covering scope, can carry out various modifications to form of the present invention and details.
Claims (47)
1. method that input of character string is carried out adaptability compression, this compression method may further comprise the steps:
Receiving symbol character string and each symbol search encoder code library in input of character string, receiving, the width of symbol depends on the type of data in input of character string;
In case finding a symbol is not stored in the encoder code library, learn this symbol by this symbol being stored on the next sequence index position in the encoder code library, and this symbol sent to decoder with the form of code, described code comprises identifier, and the state representation code of identifier comprises the symbol that will be learned;
In case find that symbol is stored in the encoder code library, then the form with code sends a single index, on this single index, the symbol of before having learned is stored in the encoder code library, and the state representation code of identifier comprises this single index; And
In case when finding that compression ratio based on current symbol intervals is less than the compression ratio threshold value, revise the width of symbol and pass on new symbol intervals to decoder.
2. according to the process of claim 1 wherein that the width of symbol is variable.
3. according to the process of claim 1 wherein that code contains the prefix area.
4. according to the method for claim 3, wherein the Status Flag of prefix area the content in the code.
5. according to the method for claim 4, wherein the state table of prefix area understands that this code is a unformatted symbol or the entry index that will be learned.
6. according to the process of claim 1 wherein that the width of index is variable.
7. according to the method for claim 6, wherein the width of index depends on the quantity that is stored in code library string known items.
8. according to the process of claim 1 wherein that search step searches a certain symbol string; Learn that step learns a certain symbol string by a certain symbol string is stored in the code library; Forwarding step sends the form of a certain index with code, and the longest-prefix that is complementary with this symbol string is stored on this index position.
9. device that input of character string is carried out adaptability compression, this device comprises:
Encoder code library, this encoder code library are used for being stored in each symbol that the sign character string receives, and the type of data in input of character string is depended in the selection of symbol intervals;
Search the control logic of code library for each symbol, in case find that symbol is not stored in the code library, then control logic sends to decoder with the form of code with this symbol, and by learning this symbol on the position that this symbol is stored in the next sequence index in the code library, code comprises identifier, the state representation code of identifier comprises the symbol that will be learned, in case detecting symbol is stored in the encoder code library, then the form with coding and decoding sends a single index, on this single index, stored symbol is stored in the encoder code library, the state representation code of identifier comprises this single index, and in case when detecting compression ratio based on the current sign width, then revise symbol intervals and pass on a new symbol intervals to decoder less than the compression ratio threshold value.
10. according to the device of claim 9, wherein in case find to store in the code library this symbol, then control logic form that memory location rustling sound in this symbol code storehouse is regarded it as code sends out.
11. according to the device of claim 9, wherein in case find character string not in the storage code storehouse, control logic sends a certain index in code, is storing the longest-prefix of this character string in this index position.
12. according to the device of claim 10, wherein the width of symbol can change.
13. according to the device of claim 10, wherein code contains the prefix area.
14. according to the device of claim 13, wherein the Status Flag of prefix area the content of code.
15. according to the device of claim 14, wherein the state table of prefix area understands that code is unformatted symbol or certain index that will be learned.
16. according to the device of claim 9, wherein the width of index can change.
17. according to the device of claim 16, wherein the width of index depends on the quantity that is stored in known items in the code library.
18. device according to claim 9, wherein control logic is searched a certain character string at code library, and in code, will send with the index that the appearance of this character string is joined prefix institute memory location, control logic is learned this character string by this character string is stored in the code library.
19. the device that input of character string is carried out the adaptability compression, this device comprises:
Be used for being stored in the encoder code library of each symbol that the sign character string receives, the symbol intervals of selection depends on the type of data in input of character string;
Search the instrument of code library for each symbol;
When finding that symbol is not stored in the encoder code library, with the form of code this symbol is sent to the instrument of decoder, the state representation code of identifier comprises the symbol that will be learned; And
Learn the instrument of this symbol by this symbol being stored in next sequence index in the storehouse; And
When finding that symbol is stored in the encoder code library, be used for sending the instrument of a single index with the coding and decoding form, on this single index position, stored symbol is stored in the encoder code library, and the state representation code of identifier comprises single index; And
When finding that compression ratio based on the current sign width is less than the compression ratio threshold value, the instrument that is used to revise symbol intervals and passes on a new symbol intervals to decoder.
20. according to the device of claim 19, wherein in case find that symbol is stored in the code library, the transmission instrument just is stored in this symbol that the index of position sends in the code library.
21. according to the device of claim 19, wherein the width of symbol can change.
22. according to the device of claim 19, wherein code contains the prefix area.
23. according to the device of claim 22, wherein the Status Flag of prefix area the content of code.
24. according to the device of claim 23, wherein the state table of prefix area understands that code is unformatted symbol or certain index that will be learned.
25. according to the device of claim 19, wherein the width of index can change.
26. according to the device of claim 25, wherein the width of index depends on the quantity that is stored in known items in the code library.
27. the method that input of character string is carried out the adaptability compression, this method may further comprise the steps:
The code library of the symbol sebolic addressing longest prefix match of searching and in the sign character string, receiving, wherein the type of data in input of character string is depended in the selection of symbol intervals;
In case finding the symbol in the sign character string is not stored in the encoder code library, then the form with code sends this symbol, code comprises identifier, it is a unformatted symbol or the entry index that will be learned that the Status Flag of identifier this code, and by learning this symbol on the position that symbol is stored in next continuity index in the code database;
In case find that symbol is stored in the encoder code library, then the form with code sends a single index, and on this single index, stored symbol is stored in the code database, and the state representation code of identifier comprises single index; And
In case when finding that compression ratio based on the current sign width is less than the compression ratio threshold value, then revise symbol intervals and pass on a new symbol intervals to decoder.
28. the method that the code sequence is decompressed, this method may further comprise the steps:
The received code code, this code comprises identifier, and the width of this code depends on the width of symbol, and the type of data in the input of character string is depended in the selection of the width of symbol;
From the state of identifier,, just learn this symbol by the next sequence index that this symbol is stored in the decoder code library in case discovery is stored in the symbol in the code;
In case find compression ratio based on the current sign width less than the compression ratio threshold value, the new symbol intervals that then will pass on from encoder sends;
With this symbol decoding is data.
29., learn that wherein step also comprises according to the method for claim 28:
Carry out adduction by the symbol that will learn in the past with this symbol and learn symbol sebolic addressing; And
Symbol sebolic addressing is stored in the decoder code library on the next sequence index.
30. the method according to claim 28 also comprises: in case discovery is stored in the code library index in the code, just with this index decoding.
31. according to the method for claim 30, wherein the decoded result of index is a certain symbol.
32. according to the method for claim 30, wherein the decoded result of index is a certain symbol sebolic addressing.
33. according to the method for claim 28, wherein the width of symbol is variable.
34. according to the method for claim 28, wherein code contains the prefix area.
35. according to the method for claim 34, wherein the Status Flag of prefix area the content of code.
36. according to the method for claim 35, wherein the state table of prefix area understands that code is unformatted symbol or certain index that will be learned.
37. according to the method for claim 30, wherein the width of index can change.
38. the device that the code sequence is decompressed, this device comprises:
Be used for being stored on next sequence index the code library of the unformatted symbol that code receives, described code comprises identifier, and the state representation code of identifier comprises the symbol that will be learned; And
The received code code, the unformatted symbol of detection of stored in code, this symbol is stored in the logic that also this symbol decoding is become data in the storehouse, in case find that symbol is stored in the encoder code library, then the form with code sends a single index, on this single index, stored symbol is stored in encoder code library and the decoder code library, the state representation code of identifier comprises single index, and in case when finding that compression ratio based on the current sign width is less than the compression ratio threshold value, then send the new symbol intervals that reception and registration is come from encoder.
39. according to the device of claim 38, logic is wherein learned symbol sebolic addressing by the symbol that will learn in the past with being stored in that unformatted symbol in the code adds altogether and symbol sebolic addressing is stored in the code library next sequence index.
40. the device according to claim 38 also comprises: in case discovery is stored in the code library index in the code, just with this index decoding.
41. according to the device of claim 40, wherein the decoded result of index is a certain symbol.
42. according to the device of claim 40, wherein the decoded result of index is a certain symbol sebolic addressing.
43. according to the device of claim 38, wherein the width of symbol is variable.
44. according to the device of claim 38, wherein code contains the prefix area.
45. according to the device of claim 44, wherein the Status Flag of prefix area the content of code.
46. according to the device of claim 45, wherein the state table of prefix area understands that code is unformatted symbol or certain index that will be learned.
47. according to the device of claim 38, wherein the width of index can change.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/782,614 US6606040B2 (en) | 2001-02-13 | 2001-02-13 | Method and apparatus for adaptive data compression |
US09/782,614 | 2001-02-13 | ||
PCT/CA2002/000143 WO2002065646A2 (en) | 2001-02-13 | 2002-02-11 | Method and apparatus for adaptive data compression |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN2010101438424A Division CN101800556B (en) | 2001-02-13 | 2002-02-11 | Method and apparatus for adaptive data compression |
Publications (2)
Publication Number | Publication Date |
---|---|
CN1593011A CN1593011A (en) | 2005-03-09 |
CN1593011B true CN1593011B (en) | 2010-05-12 |
Family
ID=25126614
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN02806626XA Expired - Lifetime CN1593011B (en) | 2001-02-13 | 2002-02-11 | Method and apparatus for adaptive data compression |
CN2010101438424A Expired - Lifetime CN101800556B (en) | 2001-02-13 | 2002-02-11 | Method and apparatus for adaptive data compression |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN2010101438424A Expired - Lifetime CN101800556B (en) | 2001-02-13 | 2002-02-11 | Method and apparatus for adaptive data compression |
Country Status (7)
Country | Link |
---|---|
US (5) | US6606040B2 (en) |
EP (1) | EP1397866B1 (en) |
JP (3) | JP2004526357A (en) |
CN (2) | CN1593011B (en) |
CA (1) | CA2438309C (en) |
DK (1) | DK1397866T3 (en) |
WO (1) | WO2002065646A2 (en) |
Families Citing this family (61)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6624761B2 (en) * | 1998-12-11 | 2003-09-23 | Realtime Data, Llc | Content independent data compression method and system |
US6604158B1 (en) | 1999-03-11 | 2003-08-05 | Realtime Data, Llc | System and methods for accelerated data storage and retrieval |
US6601104B1 (en) | 1999-03-11 | 2003-07-29 | Realtime Data Llc | System and methods for accelerated data storage and retrieval |
US20030191876A1 (en) * | 2000-02-03 | 2003-10-09 | Fallon James J. | Data storewidth accelerator |
US20010047473A1 (en) | 2000-02-03 | 2001-11-29 | Realtime Data, Llc | Systems and methods for computer initialization |
DE10021286B4 (en) * | 2000-05-02 | 2005-03-10 | Kara Can | Method and device for compression and / or decompression of data |
DE10037004B4 (en) * | 2000-07-29 | 2004-01-15 | Sms Demag Ag | Roll stand for belt edge-oriented shifting of the intermediate rolls in a 6-roll stand |
US9143546B2 (en) | 2000-10-03 | 2015-09-22 | Realtime Data Llc | System and method for data feed acceleration and encryption |
US8692695B2 (en) | 2000-10-03 | 2014-04-08 | Realtime Data, Llc | Methods for encoding and decoding data |
US7417568B2 (en) * | 2000-10-03 | 2008-08-26 | Realtime Data Llc | System and method for data feed acceleration and encryption |
US6606040B2 (en) * | 2001-02-13 | 2003-08-12 | Mosaid Technologies, Inc. | Method and apparatus for adaptive data compression |
US7386046B2 (en) | 2001-02-13 | 2008-06-10 | Realtime Data Llc | Bandwidth sensitive data compression and decompression |
US20030088537A1 (en) * | 2001-08-08 | 2003-05-08 | Nec Eluminant Technologies, Inc. | High speed data compression and decompression apparatus and method |
US7301961B1 (en) | 2001-12-27 | 2007-11-27 | Cypress Semiconductor Corportion | Method and apparatus for configuring signal lines according to idle codes |
US7293284B1 (en) * | 2002-12-31 | 2007-11-06 | Colligo Networks, Inc. | Codeword-enhanced peer-to-peer authentication |
US7451267B1 (en) | 2003-09-23 | 2008-11-11 | Netlogic Microsystems, Inc. | Method and apparatus for learn and related operations in network search engine |
US8266373B1 (en) * | 2003-12-23 | 2012-09-11 | Netlogic Microsystems, Inc. | Content addressable memory (CAM) device and method for updating data by multiplexing between key register and mask value input |
US7577784B1 (en) | 2003-12-24 | 2009-08-18 | Netlogic Microsystems, Inc. | Full-ternary content addressable memory (CAM) configurable for pseudo-ternary operation |
US7522516B1 (en) * | 2004-03-30 | 2009-04-21 | Extreme Networks, Inc. | Exception handling system for packet processing system |
CN101432981A (en) * | 2004-10-27 | 2009-05-13 | Eg技术有限公司 | Optimal rate allocation for a group of channels |
US7053803B1 (en) * | 2005-01-31 | 2006-05-30 | Hewlett Packard Development Company, L.P. | Data compression |
GB0511797D0 (en) * | 2005-06-10 | 2005-07-20 | Isis Innovation | Computer grid |
US7167115B1 (en) | 2005-08-26 | 2007-01-23 | American Megatrends, Inc. | Method, apparatus, and computer-readable medium for data compression and decompression utilizing multiple dictionaries |
US20070104212A1 (en) * | 2005-11-10 | 2007-05-10 | Michael Gutman | Cache-based compression of structured network traffic |
US20080017227A1 (en) * | 2006-07-19 | 2008-01-24 | Ward Barry D | Walking aid apparatus |
US7667624B2 (en) * | 2007-01-22 | 2010-02-23 | General Electric Company | Methods and apparatus for clinical data compression |
US7439887B2 (en) * | 2007-02-13 | 2008-10-21 | Seiko Epson Corporation | Method and apparatus for GIF decompression using fixed-size codeword table |
US20110010465A1 (en) * | 2007-07-18 | 2011-01-13 | Andrea G Forte | Methods and Systems for Providing Template Based Compression |
US9109928B2 (en) * | 2007-08-16 | 2015-08-18 | International Business Machines Corporation | Methods and apparatus for efficient and adaptive transmission of data in data collection networks |
US8078454B2 (en) * | 2007-09-28 | 2011-12-13 | Microsoft Corporation | Two-pass hash extraction of text strings |
US7953881B1 (en) * | 2008-06-12 | 2011-05-31 | Juniper Networks, Inc. | Network characteristic-based compression of network traffic |
US7750826B2 (en) * | 2008-11-26 | 2010-07-06 | Red Hat, Inc. | Data structure management for lossless data compression |
US7764202B2 (en) * | 2008-11-26 | 2010-07-27 | Red Hat, Inc. | Lossless data compression with separated index values and literal values in output stream |
CN101520771A (en) * | 2009-03-27 | 2009-09-02 | 广东国笔科技股份有限公司 | Method and system for code compression and decoding for word library |
US9160611B2 (en) * | 2009-04-22 | 2015-10-13 | Webroot Inc. | System and method for performing longest common prefix strings searches |
US8355585B2 (en) * | 2009-05-12 | 2013-01-15 | Red Hat Israel, Ltd. | Data compression of images using a shared dictionary |
US7868789B1 (en) * | 2009-06-28 | 2011-01-11 | Sap Ag | Dictionary-based order-preserving string compression for main memory column stores |
US9298722B2 (en) * | 2009-07-16 | 2016-03-29 | Novell, Inc. | Optimal sequential (de)compression of digital data |
US8159373B2 (en) | 2009-07-28 | 2012-04-17 | Ecole Polytechnique Federale De Lausanne (Epfl) | Encoding and decoding information |
US8228213B2 (en) * | 2009-09-23 | 2012-07-24 | International Business Machines Corporation | Data compression system and associated methods |
KR200454414Y1 (en) * | 2009-10-07 | 2011-07-01 | 주식회사 대웅제약 | Medicine syringe |
JP5523144B2 (en) * | 2010-02-25 | 2014-06-18 | キヤノン株式会社 | Information processing apparatus, control method thereof, program, and storage medium |
US8782734B2 (en) * | 2010-03-10 | 2014-07-15 | Novell, Inc. | Semantic controls on data storage and access |
US8832103B2 (en) | 2010-04-13 | 2014-09-09 | Novell, Inc. | Relevancy filter for new data based on underlying files |
CN102122960B (en) * | 2011-01-18 | 2013-11-06 | 西安理工大学 | Multi-character combination lossless data compression method for binary data |
US8605732B2 (en) | 2011-02-15 | 2013-12-10 | Extreme Networks, Inc. | Method of providing virtual router functionality |
US10140621B2 (en) | 2012-09-20 | 2018-11-27 | Ebay Inc. | Determining and using brand information in electronic commerce |
US8786471B1 (en) | 2013-03-15 | 2014-07-22 | Oracle International Corporation | Lossless data compression with variable width codes |
US9753983B2 (en) | 2013-09-19 | 2017-09-05 | International Business Machines Corporation | Data access using decompression maps |
US9385748B2 (en) * | 2014-10-21 | 2016-07-05 | Huawei Technologies Co., Ltd. | Parallel dictionary-based compression encoder |
US9780805B2 (en) * | 2014-10-22 | 2017-10-03 | International Business Machines Corporation | Predicate application through partial compression dictionary match |
JP6531398B2 (en) * | 2015-01-19 | 2019-06-19 | 富士通株式会社 | program |
WO2016131554A1 (en) | 2015-02-17 | 2016-08-25 | Parstream Gmbh | Method and apparatus for adaptive data compression |
AU2015398151B2 (en) * | 2015-06-10 | 2019-07-18 | Fujitsu Limited | Information processing device, information processing method, and information processing program |
US9496894B1 (en) * | 2015-10-21 | 2016-11-15 | GE Lighting Solutions, LLC | System and method for data compression over a communication network |
JP6735469B2 (en) | 2016-03-22 | 2020-08-05 | パナソニックＩｐマネジメント株式会社 | Log collection device, surveillance camera, and log collection method |
US9971800B2 (en) * | 2016-04-12 | 2018-05-15 | Cisco Technology, Inc. | Compressing indices in a video stream |
US10432217B2 (en) | 2016-06-28 | 2019-10-01 | International Business Machines Corporation | Page filtering via compression dictionary filtering |
CN108768403B (en) * | 2018-05-30 | 2021-08-20 | 中国人民解放军战略支援部队信息工程大学 | LZW-based lossless data compression and decompression method, LZW encoder and decoder |
JP6614735B1 (en) * | 2019-05-07 | 2019-12-04 | 国立大学法人 筑波大学 | Data compression and decompression method, data compression method, data compression device, data compression program, data decompression method, data decompression device, data decompression program |
CN115630065B (en) * | 2022-10-18 | 2023-08-22 | 天津神舟通用数据技术有限公司 | Storage and query method based on multi-compression mode sub-partition table |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1167951A (en) * | 1996-01-31 | 1997-12-17 | 株式会社日立制作所 | Method of and apparatus for compressing and expanding data and data processing apparatus and network system using same |
Family Cites Families (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4558302A (en) * | 1983-06-20 | 1985-12-10 | Sperry Corporation | High speed data compression and decompression apparatus and method |
JP2823918B2 (en) * | 1990-01-12 | 1998-11-11 | 富士通株式会社 | Data compression method |
WO1991010999A1 (en) * | 1990-01-19 | 1991-07-25 | Hewlett-Packard Limited | Compressed data access |
US5049881A (en) * | 1990-06-18 | 1991-09-17 | Intersecting Concepts, Inc. | Apparatus and method for very high data rate-compression incorporating lossless data compression and expansion utilizing a hashing technique |
US5373290A (en) * | 1991-09-25 | 1994-12-13 | Hewlett-Packard Corporation | Apparatus and method for managing multiple dictionaries in content addressable memory based data compression |
US5469161A (en) | 1992-08-13 | 1995-11-21 | International Business Machines Corporation | Algorithm for the implementation of Ziv-Lempel data compression using content addressable memory |
JPH06161705A (en) * | 1992-11-19 | 1994-06-10 | Fujitsu Ltd | Data encoding system and data decoding system |
JP3350118B2 (en) * | 1992-11-30 | 2002-11-25 | 富士通株式会社 | Data encoding method and data restoration method |
US5455576A (en) * | 1992-12-23 | 1995-10-03 | Hewlett Packard Corporation | Apparatus and methods for Lempel Ziv data compression with improved management of multiple dictionaries in content addressable memory |
US5389922A (en) * | 1993-04-13 | 1995-02-14 | Hewlett-Packard Company | Compression using small dictionaries with applications to network packets |
US5771010A (en) | 1995-03-22 | 1998-06-23 | Ibm Corporation | Apparatus for compressing data using a Lempel-Ziv-type algorithm |
JP3514027B2 (en) * | 1996-02-28 | 2004-03-31 | 富士ゼロックス株式会社 | Recording device, recording system, image transfer system |
US5703581A (en) * | 1996-06-14 | 1997-12-30 | Lucent Technologies Inc. | Method and apparatus for data compression and decompression |
WO2001001667A2 (en) * | 1999-06-25 | 2001-01-04 | Infineon Technologies Ag | Codec circuit and method for increasing the data transmission rate in a modem transmission |
US6606040B2 (en) * | 2001-02-13 | 2003-08-12 | Mosaid Technologies, Inc. | Method and apparatus for adaptive data compression |
-
2001
- 2001-02-13 US US09/782,614 patent/US6606040B2/en not_active Expired - Lifetime
-
2002
- 2002-02-11 CN CN02806626XA patent/CN1593011B/en not_active Expired - Lifetime
- 2002-02-11 DK DK02700074T patent/DK1397866T3/en active
- 2002-02-11 WO PCT/CA2002/000143 patent/WO2002065646A2/en active Application Filing
- 2002-02-11 JP JP2002564842A patent/JP2004526357A/en not_active Withdrawn
- 2002-02-11 CA CA2438309A patent/CA2438309C/en not_active Expired - Lifetime
- 2002-02-11 CN CN2010101438424A patent/CN101800556B/en not_active Expired - Lifetime
- 2002-02-11 EP EP02700074.4A patent/EP1397866B1/en not_active Expired - Lifetime
-
2003
- 2003-04-18 US US10/420,018 patent/US6700512B2/en not_active Expired - Lifetime
-
2004
- 2004-02-27 US US10/788,003 patent/US6879271B2/en not_active Expired - Lifetime
-
2005
- 2005-03-09 US US11/077,183 patent/US20060071822A1/en not_active Abandoned
-
2006
- 2006-07-19 US US11/488,965 patent/US20070030179A1/en not_active Abandoned
-
2007
- 2007-10-12 JP JP2007266759A patent/JP2008092582A/en active Pending
-
2011
- 2011-11-18 JP JP2011252669A patent/JP2012100275A/en active Pending
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1167951A (en) * | 1996-01-31 | 1997-12-17 | 株式会社日立制作所 | Method of and apparatus for compressing and expanding data and data processing apparatus and network system using same |
Also Published As
Publication number | Publication date |
---|---|
WO2002065646A2 (en) | 2002-08-22 |
CN101800556B (en) | 2013-11-13 |
EP1397866B1 (en) | 2019-08-28 |
US20070030179A1 (en) | 2007-02-08 |
EP1397866A2 (en) | 2004-03-17 |
WO2002065646A3 (en) | 2003-03-13 |
CN1593011A (en) | 2005-03-09 |
CA2438309A1 (en) | 2002-08-22 |
US20050030208A1 (en) | 2005-02-10 |
CA2438309C (en) | 2011-01-25 |
US20060071822A1 (en) | 2006-04-06 |
JP2008092582A (en) | 2008-04-17 |
US20020109615A1 (en) | 2002-08-15 |
JP2012100275A (en) | 2012-05-24 |
US6606040B2 (en) | 2003-08-12 |
CN101800556A (en) | 2010-08-11 |
DK1397866T3 (en) | 2019-12-02 |
US20030206125A1 (en) | 2003-11-06 |
JP2004526357A (en) | 2004-08-26 |
US6700512B2 (en) | 2004-03-02 |
US6879271B2 (en) | 2005-04-12 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN1593011B (en) | Method and apparatus for adaptive data compression | |
US5907637A (en) | Method and apparatus for compressing and decompressing data | |
US4814746A (en) | Data compression method | |
JP2022526098A (en) | Methods and devices for handling equal probability symbols in entropy coding | |
EP1147612B1 (en) | Code book construction for variable to variable length entropy encoding | |
US5424732A (en) | Transmission compatibility using custom compression method and hardware | |
EP0127815B1 (en) | Data compression method | |
US7652596B1 (en) | Variable-length compression technique for encoding or decoding a sequence of integers | |
US7609000B1 (en) | Variable-length compression technique for encoding or decoding a sequence of integers | |
KR20030082586A (en) | Font compression and retrieval | |
JPH10164374A (en) | Pattern coding system and decoding system and coder and decoder employing the system | |
WO2018226221A1 (en) | Context-dependent shared dictionaries | |
Shanmugasundaram et al. | Text preprocessing using enhanced intelligent dictionary based encoding (EIDBE) | |
KR100686354B1 (en) | Huffman decoding method and device for using variable length tree | |
Brisaboa et al. | Dv2v: A Dynamic Variable-to-Variable Compressor | |
Pasumarthi et al. | EHTC: An Enhanced Huffman Tree Coding Algorithm and its FPGA Implementation | |
JP2004013680A (en) | Character code compression/decompression device and method | |
Subathra et al. | Performance analysis of dictionary based data compression algorithms for high speed networks | |
JP3001519B1 (en) | Data compression method and data compression method | |
JP3425142B2 (en) | Data compression method, data decompression method, data compression device, and data decompression device | |
Raj et al. | Framework of adaptive lossless compression with block wise data | |
JP2002232298A (en) | Method and device for compressing and restoring data | |
Edfors et al. | Analysis of a fast algorithm for look-up table based variable-length decoding | |
BENUSI et al. | Huffman encoding for data content in the Albanian language used in image Steganography. | |
Karthick et al. | COMPRESSION OF FPGA BIT STREAMS USING EFFECTIVE RUN LENGTH ENCODING TECHIQUES AND ITS PERFORMANCE ESTIMATION |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
C14 | Grant of patent or utility model | ||
GR01 | Patent grant | ||
CP01 | Change in the name or title of a patent holder | ||
CP01 | Change in the name or title of a patent holder |
Address after: California, USAPatentee after: Google Inc.Address before: California, USAPatentee before: Google Inc. |
|
TR01 | Transfer of patent right | ||
TR01 | Transfer of patent right |
Effective date of registration: 20180205Address after: California, USAPatentee after: GOOGLE Inc.Address before: Ontario, CanadaPatentee before: MOSAID Technologies, Inc. |
|
CX01 | Expiry of patent term | ||
CX01 | Expiry of patent term |
Granted publication date: 20100512 |