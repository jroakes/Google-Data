US9026935B1 - Application user interface with an interactive overlay - Google Patents
Application user interface with an interactive overlay Download PDFInfo
- Publication number
- US9026935B1 US9026935B1 US13/094,785 US201113094785A US9026935B1 US 9026935 B1 US9026935 B1 US 9026935B1 US 201113094785 A US201113094785 A US 201113094785A US 9026935 B1 US9026935 B1 US 9026935B1
- Authority
- US
- United States
- Prior art keywords
- conversation
- window
- content
- windows
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/04—Real-time or near real-time messaging, e.g. instant messaging [IM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/04817—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance using icons
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
- G06Q10/107—Computer-aided management of electronic mailing [e-mailing]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/04—Real-time or near real-time messaging, e.g. instant messaging [IM]
- H04L51/043—Real-time or near real-time messaging, e.g. instant messaging [IM] using or handling presence information
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/21—Monitoring or handling of messages
- H04L51/216—Handling conversation history, e.g. grouping of messages in sessions or threads
Definitions
- the disclosed embodiments relate generally to graphical user interfaces with multiple windows. More particularly, the disclosed embodiments relate to methods, systems, and user interfaces for displaying multi-window user interfaces that include an interactive overlay.
- a variety of user interfaces having multiple windows are well known.
- many conventional multi-window user interfaces are not user-configurable.
- those conventional multi-window user interfaces that are user-configurable typically require frequent direct manipulation of windows to effectively configure the user interface. Consequently such conventional user interfaces either make inefficient use of screen space by displaying windows that are not needed by the user or cause the user to be less efficient by requiring the user to spend substantial amounts of time reconfiguring the windows in the user interface.
- a method is performed at a client system having one or more processors and memory storing one or more programs for execution by the one or more processors, the method including: displaying a user interface with a display region and a minimized window region. A plurality of windows are displayed in the display region, the plurality of windows including a first window and a second window. The method further includes, detecting a first input that corresponds to a request to change a state of one or more of the windows; and in response to detecting the first input, ceasing to display the first window in the display region, and displaying a representation of the first window in the minimized window region.
- the method also includes, after ceasing to display the first window, detecting a second input that corresponds to a request to view content of the first window; and in response to detecting the second input, displaying an interactive overlay including content of the first window.
- the interactive overlay is displayed so as to partially overlap the display region.
- a client system includes one or more processors, memory, and one or more programs; the one or more programs are stored in the memory and configured to be executed by the one or more processors and the one or more programs include instructions for performing the operations of the method described above.
- a non-transitory computer readable storage medium has stored therein instructions which when executed by one or more processors, cause a client system to perform the operations of the methods described above.
- a method, system and computer readable storage medium is provided with more efficient methods for displaying a multi-window user interface to users.
- FIG. 1 is a block diagram illustrating an exemplary distributed computer system according to certain embodiments of the invention.
- FIG. 2 is a block diagram of a distributed system including a conversation server and clients coupled by one or more communication networks, according to certain embodiments of the invention.
- FIGS. 3A-3C are block diagrams of data structures for a conversation database, a participant list and a conversation log, respectively, according to certain embodiments of the invention.
- FIG. 4 is a block diagram illustrating a data structure for a user database, according to certain embodiments of the invention.
- FIGS. 5A-5E are flowcharts representing a method for hosting conversations at a server, according to certain embodiments of the invention.
- FIG. 6 is a block diagram of a plurality of linked conversation server systems, with mechanisms for obtaining and distributing user online presence information, according to certain embodiments of the invention.
- FIG. 7 is a block diagram of a conversation server for a hosted conversation system, according to certain embodiments of the invention.
- FIG. 8 is a block diagram of a client having a user who participates in one or more conversations in a hosted conversation system, according to certain embodiments of the invention.
- FIGS. 9A-9B illustrate a series of windows showing successive edits to a conversation by a plurality of participants of the conversation, and playback of those edits.
- FIG. 10 illustrates a series of windows showing solo and team-based drafting of a conversation.
- FIGS. 11A-B are flowcharts representing a method for editing, playback and drafting of conversations hosted at a server, according to certain embodiments of the invention.
- FIG. 12 illustrates a process diagram showing concurrency control between a plurality of potentially conflicting edits received from a plurality of participants.
- FIG. 13 illustrates two sequences of separate edit operations, both performed on the same content unit, where one sequence is received from a first participant and a second sequence is received from a second participant in a conversation, and transforms thereupon.
- FIG. 14 illustrates first and second sequences of edit operations, applied to a content unit of an electronic conversation, received from a first participant and a second participant, respectively, and transformed sequences of merged edit operations corresponding to the received first and second sequences of edit operations.
- FIG. 15 is a flowchart representing a method of concurrency control at a server, and at a client, when a plurality of participants in a conversation make potentially conflicting edits to the conversation.
- FIG. 16 is a block diagram of a distributed client-server computing system.
- FIGS. 17A-17M illustrate exemplary user interfaces for displaying a multi-window user interface with an interactive overlay in accordance with some embodiments.
- FIGS. 18A-18E include a flow chart illustrating a method of displaying a multi-window user interface with an interactive overlay in accordance with some embodiments.
- FIG. 1 is block diagram illustrating an exemplary distributed computer system 100 according to certain embodiments of the invention.
- Computer system 100 includes a plurality of clients 110 .
- Users of the clients 110 are participants 112 in conversations hosted by a set of conversation servers 130 (sometimes called a conversation server system).
- the clients 100 can be any of a number of computing devices (e.g., Internet kiosk, personal digital assistant, cell phone, gaming device, desktop computer, laptop computer, handheld computer, tablet computer, or combinations thereof) used to enable the activities described below.
- Each client 110 is coupled to a network 120 , which can be any of a number of networks (e.g. Internet, intranet, local area network, wide area network, wireless network, wired network, optical network, or a combination of such networks). More generally, the clients 100 and conversation servers 130 are coupled to each other via one or more communication networks 120 .
- a respective client 110 -B executes a client application 114 that facilitates access from the client 110 to a respective hosted conversation server 130 .
- the client application 114 may include a graphical user interface.
- the client application may be a web browser or other browser application, such as Firefox (trademark of Mozilla Foundation), Internet Explorer (trademark of Microsoft Corporation), Safari (trademark of Apple Inc.), or Chrome (trademark of Google Inc.).
- a system 100 may have a single conversation server 130
- the system 100 may have multiple conversation servers 130 .
- multiple conversation servers 130 -A and 130 -B may be hosted by different service providers, such as providers 116 -A and 116 -B respectively.
- the providers are internet service providers (ISPs) providing a conversation service. Alternately, some or all of the providers may be dedicated conversation providers.
- the conversation servers 130 may be coupled together directly, or by a local area network (LAN), or via the network 120 .
- LAN local area network
- the conversation server(s) 130 host conversations between participants 112 . More specifically, each conversation server 130 hosts conversations on behalf of a set of users. At least some of those users are subscribers of the hosted conversation system 100 and thus have user accounts. As described in more detail below, some of the conversation participants need not be subscribers of the hosted conversation system.
- the updates are sent to all the conversation servers 130 that host conversations for the participants in the conversation. Those host servers, in turn, send the updates to the clients 110 being used participants in the conversation.
- the conversation updates may be sent relatively instantaneously (e.g., within a second or two) to the clients 110 of active participants in the conversation.
- clients 110 of passive participants 112 who are online and logged into the conversation system 100 , but who are not currently viewing the conversation or are not current participating in the conversation receive information that the conversation has been updated, without receiving the updates to the conversation.
- the participant “opens” the conversation selects it for viewing
- the updated conversation is downloaded to the participant's client from conversation server 130 that hosts conversations for that user.
- FIG. 2 is a block diagram of system 200 illustrating exemplary embodiments of a conversation server 130 and client systems 210 and 220 .
- System 200 includes a communications network 120 , as described above, coupled between a conversation server 130 and a plurality of the clients, including client 210 .
- Client 210 corresponds to a respective client 110 of FIG. 1 , and is sometime herein called a “participant client” because the user of client 110 / 210 is a participant in one or more conversations hosted by the conversation server 130 .
- System 200 includes at least one participant client 210 .
- Participant client 210 optionally includes a browser 212 , such as a web browser, or other client application to facilitate participant interaction with a respective conversation server 130 .
- the browser 212 typically includes (or controls) a virtual machine (e.g., a Java virtual machine) for executing software embedded in web pages and other documents rendered by the browser 212 .
- the browser 212 executes a conversation application 214 that is embedded, at least in part, in a web page.
- the web page (which may be called a “hosted conversation web page”) is downloaded from a server, such as a conversation server 130 , to the client 210 and includes executable instructions that are executed by the virtual machine of the browser 212 in the client 210 .
- the browser 212 and conversation application 214 together form the client application 114 of FIG. 1 .
- the conversation application 214 facilitates participant interaction with the conversation server system 130 .
- conversation application 214 is a plug-in or extension of the browser application 212 .
- Non-subscriber clients 220 enable users who do not have accounts in the conversation system to participate, in at least a limited manner, in hosted conversations. Participation in hosted conversations may be limited in a number of ways, for example by allowing the user of a non-subscriber client to read the content of a conversation, and allowing the user to contribute new content, but not allowing the user of the non-subscriber client to use other features such as editing content already in the conversation, responding to specific portions of content previously contributed by other participants, and playing back a conversation.
- Non-subscriber clients 220 access the conversation server system 130 in a manner that is distinct from the manner used by clients 210 whose users are subscribers of the hosted conversation system.
- An example of a non-subscriber client 220 is a weblog (“blog”) server 226 , having a weblog client 228 .
- a hosted conversation can include a weblog 228 (also called a weblog client) as a participant in the conversation, in which case content of the hosted conversation is published in the weblog. The published conversation is visible on the weblog 228 , which is hosted by the weblog server 226 .
- a weblog 228 when a weblog 228 is added as a participant to a conversation, content of the conversation is transmitted to (also called “posted to”) the weblog 228 by the conversation server 130 that hosts the conversation. After the weblog 228 is added as a participant, new content added to the conversation is also transmitted to the weblog 228 by the conversation server 130 that hosts the conversation.
- a user e.g., a user of another client 110 , FIG. 1
- views content of the weblog 228 e.g., by visiting a URL associated with the weblog 228 , hosted on the weblog server 226
- Non-subscriber client 220 is an email server 224 , having email clients 222 .
- Content from host conversations can be sent to one or more email clients 222 of one or more email servers 224 .
- content of the conversation is transmitted to the email client 222 by the conversation server 130 that hosts the conversation.
- Weblogs and email servers are also examples of “automated clients.”
- Other examples of automated clients include services, such as archival services, translation services, spell-check and grammar-check services, that may be invoked to provide services to other participants of a hosted conversation.
- email clients 222 and weblog clients 228 can read but cannot provide content to a hosted conversation, and thus are just observers.
- authoring capabilities the ability to provide content to a conversation
- a conversation server 130 includes a front-end or conversation engine 246 for managing conversations and communications with clients, and one or more auxiliary services (modules, applications or servers) 250 for managing services related to conversations.
- auxiliary services 250 include spell checking 252 , language translation or localization 256 , and managing attachments 258 to conversations.
- Conversation server 130 also includes online presence services 248 , enabling users to know the online status of other users (e.g., other subscribers of the hosted conversation system), as described in detail below with reference to FIG. 6 .
- Server 130 includes a user database 270 , described in detail below with reference to FIG. 4 .
- the front-end or conversation engine 246 utilizes (or, alternately includes) an update, access and search/query engine 260 to provide participant access to conversations, and to provide search functions in conversations.
- one or more conversation indexes 264 are inverse indexes, mapping words or terms in conversations to the conversations in which they occur.
- the one or more conversation indexes 264 are used to find conversations in a hosted conversation database 262 that match specified search queries. As content is added to conversations in the conversation database 262 the one or more conversation indexes 264 are updated with that content so as to make the added content accessible by the execution of search queries.
- the conversation database 262 is described in more detail below with reference to FIG. 3 .
- conversation server 130 includes an SMTP gateway 242 for facilitating email communication with one or more email servers 224 .
- a subscriber is a user for whom a conversation server 130 (e.g., any conversation server 130 in a set of conversation servers 130 that provide conversation services) maintains a user record or profile (see 402 , FIG. 4 , as described below).
- a conversation server 130 e.g., any conversation server 130 in a set of conversation servers 130 that provide conversation services
- maintains a user record or profile see 402 , FIG. 4 , as described below.
- the conversation server 130 maintains for a respective user/subscriber a list 414 ( FIG. 4 ) of conversations in which the user/subscriber is a participant.
- the conversation server 130 updates the status (conversation state 438 - 1 , FIG. 4 ) of each such conversation in the user's conversation list 414 when the state of the respective conversation changes.
- the conversation server 130 sends to the user a requested list of conversations (typically comprising a subset of the complete set of conversations in which the user is a participant), the list includes status information for the listed conversations.
- the status information in the returned list is generally a subset of the conversation state 438 , as only a portion of the conversation state (e.g., whether there is any content in the conversation that has not yet been viewed by the user) is needed when displaying the list of conversations.
- FIG. 3A is a block diagram illustrating exemplary data structures for conversation database 262 . While most conversations have a single set of participants that share all the content of the conversation, some conversations, herein called waves or conversation containers, have a more complicated structure. In particular, a first conversation can result in any number of “side conversations” by various subsets of the participants in the first conversation, and can even include additional participants. For example, a conversation container or wave can be used by two or more teams of participants (e.g., Team A and Team B) to negotiate an agreement, or to co-edit a document or presentation or the like.
- teams of participants e.g., Team A and Team B
- an initial conversation (sometimes called the primary conversation or master conversation) is started among all the participants, and then “private conversations” are spawned off the initial conversation to enable participants in each of the teams to communicate privately with other participants of the team, while still having access to all of the content of the initial conversation.
- each private conversation has a set of participants that excludes at least one participant in the primary conversation.
- a private conversation can include one or more additional participants (e.g., a consultant) who is not a participant in the primary conversation.
- Each participant only has access to the content of the conversations in which they are a participant.
- the participants on Team A have access to the content of both the Team A private conversation and the primary conversation
- the participants on Team B have access to the content of both the Team B private conversation and the primary conversation.
- FIG. 3A is a block diagram of exemplary data structures that support both simple conversations (i.e., single conversations with no related private conversations) as well as waves or conversation containers that include multiple conversations (sometimes called a primary conversation and one or more sub-conversations).
- Conversation database 262 includes a plurality of wave records 302 - 1 to 302 -N, each containing the data for a wave or conversation container. When a respective wave has only one conversation, the only information in the corresponding wave record 302 is for the single conversation, as represented by one conversation record 310 . More generally, a wave record 302 includes one or more conversation records 310 - 1 to 310 -C. Each conversation record 310 contains data for a respective conversation, including:
- Conversation metadata 322 is metadata for the conversation corresponding to the conversation record 310 and identified by conversation identifier 310 .
- the conversation metadata 322 includes a conversation creation timestamp 331 (indicating the date and time the conversation was created), and a list of participants 332 (described in more detail in FIG. 3B ) for the conversation.
- the metadata 322 may optionally include other metadata, such as metadata identifying tags 325 (e.g., system and/or user assigned labels that are “public,” and thus available to all participants in the conversation) associated with the conversation, and other characteristics of the respective conversation associated with the conversation record 310 .
- the participant list 332 for the primary conversation of the wave will typically include all the participants in all the conversations in the wave.
- private conversations i.e., conversations other than the primary conversation
- each of the private conversations in a wave will typically have a participant list 332 does not include at least one of the participants in the primary conversation of the same wave.
- a parent ID/insertion position 333 is provided for each of the private conversations, but not for the primary conversation.
- the parent ID/insertion position 333 identifies the parent of the private conversation, as well as the position in the identified parent conversation at which content of the private conversation should be inserted when viewed by participants of the private conversation.
- the parent of a private conversation is the primary conversation of the wave, but in some instances the parent of a private conversation can be another parent conversation that is higher up in the hierarchy (or graph) of conversations in the wave.
- the parent of a private conversation views the wave that includes the private conversation, the content of both the parent conversation and the private conversation will be seen (assuming the participant is also a participant of the parent conversation).
- the user will see only the content of the conversation (or conversations) in the wave for which they are a participant.
- the conversation log 324 ( FIG. 3C ) records all changes to the conversation, including changes to the content of the conversation as well as to the set of participants and other characteristics of the conversation.
- the conversation log 324 is accessed when participants ask to see the state of the conversation, or a content unit of the conversation, at one or more points in time.
- the conversation log 324 can be used to reconstruct or review the sequence of edits made to a content unit of the conversation. This is sometimes called “playing back” or “playback” of the conversation. Playback of a conversation can be performed in a variety of ways, including time forward or time backward, and showing updates to just a portion of the conversation or to the entire conversation.
- a respective content contribution 326 (also called a content unit, or “blip”) in a conversation can be a message, much like an email message or instant message.
- Other content contributions 326 in a conversation can be documents (e.g., a report, meeting agenda, etc.), pictures, presentations, audio files, video files, or virtually any other type of electronic document or content.
- the data in a conversation record 310 for each content contribution 326 includes:
- content unit metadata 346 for a content unit 326 includes:
- the metadata 346 for a content unit 326 also includes one or more of the following:
- the metadata 346 for a content unit 326 includes at least one value (e.g., position 350 or parent identifier 354 ) that identifies or represents the position of the content unit 326 in the conversation.
- a conversation index 264 (see FIG. 2 ) enables fast access to conversations in the conversation database 262 through searches of the index.
- FIG. 3B is a block diagram illustrating data structures for the participant list 332 in the conversation metadata 322 ( FIG. 3A ) of a conversation record 310 .
- a participant list 332 includes a plurality of participant records 362 , one for each participant in a respective conversation.
- each participant record 362 includes the following information, or a subset of the following information:
- Another optional flag 376 in the per-user conversation state 373 for a respective participant is a reminder flag.
- the per-user conversation state 373 also includes a corresponding timestamp indicating the date and time (or pair of timestamps to indicate a range of dates/times) at which to reminder the participant to pay attention to the conversation or a portion thereof, optionally a user ID identifying the user who initiated the reminder (in some embodiments, reminders can be sent by a user not only to themselves, but to other participant(s) in the conversation), and optionally a content range indicator for specifying a portion of the conversation that is the subject of the reminder.
- a ping flag is included in the per-user conversation state 373 when another participant has sent a ping (which is a form of notification, or instant message) to the participant (typically an online participant), or when the participant has sent a ping to another participant.
- the ping flag when present, indicates to the client application that a ping notification (e.g., a pop-up box) is to be displayed.
- cursor position (see 379 , FIG. 3B ) of each participant who is actively editing a content unit or entering new text in a conversation is published to and visible to other participants of the conversation, unless a respective participant has elected to suppress publication of their cursor position, in which case that aspect of the participant's conversation state 373 is not considered to be private to the participant.
- cursor position information for each of the active participants is transmitted to the clients of the active participants (via their hosting conversation servers).
- a plurality of cursor positions are concurrently displayed when the cursor positions are sufficiently close to each other to enable concurrent display.
- the server 140 maintains for each respective participant 362 a conversation state 373 of the respective conversation in regard to the respective participant.
- the server 130 provides to the respective participant (e.g., to a client that is displaying the conversation to the participant) the state of the respective conversation in regard to the respective participant. In some embodiments, this includes providing to the participant (e.g., to the client being used by the participant) the read status of the content units of the respective conversation in regard to the participant (i.e., indicating which content units have already been read or viewed (in their current state) by the participant, and which have not).
- providing the conversation state 373 of the respective conversation in regard to the respective participant includes providing labels 378 , specified by the respective participant for the respective conversation.
- providing the state 373 of the respective conversation in regard to the respective participant includes providing, in accordance with instructions from the participant, metadata (e.g., ignore flag 377 ) to ignore the respective conversation.
- metadata e.g., ignore flag 377
- This provides a participant with an option to manage conversations in accordance with a rule, in effect to archive conversations, and to reduce congestion in a conversation viewer. For example, when a participant marks a conversation with a system defined label of “ignore” or “mute,” the ignore status flag 377 for the participant (for the marked conversation) is set, and the conversation is thereafter treated (on behalf of this particular participant) much like an archived message or conversation. Other participants of the conversation may continue to see the conversation in their list of active conversations if they have not marked the conversation with the “ignore” label.
- the per-user conversation state 373 for each participant of each hosted conversation is stored in the conversation database 262 , as shown in FIG. 3A .
- the per-user conversation state 373 for each participant of each hosted conversation is stored in the user database 400 , discussed below.
- per-user conversation state 373 information (for each participant of each hosted conversation) is stored in a separate database or server (sometimes called the “user supplement” database or server) that is separate from the conversation database 262 and user database 400 .
- pointers to per-user conversation state 373 information (e.g., record) in the user supplement database may be stored in the user database 400 and conversation database 262 .
- pointers are not stored, and the per-user conversation state 373 for a particular user of a respective conversation is retrieved, typically for transmission to a client participating in the conversation, from the user supplement database on an as-needed basis and is updated in accordance with operations (e.g., reading content, entering end content, editing content, etc.) performed by the participant.
- the conversation server 130 stores, for each respective subscriber, a contact list ( 416 , described in FIG. 4 ) associated with the respective subscriber.
- the contact list is stored in a user database 270 ( FIG. 2 ) or 400 ( FIG. 4 ).
- the client When a conversation is sent to a client for display to a user, the client receives only a portion of the conversation record 310 ( FIG. 3A ) for the conversation.
- the portion of the conversation record 310 sent to and stored at the client excludes the conversation log 324 , and the conversation state 373 of other participants (except, the cursor position of other currently active participants in the conversation who have not blocked the transmission of their cursor position).
- the conversation log 324 is sent to a client 110 only when the participant at that client has requested playback of the conversation, or a user-specified portion of the conversation, or has requested to view the state of the conversation at a particular time or point in the past.
- FIG. 3C is a block diagram illustrating data structures for the conversation log 324 , according to some embodiments.
- the conversation log 324 includes an time ordered sequence of log records 385 - 1 to 385 -C (sometimes called log entries).
- a respective log record 385 includes a content ID 386 , identifying the content unit (if any) updated by the conversation edits recorded in the log record 385 , metadata 388 relevant to the conversation edits recorded in the log record, references 394 (e.g., one or more pointers or file names) to any attachments added to the conversation by the conversation edits recorded in the log record, and a list of the conversation edits or changes 396 recorded in the log record.
- references 394 e.g., one or more pointers or file names
- the metadata 388 includes a timestamp 389 and/or sequence number that uniquely identifies the order of the conversation edits in the log record, relative to the conversation edits in other log records for the same conversation.
- the metadata 388 also identifies a list of authors (also called contributors) 390 of the conversation edits in the log record, and the starting position 392 of the conversation edits recorded in the log record 385 . While the authors list 390 will contain only one author for most log records 385 , when multiple authors make edits or contribute content to a content unit during a short period of time, or during overlapping time periods, a single corresponding log record 385 includes a list 390 of all of the authors who contributed to the change in the content unit recorded by that log record 385 .
- the starting position 392 is incorporated into the conversation edits 396 , as an offset or position setting for the first edit or update operation of the conversation edits 396 , and in those embodiments the log records do not have a separate starting position 392 field.
- FIG. 4 is a block diagram illustrating a data structure for a user database 400 , according to certain embodiments of the invention.
- the database 400 includes a plurality of user records 402 .
- each user record 402 includes:
- the conversation list 414 associated with a user includes a plurality of user-conversation records 434 , each record relating to a conversation in which the user is a participant.
- Each user-conversation record 434 includes:
- the system includes a separate per-user inverse index 424 for each user of the system; each such index 424 is an index that maps the terms, labels, tags, etc. of the conversations in which a user is participant to the conversations (and optionally, to the content units with the conversations, or locations within the conversations) containing those terms, labels, tags, etc.
- These per-user indices enable fast indexing and fast searching of the conversations in which a user is a participant.
- additional indices (sometimes called “big wave” indices) are used to provide fast indexing and access to “big wave” conversations having large numbers (e.g., more than a threshold number, such as 500 or 100) of participants.
- the content of “big wave” conversations is not indexed in the per-user inverse indices 424 , and is instead indexed in one or more “big wave” indices.
- additional per-group indices are used to index those conversations and to provide fast searching of those conversations; and the conversations (if any) in which a respective user participates only as a group member are not included in the user's per-user inverse index 424 .
- multiple indices may be searched, in which case the search results from the multiple indices are merged prior to returning the search results to the requesting user.
- server 130 provides the same content of a conversation to all participants of the conversation, and provides each online participant with online presence information for the other participants in the same conversation.
- the server allows a participant of a conversation to disable publication of their online presence information to other participants in the conversation.
- the server allows a participant of a conversation to selectively enable publication of their online presence information to other participants in the conversation (e.g., allowing publication of the participant's online presence only to users designated by the participant; or alternately, disabling publication of the participant's online presence to users specifically designated by the participant).
- server 130 provides the same content to each participant, formats content of the conversation to be compatible with one or more content types that a client device 110 associated with a respective participant has been configured to receive, and transmits the formatted content to the client device.
- conversation server 130 when delivering the content of a conversation to certain clients (e.g., a cell phone or PDA), formats the content by compressing multimedia data associated with the content (e.g., to reduce bandwidth requirements).
- the server provides a subset of multimedia data associated with the content (e.g., a thumbnail image, or short audio/video clip) to the client.
- the conversation server removes multimedia data associated with the content (e.g., strips out multimedia and just provides text) that is delivered to the client.
- the conversation server 130 authenticates a user using authentication information 428 prior to providing content from conversations to the user.
- the conversation server 130 sends content from conversations in which a respective user is a participant to a weblog (e.g., weblog server 226 or weblog client 228 ), specified (e.g., by Blog URL 430 ) in the user record 402 for that user.
- a respective participant in a conversation is an automated client
- content of the conversation is sent to the automated client.
- the automated client may be a weblog, an email server or account, or a service provider such as a translation service, spelling checking service, or the like.
- FIGS. 5A-5E are flowcharts representing methods for hosting conversations at a server, according to certain embodiments of the invention. These methods are governed by instructions that are stored in a non-transitory computer readable storage medium and that are executed by one or more processors of one or more servers. Each of the operations shown in FIGS. 5A-5E may correspond to instructions stored in a computer memory or computer readable storage medium.
- the computer readable storage medium may include a magnetic or optical disk storage device, solid state storage devices such as Flash memory, or other non-volatile memory device or devices.
- the computer readable instructions stored on the computer readable storage medium are in source code, assembly language code, object code, or other instruction format that is executed or interpreted by one or more processors.
- FIG. 5A shows a method 500 for hosting conversations at a server.
- a server hosts ( 502 ) a plurality of conversations, each having an identified set of participants.
- the server is typically one of a plurality of servers that hosts conversations in a hosted conversation system.
- the server provides ( 506 ) the same content from a conversation to all the participants of the conversation.
- the server also provides ( 508 ) online presence information of each of the plurality of participants in the conversation to other participants in the conversation.
- the server receives ( 510 ) content from each of a plurality of participants of the conversation and transmits the received content to the other participants of the plurality of participants.
- the server provides ( 512 ), upon an additional participant being added to the conversation, the same content of the conversation to the additional participant as provided to the identified set of participants, and adds the additional participant to the identified set of participants.
- the additional participant is using a client capable of receiving the entire content of the conversation
- the entire content of the conversation is sent to the client currently being used by the additional participant.
- a participant added to a conversation even long after the conversation has begun, receives content contributed to the conversation before the participant was added to the conversation.
- the server formats ( 514 ) content of the conversation to be compatible with one or more content types that a client device associated with a respective participant has been configured to receive, and transmits the formatted content to the client device.
- the server formats content from a conversation by performing at least one of: compressing multimedia data associated with the content, providing a subset of multimedia data associated with the content, and removing multimedia data associated with the content (e.g., removing video and audio data but leaving text content).
- the server receives ( 518 ) a search request (often called a query or search query) from a participant, and provides to the participant a search result, including content from at least one of the plurality of conversations, in response to the search request.
- a search request (often called a query or search query) from a participant, and provides to the participant a search result, including content from at least one of the plurality of conversations, in response to the search request.
- the server provides ( 520 ) to the participant a search result that includes a list of one or more conversations that match the search request.
- the search request is processed by query engine 260 ( FIG. 2 ), using an inverse index 264 of conversation content to identify conversations, or content within one or more conversations, that match the search request.
- FIG. 5B shows a continuation of the method 500 of FIG. 5A .
- a server maintains ( 530 ) for each respective participant a state of the respective conversation in regard to the respective participant, and provides to the respective participant (e.g., to the client currently being used by the participant to view the conversation) the state of the respective conversation in regard to the respective participant. In some embodiments, this includes providing ( 532 ) to the participant (e.g., to the client being used by the participant) the read status of the content units of the respective conversation in regard to the participant (i.e., indicating which content units have already been read or viewed by the participant, and which have not). In some embodiments, providing ( 534 ) the state of the respective conversation in regard to the respective participant includes providing labels, if any, specified by the respective participant for the respective conversation.
- the metadata maintained for a conversation with respect to a particular participant includes ( 536 ) metadata to ignore the respective conversation, in accordance with instructions from the participant.
- the ignore metadata may be provided to the search engine 260 ( FIG. 2 ) of the conversation server.
- the server provides ( 538 ) formatting information corresponding to the conversation state, the formatting information for use when displaying the conversation or portions thereof.
- the formatting information includes one or more of: color (e.g., of text, background, borders), font, indenting, position (e.g., superscript or subscript), etc.
- the server stores ( 540 ), for each respective participant, a contact list associated with the respective participant.
- the server verifies ( 542 ) (using authentication information 428 ) that the participant is authorized to receive the content of a conversation, prior to providing content to a participant.
- the server maintains ( 544 ) a set of participants of a respective conversation, including one or more subscribers of the server system and an email participant identified by an email address.
- the server maintains ( 546 ) a set of participants of a respective conversation, including one or more subscribers of the conversation system hosted by the server and a weblog on which content of the conversation is posted.
- FIG. 5C shows a continuation of the method 500 of FIG. 5A .
- the server maintains ( 550 ) for a respective user (of the conversation system hosted by a set of servers that includes the server) a list of conversations in which the user is a participant.
- the server updates a status of each such conversation in the list when a state of the respective conversation changes.
- the server Upon request from the user (e.g., from a client being used by the user) the server sends to the user a list comprising at least a portion of the list of conversations in which the user is a participant, the list including status information for the listed conversations.
- each respective user for which the server maintains ( 552 ) a list of conversations is a subscriber of the hosted conversation system.
- FIG. 5D shows a method 560 of hosting electronic messages.
- a server hosts ( 562 ) a plurality of conversations.
- the server provides ( 564 ) content of the conversation to a plurality of clients associated with participants of the conversation, including providing to each client all content of the conversation that the client has been configured to receive.
- the server receives ( 566 ) content from respective participants of the conversation and transmits to the clients associated with other participants of the conversation at least a portion of the received content.
- the server also provides ( 568 ), upon an additional participant being added to the conversation, to a client associated with the additional participant all content of the conversation that the client associated with the additional participant has been configured to receive.
- FIG. 5E shows a method 570 of hosting electronic messages.
- a server hosts ( 572 ) conversations initiated by the respective subset of users.
- the server receives ( 574 ) content from respective participants of the conversation and makes the content available to other participants of the conversation.
- the content is transmitted to those other conversation servers.
- the content is transmitted to the participants when they log in and request the content of the conversation.
- the server also provides ( 576 ), upon an additional participant being added to the conversation, all the content of the conversation to a client associated with the additional participant, or alternately, all content of the conversation that the client associated with the additional participant has been configured to receive.
- the server provides ( 578 ) a uniform view of the conversation to a plurality of the participants.
- FIG. 6 is a block diagram of a conversation system 600 having a plurality of linked conversation servers 130 , according to certain embodiments of the invention.
- FIG. 6 illustrates a logical coupling of the conversation servers 130 to each other and to clients for monitoring and reporting the online status (presence) of the system's users.
- the network 600 includes conversation servers 130 -A, 130 -B, and 130 -C.
- the conversation system 600 may include more or fewer conversation servers than shown in FIG. 6 .
- Each conversation server 130 hosts conversations for a set of users 138 .
- each conversation server 130 may host conversations initiated by hundreds or even thousands of users.
- Conversation server 130 -A is assigned users 138 -A;
- conversation server 130 -B is assigned users 138 -B;
- conversation server 130 -N is assigned users 138 -N.
- Each conversation server 130 includes a respective status monitor 134 ( 134 -A, 134 -B, 134 -N) and a respective status collector 136 ( 136 -A, 136 -B, 136 -N).
- a user changes online status (e.g., goes from offline to online, by logging into the conversation system)
- the change in status is detected by a respective status monitor 134 (e.g., a status monitor in the conversation server 130 assigned to the user).
- the status monitor 134 at the conversation server to which the user is assigned receives a message or otherwise detects the change in online status of that user to “online” (or “active,” “busy,” or whatever status is appropriate).
- the status collector 136 at the conversation server gathers the online status of the contacts in that user's contact list 416 . While some of the contacts in the user's contact list may be assigned to the same conversation server, other contacts in the user's contact list are assigned to other conversation servers.
- the status collector 136 of the conversation server to which the user is assigned gathers the online status of the user's contacts, including those assigned to other conversation servers, and forwards at least a portion of the collected status information to the user (i.e., to the client device or system currently being used by the user).
- the status collector broadcasts requests for status information of the user's contacts to the other conversation servers, and the conversation servers to which the contacts are assigned respond to the requests.
- the status collector determines the conversation servers to which the contacts are assigned and sends requests for status information to those conversation servers.
- the assignments of users to conversation servers may be determined by reference to an index of all users, a copy of which may be stored in all of the conversation servers or a subset thereof.
- a client application at the client being used by the user A1 sends a message to the conversation system 600 announcing that user A1 is online.
- the status monitor 134 -A at the conversation server 130 -A receives the message and updates the status of the user A1 to online.
- the status monitors 134 of other conversation servers either do not receive this message, or ignore it because the user A1 is not assigned to those other conversation servers.
- the status collector 136 -A at the conversation server 130 -A obtains a list of the contacts for the user A1 (e.g., by accessing contact list 416 for user A1).
- the status collector 136 -A gathers status information from the conversation servers to which the contacts are assigned. Thus, if a contact is assigned to conversation server 130 -A, then the status collector 136 -A accesses the contact's status information stored at conversation server 130 -A. If a contact is assigned to conversation server 130 -B, then server 130 -A communicates with conversation server 132 - 0 to get the status information. A similar procedure occurs if a respective contact is assigned to conversation server 130 -C.
- FIG. 7 is a block diagram illustrating a conversation server 130 (also sometimes called a conversation system or a conversation server system) in accordance with one embodiment of the present invention.
- the conversation server 130 includes one or more processing units (CPU's) 702 , one or more network or other communications interfaces 704 , memory 706 , and one or more communication buses 708 for interconnecting these components.
- the communication buses 708 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
- the conversation server 130 optionally includes (but typically does not include) a user interface having a display device and a keyboard.
- Memory 706 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and may include non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. Memory 706 may optionally include one or more storage devices remotely located from the CPU(s) 702 . Memory 706 , or alternately the non-volatile memory device(s) within memory 706 , includes a non-transitory computer readable storage medium. In some embodiments, memory 706 or the computer readable storage medium of memory 706 stores the following programs, modules and data structures, or a subset thereof:
- the conversation engine 714 may include the following modules, or a subset thereof:
- the conversation management modules 728 include the following modules, or a subset thereof:
- Each of the above identified elements may be stored in one or more of the previously mentioned memory devices, and corresponds to a set of instructions for performing a function described above.
- the above identified modules or programs i.e., sets of instructions
- memory 706 may store a subset of the modules and data structures identified above.
- memory 706 may store additional modules and data structures not described above.
- FIG. 7 shows a conversation server
- FIG. 7 is intended more as functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein.
- items shown separately could be combined and some items could be separated.
- some items shown separately in FIG. 7 could be implemented on single servers and single items could be implemented by one or more servers.
- the actual number of servers used to implement a conversation server system and how features are allocated among them will vary from one implementation to another, and may depend in part on the amount of data traffic that the system must handle during peak usage periods as well as during average usage periods.
- FIG. 8 is a block diagram of a client having a user who participates in one or more conversations in a hosted conversation system, according to certain embodiments of the invention.
- the client 110 includes one or more processing units (CPU's) 802 , one or more network or other communications interfaces 804 , memory 806 , and one or more communication buses 808 for interconnecting these components.
- the communication buses 808 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
- the client 110 typically includes a user interface 805 .
- the user interface includes a display device, a keyboard and a pointer device (not shown), while in other embodiments (e.g., a cell phone or personal digital assistant) the user interface includes a touch screen display.
- Memory 806 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and may include non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. Memory 806 may optionally include one or more storage devices remotely located from the CPU(s) 802 . Memory 806 , or alternately the non-volatile memory device(s) within memory 806 , includes a non-transitory computer readable storage medium. In some embodiments, memory 806 or the computer readable storage medium of memory 806 stores the following programs, modules and data structures, or a subset thereof:
- the conversation web page 815 includes a client conversation module 818 or other client assistant that is embedded in the web page 815 .
- the client conversation module 818 comprises executable instructions that are executed by the client 110 ; for example, the client conversation module 818 may include instructions that are executed by a virtual machine (e.g., a Java virtual machine) that is part of the browser 814 .
- the conversation web page 815 includes a conversation user interface having icons, which when activated by a user, execute various tasks to enable a user to request a list of conversations, select a conversation for display, view various portions of a conversation, participate in the conversation (e.g., by adding content to or editing content of the conversation), start new conversations, download attachments, and so on.
- Icons in the conversation user interface may function as links to executable procedures and instructions in the client conversation module 818 .
- the aforementioned conversation record 820 and conversation list 826 may, in some embodiments, be downloaded in response to instructions sent by a client conversation module 818 , or other client assistant embedded in the web page 815 , to a conversation server.
- the conversation record 820 comprises a client version or subset of the conversation record 310 , described above with respect to FIG. 3A , for a respective conversation.
- the client conversation record 820 includes conversation metadata 822 needed by the client (e.g., a list of participants and their online status) and content contributions 824 that are the content of the conversation.
- the conversation record 820 may optionally include the attachments, if any, of the conversation.
- attachments may be downloaded to some clients (e.g., desktop and laptop computers), but not to others (e.g., mobile phones and personal digital assistants). In some embodiments, the attachments of the conversation are not downloaded until they are requested by the user.
- thumbnail images and/or snippets e.g., selected text, if any
- the full content of the attachments is downloaded to the client 110 only upon user request.
- Each of the above identified modules corresponds to a set of instructions for performing the functions described above.
- the above identified modules or programs i.e., sets of instructions
- memory 806 may store a subset of the modules and data structures identified above.
- memory 806 may store additional modules and data structures not described above.
- FIGS. 9A and 9B illustrates a series of windows showing edits to a conversation by a plurality of participants of the conversation, and playback of those edits.
- FIG. 9A illustrates changes made to a conversation by a plurality of participants in the conversation.
- a first conversation window 910 has a first unit of content 922 entered by a first participant (e.g., Joe), who is the initial author of content 922 .
- the conversation window 910 includes a zoom option 912 to zoom deeper into a conversation, a reply option 914 to reply to the content 922 , a draft option 916 to create a draft message, or a setting option 918 to change conversation settings.
- a first caret 924 represents a point (sometimes herein called a cursor position) at which the first participant is typing or editing the content 922 . As the first participant types, deletes, or moves around the content 922 , the caret 924 moves, indicating the location in or portion of the content that the user is editing.
- the caret may be defined as an XML tag or other markup language tag or expression.
- the caret content, style, etc. may be selected or defined by a participant, by a system administrator, etc.
- a second participant provides a sequence of edits to the content 922 .
- a second caret 934 represents a point at which the second participant (also called the second user) is typing or editing the content 922 .
- the second user adds the text “Building B” 932 to the content 922 .
- the original content (by Joe) and the edits thereto (by Pat) are edits by distinct first and second participants in the conversation.
- a server (e.g., hosting the conversation) prepares for display the first caret at a position corresponding to the first edits by the first participant (Joe) of the conversation, and prepares for display a second caret at a position corresponding to the second edits by the second participant (Pat) of the conversation.
- the server provides the first and second edits and the first and second carets to the one or more servers for display.
- timestamps or sequence numbers may be associated with new content or edits to existing content.
- the timestamps use a consistent time base such as the time base of the hosting server.
- the second user again edits the content 922 , by deleting the word “second” and replacing it with the word “third” 942 .
- the second caret 934 is now beside the word “third”, indicating the location where the second user is editing.
- first user Joe creates a new message, in a new message window 952 within the conversation window 910 and below the first message window (which contains content 922 of the first message), and adds new content 954 to the new message window.
- Caret 956 represents a new point at which the first user (Joe) is typing or editing the content 954 in the new message window 952 .
- the conversation is updated with the revised content unit.
- the updated conversation is provided to the one or more servers hosting conversations for the participants (e.g., Joe, Pat, etc.) in the conversation.
- a server hosting the conversation checks for conflicts between the first edits and the second edits, and if a conflict occurs, the server notifies a participant associated with the conflict. For example, if participant Pat attempts to edit a piece of text that Joe is currently editing, such that the edits conflict with each other (e.g., Pat deletes a word as Joe is typing it, or Joe deletes a paragraph within which Pat is editing), a conflict occurs and one or both of the participants are notified.
- conflicts are automatically resolved using a predefined concurrency control procedure, described in more detail below.
- FIG. 9B illustrates playback of edits to the conversation illustrated in FIG. 9A .
- the edits are played back in chronological order, e.g., according to timestamps associated with the edits.
- the edits are played back according to sequence numbers associated with the edits.
- a participant of the conversation may view changes to conversation using the playback mechanism.
- the edits are played back using conversation log records 385 from the conversation log 324 (e.g., the client steps through the conversation log records 385 for a conversation or a portion of a conversation in chronological order), as described above with reference to FIGS. 3A-3C .
- the conversation is played back showing changes within a user-specified portion (e.g., a block of text, a paragraph, a single unit of conversation (blip), etc.) of the conversation in a chronological order.
- this user-specified portion of the conversation is played back without viewing changes to other portions of the conversation.
- the user-specified portion is a single content unit of the conversation.
- content 966 is displayed in a window 964 .
- a forward option 962 is displayed allowing a viewer to go forward in the conversation playback.
- content 970 shows edits by second participant (Pat) to the conversation, adding the words “Building B.”
- a back option 972 is displayed, which allows a participant to move backward in the conversation playback, and the forward option 962 continues to be displayed.
- content 980 shows further edits by second participant (Pat) to the conversation, replacing the word “second” with “third.”
- content 990 shows further edits (new window 992 with text) by first participant (Joe) to the conversation.
- a replay option 994 allows a participant to replay the sequence of updates to the conversation.
- one or more playback options enable a participant to perform one or more of the following operations: playback recent edits (e.g., most recent in time or in number), edits by a particular participant, edits to a particular portion of the conversation, etc.
- a playback may only show changes by a particular participant of the conversation. This may allow the participant to review his/her changes, or to view the changes of another participant.
- edits in the sequence of edits include individual keystrokes of a sequence of keystrokes by a respective participant in the conversation.
- a plurality of distinct edits in the sequence of edits are distinct keystrokes.
- a plurality of distinct edits in the sequence of edits are distinct words.
- edits 932 by participant Pat include a distinct word (Building) and a distinct letter (B)
- edits 942 include a deletion operation (delete the word “second”) and an addition operation (adding the word “third”).
- the conversation is updated accordingly.
- FIG. 10 illustrates participants preparing a message in a draft mode.
- a participant makes edits, such as adding or deleting content in a conversation, and the edits are received by the server hosting the conversation, but are not sent to other participants in the conversation. Only when the participant exits the draft mode, e.g., by indicating that he/she is finished making edits, are the participant's edits released (i.e., sent to the clients of the other participants) by the server so that other participants can view them.
- the author i.e., a participant working in draft mode
- a “team draft mode” allows a plurality of participants (e.g., members of Team A) to work together in preparing or editing content and to see each other's edits, while preventing non-team participants from seeing the content or edits until the team draft mode is exited.
- participants e.g., members of Team A
- team draft mode protects the privacy of team members as they work together to prepare content for publication to other participants in the conversation.
- a number of different mechanisms may be used to exit the team draft mode, or to release content prepared by a team of participants.
- the team draft mode may be exited (or content prepared by a respective team may be released for publication to the other conversation participants), when team members agree that the edits should be published.
- all team members in order to exit the team draft mode, all team members must agree to publish edits or content, while in some other embodiments a majority of team member must agree to publish edits or content, and in yet other embodiments, one or more senior team members determine when to publish edits or content.
- the updated conversation is provided to a server associated with a team member.
- the edits to the conversation are provided to a server associated with a non-team member, but display of the edits is delayed.
- the edits to the conversation are not provided to a server associated with a non-team member until the draft mode is ended.
- a first author/participant (e.g., Joe, who is a member of Team A) prepares a message in window 1012 .
- An approval option 1014 (e.g., using a check mark for approved and a cross 1016 for not approved) shows that the first author has not yet approved the message. When the first participant approves the message, this may be represented as a check mark 1033 in option 1014 .
- the first author enters content 1011 , and a caret 1018 indicates the first author's current text entry or editing position in the content. In some modes of operation, as the first author enters the content 1011 , the content is made visible to members of the same team as the first user.
- a second participant edits the content 1011 (in this example, changing “$100” to “$110”) to produce updated content 1021 .
- Second caret 1026 shows the text entry or edit position of the second participant in the content.
- An approval option 1022 associated with the second participant is displayed at the top of the window 1012 , and functions like the approval option 1014 associated with the first participant, as described above.
- the updated content 1021 is made visible to members of the same team.
- a third time/step 1030 the first (Joe) and second (Pat) participants approve the message for publication. This is indicated by check marks 1033 associated with approval options 1014 (for the first participant Joe) and 1022 (for the second participant Pat).
- the approved content ( 1031 ) is then published to other participants in the conversation.
- a fourth time/step 1040 the edits made by first and second participants are published so that conversation participants (e.g., members of Team B) outside of Team A can now view the published content 1041 .
- all the team-based drafting and editing takes place in one message window 1012 for one content unit.
- solo or team-based drafting can occur in more than one window or content unit, and can include adding new messages or editing existing messages.
- FIGS. 11A-B are flowcharts representing methods for editing, playing back and drafting conversations hosted at a server, according to certain embodiments of the invention. These methods are governed by instructions that are stored in a non-transitory computer readable storage medium and that are executed by one or more processors of one or more servers, as described.
- FIG. 11A shows a method 1100 for hosting conversations at a server (e.g., in hosted conversations database 262 , FIG. 2 ).
- a server hosts ( 1102 ) a plurality of conversations, each having an identified set of participants.
- the server receives ( 1104 ) units of content (e.g., each content unit stored as a content contribution 326 , FIG. 3A ) from respective participants in the conversation and transmits to one or more servers hosting conversations for the participants in the conversation at least portions of the received content units.
- units of content e.g., each content unit stored as a content contribution 326 , FIG. 3A
- individual keystrokes are transmitted from the client utilized by a content unit's author to other participants as the author composes the content of a content unit ( 1106 ).
- the server receives ( 1108 ) a sequence of edits, including first edits and second edits, to a respective content unit of the conversation from at least one participant other than the initial author of the content unit to produce a revised content unit.
- the first and second edits to the content unit are edits by distinct first and second participants in the conversation ( 1110 ).
- editing of the respective content unit by other participants in the conversation is disabled ( 1112 ) while receiving edits to the content unit from a first participant of the conversation.
- concurrent editing by more than one participant in the conversation is enabled ( 1113 ).
- any conflicts between concurrent edits by different participants are resolved and the resulting consistent content is published to (or made available to) all the conversation participants.
- a first caret (e.g., caret 924 identifying Joe in FIG. 9A ) is prepared for display ( 1114 ) at a position corresponding to the first edits by the first participant of the conversation
- a second caret (e.g., caret 934 identifying Pat) is prepared for display at a position corresponding to the second edits by the second participant of the conversation
- the first and second edits and the first and second carets are provided to the one or more servers.
- Active participants in the conversation e.g., participants whose clients are currently displaying the conversation
- the plurality of edits in the sequence of edits include distinct keystrokes ( 1116 ).
- the clients used by active participants in the conversation display updates/edits to the conversation at substantially the same time as they are entered by the author of those update/edits.
- the plurality of edits in the sequence of edits include distinct words ( 1118 ).
- the clients used by active participants in the conversation display word-by-word updates/edits to the conversation at substantially the same time as they are entered by the author of those update/edits.
- a respective timestamp or sequence number is stored ( 1120 ) for each distinct edit in the sequence of edits to the content unit, including distinct timestamps or sequence numbers for at least first and second edits to the content unit.
- the conversation is updated ( 1222 ) with the revised content unit and the updated conversation is automatically provided to the one or more servers hosting conversations for the participants in the conversation.
- FIG. 11B continues the method 1100 for hosting conversations at a server, illustrated in FIG. 11A .
- a timestamp (e.g., timestamps 1, 2, 3, 4 indicated by 920 , 930 , 940 , 950 , etc., of FIG. 9A and stored in timestamps 341 of FIG. 3B ) is stored ( 1130 ) for each content unit in the conversation.
- Data is transmitted ( 1132 ) representing the sequence of edits to a respective participant of the conversation, thus enabling the respective participant to view changes to the conversation in accordance with the sequence of edits.
- the respective participant is permitted to view ( 1134 ) changes to the conversation (or a user-specified portion of the conversation) in a chronological order, e.g., even if the changes are spaced apart from each other in the conversation.
- the playback function in a client application displays a sequence of changes to the conversation in chronological order. For example, in FIG. 9B a conversation is played back to show changes to the conversation as a result of adding and editing of content by participants in the conversation.
- the respective participant is permitted to view ( 1136 ) a sequence of changes within a logical portion of the conversation in a chronological order, e.g., using the back 972 and forward 974 buttons to navigate through changes in the conversation.
- the playback function in a client application displays a sequence of changes within a logical portion of the conversation in a chronological order. This allows a participant to see sequences of changes in a specific portion of interest in the conversation, without seeing changes in unrelated portions.
- the logical portion of the conversation for which changes are displayed may be a single content unit of the conversation ( 1138 ).
- the logical portion of the conversation for which changes are shown (when using the playback function) are a plurality of user-selected content units of the conversation.
- a respective participant of the conversation is permitted to view ( 1140 ) changes to the conversation by another respective participant of the conversation, e.g., to view all changes made by first participant Joe or by second participant Pat, as illustrated in FIG. 9A .
- the server delays ( 1142 ) providing edits to the conversation by a respective participant operating in a draft mode, and provides the updated conversation to other participants (e.g., to the servers that host conversations of the other participants, and to the clients used by those other participants) until the respective participant exits the draft mode or releases the conversation edits/updates that he/she has made.
- edits 1011 , 1021 of FIG. 10 are not provided to Team B until after members of Team A (Joe, Pat) approve the edits and end the draft mode.
- draft mode information or draft approval information or status is stored in the participant conversation state 372 ( FIG. 3B ) for the conversation.
- the server while a respective participant (who is a team member) makes edits to the conversation using a team draft mode, the server provides ( 1144 ) the updated conversation to a server associated with another team member (e.g., Joe can see Pat's edits and vice versa), and delays providing the edits to the conversation by the respective participant to a server associated with a non-team member (e.g., Team B cannot see Team A's edits during the draft mode).
- the server After the draft mode is ended, the server provides the updated conversation, including the edits to the conversation by the respective participant, to the server associated with the non-team member.
- the conversation edits made during draft mode are provided contemporaneously to the servers associated with all conversation participants, but the changes are marked as draft mode changes and therefore not provided to participants outside the team of the participant making the changes until the draft mode is exited or the conversation updates are approved or released (e.g., by the participant or by the participant's team).
- a separate conversation is created.
- the team members draft content within the separate conversation, and when the team is finished drafting the separate conversation or a portion thereof is merged back into the first conversation, at which point the new or edited content is made available to the other participants in the first conversation.
- the aforementioned cooperative editing module 736 allows multiple participants (clients) to simultaneously edit a conversation, and provides conflict detection and resolution to determine if participants' edits conflict.
- clients clients
- a user enters and edits conversation content using an “optimistic user interface,” which assumes there is no conflict between content entry and edits made by the user of the client device and other participants in the same conversation, until it is told otherwise by the conversation server that provides conversation hosting services for the client.
- one or more participants in a conversation make edits to a conversation at their local client ( 1510 ), which sends the user edits ( 1512 ) to the conversation server that provides conversation services to the client.
- the user edits made by each participant are received at the conversation server system ( 1520 ).
- transformation operations are performed on the edits made by the competing participants so that the state of the conversation on each of the clients is consistent. Furthermore, the conversation server reduces the number of transformation operations it needs to perform by merging sequences of edits made at each client into merged sequences of edits ( 1522 ), and then performing the transformation operations on the merged sequences of edits by the competing participants ( 1524 ).
- Respective transformed sequences of edits are transmitted to the clients of the competing participants (and to any other active participants), along with sequencing information ( 1524 , 1534 )) to enable each client to apply both locally made edits and the received transformed sequences of edits in the correct order so as to reproduce the correct current state of the conversation ( 1536 ).
- the conversation server When non-conflict changes (edits) are made by two (or more) conversation participants, the conversation server still merges sequences of edits made at each client into merged sequences of edits ( 1522 ). Each merged sequence of edits is assigned a timestamp and/or sequence number (see description above of conversation log 324 , FIG. 3A ), and is sent to the clients of the conversation participants ( 1522 , 1530 ) so that all the participants have a consistent record of conversation state. The respective clients apply the received merged edit sequences to update the locally stored conversation state ( 1532 ). Each client at which the conversation is being displayed updates its display of the conversation ( 1538 ) in accordance with both the locally made edits and the merged sequences of edits of other participants received from the conversation server.
- a special situation requiring special handling at the client is as follows. If, at the time a transformed sequence of edits is received at a client, the participant using the client has made additional changes that conflict, or potentially conflict with the changes recorded in the received transformed sequence of edits, then the client performs a second transformation on the received sequence of edits that anticipates the transforms to be made at the server when it receives the additional changes made at the client. As a result of the second transformation on the received sequence of edits, and the transformation applied by the server to the edits made at the client, the conversation state is made consistent across the clients of the participating users and across the hosting server(s).
- each of the clients includes operation transformation instructions, to be applied to received edits made at other clients, that take into account transformations that will be performed by the server on the edits made at those clients operations.
- the state of the conversation at each step along the way is represented by a corresponding sequence number, which is used by both the clients and the conversation hosting server to ensure that the transformations made at the clients and servers are coordinated or synchronized and produce a consistent conversation state. ( 1536 ).
- concurrency control operations for a conversation are performed at both the conversation server system 130 that hosts the conversation and, when necessary, by clients that receive transformed edits that conflict with intervening edits made at those clients.
- the quantity of edits that are merged into a merged edit sequence depends, at least in part, on the rate at which the participant is entering edits. Another factor that may affect the quantity of edits that are merged is whether other participants are editing the same content unit at the same time. For example, when there are no competing edits being made by other participants, relatively long sequences of edits may be merged. However, when competing edits are being made by other participants, relatively short sequences of edits (e.g., limited to edits made in a period of N seconds, where N is typically less than or equal to 0.5) are merged.
- edits (which includes content entry, as well as revisions of previously entered content, and changes to shared metadata) by a participant are sent right away to other active participants in the conversation, if any, without performing any merging.
- a transformation is generated (at the hosting conversation server, or at another server) for each individual edit operation before forwarding it to the other active participants.
- a second level transformation on a respective received transformed edit is performed at the receiving client when the received transformed edit conflicts with an edit made at the local client since the time corresponding to the conversation state sequence number.
- a conversation log record 385 can include a list of authors 390 identifying multiple authors of a change to the conversation state when more than one author is editing the same conversation at the same time or during overlapping times. Furthermore, when there are no conflicts between participants, entire sequences of editing by a participant, from the start of an edit sequence until the user selects the “done” icon or button, are merged into a single edit sequence for storage in a single conversation log record 385 ( FIG. 3C ).
- FIG. 12 illustrates a process diagram showing the application of concurrency control between a plurality of potentially conflicting edits received from two participants.
- the example illustrated in FIG. 12 shows transformation operations of ASCII text including XML tags and content. Operations are performed at a first participant (client) and at a second participant (client).
- a first sequence of edits to a respective content unit of the conversation is received from a first participant of the conversation, and the first sequence of edits is converted into a first merged sequence of edits ( 1212 ).
- a second sequence of edits to a respective content unit of the conversation is received from a second participant of the conversation, and the second sequence of edits is converted into a second merged sequence ( 1216 ).
- the first merged sequence of edits ( 1212 ) is transformed to produce a first transformed sequence of edits ( 1232 ), and the second merged sequence is transformed to produce a second transformed sequence of edits ( 1222 ).
- the first transformed sequence of edits ( 1232 ) is sent to the second participant, and the second transformed sequence of edits ( 1222 ) is sent to the first participant.
- the first merged sequence ( 1212 ) is applied to an initial conversation state D1 to produce an intermediate conversation state D2, and then the second transformed sequence of edits ( 1222 ) is applied to the conversation state D2 to produce a new conversation state D4.
- the second merged sequence of edits ( 1216 ) is applied to the initial conversation state D1 to produce an intermediate conversation state D3, and then the first transformed sequence of edits ( 1232 ) is applied to the intermediate conversation state D3 to produce the same new conversation state D4 as produced at the first client.
- the transformed sequences of edits, 1232 and 1222 are generated so that when they are applied to the conversation state after the application of locally made edits (corresponding to merged sequence of edits for that client), the conversation state in both clients converges to a consistent state.
- each ASCII text character has a size of one
- each starting and ending XML tag has a size of one
- “delete text” refers to a text deletion component of the operation
- “delete element” refers to an element deletion operation.
- the number accompanying a text or element deletion operation refers to the size of the element deletion.
- “insert element” is used to add XML tags to a conversation unit
- “insert text” is used to insert text. Transformations of merged sequences of content update operations (edits) take into account the position of each operation in the conversation unit, and also take into account duplicate operations (e.g., completing operations that delete the same text), or more generally operations that render other competing operations moot).
- the initial conversation state D1 1210 comprises a first string:
- the second (or revised) conversation state D4 1240 comprises a second string:
- Intermediate conversation state D2 1220 comprises a third string:
- Intermediate conversation state D3 1230 comprises a fourth string:
- the first merged sequence of edits 1212 provides the following edits:
- a dotted box 1214 indicates the portion of state D2 in which changes were made to D1 by the first merged sequence of edits 1212 .
- the second transformed sequence of edits 1222 provides the following edits:
- the second transformed sequence of edits 1222 deletes the letter “b” 1224 from the intermediate conversation state D2.
- the result of this operation is the second (or revised) conversation state D4 1240 .
- the second merged sequence of edits 1216 provides the following edits:
- delete text 3 e.g., delete “bcd”.
- the second merged sequence of edits 1216 deletes the letters “bcd” from the first conversation state D1.
- the result of applying the second merged sequence of edits 1216 to the first conversation state D1 is the intermediate conversation state D3 1230 .
- the first transformed sequence of edits 1232 provides the following edits:
- the first transformed sequence of edits 1232 changes the intermediate conversation state D3 by adding the material indicated by the dotted line 1234 on FIG. 12 .
- the result of this operation is the second conversation state D4.
- conflicting edits are detected, for example, when the transformation of a merged sequence of edits would change the position of at least one edit operation.
- conflicting edits are also detected when first and second merged sequences of edits (by two distinct participants) include overlapping delete operations. Transforming a merged sequence of edits for which there is an overlapping delete operation (i.e., overlapping with edit operations by another participant) produces a transformed delete operation that deletes fewer elements of the respective content unit than the respective delete operation of the merged sequence of edits.
- first and second merged sequences of operation include overlapping operations, including a redundant operation
- the first transformed sequence of edits does not include the redundant operation
- distinct conversation (or content unit) version numbers are associated with the state of a respective conversation (or content unit) before and after each merged sequence of edit operations.
- distinct version numbers are associated with the state of a respective conversation (or content unit) before and after each transformed sequence of edit operations.
- distinct timestamps are associated with each distinct version number of the conversation (or content unit).
- FIG. 13 illustrates a sequence of separate edit operations to a content unit received from a first participant and a sequence of separate edit operations received from a second participant in a conversation.
- a starting point for this sequence is a first content unit state 1310 , comprising the text “ABCDEFG”.
- a first sequence of edits is received from a first participant, including:
- a second transformed sequence of edits is received from the second participant and applied at the first participant, including:
- a second sequence of edits is received from a second participant, including:
- a first transformed sequence of edits is received from the first participant and applied at the second participant, including:
- each transform has to be calculated for each path, which consumes processor resources and takes time.
- FIG. 14 illustrates 1400 a sequence of merged edit operations to a content unit received from a first participant and a sequence of merged edit operations received from a second participant in a conversation, and transforms thereon.
- a starting point for this sequence is a first content unit state 1410 , comprising the text “ABCDEFG” and corresponding to the starting content unit state 1310 of FIG. 13 .
- a first merged sequence of edits is received from a first participant, including:
- a second transformed merged sequence of edits is received from the second participant and applied at the first participant, including:
- a second merged sequence of edits is received from a second participant, including:
- a first transformed merged sequence of edits is received from the first participant and applied at the second participant, including:
- Another application that may be associated with the server hosting the conversation includes a contextual spell checker and correction application.
- Such an application can be used to find common misspellings, and to disambiguate intentionally defined words.
- Such an application may use an error model to determine if an work is spelled or used correctly. The model may find common errors based on letter reversal, phonetic similarity, location in a conversation or letter, or using other means.
- the application may provide on-the-fly, context based text correction.
- the application provides a user-specific overlay of words that a user frequently uses or that the user has defined.
- the application may insert a tag with a suggestion for a word that it considers to be incorrectly spelled, such that any participant (not just the author) can address and correct the word, if necessary.
- Another application that may be associated with the server hosting the conversation includes a contextual name display, using context-dependent disambiguation.
- this disambiguation may provide space efficiency when displaying names. For example, a close friend or work colleague may be displayed using a first name only or a picture, whereas a stranger may be displayed with full name, title, etc.
- a set of rules (defined by the system or by the user or both) may be used to determine who to display and in what manner.
- Another application that may be associated with the server hosting the conversation includes a language translation (machine translation) application.
- This machine translation application may use the spell checking and/or a context sensitive dictionary to translate between languages.
- these (and other) applications use an application protocol interface (API) to interact with the server hosting the conversation.
- API application protocol interface
- the application allows a participant to reserve a namespace for that participant's personal applications, which the participant may share with other participants.
- FIG. 16 is a block diagram of a distributed client-server computing system 1600 including a conversation server 130 according to some embodiments of the invention.
- the conversation server 130 is connected to a plurality of clients 110 and third party webservers 1602 through one or more communication networks 120 .
- a third party webserver 1602 may include a collection of web pages 1604 associated with a domain name on the Internet (e.g., a website).
- Conversation client 110 may be any computer or device through which a user of conversation client 110 can submit service requests to and receive search results or other services from conversation server 130 .
- conversation clients 110 include, without limitation, desktop computers, laptop computers, tablet computers, mobile devices such as mobile phones, personal digital assistants, set-top boxes, or any combination of the above.
- a respective conversation client 110 may contain at least one client application 814 for submitting requests to the conversation server 130 .
- the client application 814 can be a web browser or other type of application that permits a user to search for, browse, and/or use information (e.g., web pages and web services) that is accessible through communication network 120 .
- conversation client 110 includes one or more client assistants 819 .
- Client assistant 819 can be a software application that performs one or more tasks related to assisting a user's activities with respect to client application 814 and/or other applications.
- client assistant 819 may assist a user at conversation client 110 with browsing information (e.g., files) hosted by a third party webserver 1602 , processing information (e.g., conversations or search results) received from the conversation server 130 , and monitoring the user's activities on the search results.
- client assistant 819 is embedded in one or more web pages (e.g., a search results web page) or other documents downloaded from the conversation server 130 .
- client assistant 819 is a part of client application 814 (e.g., a plug-in or extension of a web browser).
- Communication network(s) 120 can be any wired or wireless local area network (LAN) and/or wide area network (WAN), such as an intranet, an extranet, the Internet, or a combination of such networks.
- communication network 120 uses the HyperText Transport Protocol (HTTP) and the Transmission Control Protocol/Internet Protocol (TCP/IP) to transport information between different networks.
- HTTP HyperText Transport Protocol
- TCP/IP Transmission Control Protocol/Internet Protocol
- the HTTP permits client devices to access various information items available on the Internet via communication network 120 .
- the various embodiments of the invention are not limited to the use of any particular protocol.
- conversation server 130 includes a front end server 1606 , a search/access module 716 , a conversation database 726 , user database management modules 724 , a user database 722 , conversation management modules 728 , a user interface updater 758 , and data structures storing user interface display state(s) 760 .
- Front end server 1606 is configured to receive data from a conversation client 110 , which instructs conversation server 130 to perform various conversation management operations.
- User database management modules 724 manage user database 722 by creating and updating user records.
- Search/access module 716 performs searches of conversation database 726 (which corresponds to conversation database 262 in FIGS. 2 and 3 A- 3 C).
- Conversation management modules 728 update conversation data in the conversation database 726 in accordance with requests from the conversation clients 110 .
- conversation management modules 728 provide information to user interface updater 758 which enables user interface updater 758 to generate an updated state for the user interface or prepare instructions which will enable client 110 to generate and/or display an updated state for the user interface.
- the updated state of the user interface is stored in data structures for the user interface display state(s) 760 .
- the updated user interface display states are generated at client 110 (e.g., by a client-side user interface updater) based on inputs received at client 110 , and/or updated user interface display state(s) are stored at client 110 .
- the role of the user interface updater 758 is primarily display state and read/unread state bookkeeping, while client application 814 and/or client assistant 819 generate the user interface based on user inputs, locally stored information about the currently viewed conversation, and new information for the conversation (e.g., changes to the conversation made by other participants) received from conversation server 130 , and send display state update notifications (as well as other notifications about user actions with respect to the displayed conversation) to conversation server 130 .
- system 1600 has a single conversation server 130
- system 1600 has multiple conversation servers 130 (e.g., as illustrated by conversation servers 130 in FIGS. 1 , 2 and 6 ).
- multiple conversation servers 130 may be hosted by different service providers, such as providers 116 -A and 116 -B respectively.
- the providers are internet service providers (ISPs) providing a conversation service. Alternately, some or all of the providers may be dedicated conversation providers.
- the conversation servers 130 may be coupled together directly, or by a local area network (LAN), or via communication network 120 .
- LAN local area network
- FIGS. 17A-17M illustrate exemplary user interfaces for updating a user interface having a display region 7002 , a minimized window region 7004 and a plurality of windows 7006 which can be minimized from display region 7002 to minimized window region 7004 .
- the content of a window that has been minimized to the minimized window region 7004 can be subsequently displayed within an interactive overlay 7014 , in accordance with the method described below with reference to FIGS. 18A-18E .
- the exemplary user interfaces described herein are merely illustrative and are not intended to limit the scope of the disclosed embodiments in any way.
- the user interface at a respective client 110 includes a plurality of windows (e.g., navigation window 7006 - a , contacts window 7006 - b , digest window 7006 - c , first conversation window 7006 - d and second conversation window 7006 - e ) that are displayed within display region 7002 , while no representations of windows are displayed in minimized window region 7004 .
- the contacts window 7006 - b includes a list of contacts of the user and enables the user to create a new conversation by selecting a contact from the list of contacts.
- Navigation window 7006 - a includes a list of links, which cause different views to be displayed in digest window 7006 - c (e.g., in response to selection of the “inbox” link, an inbox view would be displayed in the digest window 7006 - c , while in response to selection of the “All” link, a view of the user's conversations would be displayed in digest window 7006 - c , etc.).
- Digest window 7006 - c displays a list of representations of conversations, which, when a representation of a respective conversation is selected causes the respective conversation to be displayed as a window (e.g., first conversation window 7006 - d and/or second conversation window 7006 - e ) in display region 7002 if the windows are not already displayed, or the conversation to be displayed in an interactive overlay if a window including the conversation is currently minimized.
- a window e.g., first conversation window 7006 - d and/or second conversation window 7006 - e
- client 110 while displaying the plurality of windows, detects an input that corresponds to a request to move a shared boundary 7008 between three of the windows (e.g., digest window 7006 - c , first conversation window 7006 - d and second conversation window 7006 - e ).
- client 110 detects a select gesture while a cursor 7010 is displayed over shared boundary 7008 and subsequently detects an input that corresponds to movement (e.g., as illustrated by the arrow in FIG. 17A ) of the cursor to the left within the user interface.
- boundary 7008 in response to the input that corresponds to movement of cursor 7010 , boundary 7008 is moved (e.g., from a first location of the boundary 7008 - 1 to a second location of the boundary 7008 - 2 ) and the windows adjacent to the boundary are resized in accordance with the movement of the boundary (e.g., digest window 7006 - c is narrowed, and first conversation 7006 - d and second conversation 7006 - e are widened).
- client 110 also detects an input that corresponds to a request to reconfigure the windows.
- One such input is a select gesture that is detected while a cursor 7010 - 1 is located proximate to a window maximize icon for second conversation window 7006 - e , which results in the second conversation window 7006 - e being maximized as illustrated in FIG. 17C .
- Another such input is a select gesture that is detected while a cursor 7010 - 2 is located proximate to a window minimize icon for first conversation window 7006 - d , which results in the first conversation window 7006 - d being minimized as illustrated in FIG. 17E .
- the second conversation is maximized to substantially fill display region 7002 , while representations of the other windows (e.g., a representation 7012 - a of the navigation window, a representation 7012 - b of the contacts window, a representation 7012 - c of the digest window and a representation 7012 - d of the first conversation) are displayed in minimized window region 7004 .
- client 110 also detects an input that corresponds to a request to display an interactive overlay (e.g., a select gesture while cursor 7010 is proximate to an interactive overlay display icon in the representation 7012 - d of the first conversation).
- the client in response to the input that corresponds to a request to display the interactive overlay, the client displays an interactive overlay 7014 - d that includes content of the first conversation. As illustrated in FIG. 17D , interactive overlay 7014 - d overlaps the maximized window (e.g., second conversation window 7006 - e ). Additionally, it should be understood that, in accordance with some embodiments, this content (e.g., the content of the first conversation) can be modified within interactive overlay 7014 - d while interactive overlay 7014 - d is displayed.
- the maximized window e.g., second conversation window 7006 - e
- the first conversation is minimized, in response to detecting the input that corresponds to a request to minimize the first conversation (e.g., the request to minimize first conversation window 7006 - d in FIG. 17B ).
- the first conversation ceases to be displayed in display region 7002 , and a representation 7012 - d of the first conversation is displayed in minimized window region 7004 .
- second conversation window 7006 - e is expanded to fill the space that was previously occupied by the first conversation in display region 7002 .
- the client also detects an input that corresponds to a request to display an interactive overlay (e.g., a select gesture while cursor 7010 is proximate to an interactive overlay display icon in the representation 7012 - d of the first conversation).
- the client in response to the input that corresponds to a request to display the interactive overlay, the client displays an interactive overlay 7014 - d that includes content of the first conversation. As illustrated in FIG. 17F , interactive overlay 7014 - d overlaps navigation window 7006 - a , contacts window 7006 - b and digest window 7006 - c . Additionally, it should be understood that, in accordance with some embodiments, this content (e.g., the content of the first conversation) can be modified within the interactive overlay. For example, in FIG. 17F , the client receives a content modification input (e.g., a select gesture while cursor 7010 is proximate to a reply region of the conversation).
- a content modification input e.g., a select gesture while cursor 7010 is proximate to a reply region of the conversation.
- the client displays a reply within the first conversation. Additionally, in FIG. 17G , after the reply has been added to the first conversation, the client also receives an input that corresponds to a request to interact with an element of the user interface that is outside of the interactive overlay 7014 - d (e.g., a select gesture while cursor 7010 - 2 is outside of the interactive overlay 7014 - d ).
- a subsequent content addition input e.g., typing “Thanks for putting together this list!” and selecting a “Done” button by performing a select gesture while cursor 7010 - 1 is over the “Done” button
- the client displays a reply within the first conversation. Additionally, in FIG. 17G , after the reply has been added to the first conversation, the client also receives an input that corresponds to a request to interact with an element of the user interface that is outside of the interactive overlay 7014 - d (e.g., a select gesture while cursor 7010 - 2 is outside of the interactive overlay 7014 - d
- FIG. 17H after receives the input that corresponds to a request to interact with an element of the user interface that is outside of the interactive overlay 7014 - d (e.g., a select gesture while cursor 7010 - 2 is proximate to a respective representation of a conversation within the digest window 7006 - c ), the client ceases to display the interactive overlay and displays a third conversation 7006 - f that is associated with the representation of the respective conversation within the digest window 7006 - c .
- a select gesture while cursor 7010 - 2 is proximate to a respective representation of a conversation within the digest window 7006 - c
- the client also detects an input that corresponds to a request to minimize the third conversation 7006 - f (e.g., a select gesture that is detected while cursor 7010 is located proximate to a window minimize icon for the third conversation 7006 - f ).
- an input that corresponds to a request to minimize the third conversation 7006 - f (e.g., a select gesture that is detected while cursor 7010 is located proximate to a window minimize icon for the third conversation 7006 - f ).
- the third conversation is minimized, in response to detecting the input that corresponds to a request to minimize the third conversation (e.g., the request to minimize the third conversation 7006 - f in FIG. 17H ).
- the third conversation ceases to be displayed in display region 7002 , and a representation 7012 - f of the third conversation is displayed in minimized window region 7004 along with the representation 7012 - d of the first conversation.
- the second conversation window 7006 - e is expanded to fill the space that was previously occupied by the third conversation in display region 7002 .
- the client also detects an input that corresponds to a request to display an interactive overlay (e.g., a select gesture while cursor 7010 is proximate to a representation 7012 - d of the first conversation).
- the client also detects an input that corresponds to a request to minimize digest window 7006 - c (e.g., a select gesture that is detected while a cursor 7010 is located proximate to a window minimize icon for the digest window 7006 - c ).
- the digest window is minimized, in response to detecting the input that corresponds to a request to minimize the digest window (e.g., the request to minimize digest window 7006 - c in FIG. 17I ).
- the digest window ceases to be displayed in display region 7002 , and a representation 7012 - c of the digest window is displayed in minimized window region 7004 along with the representation 7012 - d of the first conversation and the representation 7012 - f of the third conversation.
- the second conversation 7006 - e is expanded to fill the space that was previously occupied by the digest window in display region 7002 .
- the client also detects an input that corresponds to a request to display an inbox view in the digest window (e.g., a select gesture while cursor 7010 is proximate to an “inbox” link in navigation window 7006 - a ).
- an input that corresponds to a request to display an inbox view in the digest window (e.g., a select gesture while cursor 7010 is proximate to an “inbox” link in navigation window 7006 - a ).
- the client in response to the input that corresponds to a request to display an inbox view of the digest window, because the digest window is currently minimized, the client displays an interactive overlay 7014 - c that includes content of the digest window (e.g., an inbox view including a list of representations of conversations within the inbox of the user). As illustrated in FIG. 17K , interactive overlay 7014 - c overlaps navigation window 7006 - a , contacts window 7006 - b and second conversation window 7006 - e . Additionally, it should be understood that, in accordance with some embodiments, this content (e.g., the content of the digest window) can be modified and/or interacted with by the user. For example, in FIG. 17K , the client receives a conversation selection input (e.g., a select gesture while cursor 7010 is proximate to a representation of the first conversation in the inbox view).
- a conversation selection input e.g., a select gesture while cursor 7010 is proximate to
- the client in response to the conversation selection input that corresponds to a request to display the first conversation, because the first conversation is currently minimized, the client displays an interactive overlay 7014 - d that includes content of the first conversation. As illustrated in FIG. 17L , interactive overlay 7014 - d overlaps the second conversation window 7006 - e .
- the content e.g., the content of the first conversation
- the client can display an interactive overlay 7014 - d that includes content of the first conversation.
- the content e.g., the content of the first conversation
- any of the minimized windows can be restored (e.g., redisplayed within display region 7002 ). For example, in FIG.
- the client receives a window restore input (e.g., a select gesture while cursor 7010 is proximate to a window restore icon in the representation 7012 - d of the first window that is displayed in minimized window region 7004 ).
- a window restore input e.g., a select gesture while cursor 7010 is proximate to a window restore icon in the representation 7012 - d of the first window that is displayed in minimized window region 7004 ).
- the client in response to the window restore input that corresponds to a request to restore the first conversation, the client redisplays the first conversation 7006 - d in display region 7002 . Additionally, the client reduces the size of second conversation window 7006 - e so as to make room for first conversation window 7006 - d within display region 7002 . As illustrated in FIG. 17M , after first conversation window 7006 - d has been restored, the representation of the first conversation is no longer displayed in minimized window region 7004 . However, the digest window and the third conversation are both still minimized and thus, the representation 7012 - c of the digest window and the representation 7012 - f of the third conversation are both still displayed in minimized window region 7004 .
- FIGS. 18A-18E illustrate an overview of a method for interacting with an application user interface with an interactive overlay.
- the application is an electronic messaging application such as hosted conversation application for displaying hosted conversations.
- the messages e.g., hosted conversations
- the application user interface is displayed at a client system (e.g., a conversation client 110 ).
- the client system displays ( 1802 ) a user interface with a display region (e.g., 7002 in FIGS. 17A-17M ) and a minimized window region (e.g., 7004 in FIGS. 17A-17M ).
- a plurality of windows e.g., 7006 in FIGS. 17A-17M are displayed in display region 7002 , the plurality of windows including a first window (e.g., first conversation window 7006 - d in FIG. 17A ) and a second window (e.g., digest window 7006 - c or a second conversation window 7006 - e in FIG. 17A ).
- each window has a respective size and position within the user interface.
- the position and size of one or more of the respective windows is changed in response to user inputs, as described in greater detail below.
- the user interface is ( 1804 ) for a single web-application, and the plurality of windows are windows within the web-application.
- the exemplary user interface displayed in FIGS. 17A-17M is for an electronic messaging application.
- the user interface is displayed within a web browser or other client application.
- the entire user interface, including display region 7002 , minimized window region 7004 and windows 7006 is displayed within a single application (e.g., within a single window or tab of a web browser).
- At least a subset of the plurality of windows have a predefined arrangement in the display region; and when multiple windows are displayed in the display region, the windows in the subset are displayed ( 1806 ) at location in the display region in accordance within the predefined arrangement.
- a navigation window 7006 - a , a contacts window 7006 - b and a digest window 7006 - c are displayed, where navigation window 7006 - a is displayed in the top left corner of display region 7002 , contacts window 7006 - b is displayed in the bottom left corner of display region 7002 , and digest window 7006 - c is displayed adjacent to navigation window 7006 - a and contacts window 7006 - b .
- this predefined arrangement is maintained even as other windows with in the user interface change state (e.g., the same arrangement of the navigation window 7006 - a , the contacts window 7006 - b and digest window 7006 - c is displayed in FIGS. 17A-17B and 17 E- 17 I when all three of these windows are displayed in display region 7002 ).
- the windows include ( 1808 ) one or more command windows (e.g., 7006 - a , 7006 - b and 7006 - c ) for displaying commands for managing content and one or more content windows (e.g., a first conversation window 7006 - d , a second conversation window 7006 - e and a third conversation window 7006 - f ) for displaying and editing content (e.g., hosted conversations).
- the command windows include ( 1810 ) a contact list window (e.g., contacts window 7006 - b for selecting/searching for contacts).
- the command windows include ( 1812 ) a navigation window (e.g., a navigation window 7006 - a for navigating through folders, labels, saved searches and electronic messages).
- the command windows include ( 1814 ) a search window (e.g., digest window 7006 - c , which includes content associated with a currently selected navigation element in the navigation window 7006 - a or content associated with an executed search query).
- the command windows have some of the same properties as content windows (e.g., the command windows can be minimized to the minimized window region 7004 ).
- the command windows have some properties that are different from the properties of the content windows (e.g., the content windows can be closed and can be maximized, while the command windows cannot be closed and/or cannot be maximized).
- the client system displays ( 1816 ), within display region 7002 , a boundary (e.g., a shared boundary 7008 in FIGS. 17A-17B ) between the second window and a third window and a fourth window.
- the client system detects ( 1818 ) a third input that corresponds to moving the boundary (e.g., a shared boundary).
- the client system In response to detecting the third input (e.g., a select and drag gesture while a cursor 7010 is over the boundary 7008 ), the client system resizes ( 1820 ) the second window, the third window and the fourth window in accordance with movement of the boundary (e.g., the movement of the shared boundary from a first location of the boundary 7008 - 1 to a second location of the boundary 7008 - 2 ).
- the second window, the third window and the fourth window are resized simultaneously, and concurrently with movement of cursor 7010 .
- the client system detects a select and drag gesture while a cursor (e.g., 7010 in FIG.
- the client system moves the boundary (e.g., from a first boundary position 7008 - 1 in FIG. 17A to a second boundary position 1008 - 2 in FIG. 17B ), and simultaneously resizes the windows (e.g., the digest window 7006 - c is narrowed, the first conversation window 7006 - d is widened and the second conversation window 7006 - e is widened).
- the client system detects ( 1822 ) a first input that corresponds to a request to change a state of one or more of the windows.
- the first input is ( 1824 ) a request to maximize the second window (e.g., in FIG. 17B , the client system detects a select gesture while a cursor 7010 - 1 is located over a window maximize icon associated with second conversation window 7006 - e and maximizes the second conversation window 7006 - e as illustrated in FIGS. 17C-17D ).
- the first input is ( 1826 ) a request to minimize the first window (e.g., in FIG.
- the client system detects a select gesture while a cursor 7010 - 2 is located over a window minimize icon associated with the first conversation window 7006 - d and minimizes the first conversation window 7006 - d as illustrated in FIGS. 17E-17L ).
- the client system expands one or more of the other windows (e.g., the second window) to fill in display region 7002 .
- second conversation window 7006 - e has been expanded to fill substantially all of display region 7002 . Consequently, in response to detecting the first input, the client system has also ceased to display the first window and all of the other windows in display region 7002 , and displays representations of the windows in the minimized window region 7004 .
- the client system displays a representation 7012 - a of the navigation window (e.g., 7006 - a in FIGS.
- the client system detects ( 1838 ) a second input that corresponds to a request to view content of the first window (e.g., a select gesture while cursor 7010 is located over the representation 7012 - d of the first window).
- the client system displays ( 1844 ) an interactive overlay (e.g., 7014 - d in FIG. 17D ) including content of the first window (e.g., first conversation window 7006 - d in FIG. 17D ).
- the interactive overlay e.g., 7014 - d in FIG. 17D
- the client system In response to detecting the first input, the client system ceases ( 1828 ) to display the first window in display region 7002 , and displays a representation of the first window (e.g., 7012 - d in FIG. 17C or 7012 - d in FIG. 17E ) in minimized window region 7004 .
- the representation of the first window was not displayed ( 1830 ) in minimized window region 7004 at the time that the first input was detected (e.g., in FIG. 17B no representation of first conversation window 7006 - d is displayed in minimized window region 7004 ).
- a representation of a respective window is only displayed in the minimized window region when the respective window is minimized.
- minimized window region is advantageous because it makes efficient use of screen space by showing only a single user interface object to represents a window (e.g., either displaying the window in display region 7002 or displaying a representation of the window in minimized window region 7004 , but not both).
- At least a subset of the plurality of windows have a predefined order; and when representations of multiple windows are displayed in minimized window region 7004 , the representations of windows in the subset are displayed ( 1832 ) in minimized window region 7004 in accordance with the predefined order (e.g., from top to bottom or left to right in ascending or descending order).
- the windows 7006 have an order in display region 7002 from top to bottom, left to right (e.g., navigation window 7006 - a , contacts window 7006 - b , digest window 7006 - c , first conversation window 7006 - d and second conversation window 7006 - e ), as illustrated in FIGS.
- the representations of these windows are displayed in minimized window region 7004 in the same order from left to right (e.g., the representation 7012 - a of the navigation window, the representation 7012 - b of the contacts window, the representation 7012 - c of the digest window, and the representation 7012 - c of the first window), as illustrated in FIG. 17C .
- the plurality of windows include ( 1834 ) one or more command windows (e.g., navigation window 7006 - a , contacts window 7006 - b and digest window 7006 - c ) for displaying commands for managing content and one or more content windows (e.g., first conversation window 7006 - d , second conversation window 7006 - e and third conversation window 7006 - f ) for editing content.
- the client system in response to the first input: the client system ceases ( 1836 ) to display the one or more command windows; and displays respective representations of the one or more command windows in the minimized window region 7004 . For example, in FIG.
- the device detects a request to minimized the digest window (e.g., a select gesture while cursor 7010 is over a window minimize icon for digest window 7006 - c ), and in FIG. 17J , the digest window ceases to be displayed in display region 7002 and a representation 7012 - c of the digest window is displayed in minimized window region 7004 .
- the client system ceases to display multiple command windows (e.g., two or more, all of the displayed command windows, etc.). For example, in FIG.
- command windows to minimized window region 7004 as described above is particularly advantageous in situations where screen space is constrained, because removing command windows that are not immediately necessary to the user from display region 7002 increases the amount of space that is available to the user to display one or more content windows, thereby enabling the user to more efficiently use the limited screen space and accomplish tasks (e.g., adding and deleting content from the conversation) more quickly and accurately.
- the client system After ceasing to display the first window, the client system detects ( 1838 ) a second input that corresponds to a request to view content of the first window.
- the second input includes ( 1840 ) selection of the representation of the first window in the minimized window region 7004 .
- the client system detects a select gesture while cursor 7010 is located over the representation 7012 - d of the first window.
- the second input includes ( 1842 ) selection of an element in the second window that is linked with content of the first window. For example, in FIG.
- the client system detects a select gesture while cursor 7010 is located over a link (e.g., an inbox link) in the navigation window 7006 - a that corresponds to content (e.g., an inbox view) of the digest window.
- a link e.g., an inbox link
- the client system displays ( 1844 ) an interactive overlay including content of the first window.
- the interactive overlay is displayed so as to partially overlap display region 7002 (e.g., so as to partially overlap a window in display region 7002 ).
- the client system displays an interactive overlay 7014 - d that includes content of the first window (e.g., first conversation 7006 - d in FIG. 17E ), which overlaps navigation window 7006 - a , contacts window 7006 - b and digest window 7006 - c .
- the interactive overlay is displayed ( 1846 ) at a location that is proximate to the representation of the first window in the minimized window region 7004 (e.g., in FIG. 17F , interactive overlay 7014 - d for the first window is joined to the representation 7012 - d of the first window).
- a third window is displayed ( 1848 ) in display region 7002 prior to detecting the first input.
- the client system in response to detecting the first input: the client system ceases ( 1850 ) to display the third window in display region 7002 ; and displays a representation of the third window in minimized window region 7004 . For example, in FIG.
- digest window 7006 - c is a third window that was displayed in display region 7002 , and after detecting the request to maximize second conversation window 7006 - e , as illustrated in FIG. 17B , digest window 7006 - c ceases to be displayed in display region 7002 and a representation 7012 - c of the digest window is displayed in the minimized window region 7004 as illustrated in FIG. 17C and described in greater detail above.
- operations 1854 - 1872 are performed while the interactive overlay that includes ( 1852 ) content of the first window is displayed.
- the client system detects ( 1854 ) a third input that corresponds to a request to modify the content of the first window; and in response to detecting the third input, the client system modifies ( 1856 ) the content of the first window within the interactive overlay.
- a user can modify content that is displayed in an interactive overlay.
- the interactive overlay 7014 - d includes content of a hosted conversation (e.g., the first conversation) and the client system receives a third input (e.g., a request to add a reply to a portion to the first conversation by a selection of a reply region within the first conversation).
- the client system in response to detecting the third input, the client system enables the user to add a reply to the portion of the conversation (e.g., “Thanks for putting together this list!”), which becomes a part of the conversation, as illustrated in FIG. 17G .
- a reply to the portion of the conversation e.g., “Thanks for putting together this list!”
- content of the first window could be modified in many different ways without departing from the scope of the present invention (e.g., by adding content, deleting content, editing content, reformatting content, modifying metadata of the content, etc.).
- the client system selects and then displays different content of the first window (e.g., a participant can select elements to open new messages, perform searches, etc.).
- the client system in response to selection of the link, would display the content of the linked window (e.g., within the interactive overlay or in another interactive overlay).
- the content of the first window includes a link to content outside of the user interface (e.g., a link to an external website), in response to selection of the link, the client system would display the content (e.g., within the interactive overlay).
- the client system detects ( 1860 ) a third input that corresponds to a request to interact with an element of the user interface outside of the interactive overlay; and in response to detecting the third input, the client system ceases ( 1862 ) to display the interactive overlay.
- a third input e.g., a select gesture while cursor 7010 - 2 is located over a portion of digest window 7006 - c that is outside of interactive overlay 7014 - d ).
- the client system in response to detecting the selection of a representation of a conversation in digest window 7006 - c , the client system ceases to display the interactive overlay (e.g., 7014 - d in FIG. 17G ), as illustrated in FIG. 17H .
- the client system in some embodiments virtually any interaction with an element outside of the interactive overlay would cause the client system to cease to display the interactive overlay (e.g., selecting a displayed conversation or a contact in the contact window, etc.).
- the interactive overlay ceases to be displayed in response to determining that a predefined time period (e.g., 10 seconds, 30 seconds, 1 minute, or any reasonable time period) has passed since the last time that the user interacted with the interactive overlay.
- a predefined time period e.g. 10 seconds, 30 seconds, 1 minute, or any reasonable time period
- the interactive overlay is only displayed so long as the user is actively using the interactive overlay and ceases to be displayed when the interactive overlay is no longer in use.
- the use of an interactive overlay that automatically ceases to be displayed when it is no longer in use by the user is particularly advantageous in embodiments when screen size is limited and the interactive overlay can be automatically hidden when not needed by the user so as to provide more useable screen space, thereby making operation of the user interface more efficient.
- the client system detects ( 1866 ) a third input that corresponds to selection of an element in the interactive overlay that is linked with content of the third window; performs ( 1868 ) one or more operations (e.g., operations 1870 and/or 1872 ) in response to detecting the third input; and displays ( 1870 ) an interactive overlay including content of the third window, where the interactive overlay is displayed so as to partially overlap the display region.
- the client system in response to detecting the third input, the client system ceases ( 1872 ) to display the interactive overlay including content of the first window.
- a first interactive overlay is displayed, and in response to selection of a link to a second interactive overlay, the client system displays the second interactive overlay.
- the two interactive overlays are displayed simultaneously, while in other embodiments the two interactive overlays are displayed serially (e.g., so that only one interactive overlay is displayed at a time).
- the client system detects selection of an inbox link in a navigation window 7006 - a (e.g., detection of a select gesture while a cursor 7010 is located over the inbox link).
- a representation 7012 - c of the digest window is displayed in the minimized window region 7004
- a first interactive overlay 7014 - c is displayed that includes the content of the digest window (e.g., a list of representations of conversations in the user's inbox), as illustrated in FIG. 17K .
- a respective representation of a conversation in the inbox view e.g., within the interactive overlay 7014 - c in FIG.
- the client system displays a second interactive overlay 7014 - d that includes the content of the conversation (e.g., content of the first conversation), as illustrated in FIG. 17L .
- the client system goes directly from displaying the first interactive overlay 7014 - c , as illustrated in FIG. 17K to displaying the second interactive overlay 7014 - d as illustrated in FIG. 17L .
- the client system while displaying ( 1874 ) the representation of the first window in the minimized window region 7004 , the client system detects ( 1876 ) a third input that corresponds to a request to restore the first window; and in response to the third input, the client device redisplays ( 1878 ) the first window in display region 7002 and ceases to display the representation of the first window in minimized window region 7004 .
- the client system receives a window restore input that corresponds to a request to restore the first window (e.g., a select gesture while a cursor 7010 is located over a restore icon on the representation 7012 - d of the first window).
- the client system redisplays the first conversation 7006 - d in display region 7002 , as illustrated in FIG. 17M .
- the size and/or position of the restored window is determined based at least in part on the size, location and/or number of other windows that are currently displayed within display region 7002 .
- the window is redisplayed at a different size and/or position from the size and position of the window before it was minimized (e.g., the size and position of first conversation window 7006 - d in FIG. 17M is different from the size and position of first conversation window 7006 - d in FIG. 17B ), because the size, position and/or number of other windows in the display region 7002 is different in FIG. 17M than it was in FIG. 17B .
Abstract
Description
-
-
wave identifier 329, which uniquely identifies the wave (i.e., conversation container) in theconversation system 100/200 that corresponds to thewave record 302; -
conversation identifier 330, which in combination with thewave identifier 329 uniquely identifies the conversation in theconversation system 100/200 that corresponds to the conversation record 310 (i.e., a conversation can only be associated with a single wave); -
conversation metadata 322; - conversation log 324 (sometimes called the history log); and
- one or more content contributions 326-1 to 326-n; and
- a history log 360.
-
-
- a content identifier 342 (e.g., a value uniquely identifying the content contribution, either globally within the conversation system, or locally within a particular conversation);
-
content unit metadata 346, identifying characteristics of thecontent contribution 326; - optionally, one or more attachments 344 (e.g., pictures, videos, documents, files, archives, audio, animations, links, etc.); and
- the content 349 (e.g., text, images, document content, etc.) of the
content contribution 326.
-
- a first timestamp 341-1 denoting the date and time the content unit was first created (added to the conversation), and a corresponding sequence number 343-1 corresponding to the state of the conversation when the content unit was first created;
- a last timestamp 341-2 denoting the last date and time that the content unit was edited, and a corresponding sequence number 343-2 corresponding to the state of the conversation when the last edit to the content unit was made; having both the first and last timestamps and sequence numbers is useful (for example) when playing back changes to the content unit, or when playing back changes to a portion of the conversation that includes the content unit; and
- identifiers 352 (e.g., participant addresses) of the content unit's contributors or author(s), optionally ordered by the order of first contributions of each author to the content unit; while most content units have a single author, content units can be written collaboratively, in which case they have multiple authors.
-
-
parent identifier 354 provides an identifier of or pointer to the parent content unit to which this content contribution is a response or reply; -
position 350 provides an indicator of the position of this content unit in a conversation); theposition 350 may be used to govern how the content unit is displayed when displaying two or more content units of the conversation; and - optionally,
siblings 358 of this content contribution (i.e., identifiers or pointers to sibling content units, which are other responses or replies to the parent of this content unit).
-
-
- a
conversation identifier 371; - a
participant address 372, which may also be called a participant identifier; the participant address uniquely identifies the participant among all the participants in conversations in the conversation system 100 (FIG. 1 ); - a per-
user conversation state 373; for example, theconversation state 373 may indicate the read/unread state 374 of this conversation with regard to the respective participant corresponding toparticipant record 362; theconversation state 372 includes information about which content contributions in the conversation, if any, have been viewed by the participant, and which have not yet been viewed; additionally, in some embodiments, for one or more of the content contributions that have been viewed by the participant, the read/unread state 374 for a respective content contribution also includes a respective timestamp corresponding to the time at which the participant last viewed the respective content contribution; - the
conversation state 373 for a conversation participant may includeflags 376; optionally, theflags 376 may include an ignore flag 377 (also sometimes called the mute flag), which if present, indicates that the participant has instructed the conversation system not to notify the participant of updates to the conversation; - the
conversation state 373 for a conversation participant may include private labels (sometimes called “folders” or “folder designations”) 378 assigned by this participant to this conversation, which are for use only by this participant (e.g., when searching for conversations, the participant can include a private label as one of the query terms); private labels can e applied by participants to help organize their conversations and to make it easy to locate conversations based, in part, on what labels have been applied to them; it is noted thattags 325 are public information, available to all participants in a conversation, while the private labels of each participant are private to that participant; - the
conversation state 373 for a conversation participant may include aviewpoint pointer 379, which indicates either the portion of the conversation currently being viewed by the participant (and the position of the user's cursor within a respective content unit if the user is entering or editing a content unit), or the portion of the conversation last viewed by the participant if the participant is not currently displaying or viewing the conversation; - optionally, other metadata related to this respective participant with respect to this particular conversation.
- a
-
- a
user identifier 410 for a subscriber of the hosted conversation system; - user metadata 412, containing information about or for the user;
- a list of
conversations 414 in which the user is a participant; - the user's contact list 416 (typically a list of
contacts 416 that corresponds to and is personal to user); - optionally, labels 418 defined by the user for labeling or classifying conversations;
- optionally, a client device identifier and/or
type 420 of a client device being used by the user to communicate with the conversation server, or alternately, the identifier and type of client devices that the user has used in conjunction with the conversation server in the past; in some embodiments, the type of the client (e.g., desktop, cell phone, etc.) may be used to determine what content from conversations is sent to the user; - optionally,
preferences 422 of the user when participating in aconversation 422; - optionally, an
inverse index 424 associated with the user; - a current
online status 426 of the user (e.g., offline, online, busy, away, etc.); -
authentication information 428 for the user (e.g., username, password, and optionally other values for authentication of the user); - optionally, other data relating to the user, such as one or
more blog URLs 430, email addresses 432, etc.
- a
-
- a conversation identifier 436 that identifies the respective conversation, and
- per-user conversation state information 438, which may be the same as (or a pointer to) the
conversation state 373 in theparticipant record 362 of aconversation record 310. As discussed above, in some embodiments, per-user conversation state information is stored in a separate database or server (sometimes called the user supplement database or server), in which case the user-conversation record 434 includes a conversation identifier 436, but not the per-user conversation state information 438.
-
- an
operating system 710 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a
network communication module 712 that is used for connecting theconversation server 130 to other computers via the one or more communication network interfaces 704 and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; and - a
conversation engine 714 that provides hosted conversation services on theconversation server 130 for a plurality of users; in some embodiments, theconversation engine 714 corresponds toelement 246 ofFIG. 2 .
- an
-
- a search/access module 716 (in some embodiments, this corresponds to
element 260 ofFIG. 2 ), for performing searches of theconversation database 726; the searches of theconversation database 726 may include user-specifiedsearches 718 as well as server-specified searches 720 (e.g., a search for conversations in a user's inbox); - a user database 722 (in some embodiments, this corresponds to element 270 of
FIG. 2 andelement 400 ofFIG. 4 ), for storing information pertaining to users of the system; - user
database management modules 724, for managing the user database 722 (e.g., for creating new user records, and for updating existing user records); - conversation database 726 (in some embodiments, this corresponds to
element 262 ofFIG. 2 andFIG. 3 ); -
conversation management modules 728, for managing theconversation database 726; and - auxiliary services module(s) 250; as noted above, each particular auxiliary service provided in a hosted conversation system may be provided by modules within a
conversation server 130, or by other servers.
- a search/access module 716 (in some embodiments, this corresponds to
-
- a set of
conversation update modules 730, for updating a conversation with changes made by one or more participants, including one or more of: an add/deletecontent module 732, for adding or removing content from a conversation; a splitcontent contribution module 734, for splitting a content contribution (326,FIG. 3A ) in a conversation into two or more separate content contributions; acooperative editing module 736, for enabling simultaneous editing of a conversation or a content contribution (unit of content) by a plurality of participants; and an add new participant toconversation module 738, for adding a new participant to a conversation; -
content playback module 740, for playing back edits to a conversation or document (or a user-specified portion of the conversation or document); -
content formatting module 742, for formatting content to match a configuration of a client; (the configuration of a client for a respective user may be specified by anelement 420,FIG. 4 , of the user record 402 for the respective user); - content publication to
email module 744, for publishing content of a conversation to an email address; the email address may be specified by anelement 432,FIG. 4 , of the user record 402 for the respective user; - content publication to weblog (“blog”)
module 746 for publishing content of a conversation to a weblog; the URL or network location of the weblog may be specified byelement 430,FIG. 4 , of the user record 402 for the respective user) - delete/
archive conversation module 748, for deleting or archiving a conversation from a user's inbox or conversation viewer; - copy attachments to
new conversation module 750, for copying attachments from one conversation to another conversation, without copying other content of the conversation; - transmit
conversation module 752, for transmitting content of a conversation to a client or to another conversation server (e.g., for delivery to a user/client serviced by the other conversation server); - transmit
conversation list module 754, for transmitting a list of conversations to a client or to another conversation server (e.g., for delivery to a user/client serviced by the other conversation server); -
auxiliary services module 756 for providing access to services outside of the conversation server -
user interface updater 758 for sending information to clients that enables the clients to update user interfaces; and - user interface display states 760 for storing information that identifies/records current states of a user interface for one or more users/clients, the user interface display states are updated as the user interface is updated in accordance with inputs received at the client.
- a set of
-
- an
operating system 810 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a
network communication module 812 that is used for connecting theclient 110 to other computers via the one or more communication network interfaces 804 and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; - a browser or
other client application 814 for viewing and interacting with web pages and other content, including conversations in a hosted conversation system; - a
conversation web page 815, which is received from a conversation server (e.g., shown inFIG. 7 ) and is displayed using the browser orother client application 814, which may include aclient conversation module 818 and/or aclient assistant 819 that performs one or more tasks related to assisting a user's activities with respect to theclient application 814 and/or other applications; - a
conversation record 820, which contains the content of a conversation downloaded from a conversation server, some or all of which may be displayed in theconversation web page 815; -
user interface updater 825 for updating a user interface to a current state of the user interface; - a
conversation list 826, which is a list of conversations downloaded from a conversation server (e.g., in response to a query from a user of the client or as part of a user interface displayed within the conversation web page 815); - a
contact list 828, or a portion of the contact list of the user of the client; the contact list may be maintained separately from or in conjunction with a conversation system; - optionally, other data structures 830 (e.g., a list of labels defined by the user), which, in some embodiments, include user interface display states 831, which are updated as the user interface is updated in accordance with inputs received at the client; and
- optionally,
other applications 832 for execution by theclient 110.
- an
-
-
skip 3 - insert element start with tag name “tagName” and attributes [attr1=“value1”, attr2=“value2”]
- insert text “A”
- insert element start with tag name “nested” and attributes
- insert text “B”
- insert element end
- insert text “C”
- insert element end
- delete text 3 (e.g., text cde)
-
-
-
skip 2 - insert element start with tag name “tagName” and attributes [attr1=“value1”, attr2=“value2”]
- insert text “A”
- insert element start with tag name “nested” and attributes
- insert text “B”
- insert element end
- insert text “C”
- insert element end
- delete
text 1
-
-
- 1416: skip 1, insert “Y”,
skip 1, delete 2, skip 2, insert X, resulting in text AYBEFXG,content unit state 1450.
- 1416: skip 1, insert “Y”,
-
- 1452: skip 3, delete 1, insert “N”,
skip 2, insert M, resulting in text AYBNFXMG, end point 1470.
- 1452: skip 3, delete 1, insert “N”,
-
- 1412: skip 3, delete 2, insert “N”,
skip 1, insert “M”, resulting in text ABCNFMG,content unit state 1430.
- 1412: skip 3, delete 2, insert “N”,
-
- 1432: skip 1, insert “Y”,
skip 1, delete 1, skip 2, insert “X”, resulting in text AYBNFXMG, which is the final content unit state 1470.
This is the final content unit state 1470 as the state achieved by applying the first merged sequence of edits and the second transformed merged sequence of edits.
- 1432: skip 1, insert “Y”,
Claims (18)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/094,785 US9026935B1 (en) | 2010-05-28 | 2011-04-26 | Application user interface with an interactive overlay |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US34968910P | 2010-05-28 | 2010-05-28 | |
US13/094,785 US9026935B1 (en) | 2010-05-28 | 2011-04-26 | Application user interface with an interactive overlay |
Publications (1)
Publication Number | Publication Date |
---|---|
US9026935B1 true US9026935B1 (en) | 2015-05-05 |
Family
ID=53001840
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/094,785 Active 2032-02-23 US9026935B1 (en) | 2010-05-28 | 2011-04-26 | Application user interface with an interactive overlay |
Country Status (1)
Country | Link |
---|---|
US (1) | US9026935B1 (en) |
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140215388A1 (en) * | 2013-01-31 | 2014-07-31 | Disney Enterprises, Inc. | Resizable and lockable user interfaces |
US20140317559A1 (en) * | 2012-04-17 | 2014-10-23 | Franz Antonio Wakefield | Method, system, apparatus, and tangible portable interactive electronic device storage medium; that processes custom programs and data for a user by creating, displaying, storing, modifying, performing adaptive learning routines, and multitasking; utilizing cascade windows on an electronic screen display in a mobile electronic intercative device gui (graphical user interface) system |
US20140337788A1 (en) * | 2013-05-08 | 2014-11-13 | Tencent Technology (Shenzhen) Company Limited | Method and device for text message input |
US20150032816A1 (en) * | 2012-05-30 | 2015-01-29 | Sony Corporation | Information processing apparatus, information processing method, and recording medium |
US20150089385A1 (en) * | 2013-09-20 | 2015-03-26 | Oracle International Corporation | Dynamic role-based view definitions in a repository system |
US20150154156A1 (en) * | 2013-12-03 | 2015-06-04 | Microsoft Corporation | Document link previewing and permissioning while composing an email |
US20160042003A1 (en) * | 2014-08-05 | 2016-02-11 | Shahbaz Anwar | Enhanced internally linked electronic paper format report generation system and process |
USD756397S1 (en) * | 2014-04-04 | 2016-05-17 | Adp, Llc | Display screen or portion thereof with a graphical user interface |
US9460073B2 (en) | 2013-02-27 | 2016-10-04 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
USD770489S1 (en) * | 2014-05-02 | 2016-11-01 | Microsoft Corporation | Display screen with transitional graphical user interface |
USD777190S1 (en) * | 2015-03-30 | 2017-01-24 | Captioncall, Llc | Display screen of a captioning communication device with graphical user interface |
USD777188S1 (en) * | 2015-03-30 | 2017-01-24 | Captioncall, Llc | Display screen of a captioning communication device with graphical user interface |
USD777189S1 (en) * | 2015-03-30 | 2017-01-24 | Captioncall, Llc | Display screen of a captioning communication device with graphical user interface |
USD799526S1 (en) | 2014-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
US9819877B1 (en) | 2016-12-30 | 2017-11-14 | Microsoft Technology Licensing, Llc | Graphical transitions of displayed content based on a change of state in a teleconference session |
US9827714B1 (en) | 2014-05-16 | 2017-11-28 | Google Llc | Method and system for 3-D printing of 3-D object models in interactive content items |
CN109444801A (en) * | 2018-10-25 | 2019-03-08 | 国网浙江乐清市供电有限公司 | A kind of device being conducive to the carrying of misconnection line detector |
US10749831B2 (en) | 2017-12-15 | 2020-08-18 | Microsoft Technology Licensing, Llc | Link with permission protected data preview |
US10897435B2 (en) * | 2017-04-14 | 2021-01-19 | Wistron Corporation | Instant messaging method and system, and electronic apparatus |
CN112783406A (en) * | 2021-01-26 | 2021-05-11 | 维沃移动通信有限公司 | Operation execution method and device and electronic equipment |
CN113407268A (en) * | 2021-05-07 | 2021-09-17 | 北京奇艺世纪科技有限公司 | Interactive window display method and device, electronic equipment and storage medium |
US11134147B2 (en) * | 2017-11-14 | 2021-09-28 | Fujifilm Business Innovation Corp. | Information processing apparatus, non-transitory computer readable medium and method for processing information |
US20210352059A1 (en) * | 2014-11-04 | 2021-11-11 | Huawei Technologies Co., Ltd. | Message Display Method, Apparatus, and Device |
US11748592B1 (en) * | 2016-02-05 | 2023-09-05 | Storyfile, Inc. | Devices, systems, and methods for learning and using artificially intelligent interactive memories |
US11797172B2 (en) | 2015-03-06 | 2023-10-24 | Alibaba Group Holding Limited | Method and apparatus for interacting with content through overlays |
Citations (117)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5532715A (en) | 1991-10-16 | 1996-07-02 | International Business Machines Corporation | Visually aging scroll bar |
US5671428A (en) | 1991-08-28 | 1997-09-23 | Kabushiki Kaisha Toshiba | Collaborative document processing system with version and comment management |
US5712995A (en) * | 1995-09-20 | 1998-01-27 | Galileo Frames, Inc. | Non-overlapping tiling apparatus and method for multiple window displays |
US5867678A (en) | 1996-12-16 | 1999-02-02 | International Business Machines Corporation | Method and system for searching and retrieving specific types of objects contained within a compound document |
US5900872A (en) | 1995-05-05 | 1999-05-04 | Apple Computer, Inc. | Method and apparatus for controlling the tracking of movable control elements in a graphical user interface |
US6006239A (en) | 1996-03-15 | 1999-12-21 | Microsoft Corporation | Method and system for allowing multiple users to simultaneously edit a spreadsheet |
US6181736B1 (en) | 1997-03-25 | 2001-01-30 | Nxi Communications, Inc. | Network communication system |
US6212548B1 (en) | 1998-07-30 | 2001-04-03 | At & T Corp | System and method for multiple asynchronous text chat conversations |
US20010013029A1 (en) | 1998-09-18 | 2001-08-09 | David L. Gilmour | Method of constructing and displaying an entity profile constructed utilizing input from entities other than the owner |
US20020145631A1 (en) | 2001-04-05 | 2002-10-10 | International Business Machines Corporation | System and method for creating markers on scroll bars of a graphical user interface |
US20020163545A1 (en) * | 2001-05-01 | 2002-11-07 | Hii Samuel S. | Method of previewing web page content while interacting with multiple web page controls |
US20030182450A1 (en) | 2002-03-05 | 2003-09-25 | Ong Herbert T. | Generic Infrastructure for converting documents between formats with merge capabilities |
US20030193524A1 (en) * | 1999-03-25 | 2003-10-16 | International Business Machines Corporation | Window scroll bar |
US20040019701A1 (en) | 2002-07-25 | 2004-01-29 | International Business Machines Corporation | Instant messaging blind join |
US6693652B1 (en) | 1999-09-28 | 2004-02-17 | Ricoh Company, Ltd. | System and method for automatic generation of visual representations and links in a hierarchical messaging system |
US20040162877A1 (en) | 2003-02-19 | 2004-08-19 | Van Dok Cornelis K. | User interface and content enhancements for real-time communication |
US20040189712A1 (en) | 2003-03-27 | 2004-09-30 | International Business Machines Corporation | Method and apparatus for managing windows |
US20040260974A1 (en) | 2003-06-17 | 2004-12-23 | Microsoft Corporation | Method and system for undoing changes in a software configuration management system |
US20050010871A1 (en) * | 2000-06-21 | 2005-01-13 | Microsoft Corporation | Single window navigation methods and systems |
US20050076068A1 (en) | 2003-09-22 | 2005-04-07 | Fowler Paul C. | System and method of synchronizing data in multi-user computer network |
US20050108402A1 (en) | 2003-11-13 | 2005-05-19 | International Business Machines Corporation | System and method enabling future messaging directives based on past participation via a history monitor |
US6915336B1 (en) | 1998-06-05 | 2005-07-05 | Instant Services.Com, Inc. | Real time internet communication system |
US20050149879A1 (en) * | 2000-01-04 | 2005-07-07 | Apple Computer, Inc. | Computer interface having a single window mode of operation |
US20050166154A1 (en) | 2004-01-22 | 2005-07-28 | Wilson Richard M. | Enhanced instant message status message area containing time/date stamped entries and editable by others |
CN1701326A (en) | 2003-08-07 | 2005-11-23 | 国际商业机器公司 | Collaborative email |
WO2005112374A1 (en) | 2004-05-14 | 2005-11-24 | Philips Intellectual Property & Standards Gmbh | Method for transmitting messages from a sender to a recipient, a messaging system and message converting means |
US20060026502A1 (en) | 2004-07-28 | 2006-02-02 | Koushik Dutta | Document collaboration system |
US20060053194A1 (en) | 2004-09-03 | 2006-03-09 | Schneider Ronald E | Systems and methods for collaboration |
US20060080432A1 (en) | 2004-09-03 | 2006-04-13 | Spataro Jared M | Systems and methods for collaboration |
US20060117247A1 (en) | 2004-11-30 | 2006-06-01 | Fite William R | Web based data collaboration tool |
US20060123353A1 (en) * | 2004-12-08 | 2006-06-08 | Microsoft Corporation | Method and system of taskbar button interfaces |
US20060136821A1 (en) | 2004-12-20 | 2006-06-22 | Microsoft Corporation | Method and system for highlighting modified content in a shared document |
US20060136511A1 (en) | 2004-12-21 | 2006-06-22 | Nextpage, Inc. | Storage-and transport-independent collaborative document-management system |
US20060161516A1 (en) | 2005-01-14 | 2006-07-20 | Microsoft Corporation | Method and system for synchronizing multiple user revisions to a shared object |
US20060161859A1 (en) * | 2005-01-18 | 2006-07-20 | Microsoft Corporation | Multi-application tabbing system |
US7111044B2 (en) | 2002-07-17 | 2006-09-19 | Fastmobile, Inc. | Method and system for displaying group chat sessions on wireless mobile terminals |
US20060268020A1 (en) | 2005-05-25 | 2006-11-30 | Samsung Electronics Co., Ltd. | Scrolling method and apparatus using plurality of blocks into which items are classified |
US20060277210A1 (en) | 2005-06-06 | 2006-12-07 | Microsoft Corporation | Keyword-driven assistance |
US7188140B1 (en) | 2002-03-13 | 2007-03-06 | At&T Corp. | System and method for providing enhanced persistent communications |
US7188315B2 (en) * | 2002-12-02 | 2007-03-06 | Tatung Co., Ltd. | Method of establishing a customized webpage desktop |
US7222156B2 (en) | 2001-01-25 | 2007-05-22 | Microsoft Corporation | Integrating collaborative messaging into an electronic mail program |
CN1971551A (en) | 2005-11-24 | 2007-05-30 | 国际商业机器公司 | Methods, apparatus for achieving text summarization |
US20070124387A1 (en) | 2005-11-22 | 2007-05-31 | Yahoo! Inc. | Previous communication updating in instant messaging |
US20070136270A1 (en) | 2005-07-27 | 2007-06-14 | John Harney | System and method for providing profile matching with an unstructured document |
US20070136662A1 (en) | 2003-12-23 | 2007-06-14 | Onedoc Limited | Editable information management system and method |
US7233951B1 (en) | 2004-02-18 | 2007-06-19 | Microsoft Corporation | Spreadsheet grid-like control for a web-based collaboration system |
US20070198648A1 (en) | 2006-02-23 | 2007-08-23 | International Business Machines, Corporation | System and method for displaying IM session history as time-based calendar events |
US20070203886A1 (en) | 2002-06-18 | 2007-08-30 | Epstein Kevin A | Method and apparatus for accelerating and improving access to network files |
US20070214121A1 (en) | 2006-03-09 | 2007-09-13 | Customerforce.Com | Ranking search results presented to on-line users as a function of perspectives of relationships trusted by the users |
US7272641B2 (en) | 2001-07-03 | 2007-09-18 | Canon Kabushiki Kaisha | Image information managing system |
US20070233811A1 (en) | 2006-03-31 | 2007-10-04 | Jonathan Rochelle | Collaborative online spreadsheet application |
US20070250506A1 (en) | 2006-04-21 | 2007-10-25 | Microsoft Corporation | Tracking and editing a resource in a real-time collaborative session |
US20070271340A1 (en) | 2006-05-16 | 2007-11-22 | Goodman Brian D | Context Enhanced Messaging and Collaboration System |
US20070294428A1 (en) | 2006-06-19 | 2007-12-20 | Ido Guy | Method and System for Email Messaging |
US20080037726A1 (en) | 2006-07-21 | 2008-02-14 | Rose Yao | Method and System for Integrating Voicemail and Electronic Messaging |
US20080066106A1 (en) | 2006-07-31 | 2008-03-13 | Guideworks, Llc | Systems and methods for providing media guidance planners |
CN101193070A (en) | 2006-12-13 | 2008-06-04 | 腾讯科技（深圳）有限公司 | Instant communication system, instant communication client and instant communication method |
US20080147695A1 (en) | 2006-12-15 | 2008-06-19 | Masek William J | A scalable method and system for providing real time indications of currently open documents |
US20080172607A1 (en) | 2007-01-15 | 2008-07-17 | Microsoft Corporation | Selective Undo of Editing Operations Performed on Data Objects |
US20080178076A1 (en) | 2007-01-18 | 2008-07-24 | Barry Alan Kritt | Method and apparatus for spellchecking electronic documents |
US20080184157A1 (en) * | 2007-01-30 | 2008-07-31 | Oracle International Corp. | Enterprise web browser extension |
US20080215588A1 (en) | 2007-03-02 | 2008-09-04 | Toshiba Europe Gmbh | Electronic object sharing system |
US20080250114A1 (en) | 2005-10-14 | 2008-10-09 | International Business Machines Corporation | Mitigating address book weaknesses that permit the sending of e-mail to wrong addresses |
US20080250329A1 (en) | 2007-04-05 | 2008-10-09 | Mark Jeffrey Stefik | Method and system for the collaborative analysis of information |
US20090006936A1 (en) | 2007-06-29 | 2009-01-01 | Microsoft Corporation | Collaborative document authoring |
US20090037409A1 (en) | 2007-08-03 | 2009-02-05 | Oracle International Corporation | Method and system for information retrieval |
US20090041217A1 (en) | 2007-05-16 | 2009-02-12 | Unison Technologies Llc | Systems and methods for providing unified collaboration systems with combined communication log |
US20090043848A1 (en) | 2007-08-11 | 2009-02-12 | Alexander Kordun | Method and system for providing collaborative moderation and correction of message history in an instant mesaging session |
US20090055483A1 (en) | 2007-08-20 | 2009-02-26 | Rooma Madan | Enhanced Collaboration in Instant Messaging |
US20090070687A1 (en) * | 2007-09-12 | 2009-03-12 | Richard James Mazzaferri | Methods and Systems for Providing, by a Remote Machine, Access to a Desk Band Associated with a Resource Executing on a Local Machine |
US20090070301A1 (en) | 2007-08-28 | 2009-03-12 | Lexisnexis Group | Document search tool |
US20090073888A1 (en) | 2007-09-13 | 2009-03-19 | Microsoft Coporation | Determining quality of communication |
US20090112937A1 (en) | 2007-10-26 | 2009-04-30 | Microsoft Corporation | Spreadsheet collaboration between rich and browser clients |
US20090138828A1 (en) | 2005-10-11 | 2009-05-28 | Aol Llc | Ordering of conversations based on monitored recipient user interaction with corresponding electronic messages |
US20090157811A1 (en) | 2007-12-14 | 2009-06-18 | Microsoft Corporation | Collaborative Authoring Modes |
US20090168760A1 (en) | 2007-10-19 | 2009-07-02 | Rebelvox, Llc | Method and system for real-time synchronization across a distributed services communication network |
US20090177744A1 (en) | 2008-01-04 | 2009-07-09 | Yahoo! Inc. | Identifying and employing social network relationships |
US20090183107A1 (en) * | 2008-01-16 | 2009-07-16 | Microsoft Corporation | Window minimization trigger |
US20090192845A1 (en) | 2008-01-30 | 2009-07-30 | Microsoft Corporation | Integrated real time collaboration experiences with online workspace |
US20090199127A1 (en) * | 2008-01-31 | 2009-08-06 | Microsoft Corporation | Previewing target display areas |
US20090199274A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | method and system for collaboration during an event |
US20090228555A1 (en) | 2008-03-08 | 2009-09-10 | International Business Machines Corporation | Automated contact list determination based on collaboration history |
US20090234876A1 (en) | 2008-03-14 | 2009-09-17 | Timothy Schigel | Systems and methods for content sharing |
US20090235181A1 (en) | 2008-03-14 | 2009-09-17 | Microsoft Corporation | Web-based multiuser collaboration |
US20090248497A1 (en) | 2008-04-01 | 2009-10-01 | Certona Corporation | System and method for quantifying and detecting non-normative behavior |
US20090271696A1 (en) | 2008-04-28 | 2009-10-29 | Microsoft Corporation | Conflict Resolution |
US20090271806A1 (en) | 2008-04-28 | 2009-10-29 | Microsoft Corporation | Techniques to modify a document using a latent transfer surface |
US20090276471A1 (en) | 2008-05-05 | 2009-11-05 | Microsoft Corporation | Automatically Capturing and Maintaining Versions of Documents |
US20090275412A1 (en) | 2008-05-05 | 2009-11-05 | Microsoft Corporation | Multiple-player collaborative content editing |
US20090307345A1 (en) | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Automated digital media content filtration based on relationship monitoring |
US20090313331A1 (en) | 2008-06-13 | 2009-12-17 | Microsoft Corporation | Merging versions of documents using multiple masters |
US20090319910A1 (en) | 2008-06-22 | 2009-12-24 | Microsoft Corporation | Automatic content and author emphasis for shared data |
US20090327448A1 (en) | 2008-06-27 | 2009-12-31 | Microsoft Corporation | Peer-to-peer synchronous content selection |
US20100011373A1 (en) | 2008-07-08 | 2010-01-14 | Nortel Networks Limited | Shared Persistent Communication Thread |
US20100017194A1 (en) | 2008-07-17 | 2010-01-21 | Mette Hammer | System and method for suggesting recipients in electronic messages |
US20100023557A1 (en) | 2008-07-28 | 2010-01-28 | Novell, Inc. | System and method to extend a file manager user interface |
US20100107115A1 (en) * | 2008-10-27 | 2010-04-29 | Microsoft Corporation | Child window surfacing and management |
US20100125791A1 (en) | 2008-11-14 | 2010-05-20 | Rebelvox, Llc | User interface for a telecommunication and multimedia management system and method |
US7734589B1 (en) | 2005-09-16 | 2010-06-08 | Qurio Holdings, Inc. | System and method for optimizing data uploading in a network based media sharing system |
US20100169269A1 (en) | 2008-12-30 | 2010-07-01 | Karthik Chandrasekaran | Systems and methods for providing collaborative editing |
US20100174783A1 (en) | 2007-10-12 | 2010-07-08 | Rony Zarom | System and method for coordinating simultaneous edits of shared digital data |
US20100180218A1 (en) | 2009-01-15 | 2010-07-15 | International Business Machines Corporation | Editing metadata in a social network |
US7770130B1 (en) | 2002-02-07 | 2010-08-03 | Viktor Kaptelinin | Non-distracting temporary visual clues for scrolling |
US7774703B2 (en) | 2006-02-09 | 2010-08-10 | Microsoft Corporation | Virtual shadow awareness for multi-user editors |
US20100217808A1 (en) | 2009-02-24 | 2010-08-26 | Research In Motion Limited | System and method for switching between conversations in instant messaging applications |
US20100223345A1 (en) | 2009-03-02 | 2010-09-02 | Microsoft Corporation | Communications application having conversation and meeting environments |
US20100235216A1 (en) | 2009-03-16 | 2010-09-16 | Microsoft Corporation | Integration of pre-meeting and post-meeting experience into a meeting lifecycle |
US20100235354A1 (en) | 2009-03-12 | 2010-09-16 | International Business Machines Corporation | Collaborative search engine system |
US20100306185A1 (en) | 2009-06-02 | 2010-12-02 | Xobni, Inc. | Self Populating Address Book |
US20100306669A1 (en) | 2005-11-30 | 2010-12-02 | Roberto Della Pasqua S.R.L. | Instant messaging service with minimized user interface |
US20110010447A1 (en) | 2009-07-10 | 2011-01-13 | Novell, Inc. | Auto generated and inferred group chat presence |
US20110083079A1 (en) | 2009-10-02 | 2011-04-07 | International Business Machines Corporation | Apparatus, system, and method for improved type-ahead functionality in a type-ahead field based on activity of a user within a user interface |
US7949633B1 (en) | 2008-05-12 | 2011-05-24 | Adobe Systems Incorporated | Shared edit access of electronic content |
US8086679B2 (en) | 2007-10-05 | 2011-12-27 | Sony Corporation | Information processing unit, content providing server, communication relay server, information processing method, content providing method and communication relay method |
US8555185B2 (en) * | 2009-06-08 | 2013-10-08 | Apple Inc. | User interface for multiple display regions |
US8893038B2 (en) * | 2006-10-03 | 2014-11-18 | International Business Machines Corporation | Graphical association of task bar entries with corresponding desktop locations |
US8910067B1 (en) * | 2007-08-10 | 2014-12-09 | The Clic, Inc. | Interactive information display through widgets |
-
2011
- 2011-04-26 US US13/094,785 patent/US9026935B1/en active Active
Patent Citations (121)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5671428A (en) | 1991-08-28 | 1997-09-23 | Kabushiki Kaisha Toshiba | Collaborative document processing system with version and comment management |
US5532715A (en) | 1991-10-16 | 1996-07-02 | International Business Machines Corporation | Visually aging scroll bar |
US5900872A (en) | 1995-05-05 | 1999-05-04 | Apple Computer, Inc. | Method and apparatus for controlling the tracking of movable control elements in a graphical user interface |
US5712995A (en) * | 1995-09-20 | 1998-01-27 | Galileo Frames, Inc. | Non-overlapping tiling apparatus and method for multiple window displays |
US6006239A (en) | 1996-03-15 | 1999-12-21 | Microsoft Corporation | Method and system for allowing multiple users to simultaneously edit a spreadsheet |
US5867678A (en) | 1996-12-16 | 1999-02-02 | International Business Machines Corporation | Method and system for searching and retrieving specific types of objects contained within a compound document |
US6181736B1 (en) | 1997-03-25 | 2001-01-30 | Nxi Communications, Inc. | Network communication system |
US6915336B1 (en) | 1998-06-05 | 2005-07-05 | Instant Services.Com, Inc. | Real time internet communication system |
US6212548B1 (en) | 1998-07-30 | 2001-04-03 | At & T Corp | System and method for multiple asynchronous text chat conversations |
US20010013029A1 (en) | 1998-09-18 | 2001-08-09 | David L. Gilmour | Method of constructing and displaying an entity profile constructed utilizing input from entities other than the owner |
US20030193524A1 (en) * | 1999-03-25 | 2003-10-16 | International Business Machines Corporation | Window scroll bar |
US6693652B1 (en) | 1999-09-28 | 2004-02-17 | Ricoh Company, Ltd. | System and method for automatic generation of visual representations and links in a hierarchical messaging system |
US20050149879A1 (en) * | 2000-01-04 | 2005-07-07 | Apple Computer, Inc. | Computer interface having a single window mode of operation |
US20050010871A1 (en) * | 2000-06-21 | 2005-01-13 | Microsoft Corporation | Single window navigation methods and systems |
US7222156B2 (en) | 2001-01-25 | 2007-05-22 | Microsoft Corporation | Integrating collaborative messaging into an electronic mail program |
US20020145631A1 (en) | 2001-04-05 | 2002-10-10 | International Business Machines Corporation | System and method for creating markers on scroll bars of a graphical user interface |
US20020163545A1 (en) * | 2001-05-01 | 2002-11-07 | Hii Samuel S. | Method of previewing web page content while interacting with multiple web page controls |
US7272641B2 (en) | 2001-07-03 | 2007-09-18 | Canon Kabushiki Kaisha | Image information managing system |
US7770130B1 (en) | 2002-02-07 | 2010-08-03 | Viktor Kaptelinin | Non-distracting temporary visual clues for scrolling |
US20030182450A1 (en) | 2002-03-05 | 2003-09-25 | Ong Herbert T. | Generic Infrastructure for converting documents between formats with merge capabilities |
US7188140B1 (en) | 2002-03-13 | 2007-03-06 | At&T Corp. | System and method for providing enhanced persistent communications |
US20070203886A1 (en) | 2002-06-18 | 2007-08-30 | Epstein Kevin A | Method and apparatus for accelerating and improving access to network files |
US7111044B2 (en) | 2002-07-17 | 2006-09-19 | Fastmobile, Inc. | Method and system for displaying group chat sessions on wireless mobile terminals |
US20040019701A1 (en) | 2002-07-25 | 2004-01-29 | International Business Machines Corporation | Instant messaging blind join |
US7188315B2 (en) * | 2002-12-02 | 2007-03-06 | Tatung Co., Ltd. | Method of establishing a customized webpage desktop |
US20040162877A1 (en) | 2003-02-19 | 2004-08-19 | Van Dok Cornelis K. | User interface and content enhancements for real-time communication |
US20040189712A1 (en) | 2003-03-27 | 2004-09-30 | International Business Machines Corporation | Method and apparatus for managing windows |
US20040260974A1 (en) | 2003-06-17 | 2004-12-23 | Microsoft Corporation | Method and system for undoing changes in a software configuration management system |
US20090083384A1 (en) | 2003-08-07 | 2009-03-26 | International Business Machines Corporation | Collaborative Email With Hierachical Signature Authority |
CN1701326A (en) | 2003-08-07 | 2005-11-23 | 国际商业机器公司 | Collaborative email |
US20050076068A1 (en) | 2003-09-22 | 2005-04-07 | Fowler Paul C. | System and method of synchronizing data in multi-user computer network |
US20050108402A1 (en) | 2003-11-13 | 2005-05-19 | International Business Machines Corporation | System and method enabling future messaging directives based on past participation via a history monitor |
US20070136662A1 (en) | 2003-12-23 | 2007-06-14 | Onedoc Limited | Editable information management system and method |
US20050166154A1 (en) | 2004-01-22 | 2005-07-28 | Wilson Richard M. | Enhanced instant message status message area containing time/date stamped entries and editable by others |
US7233951B1 (en) | 2004-02-18 | 2007-06-19 | Microsoft Corporation | Spreadsheet grid-like control for a web-based collaboration system |
WO2005112374A1 (en) | 2004-05-14 | 2005-11-24 | Philips Intellectual Property & Standards Gmbh | Method for transmitting messages from a sender to a recipient, a messaging system and message converting means |
US20060026502A1 (en) | 2004-07-28 | 2006-02-02 | Koushik Dutta | Document collaboration system |
US20060080432A1 (en) | 2004-09-03 | 2006-04-13 | Spataro Jared M | Systems and methods for collaboration |
US20060053194A1 (en) | 2004-09-03 | 2006-03-09 | Schneider Ronald E | Systems and methods for collaboration |
US20060117247A1 (en) | 2004-11-30 | 2006-06-01 | Fite William R | Web based data collaboration tool |
US20100077338A1 (en) * | 2004-12-08 | 2010-03-25 | Microsoft Corporation | Method and system of taskbar button interfaces |
US20060123353A1 (en) * | 2004-12-08 | 2006-06-08 | Microsoft Corporation | Method and system of taskbar button interfaces |
US20060136821A1 (en) | 2004-12-20 | 2006-06-22 | Microsoft Corporation | Method and system for highlighting modified content in a shared document |
US20060136511A1 (en) | 2004-12-21 | 2006-06-22 | Nextpage, Inc. | Storage-and transport-independent collaborative document-management system |
US20060161516A1 (en) | 2005-01-14 | 2006-07-20 | Microsoft Corporation | Method and system for synchronizing multiple user revisions to a shared object |
US20060161859A1 (en) * | 2005-01-18 | 2006-07-20 | Microsoft Corporation | Multi-application tabbing system |
US20060268020A1 (en) | 2005-05-25 | 2006-11-30 | Samsung Electronics Co., Ltd. | Scrolling method and apparatus using plurality of blocks into which items are classified |
US20060277210A1 (en) | 2005-06-06 | 2006-12-07 | Microsoft Corporation | Keyword-driven assistance |
US20070136270A1 (en) | 2005-07-27 | 2007-06-14 | John Harney | System and method for providing profile matching with an unstructured document |
US7734589B1 (en) | 2005-09-16 | 2010-06-08 | Qurio Holdings, Inc. | System and method for optimizing data uploading in a network based media sharing system |
US20090138828A1 (en) | 2005-10-11 | 2009-05-28 | Aol Llc | Ordering of conversations based on monitored recipient user interaction with corresponding electronic messages |
US20080250114A1 (en) | 2005-10-14 | 2008-10-09 | International Business Machines Corporation | Mitigating address book weaknesses that permit the sending of e-mail to wrong addresses |
US20070124387A1 (en) | 2005-11-22 | 2007-05-31 | Yahoo! Inc. | Previous communication updating in instant messaging |
CN1971551A (en) | 2005-11-24 | 2007-05-30 | 国际商业机器公司 | Methods, apparatus for achieving text summarization |
US20070130257A1 (en) | 2005-11-24 | 2007-06-07 | International Business Machines Corporation | Methods, apparatus and program products for achieving text summarization |
US20100306669A1 (en) | 2005-11-30 | 2010-12-02 | Roberto Della Pasqua S.R.L. | Instant messaging service with minimized user interface |
US7774703B2 (en) | 2006-02-09 | 2010-08-10 | Microsoft Corporation | Virtual shadow awareness for multi-user editors |
US20070198648A1 (en) | 2006-02-23 | 2007-08-23 | International Business Machines, Corporation | System and method for displaying IM session history as time-based calendar events |
US20070214121A1 (en) | 2006-03-09 | 2007-09-13 | Customerforce.Com | Ranking search results presented to on-line users as a function of perspectives of relationships trusted by the users |
US20070233811A1 (en) | 2006-03-31 | 2007-10-04 | Jonathan Rochelle | Collaborative online spreadsheet application |
US20070250506A1 (en) | 2006-04-21 | 2007-10-25 | Microsoft Corporation | Tracking and editing a resource in a real-time collaborative session |
US20070271340A1 (en) | 2006-05-16 | 2007-11-22 | Goodman Brian D | Context Enhanced Messaging and Collaboration System |
US20070294428A1 (en) | 2006-06-19 | 2007-12-20 | Ido Guy | Method and System for Email Messaging |
US20080037726A1 (en) | 2006-07-21 | 2008-02-14 | Rose Yao | Method and System for Integrating Voicemail and Electronic Messaging |
US20080066106A1 (en) | 2006-07-31 | 2008-03-13 | Guideworks, Llc | Systems and methods for providing media guidance planners |
US8893038B2 (en) * | 2006-10-03 | 2014-11-18 | International Business Machines Corporation | Graphical association of task bar entries with corresponding desktop locations |
CN101193070A (en) | 2006-12-13 | 2008-06-04 | 腾讯科技（深圳）有限公司 | Instant communication system, instant communication client and instant communication method |
US20080147695A1 (en) | 2006-12-15 | 2008-06-19 | Masek William J | A scalable method and system for providing real time indications of currently open documents |
US20080172607A1 (en) | 2007-01-15 | 2008-07-17 | Microsoft Corporation | Selective Undo of Editing Operations Performed on Data Objects |
US20080178076A1 (en) | 2007-01-18 | 2008-07-24 | Barry Alan Kritt | Method and apparatus for spellchecking electronic documents |
US20080184157A1 (en) * | 2007-01-30 | 2008-07-31 | Oracle International Corp. | Enterprise web browser extension |
US20080215588A1 (en) | 2007-03-02 | 2008-09-04 | Toshiba Europe Gmbh | Electronic object sharing system |
US20080250329A1 (en) | 2007-04-05 | 2008-10-09 | Mark Jeffrey Stefik | Method and system for the collaborative analysis of information |
US20090041217A1 (en) | 2007-05-16 | 2009-02-12 | Unison Technologies Llc | Systems and methods for providing unified collaboration systems with combined communication log |
US7933952B2 (en) | 2007-06-29 | 2011-04-26 | Microsoft Corporation | Collaborative document authoring |
US20090006936A1 (en) | 2007-06-29 | 2009-01-01 | Microsoft Corporation | Collaborative document authoring |
US20090037409A1 (en) | 2007-08-03 | 2009-02-05 | Oracle International Corporation | Method and system for information retrieval |
US8910067B1 (en) * | 2007-08-10 | 2014-12-09 | The Clic, Inc. | Interactive information display through widgets |
US20090043848A1 (en) | 2007-08-11 | 2009-02-12 | Alexander Kordun | Method and system for providing collaborative moderation and correction of message history in an instant mesaging session |
US20090055483A1 (en) | 2007-08-20 | 2009-02-26 | Rooma Madan | Enhanced Collaboration in Instant Messaging |
US20090070301A1 (en) | 2007-08-28 | 2009-03-12 | Lexisnexis Group | Document search tool |
US20090070687A1 (en) * | 2007-09-12 | 2009-03-12 | Richard James Mazzaferri | Methods and Systems for Providing, by a Remote Machine, Access to a Desk Band Associated with a Resource Executing on a Local Machine |
US20090073888A1 (en) | 2007-09-13 | 2009-03-19 | Microsoft Coporation | Determining quality of communication |
US8086679B2 (en) | 2007-10-05 | 2011-12-27 | Sony Corporation | Information processing unit, content providing server, communication relay server, information processing method, content providing method and communication relay method |
US20100174783A1 (en) | 2007-10-12 | 2010-07-08 | Rony Zarom | System and method for coordinating simultaneous edits of shared digital data |
US20090168760A1 (en) | 2007-10-19 | 2009-07-02 | Rebelvox, Llc | Method and system for real-time synchronization across a distributed services communication network |
US20090112937A1 (en) | 2007-10-26 | 2009-04-30 | Microsoft Corporation | Spreadsheet collaboration between rich and browser clients |
US20090157811A1 (en) | 2007-12-14 | 2009-06-18 | Microsoft Corporation | Collaborative Authoring Modes |
US20090177744A1 (en) | 2008-01-04 | 2009-07-09 | Yahoo! Inc. | Identifying and employing social network relationships |
US20090183107A1 (en) * | 2008-01-16 | 2009-07-16 | Microsoft Corporation | Window minimization trigger |
US20090192845A1 (en) | 2008-01-30 | 2009-07-30 | Microsoft Corporation | Integrated real time collaboration experiences with online workspace |
US20090199127A1 (en) * | 2008-01-31 | 2009-08-06 | Microsoft Corporation | Previewing target display areas |
US20090199274A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | method and system for collaboration during an event |
US20090228555A1 (en) | 2008-03-08 | 2009-09-10 | International Business Machines Corporation | Automated contact list determination based on collaboration history |
US20090235181A1 (en) | 2008-03-14 | 2009-09-17 | Microsoft Corporation | Web-based multiuser collaboration |
US20090234876A1 (en) | 2008-03-14 | 2009-09-17 | Timothy Schigel | Systems and methods for content sharing |
US20090248497A1 (en) | 2008-04-01 | 2009-10-01 | Certona Corporation | System and method for quantifying and detecting non-normative behavior |
US20090271696A1 (en) | 2008-04-28 | 2009-10-29 | Microsoft Corporation | Conflict Resolution |
US20090271806A1 (en) | 2008-04-28 | 2009-10-29 | Microsoft Corporation | Techniques to modify a document using a latent transfer surface |
US20090275412A1 (en) | 2008-05-05 | 2009-11-05 | Microsoft Corporation | Multiple-player collaborative content editing |
US20090276471A1 (en) | 2008-05-05 | 2009-11-05 | Microsoft Corporation | Automatically Capturing and Maintaining Versions of Documents |
US7949633B1 (en) | 2008-05-12 | 2011-05-24 | Adobe Systems Incorporated | Shared edit access of electronic content |
US20090307345A1 (en) | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Automated digital media content filtration based on relationship monitoring |
US20090313331A1 (en) | 2008-06-13 | 2009-12-17 | Microsoft Corporation | Merging versions of documents using multiple masters |
US20090319910A1 (en) | 2008-06-22 | 2009-12-24 | Microsoft Corporation | Automatic content and author emphasis for shared data |
US20090327448A1 (en) | 2008-06-27 | 2009-12-31 | Microsoft Corporation | Peer-to-peer synchronous content selection |
US20100011373A1 (en) | 2008-07-08 | 2010-01-14 | Nortel Networks Limited | Shared Persistent Communication Thread |
US20100017194A1 (en) | 2008-07-17 | 2010-01-21 | Mette Hammer | System and method for suggesting recipients in electronic messages |
US20100023557A1 (en) | 2008-07-28 | 2010-01-28 | Novell, Inc. | System and method to extend a file manager user interface |
US20100107115A1 (en) * | 2008-10-27 | 2010-04-29 | Microsoft Corporation | Child window surfacing and management |
US20100125791A1 (en) | 2008-11-14 | 2010-05-20 | Rebelvox, Llc | User interface for a telecommunication and multimedia management system and method |
US20100169269A1 (en) | 2008-12-30 | 2010-07-01 | Karthik Chandrasekaran | Systems and methods for providing collaborative editing |
US20100180218A1 (en) | 2009-01-15 | 2010-07-15 | International Business Machines Corporation | Editing metadata in a social network |
US20100217808A1 (en) | 2009-02-24 | 2010-08-26 | Research In Motion Limited | System and method for switching between conversations in instant messaging applications |
US20100223345A1 (en) | 2009-03-02 | 2010-09-02 | Microsoft Corporation | Communications application having conversation and meeting environments |
US20100235354A1 (en) | 2009-03-12 | 2010-09-16 | International Business Machines Corporation | Collaborative search engine system |
US20100235216A1 (en) | 2009-03-16 | 2010-09-16 | Microsoft Corporation | Integration of pre-meeting and post-meeting experience into a meeting lifecycle |
US20100306185A1 (en) | 2009-06-02 | 2010-12-02 | Xobni, Inc. | Self Populating Address Book |
US8555185B2 (en) * | 2009-06-08 | 2013-10-08 | Apple Inc. | User interface for multiple display regions |
US20110010447A1 (en) | 2009-07-10 | 2011-01-13 | Novell, Inc. | Auto generated and inferred group chat presence |
US20110083079A1 (en) | 2009-10-02 | 2011-04-07 | International Business Machines Corporation | Apparatus, system, and method for improved type-ahead functionality in a type-ahead field based on activity of a user within a user interface |
Non-Patent Citations (39)
Title |
---|
Agarwal, A., "Copy Pictures from Flickr to Picasa Web Albums (or vice-versa)", www.KodakGallery.com/Photo-Albums, Jul. 30, 2007, 2 pages. |
Cayenne-McCall, Synchronous 3D Document Collaboration, Nov. 2008, pp. 1-38. |
Comer, D., "Conversation-Based Mail", ACM Transactions on Computer Systems, vol. 4, No. 4, Nov. 1986, 21 pages. |
Day-Richter, What's different about the new Google Docs: Making collaboration fast, Sep. 23, 2010, 6 pgs. |
Dear, B., "TERM-TALK: Plato's Instant Messaging," brian@platohistory.org, Dec. 19, 2002, 2 pages. |
Dodgeball.com, Mobile Social Software, http://www.dodgeball.com/, Feb. 23, 2008, 2 pages. |
Fleishman, EtherPad Brings Simultaneous Writing to the Web, TidBITS, Feb. 16, 2009, 3 pgs. |
Flickr, Help/The Help Forum, "Anyone can tell me how to copy all photos from Flickr another album gallery from the other website?" http://www.flickr.com/help/forum/en-us/62736, 2008, 3 pages. |
Flock Browser-Share Pictures, Text and Video, "User Guides," http://www.flock.com/user-guide/1.0/advshar.html, Feb. 22, 2008, 8 pages. |
Google Inc., International Search Report and Written Opinion, PCT/US2011/058607, Feb. 21, 2012, 12 pgs. |
Google Inc., Notification of the First Office Action, CN 201080013718.4, Jun. 24, 2013, 4 pgs. |
Google Inc., Notification of the First Office Action, CN 201080013719.9, Mar. 27, 2013, 5 pgs. |
Google Inc., Notification of the Second Office Action, CN 201080013718.4, Mar. 11, 2014, 12 pgs. |
Google Inc., Notification of the Second Office Action, CN 201080013728.8, Feb. 19, 2014, 4 pgs. |
Google, Inc., PCT/US2010/028272, Mar. 23, 2010, International Search Report and Written Opinion dated Aug. 30, 2011, 10 pgs. |
Google, Notification of the First Office Action, CN 201080013728.8, Jun. 7, 2013, 9 pgs. |
Grob, R., "Cluestr: Mobile Social Networking for Enhanced Group Communication," GROUP '09, May 10-13, 2009, 10 pages. |
Help Yahoo Messenger, How do I share photos during a conversation? http://help.yahoo.com/1/us/yahoo/messenger/messenger9/entertainment/entertainment-38.h . . . , Feb. 22, 2008, 1 page. |
Herrick, Google This! Using Google Apps for Collaboration and Productivity, Jan. 1, 2009, pp. 55-63. |
Hu, J., Microsoft wins . . . is typing a message IM patent, Oct. 8, 2003, 2 pages. |
International Search Report and Written Opinion, PCT/US2010/028277, Mar. 31, 2011, 8 pages. |
International Search Report and Written Opinion, PCT/US2010/28269, Jan. 26, 2011, 8 pages. |
Lavalle, A., "Friends Swap Twitters, and Frustration," The Wall Street Journal, Mar. 16, 2007, 3 pages. |
Microsoft Office Online, Help and How-to Move or Copy and Paste Contacts, http://office.microsot.com/en-us/help/HA102084691033.aspx?mode=print, 2008, 2 pages. |
NetWin Advanced Server Software, "Dbabble Instant Chat Server Overview," http://free.dbabble.com/, 2009, 3 pages. |
Nichols, D., "High-Latency, Low-Bandwidth Windowing in the Jupiter Collaboration System," Proceedings of UIST '95, 10 pages. |
Payne, A., "Google Groups, Twitter Development Talk," http://groups.google.com/group/twitter-development-talk/web/api-documentation, Jan. 18, 2008, 11 pages. |
Plasq, "Ask a question, share an idea, report a problem, or just talk." fetsatisfaction.com/.../Iwish-i-could-drag-drop-directly-into-a-file-upload-field-in-safari-firefox-cached, Aug. 29, 2007, 2 pages. |
Plasq, "Ask a question, share an idea, report a problem, or just talk." fetsatisfaction.com/.../Iwish—i—could—drag—drop—directly—into—a—file—upload—field—in—safari—firefox-cached, Aug. 29, 2007, 2 pages. |
Saviano, S., "Annagram Concurrent Text Editor," Penn Engineering, 2006, 2 pages. |
Shen, Flexible Merging for Asynchronous Collaborative Systems, Jan. 1, 2002, 18 pgs. |
Twitter Support, "Twitter FAQ," http://help.twitter.com/index.php?pg=kb.printer,friendly&ie=3, 2008, 8 pages. |
Twitter, "Display twitters on Your Web Page," http://twitter.com, Feb. 22, 2008, 1 page. |
Twitter/Sifow, "Name Sifow," http://twitter.com/sifow/with-friends, 2008. |
Twitter/Sifow, "Name Sifow," http://twitter.com/sifow/with—friends, 2008. |
Wang, Google Wave Operational Transformation, Jul. 2010, 6 pgs. |
Webb, C. Chris Webb on Publishing, Media, and Technology, http://ckwebb.com/social-networks-and-media/twitter-is-a-conversation-ecosystem/, Feb. 22, 2008, 8 pages. |
Webb, C., "What's the Use in Twitter? Where is the Value?" http://ckwebb.com/blogging/what-the-use-in-twitter-where -is-the-value/, Aug. 15, 2007, 5 pages. |
XmScrollBar (3x), techpubs.sgi.com, Jan. 31, 2001, 7 pgs (reprinted on Jun. 13, 2013). |
Cited By (47)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140317559A1 (en) * | 2012-04-17 | 2014-10-23 | Franz Antonio Wakefield | Method, system, apparatus, and tangible portable interactive electronic device storage medium; that processes custom programs and data for a user by creating, displaying, storing, modifying, performing adaptive learning routines, and multitasking; utilizing cascade windows on an electronic screen display in a mobile electronic intercative device gui (graphical user interface) system |
US9292158B2 (en) * | 2012-04-17 | 2016-03-22 | Franz Antonio Wakefield | Method, system, apparatus, and tangible portable interactive electronic device storage medium; that processes custom programs and data for a user by creating, displaying, storing, modifying, performing adaptive learning routines, and multitasking; utilizing cascade windows on an electronic screen display in a mobile electronic interactive device GUI (graphical user interface) system |
US20150032816A1 (en) * | 2012-05-30 | 2015-01-29 | Sony Corporation | Information processing apparatus, information processing method, and recording medium |
US20140215388A1 (en) * | 2013-01-31 | 2014-07-31 | Disney Enterprises, Inc. | Resizable and lockable user interfaces |
US9946431B2 (en) * | 2013-01-31 | 2018-04-17 | Disney Enterprises, Inc. | Resizable and lockable user interfaces |
US9460073B2 (en) | 2013-02-27 | 2016-10-04 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
US9720897B2 (en) * | 2013-02-27 | 2017-08-01 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
US9489367B2 (en) | 2013-02-27 | 2016-11-08 | Google Inc. | Systems and methods for mutations and operational transforms in a collaborative spreadsheet environment |
US20140337788A1 (en) * | 2013-05-08 | 2014-11-13 | Tencent Technology (Shenzhen) Company Limited | Method and device for text message input |
US9544198B2 (en) * | 2013-09-20 | 2017-01-10 | Oracle International Corporation | Dynamic role-based view definitions in a repository system |
US20150089385A1 (en) * | 2013-09-20 | 2015-03-26 | Oracle International Corporation | Dynamic role-based view definitions in a repository system |
US10331463B2 (en) | 2013-09-20 | 2019-06-25 | Oracle International Corporation | Dynamic role-based view definitions in a repository system |
US10769350B2 (en) * | 2013-12-03 | 2020-09-08 | Microsoft Technology Licensing, Llc | Document link previewing and permissioning while composing an email |
US20150154156A1 (en) * | 2013-12-03 | 2015-06-04 | Microsoft Corporation | Document link previewing and permissioning while composing an email |
USD799526S1 (en) | 2014-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD756397S1 (en) * | 2014-04-04 | 2016-05-17 | Adp, Llc | Display screen or portion thereof with a graphical user interface |
USD770489S1 (en) * | 2014-05-02 | 2016-11-01 | Microsoft Corporation | Display screen with transitional graphical user interface |
US9827714B1 (en) | 2014-05-16 | 2017-11-28 | Google Llc | Method and system for 3-D printing of 3-D object models in interactive content items |
US10596761B2 (en) | 2014-05-16 | 2020-03-24 | Google Llc | Method and system for 3-D printing of 3-D object models in interactive content items |
US9710446B2 (en) * | 2014-08-05 | 2017-07-18 | Shahbaz Anwar | Enhanced internally linked electronic paper format report generation system and process |
US20160042003A1 (en) * | 2014-08-05 | 2016-02-11 | Shahbaz Anwar | Enhanced internally linked electronic paper format report generation system and process |
US20210352059A1 (en) * | 2014-11-04 | 2021-11-11 | Huawei Technologies Co., Ltd. | Message Display Method, Apparatus, and Device |
US11797172B2 (en) | 2015-03-06 | 2023-10-24 | Alibaba Group Holding Limited | Method and apparatus for interacting with content through overlays |
USD799538S1 (en) | 2015-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD799529S1 (en) | 2015-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen of a captioning communication device with graphical user interface |
USD800157S1 (en) | 2015-03-30 | 2017-10-17 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD800155S1 (en) | 2015-03-30 | 2017-10-17 | Sorenson Ip Holdings, Llc | Display screen of a captioning communication device with graphical user interface |
USD800156S1 (en) | 2015-03-30 | 2017-10-17 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD800151S1 (en) | 2015-03-30 | 2017-10-17 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD799525S1 (en) | 2015-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD777189S1 (en) * | 2015-03-30 | 2017-01-24 | Captioncall, Llc | Display screen of a captioning communication device with graphical user interface |
USD799528S1 (en) | 2015-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
USD777190S1 (en) * | 2015-03-30 | 2017-01-24 | Captioncall, Llc | Display screen of a captioning communication device with graphical user interface |
USD777188S1 (en) * | 2015-03-30 | 2017-01-24 | Captioncall, Llc | Display screen of a captioning communication device with graphical user interface |
USD799537S1 (en) | 2015-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen of a captioning communication device with graphical user interface |
USD799524S1 (en) | 2015-03-30 | 2017-10-10 | Sorenson Ip Holdings, Llc | Display screen or portion thereof of a captioning communication device with graphical user interface |
US11748592B1 (en) * | 2016-02-05 | 2023-09-05 | Storyfile, Inc. | Devices, systems, and methods for learning and using artificially intelligent interactive memories |
US9819877B1 (en) | 2016-12-30 | 2017-11-14 | Microsoft Technology Licensing, Llc | Graphical transitions of displayed content based on a change of state in a teleconference session |
US10237496B2 (en) | 2016-12-30 | 2019-03-19 | Microsoft Technology Licensing, Llc | Graphical transitions of displayed content based on a change of state in a teleconference session |
US10897435B2 (en) * | 2017-04-14 | 2021-01-19 | Wistron Corporation | Instant messaging method and system, and electronic apparatus |
US11134147B2 (en) * | 2017-11-14 | 2021-09-28 | Fujifilm Business Innovation Corp. | Information processing apparatus, non-transitory computer readable medium and method for processing information |
US10749831B2 (en) | 2017-12-15 | 2020-08-18 | Microsoft Technology Licensing, Llc | Link with permission protected data preview |
CN109444801A (en) * | 2018-10-25 | 2019-03-08 | 国网浙江乐清市供电有限公司 | A kind of device being conducive to the carrying of misconnection line detector |
CN112783406A (en) * | 2021-01-26 | 2021-05-11 | 维沃移动通信有限公司 | Operation execution method and device and electronic equipment |
CN112783406B (en) * | 2021-01-26 | 2023-02-03 | 维沃移动通信有限公司 | Operation execution method and device and electronic equipment |
CN113407268A (en) * | 2021-05-07 | 2021-09-17 | 北京奇艺世纪科技有限公司 | Interactive window display method and device, electronic equipment and storage medium |
CN113407268B (en) * | 2021-05-07 | 2023-09-01 | 北京奇艺世纪科技有限公司 | Interactive window display method and device, electronic equipment and storage medium |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9026935B1 (en) | Application user interface with an interactive overlay | |
US8984139B2 (en) | System and method for editing a conversation in a hosted conversation system | |
US9380011B2 (en) | Participant-specific markup | |
US9166939B2 (en) | Systems and methods for uploading media content in an instant messaging conversation | |
US8725818B1 (en) | Automated participants with access to attachments in hosted conversations | |
US9021386B1 (en) | Enhanced user interface scrolling system | |
US8996635B1 (en) | Automated participants for hosted conversations | |
US8825776B1 (en) | Generating a hosted conversation in accordance with predefined parameters | |
US9602444B2 (en) | Participant suggestion system | |
US11120196B2 (en) | Systems and methods for sharing user generated slide objects over a network | |
EP3595243B1 (en) | Email integration with shared folder based integrated workspaces | |
US11960525B2 (en) | Automatically formatting content items for presentation | |
EA008675B1 (en) | System and method for knowledge retrieval, management, delivery and presentation | |
US9128591B1 (en) | Providing an identifier for presenting content at a selected position | |
US20230244848A1 (en) | Previews for collaborative documents |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: WALKWAY TECHNOLOGIES US LLC.,, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:RASMUSSEN, JENS EILSTRUP;RASMUSSEN, LARS EILSTRUP;ADAMS, CAMERON KNOX;SIGNING DATES FROM 20110418 TO 20110425;REEL/FRAME:026498/0097 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:WALKWAY TECHNOLOGIES US LLC;REEL/FRAME:028189/0114Effective date: 20120426 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |