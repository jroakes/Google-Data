WO2023205371A1 - Motion refinement for a co-located reference frame - Google Patents
Motion refinement for a co-located reference frame Download PDFInfo
- Publication number
- WO2023205371A1 WO2023205371A1 PCT/US2023/019322 US2023019322W WO2023205371A1 WO 2023205371 A1 WO2023205371 A1 WO 2023205371A1 US 2023019322 W US2023019322 W US 2023019322W WO 2023205371 A1 WO2023205371 A1 WO 2023205371A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- motion
- frame
- reference frame
- block
- current frame
- Prior art date
Links
- 230000033001 locomotion Effects 0.000 title claims abstract description 419
- 239000013598 vector Substances 0.000 claims abstract description 149
- 238000000034 method Methods 0.000 claims abstract description 90
- 230000008569 process Effects 0.000 claims abstract description 55
- 230000003287 optical effect Effects 0.000 claims abstract description 44
- 230000015654 memory Effects 0.000 description 24
- 230000006870 function Effects 0.000 description 20
- 238000012545 processing Methods 0.000 description 20
- 238000010586 diagram Methods 0.000 description 17
- 238000004891 communication Methods 0.000 description 10
- 238000001914 filtration Methods 0.000 description 10
- 230000002123 temporal effect Effects 0.000 description 8
- 230000006835 compression Effects 0.000 description 5
- 238000007906 compression Methods 0.000 description 5
- 238000013459 approach Methods 0.000 description 4
- 238000004364 calculation method Methods 0.000 description 4
- 238000002156 mixing Methods 0.000 description 4
- 238000013139 quantization Methods 0.000 description 4
- 238000007670 refining Methods 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 3
- 150000001875 compounds Chemical class 0.000 description 3
- 230000011664 signaling Effects 0.000 description 3
- 230000001131 transforming effect Effects 0.000 description 3
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- PXFBZOLANLWPMH-UHFFFAOYSA-N 16-Epiaffinine Natural products C1C(C2=CC=CC=C2N2)=C2C(=O)CC2C(=CC)CN(C)C1C2CO PXFBZOLANLWPMH-UHFFFAOYSA-N 0.000 description 1
- 241000023320 Luma <angiosperm> Species 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- KRKNYBCHXYNGOX-UHFFFAOYSA-N citric acid Chemical compound OC(=O)CC(O)(C(O)=O)CC(O)=O KRKNYBCHXYNGOX-UHFFFAOYSA-N 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000008867 communication pathway Effects 0.000 description 1
- 239000000470 constituent Substances 0.000 description 1
- 230000006837 decompression Effects 0.000 description 1
- 238000009795 derivation Methods 0.000 description 1
- 238000012804 iterative process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- OSWPMRLSEDHDFF-UHFFFAOYSA-N methyl salicylate Chemical compound COC(=O)C1=CC=CC=C1O OSWPMRLSEDHDFF-UHFFFAOYSA-N 0.000 description 1
- 230000001373 regressive effect Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000003786 synthesis reaction Methods 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/103—Selection of coding mode or of prediction mode
- H04N19/105—Selection of the reference unit for prediction within a chosen coding or prediction mode, e.g. adaptive choice of position and number of pixels used for prediction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/136—Incoming video signal characteristics or properties
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/513—Processing of motion vectors
- H04N19/521—Processing of motion vectors for estimating the reliability of the determined motion vectors or motion vector field, e.g. for smoothing the motion vector field or for correcting motion vectors
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/136—Incoming video signal characteristics or properties
- H04N19/137—Motion inside a coding unit, e.g. average field, frame or block difference
- H04N19/139—Analysis of motion vectors, e.g. their magnitude, direction, variance or reliability
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/577—Motion compensation with bidirectional frame interpolation, i.e. using B-pictures
Definitions
- Digital video streams may represent video using a sequence of frames or still images.
- Digital video can be used for various applications including, for example, video conferencing, high-definition video entertainment, video advertisements, or sharing of usergenerated videos.
- a digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data.
- Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- One technique for compression uses a reference frame to generate a prediction block corresponding to a current block to be encoded. Differences between the prediction block and the current block can be encoded, instead of the values of the current block themselves, to reduce the amount of data encoded, transmitted, and subsequently decoded.
- This disclosure relates generally to encoding and decoding video data and more particularly relates to estimating and refining a motion field to generate a co-located reference frame for inter-prediction.
- An aspect of this disclosure is an apparatus that includes a processor.
- the processor is configured to reconstruct a first reference frame and a second reference frame for a current frame to be encoded or decoded, determine a coarse motion field for the current frame using the first reference frame and the second reference frame, determine whether to adjust the coarse motion field using fine motion of a portion of the current frame, responsive to a determination to adjust the coarse motion field using the fine motion, update a motion vector within the coarse motion field of the portion of the current frame using the fine motion to result in an updated motion field, and determine a co-located reference frame using the updated motion field, responsive to at determination to not adjust the coarse motion field using the fine motion, determine the co-located reference frame using the coarse motion field of the portion of the current frame, and perform an inter-prediction process for the current frame using the co-located reference frame.
- the coarse motion field comprises respective motion vectors for blocks of the current frame
- the fine motion of a portion of the current frame comprises motion vectors for respective sub-blocks of a block of the current frame.
- to determine whether to adjust the coarse motion field using fine motion of a portion of the current frame comprises to determine to not adjust the coarse motion field of the portion of the current frame when a smoothness of the coarse motion field is below a defined threshold.
- to determine whether to adjust the coarse motion field using fine motion of a portion of the current frame comprises to determine a first prediction block for a current block of the current frame from the first reference frame using the coarse motion field, determine a second prediction block for the current block of the current frame from the second reference frame using the coarse motion field, and not adjust the coarse motion field when differences between the first prediction block and the second prediction block are below a threshold.
- Another aspect of this disclosure is a method that includes reconstructing a first reference frame and a second reference frame for a current frame to be encoded or decoded, determining a coarse motion field for the current frame using the first reference frame and the second reference frame, determining fine motion of a block of the current frame, updating a motion vector of the block from the coarse motion field using the fine motion to result in an updated motion field, determining a co-located reference frame using the updated motion field, and performing a prediction process for the current frame using the colocated reference frame.
- determining the fine motion of the block of the current frame comprises determining fine motion of multiple sub-blocks of the block using optical flow estimation, and updating the motion vector comprises updating a motion vector of pixels of each of the multiple sub-blocks.
- the method includes determining whether to update the motion vector of the block. [0012] In some implementations, determining the fine motion of the block of the current frame comprises determining the fine motion using optical flow estimation.
- FIG. 1 is a schematic of a video encoding and decoding system.
- FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
- FIG. 3 is a diagram of a typical video stream to be encoded and subsequently decoded.
- FIG. 4 is a block diagram of an encoder according to implementations of this disclosure.
- FIG. 5 is a block diagram of a decoder according to implementations of this disclosure.
- FIG. 6 is a diagram used to explain linear projection of a motion field.
- FIG. 7 is a diagram illustrating a process of generating a co-located reference frame using pixel-level optical flow estimation.
- FIG. 8 is a flowchart diagram of a process for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
- FIG. 9 is a diagram used to explain an example of motion vector concatenation that may be used to estimate a coarse motion field according to the teachings herein.
- FIG. 10 is a diagram used to explain another example of motion vector concatenation that may be used to estimate a coarse motion field according to the teachings herein.
- FIG. 11 is a flowchart diagram of another process for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
- a video stream can be compressed by a variety of techniques to reduce bandwidth required transmit or store the video stream.
- a video stream can be encoded into a bitstream, which involves compression, which is then transmitted to a decoder that can decode or decompress the video stream to prepare it for viewing or further processing. Compression of the video stream often exploits spatial and temporal correlation of video signals through spatial and/or motion compensated prediction.
- Inter-prediction uses one or more motion vectors to generate a block (also called a prediction block) that resembles a current block to be encoded using previously encoded and decoded pixels. By encoding the motion vector(s), and the difference between the two blocks, a decoder receiving the encoded signal can re-create the current block. Inter-prediction may also be referred to as motion compensated prediction.
- Each motion vector used to generate a prediction block in the inter-prediction process refers to a frame other than a current frame, i.e., a reference frame.
- Reference frames can be located before or after the current frame in the sequence of the video stream and may be frames that are reconstructed before being used as a reference frame. In some cases, there may be three reference frames or more reference frames available to encode or decode blocks of the current frame of the video sequence.
- One is a frame that may be referred to as a golden frame.
- Another is a most recently encoded or decoded frame.
- Another is an alternative reference frame that is encoded or decoded before one or more frames in a sequence, but which is displayed after those frames in an output display order.
- the alternative reference frame is a reference frame usable for backwards prediction.
- One or more forward and/or backward reference frames can be used to encode or decode a block.
- the efficacy of a reference frame when used to encode or decode a block within a current frame can be measured based on a resulting signal-to-noise ratio or other measures of rate-distortion.
- the pixels that form prediction blocks are obtained directly from one or more of the available reference frames.
- the reference block pixels or their (e.g., linear) combinations are used for prediction of the current coding block in the current frame.
- This direct, block-based prediction does not capture the true motion activity available from the reference frames. That is, individual pixels within the block may move differently than the block as a whole and from each other.
- motion field information obtained from available reference frames may be used to generate a co-located reference frame or reference frame portions.
- This co-located reference frame may provide a better predictor for inter-prediction. More specifically, the pixels obtained from the motion-field generated reference frame for inter-prediction of a current block of a current frame may form a prediction block that more closely matches the current block than any of the conventional reference frames available for inter-prediction.
- FIG. 1 is a schematic of a video encoding and decoding system 100.
- a transmitting station 102 can be, for example, a computer having an internal configuration of hardware such as that described in FIG. 2. However, other suitable implementations of the transmitting station 102 are possible. For example, the processing of the transmitting station 102 can be distributed among multiple devices.
- a network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 102 and the encoded video stream can be decoded in the receiving station 106.
- the network 104 can be, for example, the Internet.
- the network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106.
- the receiving station 106 in one example, can be a computer having an internal configuration of hardware such as that described in FIG. 2. However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
- an implementation can omit the network 104.
- a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having a non-transitory storage medium or memory.
- the receiving station 106 receives (e.g., via the network 104, a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding.
- a real-time transport protocol RTP
- a transport protocol other than RTP may be used, e.g., a video streaming protocol based on the Hypertext Transfer Protocol (HTTP).
- the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below.
- the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102) to decode and view and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants.
- FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station.
- the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1.
- the computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of one computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
- a CPU 202 in the computing device 200 can be a central processing unit.
- the CPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now existing or hereafter developed.
- the disclosed implementations can be practiced with one processor as shown, e.g., the CPU 202, advantages in speed and efficiency can be achieved using more than one processor.
- a memory 204 in computing device 200 can be a read only memory (ROM) device or a random-access memory (RAM) device in an implementation. Any other suitable type of storage device or non-transitory storage medium can be used as the memory 204.
- the memory 204 can include code and data 206 that is accessed by the CPU 202 using a bus 212.
- the memory 204 can further include an operating system 208 and application programs 210, the application programs 210 including at least one program that permits the CPU 202 to perform the methods described here.
- the application programs 210 can include applications 1 through N, which further include a video coding application that performs the methods described here.
- Computing device 200 can also include a secondary storage 214, which can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- a secondary storage 214 can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- the computing device 200 can also include one or more output devices, such as a display 218.
- the display 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs.
- the display 218 can be coupled to the CPU 202 via the bus 212.
- Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218.
- the output device is or includes a display
- the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display or light emitting diode (LED) display, such as an organic LED (OLED) display.
- LCD liquid crystal display
- CRT cathode-ray tube
- LED light emitting diode
- OLED organic LED
- the computing device 200 can also include or be in communication with an image-sensing device 220, for example a camera, or any other image-sensing device 220 now existing or hereafter developed that can sense an image such as the image of a user operating the computing device 200.
- the image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200.
- the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
- the computing device 200 can also include or be in communication with a soundsensing device 222, for example a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near the computing device 200.
- the sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200.
- FIG. 2 depicts the CPU 202 and the memory 204 of the computing device 200 as being integrated into a single unit, other configurations can be utilized.
- the operations of the CPU 202 can be distributed across multiple machines (wherein individual machines can have one or more of processors) that can be coupled directly or across a local area or other network.
- the memory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of the computing device 200.
- the bus 212 of the computing device 200 can be composed of multiple buses.
- the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via a network and can comprise an integrated unit such as a memory card or multiple units such as multiple memory cards.
- the computing device 200 can thus be implemented in a wide variety of configurations.
- FIG. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded.
- the video stream 300 includes a video sequence 302.
- the video sequence 302 includes a number of adjacent frames 304. While three frames are depicted as the adjacent frames 304, the video sequence 302 can include any number of adjacent frames 304.
- the adjacent frames 304 can then be further subdivided into individual frames, e.g., a frame 306.
- the frame 306 can be divided into a series of planes or segments 308.
- the segments 308 can be subsets of frames that permit parallel processing, for example.
- the segments 308 can also be subsets of frames that can separate the video data into separate colors.
- a frame 306 of color video data can include a luminance plane and two chrominance planes.
- the segments 308 may be sampled at different resolutions.
- the frame 306 may be further subdivided into blocks 310, which can contain data corresponding to, for example, 16x16 pixels in the frame 306.
- the blocks 310 can also be arranged to include data from one or more segments 308 of pixel data.
- the blocks 310 can also be of any other suitable size such as 4x4 pixels, 8x8 pixels, 16x8 pixels, 8x16 pixels, 16x16 pixels, or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein.
- FIG. 4 is a block diagram of an encoder 400 according to implementations of this disclosure.
- the encoder 400 can be implemented, as described above, in the transmitting station 102 such as by providing a computer software program stored in memory, for example, the memory 204.
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202, cause the transmitting station 102 to encode video data in the manner described in FIG. 4.
- the encoder 400 can also be implemented as specialized hardware included in, for example, the transmitting station 102. In one particularly desirable implementation, the encoder 400 is a hardware encoder.
- the encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402, a transform stage 404, a quantization stage 406, and an entropy encoding stage 408.
- the encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks.
- the encoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410, an inverse transform stage 412, a reconstruction stage 414, and a loop filtering stage 416.
- Other structural variations of the encoder 400 can be used to encode the video stream 300.
- respective frames 304 can be processed in units of blocks.
- respective blocks can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction).
- intra-frame prediction also called intra-prediction
- inter-frame prediction also called inter-prediction
- a prediction block can be formed.
- intra-prediction a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed.
- interprediction a prediction block may be formed from samples in one or more previously constructed reference frames. The designation of reference frames for groups of blocks is discussed in further detail below.
- the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual).
- the transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms.
- the quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated.
- the quantized transform coefficients are then entropy encoded by the entropy encoding stage 408.
- the entropy-encoded coefficients, together with other information used to decode the block, which may include for example the type of prediction used, transform type, motion vectors and quantizer value, are then output to the compressed bitstream 420.
- the compressed bitstream 420 can be formatted using various techniques, such as variable length coding (VLC) or arithmetic coding.
- VLC variable length coding
- the compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein.
- the reconstruction path in FIG. 4 can be used to ensure that the encoder 400 and a decoder 500 (described below) use the same reference frames to decode the compressed bitstream 420.
- the reconstruction path performs functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual).
- the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
- encoder 400 can be used to encode the compressed bitstream 420.
- a non-transform-based encoder can quantize the residual signal directly without the transform stage 404 for certain blocks or frames.
- an encoder can have the quantization stage 406 and the dequantization stage 410 combined in a common stage.
- FIG. 5 is a block diagram of a decoder 500 according to implementations of this disclosure.
- the decoder 500 can be implemented in the receiving station 106, for example, by providing a computer software program stored in the memory 204.
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202, cause the receiving station 106 to decode video data in the manner described in FIG. 5.
- the decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106.
- the decoder 500 similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420: an entropy decoding stage 502, a dequantization stage 504, an inverse transform stage 506, an intra/inter prediction stage 508, a reconstruction stage 510, a loop filtering stage 512 and a deblocking filtering stage 514.
- stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420 includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420: an entropy decoding stage 502, a dequantization stage 504, an inverse transform stage 506, an intra/inter prediction stage 508, a reconstruction stage 510, a loop filtering stage 512 and a deblocking filtering stage 514.
- Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420.
- the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients.
- the dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400.
- the decoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400, e.g., at the intra/inter prediction stage 402.
- the prediction block can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts.
- Other filtering can be applied to the reconstructed block.
- the deblocking filtering stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as the output video stream 516.
- the output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein.
- Other variations of the decoder 500 can be used to decode the compressed bitstream 420.
- the decoder 500 can produce the output video stream 516 without the deblocking filtering stage 514.
- a reference frame available for inter-prediction may be a co-located reference frame that is generated (e.g., by interpolation) using a motion field between reference frames of the current frame. While examples described herein describe generating a co-located reference frame, it will be apparent that the teachings apply equally to any reference frame portion in addition to the entire reference frame, such as a block, a slice, etc. Thus, a frame, as used herein, refers to some of all of the frame. A frame portion in one frame is co-located with a frame portion in another frame if they have the same dimensions and are at the same pixel locations within the dimensions of each frame. The co-located reference frame may be determined at the same temporal location as a current frame being encoded or decoded as discussed in more detail below.
- FIG. 6 is a diagram used to explain linear projection of a motion field.
- the motion field of the current frame may be estimated using the nearest available reconstructed (e.g., reference) frames before and after the current frame.
- the reference frame 1 is a reference frame that may be used for forward prediction of the current frame 600
- the reference frame 2 is a reference frame that may be used for backward prediction of the current frame 600.
- motion vectors may be projected between the pixels in the reference frames 1 and 2 to the pixels at a location of the current frame 600 assuming that the motion field is linear in time.
- a projected motion vector 604 for a location of a pixel 602 co-located with the current frame 600 is shown.
- the single motion vector 604 shown in FIG. 6 may represent the same or a different amount of motion between pixel locations of the reference frame 1 and the current frame 600 than between pixel locations of the reference frame 2 and the current frame 600.
- the projected motion vector 606 is assumed to be linear for a pixel between the reference frame 1, the current frame 600, and the reference frame 2.
- Generation of the interpolated (i.e., the co-located) reference frame may be performed using optical flow estimation in an iterative process on a per-pixel basis. Generally, this may include initializing the motion field (e.g., using linear projection described with regards to FIG. 6), warping the reference frame according to the current motion field, updating the motion field using an estimate of the motion field between the warped reference frames, and blending the resulting warped reference frames.
- Initialization for the optical flow estimation may be performed using the estimated motion vectors from the current frame to the reference frames. All pixels within the current frame may be assigned an initialized motion vector. They define an initial motion field that can be utilized to warp the reference frames to the current frame.
- the motion vector mv cur of a current pixel may be initialized as a difference between the estimated motion vector mv r2 pointing from the current pixel to the backward reference frame, in this example reference frame 2, and the estimated motion vector mv r2 pointing from the current pixel to the forward reference frame, in this example reference frame 1, according to:
- mv cur mi! r2 ’ (index r2 — index rl ) / (index r2 — index cur ).
- display indexes index cur , index rl , and index r2 are indexes for the current frame, reference frame 2, and reference frame 1, respectively.
- the display indexes are any value that can be used to determine the temporal distance between these frames in a display order of the frames.
- one or more spatial neighbors having an initialized motion vector may be used. For example, an average of the available neighboring initialized motion vectors may be used.
- reference frame 2 may be used to predict a pixel of reference frame 1, where reference frame 1 is the last frame before the current frame being coded. That motion vector, projected on to the current frame using linear projection in a similar manner as shown in FIG. 6, results in a motion vector mv cur at the intersecting pixel location, such as the motion vector 606 at the location of the pixel 602.
- the optical flow estimation may be performed.
- a pyramid, or multi-layered, structure may be used. In one pyramid structure, for example, the reference frames are scaled down to one or more different scales.
- the optical flow is first estimated to obtain a motion field at the highest level (the first processing level) of the pyramid, i.e., using the reference frames that are scaled the most. Thereafter, the motion field is upscaled and used to initialize the optical flow estimation at the next level.
- This process of upscaling the motion field, using it to initialize the optical flow estimation of the next level, and obtaining the motion field continues until the lowest level of the pyramid is reached (i.e., until the optical flow estimation is completed for the reference frame portions at full scale).
- the reasoning for this process is that it is easier to capture large motion when an image is scaled down. However, using simple rescale filters for scaling the reference frames can degrade the reference frame quality. To avoid losing the detailed information due to rescaling, a pyramid structure that scales derivatives instead of the pixels of the reference frames to estimate the optical flow is used. This pyramid structure, shown by example in FIG.
- optical flow estimation may be performed for respective pixels by minimizing the following Lagrangian function (1):
- J c t ata is the data penalty based on the brightness constancy assumption (i.e., the assumption that an intensity value of a small portion of an image remains unchanged over time despite a position change).
- J spa tiai i s the spatial penalty based on the smoothness of the motion field (i.e., the characteristic that neighboring pixels likely belong to the same object item in an image, resulting in substantial the same image motion).
- the Lagrangian parameter A controls the importance of the smoothness of the motion field. A large value for the parameter A results in a smoother motion field and can better account for motion at a larger scale. In contrast, a smaller value for the parameter A may more effectively adapt to object edges and the movement of small objects.
- the data penalty may be represented by the data penalty function:
- E x , E y , and E t are derivatives of pixel values of reference frame portions with respect to the horizontal axis x, the vertical axis y, and time t (e.g., as represented by frame indexes).
- the horizontal axis and the vertical axis are defined relative to the array of the pixels forming the current frame, such as the current frame 600, and the reference frames, such as the reference frames 1 and 2.
- the derivatives E x , E y , and E t may be calculated according to the following functions (3), (4), and (5):
- variable E (r1 ⁇ is a pixel value at a projected position in the reference frame 1 based on the motion field of the current pixel location in the current frame being encoded.
- the variable is a pixel value at a projected position in the reference frame 2 based on the motion field of the current pixel location in the current frame being encoded.
- the variable index rl is the display index of the reference frame 1, where the display index of a frame is its index in the display order of the video sequence.
- the variable index r2 is the display index of the reference frame 2
- the variable index cur is the display index of the current frame 600.
- the variable E x is the horizontal derivative calculated at the reference frame 1 Cr2) using a linear filter.
- the variable E x is the horizontal derivative calculated at the reference frame 2 using a linear filter.
- the variable E y is the vertical derivative calculated at the
- the variable E y is the vertical derivative calculated at the reference frame 2 using a linear filter.
- the linear filter used for calculating the horizontal derivative is a 7-tap filter with filter coefficients [-1/60, 9/60, -45/60, 0, 45/60, -9/60, 1/60].
- the filter can have a different frequency profile, a different number of taps, or both.
- the linear filter used for calculating the vertical derivatives may be the same as or different from the linear filter used for calculating the horizontal derivatives.
- the spatial penalty may be represented by the spatial penalty function:
- Ait is the Laplacian of the horizontal component it of the motion field
- Av is the Laplacian of the vertical component v of the motion field.
- the initialization of the motion field (comprising the motion vectors of the pixels) described above is input for the first processing level.
- the reference frames are warped to the current frame position according to the motion field for the current processing level.
- the respective motion vectors mv cur that are used at the first processing level are downscaled from their resolution value to the resolution of the level before performing the warping.
- the linear projection assumption (e.g., that the motion projects linearly over time) is used to determine a respective motion vector mv rl as follows:
- nw rl (index cur — index rl ) / (index r2 — index rl ) ⁇ mv mr
- the horizontal component u rl and the vertical component u rl of the motion field mv rl may be rounded to a defined precision, and then each pixel in a first warped image (reference frame) E wcu.pecl is calculated as the referenced pixel given by the motion vector mv rl . Subpixel interpolation may be performed.
- the two warped reference frames are used to estimate the motion field between them by calculating the derivatives E x , E y , and E t at the original (full) scale using the functions (3), (4), and (5), and the derivatives are downscaled to the current level.
- the motion field for the pixels is updated (or refined) using the estimated motion field between the warped reference frames. For example, the current motion field may be updated by adding the estimated motion vectors for pixels on a pixel-by-pixel basis.
- the motion field is upscaled before processing the next layer.
- the process of upscaling the motion field, using it to initialize the optical flow estimation of the next level, and obtaining the updated motion field continues until the lowest level of the pyramid is reached (i.e., until the optical flow estimation is completed for the derivatives calculated at full scale).
- the warped reference frames are blended to form the optical flow reference frame E (ciir /
- the blending may be performed using any technique. In an example, the blending may be performed using the time linearity assumption (e.g., that frames are spaced apart by equal time periods) as follows: (J.ndex cur — index rl ) / (index r2 — index rl )
- warping may also be referred to as interpolation, as the motion is used to interpolate (warp) the reference frame to the time of the current frame. Blending combines the interpolated frames or frame portions that are colocated after the interpolation.
- the optical flow estimation performed according to the Lagrangian function (1) uses 2 * N linear equations to solve the horizontal component u and the vertical component v of the motion vector for all N pixels of a reference frame.
- the computational complexity of optical flow estimation is a polynomial function of the frame size, which imposes a burden on the decoder complexity. Even where only less that an entirety of the frame is generated, the computational complexity is high. This complexity is even greater where the Lagrangian parameter A is annealed, e.g., at each processing level the Lagrangian parameter A is reduced in successive iterations of estimating and updating the motion field before advancing to a new level.
- the resulting co-located reference frame can be used to inter-predict at least some blocks of the current frame with a reduced coding error as compared with using the other reference frames available to inter-predict blocks of the current frame.
- a generated motion field may be limited to motion vectors for a larger block size, such as 8x8 or larger blocks.
- Use of the original block-based motion field reduces computations as described above.
- the motion field may be too coarse and inaccurate for some movement in video frames. It would be desirable to refine the motion fields to smaller blocks without the requirement to generate pixel-level motion vectors through optical flow estimation.
- block-level optical flow refinement of motion vectors may be performed for a co-located reference frame using optical flow instead of doing a full optical flow estimation to generate a pixel-level motion field.
- the motion field may be refined to generate a motion field for smaller blocks, such as a final refined block size of 4x4 pixels. This simplifies interpolation as compared to use of a per-pixel motion field by reducing calculation complexity, while improving prediction accuracy over using a coarse motion field calculation using optical flow estimation techniques or using other available reference frames.
- the refinement may be performed at both the encoder and decoder.
- FIG. 8 is a flowchart diagram of a process 800 (a technique, method, etc.) for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
- a process 800 for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
- an entire colocated reference frame is determined, but the teachings apply equally to where less than the entirety of a frame is processed.
- the process 800 can be implemented, for example, as a software program that may be executed by computing devices such as transmitting station 102 or receiving station 106.
- the software program can include machine-readable instructions that may be stored in a memory such as the memory 204 or the secondary storage 214, and that, when executed by a processor, such as CPU 202, may cause the computing device to perform the process 800.
- the process 800 can be implemented using specialized hardware or firmware. Some computing devices may have multiple memories or processors, and the operations described in the process 800 can be distributed using multiple processors, memories, or both.
- the process 800 may be performed during an encoding process, such as performed using the encoder 400 shown in FIG. 4, or during a decoding process, such as performed using the decoder 500 shown in FIG. 5.
- the process 800 may be partially performed as part of a reconstruction loop of an encoder, such as using the dequantization stage 410, the inverse transform stage 412, the reconstruction stage 414, and/or the loop filtering stage 416 shown in FIG. 4, as well as using a prediction stage of the encoder, such as using the intra/inter prediction stage 402 shown in FIG. 4.
- information used for the prediction may be derived from the reconstruction loop of the encoder.
- the process 800 when performed during a decoding process, may be performed using conventional aspects of a decoder used to reconstruct reference frames and perform prediction against an encoded frame, such as the entropy decoding stage 502, the dequantization stage 504, the inverse transform stage 506, the reconstruction stage 510, and the intra/inter prediction stage 508 shown in FIG. 5.
- information used for the prediction may be derived from a bitstream to which the reference frames and encoded frame are encoded, such as the compressed bitstream 420 shown in FIGS. 4 and 5.
- the process 800 may be performed sequentially for video frames to be predicted. Frames may be coded, and hence predicted, in any order.
- the frames to be predicted may also be referred to as a first, second, third, etc. frame.
- the label of first, second, etc. does not necessarily indicate an order of the frames. Instead, the label is used to distinguish one current frame from another herein unless otherwise stated.
- the frame may be processed in units of blocks in a block coding order, such as a raster scan order.
- the frame may also be processed in units of blocks according to receipt of their encoded residuals within an encoded bitstream.
- a first reference frame and a second reference frame for the current frame are reconstructed.
- reconstructing the first and second reference frames may include at least dequantizing, inverse transforming, and then reconstructing the reference frames from respective quantized transform coefficients processed at the encoder.
- reconstructing the first and second reference frames may include at least dequantizing, inverse transforming, and then reconstructing the reference frames from reference frame data encoded to a bitstream.
- the process 800 may be used when an encoder determines that a co-located reference frame determined from two or more reference frames is used to encode at least a portion of the current frame, such as one or more blocks of the current frame.
- prediction blocks for a current block of the current frame may be generated for multiple prediction modes, including performing a motion search within one or more co-located reference frames to select the best matching prediction block for the current block.
- the prediction blocks may be generated as part of a rate-distortion loop for the current block that uses various prediction modes, including one or more intra prediction modes and both single and compound inter prediction modes using the available prediction frames for the current frame.
- a single inter-prediction mode uses only a single forward or backward reference frame (e.g., in display order) for inter-prediction.
- a compound inter-prediction mode may use two or more reference frames for inter-prediction.
- the rate e.g., the number of bits
- the distortion may be calculated as the differences between pixel values of the block before encoding and after decoding.
- the differences can be a sum of absolute differences or some other measure that captures the accumulated error for blocks of the frames.
- the prediction mode that results in the lowest rate-distortion error may be selected to encode the block.
- use of the co-located reference frame may be limited to the single inter-prediction mode. That is, the co-located reference frame may not be used in combination with other frames for a compound inter-prediction mode. This can simplify the rate-distortion loop, and little additional impact on the encoding of a block is expected because the co-located reference frame already considers more than one frame.
- a flag may be encoded into the bitstream to indicate whether a co-located reference frame is used for encoding the current frame.
- the flag may be encoded when any single block within the current frame is encoded using a co-located reference frame block in an example.
- a co-located reference frame is used for encoding the current frame, it is possible to include an additional flag or other indicator (e.g., syntax elements at the block level) indicating whether a current block was encoded by inter-prediction using the colocated reference frame, or whether the current block was encoded using another prediction mode. In cases where more than one co-located reference frame is available, which colocated reference frame to use may be identified.
- Which frames form a co-located reference frame may also or alternatively be signaled.
- one or more of these signals may be omitted from the bitstream, and logic common to an encoder and decoder may be used to determine these parameters for decoding the blocks of a current frame.
- the coarse motion field may be determined for a current block or for all blocks of the current frame.
- a motion vector may be determined using linear projection that intersects the frame on a block basis, instead of on a pixel basis as described above with regards to FIGS. 6 and 7.
- one or more motion vectors may be determined for a block, instead of determining motion vectors on a pixel basis, thus forming a coarse motion field for the block that includes the same motion for each of the constituent pixels of the block.
- the coarse motion field for the frame comprises the motion vectors for the respective blocks.
- the determination of the coarse motion field for a block is not limited to any particular technique.
- An example of the determination of the coarse motion field may be explained with reference to FIGS. 9 and 10, which determine motion trajectory information using motion vectors of the first reference frame and the second reference frame.
- the motion trajectory information includes concatenated motion vectors produced by concatenating motion vectors of the first reference frame and motion vectors of the second reference frame.
- the concatenated motion vectors form a trajectory that intersects the first reference frame, the second reference frame, and the current frame.
- the motion trajectory information further includes indications of locations (e.g., block locations) of the frame being encoded or decoded at which those concatenated motion vectors point.
- the motion vectors of the first reference frame and/or of the second reference frame may be signaled within the bitstream.
- Concatenating motion vectors of the first reference frame and motion vectors of the second reference frame may include interpolating motion vectors using motion vectors of a first set of motion vectors associated with the first frame and motion vectors of a second set of motion vectors associated with the second frame, extrapolating motion vectors using motion vectors of the first set of motion vectors and motion vectors of the second set of motion vectors, or otherwise joining motion vectors of the first set of motion vectors and motion vectors of the second set of motion vectors. This may be done on a block-by-block basis.
- a first motion vector may point from a location within a first reference frame and a second motion vector may point from that location within the first reference frame to a location within the current or encoded frame.
- Those first and second motion vectors may be joined and directly used as a motion trajectory for the current frame.
- the motion trajectory information may indicate a motion trajectory according to those first and second motion vectors.
- FIG. 9 illustrates an example of motion vector concatenation between a first reference frame 900, a second reference frame 902, and a current frame 904, in which a first motion vector 906 points from a location within the first reference frame 900 to a location within the second reference frame 902 and a second motion vector 908 points from that same location within the second reference frame 902 to a location within the current frame 904.
- the second motion vector 908 may be an already available motion vector, such as where the second motion vector 908 was previously derived.
- the second motion vector 908 may have been previously derived using the second reference frame 902 and a third reference frame (not shown). The second motion vector 908, after derivation, may thus be projected to the current frame 904.
- a motion vector resulting from concatenating the first motion vector 1706 and the second motion vector 1708 may be used as the motion trajectory for the current frame 904.
- the motion trajectory information for the current frame 904 indicates a motion trajectory according to the first motion vector 906 and the second motion vector 908.
- the current frame 904 may be located in between the first reference frame 900 and the second reference frame 902. In such a case, where a motion vector points from a location within the first reference frame 900 across the current frame 904 to a location within the second reference frame 902, that motion vector may be directly used as the motion trajectory for the current frame 904. In such an implementation, because a single motion vector is directly used as the motion trajectory information, the determination of the motion trajectory information may be performed without concatenating motion vectors. [0118] In another example, the motion trajectory information may be determined using more than two reference frames.
- a third reference frame may be reconstructed, and motion vectors of the third reference frame may be concatenated along with motion vectors of each of the first and second reference frames to determine the motion trajectory information for a block of the current frame.
- motion vectors each pointing between two of the more than two reference frames may be interpolated or extrapolated to determine interpolated motion vectors or extrapolated motion vectors, as the case may be.
- FIG. 10 illustrates an example of motion vector concatenation between a first reference frame 1000, a second reference frame 1002, a third reference frame 1004, and a current frame 1006, in which a first motion vector 1008 points from a location within the first reference frame 1000 to a location within the third reference frame 1004 and a second motion vector 1010 points from a location within the second reference frame 1002 to that same location within the third reference frame 1004.
- An interpolated motion vector 1012 pointing between the first reference frame 1000 and the second reference frame 1002 may be determined by interpolating between the first motion vector 1008 and the second motion vector 1010.
- the interpolated motion vector 1012 may be used as the motion trajectory for a block of the current frame 1006. In some implementations, where the current frame is not in between the reference frames, an extrapolated motion vector may instead be determined.
- an estimate of a coarse motion field for the frame undergoing encoding or decoding is also determined at 806 using the motion trajectory information.
- the coarse motion field estimate may be a two-dimensional array of motion vectors.
- the coarse motion field estimate is determined using the motion trajectory information by placing motion vectors concatenated from motion vectors of the first and second reference frames within certain locations of the motion field estimate. For example, the location within the motion field estimate of a motion vector may be based on a block to which the motion vector points within the frame being encoded or decoded.
- one or more motion vectors may be unavailable at locations of the motion field estimate.
- a motion vector may be missing or omitted from the motion field estimate, such as because it was not derived from pixels of the reference frames.
- an unavailable motion vector may be interpolated using one or more neighboring motion vectors within the motion field estimate. For example, motion derived from pixels neighboring a co-located location within the first reference frame and the second reference frame may be interpolated to derive a motion vector. The derived motion vector may then be represented at the corresponding location of the motion field estimate.
- the one or more neighboring motion vectors may be weighted according to a relative importance for interpolating the previously unavailable motion vector. For example, weights can be determined for motion vector interpolation for the motion field estimate, in which motion vectors having greater weights are considered more important for use in interpolating an unavailable motion vector.
- the relative importance of a neighboring motion vector may be based on one or more aspects including, but not limited to, a magnitude and/or direction of the neighboring motion vector on its own or relative to other neighboring motion vectors, similarities between pixel intensities at colocated pixels of the reference frames, or the like.
- the motion field estimation for respective blocks at 804 corresponds to a coarse motion field.
- the coarse motion field may be used to determine a co-located reference frame. However, improvements to the coarse motion field may be achieved by updating the coarse motion field using fine motion.
- Fine motion is motion estimated for a smaller portion of the current frame than the current block. Fine motion may be motion vectors determined for sub- blocks smaller than the blocks used for determining the coarse motion field. Fine motion may be used to adjust, update, or refine motion vectors for individual pixels within the sub-blocks, updating the coarse motion field for the block (and thus the frame as a whole).
- the coarse motion field may be updated using fine motion.
- Fine motion may be determined using optical flow techniques. The techniques may be used with reference frames both before and after the current frame and with (e.g., two) reference frames that are either from the past or from the future. The fine motion is determined and is used to refine the motion vectors from the coarse motion field calculations for small blocks, i.e., blocks having a final refined block size smaller than the blocks used to determine the coarse motion field.
- the techniques are robust enough to compensate for differing distances of the reference frames from the current frame and can result in a co-located reference frame that may represent more accurate motion, have a reduced calculation complexity, or both, over techniques previously described.
- the assumption for optical flow is initially made that the intensity of a pixel does not change with the movement of an object.
- the derivative of the intensity I over time t is equal to 0 such that:
- the vector (y x , v ) represents the fine motion applicable to the original motion vector. Another assumption is steady motion, which results in the fine motion vector being equal and opposite in sign from one reference frame to the other. Hence, for the current block Cur and two reference blocks P0 and Pl from a backwards and a forward reference frame, the following hold true.
- the fine motion can be obtained by solving a least squares problem for the error between P0 and Pl using these equations so that the following results.
- Q is the region in which fine motion is determined.
- Q is a final refined block size kxk, such as a 4x4 block where the prediction block of the current frame is an 8x8 block, but it could be a larger block in some implementations. Solving with the window (x,y) 6 fl results in a refined motion vector for the kxk block as follows.
- the fine motion may be estimated for each block of the current frame so as to update the coarse motion field for respective blocks.
- the refined motion vectors may be used to generate co-located reference frame portions as previously described.
- a coarse motion field estimate for frame portions, such as blocks, of the current frame may be determined using the first reference frame and the second reference frame.
- the fine motion of the kxk blocks of each block of the current frame may be estimated, e.g., using equation (7).
- Motion vectors each group of kxk pixels of the block may be updated from the motion vector in the coarse motion field using the fine motion to result in refined or updated motion vectors for pixels to form an updated motion field estimate. This may be achieved by, for example, determining the refined motion vectors between the first and second reference frames, whether located before, after, or in positions on opposite sides of the current frame in the video sequence (e.g., according to equation (8)) and using them in place of the values in the previous motion field estimate. The updated motion field estimate may then be used to determine a co-located reference frame at 808.
- the co-located reference frame may be directly interpolated using the motion field estimate.
- determining the co-located reference frame may include interpolating motion information using the motion field estimate and pixel information using the first reference frame and the second reference frame.
- the respective prediction blocks from the first and second reference frames can be combined according to any known technique to form a block of the co-located reference frame.
- two reference frames according to the final optical flow estimate may be warped and combined. For example, they could be averaged. They may be combined using a weighted average, for example according to the following:
- IRF(X, y) i s the pixel intensity at location (x, y) in the co-located reference frame.
- I n0 is the pixel intensity at location (x, y) in the first reference frame.
- I nl is the pixel intensity at location (x, y) in the second reference frame.
- the co-located reference frame may be used to adjust an offset between the first reference frame and the second reference frame.
- the motion vector 1012 shown in FIG. 10 is linearly projected to determine a motion field estimate for the current frame 1006. This may assume that an object corresponding to that motion moves in constant velocity and direction. However, it may be the case that the motion of that object curves. In such a case, an extra step of inter-prediction may be performed to correct for potential offsets from the actual motion trajectory to the linear projection of the motion vector 1012.
- a motion model e.g., translational, affine, homographic, warped, etc.
- the co-located reference frame After the co-located reference frame is determined at 808, it may be used to perform a prediction process at 810. In some implementations, such as when co-located reference frame portions are determined, those portions may be combined to form the colocated reference frame. Combining the optical flow reference portions may include arranging the optical flow reference portions (e.g., co-located reference blocks) according to the pixel positions of the respective current frame portions used in the generation of the each of the optical flow reference portions. In any event, the co-located reference frame may be stored in a reference frame buffer and used to generate one or more prediction blocks to reconstruct the current frame.
- the optical flow reference portions e.g., co-located reference blocks
- the prediction process at 810 may be performed for reconstruction of a frame using the encoder 400 shown in FIG. 4, or during a decoding process, such as performed using the decoder 500 shown in FIG. 5.
- a residual from the bitstream may be dequantized, and the dequantized values may be inverse transformed.
- a prediction block generated using a motion vector from the encoder and the co-located reference frame may be added to the decoded residual.
- information used for the prediction may be derived from the reconstruction loop of the encoder.
- information used for the prediction may be derived from a bitstream to which the reference frames and encoded frame are encoded, such as the compressed bitstream 420 shown in FIGS. 4 and 5.
- generating the prediction block can include using an inter-prediction mode decoded from the encoded bitstream, such as in a block header.
- a flag or indicator can be decoded to determine the inter-prediction mode.
- the inter-prediction mode is an optical flow reference frame mode (i.e., the block was inter-predicted using an optical flow reference frame)
- the prediction block for the current block to be decoded is generated using pixels of the optical flow reference frame and a motion vector mode and/or a motion vector.
- the process 800 synthesizes a reference frame that is co-located with the current frame in time at both an encoder and a decoder.
- a coarse blocklevel motion field is determined, and then optical flow estimation is used to refine the motion field to a per-pixel motion field.
- the per-pixel motion field is used to interpolate the colocated reference frame based on the positions of reference frames relative to the current frame.
- the process 800 describes refining (updating, modifying, etc.) the coarse motion field for each block of the current frame using fine motion determined by optical flow estimation of smaller kxk sub-blocks.
- Refinement of the coarse motion field may also be computationally intensive. Accordingly, eliminating an update to the coarse motion field may also speed operation of a decoder. Next discussed are techniques for determine whether the coarse motion field should be refined or updated using fine motion for a block, or if the coarse motion field is acceptable for determining the co-located reference frame.
- FIG. 11 is a flowchart diagram of another method or process 1100 for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
- a co-located reference frame generated using motion refinement according to the teachings herein.
- an entire co-located reference frame is determined, but the teachings apply equally to where less than the entirety of a frame is processed.
- the process 1100 can be implemented, for example, as a software program that may be executed by computing devices such as transmitting station 102 or receiving station 106.
- the software program can include machine-readable instructions that may be stored in a memory such as the memory 204 or the secondary storage 214, and that, when executed by a processor, such as CPU 202, may cause the computing device to perform the process 800.
- the process 1100 can be implemented using specialized hardware or firmware. Some computing devices may have multiple memories or processors, and the operations described in the process 1100 can be distributed using multiple processors, memories, or both.
- the process 1100 may be performed during an encoding process, such as performed using the encoder 400 shown in FIG. 4, or during a decoding process, such as performed using the decoder 500 shown in FIG. 5.
- the process 1100 may be partially performed as part of a reconstruction loop of an encoder, such as using the dequantization stage 410, the inverse transform stage 412, the reconstruction stage 414, and/or the loop filtering stage 416 shown in FIG. 4, as well as using a prediction stage of the encoder, such as using the intra/inter prediction stage 402 shown in FIG. 4.
- information used for the prediction may be derived from the reconstruction loop of the encoder.
- the process 1100 when performed during a decoding process, may be performed using conventional aspects of a decoder used to reconstruct reference frames and perform prediction against an encoded frame, such as the entropy decoding stage 502, the dequantization stage 504, the inverse transform stage 506, the reconstruction stage 510, and the intra/inter prediction stage 508 shown in FIG. 5.
- information used for the prediction may be derived from a bitstream to which the reference frames and encoded frame are encoded, such as the compressed bitstream 420 shown in FIGS. 4 and 5.
- the process 1100 may be performed sequentially for video frames to be predicted. Frames may be coded, and hence predicted, in any order.
- the frame may be processed in units of blocks in a block coding order, such as a raster scan order.
- the frame may also be processed in units of blocks according to receipt of their encoded residuals within an encoded bitstream.
- a first reference frame and a second reference frame for the current frame are reconstructed. As this step is performed as described with respect to step 802, further description is omitted here.
- the process 1100 determines a coarse motion field using the first and second reference frames at 1104. Thereafter, fine motion is determined for the current frame at 1106. More specifically, for example, fine motion may be determined for the current block at 1106 before determining whether to update the coarse motion field for the block at 1108. In some implementations, the process 1100 may determine whether to refine the coarse motion field for a block of the current frame at 1108 before determining the fine motion at 1106. In either case, the fine motion may be determined as described above with regards to step 806.
- Determining whether to refine the coarse motion field estimate at 1108 may be performed so as to balance computing requirements against the improvement in interprediction (e.g., predictors) resulting from the refinement. In some implementations, the determination is made to optimize the speed of this process in the overall inter-prediction process.
- interprediction e.g., predictors
- the determination includes performing a sequence of steps at the encoder including generating a coarse estimation of the co-located reference frame (F_coarse) using the motion field initialization (i.e., the estimated coarse motion field). Thereafter, the motion field may be refined and used to interpolate the co-located reference frame (F_refined). A comparison of the F_coarse and F_refined with the current frame (F_current) may be performed to determine whether the refinement using the fine motion is useful.
- F_coarse co-located reference frame
- F_current the current frame
- refinement may be omitted, that is, the determination may be made to not refine the coarse motion field estimate.
- a signal may be sent in the bitstream (such as a 1 bit) to the decoder to signal whether refinement, either pixel-level or block-level, should be used. This technique can avoid unnecessary refinement at the decoder, hence accelerating the decoding speed.
- an individual decision as to whether to apply refinement may be made for each block or sub-block in the co-located reference frame, instead of on a frame basis.
- an additional bit to the decoder may be omitted, but the encoder and decoder may perform the same decision check.
- An example of such a check is to determine the smoothness of the initialized (coarse) motion field around the current frame portion (e.g., a block).
- Various techniques may be used to determine the smoothness. If the motion field is smooth (e.g., the determined smoothness is below a threshold), it is likely that the refinement would not significantly improve the determination of the co-located reference frame portion, and hence would not significantly improve inter-prediction.
- refining the coarse reference field estimation for the current frame portion may be omitted.
- Other tests may be done at both the encoder and decoder side where the motion field and the reconstructed reference frames are available. For example, two reference frame blocks corresponding to the current block may be obtained from the first and second reference frames using the initialized/coarse motion field. If the two reference blocks are already very similar, the motion field is already doing a good job matching the current block without refinement. For example, if differences between the two reference blocks are relatively low, the determination at 1108 may be to not refine the coarse motion field. The differences may be measured by the mean square error between pixel values or some other measure. The differences, or a single value representative thereof, may be compared to a threshold to make the determination at 1108.
- neighboring blocks may be considered. If the neighboring blocks (or a certain number of neighboring blocks) were encoded and/or decoded using refined motion vectors, the current block may use the refined motion vectors (e.g., instead of the coarse motion field) in the determination of the co-located reference frame.
- the process 1100 advances to 1110 when the determination is made to update or refine the coarse motion field.
- the coarse motion field is updated using the fine motion as described above.
- processing of the current frame continues using the updated (or refined) motion field. That is, the co-located reference frame may be determined using the updated motion field. If the coarse motion field is not to be refined or updated in response to the query at 1108, the co-located reference frame may be determined using the coarse motion field values at 1112.
- the query at 1108 may be made for each block of the frame. Then, the updates at 1110 may be made for those blocks that would benefit from refining the coarse motion field before determining the co-located reference frame at 1112.
- example is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word “example” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances.
- Implementations of the transmitting station 102 and/or the receiving station 106 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application- specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit.
- IP intellectual property
- ASICs application- specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers programmable logic controllers
- microcode microcontrollers
- servers microprocessors, digital signal processors or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of the transmitting station 102 and the receiving station 106 do not necessarily have to be implemented in the same manner.
- the transmitting station 102 or the receiving station 106 can be implemented using a general-purpose computer or general-purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein.
- a special purpose computer/processor can be utilized that contains other hardware for carrying out any of the methods, algorithms, or instructions described herein.
- the transmitting station 102 and the receiving station 106 can, for example, be implemented on computers in a video conferencing system.
- the transmitting station 102 can be implemented on a server and the receiving station 106 can be implemented on a device separate from the server, such as a hand-held communications device.
- the transmitting station 102 can encode content using an encoder 400 into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 500.
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 102.
- the receiving station 106 can be a generally stationary personal computer rather than a portable communications device and/or a device including an encoder 400 may also include a decoder 500.
- implementations of the present disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
Abstract
Techniques for generating and using a co-located reference frame are described, A first reference frame and a second reference frame for a current frame to be encoded or decoded are reconstructed and used to determine a coarse motion field for the current frame. Fine motion of one or more blocks of the current frame are estimated (e.g., using optical flow estimation). A motion vector of a block of the current frame is updated using the fine motion to result in an updated motion field. A co-located reference frame is determined using the updated motion field, and a prediction process for the current frame is performed using the co-located reference frame. Various techniques may be used to determine whether to adjust the coarse motion field using the fine motion to reduce computing requirements.
Description
MOTION REFINEMENT FOR A CO-LOCATED REFERENCE FRAME
CROSS-REFERENCE TO RELATED APPLICATION^ )
[0001] This application claims priority to U.S. Provisional Patent Application Nos. 63/333,115, filed April 20, 2022, and 63/336,107, filed April 28, 2022, each of which is incorporated herein in its entirety by reference.
BACKGROUND
[0002] Digital video streams may represent video using a sequence of frames or still images. Digital video can be used for various applications including, for example, video conferencing, high-definition video entertainment, video advertisements, or sharing of usergenerated videos. A digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission, or storage of the video data. Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
[0003] One technique for compression uses a reference frame to generate a prediction block corresponding to a current block to be encoded. Differences between the prediction block and the current block can be encoded, instead of the values of the current block themselves, to reduce the amount of data encoded, transmitted, and subsequently decoded.
SUMMARY
[0004] This disclosure relates generally to encoding and decoding video data and more particularly relates to estimating and refining a motion field to generate a co-located reference frame for inter-prediction.
[0005] An aspect of this disclosure is an apparatus that includes a processor. The processor is configured to reconstruct a first reference frame and a second reference frame for a current frame to be encoded or decoded, determine a coarse motion field for the current frame using the first reference frame and the second reference frame, determine whether to adjust the coarse motion field using fine motion of a portion of the current frame, responsive to a determination to adjust the coarse motion field using the fine motion, update a motion vector within the coarse motion field of the portion of the current frame using the fine
motion to result in an updated motion field, and determine a co-located reference frame using the updated motion field, responsive to at determination to not adjust the coarse motion field using the fine motion, determine the co-located reference frame using the coarse motion field of the portion of the current frame, and perform an inter-prediction process for the current frame using the co-located reference frame.
[0006] In some implementations, the coarse motion field comprises respective motion vectors for blocks of the current frame, and the fine motion of a portion of the current frame comprises motion vectors for respective sub-blocks of a block of the current frame.
[0007] In some implementations, to determine whether to adjust the coarse motion field using fine motion of a portion of the current frame comprises to determine to not adjust the coarse motion field of the portion of the current frame when a smoothness of the coarse motion field is below a defined threshold.
[0008] In some implementations, to determine whether to adjust the coarse motion field using fine motion of a portion of the current frame comprises to determine a first prediction block for a current block of the current frame from the first reference frame using the coarse motion field, determine a second prediction block for the current block of the current frame from the second reference frame using the coarse motion field, and not adjust the coarse motion field when differences between the first prediction block and the second prediction block are below a threshold.
[0009] Another aspect of this disclosure is a method that includes reconstructing a first reference frame and a second reference frame for a current frame to be encoded or decoded, determining a coarse motion field for the current frame using the first reference frame and the second reference frame, determining fine motion of a block of the current frame, updating a motion vector of the block from the coarse motion field using the fine motion to result in an updated motion field, determining a co-located reference frame using the updated motion field, and performing a prediction process for the current frame using the colocated reference frame.
[0010] In some implementations, determining the fine motion of the block of the current frame comprises determining fine motion of multiple sub-blocks of the block using optical flow estimation, and updating the motion vector comprises updating a motion vector of pixels of each of the multiple sub-blocks.
[0011] In some implementations, the method includes determining whether to update the motion vector of the block.
[0012] In some implementations, determining the fine motion of the block of the current frame comprises determining the fine motion using optical flow estimation.
[0013] Variations in these aspects and other aspects of the present disclosure are disclosed in the following detailed description of the embodiments, the appended claims, and the accompanying figures.
BRIEF DESCRIPTION OF THE DRAWINGS
[0014] The description herein refers to the accompanying drawings described below wherein like reference numerals refer to like parts throughout the several views unless otherwise noted.
[0015] FIG. 1 is a schematic of a video encoding and decoding system.
[0016] FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
[0017] FIG. 3 is a diagram of a typical video stream to be encoded and subsequently decoded.
[0018] FIG. 4 is a block diagram of an encoder according to implementations of this disclosure.
[0019] FIG. 5 is a block diagram of a decoder according to implementations of this disclosure.
[0020] FIG. 6 is a diagram used to explain linear projection of a motion field.
[0021] FIG. 7 is a diagram illustrating a process of generating a co-located reference frame using pixel-level optical flow estimation.
[0022] FIG. 8 is a flowchart diagram of a process for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
[0023] FIG. 9 is a diagram used to explain an example of motion vector concatenation that may be used to estimate a coarse motion field according to the teachings herein.
[0024] FIG. 10 is a diagram used to explain another example of motion vector concatenation that may be used to estimate a coarse motion field according to the teachings herein.
[0025] FIG. 11 is a flowchart diagram of another process for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein.
DETAILED DESCRIPTION
[0026] A video stream can be compressed by a variety of techniques to reduce bandwidth required transmit or store the video stream. A video stream can be encoded into a bitstream, which involves compression, which is then transmitted to a decoder that can decode or decompress the video stream to prepare it for viewing or further processing. Compression of the video stream often exploits spatial and temporal correlation of video signals through spatial and/or motion compensated prediction. Inter-prediction, for example, uses one or more motion vectors to generate a block (also called a prediction block) that resembles a current block to be encoded using previously encoded and decoded pixels. By encoding the motion vector(s), and the difference between the two blocks, a decoder receiving the encoded signal can re-create the current block. Inter-prediction may also be referred to as motion compensated prediction.
[0027] Each motion vector used to generate a prediction block in the inter-prediction process refers to a frame other than a current frame, i.e., a reference frame. Reference frames can be located before or after the current frame in the sequence of the video stream and may be frames that are reconstructed before being used as a reference frame. In some cases, there may be three reference frames or more reference frames available to encode or decode blocks of the current frame of the video sequence. One is a frame that may be referred to as a golden frame. Another is a most recently encoded or decoded frame. Another is an alternative reference frame that is encoded or decoded before one or more frames in a sequence, but which is displayed after those frames in an output display order. In this way, the alternative reference frame is a reference frame usable for backwards prediction. One or more forward and/or backward reference frames can be used to encode or decode a block. The efficacy of a reference frame when used to encode or decode a block within a current frame can be measured based on a resulting signal-to-noise ratio or other measures of rate-distortion.
[0028] In this technique, the pixels that form prediction blocks are obtained directly from one or more of the available reference frames. The reference block pixels or their (e.g., linear) combinations are used for prediction of the current coding block in the current frame. This direct, block-based prediction does not capture the true motion activity available from the reference frames. That is, individual pixels within the block may move differently than the block as a whole and from each other.
[0029] To capture this motion information more fully, motion field information obtained from available reference frames (e.g., one or more forward and one or more backward reference frames) may be used to generate a co-located reference frame or reference frame
portions. This co-located reference frame may provide a better predictor for inter-prediction. More specifically, the pixels obtained from the motion-field generated reference frame for inter-prediction of a current block of a current frame may form a prediction block that more closely matches the current block than any of the conventional reference frames available for inter-prediction.
[0030] As described in more detail below, accurately tracking complicated non- translational motion activity to generate the co-located flow reference frame can be computationally intensive. Approaches are described that can be used to refine motion for such a reference frame for greater accuracy without a significant increase in computational complexity. Further details of this motion refinement for co-located reference frames are described herein with initial reference to a system in which the teachings herein can be implemented.
[0031] FIG. 1 is a schematic of a video encoding and decoding system 100. A transmitting station 102 can be, for example, a computer having an internal configuration of hardware such as that described in FIG. 2. However, other suitable implementations of the transmitting station 102 are possible. For example, the processing of the transmitting station 102 can be distributed among multiple devices.
[0032] A network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream. Specifically, the video stream can be encoded in the transmitting station 102 and the encoded video stream can be decoded in the receiving station 106. The network 104 can be, for example, the Internet. The network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106.
[0033] The receiving station 106, in one example, can be a computer having an internal configuration of hardware such as that described in FIG. 2. However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
[0034] Other implementations of the video encoding and decoding system 100 are possible. For example, an implementation can omit the network 104. In another implementation, a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having a non-transitory storage medium or memory. In one implementation, the receiving station 106 receives (e.g., via the network 104, a computer bus, and/or some communication pathway) the encoded video stream and
stores the video stream for later decoding. In an example implementation, a real-time transport protocol (RTP) is used for transmission of the encoded video over the network 104. In another implementation, a transport protocol other than RTP may be used, e.g., a video streaming protocol based on the Hypertext Transfer Protocol (HTTP).
[0035] When used in a video conferencing system, for example, the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below. For example, the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102) to decode and view and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants.
[0036] FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station. For example, the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1. The computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of one computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
[0037] A CPU 202 in the computing device 200 can be a central processing unit. Alternatively, the CPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now existing or hereafter developed. Although the disclosed implementations can be practiced with one processor as shown, e.g., the CPU 202, advantages in speed and efficiency can be achieved using more than one processor.
[0038] A memory 204 in computing device 200 can be a read only memory (ROM) device or a random-access memory (RAM) device in an implementation. Any other suitable type of storage device or non-transitory storage medium can be used as the memory 204. The memory 204 can include code and data 206 that is accessed by the CPU 202 using a bus 212. The memory 204 can further include an operating system 208 and application programs 210, the application programs 210 including at least one program that permits the CPU 202 to perform the methods described here. For example, the application programs 210 can include applications 1 through N, which further include a video coding application that performs the methods described here. Computing device 200 can also include a secondary storage 214, which can, for example, be a memory card used with a mobile computing device. Because the video communication sessions may contain a significant amount of information, they can be
stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
[0039] The computing device 200 can also include one or more output devices, such as a display 218. The display 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs. The display 218 can be coupled to the CPU 202 via the bus 212. Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218. When the output device is or includes a display, the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display or light emitting diode (LED) display, such as an organic LED (OLED) display.
[0040] The computing device 200 can also include or be in communication with an image-sensing device 220, for example a camera, or any other image-sensing device 220 now existing or hereafter developed that can sense an image such as the image of a user operating the computing device 200. The image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200. In an example, the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
[0041] The computing device 200 can also include or be in communication with a soundsensing device 222, for example a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near the computing device 200. The sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200.
[0042] Although FIG. 2 depicts the CPU 202 and the memory 204 of the computing device 200 as being integrated into a single unit, other configurations can be utilized. The operations of the CPU 202 can be distributed across multiple machines (wherein individual machines can have one or more of processors) that can be coupled directly or across a local area or other network. The memory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of the computing device 200. Although depicted here as one bus, the bus 212 of the computing device 200 can be composed of multiple buses. Further, the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via
a network and can comprise an integrated unit such as a memory card or multiple units such as multiple memory cards. The computing device 200 can thus be implemented in a wide variety of configurations.
[0043] FIG. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded. The video stream 300 includes a video sequence 302. At the next level, the video sequence 302 includes a number of adjacent frames 304. While three frames are depicted as the adjacent frames 304, the video sequence 302 can include any number of adjacent frames 304. The adjacent frames 304 can then be further subdivided into individual frames, e.g., a frame 306. At the next level, the frame 306 can be divided into a series of planes or segments 308. The segments 308 can be subsets of frames that permit parallel processing, for example. The segments 308 can also be subsets of frames that can separate the video data into separate colors. For example, a frame 306 of color video data can include a luminance plane and two chrominance planes. The segments 308 may be sampled at different resolutions.
[0044] Whether or not the frame 306 is divided into segments 308, the frame 306 may be further subdivided into blocks 310, which can contain data corresponding to, for example, 16x16 pixels in the frame 306. The blocks 310 can also be arranged to include data from one or more segments 308 of pixel data. The blocks 310 can also be of any other suitable size such as 4x4 pixels, 8x8 pixels, 16x8 pixels, 8x16 pixels, 16x16 pixels, or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein.
[0045] FIG. 4 is a block diagram of an encoder 400 according to implementations of this disclosure. The encoder 400 can be implemented, as described above, in the transmitting station 102 such as by providing a computer software program stored in memory, for example, the memory 204. The computer software program can include machine instructions that, when executed by a processor such as the CPU 202, cause the transmitting station 102 to encode video data in the manner described in FIG. 4. The encoder 400 can also be implemented as specialized hardware included in, for example, the transmitting station 102. In one particularly desirable implementation, the encoder 400 is a hardware encoder.
[0046] The encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402, a transform stage 404, a quantization stage 406, and an entropy encoding stage 408. The encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks. In FIG. 4, the encoder 400 has the
following stages to perform the various functions in the reconstruction path: a dequantization stage 410, an inverse transform stage 412, a reconstruction stage 414, and a loop filtering stage 416. Other structural variations of the encoder 400 can be used to encode the video stream 300.
[0047] When the video stream 300 is presented for encoding, respective frames 304, such as the frame 306, can be processed in units of blocks. At the intra/inter prediction stage 402, respective blocks can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction). In any case, a prediction block can be formed. In the case of intra-prediction, a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of interprediction, a prediction block may be formed from samples in one or more previously constructed reference frames. The designation of reference frames for groups of blocks is discussed in further detail below.
[0048] Next, still referring to FIG. 4, the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual). The transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms. The quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated. The quantized transform coefficients are then entropy encoded by the entropy encoding stage 408. The entropy-encoded coefficients, together with other information used to decode the block, which may include for example the type of prediction used, transform type, motion vectors and quantizer value, are then output to the compressed bitstream 420. The compressed bitstream 420 can be formatted using various techniques, such as variable length coding (VLC) or arithmetic coding. The compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein.
[0049] The reconstruction path in FIG. 4 (shown by the dotted connection lines) can be used to ensure that the encoder 400 and a decoder 500 (described below) use the same reference frames to decode the compressed bitstream 420. The reconstruction path performs functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform
coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual). At the reconstruction stage 414, the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block. The loop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
[0050] Other variations of the encoder 400 can be used to encode the compressed bitstream 420. For example, a non-transform-based encoder can quantize the residual signal directly without the transform stage 404 for certain blocks or frames. In another implementation, an encoder can have the quantization stage 406 and the dequantization stage 410 combined in a common stage.
[0051] FIG. 5 is a block diagram of a decoder 500 according to implementations of this disclosure. The decoder 500 can be implemented in the receiving station 106, for example, by providing a computer software program stored in the memory 204. The computer software program can include machine instructions that, when executed by a processor such as the CPU 202, cause the receiving station 106 to decode video data in the manner described in FIG. 5. The decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106.
[0052] The decoder 500, similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420: an entropy decoding stage 502, a dequantization stage 504, an inverse transform stage 506, an intra/inter prediction stage 508, a reconstruction stage 510, a loop filtering stage 512 and a deblocking filtering stage 514. Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420.
[0053] When the compressed bitstream 420 is presented for decoding, the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients. The dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400. Using header information decoded from the compressed bitstream 420, the decoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400, e.g., at the intra/inter prediction stage 402. At the reconstruction stage 510, the prediction
block can be added to the derivative residual to create a reconstructed block. The loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. [0054] Other filtering can be applied to the reconstructed block. In this example, the deblocking filtering stage 514 is applied to the reconstructed block to reduce blocking distortion, and the result is output as the output video stream 516. The output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein. Other variations of the decoder 500 can be used to decode the compressed bitstream 420. For example, the decoder 500 can produce the output video stream 516 without the deblocking filtering stage 514.
[0055] As mentioned briefly above, a reference frame available for inter-prediction may be a co-located reference frame that is generated (e.g., by interpolation) using a motion field between reference frames of the current frame. While examples described herein describe generating a co-located reference frame, it will be apparent that the teachings apply equally to any reference frame portion in addition to the entire reference frame, such as a block, a slice, etc. Thus, a frame, as used herein, refers to some of all of the frame. A frame portion in one frame is co-located with a frame portion in another frame if they have the same dimensions and are at the same pixel locations within the dimensions of each frame. The co-located reference frame may be determined at the same temporal location as a current frame being encoded or decoded as discussed in more detail below.
[0056] FIG. 6 is a diagram used to explain linear projection of a motion field. Within a hierarchical coding framework, the motion field of the current frame may be estimated using the nearest available reconstructed (e.g., reference) frames before and after the current frame. In FIG. 6, the reference frame 1 is a reference frame that may be used for forward prediction of the current frame 600, while the reference frame 2 is a reference frame that may be used for backward prediction of the current frame 600.
[0057] Knowing the display indexes of the current and reference frames, motion vectors may be projected between the pixels in the reference frames 1 and 2 to the pixels at a location of the current frame 600 assuming that the motion field is linear in time. In FIG. 6, a projected motion vector 604 for a location of a pixel 602 co-located with the current frame 600 is shown. The single motion vector 604 shown in FIG. 6 may represent the same or a different amount of motion between pixel locations of the reference frame 1 and the current frame 600 than between pixel locations of the reference frame 2 and the current frame 600. In either case, the projected motion vector 606 is assumed to be linear for a pixel between the reference frame 1, the current frame 600, and the reference frame 2.
[0058] Selecting the nearest available reconstructed forward and backward reference frames and assuming a motion field for respective pixels of the current frame that is linear in time allows generation of the interpolated reference frame using motion flow (e.g., optical flow) estimation to be performed at both an encoder and a decoder (e.g., at the intra/inter prediction stage 402 and the intra/inter prediction stage 508) without transmitting extra information. Instead of the nearest available reconstructed reference frames, it is possible that different frames may be used as designated a priori between the encoder and decoder. In some implementations, identification of the frames used for the motion flow estimation may be transmitted.
[0059] Generation of the interpolated (i.e., the co-located) reference frame may be performed using optical flow estimation in an iterative process on a per-pixel basis. Generally, this may include initializing the motion field (e.g., using linear projection described with regards to FIG. 6), warping the reference frame according to the current motion field, updating the motion field using an estimate of the motion field between the warped reference frames, and blending the resulting warped reference frames.
[0060] Initialization for the optical flow estimation, for example, may be performed using the estimated motion vectors from the current frame to the reference frames. All pixels within the current frame may be assigned an initialized motion vector. They define an initial motion field that can be utilized to warp the reference frames to the current frame.
[0061] The motion vector mvcur of a current pixel may be initialized as a difference between the estimated motion vector mvr2 pointing from the current pixel to the backward reference frame, in this example reference frame 2, and the estimated motion vector mvr2 pointing from the current pixel to the forward reference frame, in this example reference frame 1, according to:
[0062] mvcur = — mvrl + mvr2
[0063] If one of the motion vectors is unavailable, it is possible to extrapolate the initial motion using the available motion vector according to one of the following functions: [0064] wcur = — mvrl ■ (indexr2 — indexrl) / (index cur — indexrl), or
[0065] mvcur = mi!r2 ’ (indexr2 — indexrl) / (index r2 — indexcur).
[0066] In these equations, display indexes indexcur, indexrl, and indexr2 are indexes for the current frame, reference frame 2, and reference frame 1, respectively. The display indexes are any value that can be used to determine the temporal distance between these frames in a display order of the frames.
[0067] Where a current pixel has neither motion vector reference available, one or more spatial neighbors having an initialized motion vector may be used. For example, an average of the available neighboring initialized motion vectors may be used.
[0068] In an example of initializing the motion field, reference frame 2 may be used to predict a pixel of reference frame 1, where reference frame 1 is the last frame before the current frame being coded. That motion vector, projected on to the current frame using linear projection in a similar manner as shown in FIG. 6, results in a motion vector mvcur at the intersecting pixel location, such as the motion vector 606 at the location of the pixel 602. [0069] After initialization, the optical flow estimation may be performed. A pyramid, or multi-layered, structure may be used. In one pyramid structure, for example, the reference frames are scaled down to one or more different scales. Then, the optical flow is first estimated to obtain a motion field at the highest level (the first processing level) of the pyramid, i.e., using the reference frames that are scaled the most. Thereafter, the motion field is upscaled and used to initialize the optical flow estimation at the next level. This process of upscaling the motion field, using it to initialize the optical flow estimation of the next level, and obtaining the motion field continues until the lowest level of the pyramid is reached (i.e., until the optical flow estimation is completed for the reference frame portions at full scale). [0070] The reasoning for this process is that it is easier to capture large motion when an image is scaled down. However, using simple rescale filters for scaling the reference frames can degrade the reference frame quality. To avoid losing the detailed information due to rescaling, a pyramid structure that scales derivatives instead of the pixels of the reference frames to estimate the optical flow is used. This pyramid structure, shown by example in FIG.
7, represents a regressive analysis for the optical flow estimation.
[0071] According to FIG. 7, optical flow estimation may be performed for respective pixels by minimizing the following Lagrangian function (1):
[0073] In the function (1), Jctata is the data penalty based on the brightness constancy assumption (i.e., the assumption that an intensity value of a small portion of an image remains unchanged over time despite a position change). Jspatiai is the spatial penalty based on the smoothness of the motion field (i.e., the characteristic that neighboring pixels likely belong to the same object item in an image, resulting in substantial the same image motion). The Lagrangian parameter A controls the importance of the smoothness of the motion field. A large value for the parameter A results in a smoother motion field and can better account for
motion at a larger scale. In contrast, a smaller value for the parameter A may more effectively adapt to object edges and the movement of small objects.
[0076] The horizontal component of a motion field for a current pixel is represented by it, while the vertical component of the motion field is represented by v. Broadly stated, Ex, Ey, and Etare derivatives of pixel values of reference frame portions with respect to the horizontal axis x, the vertical axis y, and time t (e.g., as represented by frame indexes). The horizontal axis and the vertical axis are defined relative to the array of the pixels forming the current frame, such as the current frame 600, and the reference frames, such as the reference frames 1 and 2.
[0077] In the data penalty function, the derivatives Ex, Ey, and Et may be calculated according to the following functions (3), (4), and (5):
[0083] The variable E(r1^ is a pixel value at a projected position in the reference frame 1 based on the motion field of the current pixel location in the current frame being encoded. Similarly, the variable
[0085] The variable Ex is the horizontal derivative calculated at the reference frame 1 Cr2) using a linear filter. The variable Ex is the horizontal derivative calculated at the reference frame 2 using a linear filter. The variable Ey is the vertical derivative calculated at the
Cr2) reference frame 1 using a linear filter. The variable Ey is the vertical derivative calculated at the reference frame 2 using a linear filter.
[0086] In an implementation, the linear filter used for calculating the horizontal derivative is a 7-tap filter with filter coefficients [-1/60, 9/60, -45/60, 0, 45/60, -9/60, 1/60]. The filter can have a different frequency profile, a different number of taps, or both. The linear filter used for calculating the vertical derivatives may be the same as or different from the linear filter used for calculating the horizontal derivatives.
[0089] In the spatial penalty function (6), Ait is the Laplacian of the horizontal component it of the motion field, and Av is the Laplacian of the vertical component v of the motion field.
[0090] In processing according to the pyramid structure shown in FIG. 7, there are multiple processing levels. The initialization of the motion field (comprising the motion vectors of the pixels) described above is input for the first processing level. Assuming a constant value for the Lagrangian parameter A for solving the Lagrangian function (1), the reference frames are warped to the current frame position according to the motion field for the current processing level. For this process, the respective motion vectors mvcur that are used at the first processing level are downscaled from their resolution value to the resolution of the level before performing the warping. For example, to warp reference frame 1, the linear projection assumption (e.g., that the motion projects linearly over time) is used to determine a respective motion vector mvrl as follows:
[0091] nwrl = (indexcur — indexrl) / (indexr2 — indexrl) ■ mvmr
[0092] The horizontal component url and the vertical component url of the motion field mvrl may be rounded to a defined precision, and then each pixel in a first warped image (reference frame) Ewcu.pecl is calculated as the referenced pixel given by the motion vector mvrl. Subpixel interpolation may be performed.
[0093] The same warping approach is done for reference frame 2 to get a second warped image (reference frame) Ewa’ped. where a respective motion vector mvr2 is calculated by: [0094] nwr2 = (indexr2 — index mr) / (indexr2 — indexrl) ■ mvmr
[0095] The two warped reference frames are used to estimate the motion field between them by calculating the derivatives Ex, Ey, and Et at the original (full) scale using the functions (3), (4), and (5), and the derivatives are downscaled to the current level. Optical flow estimation is performed according to the Lagrangian function (1) using the downscaled derivatives. More specifically, by setting the derivatives of the Lagrangian function (1) with
respect to the horizontal component u of the motion field and the vertical component v of the motion field to zero (i.e., dj /du = 0 and dj /dv = 0), the components u and v may be solved for all N pixels of a frame with 2 * N linear equations. The motion field for the pixels is updated (or refined) using the estimated motion field between the warped reference frames. For example, the current motion field may be updated by adding the estimated motion vectors for pixels on a pixel-by-pixel basis.
[0096] If there are additional processing levels, the motion field is upscaled before processing the next layer. The process of upscaling the motion field, using it to initialize the optical flow estimation of the next level, and obtaining the updated motion field continues until the lowest level of the pyramid is reached (i.e., until the optical flow estimation is completed for the derivatives calculated at full scale). Thereafter, the warped reference frames are blended to form the optical flow reference frame E(ciir/ The blending may be performed using any technique. In an example, the blending may be performed using the time linearity assumption (e.g., that frames are spaced apart by equal time periods) as follows:
[0098] As is clear from the above description, warping may also be referred to as interpolation, as the motion is used to interpolate (warp) the reference frame to the time of the current frame. Blending combines the interpolated frames or frame portions that are colocated after the interpolation.
[0099] The optical flow estimation performed according to the Lagrangian function (1) uses 2 * N linear equations to solve the horizontal component u and the vertical component v of the motion vector for all N pixels of a reference frame. In other words, the computational complexity of optical flow estimation is a polynomial function of the frame size, which imposes a burden on the decoder complexity. Even where only less that an entirety of the frame is generated, the computational complexity is high. This complexity is even greater where the Lagrangian parameter A is annealed, e.g., at each processing level the Lagrangian parameter A is reduced in successive iterations of estimating and updating the motion field before advancing to a new level.
[0100] While computationally complex, these and other techniques that calculate a motion field at the pixel level can be very accurate. That is, the resulting co-located reference frame can be used to inter-predict at least some blocks of the current frame with a reduced
coding error as compared with using the other reference frames available to inter-predict blocks of the current frame.
[0101] Because pixel-level optical flow estimation, as well as per-pixel interpolation, can be computationally intensive, this approach may not be desirable in some applications. For example, a generated motion field may be limited to motion vectors for a larger block size, such as 8x8 or larger blocks. Use of the original block-based motion field reduces computations as described above. However, the motion field may be too coarse and inaccurate for some movement in video frames. It would be desirable to refine the motion fields to smaller blocks without the requirement to generate pixel-level motion vectors through optical flow estimation.
[0102] To achieve this goal, block-level optical flow refinement of motion vectors may be performed for a co-located reference frame using optical flow instead of doing a full optical flow estimation to generate a pixel-level motion field. For example, the motion field may be refined to generate a motion field for smaller blocks, such as a final refined block size of 4x4 pixels. This simplifies interpolation as compared to use of a per-pixel motion field by reducing calculation complexity, while improving prediction accuracy over using a coarse motion field calculation using optical flow estimation techniques or using other available reference frames. The refinement may be performed at both the encoder and decoder.
[0103] FIG. 8 is a flowchart diagram of a process 800 (a technique, method, etc.) for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein. In this example, an entire colocated reference frame is determined, but the teachings apply equally to where less than the entirety of a frame is processed.
[0104] The process 800 can be implemented, for example, as a software program that may be executed by computing devices such as transmitting station 102 or receiving station 106. For example, the software program can include machine-readable instructions that may be stored in a memory such as the memory 204 or the secondary storage 214, and that, when executed by a processor, such as CPU 202, may cause the computing device to perform the process 800. The process 800 can be implemented using specialized hardware or firmware. Some computing devices may have multiple memories or processors, and the operations described in the process 800 can be distributed using multiple processors, memories, or both.
[0105] The process 800 may be performed during an encoding process, such as performed using the encoder 400 shown in FIG. 4, or during a decoding process, such as performed using the decoder 500 shown in FIG. 5. For example, when performed during an
encoding process, the process 800 may be partially performed as part of a reconstruction loop of an encoder, such as using the dequantization stage 410, the inverse transform stage 412, the reconstruction stage 414, and/or the loop filtering stage 416 shown in FIG. 4, as well as using a prediction stage of the encoder, such as using the intra/inter prediction stage 402 shown in FIG. 4. In such a case, information used for the prediction may be derived from the reconstruction loop of the encoder.
[0106] In another example, when performed during a decoding process, the process 800 may be performed using conventional aspects of a decoder used to reconstruct reference frames and perform prediction against an encoded frame, such as the entropy decoding stage 502, the dequantization stage 504, the inverse transform stage 506, the reconstruction stage 510, and the intra/inter prediction stage 508 shown in FIG. 5. In such a case, information used for the prediction may be derived from a bitstream to which the reference frames and encoded frame are encoded, such as the compressed bitstream 420 shown in FIGS. 4 and 5. [0107] The process 800 may be performed sequentially for video frames to be predicted. Frames may be coded, and hence predicted, in any order. The frames to be predicted may also be referred to as a first, second, third, etc. frame. The label of first, second, etc. does not necessarily indicate an order of the frames. Instead, the label is used to distinguish one current frame from another herein unless otherwise stated. At an encoder, the frame may be processed in units of blocks in a block coding order, such as a raster scan order. At a decoder, the frame may also be processed in units of blocks according to receipt of their encoded residuals within an encoded bitstream.
[0108] At 802, a first reference frame and a second reference frame for the current frame are reconstructed. When the process 800 is performed at an encoder, reconstructing the first and second reference frames may include at least dequantizing, inverse transforming, and then reconstructing the reference frames from respective quantized transform coefficients processed at the encoder. When the process 800 is performed at a decoder, reconstructing the first and second reference frames may include at least dequantizing, inverse transforming, and then reconstructing the reference frames from reference frame data encoded to a bitstream. Although described with regards to two reference frames, more than two reference frames may be used for determining a co-located reference frame.
[0109] The process 800 may be used when an encoder determines that a co-located reference frame determined from two or more reference frames is used to encode at least a portion of the current frame, such as one or more blocks of the current frame. For example, prediction blocks for a current block of the current frame may be generated for multiple
prediction modes, including performing a motion search within one or more co-located reference frames to select the best matching prediction block for the current block. The prediction blocks may be generated as part of a rate-distortion loop for the current block that uses various prediction modes, including one or more intra prediction modes and both single and compound inter prediction modes using the available prediction frames for the current frame. A single inter-prediction mode uses only a single forward or backward reference frame (e.g., in display order) for inter-prediction. A compound inter-prediction mode may use two or more reference frames for inter-prediction. In a rate-distortion loop, the rate (e.g., the number of bits) used to encode the current block using the respective prediction modes is compared to the distortion resulting from the encoding. The distortion may be calculated as the differences between pixel values of the block before encoding and after decoding. The differences can be a sum of absolute differences or some other measure that captures the accumulated error for blocks of the frames. The prediction mode that results in the lowest rate-distortion error may be selected to encode the block.
[0110] In some implementations, use of the co-located reference frame may be limited to the single inter-prediction mode. That is, the co-located reference frame may not be used in combination with other frames for a compound inter-prediction mode. This can simplify the rate-distortion loop, and little additional impact on the encoding of a block is expected because the co-located reference frame already considers more than one frame.
[0111] A flag may be encoded into the bitstream to indicate whether a co-located reference frame is used for encoding the current frame. The flag may be encoded when any single block within the current frame is encoded using a co-located reference frame block in an example. Where a co-located reference frame is used for encoding the current frame, it is possible to include an additional flag or other indicator (e.g., syntax elements at the block level) indicating whether a current block was encoded by inter-prediction using the colocated reference frame, or whether the current block was encoded using another prediction mode. In cases where more than one co-located reference frame is available, which colocated reference frame to use may be identified. Which frames form a co-located reference frame may also or alternatively be signaled. In some implementations, one or more of these signals may be omitted from the bitstream, and logic common to an encoder and decoder may be used to determine these parameters for decoding the blocks of a current frame.
[0112] Once the first and second reference frames are reconstructed, they may be used to determine a coarse motion field at 804. The coarse motion field may be determined for a current block or for all blocks of the current frame. In an example, a motion vector may be
determined using linear projection that intersects the frame on a block basis, instead of on a pixel basis as described above with regards to FIGS. 6 and 7. Stated differently, one or more motion vectors may be determined for a block, instead of determining motion vectors on a pixel basis, thus forming a coarse motion field for the block that includes the same motion for each of the constituent pixels of the block. The coarse motion field for the frame comprises the motion vectors for the respective blocks.
[0113] The determination of the coarse motion field for a block is not limited to any particular technique. An example of the determination of the coarse motion field may be explained with reference to FIGS. 9 and 10, which determine motion trajectory information using motion vectors of the first reference frame and the second reference frame. The motion trajectory information includes concatenated motion vectors produced by concatenating motion vectors of the first reference frame and motion vectors of the second reference frame. The concatenated motion vectors form a trajectory that intersects the first reference frame, the second reference frame, and the current frame. The motion trajectory information further includes indications of locations (e.g., block locations) of the frame being encoded or decoded at which those concatenated motion vectors point. In some implementations, the motion vectors of the first reference frame and/or of the second reference frame may be signaled within the bitstream.
[0114] Concatenating motion vectors of the first reference frame and motion vectors of the second reference frame may include interpolating motion vectors using motion vectors of a first set of motion vectors associated with the first frame and motion vectors of a second set of motion vectors associated with the second frame, extrapolating motion vectors using motion vectors of the first set of motion vectors and motion vectors of the second set of motion vectors, or otherwise joining motion vectors of the first set of motion vectors and motion vectors of the second set of motion vectors. This may be done on a block-by-block basis.
[0115] For example, a first motion vector may point from a location within a first reference frame and a second motion vector may point from that location within the first reference frame to a location within the current or encoded frame. Those first and second motion vectors may be joined and directly used as a motion trajectory for the current frame. Thus, the motion trajectory information may indicate a motion trajectory according to those first and second motion vectors.
[0116] FIG. 9 illustrates an example of motion vector concatenation between a first reference frame 900, a second reference frame 902, and a current frame 904, in which a first
motion vector 906 points from a location within the first reference frame 900 to a location within the second reference frame 902 and a second motion vector 908 points from that same location within the second reference frame 902 to a location within the current frame 904. For example, the second motion vector 908 may be an already available motion vector, such as where the second motion vector 908 was previously derived. For example, the second motion vector 908 may have been previously derived using the second reference frame 902 and a third reference frame (not shown). The second motion vector 908, after derivation, may thus be projected to the current frame 904. A motion vector resulting from concatenating the first motion vector 1706 and the second motion vector 1708 may be used as the motion trajectory for the current frame 904. Thus, the motion trajectory information for the current frame 904 indicates a motion trajectory according to the first motion vector 906 and the second motion vector 908.
[0117] In some implementations, the current frame 904 may be located in between the first reference frame 900 and the second reference frame 902. In such a case, where a motion vector points from a location within the first reference frame 900 across the current frame 904 to a location within the second reference frame 902, that motion vector may be directly used as the motion trajectory for the current frame 904. In such an implementation, because a single motion vector is directly used as the motion trajectory information, the determination of the motion trajectory information may be performed without concatenating motion vectors. [0118] In another example, the motion trajectory information may be determined using more than two reference frames. For example, a third reference frame may be reconstructed, and motion vectors of the third reference frame may be concatenated along with motion vectors of each of the first and second reference frames to determine the motion trajectory information for a block of the current frame. In such a case, motion vectors each pointing between two of the more than two reference frames may be interpolated or extrapolated to determine interpolated motion vectors or extrapolated motion vectors, as the case may be.
[0119] FIG. 10 illustrates an example of motion vector concatenation between a first reference frame 1000, a second reference frame 1002, a third reference frame 1004, and a current frame 1006, in which a first motion vector 1008 points from a location within the first reference frame 1000 to a location within the third reference frame 1004 and a second motion vector 1010 points from a location within the second reference frame 1002 to that same location within the third reference frame 1004. An interpolated motion vector 1012 pointing between the first reference frame 1000 and the second reference frame 1002 may be determined by interpolating between the first motion vector 1008 and the second motion
vector 1010. The interpolated motion vector 1012 may be used as the motion trajectory for a block of the current frame 1006. In some implementations, where the current frame is not in between the reference frames, an extrapolated motion vector may instead be determined.
[0120] Returning to FIG. 8, an estimate of a coarse motion field for the frame undergoing encoding or decoding is also determined at 806 using the motion trajectory information. The coarse motion field estimate may be a two-dimensional array of motion vectors. The coarse motion field estimate is determined using the motion trajectory information by placing motion vectors concatenated from motion vectors of the first and second reference frames within certain locations of the motion field estimate. For example, the location within the motion field estimate of a motion vector may be based on a block to which the motion vector points within the frame being encoded or decoded.
[0121] In some implementations, one or more motion vectors may be unavailable at locations of the motion field estimate. For example, a motion vector may be missing or omitted from the motion field estimate, such as because it was not derived from pixels of the reference frames. In some such implementations, an unavailable motion vector may be interpolated using one or more neighboring motion vectors within the motion field estimate. For example, motion derived from pixels neighboring a co-located location within the first reference frame and the second reference frame may be interpolated to derive a motion vector. The derived motion vector may then be represented at the corresponding location of the motion field estimate.
[0122] In some such implementations, the one or more neighboring motion vectors may be weighted according to a relative importance for interpolating the previously unavailable motion vector. For example, weights can be determined for motion vector interpolation for the motion field estimate, in which motion vectors having greater weights are considered more important for use in interpolating an unavailable motion vector. The relative importance of a neighboring motion vector may be based on one or more aspects including, but not limited to, a magnitude and/or direction of the neighboring motion vector on its own or relative to other neighboring motion vectors, similarities between pixel intensities at colocated pixels of the reference frames, or the like.
[0123] The motion field estimation for respective blocks at 804 corresponds to a coarse motion field. The coarse motion field may be used to determine a co-located reference frame. However, improvements to the coarse motion field may be achieved by updating the coarse motion field using fine motion. Fine motion is motion estimated for a smaller portion of the current frame than the current block. Fine motion may be motion vectors determined for sub-
blocks smaller than the blocks used for determining the coarse motion field. Fine motion may be used to adjust, update, or refine motion vectors for individual pixels within the sub-blocks, updating the coarse motion field for the block (and thus the frame as a whole).
[0124] At 806, the coarse motion field may be updated using fine motion. Fine motion may be determined using optical flow techniques. The techniques may be used with reference frames both before and after the current frame and with (e.g., two) reference frames that are either from the past or from the future. The fine motion is determined and is used to refine the motion vectors from the coarse motion field calculations for small blocks, i.e., blocks having a final refined block size smaller than the blocks used to determine the coarse motion field.
The techniques are robust enough to compensate for differing distances of the reference frames from the current frame and can result in a co-located reference frame that may represent more accurate motion, have a reduced calculation complexity, or both, over techniques previously described.
[0125] As initially described with regards to the optical flow estimation, the assumption for optical flow is initially made that the intensity of a pixel does not change with the movement of an object. For a luma pixel in position (x,y) at time t, the derivative of the intensity I over time t is equal to 0 such that:
[0126]
[0128]
[0130] The vector (yx, v ) represents the fine motion applicable to the original motion vector. Another assumption is steady motion, which results in the fine motion vector being equal and opposite in sign from one reference frame to the other. Hence, for the current block Cur and two reference blocks P0 and Pl from a backwards and a forward reference frame, the following hold true.
[0131]
$FG apo a pi apt
[0132] These variables (including the spatial derivatives , "P , !j'i , and
[0133] The fine motion can be obtained by solving a least squares problem for the error between P0 and Pl using these equations so that the following results.
[0135] Q is the region in which fine motion is determined. In the examples herein, Q is a final refined block size kxk, such as a 4x4 block where the prediction block of the current frame is an 8x8 block, but it could be a larger block in some implementations. Solving with the window (x,y) 6 fl results in a refined motion vector for the kxk block as follows.
[0137] As mentioned, this assumes that the temporal distances of the reference frames are equal and opposite. If instead the signed temporal differences are defined so that do is a signed temporal distance from P0 to Cur and di is a signed temporal distance from Pl to Cur, then the fine motion associated with MVO and MV1 are d0
[0138]
[0139] The least-square problem above thus generalizes to the following equation.
[0143] The fine motion may be estimated for each block of the current frame so as to update the coarse motion field for respective blocks. The refined motion vectors may be used to generate co-located reference frame portions as previously described. Stated more generally, after reconstructing the first reference frame and the second reference frame for the current frame to be encoded or decoded, a coarse motion field estimate for frame portions, such as blocks, of the current frame may be determined using the first reference frame and the second reference frame. Thereafter, the fine motion of the kxk blocks of each block of the current frame may be estimated, e.g., using equation (7). Motion vectors each group of kxk pixels of the block may be updated from the motion vector in the coarse motion field using the fine motion to result in refined or updated motion vectors for pixels to form an updated motion field estimate. This may be achieved by, for example, determining the refined motion vectors between the first and second reference frames, whether located before, after, or in positions on opposite sides of the current frame in the video sequence (e.g., according to equation (8)) and using them in place of the values in the previous motion field estimate. The updated motion field estimate may then be used to determine a co-located reference frame at 808.
[0144] The co-located reference frame may be directly interpolated using the motion field estimate. For example, determining the co-located reference frame may include interpolating motion information using the motion field estimate and pixel information using the first reference frame and the second reference frame. The respective prediction blocks from the first and second reference frames can be combined according to any known technique to form a block of the co-located reference frame. In an example, to interpolate the co-located reference frame, two reference frames according to the final optical flow estimate may be warped and combined. For example, they could be averaged. They may be combined using a weighted average, for example according to the following:
[0146] In the above, IRF(X, y) is the pixel intensity at location (x, y) in the co-located reference frame. In0 is the pixel intensity at location (x, y) in the first reference frame. Inl is the pixel intensity at location (x, y) in the second reference frame. Further, tcl =
(n — n0) /(nr — n0). If (it, v) is the motion vector associated with the location (x, y) in the co-located reference frame, then xn0 = x — tdu, xnl = x + (1 — tcl)u. yn0 = y — tdv, and ym = y + (i - td~)v.
[0147] In some implementations, when the motion trajectory information indicates a nonlinear motion trajectory, the co-located reference frame may be used to adjust an offset between the first reference frame and the second reference frame. For example, the motion vector 1012 shown in FIG. 10 is linearly projected to determine a motion field estimate for the current frame 1006. This may assume that an object corresponding to that motion moves in constant velocity and direction. However, it may be the case that the motion of that object curves. In such a case, an extra step of inter-prediction may be performed to correct for potential offsets from the actual motion trajectory to the linear projection of the motion vector 1012. In some such implementations, a motion model (e.g., translational, affine, homographic, warped, etc.) may be used for this purpose.
[0148] After the co-located reference frame is determined at 808, it may be used to perform a prediction process at 810. In some implementations, such as when co-located reference frame portions are determined, those portions may be combined to form the colocated reference frame. Combining the optical flow reference portions may include arranging the optical flow reference portions (e.g., co-located reference blocks) according to the pixel positions of the respective current frame portions used in the generation of the each of the optical flow reference portions. In any event, the co-located reference frame may be stored in a reference frame buffer and used to generate one or more prediction blocks to reconstruct the current frame.
[0149] As mentioned initially, the prediction process at 810 may be performed for reconstruction of a frame using the encoder 400 shown in FIG. 4, or during a decoding process, such as performed using the decoder 500 shown in FIG. 5. For example, a residual from the bitstream may be dequantized, and the dequantized values may be inverse transformed. A prediction block generated using a motion vector from the encoder and the co-located reference frame may be added to the decoded residual. At an encoder, information used for the prediction may be derived from the reconstruction loop of the encoder. At a decoder, information used for the prediction may be derived from a bitstream to which the reference frames and encoded frame are encoded, such as the compressed bitstream 420 shown in FIGS. 4 and 5. For example, generating the prediction block can include using an inter-prediction mode decoded from the encoded bitstream, such as in a block header. A flag
or indicator can be decoded to determine the inter-prediction mode. When the inter-prediction mode is an optical flow reference frame mode (i.e., the block was inter-predicted using an optical flow reference frame), the prediction block for the current block to be decoded is generated using pixels of the optical flow reference frame and a motion vector mode and/or a motion vector.
[0150] In summary, the process 800 synthesizes a reference frame that is co-located with the current frame in time at both an encoder and a decoder. Broadly stated, a coarse blocklevel motion field is determined, and then optical flow estimation is used to refine the motion field to a per-pixel motion field. The per-pixel motion field is used to interpolate the colocated reference frame based on the positions of reference frames relative to the current frame. The process 800 describes refining (updating, modifying, etc.) the coarse motion field for each block of the current frame using fine motion determined by optical flow estimation of smaller kxk sub-blocks.
[0151] By performing the synthesis at the decoder (i.e., instead of signaling the frame or frame portion itself), minimal additional signaling is required, which is generally limited to transmitting a bit or other indicator that the decoder needs to perform the processing for the particular frame or frame portion and potentially signaling which reference frames to use if not already signaled or determined a priori from other data within the bitstream.
[0152] Refinement of the coarse motion field may also be computationally intensive. Accordingly, eliminating an update to the coarse motion field may also speed operation of a decoder. Next discussed are techniques for determine whether the coarse motion field should be refined or updated using fine motion for a block, or if the coarse motion field is acceptable for determining the co-located reference frame.
[0153] FIG. 11 is a flowchart diagram of another method or process 1100 for prediction of a video frame using at least a portion of a co-located reference frame generated using motion refinement according to the teachings herein. In this example, an entire co-located reference frame is determined, but the teachings apply equally to where less than the entirety of a frame is processed.
[0154] The process 1100 can be implemented, for example, as a software program that may be executed by computing devices such as transmitting station 102 or receiving station 106. For example, the software program can include machine-readable instructions that may be stored in a memory such as the memory 204 or the secondary storage 214, and that, when executed by a processor, such as CPU 202, may cause the computing device to perform the process 800. The process 1100 can be implemented using specialized hardware or firmware.
Some computing devices may have multiple memories or processors, and the operations described in the process 1100 can be distributed using multiple processors, memories, or both.
[0155] The process 1100 may be performed during an encoding process, such as performed using the encoder 400 shown in FIG. 4, or during a decoding process, such as performed using the decoder 500 shown in FIG. 5. For example, when performed during an encoding process, the process 1100 may be partially performed as part of a reconstruction loop of an encoder, such as using the dequantization stage 410, the inverse transform stage 412, the reconstruction stage 414, and/or the loop filtering stage 416 shown in FIG. 4, as well as using a prediction stage of the encoder, such as using the intra/inter prediction stage 402 shown in FIG. 4. In such a case, information used for the prediction may be derived from the reconstruction loop of the encoder.
[0156] In another example, when performed during a decoding process, the process 1100 may be performed using conventional aspects of a decoder used to reconstruct reference frames and perform prediction against an encoded frame, such as the entropy decoding stage 502, the dequantization stage 504, the inverse transform stage 506, the reconstruction stage 510, and the intra/inter prediction stage 508 shown in FIG. 5. In such a case, information used for the prediction may be derived from a bitstream to which the reference frames and encoded frame are encoded, such as the compressed bitstream 420 shown in FIGS. 4 and 5. [0157] The process 1100 may be performed sequentially for video frames to be predicted. Frames may be coded, and hence predicted, in any order. At an encoder, the frame may be processed in units of blocks in a block coding order, such as a raster scan order. At a decoder, the frame may also be processed in units of blocks according to receipt of their encoded residuals within an encoded bitstream.
[0158] At 1102, a first reference frame and a second reference frame for the current frame are reconstructed. As this step is performed as described with respect to step 802, further description is omitted here.
[0159] Similar to step 804 in the process 800, the process 1100 determines a coarse motion field using the first and second reference frames at 1104. Thereafter, fine motion is determined for the current frame at 1106. More specifically, for example, fine motion may be determined for the current block at 1106 before determining whether to update the coarse motion field for the block at 1108. In some implementations, the process 1100 may determine whether to refine the coarse motion field for a block of the current frame at 1108 before
determining the fine motion at 1106. In either case, the fine motion may be determined as described above with regards to step 806.
[0160] Determining whether to refine the coarse motion field estimate at 1108 may be performed so as to balance computing requirements against the improvement in interprediction (e.g., predictors) resulting from the refinement. In some implementations, the determination is made to optimize the speed of this process in the overall inter-prediction process.
[0161] In an implementation of the determination of whether to refine the coarse motion field estimate using fine motion (e.g., fine motion for respective blocks) at 1108, the determination includes performing a sequence of steps at the encoder including generating a coarse estimation of the co-located reference frame (F_coarse) using the motion field initialization (i.e., the estimated coarse motion field). Thereafter, the motion field may be refined and used to interpolate the co-located reference frame (F_refined). A comparison of the F_coarse and F_refined with the current frame (F_current) may be performed to determine whether the refinement using the fine motion is useful. For example, if the difference (e.g., mean squared error, etc.) between F_current and F_coarse is not significantly higher (e.g., above a threshold difference) than the difference between F_current and F_refined, then refinement may be omitted, that is, the determination may be made to not refine the coarse motion field estimate. A signal may be sent in the bitstream (such as a 1 bit) to the decoder to signal whether refinement, either pixel-level or block-level, should be used. This technique can avoid unnecessary refinement at the decoder, hence accelerating the decoding speed.
[0162] In some implementations, an individual decision as to whether to apply refinement may be made for each block or sub-block in the co-located reference frame, instead of on a frame basis. To reduce bitrate overhead, an additional bit to the decoder may be omitted, but the encoder and decoder may perform the same decision check. An example of such a check is to determine the smoothness of the initialized (coarse) motion field around the current frame portion (e.g., a block). Various techniques may be used to determine the smoothness. If the motion field is smooth (e.g., the determined smoothness is below a threshold), it is likely that the refinement would not significantly improve the determination of the co-located reference frame portion, and hence would not significantly improve inter-prediction. Under such conditions, refining the coarse reference field estimation for the current frame portion may be omitted.
[0163] Other tests may be done at both the encoder and decoder side where the motion field and the reconstructed reference frames are available. For example, two reference frame blocks corresponding to the current block may be obtained from the first and second reference frames using the initialized/coarse motion field. If the two reference blocks are already very similar, the motion field is already doing a good job matching the current block without refinement. For example, if differences between the two reference blocks are relatively low, the determination at 1108 may be to not refine the coarse motion field. The differences may be measured by the mean square error between pixel values or some other measure. The differences, or a single value representative thereof, may be compared to a threshold to make the determination at 1108.
[0164] There are also other possibilities to by-pass the refinement of a certain block or other frame portion. For example, neighboring blocks may be considered. If the neighboring blocks (or a certain number of neighboring blocks) were encoded and/or decoded using refined motion vectors, the current block may use the refined motion vectors (e.g., instead of the coarse motion field) in the determination of the co-located reference frame.
[0165] At 1108, the process 1100 advances to 1110 when the determination is made to update or refine the coarse motion field. At 1110, the coarse motion field is updated using the fine motion as described above. At 1112, processing of the current frame continues using the updated (or refined) motion field. That is, the co-located reference frame may be determined using the updated motion field. If the coarse motion field is not to be refined or updated in response to the query at 1108, the co-located reference frame may be determined using the coarse motion field values at 1112. Although not expressly shown in FIG. 1, the query at 1108 may be made for each block of the frame. Then, the updates at 1110 may be made for those blocks that would benefit from refining the coarse motion field before determining the co-located reference frame at 1112.
[0166] For simplicity of explanation, each of the processes is depicted and described as a series of steps or operations. However, the steps or operations in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, other steps or operations not presented and described herein may be used. Furthermore, not all illustrated steps or operations may be required to implement a method in accordance with the disclosed subject matter.
[0167] The aspects of encoding and decoding described above illustrate some examples of encoding and decoding techniques. However, it is to be understood that encoding and
decoding, as those terms are used in the claims, could mean compression, decompression, transformation, or any other processing or change of data.
[0168] The word “example” is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word “example” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more” unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term “an implementation” or “one implementation” throughout is not intended to mean the same embodiment or implementation unless described as such.
[0169] Implementations of the transmitting station 102 and/or the receiving station 106 (and the algorithms, methods, instructions, etc., stored thereon and/or executed thereby, including by the encoder 400 and the decoder 500) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property (IP) cores, application- specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of the transmitting station 102 and the receiving station 106 do not necessarily have to be implemented in the same manner.
[0170] Further, in one aspect, for example, the transmitting station 102 or the receiving station 106 can be implemented using a general-purpose computer or general-purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein. In addition, or alternatively, for example, a special purpose computer/processor can be utilized that contains other hardware for carrying out any of the methods, algorithms, or instructions described herein.
[0171] The transmitting station 102 and the receiving station 106 can, for example, be implemented on computers in a video conferencing system. Alternatively, the transmitting
station 102 can be implemented on a server and the receiving station 106 can be implemented on a device separate from the server, such as a hand-held communications device. In this instance, the transmitting station 102 can encode content using an encoder 400 into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal using a decoder 500. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by the transmitting station 102. Other suitable transmitting and receiving implementation schemes are available. For example, the receiving station 106 can be a generally stationary personal computer rather than a portable communications device and/or a device including an encoder 400 may also include a decoder 500.
[0172] Further, all or a portion of implementations of the present disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
[0173] The above-described embodiments, implementations and aspects have been described in order to allow easy understanding of the present invention and do not limit the present invention. On the contrary, the invention is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation to encompass all such modifications and equivalent structure as is permitted under the law.
Claims
1. An apparatus, comprising: a processor configured to: reconstruct a first reference frame and a second reference frame for a current frame to be encoded or decoded; determine a coarse motion field for the current frame using the first reference frame and the second reference frame; determine whether to adjust the coarse motion field using fine motion of a portion of the current frame; responsive to a determination to adjust the coarse motion field using the fine motion: update a motion vector within the coarse motion field of the portion of the current frame using the fine motion to result in an updated motion field; and determine a co-located reference frame using the updated motion field; responsive to at determination to not adjust the coarse motion field using the fine motion: determine the co-located reference frame using the coarse motion field of the portion of the current frame; and perform an inter-prediction process for the current frame using the co-located reference frame.
2. The apparatus of claim 1, wherein the coarse motion field comprises respective motion vectors for blocks of the current frame, and the fine motion of a portion of the current frame comprises motion vectors for respective sub-blocks of a block of the current frame.
3 The apparatus of claim 1, wherein to determine whether to adjust the coarse motion field using fine motion of a portion of the current frame comprises to determine to not adjust the coarse motion field of the portion of the current frame when a smoothness of the coarse motion field is below a defined threshold.
4 The apparatus of claim 1, wherein to determine whether to adjust the coarse motion field using fine motion of a portion of the current frame comprises to: determine a first prediction block for a current block of the current frame from the
first reference frame using the coarse motion field; determine a second prediction block for the current block of the current frame from the second reference frame using the coarse motion field; and not adjust the coarse motion field when differences between the first prediction block and the second prediction block are below a threshold.
5. A method, comprising: reconstructing a first reference frame and a second reference frame for a current frame to be encoded or decoded; determining a coarse motion field for the current frame using the first reference frame and the second reference frame; determining fine motion of a block of the current frame; updating a motion vector of the block from the coarse motion field using the fine motion to result in an updated motion field; determining a co-located reference frame using the updated motion field; and performing a prediction process for the current frame using the co-located reference frame.
6. The method of claim 5, wherein determining the fine motion of the block of the current frame comprises determining fine motion of multiple sub-blocks of the block using optical flow estimation, and updating the motion vector comprises updating a motion vector of pixels of each of the multiple sub-blocks.
7. The method of claim 5, comprising: determining whether to update the motion vector of the block.
8. The method of claim 5, wherein determining the fine motion of the block of the current frame comprises determining the fine motion using optical flow estimation.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263333115P | 2022-04-20 | 2022-04-20 | |
US63/333,115 | 2022-04-20 | ||
US202263336107P | 2022-04-28 | 2022-04-28 | |
US63/336,107 | 2022-04-28 |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2023205371A1 true WO2023205371A1 (en) | 2023-10-26 |
Family
ID=86387412
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2023/019322 WO2023205371A1 (en) | 2022-04-20 | 2023-04-20 | Motion refinement for a co-located reference frame |
Country Status (1)
Country | Link |
---|---|
WO (1) | WO2023205371A1 (en) |
-
2023
- 2023-04-20 WO PCT/US2023/019322 patent/WO2023205371A1/en unknown
Non-Patent Citations (3)
Title |
---|
LI BOHAN ET AL: "Optical Flow Based Co-Located Reference Frame for Video Compression", IEEE TRANSACTIONS ON IMAGE PROCESSING, IEEE, USA, vol. 29, 12 August 2020 (2020-08-12), pages 8303 - 8315, XP011804954, ISSN: 1057-7149, [retrieved on 20200814], DOI: 10.1109/TIP.2020.3014723 * |
XIU (INTERDIGITAL) X ET AL: "CE9.5.3: Bi-directional optical flow (BIO) simplification", no. JVET-K0344, 3 July 2018 (2018-07-03), XP030198916, Retrieved from the Internet <URL:http://phenix.int-evry.fr/jvet/doc_end_user/documents/11_Ljubljana/wg11/JVET-K0344-v1.zip JVET-K0344.docx> [retrieved on 20180703] * |
YANG HAITAO ET AL: "Subblock-Based Motion Derivation and Inter Prediction Refinement in the Versatile Video Coding Standard", IEEE TRANSACTIONS ON CIRCUITS AND SYSTEMS FOR VIDEO TECHNOLOGY, IEEE, USA, vol. 31, no. 10, 27 July 2021 (2021-07-27), pages 3862 - 3877, XP011880770, ISSN: 1051-8215, [retrieved on 20210930], DOI: 10.1109/TCSVT.2021.3100744 * |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11284107B2 (en) | Co-located reference frame interpolation using optical flow estimation | |
CN110741640B (en) | Optical flow estimation for motion compensated prediction in video coding | |
US11350102B2 (en) | Block-based optical flow estimation for motion compensated prediction in video coding | |
US20240098298A1 (en) | Segmentation-based parameterized motion models | |
US11025950B2 (en) | Motion field-based reference frame rendering for motion compensated prediction in video coding | |
CN110741641B (en) | Method and apparatus for video compression | |
US20200260112A1 (en) | Diversified motion using multiple global motion models | |
US8908767B1 (en) | Temporal motion vector prediction | |
CN111886868B (en) | Method and apparatus for adaptive temporal filtering for substitute reference frame rendering | |
WO2023205371A1 (en) | Motion refinement for a co-located reference frame | |
US11917128B2 (en) | Motion field estimation based on motion trajectory derivation | |
WO2024081012A1 (en) | Inter-prediction with filtering | |
CN118055253A (en) | Optical flow estimation for motion compensated prediction in video coding | |
WO2023219616A1 (en) | Local motion extension in video coding | |
WO2024072438A1 (en) | Motion vector candidate signaling | |
Sui et al. | Whole-frame error concealment with improved backward motion estimation for H. 264 decoders |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 23724506Country of ref document: EPKind code of ref document: A1 |