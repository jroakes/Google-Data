Detailed description of the invention
The accompanying drawings and the description below describe specific embodiment the most by way of illustration.Those skilled in the art
Can be used this in the case of without departing from the principles described herein by easily recognizing from following description
The alternative embodiment of the structures and methods shown in literary composition.Reference will now be made in detail to now some embodiments, its
Example is illustrated in accompanying drawing.As long as it should be noted that feasible, similar or identical reference number
Word can be with in the drawings and may indicate that similar or identical function.
Fig. 1 is shown in the program code 100 and Dynamic Execution module 101 performed in environment 120.
Performing that environment 120 includes can trustship perform one or more computers of computer program instructions
System.In one embodiment, performing environment 120 is single computer systems, such as web
Server.In another embodiment, the some calculations machine system performing that environment includes being connected by network
System, such as the server computer in data center.
Such as, program code 100 includes with such as Python, Perl, Ruby, PHP etc.
The computer source code of computer language.Program code 100 can include initial code 106 and fortune
CC condition code 107 during row.Quilt when initial code 106 is included in the execution initiating program code 100
The computer instruction loaded.Such as, initial code 106 can include " principal function " with program
Or the file of " major cycle ".Initial code 106 can load when calling operation condition generation when executed
The additional computer program instruction of code 107.During operation, CC condition code 107 can be based on initiating
Situation about determining after execution loads conditionally.Such as, during operation, CC condition code 107 can
Refer to including the operationally current computer performed from data base loads based on program code 100
Order.
Dynamic Execution module 101 is carried out the assembly of environment 120, and it makes program code 100
Can more efficiently carry out.Dynamic Execution module 101 instead of for such as PHP, Perl,
The standard virtual machine of the programming language of Python or Ruby or resolver.Dynamic Execution module 101
Can be the software module of execution on the hardware of other process also performing environment 120,
Or it can perform in the dedicated hardware resources of its own.When program code 100 is performing
When performing in environment 120, Dynamic Execution module 101 manages and monitors that this execution is to guarantee to perform
Both the most effectively.Dynamic Execution module 101 can generate by using instant machine code, generation
Chip segment is followed the tracks of, machine code is reused, context follows the tracks of and other technology is to improve program generation
The execution of code 100.Describe in further detail some in these technology herein.
Dynamic Execution module 101 includes performing resource 102 and performing support module 105.Perform
Resource 102 is the resource generated for specific program code 100, and some of them resource may span across phase
Exist with some the calling of code always.Perform resource 102 to include performing context 103 and holding
Line code storehouse 104.Perform shape when context 103 stores specific program dynamic operation upon execution
State and may span across structure and the state of the different program code 100 performing and existing always.Perform
Context 103 includes structure, and this structure stores for the function in program code 100, change
Quoting of the element that amount and user defined type (such as class, structure etc.) generate.Perform up and down
Literary composition 103 can be reset between the calling of program code 100, to prevent from calling from one
Next of dynamic value pollution code is called.But, perform context reset can be performed as so that
Keep Nonvolatile data (it can migrate between calling).Perform code library 104 to be stored in
This execution of program and previously the term of execution machine code that generates from program code 100.Hold
Line code storehouse 104 is used as the caching of the machine code generated from program code 100 so that in journey
Need not duplicated code between the calling of sequence generate.Perform context 103 to be used for following the tracks of execution generation
In code storehouse 104, the relevant machine code part of currently calling to program (such as, is used for currently
The machine code etc. of the function definition called).Performing support module 105 is Dynamic Execution module
101 provide support when running, such as instant machine code to generate, perform management etc..
Entity shown in Fig. 1 utilizes the mould in one or more computer or such computer
Block realizes.Fig. 2 is the high level block diagram illustrating exemplary computer 200.Computer 200 includes
It is coupled at least one processor 202 of chipset 204.Chipset 204 includes memorizer control
Device center (hub) 220 and input/output (I/O) controller center 222.Memorizer (memory)
206 and EGA 212 be coupled to Memory Controller center 220, display 218 couples
To EGA 212.Storage device 208, keyboard 210, instruction device 214 and network are fitted
Orchestration 216 is coupled to I/O controller center 222.The other embodiments of computer 200 has not
Same framework.
Storage device 208 be such as hard disk drive, compact disk read only memory (CD-ROM),
The non-transient computer-readable recording medium of DVD or solid-state storage device.Memorizer 206 is protected
Deposit the instruction and data that processor 202 is used.Instruction device 214 be mouse, tracking ball or
Other type of instruction device, and be applied in combination to input to computer 200 with keyboard 210
Data.EGA 212 shows image and out of Memory on the display 218.Network is fitted
Computer 200 is coupled to one or more computer network by orchestration 216.
Computer 200 is adapted for carrying out computer program module to provide function as herein described.As
Used herein, term " module " refers to for providing the computer program logic specifying function.Therefore,
Module can be implemented in hardware, firmware and/or software.In one embodiment, program module quilt
It is stored on storage device 208, is loaded in memorizer 206, and is held by processor 202
OK.
The type of the computer 200 that the entity of Fig. 1 is used can be according to embodiment and entity institute
Need disposal ability and change.Such as, perform environment 120 can include working together to provide
Multiple blade servers of function as herein described.Computer 200 can lack in said modules
Some, such as keyboard 210, EGA 212 and display 218.
Fig. 3 is illustrate assembly in the Dynamic Execution module 101 according to an embodiment detailed
The high level block diagram of view.As it was previously stated, Dynamic Execution module 101 includes performing resource 102 He
Perform support module 105.Perform resource 102 to farther include perform context 103 and perform generation
Code storehouse 104.
As it was previously stated, perform context 103 to store the current run time behaviour that prize procedure performs
Data and may span across routine call and there is to accelerate the following execution of same program code always
Information.Perform context 103 include function table 301, argument table 302, allocation table 304,
Source-representation storehouse 309 and comprise table (include table) 310.Perform context 103 may also include
For the table of various user defined types, such as class table 303.Table needed for user defined type will
Depend on the specific dynamic language performed by Dynamic Execution module 101.In the case of PHP,
Class table 303 can be used, but in the case of there is no the language of not face object of class, class table
303 can be without necessity, and other user defined type followed the tracks of by available similar table.
Allocation table 304 is data structure, and it is non-volatile that it comprises defined in initial code 106
Data and operationally at the element calling period dynamically distribution of program.Such as, allocation table
Variable, structure and the user defined type (such as class) of statement in 304 storage program codes 100.
Dynamic Execution module 101 can be by previously calling used storage based on program code 100
Device allocate in advance in allocation table 304 space and by perform context 103 replacement it
Between keep the Nonvolatile data in allocation table 304, reduce what program code 100 was carried out
The amount of runtime storage distribution.The single execution of leap program code 100 exists always
The example of data includes global constant, global variable, overall situation class etc..It is stored in allocation table 304
In element can be quoted by the entry in argument table 302 and class table 303.
Function table 301 be according to title and Code Context by Function Mapping to performing code library
The data structure of the machine code of the compiling in 104.Code Context utilizes it to call function
Context, such as parameter, comprise, NameSpace etc..In dynamic language, function call
Code Context can change the code performed by function call.Such as, change is tied to function name
Condition before the function call of the code claimed comprises statement and may result in this function call with it formerly
The different code snippet called in front execution, even if function name is identical with parameter.
When program code 100 be performed and run into previously in same code context (
In previously the performing of program code 100 or time in the early time identical the term of execution) define
When calling of function, the machine code of this function generates and will there is no need, because function can be passed through
Mapping in table 301 accesses the machine being previously generated in same code context for same functions
Device code.On the other hand, if running into new function, if or in new Code Context
Run into known function, then can generate new engine code for this function, and can be by this machine
Quoting in the suitable entry inserted in function table 301 of code.So, the machine that the past has produced
Device code can be reused, and calls the dynamically generation of different code based on context without sacrifice
The motility of function.
Name variable is mapped to the variable of storage in allocation table 304 by argument table 302.Similarly,
User defined type can have by those types name example map in allocation table 304 point
The table joined.Such as, class name is mapped to the class of storage in allocation table 304 by class table 303.Can
Operationally change Code Context based on variable or user defined type revises this mapping.
This make Dynamic Execution module 101 can support run time variable and user defined type are moved
State changes, and still is able to optimize in the case of variable and user defined type are non-volatile simultaneously
With reuse.
Function table 301, argument table 302 and table (the such as class table for user defined type
303) the unconditional onboard data not being dynamically modified can be made can to cross over program code 100
Independently execute and exist always.This persistence of unconditional onboard data can be built-in non-by making
Initialization needed for volatile data minimizes that to accelerate newly calling of program code 100 required
Initial setting up.
Source-representation storehouse 309 includes having been processed by Dynamic Execution module 101 in program code 100
The expression of instruction.Source-representation storehouse 309 can according to can faster access instruction structure so that dynamically
The mode performing module 101 process stores the instruction of program code 100.Such as, at one
In embodiment, the instruction from program code 100 stores according to the form of controlling stream graph (CFG)
In source-representation storehouse 309.In another embodiment, the instruction of program code 100 is according to abstract
The form storage of syntax tree (AST).Such constructive embodiment can accelerate code building and code
Index.
For example, it is assumed that program code 100 includes that following PHP instructs:
In one implementation, source-representation storehouse 309 can comprise corresponding CFG, and it (is expressed
For text, and non-binary data) can look like:
It is above the formatting printout of the content of a possible CFG.In memory, this
CFG can store in different forms.CFG can implement details according to Dynamic Execution module
And structuring in different forms, and when being printed, for identical PHP code, these
CFG can be given and be different from text representation illustrated above.
Comprise table 310 comprise in program code 100 instruction to for those instruction generate can
It is stored in the mapping of the machine code performed in code library 104.When program code 100 is by dynamically
When execution module 101 processes, the source-representation of the instruction in program code is stored in source-representation storehouse
In 309.Comprise table 310 and preserve the entry of the every Codabar code operationally imported and to this generation
What the machine code of code was positioned at performs quoting of code library 104.Comprise the entry in table 310
May also include quoting source-representation storehouse 309, to indicate the program code corresponding with machine code
Instruction.This entry can include that tracking self-generating machine code plays program code 100 and the most changes
Mechanism (such as timestamp).If be detected that change, then Dynamic Execution module 101 will swash
The process of living generates new machine code with the part of the change for program code 100.
Perform code library 104 to store and generated from program code 100 by Dynamic Execution module 101
Machine code.When preset sequence code 100 is performed first, perform code library 104 and do not wrap
Containing the machine code for this program.When program is performed first Dynamic Execution module 101 from
Program code 100 generates machine code.When the subsequent execution of same program code 100, hold
Line code storehouse 104 will have the machine code existed for this program.This elder generation previous existence
The machine code become can be directly executed, and without further code building.If program generation
Currently calling of code 100 performs the instruction that was not carried out in the past and is performing code library 104
In not for its machine code, then Dynamic Execution module 101 will generate for these instructions
Machine code and be stored in performing in code library 104.Perform in code library 104
Machine code includes personal code work and system code.Personal code work corresponds to directly from program code
The machine code that instruction in 100 generates.System code be by Dynamic Execution module 101 generate with
Personal code work is linked together and can be with performing context 102 and Dynamic Execution
The code of other assembly operation of module 101.It is logical that system code makes personal code work to utilize
Cross and perform reusability and the performance optimization that context 103 realizes.Such as, for program code 100
In variable reference, Dynamic Execution module 101 can generate machine code, and described machine code exists
Argument table 302 is searched the entry for this variable, then uses this table clause as in program
Variate-value.
For example, it is assumed that program code 100 comprises following PHP code:
Can be by Dynamic Execution module 101 for the above PHP code following machine code of generation:
Here, DynVariables function carrys out instrument during self-operating (runtime utility) 311
Update and the function of access variable table 302.ConvertToStrtng function is by any type of
Variable is changed into character string, and strlen function is the standard C built-in function of the length providing character string.
DoOutput function carrys out the function generating output of instrument 311 during self-operating.This machine code
When carrying out self-operating by use these functions of instrument 311 with perform resource 102 (such as, variable
Table 302) docking, perform the process identical with PHP code.These functions provide right to program
For the access of the dynamic value of all functions, variable, class etc., so that program in machine code
Program can be realized with dynamic language.
Performing the assembly that support module 105 is Dynamic Execution module 101, it is Dynamic Execution mistake
Journey provides to be supported and management.Perform support module 105 to include code generator 307, perform pipe
Instrument 311 when reason device 308 and operation.Perform manager 308 to initiate, monitor, manage and whole
Dynamic performs the execution of the program code 100 in module 101.When using Dynamic Execution module
During 101 caller code 100, perform manager 308 and coordinate Dynamic Execution mould as required
The activation of other assembly of block so that program code 100 is performed correctly.
Perform manager 308 activation code maker 307 to generate machine from code instructions
Code.The machine code generated is stored in execution code library 104 so that same machines generation
At least some in Ma can be reused in the difference of program code 100 is called.This is a kind of excellent
Changing, the code building contributing to making to carry out for program code 100 minimizes.May span across program
Code 100 discrete calls and calls interior identical code snippet program code same and held
In the case of going repeatedly, carry out this optimization.Perform manager 308 and comprise table 310 by use
Have with storing in performing code library 104 of source-representation storehouse 309 tracing program code 100
The part of corresponding machine code, determines the code building needed for preset sequence code 100.When
When using code generator 307 to generate machine code, corresponding code segment is placed on
In source-representation storehouse 309, and there is the entry quoting this code snippet with to performing code
The quoting to be placed on together with the Code Context of this fragment of machine code in storehouse 104 comprises
In table 310.If the term of execution again run into the same code sheet in same code context
Section, then perform manager 308 and will use the existing machine code performed in code library 104.As
Fruit comprise table 310 do not comprise given code snippet entry (if or code snippet have not
With Code Context), then perform manager 308 by activation code maker 307 with for
This code snippet generates machine code in its current code context.The machine code generated will
Be stored in execution code library 104, have code snippet is quoted entry, it is current
Code Context and quoting to be stored in and comprise in table 310 machine code generated.
The effect of this scheme is it to make it possible in the combination that the past did not run into reuse machine
Device code.For example, it is assumed that PHP program comprises entitled Foo () and the function of Bar (), the two
Function is respectively provided with two different statements: Foo (v1), Foo (v2) and Bar (v1), Bar (v2).
It is also supposed that this PHP program is run twice, perform Foo (v1) and Bar (v1) when running for the first time,
Foo (v2) and Bar (v2) is performed when second time is run.If needing when third time is run to perform
Foo (v1) and Bar (v2), then will need not machine code and generate, will because performing code library 104
Have for the two machine code of Foo (v1) and Bar (v2), although function perform this specific
Do not saw before combination.
Perform manager 308 and be also responsible for coordinating same program code 100 in performing environment 120
The execution of multiple examples.If performing environment 120 to allow the multiple of same program code 100
Example performs simultaneously, then must manage the resource of Dynamic Execution module 101 to prevent conflict.Example
As, two processes performing same program code 100 may attempt amendment execution context simultaneously
103.Perform manager 308 and coordinate the two process so that these of identical public resource are repaiied
Change and can carry out in the case of there is no deadlock, race condition or other multiprocessing mistake.Perform pipe
Reason device 308 can use various multi-process management technique to prevent such mistake.These multi-process
Management technique is to it known in the art, outside the scope of the present disclosure.In one embodiment,
Perform manager 308 and maintain the primary copy performing resource 102, and perform journey for each
Sequence code instance generates the independent copy of resource.In this embodiment, at program code example
After executive termination, the change performing resource 102 is written back to primary copy.
During operation, instrument 311 is that auxiliary execution manager 308 provides for Dynamic Execution process
The module of base structure.During operation instrument 311 include can from program code 100 generate CFG or
The process of AST structure, execution context 103 can be reset after the executive termination of program code
Process and management function table 301, argument table 302, for user defined type table, point
Join table 304 and the process comprising table 310.
Fig. 4 is the process of the embodiment execution program code being shown with Dynamic Execution module
Flow chart.When Dynamic Execution module 101 receives the request of 401 execution program codes 100
Shi Suoshu process starts.Described request can be received from another module performed in environment 120.Example
As, web server process can ask the webpage asked by user to perform PHP program code.
Then, perform manager 308 and will determine whether 402 exist and be used for holding of this program code
Row resource 102.If Dynamic Execution module performed identical program code 100 in the past, then
In Dynamic Execution module 101, existence is performed resource 102.If performing resource do not have 403,
Then perform manager 308 and instrument 311 when activating operation is generated 405 new execution resources 102
(that is, perform context 103 and perform code library 104).Perform the assembly of context 103 (i.e.
Function table 301, argument table 302, user defined type table (class table 303), allocation table 304,
Source-representation storehouse 309 and comprise table 310) data of process based on initial code 106 will be amplified.
Initial code will be resolved, and the expression of instruction therein will be stored in source-representation storehouse 309
In.The machine code generated from these initial orders will be stored in execution code library 104,
Comprise table 310 corresponding with execution code library by being amplified the code snippet in source-representation storehouse
The entry that machine code connects.Along with initial code 106 processed with generate source-representation and
Machine code, the entry of function, variable and user defined type for running into is stored respectively
In function table 301, argument table 302 and user defined type table.The distribution of these elements is deposited
Storage is in allocation table 304.
If the execution resource for program code 100 has existed 403, the most existing execution
Context (having called replacement from previously) will be initialised 410.Perform the initial of context 103
Change can relate to: based on by performing what manager 308 was estimated from the previously execution of same program code
Requirement, for performing context predistribution resource.Such as, can be based on the allocated size previously performed
Memorizer is distributed for allocation table 304.It addition, for the execution resource of preset sequence code 100
The assembly of 102 can be augmented with the data previously performed based on same program code in advance.Such as,
If same program code is crossed in executed in Dynamic Execution module 101, then perform code library 104
The machine code that the programmed instruction processed from previously perform generates will be comprised.If the most
Performed program code, then the initial code 106 being likely to this program code is the most processed,
And the machine code for this initial code can be found in performing code library 104.Similarly,
Source-representation storehouse 309 and comprise table 310 and can include source-representation and the bag of previously processed programmed instruction
Containing table clause.Although all function data previously performed, the variable from program code 100
Data and user defined type data are not suitable for the subsequent execution of same program code, but should
Some in data can be reused.These data can be initialized (or reservation) between performing in advance
In function table 301, argument table 302 and various user defined type table.Such as, initial code
In 106, function, variable and the class of statement can be retained in function table 301, argument table 302 respectively
With in class table 303 because in initial code 106 statement element be likely to be suited for preset sequence
Any of code 100 calls.
Once performing resource 102 to be initialised, program performs manager 308 just by dynamically
Perform module 101 and perform 415 program codes 100.The execution of program code 100 is different from leading to
Cross other means performed in environment 120 and perform the process of program code 100.The most dynamically
Perform the typical case of program code in the case of module to perform to be directed to use with interpreter and carry out processing routine generation
The instruction of code, the syllabified code that can perform on a virtual machine with generation.In Dynamic Execution module 101
In the case of, by performing the machine that perform in code library 104 corresponding with initial code 106
Code command initiates the execution of program code 100.No matter performing resource 102 is from previously number
Still 405 regenerated according to initialized 410, these machine code instructions are present in execution generation
In code storehouse 104.The result that the execution of the machine code in execution code library 104 is generated is in merit
It is equal on can perform corresponding code instructions by the normal processes in execution environment.To the greatest extent
Pipe machine code the most directly has the dynamic of the language such as such as PHP, Python, Ruby, Perl
Aspect, but Dynamic Execution module 101 is by performing context 103 and performing support module 105
Realize this dynamic mechanism.Such as, along with the machine code corresponding with program code 100 performs,
It may utilize quotes the different function of element, variable or user defined type based on Code Context.
This dynamically statement achieving dynamic language and binding.If by directly invoking function, variable
The machine code performed in code library 104 is integrally generated with user defined type, the most this
Dynamic mechanism will be impossible.But, owing to for transaction, performing code library 104
In machine code there is no direct referencing function, variable and user defined type, but quote letter
Entry in number table, argument table and user defined type table, these entries provide an indirect layer,
The element that the execution code of transaction is used can change based on Code Context.
Along with the machine code performed in code library 104 performs, it can attempt condition in time running
Code 107 loads extracode fragment.If Dynamic Execution module 101 the most processed this
Code snippet (in or previously calling in this of program code 100 calls), then will be
Source-representation storehouse 309 finds the expression of this code snippet, and comprise table 310 will have for
The entry of this fragment and its Code Context previously performed.If on identical code
Hereinafter call this code snippet, then will find and this code snippet in performing code library 104
Corresponding machine code.If the code snippet in CC condition code 107 generates since it when running
This machine code rises and did not change, then can directly perform this machine code.But, if met
To 416 new code snippets or Code Context (if or the operation corresponding with code snippet
Time CC condition code 107 changed from generating machine code for it), then perform manager 308
By activation code maker 307 to generate the machine code instruction corresponding with code snippet.These
Machine code instruction will be stored in execution code library 104, and by utilization to performing code
Source-representation in source-representation storehouse 309 of the quoting of machine code in storehouse, code snippet and right
Quoting of Code Context, creates corresponding entry in comprising table 310.
Generate new machine code and perform existing machine code in performing code library 104
Can all cause performing resource 102 to need to update 418.Can by perform manager and/or one or
During multiple operation, instrument 311 updates 419 execution resources 102.Execution resource updates may be included in
Function table 301, argument table 302, user defined type table (such as, class table 303), distribution
Table 304 adds in table 310 with comprising or deletes entry.Renewal may also include from performing code library
104 add or remove machine code and add from source-representation storehouse 309 or the source of removing codes fragment
Represent.Such as, when processing fresh code fragment by Dynamic Execution module 101, will difference pin
To the function, variable and class generating function table 301, argument table 302 and the class table that find in fragment
New entry in 303.The machine code generated from fresh code fragment will be stored in execution code library
In 104, and source-representation storehouse 309 would be updated to include the expression of this fragment.Function, variable
Also can be updated to include being stored in execution code library 104 with user defined type entry
Quoting of new engine code.Then the execution 415 of program code 100 continues.
The execution of program code 100 can finally terminate.Can terminate owing to programmed instruction itself arrives
Put and leave program, or program is likely to be due to other reason and is stopped, and generating program
Terminate.Such as, complete or for free system resources due to task, can be by performing ring
Terminator is carried out in border 120.If executive termination 420, then perform manager 308 and will make to perform
Resource 102 is reset 421.Reset execution resource 102 to can relate to from function table 301, argument table
302, user defined type table and allocation table 304 delete entry.Perform manager 308 will attempt
That crosses over program code 100 calls the entry as much as possible retained in these tables；But, one
A little entries cross over different calling inapplicable, because their value is readily able to according to program code
The instruction of middle execution and change.Such as, the entry of the variable in variable storage 302 is by several
Always it is deleted, because the value of variable will depend upon which the order of the operation of the appointment causing them.
Assigned variable (such as, constant) once can be can be across the exception calling reservation by the overall situation
Situation.On the other hand, perform manager 308 and can will be stored in the source table in source-representation storehouse 309
The machine code show, performed in code library 104 and the entry comprised in table 310 all retain.
Source-representation storehouse 309, comprise table 310 and perform to provide together with code library 104 to avoid for the most
Process code snippet once and again generate the means of machine code.But, if program generation
Code 100 changes tempestuously, if or in any execution resource 102, find mistake, then hold
Line supervisor 308 can perform resource 102 (deleting all component of resource) by release completely to be come
Whole system is reset firmly.Perform hard replacement and delete Dynamic Execution module 101 about given journey
All information that sequence code 100 is retained, next execution of program code 100 will be just as it
The execution first of this code equally carries out (that is, it will be unable to benefit from the generation of any previous code).
In order to illustrate said process, presently describe a concrete example.Assume program code 100
Comprise following PHP code:
The original state of Dynamic Execution module will following (represent with people's machine readable text, and non-solid originally
Border binary representation):
Class table:
Name-＞ ID (Table)
" stdClass "-＞ 0
" ExampleClass "-＞ 8
ID-＞ Active Definition (Array)
[0]Prototype for stdClass
[8]<empty>
Function table:
Name-＞ ID (Table)
" _ autoload "-＞ 0
" Conditional "-＞ 1
ID-＞ Active Target (Array)
[0]<empty>
[1]<empty>
Source-representation storehouse (CFG):
″Main″/Top-level CFGs
-″PHPEntryFunc″(″main″)
Function-＞ CFG (Table)
Conditional (v1)-＞ CFG for Conditional (" First Condition ")
Conditional (v2)-＞ CFG for Conditional (" Second Condition ")
Execution code library:
-″PHPEntryFunc″
In this example, execution based on ExampleClass, holding of Dynamic Execution module 101
Row resource 102 is initialised, but does not also generate machine code and state." class table " above
The text exported based on the entry in class table 303 shown partially.The most only stdClass has effectively
Definition." function table " text exported based on the entry in function table 301 shown partially.Here I
See and table existing for _ autoload function and two entries of Conditional () function.This
" Active Target " part of a little functions is also not filled by, because PHP was also not carried out, is performing
Code library also do not has machine code for these functions." source-representation storehouse " is shown partially based on storage
The text of the State-output of the CFG in source-representation storehouse 309.Here we have for
PHPEntryFunc and the CFG for two Conditional () function declaration.
PHPEntryFunc is default function, and it is for each run in Dynamic Execution module 101
PHP program and initialize and perform.Some implementations of Dynamic Execution module 101 may not have
There is such function, or be likely to be of different initiation schemes." execution code library " is shown partially
Text based on the content output performing code library 104.Here, perform code library 104 only to wrap
Containing for the machine code of PHPEntryFunc, this is minimum needed for the execution of start program
Machine code.The most not for this other machine code of PHP Program Generating.
Now, if PHP program illustrated above with arg=0 as a parameter to perform, then hold
Row resource will be updated to as follows.
Class table:
Name-＞ ID (Table)
" stdClass "-＞ 0
" ExampleClass "-＞ 8
ID-＞ Active Definition (Array)
[0]Prototype for stdClass
[8]Prototype for ExampleClass
Function table:
Name-＞ ID (Table)
" _ autoload "-＞ 0
" Conditional "-＞ 1
ID-＞ Active Target (Array)
[0]Pointer to machine code for_autoload
[1]Pointer to machinc code for Conditional(v2)
Source-representation storehouse (CFG):
″Main″/Top-level CFGs
-″PHPEntryFunc″(″main″)
Function-＞ CFG (Table)
Conditional (v1)-＞ CFG for Conditional (" First Condition ")
Conditional (v2)-＞ CFG for Conditional (" Second Condition ")
Execution code library:
-″PHPEntryFunc″
-_autoload
-Conditional(v2)
Once program is performed, exists for some changes to performing context.At class table 303
In in addition to stdClass, also have now the prototype for ExampleClass.At function table 301
In perform code library 104 now with the sensing for _ autoload and Conditional (v2) function
Pointer.The result that a rear pointer is the fact that: arg=0 causes program to pass through if-then-else
" else " branch of statement performs, rather than " if-then " branch.Source-representation storehouse 309 does not change,
Because not having other PHP to be introduced in system.On the other hand, code library 104 is performed present
Comprise have been for _ autoload and Conditional (v2) function generate machine code.
Now, if PHP program illustrated above with arg=1 as a parameter to perform, then hold
Row resource will be updated to as follows:
Class table:
Name-＞ ID (Table)
" stdClass "-＞ 0
" ExampleClass "-＞ 8
ID-＞ Active Definition (Array)
[0]Prototype for stdClass
[8]Prototype for ExampleClass
Function table:
Name-＞ ID (Table)
" _ autoload "-＞ 0
" Conditional "-＞ 1
ID-＞ Active Target (Array)
[0]Pointer to machine code for_autoload
[1]Pointer to machine code for Conditional(v1)
Source-representation storehouse (CFG):
″Main″/Top-level CFGs
-″PHPEntryFunc″(″main″)
Function-＞ CFG (Table)
Conditional (v1)-＞ CFG for Conditional (" First Condition ")
Conditional (v2)-＞ CFG for Conditional (" Second Condition ")
Execution code library:
-″PHPEntryFunc″
-_autoload
-Conditional(v2)
-Conditional(v1)
Here change two importance states.First, function table 301 now point to for
The machine code of Conditional (v1), because " if-then " branch quilt time of if-then-else statement
Go through.Secondly, perform code library 104 and comprise now the additional machine for Conditional (v1) function
Device code.It is noted that Conditional (v2) exists in execution code library.If PHP
Following this branch performing again to need code of source code, then will need not machine code and generate；
Needs are updated by the only pointer in function table 301.
Some parts described above describes embodiment at algorithmic procedure or operating aspect.These are calculated
Method describes and represents and is usually used for this area other technologies by the technical staff of data processing field
Personnel effectively pass on the essence of their work.Although these operate in function, calculate or patrol
It is described on Ji, it should be understood that realized by computer program, microcode etc., institute
State computer program and include the instruction for being performed by processor or equivalent circuit.It addition, the most
Verified these by feature operation arrange be expressed as module sometimes convenient and without loss of generality.Can
With the operation and the mould of association thereof that realize describing with software, firmware, hardware or its any combination
Block.
As used herein, mean to combine to any quoting of " embodiment " or " embodiment "
Particular element, feature, structure or the characteristic that this embodiment describes is included at least one and implements
In example.Description comes across phrase " in one embodiment " everywhere be not necessarily all referring to for identical
Embodiment.
Some embodiments can use expression " to couple " and " connection " and derivative thereof describe.Should
Understanding, these terms are not intended as synonym each other.Such as, some embodiments can make
" connect " with term and describe to indicate two or more elements the most physically and electrically to connect
Touch.In another example, some embodiments can use term " couple " describe to indicate two or
More element direct physical or electrical contact.But, term " couples " and however, may also mean that two or more
Multiple elements are not in direct contact with one another, but still coordination with one another or mutual.Embodiment does not limits
In such context.
As used herein, term " includes ", " comprising ", " having " or its other change any
Body is intended to cover including of non-exclusive implication.Such as, including the process of element list, method,
Goods or equipment are not necessarily solely those elements, but can include not expressly listed or such
Other element that process, method, goods or equipment are intrinsic.It addition, it is unless the clearest and the most definite
Point out, otherwise " or " refer to include implication or, and non-exclusive implication or.Such as,
Any one in the following meets condition A or B:A is true (or existence) and B
It is that false (or not existing), A are false (or not existing) and B is true (or existence)
And A and B is very (or existence).
Additionally, use " one " or " one " to describe element and the assembly of embodiment herein.This
Sample is only done for convenience and provides the general significance of the disclosure.Should be appreciated that this describes bag
Include one or at least one, and unless substantially meant otherwise, otherwise odd number also includes plural number.
When reading the disclosure, it will be appreciated by those skilled in the art that the optimization for dynamic language is held
The system of row and the additional alternative 26S Proteasome Structure and Function design of process.Therefore, although having shown that also
Describe specific embodiment and application, it will be understood that described theme is not limited to institute's public affairs herein
Accurately structure and the assembly opened, can the layout of presently disclosed method and apparatus, operation and
Details aspect carry out those skilled in the art by the most various amendments, change and change.