CN112384938A - Text prediction based on recipient's electronic messages - Google Patents
Text prediction based on recipient's electronic messages Download PDFInfo
- Publication number
- CN112384938A CN112384938A CN201980045721.5A CN201980045721A CN112384938A CN 112384938 A CN112384938 A CN 112384938A CN 201980045721 A CN201980045721 A CN 201980045721A CN 112384938 A CN112384938 A CN 112384938A
- Authority
- CN
- China
- Prior art keywords
- text
- user
- message
- electronic message
- machine learning
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
- G06Q10/107—Computer-aided management of electronic mailing [e-mailing]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/274—Converting codes to words; Guess-ahead of partial word inputs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/55—Rule-based translation
- G06F40/56—Natural language generation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/20—Ensemble learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/21—Monitoring or handling of messages
- H04L51/216—Handling conversation history, e.g. grouping of messages in sessions or threads
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/42—Mailbox-related aspects, e.g. synchronisation of mailboxes
Abstract
An example method includes receiving, by a computing system, an identification of a recipient of an electronic message being composed from a message account associated with a user; predicting, by the computing system, text of a body of a previous electronic message sent from the messaging account based on text contained in the electronic message; and outputting the predicted text for display for arbitrary selection and insertion into the body of the electronic message.
Description
Background
Some computing systems provide electronic messaging (e.g., email) services that facilitate quick and easy communication between users of computing devices. Drafting and otherwise editing electronic messages can be cumbersome and take a significant amount of time, which can result in reduced use of electronic messages and/or inefficient communication of information.
Disclosure of Invention
In the general technology of the present disclosure, it relates to implementing text prediction for editing an electronic message based on the recipient of the electronic message. An example computing system (e.g., an email system) is described that is configured to provide suggested text to a user that is editing an electronic message. For example, after a user enters an electronic message in a recipient (i.e., addressee), the computing system may predict and provide candidate text for the body of the electronic message. The computing system may predict candidate text based on prior text used by the user (e.g., the computing system may utilize one or more machine learning models trained on electronic messages previously sent by the user). In this manner, the computing system may increase the speed at which electronic messages are composed.
In one example, a method includes receiving, by a computing system, from a message account associated with a user, an identification of a recipient of an electronic message being composed; predicting, by the computing system, text of a body of a previous electronic message sent from the messaging account based on text contained in the electronic message; and outputting the predicted text for display for arbitrary selection and insertion into the body of the electronic message.
In another example, a computing system includes one or more user interface components configured to receive entered user input; and one or more processors. In this example, the one or more processors are configured to: receiving, from a message account associated with a user, an identification of a recipient of an electronic message being composed; predicting text of a body of a previous electronic message sent from the messaging account based on text contained in the electronic message; and outputting the predicted text for display for arbitrary selection and insertion into the body of the electronic message.
In another example, a computer-readable storage medium is described that includes instructions that, when executed, cause at least one processor of a computing system to receive, from a message account associated with a user, an identification of a recipient of a electronic message being composed; predicting a body of a previous electronic message sent from the message account based on text contained in the electronic message; and outputting the predicted text for display for arbitrary selection and insertion into the body of the electronic message.
In another example, a system is described that includes means for receiving an identification of a recipient of an electronic message being composed from a message account associated with a user; means for predicting text of a body of a previous electronic message sent from the messaging account based on text contained in the electronic message; and means for outputting the predicted text for display, for arbitrary selection and insertion into the body of the electronic message.
Throughout this disclosure, examples are described in which a computing device and/or computing system may analyze information (e.g., emails, other communications, etc.) associated with a user of the computing device only when the computing device and/or computing system receives explicit permission from the user of the computing device to analyze the information. For example, in the context of the following discussion, where a computing device and/or computing system may collect or utilize communication information associated with a user and a computing device, the user may be provided with an opportunity to provide input to control whether programs or features of the computing device and/or computing system may collect and utilize user information (e.g., information about the user's email, the user's social network). Social actions or activities, profession, preferences of the user, or past and current locations of the user), or whether and/or how the computing device and/or computing system may receive content that may be relevant to the user. Further, certain data may be processed in one or more ways before it is stored or used by the computing device and/or computing system, thereby removing personally identifiable information. For example, the identity of the user may be treated so that personally identifiable information about the user cannot be determined, or the geographic location of the user may be summarized where location information is obtained (e.g., to the city, zip code, or state level) so that a particular location of the user cannot be determined. Thus, the user may control how information about the user is collected and used by the computing device and/or computing system.
The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1A illustrates a conceptual diagram of an example communication system configured to provide predictive text suggestions to a user composing an electronic message, according to one or more aspects of the present invention.
Fig. 1B illustrates a conceptual diagram of an example user interface for electronic message editing in accordance with one or more aspects of the present disclosure.
FIG. 2 is a block diagram illustrating an example computing system configured to provide predictive text suggestions to a user editing an electronic message in accordance with one or more aspects of the present invention.
Fig. 3A-3E are conceptual diagrams illustrating aspects of an example machine learning model according to example implementations of the invention. Fig. 3A through 3E are described below in the context of model 267 of fig. 2. For example, in some cases, machine-learned model 300 may be an example of model 267, as described below.
FIG. 4 is a flow diagram illustrating example operations performed by an example computing system configured to provide predictive text suggestions to a user editing an electronic message in accordance with one or more aspects of the present invention.
Detailed Description
FIG. 1A is a conceptual diagram illustrating an example communication system configured to provide predictive text suggestions to a user editing an electronic message in accordance with one or more aspects of the present invention. Fig. 1B is a conceptual diagram illustrating an example user interface for electronic message editing according to one or more aspects of the present disclosure. The system 100 of FIG. 1A includes a messaging system 160 in communication with the computing device 110 via the network 130. Although system 100 is shown as being distributed between message system 160 and computing device 110, in other examples, features and techniques attributed to system 100 may be performed internally by components local to computing device 110.
Network 130 represents any public or private communication network, such as a cellular, Wi-Fi, and/or other type of network, for transmitting data between computing systems, servers, and computing devices. When computing device 110 is connected to network 130, messaging system 160 may exchange data with computing device 110 via network 130 to provide messaging services accessible to computing device 110. Network 130 may include one or more hubs, network switches, network routers, or any other network devices operatively interconnected to provide for the exchange of information between message system 160 and computing device 110. Computing device 110 and messaging system 160 may send and receive data over network 130 using any suitable communication technology. The computing device 110 and the message system 160 may each be operatively connected to the network 130 using respective network links. The links connecting computing device 110 and messaging system 160 to network 130 may be an ethernet or other type of network connection, and such connections may be wireless and/or wired connections.
The messaging system 160 represents any suitable remote computing system, such as one or more desktop computers, laptop computers, mainframes, servers, cloud computing systems, etc., configured to host an electronic messaging service. For example, the messaging system 160 may be one or more mail servers configured to provide email messaging services. Computing device 110 represents a separate mobile or non-mobile computing device configured to access messaging services provided by messaging system 160. Examples of computing device 110 include a mobile phone, a tablet computer, a laptop computer, a desktop computer, a server, a mainframe, a set-top box, a television, a wearable device (e.g., a computerized watch, computerized glasses, computerized gloves, etc.), a home automation device or system (e.g., a smart thermostat or security system), a voice interface or desktop home assistant device, a Personal Digital Assistant (PDA), a gaming system, a media player, an e-book reader, a mobile television platform, a car navigation or infotainment system, or any other type of mobile, non-mobile, wearable, and non-wearable computing device configured to access an electronic messaging service.
The messaging system 160 includes a prediction module 164 and a messaging service module 162; computing device 110 includes user interface component ("UIC")112, user interface ("UI") module 120, and message client module 122. Modules 120,122,162 and 164 may perform operations described in this disclosure using software, hardware, firmware, or a mixture of hardware, software, and firmware that reside in computing device 110 and/or execute at computing device 110. Computing device 110 and message system 160 may execute modules 120,122,162 and 164 using multiple processors or multiple devices as virtual machines executing on underlying hardware, as one or more services of an operating system or computing platform, and/or as one or more executable programs at an application layer of a computing platform of computing device 110 or message system 160.
The UIC 112 of the computing device 110 serves as an input and/or output device for the computing device 110. UIC 112 may be implemented using various techniques. For example, UIC 112 may be used as an input device using a presence-sensitive input screen, microphone technology, infrared sensor technology, or other input device technology for receiving user input. UIC 112 may function as an output device configured to present output to a user using any one or more of display devices, speaker technology, haptic feedback technology, or other output device technology for outputting information to a user. As an input device, the UIC 112 detects input (e.g., touch and non-touch input) from a user of the computing device 110. Examples of user input gestures performed by the user (e.g., the user touching, pointing to, and/or swiping with a finger or stylus at or near one or more locations of the UIC 112). As an output device, the UIC 112 presents information (e.g., audible, visual, and/or tactile information) to the user in the form of a graphical user interface.
The messaging client module 122 and the messaging service module 162 communicate via the network 130 to provide a messaging service to the computing device 110. Examples of messaging services include: an email service, a text messaging service, simple service messaging, a social media messaging service, a voice messaging service, a video messaging service, or any other service that facilitates the exchange of human-readable electronic messages. As used throughout this disclosure, the term "electronic message" is used to generally describe any type of human-readable electronic message that may be transmitted between computing devices. Examples of electronic messages include: instant messaging, chat messaging, electronic mail (e-mail) messaging, social media communications, voice mail messaging, video messaging, or any other type of person-to-person communication accessed via a computing device.
The message client module 122 provides front-end, user-oriented functionality for the messaging service, while the messaging service module 162 supports back-end operations required to implement the messaging service over the network 130. Message client module 122 can serve as a portal from which computing device 110 accesses electronic messages stored at message system 160 and/or computing device 110. Message client module 122 may provide an editing interface through which a user may compose new electronic messages and/or reply to or forward electronic messages stored at message system 160 and/or computing device 110. Composing a new electronic message, replaying an electronic message and forwarding an electronic message may be collectively considered editing an electronic message. Message client module 122 may be an email application, web application, or other module executing at computing device 110 that communicates with message system 160 to provide users of computing device 110 with access to message system 160 and/or messages maintained at computing device 110.
Messaging service module 162 processes electronic messages received via network 130 from computing device 110 and other computing devices and messaging systems communicating via network 130. The message client module 122 processes inbound electronic messages received from the message system 160 via the network 130 and sends outbound electronic messages to the messaging service module 162 via the network 130 for further processing.
The messaging client module 122 and the messaging service module 162 maintain a messaging account associated with a user of the computing device 110. That is, messages sent from the computing device 110 or received by the computing device 110 may be stored in an outbox or an inbox of a messaging account associated with a user of the computing device 110. The outbox and the inbox may be maintained in memory of the computing device 110 and/or the message system 160.
In a simple case, when processing an inbound message destined for computing device 110, messaging service module 162 receives (e.g., via network 130) an electronic message for processing. The messaging service module 162 determines one or more recipients of the electronic message (e.g., from metadata of the electronic message). If one of the recipients is a messaging account associated with the user of computing device 110, messaging service module 162 may cause a copy of the electronic message to be stored in an inbox of a messaging account associated with the user of computing device 110, whether the messaging account is stored locally at messaging system 160 or computing device 110.
Likewise, when processing outbound messages originating from the computing device 110, the messaging service module 162 receives (e.g., via the network 130) electronic messages for processing. The messaging service module 162 determines one or more recipients of the electronic message (e.g., based on metadata of the electronic message) and sends the message to a device or messaging system associated with the one or more recipients. The messaging service module 162 may cause a copy of the sent electronic message to be stored as the sent item in a messaging account associated with the user of the computing device 110, whether the messaging account is stored locally at the messaging system 160 or at the computing device 110.
As described above, the message client module 122 may provide an editing interface through which a user may edit an electronic message. For example, to enable editing of the first electronic message 114A, the message client module 122 may output a user interface 113A, the user interface 113A including one or more of a header field 115 and a message body 116. The header field 115 may include an address field (e.g., to, cc, bcc, etc.) and a subject line. Message client module 122 may interact with one or more other components of system 100 to assist a user in electronic message composition. For example, in accordance with one or more techniques of this disclosure, messaging client module 122 may interact with prediction module 164 to automatically suggest text for the body of a message based on text included in previously sent messages.
In some examples, the message client module 122 may interact with the prediction module 164 to automatically suggest text for the body of a message based on text included in a message previously sent to the recipient of an electronic message. Com "has been populated in the" to "field of the header field 115, the message client module 122 may interact with the prediction module 164 to automatically suggest the greeting" Hi Jackie "in the message body 116 of the first electronic message 113A based on the identification that the recipient of the first electronic message 113A is Jackie. As shown in fig. 1A, message client module 122 may suggest text for message body 116 before the user enters any text in message body 116.
In some examples, the message client module 122 may interact with the prediction module 164 to automatically suggest text for the body of a message based on text included in a message previously sent to a person other than the recipient of the electronic message (e.g., an account). For example, in the event that the recipient email address "Jackie @ example. com" has been populated in the "to" field of the header field 115, the message client module 122 may automatically suggest text for the message body 116 based on electronic messages sent to people other than Jackie.
In some examples, the message client module 122 may interact with the prediction module 164 to automatically suggest text for the body of a message based on text included in messages previously sent to recipients of electronic messages and text included in messages previously sent to people other than the recipient of the electronic message. For example, in the event that the recipient email address "Jackie @ example. com" has been populated in the "to" field of the header field 115, the message client module 122 may automatically suggest text for the message body 116 based on electronic messages sent to people other than Jackie and electronic messages sent to Jackie.
The prediction module 164 of the message system 160 is configured to automatically provide text suggestions during electronic message editing. Although shown as part of the message system 160, in some examples, some or all of the prediction module 164 executes as part of the computing device 110, where the prediction module 164 is configured to automatically provide text suggestions during electronic message editing.
To provide text suggestions, prediction module 164 may receive an identification of the recipient (or recipients) of the electronic message being composed. The received identity of the recipient may include an email address, a name or any other identifier of the recipient/recipient of the electronic message.
Based on the received identification of the recipient, prediction module 164 may predict one or more candidate portions of text to be inserted into message body 116. Prediction module 164 may use any number of techniques to predict candidate portions of text. For example, the prediction module 164 may predict the candidate portions of text based on text contained in previous electronic messages sent by the user (i.e., sent from a messaging account associated with the user) addressed to the identified recipient. In some examples, prediction module 164 may utilize one or more machine learning models to generate one or more candidate portions of text. In the example of the first electronic message 114A, the prediction module 164 may generate the following candidate portions of text "Hi Jackie", "Hi", "Hello", "Dear Jackie", based on the recipient identified as Jackie.
The prediction module 164 may determine a ranking score or other indication of accuracy or confidence of the candidate portion. In the example of the first electronic message 114A, the prediction module 164 may determine that "Hi Jackie" is the highest ranking/most likely accurate of the candidate portion of text.
Prediction module 164 may output the one or more candidate portions of text to one or more other components of system 100, such as message client 122 or UIC 112. In some examples, prediction module 164 may output all candidate portions of text. In some examples, prediction module 164 may output fewer than all candidate portions of text. For example, prediction module 164 may output only the N (e.g., 1,2,3,4,5, etc.) highest ranked/most likely accurate text portions.
The user of the computing device 110 may accept or decline the displayed suggestion. For example, the user may provide a first user input (e.g., a hit input key) at the UIC 112 to accept the displayed suggestion. In response to receiving the indication of the first user input, the messaging client 122 may cause the UIC 112 to output a user interface having a candidate portion of the displayed text formatted as user input text. For example, the messaging client 122 may cause the UIC 112 to output a user interface 113 that shows the candidate portion of text with a heavier weight type without underlining.
Alternatively, the user may provide a second user input at the UIC 112 to reject the displayed suggestion. For example, as shown in user interface 113B, UIC 112 may receive a second user input comprising the text "Hey Jackie". When this text is entered by the user, the text "Hey Jackie" is not formatted as a candidate portion of text, but rather as regular user-entered text.
The prediction module 164 may receive an indication that the user has not accepted the suggested text. In some examples, prediction module 164 may also receive an indication of what text the user entered in place of the suggested text. For example, after UIC 112 receives the second user input comprising the text "Hey Jackie," prediction module 164 may receive an indication that the user entered the text "Hey Jackie" as opposed to "Hi Jackie" when editing an email to Jackie @ example. The prediction module 164 may modify its operation based on this feedback. For example, where prediction module 164 uses a machine learning model to predict text, prediction module 164 may further train the machine learning model based on the feedback.
Com (or after multiple rounds of feedback), prediction module 164 may modify the suggested text (e.g., to conform to text that the user has entered instead of previously suggested text). For example, as shown in user interface 113C, when the user is composing a second electronic message 114B addressed to Jackie @ example.
An electronic message may have multiple recipients (i.e., multiple people may be addressed). In this case, the prediction module 164 may receive an identification of each recipient and predict text of the body of the electronic message based on past text used by the user in electronic messages addressed to the set of recipients. For example, as shown in user interface 113D, the user may compose a third electronic message 114C to jackie @ example. com and ben @ example. com. Based on the identity of the recipients (Jackie and Ben), the prediction module 164 may predict the text "Hi Jackie and Ben" of the body 116 of the third electronic message 114C and may output the predicted text for optional selection and insertion. As in the single recipient context, the user composing the electronic message may accept or reject the suggestion. As shown in user interface 113E, the user may decline the suggestion by providing user input including the text "Hey Team". The prediction module 164 may be aware of the rejection and subsequent user input such that at a future time when the user is composing the fourth electronic message 114D written to Jackie @ example.com and ben @ example.com, the prediction module 164 may predict the text "Hey Team" as opposed to "Hi Jackie and ben".
By providing suggested text based on the identity of the recipient, the example computing system may increase the availability of messaging services. Such automation may facilitate more efficient user interaction with the example computing system, causing the example computing system to receive fewer erroneous inputs or fewer inputs than other computing systems that do not selectively provide text suggestions in this manner. Thus, the example computing system may perform fewer operations (or, in other words, utilize fewer processor cycles) than other computing systems, and may consume less power and/or result in battery power savings. Further, the exemplary computing system may provide a less obtrusive and more enjoyable user experience.
Throughout this disclosure, examples are described in which a computing device and/or computing system may analyze information (e.g., emails, other communications, etc.) associated with a user of the computing device only when the computing device and/or computing system receives explicit permission from the user of the computing device to analyze the information. For example, in the context of the following discussion, where a computing device and/or computing system may collect or utilize communication information associated with a user and a computing device, the user may be provided with an opportunity to provide input to control whether programs or features of the computing device and/or computing system may collect and utilize user information (e.g., information about the user's email, the user's social network, social actions or activities, profession, the user's preferences, or the user's past and current location), or to indicate whether and/or how the computing device and/or computing system may receive content that may be relevant to the user. Further, certain data may be processed in one or more ways before it is stored or used by the computing device and/or computing system, thereby removing personally identifiable information. For example, the identity of the user may be treated so that personally identifiable information about the user cannot be determined, or the geographic location of the user may be summarized where location information is obtained (e.g., to the city, zip code, or state level) so that a particular location of the user cannot be determined. Thus, the user may control how information about the user is collected and used by the computing device and/or computing system.
FIG. 2 is a block diagram illustrating an example computing system configured to selectively provide predictive text suggestions to a user editing an electronic message in accordance with one or more aspects of the present invention.
The messaging system 260 of fig. 2 is described below as an example of the messaging system 160 of fig. 1A. Fig. 2 shows only one particular example of message system 260, and many other examples of message system 260 may be used in other instances and may include a subset of the components included in message system 260, or may include additional components not shown in fig. 2.
As shown in the example of FIG. 2, message system 260 includes one or more processors 240, one or more communication units 242, and one or more storage components 248. Storage component 248 of messaging system 260 includes messaging service module 262, prediction module 264, subject module 266, and message account 268 including inbox 269A and outbox 269B. The prediction module 264 includes a Machine Learning (ML) model 267. The topic module 266 includes an ML model 271.
The one or more communication units 242 communicate with external devices via one or more wired and/or wireless networks by transmitting and/or receiving network signals over one or more networks. Examples of communication unit 242 include a network interface card (e.g., such as an ethernet card), an optical transceiver, a radio frequency transceiver, a GPS receiver, or any other type of device that can send and/or receive information. Other examples of the communication unit 242 may include short wave radio, cellular data radio, wireless network radio, and Universal Serial Bus (USB) controller.
The one or more storage components 248 store information for processing during operation of the message system 260. In some examples, storage component 248 is a temporary memory, meaning that the primary purpose of storage component 248 is not long-term storage. The storage component 248 on the messaging system 260 may be configured to store information as volatile memory for short periods of time, and thus not retain the stored content if power is removed. Examples of volatile memory include Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), and other forms of volatile memory known in the art.
In some examples, storage component 248 also includes one or more computer-readable storage media. In some examples, storage component 248 includes one or more non-transitory computer-readable storage media. Storage component 248 may be configured to store larger amounts of information than typically stored by volatile memory. Storage component 248 may be further configured to store information as non-volatile memory space for long periods of time and retain information after power on/off cycles. Examples of non-volatile memory include magnetic hard disks, optical disks, floppy disks, flash memory, or forms of electrically programmable memory (EPROM) or Electrically Erasable and Programmable (EEPROM) memory. Storage component 248 may store program instructions and/or information (e.g., data) associated with message account 268, modules 262 and 264, and ML model 267. The storage component 248 can include a memory configured to store data or other information associated with the message account 268, the modules 262 and 264, and the ML model 267.
One or more processors 240 may implement the functions and/or execute instructions associated with message system 260. Examples of processor 240 include an application processor, a display controller, an auxiliary processor, one or more sensor hubs, and any other hardware configured to function as a processor, processing unit, or processing device. The message account 268, the modules 262 and 264, and the ML model 267 can include instructions operable by the processor 240 to perform various actions, operations, or functions of the message system 260. For example, the processor 240 may retrieve and execute instructions stored by the storage component 248 that cause the processor 240 to perform the operations described herein due to the message account 268, the modules 262 and 264, and the ML model 267. The instructions, when executed by the processor 240, may cause the message system 260 to store information within the storage component 248, e.g., at the message account 268.
The messaging service module 262 may include all of the functionality of the messaging service module 162 of fig. 1A and may perform similar operations as the messaging service module 162 in order to configure the messaging system 260 to provide network-based messaging services. Messaging service module 262 processes electronic messages received via a network, such as network 130. The messaging service module 262 maintains a message account 268 associated with the user of the computing device 110. Messages received by the messaging service module 262 that are addressed to the message account 268 are stored in the inbox 269A of the message account 268. And messages received by messaging service module 262 sent from message account 268 are stored in outbox 269B. Copies of the message account 268 may be replicated and stored locally on other computing devices, such as computing device 110. That is, for any action performed by the messaging service module 262 on the messaging account 268, the messaging service module 262 can cause the client (e.g., the message client module 122) to perform an action similar to a copy of the messaging account 268 stored elsewhere and remote from the messaging system 260.
In some examples, the candidate portion of text may include a greeting of the message. The greeting may or may not include the name of the recipient. For example, where the recipient's name is Charlie, the greeting may include the word Charlie (or a variant thereof) (e.g., "Hi Charlie," "Hello Charlie," "Sup Chuck," "Charlie," etc.), or may not include the word Charlie (or a variant thereof) (e.g., "Hi," "Hello," "Sup," "heyy," etc.). The greeting may or may not include one or more words other than the recipient's name or title.
The ML model 267 can generate greetings by calculating scores for multiple greetings in the greetings database. For example, the ML model 267 may generate a score for a first greeting (e.g., "Hi"), a score for a second greeting (e.g., "Hello"), a score for a third greeting (e.g., "Dear"), … …, and a score for an nth greeting. Each score may indicate the likelihood that their respective greeting will be accepted by the composer of the message. The ML model 267 can select the greeting with the most favorable score (i.e., the greeting with the highest likelihood of being accepted by the composer of the message) as a candidate portion of the text.
The ML model 267 may use any suitable technique to calculate the score. As one example, the ML model 267 can calculate a score based on the frequency with which the writer has used greetings. For example, the ML model 267 may calculate a greeting score that is more favorable than greetings that are used less frequently by the writer. As another example, the ML model 267 may calculate a score based on the recency of the writer's use of the greeting. For example, the ML model 267 may calculate a more favorable score for greetings that were recently used than greetings that were further used by the writer in the past.
The frequency and/or recency metrics used by the ML model 267 may be recipient-based. As one example, the ML model 267 can calculate a score that is more favorable for greetings that are used more frequently by writers and recipients of messages than greetings that are used less frequently by writers and recipients of messages. As another example, the ML model 267 may calculate a more favorable greeting score than the writer has recently used with the recipient of the message.
In some examples, the candidate portion of text may include text other than a greeting of the message. For example, if the user frequently starts a message to a particular set of recipients with "Hi Team, please remember to submit your TPS report this week".
The ML model 267 may be a machine-learned model (e.g., a neural network, a long-short term memory model, or any other type of model). The ML model 267 can develop rules or otherwise learn text commonly used in the body of a message (e.g., a message addressed to a particular set of recipients). The training corpus of text used to train ML model 267 may include the user's past electronic messages, with explicit permissions previously obtained from the user to use and analyze their electronic messages. The messaging system 260 further provides the user with a way to revoke the consent form to utilize and analyze their electronic messages, and in response, the messaging system 260 stops analyzing those consent-revoke messages.
As described above, the ML model 267 can generate greetings by calculating scores for multiple greetings in the greetings database. The ML model 267, or another component of the system 100, may update or modify entries in the greeting database. For example, the ML model 267 can analyze messages previously sent by the composer of the current message to identify greetings used by the composer and update the database accordingly. As one example, if the identified greeting is already included in the database, ML model 267 may update one or more heuristics for the identified greeting (e.g., frequency of use of the identified greeting, recency of use of the identified greeting, etc.). As another example, if the identified greeting is not already included in the database, ML model 267 may create a new entry for the identified greeting in the database.
The ML model 267 may periodically perform database updates. For example, the ML model 267 may update the database based on additional messages sent by the writer at particular time intervals (e.g., daily, weekly, monthly, etc.) or after a certain number of messages sent by the writer (e.g., each of five, ten, twenty, fifty messages, etc.).
Fig. 3A depicts a conceptual diagram of an example machine learning model, according to an example implementation of the invention. As shown in fig. 3A, in some embodiments, the machine learning model 300 is trained to receive one or more types of input data and, in response, to provide one or more types of output data. Thus, FIG. 3A illustrates a machine learning model 300 that performs inference.
The input data may include one or more characteristics associated with the instance or example. In some implementations, one or more features associated with an instance or instance can be organized into a feature vector. In some embodiments, the output data may include one or more predictions. Prediction may also be referred to as inference. Thus, given a feature associated with a particular instance, the machine learning model 300 may output a prediction for that instance based on the feature.
The machine learning model 300 may be or include one or more of a variety of different types of machine learning models. In particular, in some embodiments, the machine learning model 300 may perform classification, regression, clustering, anomaly detection, recommendation generation, and/or other tasks.
In some implementations, the machine learning model 300 can perform various types of classification based on input data. For example, the machine learning model 300 may perform binary classification or multi-class classification. In binary classification, outputting data may include classifying input data into one of two different classes. In a multi-class classification, outputting data may include classifying input data into one (or more) of more than two classes. The classification may be single label or multiple labels. The machine learning model 300 may perform discrete classification, where the input data is simply classified into one or more classes or categories.
In some implementations, the machine learning model 300 can perform classification, where the machine learning model 300 provides, for each of one or more classes, a numerical value that describes the degree to which input data is considered to be classified into the respective class. In some cases, the numerical values provided by the machine learning model 300 may be referred to as "confidence scores," which represent respective confidences associated with classifying the input into respective classes. In some implementations, the confidence score can be compared to one or more thresholds to present discrete classification predictions. In some implementations, only a particular number of classes (e.g., one) with relatively largest confidence scores may be selected to present discrete classification predictions.
The machine learning model 300 may output a probabilistic classification. For example, the machine learning model 300 may predict a probability distribution over a set of classes given a sampled input. Thus, rather than outputting only the most likely class to which the sample input should belong, the machine learning model 300 may output, for each class, a probability that the sample input belongs to the class. In some embodiments, the probability distributions over all possible classes may sum to 1. In some implementations, a Softmax function or other type of function or layer may be used to throttle the set of real values respectively associated with the possible classes to a set of real values in the range (0,1), which sum to 1.
In some examples, the probabilities provided by the probability distributions may be compared to one or more thresholds to present discrete classification predictions. In some implementations, only a certain number of classes (e.g., one) with relatively maximum prediction probabilities may be selected to present discrete classification predictions.
Where the machine learning model 300 performs classification, supervised learning techniques may be used to train the machine learning model 300. For example, the machine learning model 300 may be trained in a training dataset that includes training examples labeled as belonging to (or not belonging to) one or more classes. Further details regarding supervised training techniques are provided below in the description of fig. 3B through 3E.
In some embodiments, the machine learning model 300 may perform a regression to provide output data in the form of continuous values. Consecutive numerical values may correspond to any number of different metrics or numerical representations, including, for example, monetary values, scores, or other numerical representations. By way of example, the machine learning model 300 may perform linear regression, polynomial regression, or nonlinear regression. As an example, the machine learning model 300 may perform a simple regression or a multiple regression. As described above, in some embodiments, a Softmax function or other function or layer may be used to compress a set of real values respectively associated with two or more possible classes into a set of real values in a range (0,1) that sums to 1.
The machine learning model 300 may perform various types of clustering. For example, the machine learning model 300 may identify one or more previously defined clusters to which the input data most likely corresponds. The machine learning model 300 may identify one or more clusters within the input data. That is, where the input data includes multiple objects, documents, or other entities, the machine learning model 300 may classify the multiple entities included in the input data into multiple clusters. In some implementations where the machine learning model 300 performs clustering, the machine learning model 300 may be trained using unsupervised learning techniques.
The machine learning model 300 may perform anomaly detection or outlier detection. For example, the machine learning model 300 may identify input data that does not conform to expected patterns or other characteristics (e.g., as previously observed from previous input data). As an example, anomaly detection may be used for fraud detection or system failure detection.
In some implementations, the machine learning model 300 can provide the output data in the form of one or more recommendations. For example, the machine learning model 300 may be included in a recommendation system or engine. For example, given input data describing previous results (e.g., scores, ratings, or ratings indicative of an amount of success or enjoyment) for certain entities, the machine learning model 300 may output suggestions or suggestions for one or more additional entities that are expected to have a desired result based on the previous results (e.g., elicited a score, rating, or rating indicative of success or enjoyment). As one example, given input data describing a context of a computing device (e.g., computing device 110 of fig. 1), a messaging system (e.g., messaging system 160 of fig. 1) may output suggestions or recommendations of predictive text that a user may wish to insert into an electronic message.
In some cases, the machine learning model 300 may act as a proxy within the environment. For example, the machine-learned model 300 may be trained using reinforcement learning, which will be discussed in further detail below.
In some implementations, the machine learning model 300 may be a parametric model, while in other implementations, the machine learning model 300 may be a non-parametric model. In some implementations, the machine learning model 300 can be a linear model, while in other implementations, the machine learning model 300 can be a non-linear model.
As described above, the machine learning model 300 may be or include one or more of a variety of different types of machine learning models. Examples of such different types of machine learning models are provided below for illustration. One or more example models described below may be used (e.g., combined) to provide output data in response to input data. Other models than the example models provided below may also be used.
In some embodiments, the machine learning model 300 may be or include one or more classifier models, such as a linear classification model; a quadratic classification model, etc. The machine learning model 300 may be or include one or more regression models, such as a simple linear regression model; a multivariate linear regression model; a Logistic regression model; a stepwise regression model; a multivariate self-adaptive regression spline function; locally estimated scatter plot smoothing models, and the like.
In some examples, the machine learning model 300 may be or include one or more decision tree based models, such as classification and/or regression trees; iteration dichotomy 3 decision tree; c4.5 decision tree; the chi-square automatic interaction detection decision tree; making a decision on a stub; conditional decision trees, and the like.
The machine learning model 300 may be or include one or more kernel machines. In some implementations, the machine learning model 300 can be or include one or more support vector machines. The machine learning model 300 may be or include one or more instance-based learning models, such as a learning vector quantization model; a self-organizing map model; a locally weighted learning model, etc. In some embodiments, the machine learning model 300 may be or include one or more nearest neighbor models, such as a k-nearest neighbor classification model; k-nearest neighbor regression models, and the like. The machine learning model 300 may be or include one or more bayesian models, e.g., a next bayesian model; a Gaussian naive Bayes model; a polynomial naive bayes model; average single correlation estimation; a Bayesian network; a Bayesian belief network; hidden markov models, etc.
In some embodiments, the machine learning model 300 may be or include one or more artificial neural networks (also referred to simply as neural networks). A neural network may include a set of connected nodes, which may also be referred to as neurons or perceptrons. The neural network may be organized into one or more layers. Neural networks comprising multiple layers may be referred to as "deep" networks. The deep network may include an input layer, an output layer, and one or more hidden layers positioned between the input layer and the output layer. The nodes of the neural network may be connected or not fully connected.
The machine learning model 300 may be or include one or more feed-forward neural networks. In a feed forward network, the connections between nodes do not form loops. For example, each connection may connect a node from an earlier layer to a node from a later layer.
In some cases, the machine learning model 300 may be or include one or more recurrent neural networks. In some cases, at least some nodes of the recurrent neural network may form a loop. Recurrent neural networks are particularly useful for processing input data that is continuous in nature. In particular, in some cases, a recurrent neural network may pass or hold information from a previous portion of an input data sequence to a subsequent portion of the input data sequence by using recurrent or directed cyclic node connections.
In some examples, the sequential input data may include time series data (e.g., sensor data captured at different times versus time or images). For example, the recurrent neural network may analyze sensor data versus time to detect or predict sweep directions, perform handwriting recognition, and so forth. The sequential input data may include words in a sentence (e.g., for natural language processing, speech detection or processing, etc.); musical notes in a musical composition; sequential actions taken by the user (e.g., detecting or predicting sequential application usage); sequential object states, etc.
Exemplary recurrent neural networks include long-short term (LSTM) recurrent neural networks; a gated repeat unit; a bidirectional recurrent neural network; a continuous-time recurrent neural network; a neural history compressor; an echo state network; an Elman network; a jordan network; a recurrent neural network; a hopfield network; a fully-cycled network; sequence-to-sequence configuration, etc.
In some embodiments, the machine learning model 300 may be or include one or more convolutional neural networks. In some cases, a convolutional neural network may include one or more convolutional layers that perform convolution on input data using a learned filter.
The filter may also be referred to as a kernel. Convolutional neural networks are particularly useful for visual problems, for example when the input data comprises images such as still images or video. However, convolutional neural networks may also be used for natural language processing.
In some examples, the machine learning model 300 may be or include one or more generating networks, such as generating an adversary network. The generation network may be used to generate new data, such as new images or other content.
The machine learning model 300 may be or include an auto-encoder. In some cases, the purpose of an auto-encoder is to learn a representation of a set of data (e.g., low-dimensional encoding), typically for the purpose of dimension reduction. For example, in some cases, an auto-encoder may seek to encode input data and provide output data that reconstructs the input data from the encoding. Recently, the concept of an auto-encoder has become more widely used for learning a generative model of data. In some cases, the auto-encoder may include additional losses beyond reconstructing the input data.
The machine learning model 300 may be or include one or more other forms of artificial neural networks, such as a deep boltzmann machine; a deep belief network; a stacked autoencoder, etc. Any of the neural networks described in this disclosure may be combined (e.g., stacked) to form a more complex network.
One or more neural networks may be used to provide embedding based on the input data. For example, embedding may be a representation of knowledge abstracted from input data into one or more learning dimensions. In some cases, embedding may be a useful source for identifying related entities. In some cases, the embedding may be extracted from the output of the network, while in other cases, the embedding may be extracted from any hidden node or layer of the network (e.g., near but not at the final layer of the network). Embedding may be used to perform auto-suggest next video, product suggestion, entity or object recognition, and the like. In some cases, embedding is a useful input to downstream models. For example, embedding may be used to summarize input data (e.g., search queries) of a downstream model or processing system.
The machine learning model 300 may include one or more clustering models, e.g., a k-means clustering model; k-median clustering model; an expectation maximization model; hierarchical clustering models, and the like.
In some embodiments, the machine learning model 300 may perform one or more dimension reduction techniques, such as principal component analysis; analyzing a nuclear principal component; graph-based kernel principal component analysis; regression of principal components; partial least squares regression; sammon mapping; scaling in multiple dimensions; projection pursuit; linear discriminant analysis; performing mixed discrimination analysis; performing secondary discriminant analysis; generalized discriminant analysis; flexible discriminant analysis; automatic coding, etc.
In some embodiments, the machine learning model 300 may perform or be subject to one or more reinforcement learning techniques, such as a markov decision process; dynamic planning; q function or Q learning; approximating a value function; deep Q-networks; a microneuropable computer; asynchronous dominant actor-criticism; deterministic policy gradients, etc.
In some implementations, the machine learning model 300 can be an autoregressive model. In some cases, the autoregressive model may specify that the output data linearly depends on its own prior values and random terms. In some cases, the autoregressive model may take the form of a random difference equation. One exemplary autoregressive model is Wavenet, which is a generative model for raw audio.
In some embodiments, the machine-learned model 300 may include or form part of a multi-model ensemble. As an example, bootstrap aggregation may be performed, which may also be referred to as "bagging". In the guided aggregation, the training data set is divided into a plurality of subsets (e.g., by alternative random sampling), and a plurality of models are trained on the plurality of subsets, respectively. At inference time, the respective outputs of the multiple models may be combined (e.g., by averaging, voting, or other techniques) and used as an output of the ensemble.
One example set is a random forest, which may also be referred to as a random decision forest. Random forests are an ensemble learning method for classification, regression, and other tasks. A random forest is generated by generating a plurality of decision trees at training time. In some cases, at inference time, a class that is a pattern of classes (classification) or average predictions (regression) of individual trees may be used as the output of the forest. The random decision forest can correct the tendency of the decision tree to over-fit its training set.
Another exemplary integration technique is stacking, which may be referred to as stacking generalization in some cases. Stacking includes training the combiner model to mix or otherwise combine predictions of several other machine learning models. Accordingly, multiple machine-learned models (e.g., of the same or different types) may be trained based on training data. Further, the combiner model may be trained to take predictions from other machine learning models as input, and in response, produce final inferences or predictions. In some cases, a single-layer logistic regression model may be used as the combiner model.
Another exemplary integration technique is lifting. Boosting may include incrementally building a set by iteratively training weak models and then adding to the final strong model. For example, in some cases, each new model may be trained to emphasize training examples where the previous model was misinterpreted (e.g., misclassified). For example, the weight associated with each such misinterpreted instance may be increased. One common implementation of lifting is AdaBoost, which may also be referred to as adaptive lifting. Other exemplary lifting techniques include LPBoost; TotalBoost; brownboost; xgboost; MadaBoost, LogitBoost, gradient boost, etc. Further, any of the above models (e.g., regression models and artificial neural networks) may be combined to form a whole. As an example, the set may include top-level machine learning models or heuristic functions to combine and/or weight the outputs of the models that form the set.
In some implementations, multiple machine-learned models (e.g., models that form a set) can be jointly linked and trained (e.g., through back-propagation of errors sequentially through the model as a whole). However, in some embodiments, only a subset (e.g., one) of the jointly trained models is used for the inference.
In some implementations, the machine learning model 300 can be used to pre-process input data for subsequent input into another model. For example, the machine learning model 300 may perform dimension reduction techniques and embedding (e.g., matrix decomposition, principal component analysis, singular value decomposition, Word2vec/GLOVE and/or correlation methods); clustering; uniform classification and regression of downstream consumption. Many of these techniques have been discussed above and are further discussed below.
As described above, the machine learning model 300 may be trained or configured to receive input data and, in response, provide output data. The input data may include different types, forms, or variations of input data. As an example, in various embodiments, the input data may include features describing content (or a portion of content) that the user initially selected, e.g., content of a document or image that the user selected, a link to the user selection, a link within the user selection related to other files available on the device or cloud, metadata of the user selection, and so forth. Additionally, the input data includes context of user usage, either from the application itself or from other sources, as the case may be, user permissions. Examples of usage scenarios include the breadth of sharing (either publicly shared, or shared with a large group, or privately shared, or shared with a particular person), the context of sharing, and the like. Additional input data may include the state of the device, such as the location of the device, applications running on the device, etc., as permitted by the user.
In some implementations, the machine learning model 300 can receive and use its raw form of input data. In some embodiments, the raw input data may be pre-processed. Thus, the machine learning model 300 may receive and use preprocessed input data in addition to or instead of raw input data.
In some implementations, preprocessing the input data may include extracting one or more additional features from the raw input data. For example, feature extraction techniques may be applied to the input data to generate one or more new additional features. Example feature extraction techniques include edge detection; detecting a rotation angle; detecting spots; ridge detection; transforming the scale-invariant features; detecting motion; an optical flow; hough transform, etc.
In some implementations, the extracted features may include or be derived from transformation of the input data to other domains and/or dimensions. As an example, the extracted features may comprise or be derived from a transformation of the input data into the frequency domain. For example, a wavelet transform and/or a fast fourier transform may be performed on the input data to generate additional features.
In some implementations, the extracted features can include statistics computed from the input data or certain portions or dimensions of the input data. Example statistics include patterns, averages, maxima, minima, or other metrics of the input data or portions thereof.
In some embodiments, as described above, the input data may be sequential in nature. In some cases, the sequential input data may be generated by sampling or otherwise dividing the input data stream. As one example, frames may be extracted from a video. In some embodiments, the sequential data may be made non-sequential by summarization.
As another exemplary preprocessing technique, partial input data may be input. Additional synthesized input data may be generated, for example, by interpolation and/or extrapolation.
As another exemplary pre-processing technique, some or all of the input data may be scaled, normalized, generalized, and/or regularized. Exemplary regularization techniques include ridge regression; a minimum absolute shrinkage and selection operator (LASSO); an elastic net; regression of the minimum angle; performing cross validation; l1 regularization; l2 regularization, and the like. As an example, some or all of the input data may be normalized by subtracting the average over a given dimension feature value from each individual feature value, and then dividing by the standard deviation or other metric.
As another example preprocessing technique, some or all of the input data may be quantized or discretized. In some cases, qualitative features or variables included in the input data may be converted to quantitative features or variables. For example, one hot encoding may be performed.
In some examples, dimension reduction techniques may be applied to the input data prior to input to the machine learning model 300. Several examples of dimension reduction techniques are provided above, including, for example, principal component analysis; analyzing a nuclear principal component; graph-based kernel principal component analysis; regression of principal components; partial least squares regression; sammon mapping; scaling in multiple dimensions; projection pursuit; linear discriminant analysis; performing mixed discrimination analysis; performing secondary discriminant analysis; generalized discriminant analysis; flexible discriminant analysis; automatic coding, etc.
In some embodiments, during training, the input data may be intentionally deformed in any number of ways to increase model robustness, prevalence, or other quality. Exemplary techniques for distorting input data include adding noise; changing color, hue or hue; a magnification; dividing; amplification, and the like.
In response to receipt of the input data, the machine learning model 300 may provide output data. The output data may include different types, forms, or variations of output data. As an example, in various embodiments, the output data may include content stored locally on the user device or in the cloud, which may be relatively shared with the initial content selection.
As described above, in some embodiments, the output data may include various types of classification data (e.g., binary classification, multi-class classification, single-label, multi-label, discrete classification, regression classification, probabilistic classification, etc.), or may include various types of regression data (e.g., linear regression, polynomial regression, non-linear regression, simple regression, multiple regression, etc.). In other cases, the output data may include clustering data, anomaly detection data, recommendation data, or any other form of output data discussed above.
In some embodiments, the output data may affect downstream processes or decisions. As one example, in some embodiments, the output data may be interpreted and/or acted upon by a rule-based regulator.
The present disclosure provides systems and methods that include or otherwise utilize one or more machine-learned models to suggest content that is stored locally on a user device or in a cloud that can be relatively shared with an initial content selection based on characteristics of the initial content selection. Any of the different types or forms of input data described above may be combined with any of the different types or forms of machine learning models described above to provide any of the different types or forms of output data described above.
The systems and methods of the present disclosure may be implemented by or otherwise executed on one or more computing devices. Exemplary computing devices include user computing devices (e.g., laptop computers, desktop computers, and mobile computing devices such as tablets, smart phones, wearable computing devices, etc.); embedded computing devices (e.g., devices embedded within a vehicle, camera, image sensor, industrial machine, satellite, game console or controller, or household appliances, such as a refrigerator, thermostat, energy meter, household energy manager, smart home assistant, etc.); server computing devices (e.g., database servers, parameter servers, file servers, mail servers, print servers, web servers, game servers, application servers, etc.); dedicated, specialized model processing or training equipment; a virtual computing device; other computing devices or computing infrastructures; or a combination thereof.
Fig. 3B illustrates a conceptual diagram of a computing device 310, the computing device 310 being an example of the message system 260 of fig. 2. The computing device 310 includes a processing component 302, a memory component 304, and a machine learning model 300. The computing device 310 may store and implement the machine-learned model 300 locally (i.e., on the device). Thus, in some implementations, the machine learning model 300 can be stored at and/or implemented locally by an embedded device or a user computing device, such as a mobile device. Output data obtained through local implementation of the machine learning model 300 at the embedded device or the user computing device may be used to improve performance of the embedded device or the user computing device (e.g., an application implemented by the embedded device or the user computing device).
Fig. 3C illustrates a conceptual diagram of an example client computing device capable of communicating over a network with an example server computing system that includes a machine learning model. Fig. 3C includes a client device 310A in communication with a server device 360 over a network 330. Client device 310A is an example of computing device 110 of fig. 1, server device 360 is an example of messaging system 160 of fig. 1 and messaging system 260 of fig. 2, and network 330 is an example of network 130 of fig. 1. The server device 360 stores and implements the machine learning model 300. In some cases, the output data obtained by the machine learning model 300 at the server device 360 may be used to improve other server tasks, or may be used by other non-user devices to improve services performed by such other non-user devices, or for such other non-user devices. For example, the output data may improve other downstream processing performed by the server device 360 for the user's computing device or embedded computing device. In other cases, the output data obtained by implementing the machine learning model 300 at the server device 360 may be sent to and used by a user computing device, an embedded computing device, or some other client device, such as the client device 310A. For example, server device 360 may be said to perform machine learning as a service.
In other implementations, different respective portions of the machine learning model 300 may be stored in and/or implemented by some combination of user computing devices, embedded computing devices, server computing devices, and the like. In other words, portions of machine learning model 300 may be distributed in whole or in part in client device 310A and server device 360.
Devices 310A and 360 may use one or more machine learning platforms, frameworks, and/or libraries to perform graphics processing techniques or other machine learning techniques, such as TensorFlow, Caffe/Caffe2, thano, Torch/PyTorch, MXnet, CNTK, and the like. Devices 310A and 360 may be distributed in different physical locations and connected via one or more networks, including network 330. If configured as a distributed computing device, devices 310A and 360 may operate according to a sequential computing architecture, a parallel computing architecture, or a combination thereof. In one example, the distributed computing device may be controlled or booted through the use of a parameter server.
In some embodiments, multiple instances of the machine learning model 300 may be parallelized to provide increased processing throughput. For example, multiple instances of machine learning model 300 may be parallelized on a single processing device or computing device, or parallelized on multiple processing devices or computing devices.
Each computing device implementing machine learning model 300 or other aspects of the present disclosure may include multiple hardware components capable of implementing the capabilities of the techniques described in the present disclosure. For example, each computing device may include one or more memory devices that store some or all of machine learning model 300. For example, the machine learning model 300 may be a structured digital representation stored in memory. The one or more memory devices may also include instructions for implementing the machine learning model 300 or performing other operations. Exemplary memory devices include RAM, ROM, EEPROM, EPROM, flash memory devices, disks, and the like, as well as combinations thereof.
Each computing device may also include one or more processing devices that implement some or all of machine learning model 300 and/or perform other related operations. Example processing devices include one or more of the following: a Central Processing Unit (CPU); a Vision Processing Unit (VPU); a Graphics Processing Unit (GPU); a Tensor Processing Unit (TPU); a Neural Processing Unit (NPU); a neural processing engine; a core of a CPU, VPU, GPU, TPU, NPU or other processing device; an Application Specific Integrated Circuit (ASIC); a Field Programmable Gate Array (FPGA); a coprocessor; a controller; or a combination of the above processing devices. The processing device may be embedded within other hardware components, such as an image sensor, accelerometer, etc.
The hardware components (e.g., memory devices and/or processing devices) may be spread across multiple physically distributed computing devices and/or virtual distributed computing systems.
FIG. 3D illustrates a conceptual diagram of an example computing device in communication with an example training computing system that includes a model trainer. Fig. 3D includes a client device 310B in communication with a training device 370 over a network 330. Client device 310B is an example of computing device 110 of FIG. 1, and network 330 is an example of network 130 of FIG. 1. The machine learning model 300 described herein may be trained at a training computing system (e.g., training device 370) and then provided for storage and/or implementation at one or more computing devices (e.g., client device 310B). For example, model trainer 372 executes locally at training device 370. However, in some examples, training device 370 including model trainer 372 may be included in client device 310B or any other computing device implementing machine-learned model 300, or separate from client device 310B or any other computing device implementing machine-learned model 300.
In some implementations, the machine learning model 300 can be trained in an offline manner or an online manner. In offline training (also referred to as batch learning), the machine learning model 300 is trained on the entirety of a static training data set. In online learning, the machine-learned model 300 is continuously trained (or retrained) as new training data becomes available (e.g., when the model is used to perform inferences).
The machine learning model 300 described herein may be trained according to one or more of a variety of different training types or techniques. For example, in some implementations, the machine learning model 300 may be trained by the model trainer 372 using supervised learning, where the machine learning model 300 is trained on a training data set that includes instances or examples with labels. The tags may be applied manually by experts, generated by crowd sources, or provided by other techniques (e.g., by physics-based or complex mathematical models). In some implementations, the training examples may be provided by the user computing device if the user has provided consent. In some embodiments, this process may be referred to as a personalization model.
Fig. 3E illustrates a conceptual diagram of a training process 390, the training process 390 being an example training process to train the machine learning model 300 on training data 391 including example input data 392 having labels 393. The training process 390 is an example training process; other training procedures may also be used.
When a user permits training using such data, the training data 391 used by the training process 390 may include an anonymous usage log of shared streams (e.g., content items shared together, bundled content pieces that have been identified as belonging together, e.g., from an entity in a knowledge graph, etc.). In some implementations, training data 391 may include an example of input data 392 that has been assigned a label 393 corresponding to output data 394.
In some embodiments, the machine learning model 300 may be trained by optimizing an objective function (e.g., objective function 395). For example, in some implementations, the objective function 395 may be or include a loss function that compares (e.g., determines) a difference between (e.g., compares) output data generated by the model from the training data and (e.g., a ground truth label) a label associated with the training data (e.g., a ground truth label). For example, the loss function may estimate the sum or average of squared differences between the output data and the markers. In some examples, the objective function 395 may be or include a cost function describing the cost of a certain result or output data. Other examples of the objective function 395 may include tolerance-based techniques, such as triplet-loss or maximum tolerance training.
One or more of a variety of optimization techniques may be performed to optimize the objective function 395. For example, the optimization technique may minimize or maximize the objective function 395. Exemplary optimization techniques include Hessian-based techniques and gradient-based techniques, such as coordinate descent; gradient descent (e.g., random gradient descent); sub-gradient methods, and the like. Other optimization techniques include black box optimization techniques and heuristics.
In some implementations, the machine learning model 300 can be trained using back propagation of errors in conjunction with optimization techniques (e.g., gradient-based techniques) (e.g., when the machine learning model is a multi-layer model such as an artificial neural network). For example, an iterative loop of propagation and model parameter (e.g., weight) updates may be performed to train the machine learning model 300. Example backpropagation techniques include truncated backpropagation times, Levenberg-Marquardt backpropagation, and the like.
In some implementations, the machine learning model 300 described herein can be trained using unsupervised learning techniques. Unsupervised learning may include inferring functions describing hidden structures from unlabeled data. For example, a classification or category may not be included in the data. Unsupervised learning techniques may be used to generate machine learning models that can perform clustering, anomaly detection, learning latent variable models, or other tasks.
The machine learning model 300 may be trained using semi-supervised techniques that combine aspects of supervised learning and unsupervised learning. The machine learning model 300 may be trained or otherwise generated by evolutionary techniques or genetic algorithms. In some implementations, the machine learning model 300 described herein can be trained using reinforcement learning. In reinforcement learning, an agent (e.g., a model) may take action in the environment and learn to maximize rewards and/or minimize penalties resulting from such actions. Reinforcement learning differs from the supervised learning problem in that the correct input/output pair is not presented, nor is the suboptimal action explicitly corrected.
In some implementations, one or more summarization techniques may be performed during training to improve the summarization of the machine learning model 300. The summarization technique may help reduce overfitting of the machine learning model 300 to the training data. Exemplary generalized techniques include packet loss techniques; weight attenuation techniques; carrying out batch normalization; early stopping; selecting a subset; step selection, etc.
In some implementations, the machine learning model 300 described in this disclosure may include or otherwise be affected by a number of hyper-parameters, such as a learning rate, a number of layers, a number of nodes in each layer, a number of leaves in a tree, a number of clusters, and so forth. The hyper-parameters may affect the performance of the model. The hyper-parameters may be selected manually, or may be selected automatically by applying techniques such as grid search; black-box optimization techniques (e.g., bayesian optimization, random search, etc.); gradient-based optimization, etc. Exemplary techniques and/or tools for performing automated hyper-parameter optimization include Hyperopt;
Auto-WEKA; spearmint; metric Optimization Engine (MOE), etc.
In some embodiments, various techniques may be used to optimize and/or adjust the learning rate when training the model. Exemplary techniques and/or tools for performing learning rate optimization or adaptation include Adagrad; adaptive moment estimation (ADAM); adadelta; RMSprop, and the like.
In some embodiments, a transfer learning technique may be used to provide an initial model from which to train the machine learning model 300 described herein.
In some implementations, the machine learning model 300 described herein can be included in different portions of computer readable code on a computing device. In one example, the machine learning model 300 may be included in and used (e.g., exclusively) by a particular application or program. Thus, in one example, a computing device may include multiple applications, and one or more of such applications may contain its own respective machine learning library and machine learning model.
In another example, machine learning model 300 described herein may be included in an operating system of a computing device (e.g., in a central smart tier of the operating system) and may be invoked or otherwise used by one or more applications interacting with the operating system. In some implementations, each application can communicate with the central smart tier (and the models stored therein) using an Application Programming Interface (API) (e.g., a common API between all applications).
In some embodiments, the central smart inlay may communicate with the central device data plane. The central device data layer may be a centralized data repository for computing devices. The central device data layer may communicate with a plurality of other components of the computing device, such as one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a proprietary API).
The technology discussed herein relates to servers, databases, software applications and other computer-based systems, and the actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a variety of possible configurations, combinations, and divisions of tasks and functions between and among components. For example, the processes discussed herein may be implemented using a single device or component or a combination of devices or components.
Databases and applications may be implemented on a single system or distributed across multiple systems. The distributed components may operate sequentially or in parallel.
Moreover, the machine learning techniques described herein are easily interchangeable and combinable. While certain exemplary techniques have been described, many others exist and may be used in conjunction with aspects of the present disclosure.
The present disclosure has provided a brief overview of an exemplary machine learning model and related techniques. For more details, the reader may review the following references: machine learning probabilistic opinion (Murphy); machine learning rules: best practices of ML engineering (Zinkevich); deep learning (Goodfellow); reinforcement learning: introduction (Sutton); artificial intelligence: modern methods (Norvig).
In addition to the above, the user may be provided with controls that allow the user to make selections regarding whether and when the systems, programs, or features described in this disclosure are capable of collecting user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current location), and whether the user sends content or communications from a server. In addition, certain data may be processed in one or more ways before it is stored or used, thereby removing personally identifiable information. For example, the identity of the user may be treated so that personally identifiable information cannot be determined for the user, or the geographic location of the user may be summarized where location information is obtained (e.g., at the city, zip code, or state level) so that a particular location of the user cannot be determined. Thus, the user may have control over what information is collected about the user, how the information is used, and what information is provided to the user.
Fig. 4 is a flowchart illustrating example operations performed by an example computing system configured to provide predicted text suggestions to a user editing an electronic message based on text included in a previous electronic message in accordance with one or more aspects of the present disclosure. FIG. 4 is described below in the context of the system 100 of FIGS. 1A and 1B.
In accordance with techniques of this disclosure, system 100 may receive an identification of a recipient of an electronic message being composed (402). For example, the messaging service module 262 may receive an email address, a username, a real name, or other identification of the address of the electronic message being composed by the user associated with the message account from the message client module 122. In some examples, messaging service module 262 may receive an identification of the recipient prior to receiving user input associated with the composition of the body of the electronic message being composed.
The system 100 may predict a candidate portion of text for the body of the electronic message being composed based at least in part on text contained in previous electronic messages sent from the messaging account (404). For example, prediction module 164 may invoke a machine learning model (e.g., ML model 267 of fig. 2) to generate one or more candidate portions of text for the body. As described above, the prediction module 164 may generate candidate portions of text based on text in an electronic message addressed to: the identified recipient, a person other than the identified recipient (e.g., an account), or both the identified recipient and a person other than the identified recipient.
The system 100 may output the prediction candidate portion of text for display for optional selection (406). For example, the messaging client 122 can cause the user interface component 112 to output a user interface 113A that includes the arbitrarily selected precise text "Hi Jackie" for insertion into the body 116. As described above, messaging client 122 may communicate that the text is for arbitrary selection by formatting the text differently than the text entered by the user.
The system 100 may determine whether the user has entered to select a prediction candidate portion of text (408). For example, messaging client 122 may determine whether user interface component 122 has received user input to select a prediction candidate portion of text.
If the system 100 receives a user input to select a prediction candidate portion of text (408, the "Yes" branch), the system 100 may output the prediction candidate portion of text for display for insertion into the body of the electronic message being edited (410). For example, messaging client 122 may cause user interface component 112 to output a user interface having predicted candidate portions of text formatted as user-input text.
If the system 100 does not receive user input selecting a candidate portion of text for prediction (408, the "NO" branch), the system 100 may update a prediction model for predicting the candidate portion of text (412). For example, prediction module 264 may also train ML model 267 based on text input by the user in place of the predicted text.
By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, flash memory, or any other storage medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if the instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, Digital Subscriber Line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. It should be understood, however, that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transitory media, but are instead directed to non-transitory, tangible storage media. As used herein, disc and disc includes Compact Disc (CD), laser disc, optical disc, Digital Versatile Disc (DVD), floppy disc and blu-ray disc where discs usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.
The instructions may be executed by one or more processors, such as one or more Digital Signal Processors (DSPs), general purpose microprocessors, Application Specific Integrated Circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term "processor" as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. Further, in some aspects, the functionality described in this disclosure may be provided within dedicated hardware and/or software modules. Furthermore, the techniques may be fully implemented in one or more circuits or logic elements.
The techniques of this disclosure may be implemented in various devices or apparatuses, including a wireless handset, an Integrated Circuit (IC), or a group of ICs (e.g., a chipset). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require implementation by different hardware units. Rather, as noted above, the various units may be combined in hardware units or provided by a collection of interoperative hardware units including one or more processors as described above, together with appropriate software and/or firmware.
Various embodiments have been described. These and other embodiments are within the scope of the following claims.
Claims (13)
1. A method, comprising:
receiving, by a computing system, from a message account associated with a user, an identification of a recipient of an electronic message being composed;
predicting, by the computing system, text of a body of a previous electronic message sent from the messaging account based on text contained in the electronic message; and
outputting the predicted text for display for arbitrary selection and insertion into the body of the electronic message.
2. The method of claim 1, wherein predicting the text comprises:
predicting the text based on text contained in previous electronic messages sent from the message account to the recipient.
3. The method of claim 1, wherein receiving the identification of the recipients of the electronic message being composed comprises receiving identifications of a plurality of recipients of the electronic message being composed, and wherein predicting the text comprises predicting the text based on past text used by the user in electronic messages directed to the plurality of recipients.
4. The method of any of claims 1-3, wherein predicting the text comprises predicting the text using a machine learning model trained based on text included in the previous electronic message sent from the message account to the recipient.
5. The method of claim 1, wherein predicting the text of the body of the electronic message comprises:
predicting, by the computing system, a greeting for the body of the electronic message based on greetings included in previous electronic messages sent from the message account.
6. The method of claim 5, wherein predicting the greeting in the body of the electronic message comprises predicting, by the computing system, the greeting in the body of the electronic message based on the greeting included in a previous electronic message sent from the message account to the recipient.
7. The method of claim 5 or 6, further comprising:
identifying, by a computing system, the greeting included in the previous electronic message sent from the messaging account using a machine learning model.
8. The method of any of claims 5-7, wherein the predicted greeting does not include the name of the recipient.
9. The method of any of claims 5-8, wherein the predicted greeting comprises one or more words other than the recipient's name or title.
10. The method of any of claims 5-9, wherein the greeting is further predicted based on a field of the recipient's email address.
11. The method of any of claims 5-10, wherein outputting the predicted greeting comprises outputting the predicted greeting prior to receiving user input associated with the composition of the body of the electronic message being composed.
12. A computing system, comprising:
one or more user interface components configured to receive typed user input; and
one or more processors configured to perform the method of any one of claims 1-11.
13. A computer-readable storage medium storing instructions that, when executed, cause one or more processors of a computing system to perform the method of any of claims 1-11.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862667836P | 2018-05-07 | 2018-05-07 | |
US62/667,836 | 2018-05-07 | ||
PCT/US2019/030916 WO2019217314A1 (en) | 2018-05-07 | 2019-05-06 | Recipient based text prediction for electronic messaging |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112384938A true CN112384938A (en) | 2021-02-19 |
Family
ID=66625296
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980045721.5A Pending CN112384938A (en) | 2018-05-07 | 2019-05-06 | Text prediction based on recipient's electronic messages |
Country Status (5)
Country | Link |
---|---|
US (1) | US20210174020A1 (en) |
EP (1) | EP3791345A1 (en) |
CN (1) | CN112384938A (en) |
DE (1) | DE202019005589U1 (en) |
WO (1) | WO2019217314A1 (en) |
Families Citing this family (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8977255B2 (en) | 2007-04-03 | 2015-03-10 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
DK201770427A1 (en) | 2017-05-12 | 2018-12-20 | Apple Inc. | Low-latency intelligent automated assistant |
DK179496B1 (en) | 2017-05-12 | 2019-01-15 | Apple Inc. | USER-SPECIFIC Acoustic Models |
US20210342707A1 (en) * | 2020-05-01 | 2021-11-04 | International Business Machines Corporation | Data-driven techniques for model ensembles |
US20210406049A1 (en) * | 2020-06-30 | 2021-12-30 | Microsoft Technology Licensing, Llc | Facilitating message composition based on absent context |
US11550991B2 (en) * | 2021-03-29 | 2023-01-10 | Capital One Services, Llc | Methods and systems for generating alternative content using adversarial networks implemented in an application programming interface layer |
US20220318499A1 (en) * | 2021-03-31 | 2022-10-06 | Microsoft Technology Licensing, Llc | Assisted electronic message composition |
US11797766B2 (en) * | 2021-05-21 | 2023-10-24 | Apple Inc. | Word prediction with multiple overlapping contexts |
CN113568973B (en) * | 2021-07-21 | 2023-11-24 | 湖南天河国云科技有限公司 | Financial credit investigation data sharing method and device based on blockchain and federal learning |
US11816422B1 (en) | 2022-08-12 | 2023-11-14 | Capital One Services, Llc | System for suggesting words, phrases, or entities to complete sequences in risk control documents |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN101079851A (en) * | 2007-07-09 | 2007-11-28 | 华为技术有限公司 | Email type judgement method and device and establishment device of system and behavior model |
CN101315624A (en) * | 2007-05-29 | 2008-12-03 | 阿里巴巴集团控股有限公司 | Text subject recommending method and device |
CN103065237A (en) * | 2012-12-18 | 2013-04-24 | 惠州Tcl移动通信有限公司 | Method, device and mobile terminal for automatically generating e-mail opening remarks |
CN105897552A (en) * | 2015-02-12 | 2016-08-24 | 统有限责任两合公司 | Method for generating an electronic message on an electronic mail client system and communication device |
US20170201471A1 (en) * | 2016-01-12 | 2017-07-13 | Google Inc. | Methods and apparatus for determining, based on features of an electronic communication and schedule data of a user, reply content for inclusion in a reply by the user to the electronic communication |
US20180089588A1 (en) * | 2016-09-23 | 2018-03-29 | Google Inc. | Smart replies using an on-device model |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9264391B2 (en) * | 2012-11-01 | 2016-02-16 | Salesforce.Com, Inc. | Computer implemented methods and apparatus for providing near real-time predicted engagement level feedback to a user composing a social media message |
WO2016082096A1 (en) * | 2014-11-25 | 2016-06-02 | Nuance Communications, Inc. | System and method for predictive text entry using n-gram language model |
US10673794B2 (en) * | 2017-01-23 | 2020-06-02 | Lenovo (Singapore) Pte Ltd | Populating a message with personal boilerplate |
-
2019
- 2019-05-06 US US17/052,382 patent/US20210174020A1/en active Pending
- 2019-05-06 DE DE202019005589.4U patent/DE202019005589U1/en active Active
- 2019-05-06 WO PCT/US2019/030916 patent/WO2019217314A1/en unknown
- 2019-05-06 CN CN201980045721.5A patent/CN112384938A/en active Pending
- 2019-05-06 EP EP19725487.3A patent/EP3791345A1/en active Pending
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN101315624A (en) * | 2007-05-29 | 2008-12-03 | 阿里巴巴集团控股有限公司 | Text subject recommending method and device |
CN101079851A (en) * | 2007-07-09 | 2007-11-28 | 华为技术有限公司 | Email type judgement method and device and establishment device of system and behavior model |
CN103065237A (en) * | 2012-12-18 | 2013-04-24 | 惠州Tcl移动通信有限公司 | Method, device and mobile terminal for automatically generating e-mail opening remarks |
CN105897552A (en) * | 2015-02-12 | 2016-08-24 | 统有限责任两合公司 | Method for generating an electronic message on an electronic mail client system and communication device |
US20170201471A1 (en) * | 2016-01-12 | 2017-07-13 | Google Inc. | Methods and apparatus for determining, based on features of an electronic communication and schedule data of a user, reply content for inclusion in a reply by the user to the electronic communication |
US20180089588A1 (en) * | 2016-09-23 | 2018-03-29 | Google Inc. | Smart replies using an on-device model |
Also Published As
Publication number | Publication date |
---|---|
EP3791345A1 (en) | 2021-03-17 |
WO2019217314A1 (en) | 2019-11-14 |
US20210174020A1 (en) | 2021-06-10 |
DE202019005589U1 (en) | 2021-02-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11238211B2 (en) | Automatic hyperlinking of documents | |
US20210174020A1 (en) | Recipient based text prediction for electronic messaging | |
Rehman et al. | A hybrid CNN-LSTM model for improving accuracy of movie reviews sentiment analysis | |
Barushka et al. | Spam filtering using integrated distribution-based balancing approach and regularized deep neural networks | |
Fawagreh et al. | Random forests: from early developments to recent advancements | |
US20210004682A1 (en) | Adapting a sequence model for use in predicting future device interactions with a computing system | |
Mena et al. | A survey on uncertainty estimation in deep learning classification systems from a bayesian perspective | |
Kirelli et al. | Sentiment analysis of shared tweets on global warming on twitter with data mining methods: a case study on Turkish language | |
Bansal et al. | An Evolving Hybrid Deep Learning Framework for Legal Document Classification. | |
Zhang et al. | Optimizing hyper-parameters of neural networks with swarm intelligence: A novel framework for credit scoring | |
Kokatnoor et al. | Self-supervised learning based anomaly detection in online social media | |
Sridevi et al. | Genetic algorithm-optimized gated recurrent unit (GRU) network for semantic web services classification | |
WO2023164312A1 (en) | An apparatus for classifying candidates to postings and a method for its use | |
Xiang | Deep Learning Framework Study for Twitter Sentiment Analysis | |
Kumar et al. | A Recommendation System & Their Performance Metrics using several ML Algorithms | |
Talukdar et al. | Supervised Learning | |
WO2023224672A1 (en) | Deep learning system for navigating feedback | |
Horhirunkul et al. | Thai Name Gender Classification using Deep Learning | |
Davis et al. | Abusive Language Detection and Characterization of Twitter Behavior | |
Tapper | Evaluation of the performance of machine learning techniques for email classification | |
Cărbune et al. | Incremental sharing using machine learning | |
Price et al. | Machine Learning to Disable Applications from Using Background Resources Except at Appropriate Times | |
Demirbaga et al. | Machine Learning for Big Data Analytics | |
Palvadi | Explaining the Challenges of Accountability in Machine Learning Systems Beyond Technical Obstacles | |
Chaudhuri et al. | Generating Punctuation for Spoken Text |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |