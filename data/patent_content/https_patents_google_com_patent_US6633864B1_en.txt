US6633864B1 - Method and apparatus for multi-threaded based search of documents - Google Patents
Method and apparatus for multi-threaded based search of documents Download PDFInfo
- Publication number
- US6633864B1 US6633864B1 US09/303,362 US30336299A US6633864B1 US 6633864 B1 US6633864 B1 US 6633864B1 US 30336299 A US30336299 A US 30336299A US 6633864 B1 US6633864 B1 US 6633864B1
- Authority
- US
- United States
- Prior art keywords
- thread
- search
- results
- processing system
- data processing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99937—Sorting
Definitions
- the present invention relates generally to an improved data processing system and in particular to an improved method and apparatus for performing data searches. Still more particularly, the present invention provides a method and apparatus for searching for data using a browser.
- Internet also referred to as an “internetwork” is a set of computer networks, possibly dissimilar, joined together by means of gateways that handle data transfer and the conversion of messages from the sending network to the protocols used by the receiving network (with packets if necessary).
- gateways that handle data transfer and the conversion of messages from the sending network to the protocols used by the receiving network (with packets if necessary).
- Internet refers to the collection of networks and gateways that use the TCP/IP suite of protocols.
- the Internet has become a cultural fixture as a source of both information and entertainment. Many businesses are creating Internet sites as an integral part of their marketing efforts, informing consumers of the products or services offered by the business or providing other information seeking to engender brand loyalty. Many federal, state, and local government agencies are also employing Internet sites for informational purposes, particularly agencies which must interact with virtually all segments of society such as the Internal Revenue Service and secretaries of state. Providing informational guides and/or searchable databases of online public records may reduce operating costs. Further, the Internet is becoming increasingly popular as a medium for commercial transactions.
- HTML Hypertext Transfer Protocol
- HTML Hypertext Markup Language
- a URL is a special syntax identifier defining a communications path to specific information.
- the URL provides a universal, consistent method for finding and accessing this information, not necessarily for the user, but mostly for the user's Web “browser”.
- a browser is a program capable of submitting a request for information identified by a URL at the client machine. Retrieval of information on the Web is generally accomplished with an HTML-compatible browser.
- the Internet also is widely used to transfer applications to users using browsers. With respect to commerce on the Web, individual consumers and business use the Web to purchase various goods and services. In offering goods and services, some companies offer goods and services solely on the Web while others use the Web to extend their reach.
- Applets are Java programs that may be transparently downloaded into a browser supporting Java along with HTML pages in which they appear. These Java programs are network and platform independent. Applets run the same way regardless of where they originate or what data processing system onto which they are loaded.
- Java# is an object oriented programming language and environment focusing on defining data as objects and the methods that may be applied to those objects. Java supports only a single inheritance, meaning that each class can inherit from only one other class at any given time. Java also allows for the creation of totally abstract classes known as interfaces, which allow the defining of methods that may be shared with several classes without regard for how other classes are handling the methods. Java provides a mechanism to distribute software and extends the capabilities of a Web browser because programmers can write an applet once and the applet can be run on any Java enabled machine on the Web.
- Java virtual machine is a virtual computer component that resides only in memory.
- the JVM allows Java programs to be executed on different platforms as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM.
- Java is able to support applications for many types of data processing systems, which may contain a variety of central processing units and operating systems architectures.
- a compiler typically generates an architecture-neutral file format—the compiled code is executable on many processors, given the presence of the Java run time system.
- the Java compiler generates bytecode instructions that are non-specific to particular computer architectures.
- a bytecode is a machine independent code generated by the Java compiler and executed by a Java interpreter.
- a Java interpreter is a module in the JVM that alternatively decodes and executes a bytecode or bytecodes.
- Java Development Kit available from Sun Microsystems, Inc.
- Java bytecode may be stored as a Java application or applet on a Web Server, where it can be downloaded over a network to a user's machine and executed on a local JVM.
- Java run-time environment is specifically designed to limit the harm that a Java application can cause to the system that it is running on. This is especially important with the World Wide Web, where Java applets are downloaded and executed automatically when a user visits a Web page that contains Java pplets. Normally one would not want to execute random programs, they might contain viruses, or they might even be potentially malicious themselves and not merely carrying unwelcome code unintentionally. Unless the user specifically allows it (by setting the appropriate flags in the user-interface to the JVM), a Java applet cannot read or write to attached storage devices (except perhaps to a specific, restricted area), nor can it read or write to memory locations (except to a specific, restricted area).
- Java applets designed for downloading over the network
- standard Java libraries also specifically support client-server computing.
- the Java language includes provisions for multi-threading and for network communications. Compared to other languages (such as C), it is much easier to write a pair of programs, one executing locally on the user's computer that is handling the user-interaction, and the other executing remotely on a server, which is performing potentially more sophisticated and processor-intensive work.
- the present invention provides a method, apparatus, and instructions for searching for files or documents using a graphical user interface.
- the present invention provides a graphical user interface thread and a search thread in which both threads execute to perform searching and presentation of searches to a user.
- the search thread is used to handle the searching and processing of files while the graphical user interface thread allows the user to interact with the graphical user interface while files are being processed by the search thread.
- FIG. 1 depicts a pictorial representation of a distributed data processing system in which the present invention may be implemented
- FIG. 2 depicts a block diagram of a data processing system that may be implemented as a server in accordance with a preferred embodiment of the present invention
- FIG. 3 is a block diagram illustrating a data processing system in which the present invention may be implemented
- FIG. 4 is a block diagram illustrating components used in searching for documents depicted in accordance with a preferred embodiment of the present invention
- FIG. 5 is an example of a page presented to a user for searching, depicted in accordance with a preferred embodiment of the present invention
- FIG. 6 is a flowchart of a process used by a graphical user interface to process inputs depicted in accordance with a preferred embodiment of the present invention
- FIG. 7 is a flowchart of a process for handling user input by a graphical user interface thread depicted in accordance with a preferred embodiment of the present invention.
- FIG. 8 is a flowchart of a process used by a search thread to search for files depicted in accordance with a preferred embodiment of the present invention
- FIG. 9 is a diagram illustrating pseudo code for displaying file names on a GUI depicted in accordance with a preferred embodiment of the present invention.
- FIGS. 10A and 10B are diagrams illustrating pseudo code for handling GUI button interactions depicted in accordance with a preferred embodiment of the present invention.
- FIGS. 11A and 11B are diagrams illustrating pseudo code for a search thread depicted in accordance with a preferred embodiment of the present invention.
- FIG. 1 depicts a pictorial representation of a distributed data processing system in which the present invention may be implemented.
- Distributed data processing system 100 is a network of computers in which the present invention may be implemented.
- Distributed data processing system 100 contains a network 102 , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system 100 .
- Network 102 may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections.
- a server 104 is connected to network 102 along with storage unit 106 .
- clients 108 , 110 , and 112 also are connected to network 102 .
- These clients 108 , 110 , and 112 may be, for example, personal computers or network computers.
- a network computer is any computer, coupled to a network, which receives a program or other application from another computer coupled to the network.
- server 104 provides data, such as boot files, operating system images, and applications to clients 108 - 112 .
- Clients 108 , 110 , and 112 are clients to server 104 .
- Distributed data processing system 100 may include additional servers, clients, and other devices not shown.
- distributed data processing system 100 is the Internet with network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages.
- distributed data processing system 100 also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).
- FIG. 1 is intended as an example, and not as an architectural limitation for the present invention.
- Data processing system 200 may be a symmetric multiprocessor (SMP) system including a plurality of processors 202 and 204 connected to system bus 206 . Alternatively, a single processor system may be employed. Also connected to system bus 206 is memory controller/cache 208 , which provides an interface to local memory 209 . I/O bus bridge 210 is connected to system bus 206 and provides an interface to I/O bus 212 . Memory controller/cache 208 and I/O bus bridge 210 maybe integrated as depicted.
- SMP symmetric multiprocessor
- Peripheral component interconnect (PCI) bus bridge 214 connected to I/O bus 212 provides an interface to PCI local bus 216 .
- PCI bus 216 A number of modems may be connected to PCI bus 216 .
- Typical PCI bus implementations will support four PCI expansion slots or add-in connectors.
- Communications links to network computers 108 - 112 in FIG. 1 may be provided through modem 218 and network adapter 220 connected to PCI local bus 216 through add-in boards.
- Additional PCI bus bridges 222 and 224 provide interfaces for additional PCI buses 226 and 228 , from which additional modems or network adapters may be supported. In this manner, server 200 allows connections to multiple network computers.
- a memory-mapped graphics adapter 230 and hard disk 232 may also be connected to I/O bus 212 as depicted, either directly or indirectly.
- FIG. 2 may vary.
- other peripheral devices such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted.
- the depicted example is not meant to imply architectural limitations with respect to the present invention.
- the data processing system depicted in FIG. 2 may be, for example, an IBM RISC/System 6000 system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- IBM RISC/System 6000 system a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- AIX Advanced Interactive Executive
- Data processing system 300 is an example of a client computer.
- Data processing system 300 employs a peripheral component interconnect (PCI) local bus architecture.
- PCI peripheral component interconnect
- Processor 302 and main memory 304 are connected to PCI local bus 306 through PCI bridge 308 .
- PCI bridge 308 also may include an integrated memory controller and cache memory for processor 302 . Additional connections to PCI local bus 306 may be made through direct component interconnection or through add-in boards.
- local area network (LAN) adapter 310 SCSI host bus adapter 312 , and expansion bus interface 314 are connected to PCI local bus 306 by direct component connection.
- audio adapter 316 graphics adapter 318 , and audio/video adapter 319 are connected to PCI local bus 306 by add-in boards inserted into expansion slots.
- Expansion bus interface 314 provides a connection for a keyboard and mouse adapter 320 , modem 322 , and additional memory 324 .
- SCSI host bus adapter 312 provides a connection for hard disk drive 326 , tape drive 328 , and CD-ROM drive 330 .
- Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.
- An operating system runs on processor 302 and is used to coordinate and provide control of various components within data processing system 300 in FIG. 3 .
- the operating system may be a commercially available operating system such as OS/2, which is available from International Business Machines Corporation. “OS/2” is a trademark of International Business Machines Corporation.
- An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system 300 .
- Java is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive 326 , and may be loaded into main memory 304 for execution by processor 302 .
- FIG. 3 may vary depending on the implementation.
- Other internal hardware or peripheral devices such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in FIG. 3 .
- the processes of the present invention may be applied to a multiprocessor data processing system.
- data processing system 300 may not include SCSI host bus adapter 312 , hard disk drive 326 , tape drive 328 , and CD-ROM 330 , as noted by dotted line 332 in FIG. 3 denoting optional inclusion.
- the computer to be properly called a client computer, must include some type of network communication interface, such as LAN adapter 310 , modem 322 , or the like.
- data processing system 300 may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system 300 comprises some type of network communication interface.
- data processing system 300 may be a Personal Digital Assistant (PDA) device which is configured with ROM and/or flash ROM in order to provide non-volatile memory for storing operating system files and/or user-generated data.
- PDA Personal Digital Assistant
- the present invention provides a method, apparatus, and instructions for searching for files or documents using a graphical user interface.
- the present invention provides a graphical user interface thread and a search thread in which both threads execute to perform searching and presentation of searches to a user.
- the search thread is used to handle the searching and processing of files while the graphical user interface thread allows the user to interact with the graphical user interface while files are being processed by the search thread.
- a search may be initiated through an HTML page such as search page 400 displayed in browser 401 in which a Java applet 402 containing code used to initiate search threads is contained.
- Search page 400 may be located locally on a client or downloaded from a server.
- Initiation of Java applet 402 causes the initiation of one thread, GUI thread 404 .
- GUI thread 404 initiates search thread 406 to search for documents meeting the parameters of the search class entered through search page 400 .
- These two threads execute within JVM 408 .
- GUI thread 404 and search thread 406 run in parallel.
- GUI thread 404 is used to provide for interaction with the user while search thread 406 is employed to actually perform the search and file processing.
- GUI thread 404 This combination of threads allows a user to interface and see results while the search is still in progress.
- the interface for seeing results found thus far are provided through GUI thread 404 .
- Search thread 406 provides for the continued searching while the user views results found thus far through GUI thread 404 .
- the results are written into file found list 410 by search thread 406 .
- GUI thread 404 may access file found list 410 to obtain results already found for display to the user.
- file found list 410 is an array in the form of an object cached in memory allocated by JVM 408 from a heap associated with JVM 408 .
- the file list may be stored in other places, for example a storage device such as a hard disk drive.
- GUI thread 404 will display the results within browser 401 as a page and actually may display the results within search page 400 . Additionally, the user may terminate a search through GUI thread 404 , which causes GUI thread 404 to terminate search thread 406 . Additionally, search thread 406 also terminates when no more files are present for searching.
- Page 500 is an example of a search page, such as search page 400 in FIG. 4 .
- This search page may be displayed within browser 401 , as part of browser 401 , or may be displayed as a separate window depending on the implementation.
- Page 500 includes a parameter field 502 for entering search terms.
- the search may be initiated by selecting search button 504 .
- the search may be stopped by selecting stop button 506 .
- the results are displayed in section 508 , which includes a forward button 510 and a back button 512 to step through the different results returned by the search.
- Files or documents meeting the search term or terms entered into parameter field 502 will displayed in section 508 .
- not all of the search results are displayable within field 500 .
- groups of results may be displayed and the results may be viewed by depressing forward button 510 and back button 512 .
- search thread 406 in FIG. 4 will search for the appropriate files locally or at some URL.
- results when results are returned they will be displayed in section 508 .
- GUI thread 404 in FIG. 4 will continue to update page 500 until no more results are displayable in section 508 .
- forward button 510 will be selectable by the user. In this manner, the user is able to view results while the search continues by search thread 406 in FIG. 4 .
- Selecting stop button 506 will result in GUI thread 404 terminating search thread 406 back in FIG. 4 .
- section 508 is able to display ten results, results 514 - 532 .
- FIG. 6 a flowchart of a process used by a graphical user interface to process inputs is depicted in accordance with a preferred embodiment of the present invention. This process is used to process inputs made through the graphical user interface. In particular, the process checks for various GUI button interactions.
- the process begins by awaiting user input (step 600 ). Upon receiving an input by the user to initiate a search (step 602 ), a determination is made as to whether a search has been entered in the GUI (step 604 ). If a search has been entered, then the search thread is initiated (step 606 ). Thereafter, the search is passed to a search thread (step 608 ) with the process then returning to step 600 to await additional user input.
- step 604 if a search has not been entered, the process returns to step 600 .
- step 610 In response to receiving input in which the user has pressed the stop button (step 610 ), the search thread is then terminated (step 612 ) with the process then returning to step 600 .
- step 614 If the input to the graphical user interface is pressing of the page forward button (step 614 ), a determination is made as to whether the end of the results have been displayed (step 616 ). If the end of the results has not been reached in the display, the next page of results is then displayed (step 618 ) with the process then returning to step 600 . Otherwise, an indication is made in the GUI to indicate to the user that the user is at the end of the results (step 620 ) with the process then returning to step 600 .
- the process In response to receiving input pressing the page backward button (step 622 ), the process then makes a determination as to whether the display of the results is at the beginning of the results (step 624 ). If the display is not at the beginning of the results, then the previous page of results is then displayed to the user (step 626 ) with the process then returning to step 600 . Otherwise, an indication is made to the user that the display is at the beginning of the results (step 628 ) with the process then returning to step 600 .
- FIG. 7 a flowchart of a process for handling user input by a graphical user interface thread is depicted in accordance with a preferred embodiment of the present invention.
- the process illustrated in FIG. 7 is that for handling a keyboard event.
- the keyboard events handled are an enter key and an escape key.
- the process begins by awaiting user input (step 700 ). Upon receiving user input of an enter key being depressed on the keyboard (step 702 ), a determination is made as to whether a search has been entered (step 704 ). If a search has not been entered, the process returns to step 700 . Otherwise, the search thread is initiated (step 706 ), and the search is sent to the search thread (step 708 ) with the process then returning to step 700 .
- step 708 Upon receiving an input of the depression of a escape key (step 708 ), the search thread is terminated (step 710 ) with the process then returning to step 700 .
- the process begins by receiving a search (step 800 ).
- the search to be made is received from the graphical user interface thread.
- directories to be searched are identified (step 802 ).
- the directories may be identified in a number of different ways. For example, directories may be selected for searching or the entire disk may be searched. This identification will include any subdirectories if it is desired to search subdirectories.
- a variable N is set equal to the number of directories to be searched (step 804 ).
- Each directory is assigned to an index number numbered from one to N (step 806 ).
- a directory index is set equal to one (step 808 ).
- a determination is then made as to whether the directory index is less than or equal to N (step 810 ). If the directory index is not less than or equal to N, the process terminates. In this situation, all of the directories have been searched. Otherwise, a directory is selected based on the directory index, which will be one for the first search (step 812 ). Thereafter, the number of files present in the directory is identified (step 814 ).
- the variable I is set equal to the number of files in the directory (step 816 ).
- Each file is then assigned to a file index in a manner similar to that for the directories (step 818 ).
- a file index is set equal to one (step 820 ).
- a determination is then made as to whether the file index is less than or equal to I (step 822 ). If the file index is not less than or equal to I, then the directory index is incremented (step 824 ) with the process returning to step 810 . Such a situation indicates that either no files are present or all of the files have been processed within the directory.
- step 826 the file indicated by the file index is then open (step 826 ).
- the open file is then parsed (step 828 ).
- a determination is made as to whether a match is present for the search terms in the files (step 830 ). If a match is present, the file name and the full path is added to a file list (step 832 ). Thereafter, the file index is incremented (step 834 ) with the process then returning to step 822 as described above. If no match is found in step 830 , the process proceeds to step 834 to increment the file index and to look for the next file if any in step 822 .
- the search thread described in FIG. 8 also may be applied to searching on the World Wide Web.
- files on hosts or Web servers are specified by a Universal Resource Locator (URL), such as HTTP://ibm.com/find/this/dir/file.* in which “*” may be anything.
- a URL directory such as HTTP://ibm.com/find/this/dir, in which the file may be found may be stored in association with the name of the file in the directory. If a match is found while searching a host on the World Wide Web, the URL will be added to the file found list. If a match is not found, then the next file in the URL's directory will be searched until no more files are present for searching. At that time, the thread will terminate.
- FIGS. 9, 10 A, 10 B, 11 A, and 11 B are psuedo code examples for processes and the present invention and are written in Java.
- FIG. 9 a diagram illustrating pseudo code for displaying file names on a GUI is depicted in accordance with a preferred embodiment of the present invention.
- the code is used to update the screen.
- Section 902 is employed to change the color of the URL to another color if the URL is one that has already been visited.
- the code in section 904 is used to check the files in the array for the file found list for files not already displayed on the list.
- FIGS. 10A and 10B diagrams illustrating pseudo code for handling GUI button interactions are depicted in accordance with a preferred embodiment of the present invention.
- the code is used to initiate the search in response to depressing or selection of a search button. This code will initiate the search thread.
- section 1002 illustrates code to terminate a search when a stop button is selected by user.
- Section 1004 includes code used to process the selection of a page forward button. This initiates the movement to the next page.
- Section 1006 illustrates a code used for a page back button.
- Section 1008 in FIG. 10B contains code for identifying certain keyboard events.
- section 1010 illustrates the pseudo code used to process depressing of an enter key.
- Section 1010 Depressing an enter key will cause the code in section 1010 to initiate a search thread.
- section 1012 will initiate determination of a search thread when the escape key is pressed.
- Section 1014 contains code used to handle mouse movements while section 1016 handles code to use the pressing or releasing of a mouse button.
- FIGS. 11A and 11B diagrams illustrating pseudo code for a search thread are depicted in accordance with a preferred embodiment of the present invention.
- This search thread is initiating a response to the selection or depressing of a search button in the GUI or the pressing of an enter button from the keyboard.
- section 1100 is used to initiate the start of the search thread.
- Section 1102 indicates code for starting the search thread.
- Section 1104 illustrates code used to select or locate files based on a full path and filename. This example illustrates searching for files locally while the present invention also may be applied to searching for files remotely from the data processing system. For example, the code also may be applied to searching for files on the World Wide Web specified by a URL or by searching for URL directories in which files may be found.
- Section 1106 in FIG. 11B illustrates code that is used to open and parse through the contents of a file. This code will compare the contents of the file with the search word or words and will check all specified files before it stops. This code in section 1106 may be terminated by the pressing of a stop button as detected by the GUI thread.
- Section 1108 contains code used to add the full path and filename or the URL to a file found list. Section 1110 is used to initiate parsing or searching of the next file.
- the two concurrent threads are executed within a Java virtual machine.
- the processes of the present invention may be applied to other types of threads other than those from a Java applet executed within a virtual machine other than a JVM or within an operating system, such as Windows 95, which is available from Microsoft Corporation.
- the embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.
Abstract
Description
Claims (31)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/303,362 US6633864B1 (en) | 1999-04-29 | 1999-04-29 | Method and apparatus for multi-threaded based search of documents |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/303,362 US6633864B1 (en) | 1999-04-29 | 1999-04-29 | Method and apparatus for multi-threaded based search of documents |
Publications (1)
Publication Number | Publication Date |
---|---|
US6633864B1 true US6633864B1 (en) | 2003-10-14 |
Family
ID=28791807
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/303,362 Expired - Lifetime US6633864B1 (en) | 1999-04-29 | 1999-04-29 | Method and apparatus for multi-threaded based search of documents |
Country Status (1)
Country | Link |
---|---|
US (1) | US6633864B1 (en) |
Cited By (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030084035A1 (en) * | 2001-07-23 | 2003-05-01 | Emerick Charles L. | Integrated search and information discovery system |
US20040088649A1 (en) * | 2002-10-31 | 2004-05-06 | International Business Machines Corporation | System and method for finding the recency of an information aggregate |
US20060162546A1 (en) * | 2005-01-21 | 2006-07-27 | Sanden Corporation | Sealing member of a compressor |
US20070088680A1 (en) * | 2005-10-14 | 2007-04-19 | Microsoft Corporation | Simultaneously spawning multiple searches across multiple providers |
US20080034434A1 (en) * | 2006-08-03 | 2008-02-07 | Rolf Repasi | Obtaining network origins of potential software threats |
CN100395996C (en) * | 2005-06-23 | 2008-06-18 | 华为技术有限公司 | Information synchronizing method for network management system |
US7437358B2 (en) | 2004-06-25 | 2008-10-14 | Apple Inc. | Methods and systems for managing data |
US20090172585A1 (en) * | 2007-12-27 | 2009-07-02 | Canon Kabushiki Kaisha | Information processing apparatus, method and program for controlling the same, and storage medium |
US7613689B2 (en) | 2004-06-25 | 2009-11-03 | Apple Inc. | Methods and systems for managing data |
US7774326B2 (en) | 2004-06-25 | 2010-08-10 | Apple Inc. | Methods and systems for managing data |
US20110179006A1 (en) * | 2004-12-16 | 2011-07-21 | At&T Corp. | System and method for providing a natural language interface to a database |
US10887418B1 (en) * | 2008-08-25 | 2021-01-05 | Google Llc | Parallel, side-effect based DNS pre-caching |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5623652A (en) * | 1994-07-25 | 1997-04-22 | Apple Computer, Inc. | Method and apparatus for searching for information in a network and for controlling the display of searchable information on display devices in the network |
US5778368A (en) * | 1996-05-03 | 1998-07-07 | Telogy Networks, Inc. | Real-time embedded software respository with attribute searching apparatus and method |
US5933144A (en) * | 1997-11-12 | 1999-08-03 | International Business Machines Corporation | Utility for providing printing support to graphical Java applications |
US5974135A (en) * | 1997-06-11 | 1999-10-26 | Harrah's Operating Company, Inc. | Teleservices computer system, method, and manager application for integrated presentation of concurrent interactions with multiple terminal emulation sessions |
US5978940A (en) * | 1997-08-20 | 1999-11-02 | Mci Communications Corporation | System method and article of manufacture for test operations |
US5991751A (en) * | 1997-06-02 | 1999-11-23 | Smartpatents, Inc. | System, method, and computer program product for patent-centric and group-oriented data processing |
US6006252A (en) * | 1996-10-08 | 1999-12-21 | Wolfe; Mark A. | System and method for communicating information relating to a network resource |
US6055526A (en) * | 1998-04-02 | 2000-04-25 | Sun Microsystems, Inc. | Data indexing technique |
US6167428A (en) * | 1996-11-29 | 2000-12-26 | Ellis; Frampton E. | Personal computer microprocessor firewalls for internet distributed processing |
US6275983B1 (en) * | 1993-07-19 | 2001-08-14 | Object Technology Licensing Corp. | Object-oriented operating system |
US6360205B1 (en) * | 1998-10-30 | 2002-03-19 | Trip.Com, Inc. | Obtaining and utilizing commercial information |
-
1999
- 1999-04-29 US US09/303,362 patent/US6633864B1/en not_active Expired - Lifetime
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6275983B1 (en) * | 1993-07-19 | 2001-08-14 | Object Technology Licensing Corp. | Object-oriented operating system |
US5623652A (en) * | 1994-07-25 | 1997-04-22 | Apple Computer, Inc. | Method and apparatus for searching for information in a network and for controlling the display of searchable information on display devices in the network |
US5778368A (en) * | 1996-05-03 | 1998-07-07 | Telogy Networks, Inc. | Real-time embedded software respository with attribute searching apparatus and method |
US6006252A (en) * | 1996-10-08 | 1999-12-21 | Wolfe; Mark A. | System and method for communicating information relating to a network resource |
US6167428A (en) * | 1996-11-29 | 2000-12-26 | Ellis; Frampton E. | Personal computer microprocessor firewalls for internet distributed processing |
US5991751A (en) * | 1997-06-02 | 1999-11-23 | Smartpatents, Inc. | System, method, and computer program product for patent-centric and group-oriented data processing |
US5974135A (en) * | 1997-06-11 | 1999-10-26 | Harrah's Operating Company, Inc. | Teleservices computer system, method, and manager application for integrated presentation of concurrent interactions with multiple terminal emulation sessions |
US5978940A (en) * | 1997-08-20 | 1999-11-02 | Mci Communications Corporation | System method and article of manufacture for test operations |
US5933144A (en) * | 1997-11-12 | 1999-08-03 | International Business Machines Corporation | Utility for providing printing support to graphical Java applications |
US6055526A (en) * | 1998-04-02 | 2000-04-25 | Sun Microsystems, Inc. | Data indexing technique |
US6360205B1 (en) * | 1998-10-30 | 2002-03-19 | Trip.Com, Inc. | Obtaining and utilizing commercial information |
Cited By (40)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030084035A1 (en) * | 2001-07-23 | 2003-05-01 | Emerick Charles L. | Integrated search and information discovery system |
US20040088649A1 (en) * | 2002-10-31 | 2004-05-06 | International Business Machines Corporation | System and method for finding the recency of an information aggregate |
US8166065B2 (en) | 2004-06-25 | 2012-04-24 | Apple Inc. | Searching metadata from files |
US10678799B2 (en) | 2004-06-25 | 2020-06-09 | Apple Inc. | Methods and systems for managing data |
US8229913B2 (en) | 2004-06-25 | 2012-07-24 | Apple Inc. | Methods and systems for managing data |
US9767161B2 (en) | 2004-06-25 | 2017-09-19 | Apple Inc. | Methods and systems for managing data |
US7437358B2 (en) | 2004-06-25 | 2008-10-14 | Apple Inc. | Methods and systems for managing data |
US9460096B2 (en) | 2004-06-25 | 2016-10-04 | Apple Inc. | Methods and systems for managing data |
US7613689B2 (en) | 2004-06-25 | 2009-11-03 | Apple Inc. | Methods and systems for managing data |
US7617225B2 (en) | 2004-06-25 | 2009-11-10 | Apple Inc. | Methods and systems for managing data created by different applications |
US9213708B2 (en) | 2004-06-25 | 2015-12-15 | Apple Inc. | Methods and systems for managing data |
US7730012B2 (en) | 2004-06-25 | 2010-06-01 | Apple Inc. | Methods and systems for managing data |
US7774326B2 (en) | 2004-06-25 | 2010-08-10 | Apple Inc. | Methods and systems for managing data |
US9063942B2 (en) * | 2004-06-25 | 2015-06-23 | Apple Inc. | Methods and systems for managing data |
US7970799B2 (en) | 2004-06-25 | 2011-06-28 | Apple Inc. | Methods and systems for managing data |
US9020989B2 (en) | 2004-06-25 | 2015-04-28 | Apple Inc. | Methods and systems for managing data |
US8095506B2 (en) | 2004-06-25 | 2012-01-10 | Apple Inc. | Methods and systems for managing data |
US8135727B2 (en) | 2004-06-25 | 2012-03-13 | Apple Inc. | Methods and systems for managing data |
US8150826B2 (en) | 2004-06-25 | 2012-04-03 | Apple Inc. | Methods and systems for managing data |
US8156104B2 (en) | 2004-06-25 | 2012-04-10 | Apple Inc. | Methods and systems for managing data |
US7630971B2 (en) | 2004-06-25 | 2009-12-08 | Apple Inc. | Methods and systems for managing data |
US8868498B2 (en) | 2004-06-25 | 2014-10-21 | Apple Inc. | Methods and systems for managing data |
US8473511B2 (en) | 2004-06-25 | 2013-06-25 | Apple Inc. | Methods and systems for managing data |
US8234245B2 (en) | 2004-06-25 | 2012-07-31 | Apple Inc. | Methods and systems for managing data |
US8352513B2 (en) | 2004-06-25 | 2013-01-08 | Apple Inc. | Methods and systems for managing data |
US8856074B2 (en) | 2004-06-25 | 2014-10-07 | Apple Inc. | Methods and systems for managing data |
US8429208B2 (en) | 2004-06-25 | 2013-04-23 | Apple Inc. | Methods and systems for managing data |
US8229889B2 (en) | 2004-06-25 | 2012-07-24 | Apple Inc. | Methods and systems for managing data |
US8738670B2 (en) | 2004-06-25 | 2014-05-27 | Apple Inc. | Methods and systems for managing data |
US8671088B2 (en) | 2004-12-16 | 2014-03-11 | At&T Intellectual Property Ii, L.P. | System and method for providing a natural language interface to a database |
US8412693B2 (en) * | 2004-12-16 | 2013-04-02 | At&T Intellectual Property Ii, L.P. | System and method for providing a natural language interface to a database |
US20110179006A1 (en) * | 2004-12-16 | 2011-07-21 | At&T Corp. | System and method for providing a natural language interface to a database |
US9384280B2 (en) | 2004-12-16 | 2016-07-05 | Bampton Technologies Llc | Searching restricted content on a network |
US20060162546A1 (en) * | 2005-01-21 | 2006-07-27 | Sanden Corporation | Sealing member of a compressor |
CN100395996C (en) * | 2005-06-23 | 2008-06-18 | 华为技术有限公司 | Information synchronizing method for network management system |
US20070088680A1 (en) * | 2005-10-14 | 2007-04-19 | Microsoft Corporation | Simultaneously spawning multiple searches across multiple providers |
US7971257B2 (en) * | 2006-08-03 | 2011-06-28 | Symantec Corporation | Obtaining network origins of potential software threats |
US20080034434A1 (en) * | 2006-08-03 | 2008-02-07 | Rolf Repasi | Obtaining network origins of potential software threats |
US20090172585A1 (en) * | 2007-12-27 | 2009-07-02 | Canon Kabushiki Kaisha | Information processing apparatus, method and program for controlling the same, and storage medium |
US10887418B1 (en) * | 2008-08-25 | 2021-01-05 | Google Llc | Parallel, side-effect based DNS pre-caching |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6433794B1 (en) | Method and apparatus for selecting a java virtual machine for use with a browser | |
US6553363B1 (en) | Method and apparatus for processing documents in a browser | |
US6305012B1 (en) | Method and apparatus for dynamic selection of instructions for compiling using tags | |
US6295643B1 (en) | Method and apparatus for improving java virtual machine performance using persistent execution information | |
US6842897B1 (en) | Method and apparatus for selecting classes using a browser for use by a virtual machine in a data processing system | |
US6986101B2 (en) | Method and apparatus for converting programs and source code files written in a programming language to equivalent markup language files | |
EP1076290B1 (en) | Method for on-demand network application download and execution | |
US6941552B1 (en) | Method and apparatus to retain applet security privileges outside of the Java virtual machine | |
US7093243B2 (en) | Software mechanism for efficient compiling and loading of java server pages (JSPs) | |
US6338068B1 (en) | Method to demonstrate software that performs database queries | |
US6988135B2 (en) | Method and system for specifying a cache policy for caching web pages which include dynamic content | |
US6442558B1 (en) | Mechanisms for division, storage, reconstruction, generation, and delivery of java class files | |
US6362840B1 (en) | Method and system for graphic display of link actions | |
US6968539B1 (en) | Methods and apparatus for a web application processing system | |
US5974430A (en) | Method for dynamically embedding objects stored in a web server within HTML for display by a web browser | |
JP3762687B2 (en) | System and method for dynamically displaying HTML form elements | |
US7131122B1 (en) | Apparatus, system and method for detecting old version of an applet in a client brower's JVM | |
US6263377B1 (en) | Method for managing distributed applications and distributed application manager | |
US6757895B1 (en) | Method and apparatus to selectively define java virtual machine initialization properties using a browser graphical user interface | |
EP0817031A2 (en) | Using a distributed object system to find and download java-based applications | |
US20030119386A1 (en) | Method and system for installing server-specific plug-ins | |
JPH1091447A (en) | Catalogue device for promoting reusage of distributed object in distribution object system | |
JP2000155686A (en) | Method and device for executing program in distribution system, computer readable storage medium with program execution procedure in distribution system stored therein and computer system | |
US7137009B1 (en) | Method and apparatus for securing a cookie cache in a data processing system | |
US6633864B1 (en) | Method and apparatus for multi-threaded based search of documents |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHRISTENSEN, CAROL S.;GIROUARD, JANICE M.;ISHMAEL, NIZAMUDEEN JR.;AND OTHERS;REEL/FRAME:009951/0836;SIGNING DATES FROM 19990427 TO 19990428 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |