WO2021216310A1 - Supervised contrastive learning with multiple positive examples - Google Patents
Supervised contrastive learning with multiple positive examples Download PDFInfo
- Publication number
- WO2021216310A1 WO2021216310A1 PCT/US2021/026836 US2021026836W WO2021216310A1 WO 2021216310 A1 WO2021216310 A1 WO 2021216310A1 US 2021026836 W US2021026836 W US 2021026836W WO 2021216310 A1 WO2021216310 A1 WO 2021216310A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- computing system
- anchor
- images
- image
- neural network
- Prior art date
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/20—Special algorithmic details
- G06T2207/20084—Artificial neural networks [ANN]
Definitions
- the present disclosure relates generally to systems and methods for contrastive learning of visual representations. More particularly, the present disclosure relates to systems and methods to perform supervised contrastive learning across multiple positive examples.
- the cross-entropy loss is likely the most widely used loss function for supervised learning. It is naturally defined as the KL-divergence between two discrete distributions: the empirical label distribution (a discrete distribution of 1-hot vectors) and the empirical distribution of the logits.
- One example aspect of the present disclosure is directed to a computing system to perform supervised contrastive learning of visual representations.
- the computing system includes one or more processors and one or more non-transitory computer-readable media that collectively store: a base encoder neural network configured to process an input image to generate an embedding representation of the input image; a projection head neural network configured to process the embedding representation of the input image to generate a projected representation of the input image; and instructions that, when executed by the one or more processors, cause the computing system to perform operations.
- the operations include obtaining an anchor image associated with a first class of a plurality of classes, a plurality of positive images associated with the first class, and one or more negative images associated with one or more other classes of the plurality of classes, the one or more other classes being different from the first class.
- the operations include processing, with the base encoder neural network, the anchor image to obtain an anchor embedding representation for the anchor image, the plurality of positive images to respectively obtain a plurality of positive embedding representations, and the one or more negative images to respectively obtain one or more negative embedding representations.
- the operations include processing, with the projection head neural network, the anchor embedding representation to obtain an anchor projected representation for the anchor image, the plurality of positive embedding representations to respectively obtain a plurality of positive projected representations, and the one or more negative embedding representations to respectively obtain one or more negative projected representations.
- the operations include evaluating a loss function that evaluates a similarity metric between the anchor projected representation and each of the plurality of positive projected representations and each of the one or more negative projected representations.
- the operations include modifying one or more values of one or more parameters of at least the base encoder neural network based at least in part on the loss function.
- Figures 1A and IB illustrate differences between supervised vs. self-supervised contrastive losses according to example embodiments of the present disclosure.
- Figures 2A-C illustrate differences between cross entropy, self-supervised contrastive loss, and supervised contrastive loss according to example embodiments of the present disclosure.
- Figure 3 shows an example contrastive learning framework according to example embodiments of the present disclosure.
- Figure 4 shows an example fine-tuned model that features a base encoder learned according to an example contrastive learning framework according to example embodiments of the present disclosure.
- Figure 5 A depicts a block diagram of an example computing system according to example embodiments of the present disclosure.
- Figure 5B depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- Figure 5C depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- the present disclosure is directed to an improved training methodology that enables supervised contrastive learning to be simultaneously performed across multiple positive and negative training examples.
- example aspects of the present disclosure are directed to an improved, supervised version of the batch contrastive loss, which has been shown to be very effective at learning powerful representations in the self- supervised setting.
- the proposed techniques adapt contrastive learning to the fully supervised setting and also enable learning to occur simultaneously across multiple positive examples.
- the proposed systems and methods are able to leverage label or other class assignment information more effectively than systems that use cross entropy loss.
- the use of a contrastive learning approach allows the representations for each class to be learned at any point within the embedding space, allowing more robust inter-class representations to be learned.
- Example models trained according to the proposed techniques consistently outperform cross entropy on supervised learning tasks across different architectures and data augmentations. Specifically, as demonstrated by example experimental results contained in United States Provisional Patent Application Number 63/013,153, on both ResNet-50 and ResNet-200, example models trained according to the proposed techniques outperform cross entropy by over 1%, setting a new state of the art number of 78:8% among methods that use AutoAugment data augmentation.
- the proposed loss also shows clear benefits for robustness to natural corruptions on standard benchmarks on both calibration and accuracy. Further, compared to cross entropy, the proposed supervised contrastive loss is more stable to hyperparameter settings such as optimizers or data augmentations. Additional aspects of the present disclosure leverage key ingredients such as large batch sizes and normalized representations, which have been shown to benefit self-supervised learning.
- example aspects of the present disclosure are directed to a new loss for supervised training which completely does away with a reference distribution; instead, example implementations of the proposed systems simply impose that normalized representations from the same class are closer together than representations from different classes.
- the proposed loss builds upon the family of contrastive objective functions, which have achieved excellent performance in self-supervised learning in recent years in the image and video domains and have connections to the large literature on metric learning.
- contrastive losses consist of two “opposing forces”: for a given anchor point, the first force pulls the anchor closer in representation space to other points, and the second force pushes the anchor farther away from other points.
- the former set is known as positives, and the latter as negatives.
- One aspect of the present disclosure is to consider many positives per anchor in addition to many negatives (e.g., as opposed to the convention in self-supervised contrastive learning which uses only a single positive).
- provided labels or other class-based designations can be used to select the positives and negatives.
- Figures 1A-B and 2A-C provide a visual explanation of the proposed loss.
- Figures 1A and IB illustrate differences between supervised vs. self-supervised contrastive losses.
- the supervised contrastive loss proposed herein shown generally at Figure 1A
- positives from one class are contrasted with negatives from other classes (since labels are provided); This results in images from the same class (but not necessarily depicting the same exact scene or subject) being mapped to nearby points in a low-dimensional hypersphere.
- self-supervised contrastive loss shown generally at Figure IB
- labels are not provided.
- positives are generated as data augmentations of a given sample (crops, flips, color changes etc.), and negatives are randomly sampled from the mini-batch. This can result in false negatives (shown in bottom right), which may not be mapped correctly, resulting in a worse representation.
- Figures 2A-C illustrate differences between cross entropy, self-supervised contrastive loss, and supervised contrastive loss.
- the cross entropy loss (shown generally at Figure 2A) uses labels and a softmax loss to train a model while the self- supervised contrastive loss (shown generally at Figure 2B) uses a contrastive loss and data augmentations to leam representations about classes.
- the proposed supervised contrastive loss (shown generally at Figure 2C) has two stages; in the first stage labels are used to choose the images for a contrastive loss, including multiple positive examples and one or more negative examples.
- the learned representations are frozen and then a classifier or other task-specific head can be learned (e.g., on a linear layer) using a softmax or cross entropy loss.
- a classifier or other task-specific head can be learned (e.g., on a linear layer) using a softmax or cross entropy loss.
- example models trained according to the proposed supervised contrastive techniques achieves very good top-1 accuracy on the ImageNet dataset on the ResNet-50 and ResNet-200 architectures.
- example implementations achieve a top-1 accuracy of 78.8%, which is a 1.6% improvement over the cross-entropy loss with the same data augmentation and architecture.
- the gain in top-1 accuracy is also accompanied by increased robustness as measured on the ImageNet-C dataset.
- the systems and methods of the present disclosure offer a number of technical effects and benefits.
- the proposed loss allows models to leam state of the art representations compared to cross-entropy, giving significant boosts in top-1 accuracy and robustness.
- the proposed techniques improve the performance and functionality of the computing system itself at various tasks such as image classification tasks.
- the proposed loss is less sensitive to a range of hyperparameters than cross-entropy, which is an important practical consideration.
- This reduced sensitivity is due to the more natural formulation of the loss that pulls representations of samples from the same class to be pulled closer together, rather than forcing them to be pulled towards a specific target as done in cross-entropy.
- many rounds of training may need to be performed to “tune” the hyperparameters to find an acceptable or optimal performance.
- fewer training rounds may need to be performed to tune the hyperparameters. Reducing the number of training rounds performed results in savings of computing resources such as processor usage, memory usage, network bandwidth, etc.
- the gradient of the proposed loss function encourages learning from hard positives and hard negatives.
- explicit and computationally expensive approaches to identifying particular hard negatives are typically performed.
- One example approach of this nature is “hard negative mining.” These approaches improve performance but require expenditure of significant computational resources.
- explicit attempts to identify hard examples can be obviated, resulting in savings of computing resources such as processor usage, memory usage, network bandwidth, etc.
- the proposed approach can result in reducing the number of false negatives that a trained model produces. For example, by enabling learning over positive examples that are within the same class, but depict different subjects or scenes, such positive examples can avoid being treated as negative examples. As such, the trained model leams to provide consistent representations for all class members, rather than only for specific subjects or scenes. Trained models with reduced false negatives represents an improvement in the functioning of the computing system itself.
- aspects of the present disclosure provide an improved contrastive learning loss that outperforms cross entropy on classification accuracy and robustness benchmarks. Furthermore, example experiments show that this loss is less sensitive to hyperparameter changes, which could be a useful practical consideration.
- the loss function provides a natural connection between fully unsupervised training on the one end, and fully supervised training on the other. This opens the possibility of applications in semi-supervised learning which can leverage the benefits of a single loss that can smoothly shift behavior based on the availability of labeled data.
- FIG. 3 One example representation learning framework is shown in Figure 3 and is structurally similar to that typically used for self-supervised contrastive learning. As illustrated in Figure 3, one example representation learning framework consists of the following components. (Also see Figures 1A-B and 2A-C for an illustration of the difference between the supervised and self-supervised scenarios).
- the system can be implemented to generate two or more randomly augmented images 212, each of which represents a different view of the data and thus contains some subset of the information in the original input image.
- other implementations can be configured to generate only a single augmented image.
- Example expressions (e.g., example loss functions) contained herein which make reference to two times a number of images included in a class are stylized in such way to account for an example embodiment which generates two augmented images per input image.
- a first stage of augmentation can include applying a random crop to the image and then resizing that back to the image’s native resolution.
- a second stage can include some or all of the different augmentations described in any of the following:
- SimAugment A variant of the strategy of Ting Chen, Simon Komblith, Mohammad Norouzi, and Gerissay Hinton. A simple framework for contrastive learning of visual representations.
- arXiv preprint arXiv:2002.05709, 2020 to sequentially apply random color distortion and Gaussian blurring, where an additional sparse image warp is probabilistically added to the end of the sequence.
- the data augmentation module 203 can perform any different combination of one or more augmentations. Further, some example implementations of the present disclosure do not perform augmentation of the input image 202 and instead simply use the input image 202 without augmentation.
- both of the augmented images for each input image can be separately input to the same encoder, resulting in a pair of representation vectors. More generally, the same encoder network 204 is typically used to generate the representations for all of the images in a training batch.
- this representation layer can be normalized to the unit hypersphere in P° E . This normalization can improve performance, consistent with other papers that have used metric losses.
- the new supervised loss is able to train both of these architectures to a high accuracy with no special hyperparameter tuning.
- example experimental results demonstrate that the supervised contrastive loss is less sensitive to small changes in hyperparameters, such as choice of optimizer or data augmentation.
- a loss function for the input image 202 can be evaluated on the basis of the projected representation 216 (e.g., via comparison to other projected representations generated for other input images such as other positive and negative training examples).
- the projection network 206 is only used for training the supervised contrastive loss. After the training is completed, this network can be discarded and replaced with a task-specific head (e.g., a single linear layer).
- Embedding representations 214 from the encoder 204 give improved performance on downstream tasks than the projected representations 216 from the projection network 206.
- the proposed inference-time models can contain exactly the same number of parameters as their cross-entropy equivalents.
- Figure 4 depicts a graphical diagram of an example use of a base encoder neural network 204 after it has been trained in the example framework shown in Figure 3.
- the base encoder neural network 204 has been extracted and an additional task specific model 250 has been appended to the base encoder neural network 204.
- the task specific model 250 can be any kind of model including linear models or non-linear models such as neural networks.
- the task specific model 250 and/or the base encoder neural network 204 can be additionally trained (e.g., “fine-tuned”) on additional training data (e.g., which may be task specific data).
- the additional training can be, for example, supervised learning training.
- an additional input 252 can be provided to the base encoder neural network 204 which can produce an embedding representation 254.
- the task-specific model 250 can receive and process the embedding representation 254 to generate a task- specific prediction 256.
- the task-specific prediction 256 can be a classification prediction; a detection prediction; a recognition prediction; a regression prediction; a segmentation prediction; and/or other prediction tasks.
- the embedding representation 254 can be directly used for tasks such as similarity search or retrieval without the need for further training/fine-tuning (e.g., without the need for an additional task-specific model 250.
- the framework is extensible to data examples of different domains, including text and/or audio domains.
- Example types of images that can be used include video frames, LiDAR point clouds, computed tomography scans, X-ray images, hyper-spectral images, and/or various other forms of imagery.
- Example Contrastive Losses Self-Supervised and Supervised
- z ( ⁇ z /(i) is one example similarity metric which computes an inner (dot) product between the normalized vectors Z j and z /(i) in 128-dimensional space. Note that for each anchor i, there is 1 positive pair and 27V — 2 negative pairs. The denominator has a total of 27V — 1 terms (the positive and negatives).
- the example supervised contrastive loss in Eq. 4 preserves this structure: adding larger numbers of negatives to the denominator provides increased contrast for the positives; likewise adding larger numbers of positives to the numerator provides increased contrast for the negatives. More positives allow the model to better capture intra-class variation. More negatives allow the model to capture inter-class variation.
- Eq. 6 generally includes contributions from the positives in the minibatch, while Eq. 7 includes those for negatives. It is now shown that easy positives and negatives (i.e., ones against which continuing to contrast the anchor only weakly benefits the encoder) have small gradient contributions while hard positives and negatives (i.e., ones against which continuing to contrast the anchor greatly benefits the encoder) have large ones. For an easy positive, z ⁇ ⁇ Z j « 1 and thus P (/ is large. Thus (see Eq. 6):
- Figure 5 A depicts a block diagram of an example computing system 100 according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102, a server computing system 130, and a training computing system 150 that are communicatively coupled over a network 180.
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114.
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more machine-learned models 120.
- the machine-learned models 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Example machine-learned models 120 are discussed with reference to Figures 3 and 4.
- the one or more machine-learned models 120 can be received from the server computing system 130 over network 180, stored in the user computing device memory 114, and then used or otherwise implemented by the one or more processors 112.
- the user computing device 102 can implement multiple parallel instances of a single machine-learned model 120 (e.g., to perform parallel predictions across multiple instances of inputs).
- one or more machine-learned models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the machine-learned models 140 can be implemented by the server computing system 140 as a portion of a web service (e.g., a prediction service).
- a web service e.g., a prediction service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130.
- the user computing device 102 can also include one or more user input component 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134.
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more machine-learned models 140.
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Example models 140 are discussed with reference to Figures 3 and 4.
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180.
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130.
- the training computing system 150 includes one or more processors 152 and a memory 154.
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors (e.g., according to the framework shown in Figure 3.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions such as those described herein at equations 1-4.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned models 120 and/or 140 based on a set of training data 162.
- the training data 162 can include, for example, data of different modalities such as imagery, audio samples, text, and/or the like.
- Example types of images that can be used include video frames, LiDAR point clouds, X-ray images, computed tomography scans, hyper-spectral images, and/or various other forms of imagery.
- the training examples can be provided by the user computing device 102.
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102. In some instances, this process can be referred to as personalizing the model.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- TCP/IP Transmission Control Protocol/IP
- HTTP HyperText Transfer Protocol
- SMTP Simple Stream Transfer Protocol
- FTP e.g., HTTP, HTTP, HTTP, HTTP, FTP
- encodings or formats e.g., HTML, XML
- protection schemes e.g., VPN, secure HTTP, SSL
- Figure 5A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162.
- the models 120 can be both trained and used locally at the user computing device 102.
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- Figure 5B depicts a block diagram of an example computing device 10 that performs according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- Figure 5C depicts a block diagram of an example computing device 50 that performs according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in Figure 5C, a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50.
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50.
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50. As illustrated in Figure 5C, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
Abstract
Description
Claims
Priority Applications (7)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2022564040A JP2023523726A (en) | 2020-04-21 | 2021-04-12 | Supervised Contrastive Learning with Multiple Positive Examples |
AU2021259170A AU2021259170B2 (en) | 2020-04-21 | 2021-04-12 | Supervised contrastive learning with multiple positive examples |
CN202180007180.4A CN114830133A (en) | 2020-04-21 | 2021-04-12 | Supervised contrast learning with multiple positive examples |
US17/920,623 US20230153629A1 (en) | 2020-04-21 | 2021-04-12 | Supervised Contrastive Learning with Multiple Positive Examples |
EP21723497.0A EP4121907A1 (en) | 2020-04-21 | 2021-04-12 | Supervised contrastive learning with multiple positive examples |
KR1020227039608A KR20220166355A (en) | 2020-04-21 | 2021-04-12 | Supervised and Controlled Learning Using Multiple Positive Examples |
US17/235,992 US11347975B2 (en) | 2020-04-21 | 2021-04-21 | Supervised contrastive learning with multiple positive examples |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063013153P | 2020-04-21 | 2020-04-21 | |
US63/013,153 | 2020-04-21 |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/235,992 Continuation US11347975B2 (en) | 2020-04-21 | 2021-04-21 | Supervised contrastive learning with multiple positive examples |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2021216310A1 true WO2021216310A1 (en) | 2021-10-28 |
Family
ID=75787244
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2021/026836 WO2021216310A1 (en) | 2020-04-21 | 2021-04-12 | Supervised contrastive learning with multiple positive examples |
Country Status (1)
Country | Link |
---|---|
WO (1) | WO2021216310A1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114663719A (en) * | 2022-01-26 | 2022-06-24 | 合肥工业大学 | Data scarcity-oriented self-supervision data mining method and system |
CN115391450A (en) * | 2022-08-26 | 2022-11-25 | 百度在线网络技术（北京）有限公司 | Inference information generation method, device, equipment, readable storage medium and product |
WO2023149588A1 (en) * | 2022-02-04 | 2023-08-10 | Intel Corporation | Unsupervised hash generation system |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170124711A1 (en) * | 2015-11-04 | 2017-05-04 | Nec Laboratories America, Inc. | Universal correspondence network |
-
2021
- 2021-04-12 WO PCT/US2021/026836 patent/WO2021216310A1/en unknown
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170124711A1 (en) * | 2015-11-04 | 2017-05-04 | Nec Laboratories America, Inc. | Universal correspondence network |
Non-Patent Citations (6)
Title |
---|
EKIN D CUBUKBARRET ZOPHDANDELION MANEVIJAY VASUDEVANQUOC V LE: "Learning augmentation strategies from data", PROCEEDINGS OF THE IEEE CONFERENCE ON COMPUTER VISION AND PATTERN RECOGNITION, 2019, pages 113 - 123, XP033686405, DOI: 10.1109/CVPR.2019.00020 |
EKIN D CUBUKBARRET ZOPHJONATHON SHLENSQUOC V LE: "Randaugment: Practical data augmentation with no separate search", ARXIVPREPRINT ARXIV:1909.13719, 2019 |
PRANNAY KHOSLA ET AL: "Supervised Contrastive Learning", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 10 March 2021 (2021-03-10), XP081895539 * |
TING CHEN ET AL: "A Simple Framework for Contrastive Learning of Visual Representations", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 13 February 2020 (2020-02-13), XP081632474 * |
TING CHENSIMON KORNBLITHMOHAMMAD NOROUZIGEOFFREY HINTON: "A simple framework for contrastive learning of visual representations", ARXIV PREPRINT ARXIV:2002.05709, 2020 |
ZHU QIUYU ET AL: "A New Loss Function for CNN Classifier Based on Predefined Evenly-Distributed Class Centroids", IEEE ACCESS, IEEE, USA, vol. 8, 14 December 2019 (2019-12-14), pages 10888 - 10895, XP011767557, DOI: 10.1109/ACCESS.2019.2960065 * |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114663719A (en) * | 2022-01-26 | 2022-06-24 | 合肥工业大学 | Data scarcity-oriented self-supervision data mining method and system |
CN114663719B (en) * | 2022-01-26 | 2024-03-22 | 合肥工业大学 | Data scarcity-oriented self-supervision data mining method and system |
WO2023149588A1 (en) * | 2022-02-04 | 2023-08-10 | Intel Corporation | Unsupervised hash generation system |
CN115391450A (en) * | 2022-08-26 | 2022-11-25 | 百度在线网络技术（北京）有限公司 | Inference information generation method, device, equipment, readable storage medium and product |
CN115391450B (en) * | 2022-08-26 | 2024-01-09 | 百度在线网络技术（北京）有限公司 | Inference information generation method, device, equipment, readable storage medium and product |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
AU2021259170B2 (en) | Supervised contrastive learning with multiple positive examples | |
US11386302B2 (en) | Systems and methods for contrastive learning of visual representations | |
US11354778B2 (en) | Systems and methods for contrastive learning of visual representations | |
Jalilian et al. | Iris segmentation using fully convolutional encoder–decoder networks | |
US20190303535A1 (en) | Interpretable bio-medical link prediction using deep neural representation | |
CN111008688B (en) | Neural network using in-loop data augmentation during network training | |
WO2021216310A1 (en) | Supervised contrastive learning with multiple positive examples | |
Graff et al. | SKYNET: an efficient and robust neural network training tool for machine learning in astronomy | |
US9342781B2 (en) | Signal processing systems | |
CN114556370A (en) | Method and system for training convolutional neural networks using built-in attention | |
Vishwakarma et al. | A novel non-linear modifier for adaptive illumination normalization for robust face recognition | |
US11775770B2 (en) | Adversarial bootstrapping for multi-turn dialogue model training | |
US20220172456A1 (en) | Noise Tolerant Ensemble RCNN for Semi-Supervised Object Detection | |
CN116261731A (en) | Relation learning method and system based on multi-hop attention-seeking neural network | |
Mittal et al. | Data augmentation based morphological classification of galaxies using deep convolutional neural network | |
CN116686017A (en) | Time bottleneck attention architecture for video action recognition | |
Tan et al. | Robust object recognition via weakly supervised metric and template learning | |
US11966707B2 (en) | Quantum enhanced word embedding for natural language processing | |
Passalis et al. | Deep supervised hashing using quadratic spherical mutual information for efficient image retrieval | |
Pomponi et al. | Bayesian neural networks with maximum mean discrepancy regularization | |
Sapienza et al. | Deep image prior for medical image denoising, a study about parameter initialization | |
Ma et al. | Denoised labels for financial time series data via self-supervised learning | |
US20230073754A1 (en) | Systems and methods for sequential recommendation | |
Dhillon et al. | Edge-preserving image denoising using noise-enhanced patch-based non-local means | |
Pal et al. | A deep learning model to detect foggy images for vision enhancement |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 21723497Country of ref document: EPKind code of ref document: A1 |
|
ENP | Entry into the national phase |
Ref document number: 2022564040Country of ref document: JPKind code of ref document: A |
|
ENP | Entry into the national phase |
Ref document number: 2021723497Country of ref document: EPEffective date: 20221020 |
|
ENP | Entry into the national phase |
Ref document number: 20227039608Country of ref document: KRKind code of ref document: A |
|
ENP | Entry into the national phase |
Ref document number: 2021259170Country of ref document: AUDate of ref document: 20210412Kind code of ref document: A |
|
NENP | Non-entry into the national phase |
Ref country code: DE |