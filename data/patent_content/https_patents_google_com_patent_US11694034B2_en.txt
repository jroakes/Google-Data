US11694034B2 - Systems and methods for machine-learned prediction of semantic similarity between documents - Google Patents
Systems and methods for machine-learned prediction of semantic similarity between documents Download PDFInfo
- Publication number
- US11694034B2 US11694034B2 US17/078,569 US202017078569A US11694034B2 US 11694034 B2 US11694034 B2 US 11694034B2 US 202017078569 A US202017078569 A US 202017078569A US 11694034 B2 US11694034 B2 US 11694034B2
- Authority
- US
- United States
- Prior art keywords
- textual
- document
- encoding
- block
- blocks
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
Definitions
- the present disclosure relates generally to predicting a semantic similarity between documents. More particularly, the present disclosure relates to training and utilization of a machine-learned semantic document encoding model.
- semantic matching can be formalized as a semantic matching task.
- semantic matching between long documents e.g., articles, books, websites, blogs, etc.
- semantic understanding of documents requires the modeling of long-distance dependencies between each textual unit (e.g., sentences), leading to computational costs that grow quadratically with the length of a document (e.g., attention computation in a transformer network, etc.).
- documents generally contain complex internal structures (e.g., passages, sentences, blurbs, captions, etc.), which conventional semantic analysis models fail to understand.
- a model that can perform efficient semantic matching between long documents represents a significant advancement in natural language processing.
- One example aspect of the present disclosure is directed to a computer-implemented method for predicting semantic similarity between documents.
- the method can include obtaining, by a computing system comprising one or more computing devices, a first document comprising a plurality of first sentences and a second document comprising a plurality of second sentences.
- the method can include parsing, by the computing system, the first document into a plurality of first textual blocks and the second document into a plurality of second textual blocks, wherein each of the plurality of first textual blocks comprises one or more of the plurality of first sentences and each of the plurality of second textual blocks comprises one or more of the plurality of second sentences.
- the method can include processing, by the computing system, each of the plurality of first textual blocks with a block encoding portion of a first encoding submodel of a machine-learned semantic document encoding model to obtain a respective plurality of first textual block representations.
- the method can include processing, by the computing system, each of the plurality of second textual blocks with a block encoding portion of a second encoding submodel of the machine-learned semantic document encoding model to obtain a respective plurality of second textual block representations.
- the method can include respectively processing, by the computing system, the plurality of first textual block representations and the plurality of second textual block representations with a document encoding portion of the first encoding submodel and a document encoding portion of the second encoding submodel to obtain a first document encoding and a second document encoding.
- the method can include determining, by the computing system, a similarity metric descriptive of a semantic similarity between the first document and the second document based on the first document encoding and the second document encoding.
- the computing system can include one or more processors.
- the computing system can include a machine-learned semantic document encoding model comprising a first encoding submodel and a second encoding submodel, each of the first and second encoding submodels comprising a sentence encoding portion and a document encoding portion.
- the sentence encoding portion can be configured to process a plurality of textual blocks to obtain a plurality of textual block representations.
- the document encoding portion can be configured to process the plurality of textual block representations to obtain a plurality of contextual block representations.
- the computing system can include one or more tangible, non-transitory computer readable media storing computer-readable instructions that when executed by the one or more processors cause the one or more processors to perform operations.
- the operations can include obtaining a plurality of first textual blocks and a plurality of second textual blocks, wherein each of the plurality of textual blocks and the plurality of second textual blocks respectively comprise one or more sentences of a first document and one or more sentences of a second document.
- the operations can include processing the plurality of first textual blocks and the plurality of second textual blocks with the machine-learned semantic document encoding model to respectively obtain a plurality of first contextual block representations and a plurality of second contextual block representations.
- the operations can include determining, based on at least one of the plurality of first contextual block representations and at least one of the plurality of second contextual block representations, a similarity metric descriptive of a semantic similarity between the first document and the second document.
- the operations can include evaluating a loss function that evaluates a difference between the similarity metric and ground truth data associated with the first document and the second document.
- the operations can include adjusting one or more parameters of the machine-learned semantic document encoding model based at least in part on the loss function.
- Another example aspect of the present disclosure is directed to one or more tangible, non-transitory computer readable media storing computer-readable instructions that when executed by one or more processors cause the one or more processors to perform operations.
- the operations can include obtaining a plurality of textual training blocks from one or more training documents, wherein each of the plurality of textual training blocks comprises one or more sentences from the one or more training documents.
- the operations can include processing each of the plurality of training blocks with a block encoding portion of a machine-learned semantic document encoding model to obtain a respective plurality of textual block representations.
- the operations can include masking one or more sentences of a textual block representation of the plurality of textual block representations to obtain a masked block representation.
- the operations can include adding the one or more masked sentences of each the masked block representation to a corpus of candidate sentences comprising a plurality of masked sentences from the one or more training documents.
- the operations can include processing the plurality of textual block representations with a document encoding portion of the machine-learned semantic document encoding model to respectively obtain a plurality of contextual block representations, wherein the contextual block representation for the masked block representation comprises a multi-class classification of the one or more masked sentences of the masked block representation as being one or more respective sentences of the corpus of candidate sentences.
- the operations can include evaluating a pre-training loss function that evaluates a difference between the multi-class classification for the masked block representation and ground truth data associated with the masked block representation and the corpus of candidate sentences.
- the operations can include adjusting one or more parameters of the machine-learned semantic document encoding model based at least in part on the pre-training loss function.
- FIG. 1 A depicts a block diagram of an example computing system that performs prediction of semantic similarity between documents according to example embodiments of the present disclosure.
- FIG. 1 B depicts a block diagram of an example computing device that performs prediction of semantic similarity between documents according to example embodiments of the present disclosure.
- FIG. 1 C depicts a block diagram of an example computing device that performs training of a machine-learned semantic document encoding model according to example embodiments of the present disclosure.
- FIG. 2 depicts a block diagram of an example machine-learned semantic document encoding model according to example embodiments of the present disclosure.
- FIG. 3 depicts a block diagram of an example submodel of a machine-learned semantic document encoding model according to example embodiments of the present disclosure.
- FIG. 4 A depicts a block diagram of an example dual-submodel machine-learned semantic document encoding model architecture according to example embodiments of the present disclosure.
- FIG. 4 B depicts a block diagram of an example encoding submodel of a machine-learned semantic document encoding model architecture according to example embodiments of the present disclosure.
- FIG. 5 depicts a data flow diagram for a method for pre-training a machine-learned semantic document encoding model.
- FIG. 6 depicts a flow chart diagram of an example method to perform prediction of semantic similarity between documents according to example embodiments of the present disclosure.
- the present disclosure is directed to predicting a semantic similarity between documents. More particularly, the present disclosure relates to training and utilization of a machine-learned semantic document encoding model to efficiently predict the semantic similarity between two documents.
- two documents can be obtained that each include a plurality of sentences (e.g., books, articles, etc.).
- the two documents can respectively be parsed into a plurality of first textual blocks and a plurality of second textual blocks (e.g., each block containing sentences(s) from a respective document, etc.).
- the machine-learned semantic document encoding model can process the first and second textual blocks to obtain a first document encoding and a second document encoding.
- a similarity metric can be determined that describes a semantic similarity between the first document and the second document.
- the semantic document encoding model can include a first encoding submodel and a second encoding submodel (e.g., two “towers” of a siamese transformer network, etc.).
- Both of the first and the second encoding submodels e.g., first and second transformer neural networks, etc.
- first textual block representations and the second textual block representations can be respectively processed with the document encoder portions of the first and second encoding submodels to obtain first contextual block representations and second contextual block representations.
- a first and second document encoding can be respectively determined from the first contextual block representations and the second contextual block representations.
- a similarity metric that describes a semantic similarity between the two documents can be determined based on the first and second document encodings.
- the machine-learned semantic document encoding model can localize the dependencies between textual segments (e.g., sentences) to those included in a textual block and/or among textual blocks, therefore significantly reducing the quadratic complexity associated with semantic analysis of documents (e.g., attention computation between textual segments, etc.).
- a first document and a second document can be obtained by a computing system (e.g., websites, articles, newspapers, blogs, books, etc.).
- the first document can contain a plurality of first sentences and the second document can include a plurality of second sentences.
- the first document can be parsed into a plurality of first textual blocks, and the second document can be parsed into a plurality of second textual blocks.
- Each of the first and second textual blocks can include one or more sentences from the first and second documents.
- the first document can be a document that includes a plurality of first sentences, and each of the plurality of first textual blocks can include a distinct subset of the plurality of first sentences.
- Both the first and second documents can be parsed to fill the pluralities of first and second blocks in a greedy fashion. More particularly, the documents can be split into multiple textual blocks of predefined length so that each textual block can contain one or more natural sentences.
- each of the plurality of first textual blocks can include a textual capacity (e.g., a number of textual units that can be parsed into the block, etc.).
- a first textual block of the plurality of first textual blocks can be filled with as many sentences as possible until the first textual block reaches the predefined maximum textual capacity (e.g., a maximum block length, etc.).
- a first textual block can have a textual capacity, and an individual sentence can be longer than the maximum textual capacity (e.g., block length, etc.).
- the individual sentence can be truncated to fit in the current first textual block. In such fashion, parsing the first document to each of the plurality of first textual blocks in a greedy fashion can greatly reduce the number of padded tokens required given a fixed maximum textual capacity.
- Each of the plurality of first textual blocks can be processed with the machine-learned semantic document encoding model.
- the machine-learned semantic document encoding model can include a first encoding submodel and a second encoding submodel. Both the first encoding submodel and the second encoding submodel can include a block encoding portion and a document encoding portion.
- the machine-learned semantic document encoding model can be or otherwise include a siamese neural network architecture, where each of the first and second encoding submodels can be a transformer-based hierarchical encoder.
- Each of the transformer-based hierarchical encoders can be configured to learn a block level (e.g., sentence level) and document level representation of the documents.
- a block level e.g., sentence level
- the parameters of the first encoding submodel can be a set of parameters shared with the second encoding submodel.
- the first and second encoding submodels can each include a block encoding portion and a document encoding portion.
- the block and document encoding portions can process documents (e.g., the first and second documents) in a hierarchical fashion.
- the block encoding portion of the first encoding submodel can first process each of the sentences of the plurality of first textual blocks.
- the document encoding portion can process the output of the block encoding portion to obtain a final document representation.
- each of the first textual blocks can be processed using the block encoding portion of the first encoding submodel to obtain a respective plurality of first textual block representations.
- each of the second textual blocks can be processed using the block encoding portion of the second encoding submodel to obtain a respective plurality of second textual block representations.
- the first and second encoding submodels of the machine-learned semantic document encoding model can first process each plurality of textual blocks with a respective block encoding portion. For example, let denote an input document (e.g., the first document, the second document, etc.). With greedy sentence filling, the document can be parsed into a sequence of textual sentence blocks ⁇ S 1 , S 2 , .
- each sentence S i can be learned with the encoding submodel (e.g., a transformer encoder, etc.).
- the encoding submodel can be or otherwise include a transformer encoder that includes multi-head self-attention and a position-wise fully connected feed-forward network with residual connections.
- each of the plurality of first textual blocks can be processed with the block encoding portion of the first encoding submodel to obtain sentence tokens.
- the sentence tokens can respectively correspond to words in each of the one or more first sentences of a first textual block.
- a first sentence token from the sentence tokens can be concatenated with a position embedding that corresponds to the first sentence token to obtain a first textual block representation for the respective first textual block.
- the token embedding can be initialized randomly (e.g., during a pre-training phase, etc.).
- the block encoding portion of the encoding submodel (e.g., a sentence level transformer, etc.) can transform E(S i ) into a sequence of contextualized representations for words in the textual block ⁇ T 1 i , T 2 i , . . . , T L s i ⁇ .
- the contextual representation of the first token, alongside the added [CLS] token can be utilized as the learned representation of the whole sentence block.
- the final sentence block representation also adds the sentence block position embedding to model the sentence block location in the document.
- the computing system can process each of the first and second textual blocks with the block encoding portions to obtain a plurality of first textual block representations and a plurality of second textual block representations.
- both can be respectively processed by the machine-learned semantic document encoding model. More particularly, the document encoding portion of the first encoding submodel can be used to process the plurality of first textual block representations to obtain a first document encoding. Similarly, the document encoding portion of the second encoding submodel can be used to process the plurality of second textual block representations to obtain a second document encoding.
- the document encoding portions can generate a sequence of contextual block representations ⁇ S 1 , S 2 , . . . , S L d ⁇ .
- each of the plurality of first textual block representations can be processed using the document encoding portion of the first encoding submodel to obtain a respective plurality of first contextual block representations.
- each of the plurality of second textual block representations can be processed using the document encoding portion of the second encoding submodel to obtain a respective plurality of second contextual block representations.
- the first document encoding can be determined based at least in part on the plurality of contextual block representations.
- the first document encoding can be determined by selecting a first contextual block representation of the plurality of first contextual block representations as the representation for the whole document.
- each of the plurality of first textual block representations can be processed using the document encoding portion of the first encoding submodel to obtain a respective plurality of first contextual block representations.
- the first contextual block representation of the plurality of contextual block representations can be selected to represent the entire document.
- a dense layer can be utilized to transform the first contextual block representation with L2 normalization.
- the attentional weights of the sentence tokens of each of the first textual blocks can be utilized to determine a weighted sum of the plurality of first textual block representations.
- W ⁇ H ⁇ V can be a projection matrix and v ⁇ V can represent the attention model parameter.
- This weighted sum can be concatenated with the document level representation to determine the first document encoding.
- the document level representation as described previously, can be the contextual block representation associated with at least one first textual block of the plurality of first textual blocks.
- determining the first document encoding can include concatenating a sum of the plurality of first textual block representations with a contextual block representation.
- the contextual block representation can be the representation associated with at least one textual block of the plurality of first textual blocks. The concatenation of the sum and the at least one textual block can determine the first document encoding.
- determining the first document encoding can include concatenating a mean of the plurality of first textual block representations with a contextual block representation.
- the contextual block representation can be the representation associated with at least one textual block of the plurality of first textual blocks. The concatenation of the sum and the at least one textual block can determine the first document encoding.
- determining the first document encoding can include determining the contextual block representation associated with at least one first textual block of the plurality of first textual blocks. More particularly, the contextual block representation associated with the at least one textual block can be selected as the first document encoding.
- a conventional transformer model can include an attention mechanism used for the transformer model that can be the scaled dot-product attention, which can perform transformation from a query and a set of key-value pairs to an output.
- the output representation can be defined as a weighted sum of the values, where the weight to each value is computed as the interaction score between the query and the corresponding key normalized by the softmax function.
- b is the batch size and H can represent the hidden size.
- the attention computation of the previous equation can be used as an illustrative example.
- T can have the shape [b, N, N], where N is the maximum input sequence length.
- a and L can denote the number of attention heads and layers in the machine-learned semantic document encoding model
- the memory complexity of the attention computation in the machine-learned semantic document encoding model can be calculated as O(b ⁇ A ⁇ N 2 ⁇ L).
- the machine-learned semantic document encoding model e.g., a two level hierarchical Transformer model, etc.
- L s denote the max sentence block length by tokens.
- a document can be split into
- N L s sentence blocks.
- the memory complexity of the attention computation of block/document level encoding portions e.g., Transformer network(s), etc.
- the memory complexity of the attention computation of block/document level encoding portions can be defined as:
- a similarity metric can be determined based at least in part on the first document encoding and the second document encoding (e.g., a comparison between the document encodings, etc.).
- a cosine similarity can be determined between the pooled sequence outputs corresponding to the two documents cos(E(d s ),E(d c )) (e.g., the first document encoding and the second document encoding). It should be noted that although a cosine similarity can be used to determine a similarity metric between the first document encoding and the second document encoding, any conventional function can be utilized to determine a similarity between the first and second document encodings.
- one or more final layer(s) of the machine-learned semantic document encoding model can process the first document encoding and the second document encoding to determine a similarity metric that describes the semantic similarity between the first document and the second document.
- the similarity metric can be or otherwise include a binary prediction as to whether the first document and second document are semantically similar.
- the similarity metric can be or otherwise include a predicted level of semantic similarity between the two documents (e.g., a percentage metric, etc.).
- the computing system can index the first document encoding as a representation of the first document for a search system. More particularly, the computing system can utilize the first document encoding as a latent embedding within a search system to facilitate search operations for the first document. Similarly, the computing system can index the second document encoding as a representation of the second document for the search system.
- a loss function can be evaluated that evaluates a difference between the similarity metric and a ground truth label associated with the first document and the second document.
- the loss function can evaluate a binary cross-entropy loss between the semantic similarity metric and the ground truth matching label.
- one or more parameters of the machine-learned semantic document encoding model can be adjusted based at least in part on the loss function.
- the loss function can be backpropagated through the machine-learned semantic document encoding model to determine values associated with one or more parameters of the model to be updated.
- the one or more parameters can be updated to reduce the difference evaluated by the loss function (e.g., using an optimization procedure, such as a gradient descent algorithm).
- the ground truth label associated with the documents can be derived based on various characteristics of the documents.
- the ground truth label may evaluate commonalities between the various documents (e.g., citations, hyperlinks, click data, historical browsing data, etc.).
- the machine-learned semantic document encoding model can be trained prior to processing of textual blocks (e.g., “pre-trained”). More particularly, a plurality of textual training blocks can be obtained from one or more training documents. Each of the plurality of textual training blocks can include one or more sentences from the one or more training documents. As an example, sentences of the textual training documents can be parsed to the plurality of textual training blocks in the same or a substantially similar manner as the first and second documents were parsed to the first and second training blocks.
- one or more sentences of a textual training block can be masked to obtain a masked training block.
- the plurality of textual training blocks can be processed with a block encoding portion of an encoding submodel (e.g., the first encoding submodel, the second encoding submodel, etc.) of the machine-learned semantic document encoding model to obtain a respective plurality of textual block representations.
- One or more sentences of a textual block representation can be masked to obtain a masked block representation.
- masking one or more sentences of the masked block representation can include masking one word of each of the one or more sentences (e.g., replacing the word with a masking token, etc.).
- each sentence of the masked block representation can be replaced with a respective masking token.
- the masked block representation can include a plurality of sentences that are each fully masked, or may include a plurality of sentences where one word of one sentence is masked. It should be noted that the level of sentence masking can be adjusted over a number of training iterations.
- D ⁇ h 1 , h 2 , . . . h L d ⁇ denote a sequence of textual block representations obtained from processing a respective sequence of textual training blocks using the block encoding portion of an encoding submodel of the machine-learned semantic document encoding model (e.g., a sentence level transformer, etc.).
- This dynamic sampling process can be repeated for every document in a batch in each step, so that the same document may get different masked sentence block positions in different steps.
- This dynamic masking strategy can enable the model to predict a larger range of sentence blocks in a document compared with the opposite static masking.
- the one or more masked sentences of the masked block representation can be added to a corpus of candidate sentences.
- the corpus of candidate sentences can include a plurality of masked sentences from the one or more training documents.
- sentences from each of the one or more training documents can be masked over a number of training iterations.
- the corpus of candidate sentences can include every masked sentence from each of the one or more training documents, and can also include the one or more masked sentences of the masked block representation. In such fashion, the corpus of candidate sentences can facilitate classification of the masked sentences as a multi-class classification problem.
- the plurality of textual block representations can be processed with a document encoding portion of an encoding submodel (e.g., a first encoding submodel, second encoding submodel, etc.) of the machine-learned semantic document encoding model to obtain a respective plurality of contextual block representations.
- the contextual block representation for the masked training block can include a multi-class classification output that includes a predicted similarity between the masked training block and each of a plurality of additional masked training blocks from the training batch. Processing and obtaining the multi-class classification output will be discussed in greater detail with regards to FIG. 4 .
- a multi-class sentence block classification setting can be considered.
- all masked sentences of all masked sentence blocks can be collected in a batch as a corpus of candidate sentences from which the machine-learned semantic document encoding model can try to predict the correct sentence block.
- the original sentence block in the current position can be utilized as a positive example, and the other co-masked sentence blocks in the current document and in the other documents of the same batch can be utilized as the negative examples.
- the document encoding portion of an encoding submodel of the machine-learned semantic document encoding model can process the masked document ⁇ circumflex over (D) ⁇ to get a sequence of contextual sentence block representations ⁇ 1 , ⁇ 2 , . . . , ⁇ L d ⁇ . ⁇ k can be used to predict the original sentence block representation h k .
- a pre-training loss function can be evaluated that evaluates a difference between the multi-class classification for the masked block representation and ground truth data associated with the masked block representation and the corpus of candidate sentences. More particularly, the cross-entropy loss can be computed over all masked sentence blocks and the pre-training loss function:
- L pretrain L sp + L wp where sp and wp denote the masked sentence block prediction loss and the masked word prediction loss respectively.
- one or more parameters of the machine-learned semantic document encoding model can be adjusted based at least in part on the pre-training loss function.
- the similarity metric can be utilized for additional downstream tasks (e.g., machine learning tasks, etc.).
- the similarity metric can be utilized to cluster at least one of the first and second documents (e.g., k-means clustering, hierarchical clustering, etc.).
- the similarity metric can be utilized to classify at least one of the first document and the second documents.
- the similarity metric itself can serve as an input to an additional machine-learned model. In such fashion, the similarity metric can be utilized for a variety of tasks ranging from indexing, classification, and clustering of documents.
- the systems and methods of the present disclosure provide a computationally efficient method to predict the semantic similarity between two documents.
- prediction of semantic similarity between documents benefits a large family of applications, including but not limited to ad-hoc retrieval, question answering and recommender systems.
- conventional machine-learning models for semantic prediction are generally limited to short portions of text content (e.g., one or two sentences, etc.) due to the prohibitive computational expenses associated with the quadratic computational complexity of these conventional models.
- the systems and methods of the present disclosure provide a computationally efficient method to predict semantic similarity between entire documents (e.g., potentially thousands of sentences, etc.), therefore significantly reducing the computational resources required to perform semantic matching between documents.
- the present disclosure can be utilized to predict semantic similarity between long documents, and can further result in savings of resources such as memory usage, network bandwidth usage, etc.
- FIG. 1 A depicts a block diagram of an example computing system 100 that performs prediction of semantic similarity between documents according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more machine-learned semantic document encoding models 120 .
- the machine-learned semantic document encoding models 120 can be or can otherwise include various machine-learned models such as transformer models, neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Example machine-learned semantic document encoding models 120 are discussed with reference to FIGS. 1 - 4 .
- the one or more machine-learned semantic document encoding models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- the user computing device 102 can implement multiple parallel instances of a single machine-learned semantic document encoding model 120 (e.g., to perform parallel semantic document encoding across multiple instances of the machine-learned semantic document encoding model).
- the machine-learned semantic document encoding model 120 can be utilized to predict a semantic similarity between two documents.
- two documents can be obtained that each include a plurality of sentences (e.g., via network(s) 180 , etc.).
- the two documents can respectively be parsed into a plurality of first textual blocks and a plurality of second textual blocks (e.g., each block containing sentences(s) from a respective document, etc.).
- the machine-learned semantic document encoding model 120 can include a first encoding submodel and a second encoding submodel (e.g., two “towers” of a siamese transformer network, etc.).
- Both of the first and the second encoding submodels can include a block encoder portion and a document encoder portion that are configured to process textual blocks in a hierarchical fashion.
- the machine-learned semantic document encoding model 120 can obtain the first and second textual blocks, and the first textual blocks and the second textual blocks can be respectively processed using the block encoder portions of the first and second encoding submodels to obtain first textual block representations and second textual block representations.
- the first textual block representations and the second textual block representations can be respectively processed with the document encoder portions of the first and second encoding submodels to obtain first contextual block representations and second contextual block representations.
- a first and second document encoding can be respectively determined from the first contextual block representations and the second contextual block representations, and a similarity metric can be determined based on the first and second document encodings.
- the machine-learned semantic document encoding model 120 can localize the dependencies between textual segments (e.g., sentences) to those included in a textual block and/or among textual blocks, therefore significantly reducing the quadratic complexity associated with semantic analysis of documents (e.g., attention computation between textual segments, etc.).
- one or more machine-learned semantic document encoding models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the machine-learned semantic document encoding models 140 can be implemented by the server computing system 130 as a portion of a web service (e.g., a document-level semantic similarity prediction service).
- a web service e.g., a document-level semantic similarity prediction service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130 .
- the user computing device 102 can also include one or more user input component 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more machine-learned semantic document encoding models 140 .
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Example models 140 are discussed with reference to FIGS. 2 - 4 .
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 152 and a memory 154 .
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned semantic document encoding models 120 and/or 140 based on a set of training data 162 . More particularly, the model trainer 160 can also “pre-train” the machine-learned semantic document encoding models 120 and/or 140 using the training data 162 .
- the training data 162 can include a plurality of training documents that each include a plurality of sentences.
- the training examples can be provided by the user computing device 102 .
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- FIG. 1 A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162 .
- the models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- FIG. 1 B depicts a block diagram of an example computing device 10 that performs prediction of semantic similarity between documents according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 1 C depicts a block diagram of an example computing device 50 that performs training of a machine-learned semantic document encoding model according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 1 C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50 . As illustrated in FIG. 1 C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- FIG. 2 depicts a block diagram of an example machine-learned semantic document encoding model 200 according to example embodiments of the present disclosure.
- the machine-learned semantic document encoding model 200 is trained to receive a set of input data 204 descriptive of a document and, as a result of receipt of the input data 204 , provide output data 206 descriptive of a document encoding corresponding to the document.
- the machine-learned semantic document encoding model 200 can include a first document encoding submodel and a second document encoding submodel.
- the machine-learned semantic document encoding model 200 can include a document encoding submodel 202 that is operable to process the input data 204 (e.g., a document, etc.) to obtain output data 206 including a document encoding that is representative of the document included in the input data 204 .
- the input data 204 e.g., a document, etc.
- FIG. 3 depicts a block diagram of an example submodel of a machine-learned semantic document encoding model 300 according to example embodiments of the present disclosure.
- the machine-learned semantic document encoding model 300 is similar to machine-learned semantic document encoding model 200 of FIG. 2 except that machine-learned semantic document encoding model 300 further includes the block encoding portion 302 and the document encoding portion 304 of the encoding submodel 202 .
- the input data 204 can be descriptive of a plurality of textual blocks.
- Each of the textual blocks can be processed using the block encoding portion 302 of the encoding submodel 202 to obtain a respective plurality of first textual block representations 303 .
- the respective plurality of first textual block representations 303 can be processed with the document encoding portion 304 of the first encoding submodel 202 to obtain a document encoding 206 .
- FIG. 4 A depicts a block diagram of an example dual-submodel machine-learned semantic document encoding model architecture according to example embodiments of the present disclosure.
- the machine-learned semantic document encoding model 400 is similar to machine-learned semantic document encoding model 300 of FIG. 3 except that machine-learned semantic document encoding model 400 further includes a first encoding submodel 402 A and a second encoding submodel 402 B, which respectively include a block encoding portion 404 A/ 404 B and a document encoding portion 406 A/ 406 B.
- the input data 403 A can include a first document and the input data 403 B can include a second document.
- the first document 403 A can contain a plurality of first sentences and the second document 403 B can include a plurality of second sentences.
- the first document 403 A can be parsed into a plurality of first textual blocks, and the second document 403 B can be parsed into a plurality of second textual blocks.
- Each of the first and second textual blocks can include one or more sentences from the first and second documents.
- the first document 403 A can be a document that includes a plurality of first sentences, and each of the plurality of first textual blocks can include a distinct subset of the plurality of first sentences.
- Each of the plurality of first textual blocks from the first document 403 A can be processed with the machine-learned semantic document encoding model 400 .
- the machine-learned semantic document encoding model 400 can include a first encoding submodel 402 A and a second encoding submodel 402 B. Both the first encoding submodel 402 A and the second encoding submodel 402 B can respectively include a block encoding portion 404 A/ 404 B and a document encoding portion 406 A/ 406 B.
- the machine-learned semantic document encoding model 400 can be or otherwise include a siamese neural network architecture, where each of the first and second encoding submodels 402 A/ 402 B can be a transformer-based hierarchical encoder.
- Each of the transformer-based hierarchical encoders e.g., the first and second encoding submodels 402 A/ 402 B
- the first encoding submodel 402 A and the second encoding submodel 402 B can respectively process the first document 403 A and the second documents 403 B (e.g., their associated pluralities of textual blocks, etc.) in a hierarchical fashion.
- the block encoding portion 404 A of the first encoding submodel 402 A can first process each of the sentences of the plurality of first textual blocks from the first document 403 A.
- the document encoding portion 406 A can process the output of the block encoding portion 404 A to obtain a final document representation 408 A.
- the block encoding portion 404 B of the second encoding submodel 402 B can process each of the sentences of the plurality of second textual blocks from the second document 403 B.
- the document encoding portion 406 B of the second document encoding submodel 402 B can process the output of the block encoding portion 404 B to obtain a final document representation 408 B.
- each of the first textual blocks of first document 403 A can be processed using the block encoding portion 404 A of the first encoding submodel 402 A to obtain a respective plurality of first textual block representations 405 A.
- each of the second textual blocks of the second document 403 B can be processed using the block encoding portion 404 B of the second encoding submodel 402 B to obtain a respective plurality of second textual block representations 405 B.
- both can be respectively processed by the machine-learned semantic document encoding model 400 .
- the document encoding portion 406 A of the first encoding submodel 402 A can be used to process the plurality of first textual block representations 405 A to obtain a first document encoding 408 A.
- the document encoding portion 406 B of the second encoding submodel 402 B can be used to process the plurality of second textual block representations 405 B to obtain a second document encoding 408 B.
- the semantic similarity determinator 410 can be used to determine a semantic similarity metric 412 descriptive of a semantic similarity between the first document 403 A and the second document 403 B.
- the semantic similarity metric 412 can be based on the first document encoding 408 A and the second document encoding 408 B.
- a cosine similarity can be determined by the semantic similarity determinator 410 between the pooled sequence output corresponding to the two documents encodings cos(E(d s ),E(d c )) (e.g., the first document encoding 408 A and the second document encoding 408 B).
- any conventional function can be utilized to determine a similarity between the first and second document encodings 408 A/ 408 B.
- FIG. 4 B depicts a block diagram of an example encoding submodel 400 B of a machine-learned semantic document encoding model architecture according to example embodiments of the present disclosure.
- the encoding submodel 400 B can include a block encoding portion 454 and a document encoding portion 462 . More particularly, a document can be parsed into a plurality of textual blocks 452 . Further, the position of each textual block within the document can be represented by a position embedding 450 .
- the block encoding portion 454 of the encoding submodel e.g., a sentence level transformer, etc.
- the block encoding portion 454 can process the textual blocks 452 and the position embeddings 450 to obtain a sentence token representation for each sentence of the textual blocks 452 . At least one of these sentence token representations can be processed using one or more dense layer(s) 458 to obtain textual block representations 460 for each of the textual blocks 452 . As an example, for a first sentence of a first textual block 452 , the sentence token 456 corresponding to the first sentence can be processed using the dense layer(s) 458 (e.g., according to an L2 normalization function, etc.) to obtain a textual block representation 460 for the textual block 452 of the sentence.
- the dense layer(s) 458 e.g., according to an L2 normalization function, etc.
- the textual block representation can be or otherwise include a combination of the sentence token 456 and position embedding 450 corresponding to the sentence.
- Each of the textual block representations 460 can be processed using the document encoding portion 462 to respectively obtain contextual block representations 464 .
- FIG. 5 depicts a data flow diagram for a method 500 for pre-training a machine-learned semantic document encoding model.
- One or more training document(s) 502 of a training batch can be obtained.
- a plurality of textual training blocks 504 A- 504 D can be obtained from the one or more training documents 502 .
- Each of the plurality of textual training blocks 504 A- 504 D can include one or more sentences from the one or more training documents 502 .
- block 504 A can include sentences S 1 -S 3 from the training document(s) 502
- block 504 B can include sentences S 4 -S 6 from the training document(s) 502
- block 504 C can include sentences S 7 -S 9 from the training document(s) 502
- block 504 D can include sentences S 10 -S 12 from the training document(s) 502 .
- the plurality of textual training blocks 504 A- 504 D can be processed with a block encoding portion of an encoding submodel 506 (e.g., the first encoding submodel, the second encoding submodel, etc.) of the machine-learned semantic document encoding model to obtain a respective plurality of textual block representations 508 A- 508 D.
- Each of the plurality of textual block representations 508 A- 508 D can include the sentences of the textual blocks 504 A- 504 D.
- textual block representation 508 A of textual block 504 A can include sentences S 1 , S 2 , and S 3 (e.g., or an encoded representation of the sentences, etc.).
- Sentence(s) of one or more of the textual block representations 504 A- 504 D can be masked during sentence level masking 510 to obtain a masked block representation (e.g., masked block representation 512 .
- a masked block representation e.g., masked block representation 512 .
- a mask can be applied to sentence S 1 of textual block representation 508 A (e.g., replacing the word with a masking token, etc.) during sentence-level masking 510 to obtain a masked block representation 512 of the textual block representation 508 A.
- the masked sentence S 1 of the masked block representation 512 can be added to a corpus of candidate sentences 514 .
- the corpus of candidate sentences can include a plurality of masked sentences from the one or more training documents 502 .
- sentences from each of the one or more training documents 502 can be masked over a number of training iterations (e.g., S 17 , S 85 , S 27 , S 14 , S 92 , etc.).
- the corpus of candidate sentences 514 can include every masked sentence from each of the one or more training documents 502 (e.g., S 17 , S 85 , S 27 , S 14 , S 92 , etc.), and can also include the masked sentence of the masked block representation 512 (e.g., S 1 ). In such fashion, the corpus of candidate sentences 514 can facilitate classification of the masked sentences as a multi-class classification problem.
- the masked block representation 512 and the plurality of textual block representations 508 B- 508 D can be processed with a document encoding portion of an encoding submodel 516 (e.g., a first encoding submodel, second encoding submodel, etc.) of a machine-learned semantic document encoding model to obtain a respective plurality of contextual block representations 520 B- 520 D.
- the output associated with processing the masked block representation 512 can be or otherwise include a multi-class classification output 518 that includes a predicted similarity between the masked sentence of the masked training block 512 and each of the masked sentences of the corpus of candidate sentences 514 .
- the multi-class classification 518 can describe a predicted classification of the masked sentence of masked block representation 512 as each of the sentences included in the corpus of candidate sentences 514 .
- a difference between the multi-class classification 518 and a ground truth label associated with the corpus of candidate sentences 514 can be evaluated by loss function 522 .
- parameter adjustment(s) 524 can be determined and applied to the machine-learned semantic document encoding model (e.g., block encoding portion 506 , document encoding portion 516 , etc.).
- FIG. 6 depicts a flow chart diagram of an example method 600 to perform prediction of semantic similarity between documents according to example embodiments of the present disclosure.
- FIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain a first document and a second document. More particularly, the computing system can obtain a first document comprising a plurality of first sentences and a second document comprising a plurality of second sentences.
- the computing system can parse the first document into a plurality of first textual blocks and the second document into a plurality of second textual blocks. More particularly, the computing system can parse the first document into a plurality of first textual blocks and the second document into a plurality of second textual blocks, wherein each of the plurality of first textual blocks comprises one or more of the plurality of first sentences and each of the plurality of second textual blocks comprises one or more of the plurality of second sentences.
- the computing system can process the first textual blocks with a block encoding portion of a first encoding submodel of a machine-learned semantic document encoding model to obtain first textual block representations. More particularly, the computing system can process each of the plurality of first textual blocks with a block encoding portion of a first encoding submodel of a machine-learned semantic document encoding model to obtain a respective plurality of first textual block representations.
- the computing system can process the second textual blocks with a block encoding portion of a second encoding submodel of the machine-learned semantic document encoding model to obtain second textual block representations. More particularly, the computing system can process each of the plurality of second textual blocks with a block encoding portion of a second encoding submodel of the machine-learned semantic document encoding model to obtain a respective plurality of second textual block representations.
- the computing system can process the textual block representations with document encoding portions of the encoding submodels to obtain a first and second document encodings. More particularly, the computing system can respectively process, by the computing system, the plurality of first textual block representations and the plurality of second textual block representations with a document encoding portion of the first encoding submodel and a document encoding portion of the second encoding submodel to obtain a first document encoding and a second document encoding.
- the computing system can determine a similarity metric for the documents. More particularly, the computing system can determine a similarity metric descriptive of a semantic similarity between the first document and the second document based on the first document encoding and the second document encoding.
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
Description
E(S i)=(e 1 i ,e 2 i , . . . ,e L
where ej i=t(Wj i)+p(Wj i) is the sum of the token embedding and position embedding of word Wj i. The token embedding can be initialized randomly (e.g., during a pre-training phase, etc.). The block encoding portion of the encoding submodel (e.g., a sentence level transformer, etc.) can transform E(Si) into a sequence of contextualized representations for words in the textual block {T1 i, T2 i, . . . , TL
where
sentence blocks. The memory complexity of the attention computation of block/document level encoding portions (e.g., Transformer network(s), etc.) can be defined as:
Where it can be assumed that the number of attention heads and the number of layers are the same for the block encoding portion and the document encoding portions of an encoding submodel for simplicity. As such, the memory complexity of the processing performed by the encoding submodel of the machine-learned semantic document encoding model (e.g., a two level hierarchical Transformer, etc.) can be represented as
Compared to the O(b·A·N2·L) complexity inherent to conventional transformers, usage of the machine-learned semantic document encoding model of the present disclosure therefore reduces memory and/or computational complexity by a factor of Ls 2 with only performing local self-attention over tokens in the same sentence block.
Sim(Ŝ,h)=Ŝh T
where Sim(Ŝ,h)∈
where
Claims (19)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/078,569 US11694034B2 (en) | 2020-10-23 | 2020-10-23 | Systems and methods for machine-learned prediction of semantic similarity between documents |
US18/321,424 US20230297783A1 (en) | 2020-10-23 | 2023-05-22 | Systems and Methods for Machine-Learned Prediction of Semantic Similarity Between Documents |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/078,569 US11694034B2 (en) | 2020-10-23 | 2020-10-23 | Systems and methods for machine-learned prediction of semantic similarity between documents |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/321,424 Continuation US20230297783A1 (en) | 2020-10-23 | 2023-05-22 | Systems and Methods for Machine-Learned Prediction of Semantic Similarity Between Documents |
Publications (2)
Publication Number | Publication Date |
---|---|
US20220129638A1 US20220129638A1 (en) | 2022-04-28 |
US11694034B2 true US11694034B2 (en) | 2023-07-04 |
Family
ID=81257406
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/078,569 Active 2041-06-17 US11694034B2 (en) | 2020-10-23 | 2020-10-23 | Systems and methods for machine-learned prediction of semantic similarity between documents |
US18/321,424 Pending US20230297783A1 (en) | 2020-10-23 | 2023-05-22 | Systems and Methods for Machine-Learned Prediction of Semantic Similarity Between Documents |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/321,424 Pending US20230297783A1 (en) | 2020-10-23 | 2023-05-22 | Systems and Methods for Machine-Learned Prediction of Semantic Similarity Between Documents |
Country Status (1)
Country | Link |
---|---|
US (2) | US11694034B2 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11386357B1 (en) * | 2020-03-12 | 2022-07-12 | Digital.Ai Software, Inc. | System and method of training machine learning models to generate intuitive probabilities |
US20230245146A1 (en) * | 2022-01-28 | 2023-08-03 | Walmart Apollo, Llc | Methods and apparatus for automatic item demand and substitution prediction using machine learning processes |
CN115618843B (en) * | 2022-12-19 | 2023-04-28 | 成方金融科技有限公司 | Text detection method and device, electronic equipment and storage medium |
CN116150380B (en) * | 2023-04-18 | 2023-06-27 | 之江实验室 | Text matching method, device, storage medium and equipment |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11146613B2 (en) * | 2016-07-29 | 2021-10-12 | International Business Machines Corporation | Distributed computing on document formats |
-
2020
- 2020-10-23 US US17/078,569 patent/US11694034B2/en active Active
-
2023
- 2023-05-22 US US18/321,424 patent/US20230297783A1/en active Pending
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11146613B2 (en) * | 2016-07-29 | 2021-10-12 | International Business Machines Corporation | Distributed computing on document formats |
Non-Patent Citations (6)
Title |
---|
Huang, Jui-Ting, Ashish Sharma, Shuying Sun, Li Xia, David Zhang, Philip Pronin, Janani Padmanabhan, Giuseppe Ottaviano, and Linjun Yang, Aug. 2020, "Embedding-based Retrieval in Facebook Search", Proceedings of the 26th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, pp. 2553-2561. (Year: 2020). * |
Jiang, Jyun-Yu, Mingyang Zhang, Cheng Li, Michael Bendersky, Nadav Golbandi, and Marc Najork, "Semantic Text Matching for Long-Form Documents", May 2019, Proceedings of the 2019 World Wide Web Conference (WWW'19), pp. 795-806. (Year: 2019). * |
Lu, Wenhao, Jian Jiao, and Ruofei Zhang, "TwinBERT: Distilling Knowledge to Twin-Structured BERT Models for Efficient Retrieval", Feb. 2020, ArXiv abs/2002.06275, pp. 1-8. (Year: 2020). * |
Peters, Matthew E., Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer, "Deep Contextualized Word Representations", 2018, Proceedings of NAACL-HLT 2018, pp. 2227-2237. (Year: 2018). * |
Yang, Liu, Mingyang Zhang, Cheng Li, Michael Bendersky, and Marc Najork, "Beyond 512 Tokens: Siamese Multi-depth Transformer-based Hierarchical Encoder for Long-Form Document Matching", 2020, Proceedings of the 29th ACM International Conference on Information & Knowledge Management, pp. 1725-1734. (Year: 2020). * |
Zhang, Xingxing, Furu Wei, and M. Zhou, "HIBERT: Document Level Pre-training of Hierarchical Bidirectional Transformers for Document Summarization", 2019, Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pp. 5059-5069. (Year: 2019). * |
Also Published As
Publication number | Publication date |
---|---|
US20220129638A1 (en) | 2022-04-28 |
US20230297783A1 (en) | 2023-09-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11816442B2 (en) | Multi-turn dialogue response generation with autoregressive transformer models | |
CN111368996B (en) | Retraining projection network capable of transmitting natural language representation | |
WO2021027533A1 (en) | Text semantic recognition method and apparatus, computer device, and storage medium | |
US11694034B2 (en) | Systems and methods for machine-learned prediction of semantic similarity between documents | |
US11468239B2 (en) | Joint intent and entity recognition using transformer models | |
US20220050967A1 (en) | Extracting definitions from documents utilizing definition-labeling-dependent machine learning background | |
US20170162189A1 (en) | Semi-supervised learning of word embeddings | |
US11755909B2 (en) | Method of and system for training machine learning algorithm to generate text summary | |
US11074412B1 (en) | Machine learning classification system | |
US20240013059A1 (en) | Extreme Language Model Compression with Optimal Sub-Words and Shared Projections | |
US20210133279A1 (en) | Utilizing a neural network to generate label distributions for text emphasis selection | |
US20230169271A1 (en) | System and methods for neural topic modeling using topic attention networks | |
Ouyang et al. | Chinese named entity recognition based on B-LSTM neural network with additional features | |
Vo | Se4exsum: An integrated semantic-aware neural approach with graph convolutional network for extractive text summarization | |
Pattanayak et al. | Natural language processing using recurrent neural networks | |
Jyothi et al. | Abstractive text summarization on templatized data | |
Zhang et al. | Ias-bert: An information gain association vector semi-supervised bert model for sentiment analysis | |
US20240078431A1 (en) | Prompt-based sequential learning | |
US20230325776A1 (en) | Generating user-based training data for machine learning | |
Kamath et al. | Attention and Memory Augmented Networks | |
Wang et al. | Implementation of Text Classification Model Based on Recurrent Neural Networks | |
Anantha Padmanabhan et al. | Siamese Q&A: Distinguishing Unanswerable Questions Using Deep Learning | |
Ye et al. | Fact Discovery for Text Data | |
WO2021234610A1 (en) | Method of and system for training machine learning algorithm to generate text summary | |
CA3081222A1 (en) | Method of and system for training machine learning algorithm to generate text summary |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:YANG, LIU;NAJORK, MARC;BENDERSKY, MICHAEL;AND OTHERS;REEL/FRAME:055390/0502Effective date: 20210223 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |