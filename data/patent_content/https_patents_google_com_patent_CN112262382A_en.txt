CN112262382A - Annotation and retrieval of contextual deep bookmarks - Google Patents
Annotation and retrieval of contextual deep bookmarks Download PDFInfo
- Publication number
- CN112262382A CN112262382A CN201980038858.8A CN201980038858A CN112262382A CN 112262382 A CN112262382 A CN 112262382A CN 201980038858 A CN201980038858 A CN 201980038858A CN 112262382 A CN112262382 A CN 112262382A
- Authority
- CN
- China
- Prior art keywords
- annotation
- bookmark
- annotations
- resource
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 81
- 238000013518 transcription Methods 0.000 claims abstract description 41
- 230000035897 transcription Effects 0.000 claims abstract description 41
- 230000004044 response Effects 0.000 claims abstract description 20
- 238000004458 analytical method Methods 0.000 claims description 18
- 238000012545 processing Methods 0.000 claims description 14
- 238000004590 computer program Methods 0.000 abstract description 11
- 230000015654 memory Effects 0.000 description 40
- 230000008569 process Effects 0.000 description 36
- 238000004891 communication Methods 0.000 description 16
- 230000006870 function Effects 0.000 description 13
- 239000000284 extract Substances 0.000 description 9
- 238000010586 diagram Methods 0.000 description 6
- 238000010801 machine learning Methods 0.000 description 6
- 230000005236 sound signal Effects 0.000 description 6
- 238000004364 calculation method Methods 0.000 description 5
- 238000013461 design Methods 0.000 description 5
- 238000007405 data analysis Methods 0.000 description 4
- 238000012015 optical character recognition Methods 0.000 description 4
- 230000002776 aggregation Effects 0.000 description 3
- 238000004220 aggregation Methods 0.000 description 3
- 230000001413 cellular effect Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 241000238565 lobster Species 0.000 description 2
- 238000012552 review Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000004931 aggregating effect Effects 0.000 description 1
- 238000013528 artificial neural network Methods 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 238000010411 cooking Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000000605 extraction Methods 0.000 description 1
- 238000005206 flow analysis Methods 0.000 description 1
- 235000015220 hamburgers Nutrition 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000003032 molecular docking Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 238000007637 random forest analysis Methods 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000011524 similarity measure Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9562—Bookmark management
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
- G06F16/972—Access to data in other repository systems, e.g. legacy data or dynamic Web page generation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/169—Annotation, e.g. comment data or footnotes
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for receiving a first input associated with a bookmark and, in response to receiving the first input, obtaining context data for deriving an annotation of the bookmark. An annotation engine of the system obtains a plurality of annotations that are derived using information included in the context data and a transcription of the first input associated with the bookmark. The annotation engine generates an importance value for each annotation. The importance value characterizes a relationship between each annotation and at least one of: information included in the context data; or a transcription of the first input. The annotation engine generates an annotation set for retrieving bookmarks. Each annotation in the set of annotations is generated from the obtained plurality of annotations, and each annotation has an importance value that exceeds a threshold.
Description
Technical Field
This specification relates to mobile devices.
Background
The website and application resources may include any number of links, embedded files, and/or other information that may or may not be relevant to the user. In particular, the user may detect information sources or other resources that are directly related to the user's interests. As such, users may desire accelerated access to particularly relevant Web-based or application resources. The user may create a bookmark that stores an electronic link to related Web-based or application content. The user can later access the bookmark to quickly navigate (navigator) to the relevant content. In the context of a computing system, bookmarks may be created and stored locally or remotely for subsequent access via an example electronic device.
Disclosure of Invention
This document describes techniques for adding annotations to user-created personal bookmarks. The annotations may be added automatically using information related to initial user input received on the client device, or manually by the user. Bookmarks may be viewed as pairs of information items (e.g., names and web addresses/URLs). The name is an identifier of the bookmark, and the URL is a web address of a resource page that the user can access using the web address, such aswww.example.com. Multiple annotations may be associated with a bookmark. Each of the plurality of annotations may be provided manually by a user or may be automatically inferred using an annotation engine of the computing system.
The document also describes techniques for retrieving bookmarks based on a determination that respective annotations for the bookmarks match content of subsequent user input received at the client device. For example, a user may retrieve a bookmark in response to the computing system determining that the content of a subsequent user input (e.g., a query or command) matches a term or other item of information included in the data regarding the bookmark. The system uses specific calculation rules to determine whether the user command matches the data about the bookmark. This determination and matching may be performed by specific computational logic for determining a match between a user command and an annotation of a bookmark.
One aspect of the subject matter described in this specification can be embodied in a computer-implemented method. The method includes receiving, by a computing system, a first input associated with a bookmark; in response to receiving the first input, obtaining, by the computing system, context data for deriving an annotation of the bookmark; obtaining, by an annotation engine of a computing system, a plurality of annotations, the plurality of annotations derived using information included in the context data and a transcription of the first input associated with the bookmark. The method includes generating, by an annotation engine, for each annotation, an importance value characterizing a relationship between each annotation and at least one of: i) information included in the context data; or ii) a transcription of the first input; generating, by an annotation engine, a set of annotations for retrieving bookmarks, each annotation in the set of annotations being generated from a plurality of annotations obtained and each annotation having an importance value exceeding a threshold; and retrieving, by the computing system, a bookmark for accessing the resource page using the particular annotation in the set of annotations.
These and other embodiments may each optionally include one or more of the following features. For example, in some embodiments, using specific annotations includes: receiving, by the computing system, a second input; and selecting, by the annotation engine, the particular annotation from the set of annotations based on the second input to cause retrieval of the bookmark; and retrieving, by the computing system, the bookmark for accessing the resource page using the particular annotation.
In some embodiments, selecting comprises: analyzing the transcription of the second input; obtaining one or more terms from the transcription of the second input; for each annotation in the annotation set: determining a similarity score indicating a degree to which terms in the transcription of the second input match terms in the annotation used to retrieve the bookmark; and selecting a particular annotation based on the similarity score of the annotation exceeding a threshold similarity score.
In some implementations, the particular annotation is configured as a trigger to cause retrieval of the bookmark, and the method further includes: determining, by the computing system, that the trigger condition is satisfied based on an analysis of the transcription of the second input; retrieving, by the computing system, the bookmark from the bookmark index in response to determining that the trigger condition is satisfied; and responsive to retrieving the bookmark from the bookmark index, providing, by the computing system, the bookmark for display at the client device.
In some implementations, contextual data for deriving annotations is obtained from a plurality of data sources, each of the plurality of data sources including at least one of: i) an identifier of the bookmark; ii) a resource identifier stored as a bookmark; iii) resource pages accessed using the resource identifiers; iv) text of the resource page; or v) information obtained from a search engine based on a search query referencing a resource identifier.
In some implementations, the context data for deriving annotations includes an N-gram and data describing the entity, each of which is obtained from a plurality of data sources with reference to the transcription of the first input. In some implementations, i) the resource page is generated by a web browser application, and ii) the resource identifier is a Uniform Resource Locator (URL) that provides a resource address for accessing the resource page.
In some implementations, i) the resource page is generated by an application accessed using the client device, the application configured to store the one or more deep links in an application index, and ii) the resource identifier is a Uniform Resource Locator (URL) for the resource page and is obtained from the application index including address data about the application.
In some embodiments, the resource identifier is at least one of: a) data identifying a screen image of a resource page generated by an application accessed using the client device, or b) providing a deep link for accessing a resource address of a resource page of the application.
Other embodiments of this and other aspects include corresponding systems, apparatus, and computer programs configured to perform the actions of the methods encoded on computer storage devices. A system of one or more computers may be configured by means of software, firmware, hardware or a combination thereof installed on the system that in operation cause the system to perform actions. One or more computer programs may be configured by virtue of having instructions which, when executed by data processing apparatus, cause the apparatus to perform actions.
The subject matter described in this specification can be implemented in particular embodiments and can result in one or more of the following advantages. Techniques are described that enable enhanced retrieval of annotations and stored bookmarks relative to other systems. For example, annotations can be used to improve the functionality and accessibility of bookmarks, thereby improving user device interfaces to facilitate better user control of device operations. The described techniques enable bookmarks to be annotated and retrieved in a fast and computationally efficient manner based on speech or other input from a user and the computing context of the client device receiving and processing the user input. For example, rather than the computing device receiving and processing multiple touch or physical inputs from the user, the system can use a single input (e.g., voice or text input) to create a bookmark and generate one or more corresponding annotations for the bookmark.
By using a single user input to perform multiple processor functions related to a bookmark, the system can quickly and efficiently obtain data for creating a bookmark, generate an annotation for the bookmark, and store data associated with the annotation and the bookmark. For example, the system executes a particular computing rule configured to analyze data describing a computing context of an input session at the client device. The computing system can utilize pre-existing entity data and other information items of the computing context to efficiently obtain resource identifiers, such as URLs/deep links, for creating bookmarks. For example, the system may use machine learning logic to iteratively analyze data from multiple information sources related to a computing session. Such iterative analysis enables the system to better identify terms of increasing importance in generating annotations for bookmarks.
The described techniques enable a system to automatically refine its computational process for analyzing terms and other contextual data, thereby enabling annotation and retrieval operations of the system to be performed with increased efficiency and accuracy over time. A repeatable automatic annotation process is described that involves minimal human intervention and does not require manual execution of annotator functions. For example, the described techniques enable automatic analysis of information items from multiple data sources that are invoked for a given computing context. In some implementations, a single voice input can be used as a trigger for the analysis. Thus, these techniques enable computing systems to perform operations quickly, which previously could not be performed automatically in an efficient manner due to the challenges of obtaining bookmark annotations and corresponding importance values for each annotation based on a single voice input from a user.
The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIGS. 1A and 1B are example computing systems for annotating and retrieving bookmarks.
FIG. 2 is a flow diagram of an example process for annotating and retrieving bookmarks based on input from a user.
Fig. 3A and 3B illustrate example graphical interfaces associated with creating and annotating bookmarks based on input from a user.
FIG. 4 is a flow diagram of an example process for retrieving annotated bookmarks.
FIG. 5 is a block diagram of a computing system that may be used in connection with the computer-implemented methods described in this specification.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
FIG. 1A is an example computing system 100 for annotating and retrieving bookmarks. The system 100 annotates the bookmark based on a first or initial input from the user, e.g., voice, text, or other type of input, and obtains an annotation for accessing the bookmark based on a second or subsequent input from the user. The mobile or client device of the system 100 receives voice input and generates an electronic bookmark. Bookmarks are used to access resource pages using Web-based Uniform Resource Identifiers (URIs), such as Uniform Resource Locators (URLs), or to access resource pages generated by native applications (also referred to as "apps") of a client device. A client device accesses a resource page of a native application by referencing an application index that includes a plurality of deep links and using the deep links mapped to the resource page.
The client device receives voice/text input from the user indicating a desired bookmark function. The client device may receive voice input while the user is browsing a website or Web-based resource, or while the user is navigating through a resource page of the native application. In this context, techniques for adding annotations to user-created personal bookmarks are described. The annotations may be added automatically using information related to initial user input received on the client device, or manually by the user. Multiple annotations may be associated with a bookmark. Each of the plurality of annotations may be provided manually by a user or automatically inferred using an annotation engine of the computing system. Techniques for retrieving bookmarks based on a determination that annotations for the bookmarks match content of subsequent user input received at a client device are also described.
The system 100 includes a user/client device 102 and at least one computing server 104 (described below). Client device 102 may be any suitable electronic user device configured to receive voice input or other input from a user. In general, references to voice inputs or voice inputs 103 (or 105) are merely examples of inputs that may be received at client device 102 or system 100, and various other types of inputs such as text inputs, numeric inputs, touch inputs, or other related input data structures are within the scope of this document.
In some implementations, the client device 102 is a cellular smartphone device, a laptop computer, a desktop computer, a tablet computer, an e-reader device, a smart television, or any other mobile computing device configured to receive voice input. In some embodiments, the client device 102 is a "smart speaker," such as a google home or other related smart speaker device. Typically, the client device 102 includes secondary functionality, allowing functions such as session queries, questions and answers, internet of things (IoT) control functions, or other related functions.
The client device 102 includes a speech module 106. The speech module 106 includes an automatic speech recognizer 107 ("ASR 107") and a natural language processor 108 ("NLP 108"). In some implementations, the client device 102 receives a voice input 103 indicating that the user wants to generate a new bookmark. Bookmarks may be used to expedite or streamline subsequent access to Web resources presented to a user on an example display of client device 102. The speech module 106 may be used to analyze data, such as audio signal data, about the received voice input and generate a transcription of the voice input.
The ASR 107 may be example speech recognition logic, programmed instructions, or algorithms executed by one or more processors of the client device 102 (or the computing server 104 described below). For example, the ASR 107 may execute program code to manage the identification, extraction, and analysis of audio characteristics of the received voice input 103. Further, the ASR 107 may execute comparator logic to compare audio characteristics of the received voice input 103 to various model parameters stored in relation to the NLP 108. The result of the comparison produces a text transcription output that substantially corresponds to the voice/speech utterance of the voice input 103.
NLP 108 may be an example language processor used in speech recognition to specify or identify certain word combinations or sequences. In some implementations, NLP 108 is configured to generate a word sequence probability factor that indicates a possible occurrence or presence of a particular sequence or combination of words. In some cases, the identified sequence of words primarily corresponds to a sequence that is specific to a speech corpus, rather than, for example, a written corpus.
The client device 102 also includes an application module 110. The application module 110 may be used at least for: i) executing a particular application 111 to generate a resource page for the application; ii) access an application index 112 that stores data associated with the particular application 111. In some implementations, the application 111 is a web browser or native application stored on the client device 102, and the application index 112 includes address data for resource pages of the native application. In some cases, the data stored via the application index 112 includes deep links to resource pages generated by the applications 111. The native application may be configured to store one or more deep links in the application index 112, and each deep link may map to a resource page generated by the native application. Each deep link also provides a resource address for accessing the resource page mapped to the deep link.
Client device 102 further includes annotation index 114, device assistant 116, and context data engine 118. The index 114 provides local storage and access to annotation data for the generated bookmarks. For example, the index 114 may be configured to store a list of a plurality of annotations generated based at least on the speech input 103. As described in more detail below, the annotated data may be stored locally at the client device 102 and/or at an example cloud-based storage device using the computing server 104. The device assistant 116 can correspond to a software program configured to provide one or more virtual assistant functions to a user. For example, the device assistant 116 is configured to detect or receive a voice query from a user (typically after detecting a hotword or similar word or phrase that initiates a listening mode of the user/mobile device 102), perform calculations to obtain web results responsive to the query, and provide an audible response based on the obtained web or search results. As discussed in more detail below, in some implementations, the annotations are created using search results from the search query that are generated using the device assistant 116 and that are responsive to the user voice query received by the client device 102.
The context data engine 118 is configured to extract or obtain context data 134 related to a Web-based resource or native application (e.g., application 111) that the client device 102 is executing when the device receives the voice input 103. For example, the context data engine 118 is configured to extract one or more of the following: i) a URL/URI identifying a resource (e.g., page) of the native application, ii) an identifier of the native application, iii) a website URL identifying a resource page of the website, or iv) a screen shot of the resource page presented to the user on a display of the client device 102 when the voice input 103 is received on the device. Generally, a URL is a URI. In some cases, the URI is an identifier for relating to the implementation of the content on the device.
In some implementations, the device assistant 116 can generate data associated with the displayed resource page, e.g., device assistance data 137. The device assistance data 137 may include a plurality of data elements that indicate attributes of the displayed resource page. For example, the device assistance data 137 may include a username of a sender or recipient of an electronic message displayed by the example messaging application or data regarding information displayed via a particular resource page. As described herein, the information of the context data 134 is used to generate annotations for bookmarks. For example, information from various data sources that is invoked during a given computing context may be used to generate annotations for bookmarks. In some implementations, information such as an entity, name, contact, username, address, or phone number can be used to generate annotations for a bookmark, so that data used to access the bookmark can be extracted and analyzed based on the annotations.
The context data 134 may include metadata 136, device assistance data 137, transcripts 138, application identifiers 140 ("app IDs 140"), and resource Identifiers (IDs) 142. The context data 134 may indicate context information about a particular resource page generated for display to the user or information about Web-based resources or native applications accessible via the client device 102. For example, the context information of the context data 134 may include at least one of: i) resource identifiers 142, e.g., URLs/deep links, which provide addresses for accessing particular resource pages; ii) description data usable to identify bookmarks; iii) screen shots/digital images of specific resource pages; or iv) an app ID 140 that identifies the native application executed by the client device 102.
The context data 134 may also include data regarding query voice inputs received by the client device 102. Such data may include a transcription 138 indicating the desired bookmark functionality received by the client device 102. As shown in fig. 1A, the client device 102 may receive a voice input 103, 105 from a user, and the voice input 103, 105 indicates a desired bookmark function. For example, a client device may receive a voice query from a user to: i) generate/create and store a new bookmark that includes a URL, URI, or deep link for a particular resource (e.g., page), or ii) access the stored bookmark using the URL, URI, or deep link stored in the bookmark to view the particular resource page. The client device 102 can receive voice input while the user is browsing a website or web-based resource, or while the user is navigating through a resource page of a native application. In response to the system 100 receiving a query to generate a bookmark, the computing server 104 receives or obtains the context data 134 from the client device 102. The server 104 uses the received context data 134 to generate and store one or more annotations for the bookmark.
The computing server 104 generally includes an annotation engine 120 that receives the context data 134 and generates one or more annotations for bookmarks based on an analysis of the context data 134. The annotation engine 120 includes data analysis logic 122, Optical Character Recognition (OCR) logic 124, annotation index 126, search engine interface 128, and annotation retrieval logic 130. The annotation engine 120 is an example computing module of the server 104 (or accessible by the server 104) and is configured to receive and process information from a plurality of data sources that form the context data 134. The information is processed to generate a plurality of annotations for the bookmark, and data or reference pointers for accessing the annotations are stored at the annotations index 126. The computational elements of the annotation engine 120 are described in more detail below with reference to fig. 2-4.
FIG. 1B is an example embodiment for annotating and retrieving bookmarks, where the annotation, storage, and retrieval occur entirely on the client device 102. For the embodiment of FIG. 1B, the context data 134 is processed and analyzed at the client device 102 to generate and store one or more annotations for bookmarks at the client device 102. For example, one or more information/data items of the context data 134 may be analyzed locally at the client device 102 to generate and store annotations for bookmarks without accessing or using computing elements of the computing server 104. In some cases, the client device 102 includes one or more computing elements of the computing server 104, e.g., the annotation engine 120, such that the annotation and the search/retrieval of the stored annotations or bookmarks occur entirely on the client device 102.
In some implementations, the client device 102 includes a user Identification (ID) module 152 that uses data associated with voice input to identify the user. For example, the user ID module 152 may analyze the information items of the context data 134 to obtain data associated with the voice input 103, such as the metadata 136, the ancillary data 137, or the transcription 138. Module 152 identifies the user (owner of client device 102) based on the analysis of the information in context data 134. For example, module 152 may analyze or compare the audio signal for the voice input with stored audio signal data for the user. The stored audio signal data may be linked to an identifier of the user or a user ID. Module 152 identifies the user based on determining that the characteristics of the audio signal for the voice input match, e.g., substantially match, the user's stored audio signal data. In response to identifying the user, the module 152 causes the contextual data 134 to be provided to the annotation engine along with the user ID to generate a personalized annotation for the bookmark.
FIG. 2 is a flow diagram of a process 200 for annotating and retrieving bookmarks based on voice input from a user. Process 200 may be implemented or performed using system 100 described above. The description of process 200 may refer to the computing resources of system 100 mentioned above, including client device 102 in the embodiment of FIG. 1B. In some implementations, the described actions of process 200 are enabled by programmed instructions executable by at least one processor and memory of a computing system described in this document.
Referring now to process 200, the system 100 receives a first input associated with a bookmark (202). In response to receiving the voice input, the system 100 obtains context data for deriving an annotation for the bookmark (204). The system 100 generates one or more annotations for a bookmark based on user input received at the client device 102, information included in the context data 134, or a combination of both. In some implementations, the annotation of the bookmark is provided by the user of the client device 102 as the user-provided annotation. The user-provided annotations may be added at the time of creation of the bookmark or at any time after creation of the bookmark. The user-provided annotations may also be deleted or modified at any time. In some implementations, the user annotations are processed to extract or obtain N-grams, such as concepts and entities included in the user input. The concepts and entities obtained may be stored in the system 100 as auto-inferred annotations having particularly high importance values (described below).
As described above, the client device 102 receives a voice input 103 from a user. The voice input is related to a bookmark function, such as creating a bookmark or modifying an existing bookmark. The client device 102 can receive the voice input 103 while the user is browsing a website or Web-based resource, or while the user is navigating through a resource page of a native application. In some implementations, the browsing session defines a computing context in which the system 100 processes context data 134 from multiple data sources.
The annotation engine 120 obtains a plurality of annotations based on processing and analysis of data generated during the computational context (206). The plurality of obtained annotations is derived or generated using information included in the context data 134, including the transcription 138 of the speech input 103 associated with the bookmark. The obtained annotations are automatically inferred from multiple data sources of the context data 134. For example, annotations are inferred from data sources describing bookmark names, URL text of a website or Web-based resource page, the content of a URL, e.g., a Web page, a screen shot of a Web page, textual content of a screen in an app, or geometric information related to the auxiliary data 137, for example. In some embodiments, the geometric information describes a geometric layout or pattern of the application data, such as text and images, that are graphically rendered for output to the user.
For a given computational context, annotations may be inferred from data sources that describe metadata associated with a URL or web page content, as well as information linked or associated to the URL by an example search engine. For example, the metadata may indicate or describe an entity such as a person, company, restaurant, or sports team, as well as various other media content items that may be included in a web page. The information linked to the URL by the example search engine may include a search query with the URL located in the top K search results, where K is a positive integer that may have a value ranging from 1 to at least 100,000. In some implementations, the importance of such a query may depend on the location of the URL in the ranking data of the search results. In some cases, the ranking data includes respective ranking scores that define a ranking of the URL in the search results. The information linked to the URL by the search engine may further include a search query for URLs whose users have clicked in the search results. A search query that includes or is related to a URL may have a corresponding importance value. In some implementations, search queries for which a user has clicked a URL in a search result can be assigned a higher or greater importance value to indicate that such search queries are more important for use in obtaining annotations for bookmarks.
Annotations may also be inferred from data sources describing other URLs related to the URLs of the bookmarks and the corresponding content or media content items included at the web page for each of the other URLs. Other URLs can be resource locators from the same domain as the URL of the bookmark.
For example, if the URL of the bookmark iswww.example com，Other URLs from the same domain may include:www.example.com/about-usdescribing information about services provided by an entity such as a bank; orwww.example.com/contact-usWhich provides contact information for the bank. In some embodimentsThe other URL may be a resource locator, the resource locator: i) is classified by the web index as similar, e.g., substantially similar, to the URL of the bookmark; ii) is part of the same web-based category as the URL of the bookmark (e.g., bank or restaurant); or iii) have the same or similar content, entities, and important concepts as the URL of the bookmark.
Annotations may also be inferred from a data source that defines the app name and any information or metadata associated with the app. For example, the data for the bookmark may include a pointer or reference pointer for accessing a deep link of the resource page of the app. The data of the bookmark including the deep link may define the name of the app and describe metadata tags and other information that associate the bookmark to certain images or text of the resource page that is displayed when the user interacts with the app.
The system 100 extracts one or more annotations based on inferences about the contextual data 134 accessed from the multiple data sources. For example, the annotation engine 120 may use the context data analysis logic 122 to analyze the context data 134 and other information from each data source, calculate inferences based on the analysis, and extract annotations from the context data 134 based on the calculated inferences. In some implementations, the annotation engine 120 uses OCR logic 124 to identify optical characters of the context data 134. For example, the OCR logic 124 may be used to identify N-grams or terms received from the client device 102 and corresponding to an example transcription of the spoken query received at the device.
The annotation engine 120 extracts one or more annotations from the plurality of data sources and contextual information described above, or other data sources relevant to the computing context, using content included in the data and contextual information. For example, the annotation engine 120 extracts annotations, such as important N-grams, synonyms of important N-grams, important concepts, and important entities. An important N-gram may be formed of a single term or a combination of two or more terms. The important N-grams and concepts can also be derived in a number of ways. For example, important N-grams can be derived using TF-IDF (term frequency-inverse document frequency) in a corpus of documents or using a machine learning engine that learns important N-grams based on calculated inferences of a training data set.
In some implementations, for at least a subset of the important entities, the annotation engine 120 extracts annotations, such as entities related to the important entities extracted from the data sources discussed above. For this subset, the annotation engine 120 can also extract annotations, such as important N-grams and important concepts related to the important entities mentioned above, including entity-specific salient terms. The annotation engine 120 assigns a type indicator to each extracted annotation based on the information used to extract the annotation. The type indicator identifies the type of the directly extracted entity and the type of the related entity. For example, if annotations are extracted using an N-gram or term related to restaurants, the annotation engine 120 assigns a "restaurant" type indicator to the annotations. Similarly, if the annotation is extracted using an entity or concept related to a movie or a person, the annotation engine 120 may assign a "movie" type indicator or "person" to the annotation.
The annotation engine 120 can identify important N-grams, concepts, and entities related to entity E based on analysis of search results generated using a search engine. For example, if entity E and related content: 1) all appear in the same document, 2) all appear in the top K search result sets of a query processed by a search engine; 3) one appearing in a query issued to a search engine and another appearing in an earlier search result of the query issued to the search engine, then an important N-gram, concept, or other entity may be associated with entity E (e.g., xyz's bank). In some implementations, the annotation engine 120 computes the strength of the relationship between entity E and important N-grams, concepts, or other entities.
For example, the strength of the relationship may be calculated based on the frequency at which each of the above conditions 1-3 is true. In some implementations, the annotation engine 120 calculates intensity values based on the conditions and determines weights for the intensity values based on the importance of the conditions. The importance of a condition corresponds to the frequency at which the condition is true. For example, if condition 1 is true 10 times, while conditions 2 and 3 are only true 5 times, then condition 1 will receive a higher weight and therefore will have a higher intensity value.
In some embodiments, the strength value is computed based on the frequency with which each condition is true, weighted by the importance of each condition, plus some combination of TF-IDF logic, such that very popular N-grams, concepts or entities are not strongly considered to be related to entity E. In some cases, the system 100 generates term frequency values for data associated with the search results. For example, the annotation engine 120 processes terms and other content of the search data by deconstructing the data into a series of N-grams using the logic 124. Each N-gram may be assigned a weight or bias value based on how often the N-gram appears in the data. Such weights or bias values may be used to indicate the relative topic importance of certain N-grams compared to other N-grams in the series of N-grams. The bias value or weight may be determined by the TF-IDF score.
In some implementations, the weight of the N-gram can be modified based on the number of nouns present in the N-gram. This is because an N-gram with more nouns may indicate more important topic importance. For example, NLP 108 may include a language parser for parsing an N-gram to determine which words are considered nouns. Thus, each N-gram weight may be multiplied by the ratio of the noun to the total words of each N-gram. Similarly, the weight of the N-gram may be modified based on the number of "stop words" that occur in the N-gram. This is because topic importance may decrease as more stop words are used. Thus, each N-gram weight may be multiplied by the ratio of non-stop words to total words for each N-gram. For example, the "stop word" may be a common word that may not be related to the subject matter importance of the N-gram, such as the words "a," the, "and" yes.
In some implementations, other methods for extracting entities relevant to a given entity E include using unstructured text or knowledge graphs. The system 100 may be configured to automatically extract and mine relationships and related entities from unstructured text. The extracted information may be represented in a graph structure. For example, extracting relationships and related entities from the data sources described above may be performed by automatically directing patterns of occurrence of entity information in the data, and then applying these directed patterns to unstructured text data. For each relationship and entity, a plurality of features are extracted to facilitate construction of a graph, where nodes of graph data are entities and edges of graph data are relationships.
A knowledge graph is a collection of data representing entities and relationships between entities. The data is logically depicted as a graph, where each different entity is represented by a respective node, and each relationship between a pair of entities is represented by an edge between the nodes. Each edge is associated with a relationship, and the presence of an edge indicates that there is an associated relationship between the nodes to which the edge connects. For example, if node A represents person alpha, node B represents person beta, and edge E is associated with the relationship "is its parent", having edge E connect the fact that node A is the parent of beta in the direction from node A to node B in the graph.
The knowledge graph can be represented by any of a variety of convenient physical data structures. For example, the knowledge graph can be represented by triples, each of which in turn represents two entities and a relationship from a first entity to a second entity; for example, [ alpha, beta, is its parent ], or [ alpha, is its parent, beta ], are alternatives that represent the same fact. Each entity and each relationship may, and typically will, be included in multiple triples.
Alternatively, each entity may be stored as a node once, for example as a record or object, and linked to all the relationships that the entity has and all other entities to which the entity pertains by a linked list data structure. More specifically, the knowledge graph can be stored as a adjacency list in which the adjacency information includes relationship information. It is often advantageous to represent each different entity and each different relationship with a unique identifier.
The entity represented by the knowledge graph need not be physical or a particular person. An entity may include a particular person, place, thing, work of art, concept, event, or other type of entity. Thus, the knowledge graph may include data defining relationships between people, e.g., a common lead actor in a movie; data defining relationships between people and things, e.g., a particular singer recording a particular song; data defining the relationship between places and things, e.g., a particular type of wine from a particular geographic location; data defining a relationship between a person and a location, e.g., a particular person is born in a particular city; and other kinds of relationships between entities.
In some embodiments, each node has a type based on the kind of entity that the node represents; and the types may each have a schema (schema) that specifies the kind of data that can be maintained about the entity represented by the node of the type and how the data should be stored. Thus, for example, a node representing a type of person may have a feed defining fields for information such as date of birth, place of birth, and so forth. Such information may be represented by fields in a type-specific data structure, or may be represented by triples that look like node-relationship-node triples, e.g., [ person identifier, birth, date ], or in any other convenient predefined manner. Alternatively, some or all of the information specified by the type synopsis may be represented by links of nodes in the knowledge graph; for example, [ a person identifier, its children, another person identifier ], where another person identifier is a node in the graph.
The annotation engine 120 generates an importance value for each annotation (208). The importance value characterizes the relationship between each annotation and one or more items of information in the context data 134, including a transcription 138 of the voice input 103. In some implementations, user-defined annotations have a greater importance value relative to automatically inferred annotations. The importance value generated for an automatically inferred annotation may vary depending on the plurality of signals. For example, the importance value generated and assigned to an annotation may depend on the source from which the annotation is derived, e.g., an identifier of a bookmark, text of a URL of a web page, content of the URL, metadata of the URL, other related URLs or queries for which the URL is surfaced in search results of a search engine, or data included in user contacts stored in the client device 102, or other related data sources that may be used to derive the annotation.
As described above, the importance value generated and assigned to an annotation may also depend on the type of annotation indicated by the type indicator. For example, the type indicator of the annotation is determined based on the type of entity E referenced in the annotation, the related entities, the significant terms or N-grams in the annotation data, the entity type (e.g., movie theater, bank, etc.), the related entity type, or a combination of each. The importance value of an annotation may also depend on a determined relevance between the automatically extracted annotation and the data source from which the annotated term was extracted. For example, the data source from which the annotated terms are extracted may include metadata 136, ancillary data 137, transcription 138, application ID 140, resource ID 142, or a combination of each.
For entities, important N-grams, or important concepts extracted from the content of the URL, the annotation engine 120 determines how important the extracted content is to the overall content. Likewise, for on-screen text, the annotation engine 120 can also determine how important the content extracted from the on-screen text is to the entire textual content of the screen. For screens corresponding to a known app, the display mode of the app may already be known. For example, the display mode may indicate or identify which portions of the screen contain boilerplate or less relevant content, and which portions of the screen represent important components of the app, such as a title bar in a web browser or a username in a chat app. The importance value of an annotation may also depend on the strength of the relationship of the indirectly derived annotation relative to other annotations. Typically, annotations and their importance may be updated periodically by adding annotations, modifying annotations, or deleting annotations.
The annotation engine 120 generates an annotation set for retrieving bookmarks (210). Each annotation in the annotation set is generated from a plurality of obtained annotations. The system 100 evaluates the importance value of each annotation and determines whether each annotation has an importance value (e.g., 0.82) that exceeds a threshold importance value (e.g., 0.65). In some implementations, each annotation in the generated set of annotations for retrieving bookmarks has an importance value that exceeds some predetermined threshold. Each annotation in the annotation set can be stored at the annotation index 126 and associated with a bookmark. In some implementations, the system 100 retrieves bookmarks for accessing the resource page using particular annotations in the annotations collection (212). The use of a particular annotation to retrieve bookmarks is described in more detail below with reference to fig. 4.
Fig. 3A and 3B illustrate example graphical interfaces 302 and 304, respectively. These interfaces are associated with computing elements for annotating bookmarks based on voice input 103 from a user. Interface 302 illustrates an example resource page accessed at client device 102. The interface 302 may correspond to a review page of an example website accessed via a web URL ("www.example.com") or an app rating a restaurant in a geographic location. The interface 304 may be an example graphical interface associated with the device assistant 116. The interface 304 shows user input 306 and assistant output 308. The input 306 is a transcription of the speech input 103 received by the client device 102.
The user may be viewing a comment page for a restaurant in Gary Doe (California) in the app and issuing a voice input 103 to the client device 102 by speaking an example command such as "save this as my favorite dinner restaurant". The display of the client device 102 may show a microphone icon 303, which microphone icon 303 lights up (e.g., when tapped by a user) to indicate that the listening mode of the client device 102 has been activated. The system 100 processes the command of "save this as my favorite diner restaurant" to generate a bookmark that includes at least a deep link or URL for accessing a review page of a restaurant of Gary Doe in the native application. In response to the process command, system 100 generates and stores a bookmark that may be identified as "my favorite diner restaurant".
The first annotation may be "restaurant," which has a calculated importance value of 1.0. The annotation "retaurant" may correspond to an important N-gram in the bookmark name and the "type" (restaurant) of the main entity from the URL text and content ("Gary Doe"). The second annotation may be "Gary Doe," which has a calculated importance value of 1.0. The annotation "Gary Doe" may correspond to an entity such as a primary entity in the URL text and content/terms from the URL text or web page linked to the URL ("Gary Doe"). The third annotation may be "dinner", which has a calculated importance value of 0.8. The annotation "dinner" can correspond to an important N-gram in the bookmark name.
Another annotation may be "french cooking" with a calculated importance value of 0.6. The annotation "french browsing" may correspond to a term or set of terms mentioned in the URL content, a web page linked to the URL, or a significant concept associated to the URL by the search engine. Another annotation may be "good places to eat in San Francisco" (good places to eat in San Francisco) "which has a calculated importance value of 0.4. The annotation "good places to eat in San Francisco" may correspond to a query that is exposed in the first K results of the search engine for its URL. Another annotation may be "Fisherman's Wharf," which has a calculated importance value of 0.4. The annotation "Fisherman's Wharf" may correspond to an entity related to the entity "Gary Doe", or may correspond to an entity that also appears in the URL content but is not particularly relevant to the content. In other embodiments, the user may also add a manual comment "great lobster". This annotation can be processed to extract "lobster" as another annotation.
In other implementations, a bookmark 312 is created with a bookmark name or identifier "chat with Tom". Bookmarks may be created when a user is viewing or interacting with an example MessagingApp at a client device 102 and exchanging messaging 314 with their contact "Tom Jones. Creation of the bookmark "chat with Tom" may cause system 100 to automatically infer annotations collection 316 using one or more of the computing processes described above. The first annotation may be "Tom", which has a calculated importance value of 1.0. The annotation "Tom" may correspond to an important N-gram in the bookmark name, an alias of at least two user contacts ("Tom Jones" and "Tom Myers (Tom Meiers)"), or an N-gram that also appears on the screen when the bookmark is created, e.g., near the top of the screen showing the user name.
The second annotation may be "chat," which has a calculated importance value of 1.0. The annotation "chat" may correspond to an important N-gram in the bookmark name or the "type" of app to which the bookmark points. For example, the type of app may be a "chat app" or a "message app". The third annotation may be a "MessagingApp" with a calculated importance value of 0.8. The annotation "MessagingApp" may correspond to the name of the app to which the bookmark points. Another annotation may be "Tom Jones," which has a calculated importance value of 0.9. The annotation "Tom Jones" may correspond to the name that appears on the screen when the bookmark is created or the name of the user's contact that is stored in the native contact app of the client device 102. Another annotation may be "contact" with a calculated importance value of 0.6. The annotation "contact" may correspond to the "type" of the personal entity "Tom Jones".
FIG. 4 is a flow diagram of a process 400 for retrieving annotated bookmarks. The process 400 may be implemented or performed using the system 100 described above. The description of process 400 may refer to the above-mentioned computing resources of system 100. In some implementations, the described actions of process 400 are enabled by programming instructions that are executable by at least one processor and memory of the computing system described in this document.
Referring now to process 400, system 100 receives a second input from the user, e.g., speech input 105, and processes the input to determine whether the input indicates the user's intent to retrieve or obtain a bookmark (402). For example, after providing the voice input 103, the user may later issue a command or query, e.g., the text/voice input 105, to retrieve all bookmarks that match the criteria mentioned in the command/query. The command may be "show me my restaurant bookmarks (showing my restaurant bookmarks)" and the query may be "what are my San Francisco bookmarks? (what is my san Francisco bookmarks) ". Thus, the second input may be a voice input command or query to retrieve an existing bookmark. In some implementations, the data for the retrieved bookmark is displayed or shown to the user via a graphical representation provided for output on a display of the client device 102. In addition to showing or displaying bookmarks, the device assistant 116 may audibly respond to the user to provide a list of user bookmarks. For example, the command may be "read me back my bookmarks," and the client device 102 may use the stored bookmarks or annotated audio data to audibly respond through the list of user bookmarks.
The system 100 obtains input content in response to determining that the voice input indicates the user's intent to retrieve a bookmark (404). For example, the annotation engine 120 analyzes the transcription of the voice input 105 using the annotation retrieval logic 130 to determine whether the input indicates a user intent to retrieve a bookmark based on the analysis. The analysis may be performed using a grammar or classifier that processes transcribed terms based on inferences determined using a machine learning engine. The machine learning engine may process and analyze terms, term sequences, and/or extracted N-grams using specific computational rules to infer user intent to retrieve stored bookmarks.
In response to determining that the voice input 105 indicates a user intent to retrieve bookmarks, the annotation engine 120 obtains input content including one or more terms from the transcription of the voice input 105. If the query indicates a user intent to retrieve bookmarks, then significant N-grams, concepts and entities are extracted from the query using one or more of the logics 124 or 130. For example, if the transcription of the voice input 105 is "show me my retaurant bookmarks" or "list my bank of xyz bookmarks (listing bank bookmarks for my xyz)," then the annotation engine 120 may extract the term "retaurant" from the transcription, or may extract the entity term "bank of xyz (bank of xyz)" from the transcription.
In some implementations, entities related to the extracted entities and the type of each entity are retrieved. Then, important N-grams and concepts related to the extracted entities are also retrieved. In some cases, each extracted content, such as an N-gram or identifier of an entity, is represented by a data or content signal. The system 100 is configured to analyze the extracted terms and assign importance values to the terms. Thus, each extracted term or corresponding signal representing that term may have an importance associated to them, which is indicated by a calculated importance value (e.g., 0.53).
The importance value is calculated in a manner similar or substantially similar to the method of calculating the importance value for the annotation (described above with reference to fig. 2). The importance may depend on the type of signal and the relevance of the user query indicated by the signal reference speech input 105. As described above, the annotation engine 120 determines the type of each signal by referring to the type indicator assigned to the signal. The type indicator is determined in a manner similar or substantially similar to the method of determining the type indicator for the annotation (also described above with reference to fig. 2).
The system 100 calculates a similarity score for each of the obtained or extracted content items as compared to annotations linked to one or more bookmarks stored at the example bookmark index (406). For example, data describing each content item or term of the obtained transcription of the voice input 105 is compared to each of one or more bookmarks included in the bookmark index based on an annotation matching scoring process (described below). Each content item or term is compared, matched or otherwise analyzed against each bookmark stored for the user. Analyzing the content item in comparison to each bookmark stored for the user includes analyzing various data about the item in comparison to each bookmark. The data about the item may include all signals associated with the item and a respective importance value for each signal.
For each bookmark or content item, the annotation engine 120 uses the retrieval logic 130 to calculate a similarity (or match) score for the bookmark or item, e.g., 0.95. A similarity score is calculated based on a comparison or analysis of the extracted terms compared to bookmark information, including annotations assigned to bookmarks. The calculated similarity score indicates the similarity between the extracted term and the bookmark. For example, the calculated similarity score characterizes how well the extracted term ("restaurant") or set of extracted terms ("bank of xyz") match the data defining the bookmark. The extracted terms match the annotations of the bookmark. In some implementations, the extracted terms also match compared to other data of the bookmark, such as a name of the bookmark, an identifier of the bookmark, text of a URL, or text of deep links that are each combined to define the bookmark.
The similarity or match score for bookmark B can be calculated as follows (matching _ score (B)). For each query signal S and each matched annotation a of a bookmark, a signal annotation matching score (signal _ annotation _ matching _ score (S, a)) is calculated using the specific calculation rules of annotation retrieval logic 130. For example, based on: i) the importance of the signal S; ii) annotate the importance of A; iii) semantic similarity between S and A to calculate a signal annotation match score.
In some implementations, the query signal S matches the bookmark annotation a if the two are the same (e.g., the highest similarity score), or if the two are semantically similar. For example, query signal S representing the extracted term "dinner" and bookmark annotation a comprising the term "hungry" may be semantically similar, but the terms are semantically different. Alternatively, "diner" and "super" may be determined to be semantically identical. The system 100 aggregates the calculated match scores. For example, the annotation engine 120 determines matching _ score (b), which is the aggregate score over all signal annotation match scores signal _ annotation _ matching _ score (S, a).
To determine the aggregated score, annotation engine 120 first calculates the annotation match score for each annotation a (aggregation _ score (a)) by aggregating signal _ aggregation _ score (S, a) over all query signals S, and then aggregates the annotation match scores over all annotations a into aggregation _ score (b). Other methods may also be employed to calculate the bookmark annotation match score. Such methods may be based on calculations performed using a machine learning engine. For example, the machine learning engine may use computational logic related to random forest computation or deep neural networks trained to determine semantic similarity. Methods involving similarity measures, such as variation of cosine similarity between the annotation set and the query signal set, may also be used, where the weights of the parameters in the calculation depend on the importance value of the annotation or query signal.
The system 100 determines whether each calculated similarity score for each content item or bookmark exceeds a threshold similarity score (408). The system 100 obtains one or more bookmarks for presentation to the user based on the similarity score exceeding the threshold similarity score (410). For example, annotations for bookmarks having corresponding similarity scores that exceed a threshold score are used to present the bookmarks to the user as bookmark/annotation data 143. The presented bookmarks are linked to annotations having similarity scores that exceed a threshold score.
Bookmark or annotation data 143 can include description 144, deep links 146, web URL148, screen shot data 150, and app identifier 140. The client device 102 uses the resource identifier of the annotation data 143 to access a particular resource page and display the resource page for presentation to the user via the display of the client device 102. Screenshot 150 is a digital image of a resource page that may be presented to the user when the client device 102 accesses a stored bookmark. In some implementations, the annotation engine 120 stores the annotations in the index 126 (server-side) and transmits the annotation data 143 to the client device 102 for storage locally on the device using the index 114. The annotation data may also include audio files, such as for audibly responding to aspects of a query in the example audio environment. In some cases, an audio file of annotation data is accessed to audibly respond to aspects of a query in a full audio environment. Additionally, the client device 102 may include text-to-speech (TTS) functionality. For example, client device 102 may include a TTS component configured to convert the responsive text to audio for output at client device 102. The TTS component may access annotation data representing the extracted terms and text of the N-gram to generate an audio file for audibly responding to a query of the audio environment.
As discussed above, a particular annotation in the annotations collection may be used to retrieve a bookmark for accessing the resource page. Retrieving bookmarks using a particular annotation includes the system 100 receiving a voice input 105, the annotation engine 120 selecting the particular annotation from a set of annotations to cause retrieval of the bookmark, and retrieving the bookmark using the particular annotation to access a resource page. A particular annotation is selected based on the similarity score of the annotation exceeding a threshold similarity score. In some implementations, the annotation is configured as a trigger to cause retrieval of the bookmark. For example, a method for using annotations to retrieve bookmarks linked to the annotations by system 100 includes: i) determining that a trigger condition is satisfied based on an analysis of the transcription of the speech input 105; ii) retrieving a bookmark from the bookmark index in response to determining that the trigger condition is satisfied; and iii) provide the bookmark for display at the client device 102 in response to retrieving the bookmark from the bookmark index.
The following description illustrates example operations of the system 100 that involve retrieving stored bookmarks based on one or more generated annotations. The client device 102 may receive an input 105 of a user command "call my favorite bakery". The system 100 identifies the bakery using annotations including bookmarks for contact information of the user's favorite bakery. In some implementations, the device assistant 116 obtains information about the bakery, such as the address of the bakery, the telephone number of the bakery, or an active link for accessing the website of the bakery. The device assistant 116 performs a search for information about bakeries and generates a ranked list of results obtained during the search. Using the match scoring process described above, the system 100 obtains one or more bookmarks by matching the stored annotations and other data items of the bookmark to the extracted terms of the input command "call my favorite book".
The system 100 may use the obtained bookmarks to bias the search results. The bookmark is obtained based on the process for retrieving the annotation and the bookmark linked to the annotation described herein. The bookmark obtained may have a name/identifier "my favorite bakery" and may include a phone number stored for the user's favorite bakery. The device assistant 116 identifies a telephone number as a search result and uses the telephone number to call a user's favorite bakery. Alternatively, the client device 102 may receive input for a user command "call my bookmark bookmarked restaurant in San Francisco". For this command, a similar process of obtaining bookmarked information for a hamburger restaurant is used to extract the telephone number used to call the restaurant.
In some implementations, one or more bias terms are used to invoke a particular bookmark in the list of bookmarks. For example, the client device 102 receives a user command "what my bookmarks are" and the system 100 responds by generating a list of corresponding URIs or URLs for each bookmark instead of the content pointed to by the URI. To access the content pointed to by the URI, the bookmark can be invoked using a bias term. Bookmarks are invoked, for example, by using an identifier of the bookmark as a bias term/factor (e.g., "call my bookmark pointer reserve") or by using a location indicator to select a particular bookmark in the list (e.g., "call the second one"). In general, the described computational process for determining a match score for matching a query or command signal to a bookmark annotation may be used to invoke a bookmark or deep link to retrieve content. In some cases, content (e.g., a phone number) may be retrieved from a third party website that includes information about the bookmarked entity. The retrieved content may also be personal data stored locally on the client device 102. For example, the personal data may be audio data for playing songs/music files stored on the device, or user data for returning to a game state in a game application.
The annotation of stored bookmarks according to the described techniques is not only a ranking of data related to the bookmark, but also not just preferences of the individual user. But rather, the annotation of the stored bookmark can affect the physical design and operation of the system. For example, these effects may be evidenced by the particular design and operational requirements that allow any user to extract or obtain information from various data sources. These requirements also enable any user to create and use new file structures to organize and enable access to information obtained from different data sources. In some implementations, the computational logic of the annotation engine 120 is used to dynamically resize the new file structure. Such dynamic resizing enables optimization of available memory for storing and retrieving annotations and other information obtained from data sources. For example, the respective importance value of each annotation in the candidate annotation set may be used to dynamically allocate memory resources to store only the most important annotations, e.g., annotations exceeding a threshold importance value.
FIG. 5 is a block diagram of a computing device 500, 550, where the computing device 500, 550 may be used as a client or a server or servers to implement the systems and methods described in this document. Computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. Computing device 550 is intended to represent various forms of client devices, such as personal digital assistants, cellular telephones, smart phones, smart watches, head-mounted devices, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations described and/or claimed in this document. The computing devices 500, 550 may be example devices whose physical design and system operating requirements are beneficially affected by implementations of the techniques described above.
Computing device 500 includes a processor 502, memory 504, a storage device 506, a high-speed interface/controller 508 connecting to memory 504 and high-speed expansion ports 510, and a low speed interface 512 connecting to low speed bus 514 and storage device 506. Each of the components 502, 504, 506, 508, 510, and 512, are interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 502 can process instructions for execution within the computing device 500, including instructions stored in the memory 504 or on the storage device 506 to display graphical information for a GUI on an external input/output device, such as display 516 coupled to high speed interface 508. In other embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Additionally, multiple computing devices 500 may be connected, with each device providing portions of the necessary operations, e.g., as a server bank, a group of blade servers, or a multi-processor system.
The memory 504 stores information within the computing device 500. In one implementation, the memory 504 is a computer-readable medium. In one implementation, the memory 504 is a volatile memory unit or units. In another implementation, the memory 504 is a non-volatile memory unit or units. The storage device 506 is capable of providing mass storage for the computing device 500. In one implementation, the storage device 506 may be a computer-readable medium. In various different implementations, the storage device 506 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state storage device or array of devices, including devices in a storage area network or other configurations.
In one embodiment, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 504, the storage device 506, or memory on processor 502. In some implementations, the instructions are included in program code executed using the annotation engine 120. For example, the processor 502 executes instructions to cause one or more functions of the search engine interface 128 and annotation retrieval logic 130 to be performed in order to obtain and analyze the contextual data 134 for generating, dynamically storing, and retrieving annotations linked to existing bookmarks.
The high speed controller 508 manages bandwidth-intensive operations for the computing device 500, while the low speed controller 512 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some embodiments, the high-speed controller 512 may be a dedicated hardware circuit with design features that improve the performance of data analysis and annotation functions of the system 100. For example, the high-speed controller 508 may be implemented at the annotation engine 120 to uniquely manage data flow and data analysis of the contextual data 134. The particular design features of the controller 508 may enable the system 100 to quickly and efficiently obtain data for creating bookmarks, generate annotations for bookmarks, and dynamically allocate resources of the memory 504 to efficiently store data associated with annotations and bookmarks.
In some implementations, computing device 500 (and device 550) includes one or more additional special-purpose computing elements configured to implement various processes of system 100. For example, at least one of these elements may be used to implement the computational process of the search engine interface 128 such that existing bookmarks may be used to efficiently retrieve search results without requiring a comprehensive web search. The additional elements may execute specific computational rules to perform local searches based on analysis of the context data 134, rather than searching for external resources, which may require increased bandwidth and power consumption. Thus, these additional dedicated computing elements may serve to reduce the overall bandwidth, processing, memory, and power/battery requirements of system 100.
In one embodiment, the high-speed controller 508 is coupled to memory 504, display 516 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 510, which high-speed expansion ports 510 may accept various expansion cards (not shown). In this embodiment, low-speed controller 512 is coupled to storage device 506 and low-speed expansion port 514. The low-speed expansion port, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), is coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, for example, through a network adapter.
As shown in the figure, computing device 500 may be implemented in many different forms. For example, it may be implemented as a standard server 520, or multiple times in a group of such servers. It may also be implemented as part of a rack server system 524. Further, it may be implemented in a personal computer such as laptop 522. Alternatively, components from computing device 500 may be combined with other components in a client device (not shown), such as device 550. Each of such devices may contain one or more of computing devices 500, 550, and an entire system may include multiple computing devices 500, 550 in communication with each other.
The processor 552 can process instructions for execution within the computing device 550, including instructions stored in the memory 564. The processor may also include separate analog and digital processors. For example, the processor may provide for coordination of the other components of the device 550, such as control of user interfaces, applications run by device 550, and wireless communication by device 550.
The processor 552 may communicate with a user through a control interface 558 and a display interface 556 coupled to a display 554. The display 554 may be, for example, a TFT LCD display or an OLED display or other suitable display technology. The display interface 556 may comprise appropriate circuitry for driving the display 554 to present graphical and other information to a user. The control interface 558 may receive commands from a user and convert them for submission to the processor 552. In addition, an external interface 562 may be provided in communication with processor 552, so that near area communication of device 550 with other devices may be achieved. External interface 562 may provide for wired communication (e.g., via a docking procedure), or wireless communication (e.g., via bluetooth or other such technologies).
The memory 564 stores information within the computing device 550. In one implementation, the memory 564 is a computer-readable medium. In one implementation, the memory 564 is a volatile memory unit or units. In another implementation, the memory 564 is a non-volatile memory unit or units. Expansion memory 574 may also be provided and connected to device 550 through expansion interface 572, which may include, for example, a SIMM card interface. Such expansion memory 574 may provide additional storage space for device 550, or may also store applications or other information for device 550. Specifically, expansion memory 574 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, expansion memory 574 may be provided as a security module for device 550, and may be programmed with instructions that permit secure use of device 550. In addition, secure applications may be provided via the SIMM card, as well as additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
As discussed below, the memory may include, for example, flash memory and/or MRAM memory. In one embodiment, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 564, expansion memory 574, or memory on processor 552.
Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs, computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs, also known as programs, software applications or code, include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium," "computer-readable medium" refer to any computer program product, apparatus and/or device, such as magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs) for providing machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having: a display device for displaying information to a user, for example, a CRT (cathode ray tube) or LCD (liquid crystal display) monitor; and a keyboard and a pointing device, such as a mouse or a trackball, by which a user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input.
The systems and techniques described here may be implemented in a computing system that includes: the back-end component (e.g., as a data server), or comprises a middleware component (e.g., an application server), or comprises a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described herein), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, such as a communication network. Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), and the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
As used in this specification, the term "module" is intended to include, but not be limited to, one or more computers configured to execute one or more software programs including program code that causes the processing unit/device of the computer to perform one or more functions. The term "computer" is intended to include any data processing or computing device/system, such as a desktop computer, a laptop computer, a mainframe computer, a personal digital assistant, a server, a handheld device, a smartphone, a tablet computer, an e-reader, or any other electronic device capable of processing data.
Various embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly, other embodiments are within the scope of the following claims. While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features specific to particular embodiments. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment.
Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the present subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, some processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results.
Claims (21)
1. A computer-implemented method, comprising:
receiving, by a computing system, a first input associated with a bookmark;
in response to receiving the input, obtaining, by the computing system, context data for deriving an annotation of the bookmark;
obtaining, by an annotation engine of the computing system, a plurality of annotations, the plurality of annotations derived using information included in the contextual data and a transcription of the first input associated with the bookmark;
generating, by the annotation engine, an importance value for each annotation, the importance value characterizing a relationship between each annotation and at least one of:
i) the information included in the context data; or
ii) the transcription of the first input;
generating, by the annotation engine, a set of annotations for retrieving the bookmark, each annotation in the set of annotations being generated from the obtained plurality of annotations and each annotation having an importance value that exceeds a threshold; and
retrieving, by the computing system, the bookmark for accessing a resource page using a particular annotation in the set of annotations.
2. The method of claim 1, wherein using the particular annotation comprises:
receiving, by the computing system, a second input; and
selecting, by the annotation engine, the particular annotation from the set of annotations based on the second input to cause retrieval of the bookmark; and
retrieving, by the computing system, the bookmark for accessing the resource page using the particular annotation.
3. The method of claim 2, wherein selecting comprises:
analyzing the transcription of the second input;
obtaining one or more terms from the transcription of the second input;
for each annotation in the set of annotations:
determining a similarity score that indicates a degree to which a term in the transcription of the second input matches a term in the annotation used to retrieve the bookmark; and
selecting the particular annotation based on the similarity score of the annotation exceeding a threshold similarity score.
4. The method of any of the preceding claims, wherein the particular annotation is configured to trigger to cause retrieval of the bookmark, and the method further comprises:
determining, by the computing system, based on an analysis of the transcription of the second input, that a trigger condition is satisfied;
retrieving, by the computing system, the bookmark from a bookmark index in response to determining that the trigger condition is satisfied; and
providing, by the computing system, the bookmark for display at a client device in response to retrieving the bookmark from the bookmark index.
5. The method of any one of the preceding claims, wherein the context data used to derive the annotation is obtained from a plurality of data sources, each of the plurality of data sources comprising at least one of:
i) an identifier of the bookmark;
ii) a resource identifier stored as the bookmark;
iii) resource pages accessed using the resource identifiers;
iv) text of the resource page; or
v) information obtained from a search engine based on a search query referencing the resource identifier.
6. The method of claim 5, wherein the context data used to derive the annotation comprises an N-gram and data describing an entity, each of the N-gram and the data describing the entity obtained from a plurality of data sources with reference to the transcription of the first input.
7. The method of claim 5 or claim 6, wherein:
i) the resource page is generated by a web browser application, and
ii) the resource identifier is a Uniform Resource Locator (URL) that provides a resource address for accessing the resource page.
8. The method of claim 5 or claim 6, wherein:
i) the resource page is generated by an application accessed using a client device, the application configured to store one or more deep links in an application index, and
ii) the resource identifier is a Uniform Resource Locator (URL) for the resource page and is obtained from the application index including address data about the application.
9. The method of any of claims 5 to 8, wherein the resource identifier is at least one of:
a) data identifying a screen image of the resource page generated by an application accessed using the client device, or
b) Providing deep links for accessing resource addresses of the resource pages of the application.
10. An electronic system, comprising:
one or more processing devices;
one or more machine-readable storage devices to store instructions that are executable by the one or more processing devices to perform operations comprising:
receiving, by a computing system, a first input associated with a bookmark;
in response to receiving the first input, obtaining, by the computing system, context data for deriving an annotation of the bookmark;
obtaining, by an annotation engine of the computing system, a plurality of annotations, the plurality of annotations derived using information included in the contextual data and a transcription of the first input associated with the bookmark;
generating, by the annotation engine, an importance value for each annotation, the importance value characterizing a relationship between each annotation and at least one of:
i) the information included in the context data; or
ii) the transcription of the first input;
generating, by the annotation engine, a set of annotations for retrieving the bookmark, each annotation in the set of annotations being generated from the obtained plurality of annotations and each annotation having an importance value that exceeds a threshold; and
retrieving, by the computing system, the bookmark for accessing a resource page using a particular annotation in the set of annotations.
11. The electronic system of claim 10, wherein using the particular annotation comprises:
receiving, by the computing system, a second input; and
selecting, by the annotation engine, the particular annotation from the set of annotations based on the second input to cause retrieval of the bookmark; and
retrieving, by the computing system, the bookmark for accessing the resource page using the particular annotation.
12. The electronic system of claim 11, wherein selecting comprises:
analyzing the transcription of the second input;
obtaining one or more terms from the transcription of the second input;
for each annotation in the set of annotations:
determining a similarity score that indicates a degree to which a term in the transcription of the second input matches a term in the annotation used to retrieve the bookmark; and
selecting the particular annotation based on the similarity score of the annotation exceeding a threshold similarity score.
13. The electronic system of any of claims 10-12, wherein the particular annotation is configured to trigger to cause retrieval of the bookmark, and the method further comprises:
determining, by the computing system, based on an analysis of the transcription of the second input, that a trigger condition is satisfied;
retrieving, by the computing system, the bookmark from a bookmark index in response to determining that the trigger condition is satisfied; and
providing, by the computing system, the bookmark for display at a client device in response to retrieving the bookmark from the bookmark index.
14. The electronic system of any of claims 10-13, wherein the context data used to derive the annotation is obtained from a plurality of data sources, each of the plurality of data sources comprising at least one of:
i) an identifier of the bookmark;
ii) a resource identifier stored as the bookmark;
iii) resource pages accessed using the resource identifiers;
iv) text of the resource page; or
v) information obtained from a search engine based on a search query referencing the resource identifier.
15. The electronic system of claim 14, wherein the context data used to derive the annotation comprises an N-gram and data describing an entity, each of the N-gram and the data describing the entity obtained from a plurality of data sources with reference to the transcription of the first input.
16. The electronic system of claim 14 or claim 15, wherein:
i) the resource page is generated by a web browser application, and
ii) the resource identifier is a Uniform Resource Locator (URL) that provides a resource address for accessing the resource page.
17. The electronic system of claim 14 or claim 15, wherein:
i) the resource page is generated by an application accessed using a client device, the application configured to store one or more deep links in an application index, and
ii) the resource identifier is a Uniform Resource Locator (URL) for the resource page and is obtained from the application index including address data about the application.
18. The electronic system of any of claims 14 to 17, wherein the resource identifier is at least one of:
a) data identifying a screen image of the resource page generated by an application accessed using the client device, or
b) Providing deep links for accessing resource addresses of the resource pages of the application.
19. One or more machine-readable storage devices storing instructions executable by one or more processing devices to perform operations comprising:
receiving, by a computing system, a first input associated with a bookmark;
in response to receiving the first input, obtaining, by the computing system, context data for deriving an annotation of the bookmark;
obtaining, by an annotation engine of the computing system, a plurality of annotations, the plurality of annotations derived using information included in the contextual data and a transcription of the first input associated with the bookmark;
generating, by the annotation engine, an importance value for each annotation, the importance value characterizing a relationship between each annotation and at least one of:
i) the information included in the context data; or
ii) the transcription of the first input;
generating, by the annotation engine, a set of annotations for retrieving the bookmark, each annotation in the set of annotations being generated from the obtained plurality of annotations and each annotation having an importance value that exceeds a threshold; and
retrieving, by the computing system, the bookmark for accessing a resource page using a particular annotation in the set of annotations.
20. The machine-readable storage device of claim 19, wherein using the particular annotation comprises:
receiving, by the computing system, a second input; and
selecting, by the annotation engine, the particular annotation from the set of annotations based on the second input to cause retrieval of the bookmark; and
retrieving, by the computing system, the bookmark for accessing the resource page using the particular annotation.
21. One or more machine-readable storage devices storing instructions executable by one or more processing devices to perform the method of any of claims 1-9.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862691061P | 2018-06-28 | 2018-06-28 | |
US62/691,061 | 2018-06-28 | ||
PCT/US2019/027660 WO2020005369A1 (en) | 2018-06-28 | 2019-04-16 | Annotation and retrieval of contextual deep bookmarks |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112262382A true CN112262382A (en) | 2021-01-22 |
Family
ID=66324011
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980038858.8A Pending CN112262382A (en) | 2018-06-28 | 2019-04-16 | Annotation and retrieval of contextual deep bookmarks |
Country Status (4)
Country | Link |
---|---|
US (2) | US11574028B2 (en) |
EP (1) | EP3788509A1 (en) |
CN (1) | CN112262382A (en) |
WO (1) | WO2020005369A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115277402A (en) * | 2021-04-29 | 2022-11-01 | 慧与发展有限责任合伙企业 | Method and system for facilitating automatic annotation and dynamic display of switch configurations |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11443006B2 (en) * | 2021-01-06 | 2022-09-13 | Vmware, Inc. | Intelligent browser bookmark management |
US11269969B1 (en) * | 2021-02-08 | 2022-03-08 | Capital One Services, Llc | Systems and methods for automatic and adaptive browser bookmarks |
US11880403B2 (en) * | 2021-10-08 | 2024-01-23 | EMC IP Holding Company LLC | Document data management via graph cliques for layout understanding |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080027914A1 (en) * | 2006-07-28 | 2008-01-31 | Yahoo! Inc. | System and method for searching a bookmark and tag database for relevant bookmarks |
US20080172364A1 (en) * | 2007-01-17 | 2008-07-17 | Microsoft Corporation | Context based search and document retrieval |
CN105144165A (en) * | 2013-03-08 | 2015-12-09 | 谷歌公司 | Social annotations for enhanced search results |
US20180090135A1 (en) * | 2016-09-23 | 2018-03-29 | Microsoft Technology Licensing, Llc | Conversational Bookmarks |
Family Cites Families (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020184319A1 (en) * | 2001-05-31 | 2002-12-05 | Willner Barry E. | Systems and methods for facilitating access to an information address |
US20050114756A1 (en) | 2003-11-26 | 2005-05-26 | Nokia Corporation | Dynamic Internet linking system and method |
CN101305366B (en) | 2005-11-29 | 2013-02-06 | 国际商业机器公司 | Method and system for extracting and visualizing graph-structured relations from unstructured text |
US20070143298A1 (en) * | 2005-12-16 | 2007-06-21 | Microsoft Corporation | Browsing items related to email |
US7870475B2 (en) * | 2006-05-16 | 2011-01-11 | Yahoo! Inc. | System and method for bookmarking and tagging a content item |
US7493293B2 (en) | 2006-05-31 | 2009-02-17 | International Business Machines Corporation | System and method for extracting entities of interest from text using n-gram models |
US20080086496A1 (en) * | 2006-10-05 | 2008-04-10 | Amit Kumar | Communal Tagging |
US20090144240A1 (en) * | 2007-12-04 | 2009-06-04 | Yahoo!, Inc. | Method and systems for using community bookmark data to supplement internet search results |
US20100169756A1 (en) | 2008-12-29 | 2010-07-01 | Yahoo! Inc. | Automated bookmarking |
US10424000B2 (en) * | 2009-05-30 | 2019-09-24 | Edmond K. Chow | Methods and systems for annotation of digital information |
KR101306667B1 (en) | 2009-12-09 | 2013-09-10 | 한국전자통신연구원 | Apparatus and method for knowledge graph stabilization |
US9197513B2 (en) * | 2012-05-03 | 2015-11-24 | Salesforce.Com, Inc. | Computer implemented methods and apparatus for representing a portion of a user interface as a network address |
WO2014061905A1 (en) * | 2012-10-16 | 2014-04-24 | 에스케이플래닛 주식회사 | System for providing motion and voice based bookmark and method therefor |
US9355269B2 (en) * | 2014-05-06 | 2016-05-31 | Arian Shams | Method and system for managing uniquely identifiable bookmarklets |
WO2015200600A1 (en) * | 2014-06-25 | 2015-12-30 | Google Inc. | Deep links for native applications |
US20160350136A1 (en) | 2015-05-27 | 2016-12-01 | Google Inc. | Assist layer with automated extraction |
US11526575B2 (en) * | 2020-07-29 | 2022-12-13 | International Business Machines Corporation | Web browser with enhanced history classification |
-
2019
- 2019-04-16 EP EP19720332.6A patent/EP3788509A1/en not_active Withdrawn
- 2019-04-16 WO PCT/US2019/027660 patent/WO2020005369A1/en unknown
- 2019-04-16 US US16/972,250 patent/US11574028B2/en active Active
- 2019-04-16 CN CN201980038858.8A patent/CN112262382A/en active Pending
-
2023
- 2023-01-26 US US18/102,037 patent/US20230169134A1/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080027914A1 (en) * | 2006-07-28 | 2008-01-31 | Yahoo! Inc. | System and method for searching a bookmark and tag database for relevant bookmarks |
US20080172364A1 (en) * | 2007-01-17 | 2008-07-17 | Microsoft Corporation | Context based search and document retrieval |
CN105144165A (en) * | 2013-03-08 | 2015-12-09 | 谷歌公司 | Social annotations for enhanced search results |
US20180090135A1 (en) * | 2016-09-23 | 2018-03-29 | Microsoft Technology Licensing, Llc | Conversational Bookmarks |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115277402A (en) * | 2021-04-29 | 2022-11-01 | 慧与发展有限责任合伙企业 | Method and system for facilitating automatic annotation and dynamic display of switch configurations |
Also Published As
Publication number | Publication date |
---|---|
EP3788509A1 (en) | 2021-03-10 |
WO2020005369A1 (en) | 2020-01-02 |
US20230169134A1 (en) | 2023-06-01 |
US20210240793A1 (en) | 2021-08-05 |
US11574028B2 (en) | 2023-02-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10417344B2 (en) | Exemplar-based natural language processing | |
US10346415B1 (en) | Determining question and answer alternatives | |
JP6667504B2 (en) | Orphan utterance detection system and method | |
US10521479B2 (en) | Evaluating semantic interpretations of a search query | |
US10181322B2 (en) | Multi-user, multi-domain dialog system | |
US9684741B2 (en) | Presenting search results according to query domains | |
US20230169134A1 (en) | Annotation and retrieval of personal bookmarks | |
US11204927B2 (en) | Contextual search on multimedia content | |
US10592571B1 (en) | Query modification based on non-textual resource context | |
US9229974B1 (en) | Classifying queries | |
US11829433B2 (en) | Contextual deep bookmarking | |
CN111247778A (en) | Conversational/multi-turn problem understanding using WEB intelligence | |
AU2017216520A1 (en) | Common data repository for improving transactional efficiencies of user interactions with a computing device | |
US9811592B1 (en) | Query modification based on textual resource context | |
US10691702B1 (en) | Generating ranked lists of entities | |
WO2024036616A1 (en) | Terminal-based question and answer method and apparatus | |
US20230334073A1 (en) | Inline search based on intent-detection | |
CN111213136A (en) | Generation of domain-specific models in networked systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |