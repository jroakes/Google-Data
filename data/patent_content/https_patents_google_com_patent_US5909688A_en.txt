US5909688A - Information management system - Google Patents
Information management system Download PDFInfo
- Publication number
- US5909688A US5909688A US08/948,085 US94808597A US5909688A US 5909688 A US5909688 A US 5909688A US 94808597 A US94808597 A US 94808597A US 5909688 A US5909688 A US 5909688A
- Authority
- US
- United States
- Prior art keywords
- record
- entity
- information
- records
- identifier
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99942—Manipulating data structure, e.g. compression, compaction, compilation
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- the present invention relates to an information management system and a method therefor. More specifically, the present invention relates to an information management system for managing mutually related information items intended for use in process schedule control by way of example, each information item may be assigned a unique identifier.
- an operational environment that involves man-machine interactions in four-dimensional events must be managed.
- relationships between object activities and men or machines for processing activities there are a tree structure pattern, representing an organization, and a work flow, representing a sequence of processes.
- the activities are within constraints of time, cost, quality, company's rules, procedures, etc. It is desirable that the complex operational environment be defined and managed with as little information as possible in an efficient manner.
- Information required for process schedule control includes information on the organization of a company as an organization for performing work and information on individual working processes. Of the information on the organization of the company, rank (upper and lower) relationships among workers are important. Of the information on working processes, time-sequential (before and after) relationships among the working processes are important.
- a tree structure using bidirectional (upward and downward) pointers requires twice as many pointers as a tree structure using unidirectional (upward or downward) pointers. Therefore, many of conventional tree structures have downward pointers but not upward pointers. With tree structures only having such downward pointers, downward data retrieval from the tree's root to its leaves can be performed, but upward retrieval is impossible.
- pointers are generally of one dimension and in many cases there are only unidirectional pointers is to decrease the amount of data required to indicate relationships among items of information.
- the present invention assigns a unique identifier to an individual actual information item, i.e., an entity information item for information management.
- the information management system of the present invention comprises a structure management unit, an entity management unit, and an identifier management unit.
- the structure management unit stores a structure management table constructed from records having labels representing types of individual information items.
- the number of the types of individual information items is generally smaller than the total number of the individual information items. Thus, it is reasonable to allow for the records in the structure management table to be far fewer in number than entity information items.
- In each record in the structure management table are placed (upward and downward) pointers to high- and low-ranking records that are structurally related to that record (vertically structured records) and (forward and rearward) pointers to records that are in the same rank in the vertical relationship and are to the left and right of or in the front and rear of that record (horizontally structured records).
- the upward pointers permit data retrieval toward the root which is highest in rank in a tree structure.
- the forward and rearward pointers permit retrieval of data items that are horizontally related.
- the structure management unit stores more than one structure management tables.
- One or more structure management tables are also provided to define relationships among records in these structure management tables.
- the entity management unit stores entity management tables which are each constructed from records to individual information items and which generally correspond in number to the structure management tables.
- entity management tables which are each constructed from records to individual information items and which generally correspond in number to the structure management tables.
- a label of a record in the structure management tables an identifier for an entity information item, a pointer to a low-ranking record, a pointer to a right or rear-ranking record, and a pointer to that entity information item corresponding to that identifier.
- Each label representing the type of entity information are generally associated more than one entity information items.
- the identifier management unit stores an identifier management table having identifier lists each corresponding to a respective one of the labels used in the structure management tables. In each identifier list is placed a set of an identifier and a pointer to a record corresponding to the identifier in the entity management tables.
- the identifier management table serves to couple the structure management tables and the corresponding entity management tables by using a correspondence between a label and identifiers.
- the entity management unit manages records directly corresponding to entity information items, and the structure management unit defines connection relationships among types of the entity information items. By managing the entity information items and their connection relationships separately in this way, the number of pointers can be reduced. Since the structure management tables store upward pointers and forward pointers (or pointers to a left record), access to records that are in the high rank and in the same rank in the vertical relationship is permitted even if the corresponding entity management tables do not have those pointers.
- the information management system of the present invention uses the structure management tables in the structure management unit and the entity management tables in the entity management unit to manage entity information items through the intermediation of the identifier management table in the identifier management unit, thereby permitting retrieval and updating of data items.
- this information management system permits complex process schedule control to be performed exactly.
- the organizational hierarchical structure and the time-sequential structure of an operational environment can be represented by a single entity management table.
- complex information can be defined by the consistent pointer structure, which permits the definition contents to be created and altered without depending on professional programmers.
- FIG. 1 illustrates major components of an information management system embodying the present invention
- FIG. 2 illustrates the entire configuration of an information management system of the present invention
- FIG. 3 illustrates an example of a format of a record in a template of the present invention
- FIG. 4A shows an example of a general form of an organization template in the information management system of the present invention
- FIG. 4B shows an example of a pointer structure of the organization template in the information management system of the present invention
- FIG. 5A shows an example of a general form of an employee template in the information management system of the present invention
- FIG. 5B shows an example of a pointer structure of the employee template in the information management system of the present invention
- FIG. 6A shows an example of a general form of a nexus template in the information management system of the present invention
- FIG. 6B shows an example of a pointer structure of the nexus template in the information management system of the present invention
- FIG. 7 shows an example of a format of a record in an entity management table of the present invention
- FIG. 8 shows an example of an organization entity management table in the information management system of the present invention
- FIG. 9 shows an example of an employee entity management table in the information management system of the present invention.
- FIG. 10 shows an example of a nexus entity management table in the information management system of the present invention
- FIG. 11 shows an XID management table in the information management system of the present invention
- FIGS. 12A and 12B are a flowchart for data retrieval according to the present invention.
- FIG. 12C is a detailed flowchart for the data retrieval according to the present invention.
- FIG. 13 is a simplified schematic block diagram of a process schedule control system using the information management system of the present invention.
- FIG. 14 shows the manner in which data is processed in the process schedule control system of the present invention
- FIG. 15 shows an example of a format of a record in templates in the process schedule control system of the present invention
- FIG. 16A shows an example of a general form of a project template in the process schedule control system of the present invention
- FIG. 16B shows a pointer structure of the project template in the process schedule control system of the present invention
- FIG. 17A shows an example of a general form of an organization template in the process schedule control system of the present invention
- FIG. 17B shows a pointer structure of the organization template in the process schedule control system of the present invention
- FIG. 18A shows an example of a general form of a working instruction template in the process schedule control system of the present invention
- FIG. 18B shows a pointer structure of the working instruction template in the process schedule control system of the present invention
- FIG. 19 shows an example of a general form of a nexus template in the process schedule control system of the present invention
- FIG. 20 shows an example of a general form of a staff template in the process schedule control system of the present invention
- FIG. 21 shows an example of a general form of a budget template in the process schedule control system of the present invention
- FIG. 22 shows an example of a general form of a schedule template in the process schedule control system of the present invention
- FIG. 23 shows the activation of a program for finding the entity of a rear-rank record in the process schedule control system of the present invention
- FIG. 24 shows an example of a project entity management table in the process schedule control system of the present invention
- FIG. 25 shows an example of an organization entity management table in the process schedule control system of the present invention
- FIG. 26 shows an example of a working instruction entity management table in the process schedule control system of the present invention
- FIG. 27 shows an example of a nexus entity management table in the process schedule control system of the present invention
- FIG. 28 shows an example of a staff entity management table in the process schedule control system of the present invention
- FIG. 29 shows an example of a budget entity management table in the process schedule control system of the present invention.
- FIG. 30 shows an example of a schedule entity management table in the process schedule control system of the present invention
- FIG. 31 shows an example of an XID entity management table in the process schedule control system of the present invention
- FIG. 32 shows the algorithm of basic processing by the work flow control unit in the present invention
- FIG. 33 is a flowchart for the working instruction for workers according to the present invention.
- FIG. 34 is a detailed flowchart for the condition check processing according to the present invention.
- FIG. 35 is a flowchart for the creation of a template by a policy definition unit in the present invention.
- FIG. 36 is a flowchart for the creation of an entity management table by a project definition unit in the present invention.
- FIG. 37 is a flowchart for the creation of an XID management table by the project definition unit in the present invention.
- FIG. 1 there is illustrated major components of an information management system embodying the present invention.
- the information management system of FIG. 1 assigns a unique identifier (XID) to each of the actual information items, i.e., entity information items for information management
- XID unique identifier
- a structure management unit 1 manages connection relationships among the types of individual information items
- an entity management unit 2 manages records corresponding to individual information items.
- the structure management unit 1 stores one or more structure management tables (templates).
- structure management tables templates
- Each table comprises records corresponding to the respective types of the individual information items.
- an organization template which is one of several templates, comprises records corresponding to the types of information items, such as company, department, office, and section. Therefore, the number of records in a structure management table is much less than the total number of entity information items.
- each record there are stored pointers to high-ranking and/or low-ranking records that have structural relationships with that record and pointers to front-rank (preceding) and/or rear-rank (succeeding) records relative to that record which are in the same rank in terms of in the high-and-low-rank relationship.
- Storing pointers to higher-rank records allows data retrieval toward the root that is at the high rank of the tree structure. Also, storing of pointers to the front-rank and/or rear-rank records allows retrieval of data items which are in the same rank.
- a department record and a section record there are stored upward and downward pointers. If there are more than one sections, there are stored pointers to front-rank and/or rear-rank records that are in the same rank in the high-and-low-rank relationship (vertical relationship).
- the horizontal relationship (front-rear relationship) between a department and an office or between sections is not so close as the vertical relationship (high-low relationship) between a department and a section. Thus, the horizontal and vertical relationships are definitely distinguishable from each other.
- the entity management unit 2 stores entity management tables, for example.
- the entity management tables are equal in number to the structure management tables in general. A plurality of entity management tables are normally provided.
- the entity management tables, which correspond in structure to the structure management tables, have the structure of the same format as the structure management tables for example.
- the records in the entity management tables store label names corresponding to the types of information of records in the structure management tables, identifiers (XIDs) of entity information items corresponding to the label names, pointers to low-rank and rear-rank records corresponding to the structure of the structure management tables, and pointers pointing to entity information items corresponding to the XIDs.
- XIDs identifiers
- a record of department in an entity management table corresponding to the above-mentioned organization template there are stored entity information corresponding to that record, an XID value of, for example, a technical department, a pointer to a section record which is a low-rank record, a pointer to a record for another department which is in the same rank as that department, and a pointer to that department which is the entity information item
- This record itself is pointed to by a pointer to a low-rank record stored in a record of a company corresponding to an entity information item representing, for example, "FUJITSU".
- An identifier management unit 3 stores pointers pointing to records for entity information items in the entity management tables correspondingly to XID values as unique identifiers assigned to individual entity information items.
- XID lists in which the pointers and the corresponding XIDs are stored which correspond to the respective templates stored in the structure management unit 1, are each provided for the respective label names of the records in the entity management tables.
- an XID list is provided for each of a company, department, office, and section which are label names representing the types of information for the organization.
- an XID list for the label name of department there are generally stored sets of XID values corresponding to entities of records having the label name of department and pointers pointing to these records in the entity management table representing the entity of the organization.
- information management is carried out by using the templates in the structure management unit 1 and the entity management tables in the entity management unit 2 through the intermediation of a XID management table in the identifier management unit 3.
- the templates indicating relationships among records indicating the types of information there are stored pointers to high, low, front and rear-rank records (upward, downward, forward and rearward pointers).
- the entity management tables there are stored only pointers to low and rear-rank records as pointers indicating relationships among information items.
- the templates have pointers to high-rank records and front-rank records, there is no need for storing these pointers in the entity management tables. Therefore, the amount of data (pointer information) to be stored in the entity management tables can be reduced. In addition, since the number of records in the templates are relatively small, the amount of data does not increase much even if the upward, downward, forward and rearward pointers are stored.
- FIG. 2 shows the whole configuration of the information management system of FIG. 1, which comprises an input/output unit 4, a processor unit 5, a data management unit 6, and a database 7.
- the structure management unit 1, the entity management unit 2, and the identifier management unit 3 of FIG. 1 are implemented as storage areas in the database 7.
- the input/output unit 4 comprises a visual display unit or a printer, which is used to input and update information to be entered into the database 7 or to output information being managed.
- the processor unit 5 is used to enter input information into the database 7 or retrieve information from the database 7 via the data management unit 6.
- the data management unit 6 writes data into or reads data from the database 7.
- an information retrieval method for retrieving the name of the chief of a section in the case where there are available three types of templates: an organization template as described above, an employee template for managing employees names, their skills, and their nicknames, and a nexus template indicating relationships between information in the organization template and information in the employee template. It is supposed here that the XID as the identifier of that section is already known.
- the nexus template in which relationships between section information and name information are structurally indicated is searched for the type of information that is before or above section information in rank and moreover is before or above information to be searched for, i.e., the name, in rank. It is supposed here that this type of information is post.
- the remaining work is to search the entity management table corresponding to the employee table by using the XID for that name to thereby ascertain the name of an employee corresponding to that XID.
- an entry of name is retrieved from label names corresponding to the employee template within the XID management table, and a pointer matching that XID value is retrieved from the XID list pointed to by the entry.
- This pointer points to a record in the entity management table, which stores a pointer to an entity. This pointer to an entity is used to find entity information of name as the result of retrieval.
- FIG. 3 shows a format of a record stored in a structure management table, i.e., a template, which indicates relationships among types of individual data items as a structure linked by pointers, in a series of data items stored in the database 7.
- a structure management table i.e., a template
- the record is headed by a label indicating a type of information, followed by an upward pointer to a record in the high rank, a downward pointer to a record in the low rank, a forward pointer to a record in the front rank and a rearward pointer to a record in the rear rank (these two records are in the same rank in the vertical relationship) in a template indicating structural relationships among types of directly related information items, e.g., an organization template, and ended by conditions for the number of entity information items corresponding to the type of information.
- the number of entity information items are one or more in the case of section and one in the case of employee's name. These conditions are used in adding new records to the entity management table.
- FIG. 4A shows an example of a general form of an organization template. Below a company record there are placed a department or office record. Below the department record there is placed a section record. Below the office record there is placed a group record.
- FIG. 4B shows an example of a pointer structure in the organization template. As shown, among the records comprising the organization template upward, downward, forward, and rearward pointers are set as needed.
- FIG. 5A shows an example of a general form of an employee template.
- FIG. 5B shows the structure of pointers used in the employee template.
- a name record In the employee template, below a person (employee) record there is placed a name record.
- a record in the same rank as the name record there is placed a record of skill
- an nickname record Below the name record.
- FIG. 6A shows an example of a general form of a nexus template indicating relationships among entity information items stored in entity management tables (to be described later) for managing entity information items, which correspond to the organization template and the employee template.
- FIG. 6B shows the pointer structure in the nexus template.
- the nexus template there are stored a task record in the highest rank, a post record in the next rank, and a department record below the post record.
- a name record is placed in the rear of the post record.
- a section record is placed in the rear of the department record. For example, the number of sections placed below the post are stored in the condition storage area of the section record.
- FIG. 7 shows an example of a format of a record in an entity management table in which entity information items are stored, which corresponds to each of the above-described structure management tables, i.e., templates.
- One record in the entity management table corresponds to one entity information item, which is headed by a label name for that entity information item, followed by an identifier XID unique to that entity information item, a pointer to a record in the low rank, a pointer to a record in the rear rank, and ended by a pointer to an entity information item (an entity pointer).
- FIG. 8 shows an example of an entity management table corresponding to the organization template shown in FIGS. 4A and 4B.
- a section record whose entity information is "production section” is pointed to by a rearward pointer to a record in the rear rank stored in a section record whose entity information is "design section".
- the downward pointer is set in only the leading record.
- the lower records having the same high record are linked by the rearward pointers.
- FIG. 9 shows an example of an entity management table corresponding to the employee template of FIGS. 5A and 5B.
- a nickname record is placed below the name record.
- the entity pointer of name points to entity information "JOHN SMITH”.
- the entity pointer of skill points to "manager", and the entity pointer of nickname points to "123456".
- the person record that is the highest record in the employee entity management table has no corresponding entity information and stores no entity pointer.
- the person record groups together its lower records of name, skill and nickname and is used for discrimination against other records of name, etc.
- FIG. 10 shows an example of an entity management table corresponding to the nexus template of FIGS. 6A and 6B.
- the pointer structure is the same as that in FIGS. 8 and 9.
- This entity management table is used to establish relationships among entity information items stored in the organization entity management table of FIG. 8 and the employee entity management table of FIG. 9. This implies that there is no need of storing pointers to entity information items themselves in this table.
- two department sections and one section record, which are lower records of the record of post, indicates that these posts are served concurrently.
- the records of task and post of FIG. 10 are not present in the organization entity management table and the employee entity management table. These records symbolize a set (object) of lower records and have thus no corresponding entity information items.
- FIG. 11 shows an example of an XID management table needed to retrieve one information item and other related information items stored in the database 7.
- the XID management table comprises a template name table 10, label retrieval tables 11, 12 and 13 which respectively correspond to the templates stored in the template name table, and XID lists 14a, 14b, . . . , 15a, 15b, . . . , 16a, 16b, . . . which are respectively correspond to the labels in all the label retrieval tables.
- the template name table 10 In the template name table 10 are stored pointers to the label retrieval tables 11, 12 and 13 which store label names of records stored in the respective templates according to the names of all of the templates, which are, in the above example, the organization template, the employee template, and the nexus template.
- each of the label retrieval tables 11, 12 and 13 are stored pointers to the XID lists corresponding to the respective label names.
- XID lists 14a, 14b,. . . each of which corresponds to a respective one of label names, i.e., company, department, section, etc., which are stored in the label retrieval table 11 corresponding to the organization template.
- each XID list there are stored an XID value of an entity information item of a record in the above entity management table and a pointer to that record in pairs for all records having the corresponding label name.
- FIGS. 12A and 12B are a process flowchart illustrating the retrieval of one information item and other related information items by the processor unit 5 through intermediation of the XID management table of FIG. 11 taking, as an example, a name retrieval for finding a name of a chief of a section from a name of that section whose XID is already known.
- FIG. 12C is a detailed flowchart for the processing in step S26 of FIG. 12A.
- an entry of a template to which that section belongs is retrieved from the template name table 10 of the XID management table of FIG. 11 in step S21.
- an entry of name is retrieved with name as a retrieval key.
- step S22 If the label of name is found in step S22, then a record of section having the XID already known is retrieved from the corresponding entity management table and then the XID of a record of name is obtained using a pointer stored in that section record in step S28. Next, the XID of the name is used to find its entity information item in step S29 and then the process terminates. If the name record obtained in step S29 contains an entity pointer, then the entity of the name will be directly obtained by using that pointer.
- the label retrieval table 11 has no name label. In step S23, therefore, an entry of the nexus template is retrieved from the template name table 10. In step S24, labels of section and name are retrieved from the label retrieval table 13 pointed to by that entry.
- step S25 In the absence of one of labels of section and name in step S25, the process returns to step S23 to find an entry of another nexus template when there are more than one nexus templates. And the step S24 is repeated. The process terminates if only one nexus template exists or if no next entry is found as a result of the search of the label retrieval tables of all of the nexus templates in step S27. In this case, it is seen that the name label does not exist from the beginning or a section-to-name correspondence is not established. Accordingly, the name of the section chief cannot be found.
- the nexus template of FIG. 6B has both of the labels of section and name.
- step S26 therefore, the name XID corresponding to the section XID already known is retrieved using pointers of the nexus template and the XID list.
- the retrieval processing in step S26 is illustrated in detail in FIG. 12C.
- step S41 of FIG. 12C the position of a name record is searched for beginning with a section record by using a pointer in the nexus template.
- step S42 a record that is before or above the section record in rank is searched for and that record is chosen as a retrieval key in step S43.
- step S44 an entry of the nexus template is found from the template name table 10 of FIG. 11.
- step S45 the corresponding label in the label retrieval table 13 pointed to by that entry is found.
- step S46 the XID list corresponding to that label is found, and in subsequent step S47, a record that is above the section record having the above-described XID already known is found.
- step S48 an examination is made as to whether the record obtained in the nexus entity management table is linked to a name record. If linked, then the XID of the entity of the name is obtained in step S49. If not linked to the name record, on the other hand, the process from step S42 to S47 is repeated. Consequently, a record that is before or above the name record in rank will be chosen as a retrieval key.
- the nexus template of FIG. 6B is used to obtain a department record that is before the section record in rank in step S42.
- that department record is used as a retrieval key (S43) to thereby find a label of department within the label retrieval table 13 (S45) and the corresponding XID list (S46).
- the records within the nexus entity management table pointed to by pointers in the department XID list are searched for a department record that is above the section record having the XID already known (S47).
- the name record is not linked to the department record. This means that the name record cannot be retrieved by the department record.
- the process returns to step S42 to obtain a post record that is above the department record within the nexus template of FIG. 6B.
- the post record is used as a retrieval key (S43) to thereby find the label of post in the label retrieval table 13 of FIG. 11 (S45) and then the corresponding XID list 16b (S46).
- a search is made of the records within the nexus entity management table pointed to by pointers in the XID list 16b for a post record that is above the section record having the known XID (S47).
- the name record is linked to the post record.
- the name record pointed to by the rearward pointer of the post record obtained in step S47 is searched for and its XID is obtained.
- a record that is before a record serving as a starting point within the template is first found. If access to the desired record cannot be obtained by the corresponding record in the entity management table, then a record that is further before in rank is searched for. When access to the desired record cannot be obtained even if a search is made of all the records that are in the same rank as the record serving as the start point, a search is next made for a higher record. Sequential retrieval of records that are in the same rank as that higher record is performed This process is repeated. If access to the desired record is permitted, then its XID is obtained.
- the nexus entity management table stores only XIDs of entities of names, but not pointers to entity information items. Thus, the process of finding the name as an entity information item is continued in steps following step S30 in FIG. 12B.
- step S30 an entry of other templates than the nexus template are found from the templates managed by the template name table 10 of FIG. 11.
- step S31 a search is made of the contents of the label retrieval tables for a necessary label name, i.e., the label of "name" here. If the label of name is not found in step S32, another entry in the template name table 10 is found and the process returns to step S30. Then the process of step S31 is repeated. The label retrieval tables are searched for all the entries other than the nexus template. If the next entry cannot be found in step S37, then the process is terminated.
- step S33 since the employee template of FIG. 5B has a name label, an XID list pointed to by the name label is obtained in the XID management table in step S33.
- step S34 a search is made of the XID list for an XID that matches the XID obtained in step S26.
- a decision is then made in step S35 as to whether or not there is a match in XID.
- step S36 If there is a match, then an entity of the name record pointed to by the pointer corresponding to that XID is obtained as a result of retrieval in step S36. Then, the process terminates. If there is no match, on the other hand, then the process returns to step S30 to repeat the retrieval of the name label from the label retrieval table corresponding to the other template. The repetition of the process is due to the general fact that there are more than one labels having the same name in the label retrieval tables.
- the labels of section and employee will be retrieved in step S24.
- a template having a nickname label is searched for.
- the employee template has a nickname label and a name label existing in the nexus template.
- a search is made, in the employee template, for records that are in high, low, front and rear ranks with respect to the name record with name as an indirect key to thereby examine whether there is a nickname record among them.
- the XID of the name of the section chief is found in accordance with the flow of FIG. 12A and the nickname record pointed to by the corresponding name record in the employee entity management table.
- the entity information item pointed to by the entity pointer of that record is read out as the nickname of the section chief.
- a retrieval path (retrieval procedure) which meets retrieval conditions is first determined by using templates.
- a retrieval path having an desired entity information item is determined.
- a decision can be made as to whether or not the results that meet retrieval conditions can be obtained by using templates.
- the retrieval from the nexus entity management table having no entity pointers is also possible. If a path by which information is pointed to can be known, any other retrieval is permitted.
- FIG. 13 specifically illustrates, in block diagram form, that process schedule control system.
- the process schedule control system of FIG. 13, which is a more specific form of the information management system of FIG. 2, comprises a terminal 21, a printer 22, an interface unit 23, a data management unit 24, a database 25, a policy definition unit 26, a project definition unit 27, a work flow control unit 28, a standard report unit 29, a special report unit 30, and a memory 31.
- the policy definition unit 26 generates on the memory 31 structure management tables for defining routine work that becomes an object of schedule control as routine work templates, which, in turn, are entered via the data management unit 24 into the database 25.
- the project definition unit 27 sets values appropriate to actual work to the routine work defined by the policy definition unit 26 as the contents of entity management tables by way of example and generates a corresponding XID management table, which are entered into the database 25.
- the work flow control unit 28 manages the start and end of work in a process using the templates, the entity management tables and the XID management table and provides necessary information on working instructions to a worker through the interface unit 23.
- the worker enters the results of work from the terminal 21, which are sent to the work flow control unit 28.
- the standard report unit 29 creates a report on the difference between the schedule of work and the actual results thereof on the basis of the results of work which have been entered into the work flow control unit 28 and provides it to the terminal 21 or the printer 22.
- the special report unit 30 records and manages historical information such as information on a person who developed a subroutine of a certain number for that work four years ago for example, and outputs it in response to an inquiry about it.
- the data management unit 24 controls reading or writing of data between the database 25 and the memory 31.
- the interface unit 23 provides the user interface between each of the terminal 21 and the printer 22 and each of the data management unit 24, the policy definition unit 26, the project definition unit 27, the work flow control unit 28, the standard report unit 29, and the special report unit 30.
- the memory 31 serves as working areas and storage areas of the policy definition unit 26, the project definition unit 27, the work flow control unit 28, the standard report unit 29, and the special report unit 30.
- FIG. 14 illustrates the state where the policy definition unit 26, the project definition unit 27, the work flow control unit 28, the standard report unit 29, and the special report unit 30 store generated data into the database 25 and retrieve the stored data from the database 25.
- the policy definition unit 26 gives definitions by the routine work templates as described above. For example, for English manual creating work, Japanese manuscripts on a product are gathered from its developer and an order is then issued to a translator to translate them into English. In this case, information used is such that the estimated cost is 10,000 yen multiplied by a required volume and the expected number of days is the required volume divided by 10.
- the project definition unit 27 sets values appropriate to actual work to correspond to the above-mentioned routine work. If the English manual is one for a word processor, then information used will be such that the development department is the word-processor development department, the product name is WP-XYZ, the required volume is 20 pages, the translator is ABC translation company, the estimated cost is 200,000 yen, and the expected number of days is two. Entity management tables are created on the basis of such information.
- the work flow control unit 28 provides working instructions to a worker. At the completion of the work, the results of the work are entered by the worker. For these working instructions, a working instruction entity management table created to correspond to a working instruction template is used. Of the results entered into the work flow control unit 28, results differing from the values set by the above-described project definitions will be such that the required volume is 15 pages, the actually required cost is 150,000 yen, and the actually required number of days is three.
- FIG. 15 shows an example of a format of a record in the template used in the process schedule control system In comparison with the format of FIG. 3, this format differs only in that a process label is added to the end of the format of FIG. 3.
- This process label indicates a program for performing a process corresponding to that label. The addition of this label permits a process corresponding to that label to be carried out.
- FIGS. 16A through 22 show specific examples of the routine work templates.
- FIGS. 16A and 16B shows an example of a project template. Specifically, FIG. 16A shows its general form, and FIG. 16B shows its pointer structure.
- the last process label of the project record for example, points to a pointer to a project processing program, and the entry of the processing program is pointed to by that pointer, whereby the program of that entry is executed.
- the process labels are registered on a program management table, and correspondingly the program entry addresses are maintained therein.
- the program management table is pointed to by a process label, an program entry address is obtained and the corresponding program is executed.
- FIGS. 17A and 17B show an example of a post template This template has an enterprise department record which permits a processing program for the enterprise department to be carried out.
- FIGS. 18A and 18B show an example of a working instruction template. As shown in FIG. 18B, a condition record that is below a working instruction record permits condition check processing. An execution record that is in the rear of the condition record in rank permits working instructions to be given to a worker.
- FIGS. 19, 20, 21 and 22 show general forms of respective nexus, staff, budget and schedule templates. Although pointer structures of these templates are not shown, they can be generated in the same way as the pointer structures in FIGS. 16B, 17B and 18B by using the format of FIG. 15.
- FIG. 23 illustrates the case where a program for reading an entity information item in a record that is in the rear rank is executed as a program that is initiated by the label stored at the end of a record that is in the front rank.
- a process corresponding to an entity written using a template is executed as described above. This permits static entities to work dynamically and the above-described work flow management to be implemented.
- an associated process initiated by the process label stored at the end of a record that is in the front rank carries out a process of reading an entity corresponding to a record that in the rear rank.
- this can be used to read an entity information item for a record that is in the rear rank in the information retrieval method described in conjunction with FIGS. 12A and 12B.
- a label that is in the rear of the label ⁇ in rank is a label ⁇ , for example.
- the process associated with the process label stored at the end of a record of a template is not limited to reading of an entity of a record that is in the rear of that record in rank.
- a task execution program is read by the process label stored at the end of the task record, whereby such work as issues working instructions to workers will be performed.
- FIGS. 24 through 30 show examples of entity management tables corresponding to the respective templates.
- FIG. 24 shows an example of an entity management table for the project template. As opposed to FIG. 16B, FIG. 24 shows, for simplicity, the case where a project is composed of only two tasks and hence no job record is present. A task record pointed to by the downward pointer in the project record has an entity information item of "writing", and the other task record that is in the rear rank has an entity information item of "translation".
- FIG. 25 shows an example of an entity management table corresponding to the post template.
- the pointer placed at the end of the enterprise department record points to a processing program for an enterprise department in place of entity information.
- the pointer placed at the end of the staff record points to a processing program for seeking staff.
- FIG. 26 shows an example of an entity management table for the working instruction template. Associated with each working instruction record are placed a low-rank condition record related to the working instruction and an execution record pointed to by the backward pointer in the condition record. For example, the condition record pointed to by the most front-rank working instruction record has an entity information item of "termination”, and the condition record pointed to by the second working instruction record has an entity information item of "waiting for start”.
- FIG. 27 shows an example of a nexus entity management table. As shown, more than one task records are placed below one job record, which are linked one after another by their respective backward pointers. Below each task record are placed staff, budget, schedule and working instruction records which are linked one after another by their respective backward pointers.
- FIG. 28 shows an example of an entity management table for the staff template. Below a staff record is placed the name of an actual staff, "JOHN SMITH", as an entity information item. In place of such an entity, an object of the staff may be stored. A process corresponding to that object can be carried out by a processing program of a template.
- a management name is attached to a set of templates or entity information items.
- the management name is entered as a content of an entity.
- a process corresponding to the management name is performed.
- FIG. 29 shows an example of an entity management table corresponding to the budget template.
- a pointer that points to a budget processing program In a lower budget record pointed to by a higher budget record is placed a pointer that points to a budget processing program Also, in the actual-result record is placed a pointer that points to an actual-result processing program.
- FIG. 30 shows an example of an entity management table corresponding to the schedule template. Start and end records that are below a plan record respectively point to entity information items of "day of commencement” and “day of termination” of planned work. Start and end records that are below an actual-result record respectively point to entity information items of "actual day of commencement” and "actual day of termination” of that work.
- the entity pointers of the entity management tables of the present invention can point not only to entity information items such as character strings but also to objects such as management names or processing programs. It is also possible to choose a template itself as an object. What kind of object is to be specified depends on the kind of template.
- FIG. 31 shows an example of an XID management table in the process schedule control.
- a template name table are stored names of budget, staff, relationship, working instruction, post, project and schedule templates and pointers to label retrieval tables corresponding to the respective templates.
- each label retrieval table are stored label names used in the corresponding template and pointers to XID lists corresponding to the respective label names.
- Pointers in the XID lists generally point to records in corresponding respective entity management tables. However, records in the nexus entity management table have no entity information items and thus pointers in its XID lists are used to find XIDs of records pointed to by records having corresponding XIDs in the nexus entity management table. The entities corresponding the XIDs thus found are simply retrieved from the label retrieval tables of the other templates having the same labels as indicated by broken lines.
- FIG. 31 there is shown an example in which each of budget, department, project and step records points to a corresponding one of process entries.
- FIG. 32 is a flowchart for the basic algorithm for executing processes specified by process labels stored at the end of the respective records of the templates as basic processes in the process schedule control system.
- a label to be processed is specified in step S50.
- the desired label is specified by the system user or the system itself.
- a manager as the system user may specify a label to be processed in order to inquire of the system about daily work conditions.
- a label to be processed may be selected by the system after a lapse of a specified period of time that is measured by a timer.
- step S51 the XID management table of FIG. 31 is searched for the corresponding label.
- step S52 a template in which that label thus found is stored is obtained.
- step S53 the process label placed at the end of the record in that template is obtained and the process is executed in step S54.
- the contents (entity information value) pointed to by an entity pointer which has been obtained beforehand or the contents pointed to by an entity pointer corresponding to the XID obtained during the label retrieval are used.
- step S54 updating of the contents of entity information or addition or deletion of records in the structure management tables or the entity management tables is also possible.
- the updating of entities means that, for example, the entity information item of "JOHN SMITH" pointed to by a name entity pointer is rewritten into the entity information of "SUE BROWN".
- the addition or deletion of records in the structure management table means that when a new section is set up or a department is discontinued, data on that section is added or data on that department is deleted by pointer operations.
- This feature is also capable of searching for staff to which no task is linked and allocating the staff to a job in which a task is decided and the staff is undetermined.
- the staff record is below the task record.
- the staff XID is retrieved by task. If the staff XID is not found, then it is seen that the staff is not allocated any job.
- the staff is registered on an allocation table at the time the staff is allocated a job.
- the allocation table refers to a table of jobs allocated to staff, e.g., the entity management table of FIG. 26 for example.
- FIG. 33 is a flowchart illustrating the way of giving working instructions to workers, which is a part of processing performed by the work flow control unit 28.
- the work flow management is implemented by using the basic processing algorithm described in connection with FIG. 32.
- the work flow management is performed basically by a database engine and its associated processing programs.
- the work flow processing is implemented by the database engine while programs called via the process labels are updating various data items managed by the above-described information management system.
- FIG. 33 The flowchart of FIG. 33 will be described taking, as an example, working instructions for allocating a task of "translation" to a staff member named "JOHN SMITH".
- tasks are performed in the order of rank beginning from the front, and the processing of FIG. 33 is started at the termination of the work of "writing".
- step S60 subsequent to step S59 for instruction of start, a XID of a task of "translation" is retrieved from the project entity management table.
- task records in that table are examined one by one to obtain the XID of the task of "translation”.
- step S61 a nexus template having the XID of the task of "translation” in its XID list and a label name of "working instruction" in its label name retrieval table is retrieved from the XID management table.
- a nexus template is created by grouping information items that a manager desires to manage or information items to be related to one another in order to understand the work of workers and attaching an arbitrary name.
- step S62 subsequent to step S61, the working instruction XID corresponding to the task matching in XID is retrieved from the nexus entity management table corresponding to that nexus template.
- step S63 a working instruction entity information item pointed to from the working instruction XID is obtained using the XID management table.
- condition check process specified by the label stored at the end of the condition record in the working instruction template in step S64, and that condition check process is carried out in step S65.
- this condition check process will be described in detail with reference to FIG. 34, basically a check is here made as to whether or not a task prior to the task in question of "translation" has bee terminated.
- step S66 a decision is made as to whether or not the prior task has been terminated. If terminated, then the working instruction process, specified by the process label at the end of the execution record that is in the rear of the condition record in rank in FIG. 18B, is carried out in step 67, bringing the processing to an end. If not terminated, the steps following step S59 are repeated.
- the working instruction process mail or instructions are issued to a worker via the interface unit 23, and the contents thereof will contain a summary of entity information items, such as "translation”, "JOHN SMITH", etc.
- the translation task is an entity information item pointed to by a record in the project entity management table
- the staff of "JOHN SMITH” is an entity information item pointed to by the name record in the staff entity management table of FIG. 28.
- nexus entity management table in FIG. 27 It is the nexus entity management table in FIG. 27 that relates these entity information items with one another.
- a task XID is used to obtain the staff XID that is below that task in the nexus entity management table to thereby specify the staff "JOHN SMITH", and an working instruction entity information item is further obtained by the working instruction XID that is in the rear of the staff in rank.
- an electronic mail or a working instruction is issued to the staff "JOHN SMITH".
- step S59 when the result of the decision in step S66 is NO will be further described. It may be thought that, when the decision in step S66 is that the prior task has not been terminated, it is possible to return the process to step S64 after a lapse of a period of time from the activation of a timer and to reexecute the condition check processing. In the present embodiment, however, the process returns to step S59, not to step S64. This is to simplify the processing system.
- step S65 which is a completion process corresponding to an object-oriented method, is activated, not by a timer, but by only messages in the information management system, thereby permitting the processing system to be simplified.
- the flowchart of FIG. 33 is also likewise applicable to the rewriting of work conditions or budget management. For example, alteration of conditions is made when a worker terminates work, more specifically, when the work termination button is pressed or the termination of work is reported to a manager.
- the standard report unit 29 and the special report unit 30 output an entity information report or solicited historical data (entity information) in the form of mail or hard copy in the same manner as the instruction processing in step S67 of FIG. 33.
- FIG. 34 is a detailed flowchart for the condition check processing in step S65 of FIG. 33.
- a nexus template having task as a label name is retrieved from the XID management table in step S70.
- step S71 a job record that is above the task record is retrieved from the nexus template, and, in subsequent step S72, the most prior task pointed to by the job record in the nexus entity management table of FIG. 27 is retrieved.
- step S73 tasks pointed to by backward pointers one after another are sequentially searched for a task prior to a task whose condition is to be checked.
- a working instruction record that is below the prior task record and its XID is found.
- step S75 that working instruction XID thus found is used to retrieve the corresponding working instruction record from the working instruction entity management table of FIG. 26.
- a condition record pointed to by that record is retrieved.
- step S76 the condition of the prior task, i.e., the termination or not, is obtained from entity information of that condition record.
- subsequent step S77 the condition is reported, thereby terminating the process.
- FIG. 35 is a flowchart for addition of template records by the policy definition unit 26. This process is performed on an operator-system interactive basis via the terminal 21.
- a template to which a label is to be added is determined first.
- the position on that template where the label is to be inserted is determined.
- a record of that label is inserted in the position on the template thus determined.
- pointers which are involved in adding a new label are rewritten.
- conditions such as the number of entity information items, are stored in the condition storage position of the added record, thus terminating the process.
- a new template is created by adding labels in sequence in accordance with the same procedure as in FIG. 35.
- FIG. 36 is a flowchart for the creation of an entity management table by the project definition unit 27. This processing is also performed on an operator-system interactive basis via the terminal 21.
- step S91 a template and a label are determined for an entity management table to be created.
- step S92 a reference is made to a template already created to make a decision as to whether conditions for that label are met.
- step S93 a decision is made as to whether an address of an entity information item or an object has been determined. If the decision in step S92 is that the conditions are not met, then the process is terminated.
- a record is created in accordance with the structure defined by the template and an XID and downward and rearward pointers are stored in that record to create an entity management table.
- the address of the entity information or an object is stored as an entity pointer of that record.
- records related among more than one templates are created. In this case, entity pointers are not necessarily stored in these records.
- step S93 When the decision in step S93 is that the address is not determined, the processing is interrupted. At the time the address is determined, the creation of the entity management table is resumed.
- FIG. 37 is a flowchart for the creation of an XID management table by the project definition unit 27. This processing is performed on the basis of created templates and entity management tables.
- step S101 a template name table in which the names of all the templates are stored is created first.
- step S102 label retrieval tables each storing all the labels used in the corresponding respective template are created.
- step S103 an XID list storing all the XIDs defined in the entity management table is created for each label.
- step S104 a starting address of each label retrieval table for the corresponding respective template is stored in the template name table.
- step S105 a starting address of a XID list corresponding to each label is stored in the label retrieval tables.
- step S106 an address of an entity management table record corresponding to each XID value is stored as a pointer in the XID lists, thereby terminating the process.
- the entity management tables and the XID management tables is performed in the same procedure as in FIGS. 35, 36 and 37.
- the present invention allows each record in the structure management tables indicating relationships among types of data, i.e., templates, to have upward, downward, forward and rearward pointers, i.e., pointers in four directions and the entity management tables for managing a large quantity of actual information to have only downward and rearward pointers, thereby allowing execution of information management without increasing an amount of data, which is substantially the same as when all the actual information, i.e., entity information items are each allowed to have four upward, downward, forward and rearward pointers.
Abstract
Description
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/948,085 US5909688A (en) | 1993-10-29 | 1997-10-09 | Information management system |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP27212293A JP3526595B2 (en) | 1993-10-29 | 1993-10-29 | Information management mechanism |
JP5-272122 | 1993-10-29 | ||
US30373994A | 1994-09-09 | 1994-09-09 | |
US08/948,085 US5909688A (en) | 1993-10-29 | 1997-10-09 | Information management system |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US30373994A Continuation | 1993-10-29 | 1994-09-09 |
Publications (1)
Publication Number | Publication Date |
---|---|
US5909688A true US5909688A (en) | 1999-06-01 |
Family
ID=17509401
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/948,085 Expired - Lifetime US5909688A (en) | 1993-10-29 | 1997-10-09 | Information management system |
Country Status (2)
Country | Link |
---|---|
US (1) | US5909688A (en) |
JP (1) | JP3526595B2 (en) |
Cited By (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6078924A (en) * | 1998-01-30 | 2000-06-20 | Aeneid Corporation | Method and apparatus for performing data collection, interpretation and analysis, in an information platform |
US6314434B1 (en) * | 1998-04-15 | 2001-11-06 | Fujitsu Limited | Structured data management system and computer-readable method for storing structured data management program |
US6460028B1 (en) | 1999-12-03 | 2002-10-01 | T4Mupj2, Llc | System and method for data organization |
US20040133539A1 (en) * | 2002-12-23 | 2004-07-08 | Talagala Nisha D | General techniques for diagnosing data corruptions |
US20040210906A1 (en) * | 2003-01-27 | 2004-10-21 | Yolanta Beresnevichiene | Data handling apparatus and methods |
US6839701B1 (en) | 2000-01-21 | 2005-01-04 | International Business Machines | Hitmask for querying hierarchically related content entities |
US20060004746A1 (en) * | 1998-09-04 | 2006-01-05 | Kalido Limited | Data processing system |
US6986102B1 (en) | 2000-01-21 | 2006-01-10 | International Business Machines Corporation | Method and configurable model for storing hierarchical data in a non-hierarchical data repository |
US7043488B1 (en) | 2000-01-21 | 2006-05-09 | International Business Machines Corporation | Method and system for storing hierarchical content objects in a data repository |
US7076494B1 (en) | 2000-01-21 | 2006-07-11 | International Business Machines Corporation | Providing a functional layer for facilitating creation and manipulation of compilations of content |
US7089239B1 (en) | 2000-01-21 | 2006-08-08 | International Business Machines Corporation | Method and system for preventing mutually exclusive content entities stored in a data repository to be included in the same compilation of content |
US20060200791A1 (en) * | 2005-03-02 | 2006-09-07 | Computer Associates Think, Inc. | Method and system for file management of a source control management repository |
US7340481B1 (en) | 2000-01-21 | 2008-03-04 | International Business Machines Corp. | Method and system for adding user-provided content to a content object stored in a data repository |
US7346844B1 (en) | 2000-01-21 | 2008-03-18 | International Business Machines, Corporation | Method and system for moving content in a content object stored in a data repository |
US7353432B1 (en) | 2003-11-25 | 2008-04-01 | Sun Microsystems, Inc. | Maintaining high data integrity |
US7356766B1 (en) | 2000-01-21 | 2008-04-08 | International Business Machines Corp. | Method and system for adding content to a content object stored in a data repository |
US7401097B1 (en) | 2000-01-21 | 2008-07-15 | International Business Machines Corporation | System and method for creating compilations of content |
US20090157711A1 (en) * | 2000-01-21 | 2009-06-18 | Baer William J | Method and System for Managing Volumes Within a Compilation of Content |
US7613993B1 (en) * | 2000-01-21 | 2009-11-03 | International Business Machines Corporation | Prerequisite checking in a system for creating compilations of content |
US20110162011A1 (en) * | 1998-09-17 | 2011-06-30 | United Video Properties, Inc. | Program guide with a digital storage device |
US20110167088A1 (en) * | 2010-01-07 | 2011-07-07 | Microsoft Corporation | Efficient immutable syntax representation with incremental change |
US20110231391A1 (en) * | 2001-12-10 | 2011-09-22 | Coyne Patrick J | Project management database and method of managing project related information |
US20120290986A1 (en) * | 2002-08-06 | 2012-11-15 | Goldman, Sachs & Co. | Management Of Corporate Entities |
US20130054681A1 (en) * | 2001-12-10 | 2013-02-28 | Patrick J. Coyne | Method and system for the management of professional services project information |
US20150304396A1 (en) * | 2012-10-31 | 2015-10-22 | Future Tech Lab Co., Ltd. | Information system, server apparatus, terminal apparatus, and information processing method |
US10216627B1 (en) * | 2016-11-08 | 2019-02-26 | Levyx, Inc. | Tree structure serialization and deserialization systems and methods |
US10289708B2 (en) * | 2017-04-05 | 2019-05-14 | Amadeus S.A.S. | Management of unique identifiers in a database |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH0991339A (en) * | 1995-09-20 | 1997-04-04 | Fujitsu Ltd | Process rearrangement support system |
JP2002109167A (en) * | 2000-09-22 | 2002-04-12 | Microsoft Corp | Retrieving tool and method, and document approval system and method using the sames |
JP2008243234A (en) * | 2001-09-27 | 2008-10-09 | Daiko:Kk | Event management method, event management program, recording medium, and event management system |
JP4821702B2 (en) * | 2007-05-14 | 2011-11-24 | 日本電気株式会社 | Activity registration device, activity registration system, activity registration method, and activity registration program |
JP6942375B2 (en) * | 2019-10-25 | 2021-09-29 | 株式会社ジュリア | Information management system, server and user terminal |
Citations (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4479196A (en) * | 1982-11-15 | 1984-10-23 | At&T Bell Laboratories | Hyperedge entity-relationship data base systems |
US4495570A (en) * | 1981-01-14 | 1985-01-22 | Hitachi, Ltd. | Processing request allocator for assignment of loads in a distributed processing system |
US4819160A (en) * | 1986-01-16 | 1989-04-04 | Hitachi, Ltd. | Method of processing data access in a database management system with data dictionary directory |
US4868733A (en) * | 1985-03-27 | 1989-09-19 | Hitachi, Ltd. | Document filing system with knowledge-base network of concept interconnected by generic, subsumption, and superclass relations |
US5093779A (en) * | 1987-07-03 | 1992-03-03 | Hitachi, Ltd. | Computer file system |
US5179643A (en) * | 1988-12-23 | 1993-01-12 | Hitachi, Ltd. | Method of multi-dimensional analysis and display for a large volume of record information items and a system therefor |
US5257185A (en) * | 1990-05-21 | 1993-10-26 | Ann W. Farley | Interactive, cross-referenced knowledge system |
US5263160A (en) * | 1991-01-31 | 1993-11-16 | Digital Equipment Corporation | Augmented doubly-linked list search and management method for a system having data stored in a list of data elements in memory |
US5295261A (en) * | 1990-07-27 | 1994-03-15 | Pacific Bell Corporation | Hybrid database structure linking navigational fields having a hierarchial database structure to informational fields having a relational database structure |
US5345587A (en) * | 1988-09-14 | 1994-09-06 | Digital Equipment Corporation | Extensible entity management system including a dispatching kernel and modules which independently interpret and execute commands |
US5414834A (en) * | 1988-04-08 | 1995-05-09 | International Business Machines Corporation | Method and apparatus for data storage and interchange using a relational database table, and a data record for use in connection therewith |
US5475837A (en) * | 1991-05-29 | 1995-12-12 | Hewlett-Packard Company | Method and system for restructuring a B-Tree for managing data during a node splitting operation |
US5535388A (en) * | 1991-08-21 | 1996-07-09 | Hitachi, Ltd. | Apparatus for dynamically collecting and editing management information during a software development process |
US5611076A (en) * | 1994-09-21 | 1997-03-11 | Micro Data Base Systems, Inc. | Multi-model database management system engine for databases having complex data models |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH0266645A (en) * | 1988-08-31 | 1990-03-06 | Hitachi Software Eng Co Ltd | Network data base |
-
1993
- 1993-10-29 JP JP27212293A patent/JP3526595B2/en not_active Expired - Fee Related
-
1997
- 1997-10-09 US US08/948,085 patent/US5909688A/en not_active Expired - Lifetime
Patent Citations (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4495570A (en) * | 1981-01-14 | 1985-01-22 | Hitachi, Ltd. | Processing request allocator for assignment of loads in a distributed processing system |
US4479196A (en) * | 1982-11-15 | 1984-10-23 | At&T Bell Laboratories | Hyperedge entity-relationship data base systems |
US4868733A (en) * | 1985-03-27 | 1989-09-19 | Hitachi, Ltd. | Document filing system with knowledge-base network of concept interconnected by generic, subsumption, and superclass relations |
US4819160A (en) * | 1986-01-16 | 1989-04-04 | Hitachi, Ltd. | Method of processing data access in a database management system with data dictionary directory |
US5093779A (en) * | 1987-07-03 | 1992-03-03 | Hitachi, Ltd. | Computer file system |
US5414834A (en) * | 1988-04-08 | 1995-05-09 | International Business Machines Corporation | Method and apparatus for data storage and interchange using a relational database table, and a data record for use in connection therewith |
US5345587A (en) * | 1988-09-14 | 1994-09-06 | Digital Equipment Corporation | Extensible entity management system including a dispatching kernel and modules which independently interpret and execute commands |
US5475838A (en) * | 1988-09-14 | 1995-12-12 | Digital Equipment Corporation | Extensible entity management system including rule-based alarms |
US5179643A (en) * | 1988-12-23 | 1993-01-12 | Hitachi, Ltd. | Method of multi-dimensional analysis and display for a large volume of record information items and a system therefor |
US5257185A (en) * | 1990-05-21 | 1993-10-26 | Ann W. Farley | Interactive, cross-referenced knowledge system |
US5295261A (en) * | 1990-07-27 | 1994-03-15 | Pacific Bell Corporation | Hybrid database structure linking navigational fields having a hierarchial database structure to informational fields having a relational database structure |
US5263160A (en) * | 1991-01-31 | 1993-11-16 | Digital Equipment Corporation | Augmented doubly-linked list search and management method for a system having data stored in a list of data elements in memory |
US5475837A (en) * | 1991-05-29 | 1995-12-12 | Hewlett-Packard Company | Method and system for restructuring a B-Tree for managing data during a node splitting operation |
US5535388A (en) * | 1991-08-21 | 1996-07-09 | Hitachi, Ltd. | Apparatus for dynamically collecting and editing management information during a software development process |
US5611076A (en) * | 1994-09-21 | 1997-03-11 | Micro Data Base Systems, Inc. | Multi-model database management system engine for databases having complex data models |
Cited By (42)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6078924A (en) * | 1998-01-30 | 2000-06-20 | Aeneid Corporation | Method and apparatus for performing data collection, interpretation and analysis, in an information platform |
US6314434B1 (en) * | 1998-04-15 | 2001-11-06 | Fujitsu Limited | Structured data management system and computer-readable method for storing structured data management program |
US8359299B2 (en) | 1998-09-04 | 2013-01-22 | Kalido Limited | Data processing system |
US20100223296A1 (en) * | 1998-09-04 | 2010-09-02 | Kalido Limited | Data Processing System |
US20060004746A1 (en) * | 1998-09-04 | 2006-01-05 | Kalido Limited | Data processing system |
US7774371B2 (en) | 1998-09-04 | 2010-08-10 | Kalido Limited | Data processing system |
US7003504B1 (en) * | 1998-09-04 | 2006-02-21 | Kalido Limited | Data processing system |
US20110162011A1 (en) * | 1998-09-17 | 2011-06-30 | United Video Properties, Inc. | Program guide with a digital storage device |
US6460028B1 (en) | 1999-12-03 | 2002-10-01 | T4Mupj2, Llc | System and method for data organization |
US7076494B1 (en) | 2000-01-21 | 2006-07-11 | International Business Machines Corporation | Providing a functional layer for facilitating creation and manipulation of compilations of content |
US9003282B2 (en) | 2000-01-21 | 2015-04-07 | International Business Machines Corporation | Method and system for managing volumes within a compilation of content |
US7089239B1 (en) | 2000-01-21 | 2006-08-08 | International Business Machines Corporation | Method and system for preventing mutually exclusive content entities stored in a data repository to be included in the same compilation of content |
US7043488B1 (en) | 2000-01-21 | 2006-05-09 | International Business Machines Corporation | Method and system for storing hierarchical content objects in a data repository |
US8589777B1 (en) | 2000-01-21 | 2013-11-19 | International Business Machines Corporation | Method and system for calculating cost of a compilation of content |
US7340481B1 (en) | 2000-01-21 | 2008-03-04 | International Business Machines Corp. | Method and system for adding user-provided content to a content object stored in a data repository |
US7346844B1 (en) | 2000-01-21 | 2008-03-18 | International Business Machines, Corporation | Method and system for moving content in a content object stored in a data repository |
US7895243B1 (en) | 2000-01-21 | 2011-02-22 | International Business Machines Corporation | Method and system for moving content in a content object stored in a data repository |
US7356766B1 (en) | 2000-01-21 | 2008-04-08 | International Business Machines Corp. | Method and system for adding content to a content object stored in a data repository |
US7401097B1 (en) | 2000-01-21 | 2008-07-15 | International Business Machines Corporation | System and method for creating compilations of content |
US20090157711A1 (en) * | 2000-01-21 | 2009-06-18 | Baer William J | Method and System for Managing Volumes Within a Compilation of Content |
US7613993B1 (en) * | 2000-01-21 | 2009-11-03 | International Business Machines Corporation | Prerequisite checking in a system for creating compilations of content |
US6839701B1 (en) | 2000-01-21 | 2005-01-04 | International Business Machines | Hitmask for querying hierarchically related content entities |
US6986102B1 (en) | 2000-01-21 | 2006-01-10 | International Business Machines Corporation | Method and configurable model for storing hierarchical data in a non-hierarchical data repository |
US10242077B2 (en) | 2001-12-10 | 2019-03-26 | Patrick J. Coyne | Method and system for the management of professional services project information |
US20110231391A1 (en) * | 2001-12-10 | 2011-09-22 | Coyne Patrick J | Project management database and method of managing project related information |
US20130054681A1 (en) * | 2001-12-10 | 2013-02-28 | Patrick J. Coyne | Method and system for the management of professional services project information |
US8935297B2 (en) | 2001-12-10 | 2015-01-13 | Patrick J. Coyne | Method and system for the management of professional services project information |
US20120290986A1 (en) * | 2002-08-06 | 2012-11-15 | Goldman, Sachs & Co. | Management Of Corporate Entities |
US20040133539A1 (en) * | 2002-12-23 | 2004-07-08 | Talagala Nisha D | General techniques for diagnosing data corruptions |
US7133883B2 (en) * | 2002-12-23 | 2006-11-07 | Sun Microsystems, Inc. | General techniques for diagnosing data corruptions |
US7908640B2 (en) * | 2003-01-27 | 2011-03-15 | Hewlett-Packard Development Company, L.P. | Data handling apparatus and methods |
US20040210906A1 (en) * | 2003-01-27 | 2004-10-21 | Yolanta Beresnevichiene | Data handling apparatus and methods |
US7353432B1 (en) | 2003-11-25 | 2008-04-01 | Sun Microsystems, Inc. | Maintaining high data integrity |
US7702661B2 (en) * | 2005-03-02 | 2010-04-20 | Computer Associates Think, Inc. | Managing checked out files in a source control repository |
US20060200791A1 (en) * | 2005-03-02 | 2006-09-07 | Computer Associates Think, Inc. | Method and system for file management of a source control management repository |
US20110167088A1 (en) * | 2010-01-07 | 2011-07-07 | Microsoft Corporation | Efficient immutable syntax representation with incremental change |
US10564944B2 (en) * | 2010-01-07 | 2020-02-18 | Microsoft Technology Licensing, Llc | Efficient immutable syntax representation with incremental change |
US10063626B2 (en) * | 2012-10-31 | 2018-08-28 | Future Tech Leb Co., Ltd. | Information system, server apparatus, terminal apparatus, and information processing method |
US20150304396A1 (en) * | 2012-10-31 | 2015-10-22 | Future Tech Lab Co., Ltd. | Information system, server apparatus, terminal apparatus, and information processing method |
US10216627B1 (en) * | 2016-11-08 | 2019-02-26 | Levyx, Inc. | Tree structure serialization and deserialization systems and methods |
US10289708B2 (en) * | 2017-04-05 | 2019-05-14 | Amadeus S.A.S. | Management of unique identifiers in a database |
US10956385B2 (en) | 2017-04-05 | 2021-03-23 | Amadeus S.A.S. | Management of unique identifiers in a database |
Also Published As
Publication number | Publication date |
---|---|
JP3526595B2 (en) | 2004-05-17 |
JPH07129442A (en) | 1995-05-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5909688A (en) | Information management system | |
EP0647909B1 (en) | Information catalog system with object-dependent functionality | |
US5950190A (en) | Dynamic, self-modifying graphical user interface for relational database applications | |
US6418450B2 (en) | Data warehouse programs architecture | |
US4862376A (en) | Bill of material interface to CAD/CAM environment | |
US5564113A (en) | Computer program product for rendering relational database management system differences transparent | |
US5418946A (en) | Structured data classification device | |
US5495610A (en) | Software distribution system to build and distribute a software release | |
US5428729A (en) | System and method for computer aided software engineering | |
US5550971A (en) | Method and system for generating a user interface adaptable to various database management systems | |
US5019961A (en) | Computer apparatus and method for logical modelling | |
US7039658B2 (en) | Method and apparatus for generating web pages from templates | |
US8010530B2 (en) | Presentation of multilingual metadata | |
US5893906A (en) | Managing work in a computing application | |
EP1585036A2 (en) | Management of parameterized database queries | |
US20030154197A1 (en) | Flexible relational data storage method and apparatus | |
US20030212960A1 (en) | Computer-implemented system and method for report generation | |
US20010049697A1 (en) | System and method for retrieving software release information | |
WO1991008542A1 (en) | Software distribution system | |
WO2002029561A1 (en) | System and method for tracking and documenting changes to compu ter readable code | |
EP0560938A1 (en) | Method and apparatus for engineering for a data model | |
KR100529661B1 (en) | Object integrated management system | |
US20080120270A1 (en) | Database system | |
US5781905A (en) | Program generating method combining data item part with database manipulation part | |
AU723011B2 (en) | Relational database compiled/stored on a memory structure |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FEPP | Fee payment procedure |
Free format text: PETITION RELATED TO MAINTENANCE FEES FILED (ORIGINAL EVENT CODE: PMFP); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PETITION RELATED TO MAINTENANCE FEES GRANTED (ORIGINAL EVENT CODE: PMFG); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
REIN | Reinstatement after maintenance fee payment confirmed | ||
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20110601 |
|
PRDP | Patent reinstated due to the acceptance of a late maintenance fee |
Effective date: 20110803 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: FUJITSU LIMITED, JAPANFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:YOSHIOKA, MAKOTO;NEGISHI, HIROAKI;TAZAKI, GENGO;AND OTHERS;REEL/FRAME:027876/0537Effective date: 19940825 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:FUJITSU LIMITED;REEL/FRAME:028411/0838Effective date: 20120329 |