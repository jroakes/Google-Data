CN117172288A - Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications - Google Patents
Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications Download PDFInfo
- Publication number
- CN117172288A CN117172288A CN202311093488.2A CN202311093488A CN117172288A CN 117172288 A CN117172288 A CN 117172288A CN 202311093488 A CN202311093488 A CN 202311093488A CN 117172288 A CN117172288 A CN 117172288A
- Authority
- CN
- China
- Prior art keywords
- response
- input
- vector
- generating
- neural network
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000004044 response Effects 0.000 title claims abstract description 537
- 238000004891 communication Methods 0.000 title claims abstract description 185
- 238000012549 training Methods 0.000 title claims abstract description 150
- 238000003062 neural network model Methods 0.000 title claims abstract description 110
- 238000000034 method Methods 0.000 claims abstract description 59
- 239000013598 vector Substances 0.000 claims description 275
- 238000012545 processing Methods 0.000 claims description 9
- 230000009118 appropriate response Effects 0.000 claims description 6
- 230000015654 memory Effects 0.000 claims description 6
- 230000008569 process Effects 0.000 claims description 2
- 230000003993 interaction Effects 0.000 abstract description 3
- 238000011144 upstream manufacturing Methods 0.000 description 25
- 230000006870 function Effects 0.000 description 7
- 238000013139 quantization Methods 0.000 description 7
- 238000013528 artificial neural network Methods 0.000 description 4
- 239000000463 material Substances 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 238000004364 calculation method Methods 0.000 description 3
- 238000010586 diagram Methods 0.000 description 3
- OKTJSMMVPCPJKN-UHFFFAOYSA-N Carbon Chemical compound [C] OKTJSMMVPCPJKN-UHFFFAOYSA-N 0.000 description 2
- 238000013459 approach Methods 0.000 description 2
- 229910052799 carbon Inorganic materials 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000002093 peripheral effect Effects 0.000 description 2
- 229920002803 thermoplastic polyurethane Polymers 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000010348 incorporation Methods 0.000 description 1
- 230000010354 integration Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/02—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail using automatic reactions or user delegation, e.g. automatic replies or chatbot-generated messages
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L51/00—User-to-user messaging in packet-switching networks, transmitted according to store-and-forward or real-time protocols, e.g. e-mail
- H04L51/04—Real-time or near real-time messaging, e.g. instant messaging [IM]
- H04L51/046—Interoperability with other network applications or services
Abstract
The present invention relates to cooperatively training and/or using separate input neural network models and response neural network models for determining a response to an electronic communication. Systems, methods, and computer-readable media related to determining one or more responses to be provided in response to electronic communications generated through interaction with a client computing device. For example, one or more responses to be provided are determined for presentation to a user as suggestions for inclusion in a reply to an electronic communication sent to the user. Some embodiments relate to training and/or using separate input neural network models and response neural network models for determining a response to an electronic communication. The input neural network model and the response neural network model may be separate, but cooperatively trained and/or used.
Description
Description of the division
The application belongs to a divisional application of Chinese application patent application No.201880012576.6 with the application date of 2018, 2 and 15.
Background
Users are often overwhelmed with electronic communications such as email, SMS (short message service) communications, chat communications, social network communications, and the like. Many electronic communications sent to users explicitly solicit replies or otherwise contain information that the user may wish to reply to. For example, contain "Are you interested in grabbing lunch? (do you have interest in lunch. Contains "I just go engaged-! An email of (i'm just engaging |) "may not explicitly solicit a reply, but the user who received the email may still wish to send a congratulatory reply to the email. The user formulates a reply to the electronic communication and utilizes a keyboard (e.g., a virtual keyboard of a smart phone or tablet) of the client device, a microphone, and/or other user interface input device to input the formulated reply at the client device.
Disclosure of Invention
Embodiments of the present description relate to systems, methods, and computer-readable media related to determining one or more responses to be provided in response to electronic communications generated by a user through interaction with a client computing device.
Some embodiments relate to determining one or more responses to provide for presentation to a user as suggestions for inclusion in a reply to an electronic communication sent to the user. For example, in some situations it may be desirable to suggest one or more responses to a user for inclusion in a reply electronic communication that is a reply to an electronic communication sent to the user. For example, if "Are you interested in grabbing lunch? (does you have an interest in eating lunch. For example, such as "what time of course? Responses such as "," thank you, but me is busy "and" me will reply to you "may be based on their receipt of" do you have interest in lunch? The contextual relevance of the chat message of "is provided as a suggestion. Selection of one of the provided responses by the user will reduce the number of user inputs that the user must make to formulate the reply, which may reduce the use of various client device computing resources and/or be particularly beneficial to users having low dexterity (or otherwise having difficulty making user inputs to the client device).
However, some techniques for determining suggested responses for electronic communications may have one or more drawbacks. For example, some techniques may have an undesirable amount of latency in determining a proposed response to an electronic communication and/or may consume an undesirable amount of computing resources in determining the proposed response. For example, in determining suggested responses for an electronic communication, some techniques may apply features of the candidate response to each candidate response and apply features of the electronic communication to a neural network model trained to predict a likelihood of the candidate response in view of both the features of the electronic communication and the features of the candidate response. In other words, for each candidate response, both the characteristics of the candidate response and the characteristics of the electronic communication are jointly applied as inputs to the model, and both sets of characteristics are jointly considered in combination when determining the likelihood on the model. This may cause undesirable latency and/or computational resource consumption.
In view of these and/or other considerations, some embodiments of the present description relate to various techniques related to training and/or using separate input neural network models and response neural network models in order to determine responses for electronic communications. The input neural network model and the response neural network model may be separate. Although separate, they are cooperatively trained and used as described herein. The input neural network model and the response neural network model may be "separate" in that separate inputs are applied to the neural network models, and each of the neural network models is used to generate its own feature vector based on the inputs to which it is applied. In particular, input features of electronic communications may be applied to the input neural network model to generate input vectors over the model (without using any of the response features applied to the response neural network model), and response features of responses may be applied to the response neural network model to generate response vectors over the model (without using any of the input features applied to the input neural network model). A comparison of the input vector and the response vector may then be performed, wherein the comparison indicates a likelihood that the response is an appropriate response to the electronic communication. In some implementations, the comparison of the input vector and the response vector is a dot product of the feature vector that produces a scalar value that indicates a likelihood that the response is an appropriate response to the electronic communication. For example, the dot product may produce a scalar value from 0 to 1, where the magnitude of the scalar value indicates the likelihood.
During training of the input neural network model and the response neural network model, training instances are utilized, each including input features of the input electronic communication and response features of the response. For the positive training example, the response is utilized based on it being indicated as actually being a "response" to the input electronic communication. For example, the input electronic communication may be a temporally earlier email, text message, chat message, etc. of the first user to one or more additional users, and the response may be all or part of a response email, text message, chat message, etc. of one of the additional users.
During training, input features of a training instance are applied as input to the input neural network model and an input vector is generated on top of the input neural network model based on the input. In addition, response characteristics of the training examples are applied as input to the response neural network model and a response vector is generated on top of the response neural network model based on the input. A response score may then be determined based on a comparison of the input vector and the response vector. For example, the response score may be based on a dot product of the input vector and the response vector. For example, the dot product may produce a value from 0 to 1, where a "1" indicates the highest likelihood that the corresponding response is an appropriate response to the corresponding electronic communication, and a "0" indicates the lowest likelihood. Both the input neural network model and the responsive neural network model may then be updated based on a comparison of: the response score (and optionally additional response scores in the batch techniques described herein); and a response score indicated by the training instance (e.g., a "1" or other "positive" response score for a positive training instance, a "0" or other "negative" response score for a negative training instance). For example, an error may be determined based on a difference between the response score and the indicated response score, and the error counter-propagates through the two neural networks of the model.
By such training, each of the two separate neural network models is trained to be independently utilized to derive a corresponding feature vector that provides an implicit semantic representation of the corresponding input. In addition, the implicit semantic representation of the corresponding input is learned in terms of the learned differences between the following, based on the electronic communication and the actual response on the respective positive instance and the response based on the electronic communication and not the actual response on the respective negative instance by training: electronic communication and actual response; as well as electronic communications and responses that are not actual responses.
After training, input features of the new electronic communication may be applied to the input neural network model as input, and an input vector is generated on top of the input neural network model based on the input. In addition, after training, response features of the response may be applied to the response neural network model as input, and a response vector is generated on top of the response neural network model based on the input. The input vector may be compared to the response vector to determine a response score that indicates a likelihood that the response is an appropriate response for the electronic communication. For example, the response score may be based on a dot product of the input vector and the response vector. For example, the dot product may produce a value from 0 to 1, where a "1" indicates the highest likelihood that the corresponding response is an appropriate response to the corresponding electronic communication, and a "0" indicates the lowest likelihood.
Such a response score may be used in determining whether to provide the response in response to the electronic communication. For example, where the electronic communication is directed to a user, the response score may be utilized in determining whether to provide the response for presentation to the user as a suggestion for inclusion in a reply to the electronic communication.
Because the trained response neural network model may be utilized independently, in some embodiments the trained response neural network model may be used to predetermine response vectors for a plurality of responses (e.g., all responses for a "whitelist" of responses), and those response vectors are indexed or otherwise stored in association with their corresponding responses. The relevance of a given response to an electronic communication can thus be determined by comparison of an input vector for the electronic communication (determined based on an input neural network model that is also independently available) with a pre-stored response vector for the response. This eliminates the need for runtime determination of the pre-stored response vector, thereby conserving various computing resources at runtime. In addition, since the input vector is determined at run-time based on the input features of the application of the electronic communication (and independent of the application of any response features), the same input vector can be compared to the response vector of the additional response. This enables the input vector to be determined at run-time by a single invocation of the input neural network model and to be used in determining the response to the electronic communication. In some implementations, input vectors for certain electronic communications (e.g., frequent communications) may additionally or alternatively be predetermined and stored in association with their corresponding electronic communications to further increase efficiency at runtime. Additional descriptions of training and use of the input neural network model and the response neural network model are provided herein.
In some embodiments, a method is provided, the method comprising: a plurality of positive training examples are identified, each of the plurality of positive training examples including an input feature and a reply feature. For each of the positive training examples: the input feature is based on the content of the electronic communication and the reply feature is based on a reply electronic communication that is a reply to the electronic communication. The method also includes training a scoring model based on the positive training instance. Training the scoring model based on a given instance of the positive training instance includes: generating an input vector based on an input neural network model that applies the input features to the scoring model; generating a response vector based on a response neural network model that applies the response feature to the scoring model; determining a response score based on a comparison of the input vector and the response vector; and updating both the input neural network model and the response neural network model based on a comparison of the response score to a given response score indicated by the given instance.
In some embodiments, a method is provided, the method comprising: identifying an input feature of the transmitted electronic communication directed to the user; applying the input features to a trained input neural network model; generating an input vector over the trained input neural network model based on applying the input features to the trained input neural network model; and determining a response to be provided for inclusion in a reply electronic communication that is a reply to the electronic communication by the user, wherein determining the response is based on a comparison of the input vector to a pre-stored value stored in association with the response prior to transmission of the electronic communication. In some of those embodiments, the pre-stored values are generated based on applying response characteristics of the response to a separate responsive neural network model. In some versions of those embodiments, the trained input neural network model is trained based on back propagation based on errors during training, wherein each of the errors is determined during the training based on: a corresponding training input vector generated on top of the trained input neural network model based on a corresponding training instance, and a corresponding training response vector generated on top of a separate response neural network model based on the corresponding training instance.
In some embodiments, a method is provided, the method comprising: identifying an input feature of the transmitted electronic communication directed to the user; applying the input features to a trained input neural network model; generating an input vector over the trained input neural network model based on applying the input features to the trained input neural network model; and determining a response score for a candidate response to the transmitted electronic communication. Determining the response score is based on a dot product of the input vector and a response vector stored in association with the candidate response, wherein the response vector is stored in association with the candidate response prior to transmission of the electronic communication. The method also includes determining, based on the response score, that the candidate response is to be provided for inclusion in a reply electronic communication that is a reply to the electronic communication by the user.
In some embodiments, a method is provided, the method comprising: identifying an input feature of the transmitted electronic communication directed to the user; applying the input features to a trained input neural network model; generating an input vector over the trained input neural network model based on applying the input features to the trained input neural network model; and determining a response score for a candidate response to the transmitted electronic communication. The determination is based on a comparison of the input vector and a response vector stored in association with the candidate response. The response vector stored in association with the candidate response is generated based on an additional trained neural network model that is separate from the trained input neural network model, but is cooperatively trained with the trained neural network model based on errors as a function of both models. The method also includes determining, based on the response score, that the candidate response is to be provided for inclusion in a reply electronic communication that is a reply to the electronic communication by the user.
In some embodiments, a method is provided, the method comprising: receiving an electronic communication generated based on user interface input provided at a client device; applying the input features of the electronic communication to a trained input neural network model; generating an input vector over the trained input neural network model based on applying the input features to the trained input neural network model; determining a response score for a candidate response to the electronic communication based on a comparison of the input vector and a response vector stored in association with the candidate response, wherein the response vector stored in association with the candidate response is generated based on an additional trained neural network model that is separate from the trained input neural network model but is cooperatively trained with the trained neural network model based on an error as a function of both models; and providing the candidate response to the client device as an automatic reply based on the response score.
Various embodiments disclosed herein may include one or more non-transitory computer-readable storage media storing instructions executable by a processor, e.g., a Central Processing Unit (CPU), a Graphics Processing Unit (GPU), and/or a Tensor Processing Unit (TPU), to perform a method, such as one or more of the methods described herein. Still other various embodiments may include a system of one or more computers comprising one or more processors operable to execute stored instructions to perform a method, such as one or more of the methods described herein.
It should be appreciated that all combinations of the foregoing concepts and additional concepts described in more detail herein are contemplated as being part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are contemplated as being part of the subject matter disclosed herein.
Drawings
FIG. 1 is a block diagram of an example environment in which embodiments disclosed herein may be implemented.
FIG. 2A illustrates an example of an implementation of training a scoring model.
FIG. 2B illustrates an example of another implementation of training a scoring model.
FIG. 3 illustrates an example of generating a response vector for a response and storing the response vector in association with the response.
FIG. 4 illustrates an example of generating an input vector based on received electronic communications and selecting a response based on a comparison of the input vector and a response vector stored in association with the selected response.
FIG. 5 is a flow chart illustrating a method of training a scoring model according to various embodiments disclosed herein.
Fig. 6A and 6B each illustrate an example graphical user interface for providing a selected response as a suggestion for inclusion in a reply to a received electronic communication.
FIG. 7 illustrates an example architecture of a computing device.
Detailed Description
FIG. 1 illustrates a block diagram of an example environment in which embodiments disclosed herein may be implemented. The example environment includes a communication network 101 that facilitates communication between various components in the environment. In some implementations, the communication network 101 may include a Wide Area Network (WAN) such as the internet, one or more intranets, and/or one or more bus subsystems. The communication network 101 may optionally utilize one or more standard communication techniques, protocols, and/or inter-process communication techniques.
The example environment of fig. 1 also includes a client device 106, an electronic communication system 110, a response system 120, and a response indexing system 140.
Electronic communication system 110, response system 120, and response indexing system 140 may each be implemented in one or more computing devices that communicate, for example, over a network (e.g., network 101 and/or other networks). Electronic communication system 110, response system 120, and response indexing system 140 are example systems that may implement and/or interface with the systems, components, and techniques described herein. They may each include one or more memories for storing data and software applications, one or more processors for accessing data and executing applications, and other components that facilitate communication over a network. Operations performed by one or more of systems 110, 120, and 140 may each be distributed across multiple computer systems. In some implementations, one or more aspects of systems 110, 120, and/or 140 may be combined in a single system and/or may be implemented on client device 106.
Fig. 1 also includes an electronic communications database 115, the electronic communications database 115 including one or more storage media including all or part of the electronic communications of a plurality of users. In some embodiments, the electronic communication database 115 is maintained by the electronic communication system 110. For example, the electronic communication system 110 may include one or more email systems, and the electronic communication database 115 may include a plurality of emails sent and/or received via the email systems. As another example, electronic communication system 110 may include one or more social networking systems, and electronic communication database 115 may include messages, posts, or other communications sent and/or received via these social networking systems.
As used herein, "electronic communication" or "communication" may refer to email, text message (e.g., SMS, MMS), instant message, transcribed voicemail, or any other electronic communication sent from a first user to a restricted group of one or more additional users. In various implementations, the electronic communication may include various metadata, and the metadata may optionally be utilized (e.g., as an input feature) in one or more of the techniques described herein. For example, an electronic communication such as an email may include an electronic communication address such as one or more sender identifiers (e.g., sender email address), one or more recipient identifiers (e.g., recipient email address, including both carbon copy and carbon copy recipient), a date of transmission, one or more attachments, a subject, a type of device that transmitted and/or received the electronic communication, and so forth.
As used herein, depending on the context, "electronic communication" and "communication" will be utilized to refer to both electronic communications that include only a single "initial" message, as well as electronic communications that include an initial message and one or more additional messages that follow the initial message. For example, the electronic communication may include an "initial" message from a first user and an additional message as a reply message from a second user. In addition, for example, the electronic communication may include an "initial" message from the first user and an additional message also from the first user. Thus, candidate responses described herein may be generated based on received communications that include only a single initial message or received communications that include an initial message and one or more additional messages. The electronic communication may be a single document, such as an email that includes both the original message and one or more additional messages and that is optionally processed to distinguish the original message from the additional messages.
Processing the electronic communication to distinguish the initial message from the additional message may include "splitting" the message based on the presence of metadata, message interruption, header information included in the message, quotation marks provided around the initial message, and so forth. The electronic communication may also be a plurality of documents that map to each other based on at least one of the plurality of documents in response to another of the plurality of documents. For example, the electronic communication may include a first email that is an original message received by the user and a second email sent by the user as a reply to the original message, or original and reply SMS messages. The mapping of the plurality of documents to each other may be performed, for example, by the electronic communication system 110. For example, the electronic communication system 110 may map a first email to a second email based on a user selecting a "reply" user interface element while viewing the first email and then drafting the second email in response to selecting the reply user interface element.
Typically, the response system 120 determines and provides a suggested response to include in a reply to an electronic communication, such as an electronic communication provided by the client device 106 and/or an electronic communication of the electronic communication database 115 to which the user is to reply. As described herein, the response system 120 can utilize various techniques in determining which responses should be provided as suggestions to include in reply to a given communication. In some implementations, the response system 120 can provide the determined response as a suggestion independent of any text input provided by the user when generating a reply to the communication and/or independent of any other content (e.g., voice input, graphical element) provided by the user when generating a reply to the communication.
In various implementations, the response system 120 may include an input vector engine 122, a vector comparison scoring engine 124, a response selection engine 126, a presentation engine 128, and optionally a joint feature scoring engine 130. In some implementations, aspects of one or more of the engines 122, 124, 128, and/or 130 may be omitted, combined, and/or implemented in components separate from the response system 120, such as the client device 106 and/or the electronic communication system 110.
The description of the components of the response system 120 is provided below with reference to the electronic communications of the user, such as the electronic communications provided by the client device 106 and/or the electronic communications of the electronic communications database 115 to which the user is to reply. Although a single electronic communication is referenced in the examples for brevity, it should be understood that the response system 120 may determine suggested responses to additional electronic communications for the user and/or additional users. For example, response system 120 may manage determination of suggested responses for each of a plurality of client devices via different sessions and may manage multiple sessions in parallel. For example, response system 120 may be implemented as a cloud-based service employing a cloud infrastructure, e.g., using a server farm or cluster of high-performance computers running software suitable for handling large numbers of requests from multiple users. However, for simplicity, many examples herein are described with respect to a single client device 106 and a single electronic communication.
The input vector engine 122 determines input features of the received electronic communication and applies those input features to the input neural network model 151. The input neural network model 151 is a deep neural network model that may be stored in one or more computer-readable media accessible to the input vector engine 122. As described herein, the input vector engine 122 operates on top of the input neural network model 151 by applying inputs to the model and generating outputs on top of the model based on the learned parameters of the model.
The input features determined and applied to the input neural network model 151 may take various forms and will depend on the representation used to train the input neural network model 151. As some non-limiting examples, the input features may include: communication text features (e.g., text and/or other content based on the text of the communication, optionally excluding template sentences); a first sentence feature (e.g., a body-based first sentence); final sentence characteristics (e.g., text-based final sentence); theme features (e.g., communication-based theme lines); author characteristics (author based on communication); and/or a time characteristic (e.g., based on the date, time, day of week of the sent communication); etc. In the case of text where the input feature is based on a communication, the feature may be a representation of the text, such as a word-embedded package of various n-grams (e.g., unigrams, bigrams, trigrams, and/or other n-grams) of the text. For example, the communication text feature may be a word embedded package of terms of the text of the communication. As another example where the features are text-based, all or part of the text may be applied to a Long Short Term Memory (LSTM) neural network model on a label-by-label basis, and the hidden state of the LSTM model after application may be used as a feature of the text. As yet another example, the representation of text may be based on the embedding of all or part of the text based on another model, such as a GloVE embedding model and/or a Word2Vec embedding model. Additional and/or alternative features may be utilized.
Regardless of the form of the input features of the communication, the input vector engine 122 generates input vectors based on the application of the input features to the input neural network model 151. As described herein, in some implementations, the input vector engine 122 determines different sets of input features (e.g., a first set of text features, a second set of theme features, etc.) and applies each set as input to different sets of parallel layers of the input neural network model 151. The input vector engine 122 may generate intermediate outputs based on each of the parallel groups of layers and their corresponding inputs, and then provide these intermediate outputs as inputs to one or more downstream layers to generate the input vector.
The input vector engine 122 provides the input vector to the vector comparison scoring engine 124. The vector comparison scoring engine 124 uses the input vector to determine a subset of available responses that are likely to be responses that are suitable for inclusion in replies to electronic communications. Vector comparison scoring engine 124 may compare the input vector to a response vector having a response index of response vector 174 (and/or additional values determined based on the response vector) to determine a subset of the appropriate available responses. As described herein, a response index having a response vector 174 may include, for each of a plurality of available responses, a pre-stored association of the available response with a corresponding response vector. The response indexing system 140 may generate an association of the response with the response vector based on the characteristics of the response (e.g., the response identified from the response database 172) to the application of the response neural network model 155. Additional description is provided herein.
As one example, to determine the appropriateness of a given response for an electronic communication, vector comparison scoring engine 124 may determine a response score for the given response based on the result of a dot product between the input vector and a response vector stored in association with the given response. For example, the response score may be a scalar result of a dot product.
In some implementations, vector comparison scoring engine 124 may include only a threshold amount of responses and/or only responses whose corresponding response scores meet a threshold for inclusion in the subset. In some implementations, vector comparison scoring engine 124 may utilize one or more techniques to eliminate the need to search for all response vectors and/or to eliminate the need to determine a dot product between an input vector and each of the response vectors having a response index of response vector 174. For example, as mentioned below, a response index with response vector 174 may include a plurality of clusters of response vectors. In such examples, the vector comparison scoring engine 124 may compare the input vector to vectors associated with each of the one or more clusters (e.g., a mean vector or other representative vector of each cluster) to identify a subset of vectors most relevant to the given input vector. Vector comparison scoring engine 124 may then calculate the response scores for the response vectors for only a subset. Note that in some implementations, by comparing the input vector to the response vectors associated with each cluster, a tree-based approach and/or other approaches may be utilized to enable efficient identification of the clusters most relevant to the input vector without comparing the input vector to the response vector of each of the clusters. For example, response vectors for only a subset of clusters may be analyzed to efficiently identify one or more potentially relevant clusters, and then optionally dot products determined for only the response vectors for those clusters.
Vector comparison scoring engine 124 provides an indication of the determined subset of candidate responses and, optionally, the corresponding determined response scores to response selection engine 126. The response selection engine 126 selects one or more (e.g., all) of the subset of candidate responses for inclusion in the selected set to be provided to the presentation engine 128 for presentation as suggested responses. Those responses selected for presentation as suggested responses are also referred to as "selected responses".
As one example, vector comparison scoring engine 124 may provide a subset of candidate responses and scores, and response selection engine 126 may select one or more of those based solely on the scores (e.g., only the "X" responses with the "best" scores). As another example, vector comparison scoring engine 124 may provide a subset of candidate responses and scores, and response selection engine 126 may select one or more of those based on the scores and based on one or more additional factors. For example, the one or more additional factors may be diversity (e.g., to facilitate semantic diversity among the provided responses), response length of the responses (e.g., to ensure that the provided responses may collectively "fit" into the corresponding user interfaces), and so forth. As another example, the one or more additional factors may include a joint feature score determined by the joint feature scoring engine 130 for responses of the subset of candidate responses.
The federated feature scoring engine 130 is optional and utilizes a federated scoring model 133 to determine additional federated feature scores. The joint scoring model 133 may be a deep neural network model trained to provide an output indicative of the appropriateness of a response for a communication based on joint application features of the response and the features of the electronic communication as inputs. The joint feature scoring engine 130 applies the features of the response and the features of the electronic communication as inputs jointly to the joint scoring model 133. The federated feature scoring engine 130 generates federated feature scores over the model 133 based on the features of the jointly applied response and the features of the electronic communication. In view of the inefficiency of the techniques utilized by the federated feature scoring engine 130 (relative to those utilized by the vector comparison scoring engine 124), the federated feature scoring engine 130 may optionally be utilized on only a subset of the candidate responses determined by the vector comparison scoring engine 124. The inefficiency of the federated feature scoring engine 130 may result from, for example, the need to apply both response features and message features jointly to determine a federated response score for any given response.
In some implementations, the vector comparison scoring engine 124 and the response selection engine 126 may be effectively "combined". For example, vector comparison scoring engine 124 may use its own determined score to determine the most relevant candidate responses and provide those responses directly to presentation engine 128 as selected responses for presentation as suggested responses.
The presentation engine 128 provides the selected response for inclusion in a reply electronic communication that is a reply to the electronic communication by the user. For example, the presentation engine 128 may present one or more user interface indications (e.g., graphical, audible) of the selected responses, and when a user generating the reply selects one of these indications, the corresponding response may be automatically incorporated in the reply. The reply may then be sent automatically and/or in response to further user interface input by the user (optionally after the user has added additional content to the reply). This automatic incorporation of the selected response into the reply message frees the user from manually entering the selected response and saves many of the user interaction steps and corresponding inputs necessary to establish a reply message that includes the response.
In some implementations, the presentation engine 128 provides the selected response independent of any input and/or other content provided via the user's computing device in generating a reply to the electronic communication. In some of those embodiments, the selected response may be determined by the response selection engine 126 before the user has even viewed or otherwise consumed the communication. For example, the response system 120 may process the communication prior to viewing by the user, and the presentation engine 128 may append or otherwise associate the selected response with the electronic communication prior to the electronic communication even being viewed by the user. Thus, if a user views or otherwise consumes an electronic communication, a selected response to the electronic communication may be provided quickly without delay.
In some implementations in which electronic communications are provided by the client device 106 to the response system 120, the presentation engine 128 may provide the selected response to the client device 106 for presentation to the user as an option for inclusion in the reply. In some embodiments in which electronic communications are provided by electronic communication system 110 to response system 120 via electronic communication database 115, presentation engine 128 may store an association of the selected response with the electronic communication in electronic communication database 115 and/or other databases. In some implementations, one or more (e.g., all) aspects of the presentation engine 128 may be implemented by the client device 106 and/or the electronic communication system 110.
The presentation engine 128 may also provide the selected responses with display highlighting information indicating the highlighting (e.g., location, size, color) that should be used to present those responses. In general, the higher the score for a particular response, the greater the prominence for that particular response. As one example, the score for the response determined by the vector comparison scoring engine 124 may be utilized.
In some implementations, the presentation engine 128 provides only the selected response (or associated identifier) and potentially the highlighting information, and the client device 106 and/or the electronic communication system 110 can generate a display of the selected document based on the provided data. In some implementations, the presentation engine 128 may additionally provide some or all of the data necessary to generate the display. In some of those embodiments, any provided highlighting information may be incorporated in the data indicating how the display should be presented.
Fig. 2A illustrates an example of an implementation of training scoring model 150A. Scoring model 150A includes an embodiment 151A of input neural network model 151 of fig. 1 and an embodiment 155A of responsive neural network model 155 of fig. 1. Training of scoring model 150A may be performed by a training engine (e.g., implemented by one or more CPUs, GPUs, and/or TPUs), and the training engine may include error engine 182 of fig. 2A.
In FIG. 2A, training examples 166A are retrieved from training examples database 165. The training examples include input features 167A, response features 168A, and indications 169A. The input features 167A may be based on features of the electronic communication, such as those described herein (e.g., text features). Response feature 168A may be based on features of the response that are true responses to the electronic communication when training instance 166A is a positive instance or are not true responses when training instance 166A is a negative instance. Indication 169A indicates whether training instance 166A is a negative training instance or a positive training instance (i.e., whether response feature 168A is a response to a true response to the communication upon which input feature 167A is based).
The input features 167A of training example 166A are applied as inputs to the input layer 152A of the input neural network model 151A of scoring model 150A. Input vector 195A is generated above input layer 152A based on the application of input feature 167A.
Response characteristics 168A of training examples 166A are applied as input to response layer 156A of response neural network model 155A of scoring model 150A. Input vector 197A is generated above response layer 156A based on the application of response feature 168A.
Vector comparison scoring engine 124 determines a response score based on a comparison of input vector 195A and response vector 197A. For example, vector comparison scoring engine 124 may determine a response score that is a scalar result of a dot product between two vectors. Note that input vector 195A is generated based on the application of input feature 167A to input layer 152A and is generated independently of response layer 156A and response feature 168A. Likewise, response vector 197A is generated based on the application of response feature 168A and is generated independently of input layer 152A and input feature 167A. It is simply the output (vectors 195A and 197A) generated over the separate input neural network model 151A and the response neural network model 155A that are compared during training (but such comparison is used to generate the error for the back propagation of the two networks 151A and 155A as described below and elsewhere herein).
Vector comparison scoring engine 124 provides the response score to error engine 182. Error engine 182 determines the error, if any, of vector comparison scoring engine 124 based on a comparison of the response score to the actual response score indicated by indication 169A. For example, the indication 169A may be a "1" (or other value) where the training instance 166A is a positive training instance, and a "0" (or other value) where the training instance 166A is a negative training instance. The error engine 182 then updates both the input neural network model 151A and the response neural network model 155A based on the errors (and optionally based on other errors determined for the batch of training instances when batch learning is utilized and the training instance 166A of fig. 2A is part of the batch). For example, error engine 182 may perform back propagation on top of input layer 152A and response layer 156A based on the error and loss functions.
Although fig. 2A is illustrated with respect to a single training example, it should be understood that a large number of training examples will be utilized in training scoring model 150A during training of scoring model 150A.
Fig. 2B illustrates an example of another implementation of training scoring model 150B. Scoring model 150B includes an embodiment 151B of input neural network model 151 of fig. 1 and an embodiment 155B of responsive neural network model 155 of fig. 1. Training of scoring model 150A may be performed by a training engine (e.g., implemented by one or more CPUs, GPUs, and/or TPUs), and the training engine may include error engine 182 of fig. 2B.
In FIG. 2B, training examples 166B are retrieved from training examples database 165. Training example 166B includes multiple sets of input features. The multiple sets of input features are indicated as a first set of input features 167BA through an nth set of input features 167BN (while the ellipses therebetween indicate that additional sets of input features may be provided). Each set of input features of training examples 166B may be based on unique features of the electronic communication and/or a unique combination of features of the electronic communication. For example, the first set of input features 167BA may be text features and the nth set of input features 167BN may be theme features. As another example, the first set of input features 167BA may be body features from a most recent message of a communication and the nth set of input features 167BN may be body features from a prior message of the communication.
Training example 166B also includes response feature 168B and indication 169B. Response feature 168B may be based on features of the response that are true responses to the electronic communication when training instance 166B is a positive instance or are not true responses when training instance 166B is a negative instance. Indication 169B indicates whether training instance 166B is a negative training instance or a positive training instance.
The first input feature 167BA of training example 166B is applied as input to the input upstream layer 153B1 of the input neural network model 151B of the scoring model 150B. The nth input feature 167BN of training example 166B is applied as input to the input upstream layer 153BN of the input neural network model 151B of scoring model 150B. The input upstream input layer 153B1 is parallel to the input upstream input layer 153BN.
A first input vector 194B1 is generated on top of the input upstream layer 153B1 based on the application of the input feature 167 BA. An nth input vector 194BN is generated over the input upstream layer 153BN based on the application of the input feature 167 BN.
The input is applied to the input downstream layer 154B of the input neural network model 151B. The input is based on a combination of the first input vector 194B1, the nth input vector 194BN, and any other input vectors from any additional unillustrated input upstream layers that would each be based on a corresponding different set of input features of the training examples 166B. The combination of vectors may be a concatenation, an addition (e.g., a weighted sum), and/or other combination.
The total input vector 195B is generated above the input downstream layers 154B based on the applications input to those layers 154B.
Response characteristics 168B of training instance 166B are applied as input to the input of response upstream layer 157B1 of response neural network model 155B of scoring model 150B. The response characteristics 168B of training examples 166B are also applied as input to the response upstream layer 157BN of the response neural network model 155B of the scoring model 150B separately. The response upstream layer 157B1 is parallel to the response upstream layer 157BN.
A first response vector 196B1 is generated on top of the response upstream layer 157B1 based on the application of response features 168B to those layers 157B 1. An nth response vector 196BN is generated above the response upstream layer 157BN based on the application of response characteristics 168B to those layers 157BN.
The input is applied to the response downstream layer 158B of the response neural network model 155B. The input is based on a combination of the first response vector 196B1, the nth response vector 196BN, and any other response vectors from any additional, not shown, response upstream layers (which would each also be based on a corresponding separate application of the response feature 168B). The combination of vectors may be a concatenation, an addition (e.g., a weighted sum), and/or other combination.
The total response vector 197B is generated above the response downstream layer 158B based on the applications input to those layers 158B.
The vector comparison scoring engine 124 determines a response score based on a comparison of the total input vector 195B and the total response vector 197B. For example, vector comparison scoring engine 124 may determine a response score that is a scalar result of a dot product between two vectors. The vector comparison scoring engine 124 also determines additional response scores based on a comparison of the first input vector 194B1 and the first response vector 196B 1. The vector comparison scoring engine 124 also determines another additional response score based further on a comparison of the nth input vector 194BN and the nth response vector 196 BN. Where additional input upstream layer, responsive upstream layer pairs are provided, the relevance comparison scoring engine 124 may further determine yet another additional response score based on the corresponding input and response vector pairs.
Vector comparison scoring engine 124 provides a plurality of response scores to error engine 182. The error engine 182 determines an error (if any) for each of the plurality of response scores based on a comparison of the response score to the actual response score indicated by the indication 169B. For example, the error engine 182 may determine a first error based on a comparison of the first response score to the actual response score, determine a second error based on a comparison of the second response score to the actual response score, and so on. The error engine 182 then updates both the input neural network model 151B and the response neural network model 155B based on the plurality of errors (and optionally based on other errors determined for the batch of training instances when batch learning is utilized and the training instances of fig. 2B are part of the batch). For example, assume that: a first error based on a comparison of the dot product of vectors 195B and 197B with the actual response score indicated by indication 169B; a second error based on a comparison of the dot product of vectors 194B1 and 196B1 with the actual response score indicated by indication 169B; and a third error based on a comparison of dot products of vectors 194BN and 196 BN. The error engine 182 may update the input downstream layer 154B and the response downstream layer 158B based on the first error (e.g., by back propagation of gradients based on the error and the loss function). Error engine 182 may update input upstream layer 153B1 and response upstream layer 157B1 based on the second error and based on any remaining gradients from the application of the first error to layers 154B and 158B. The error engine 182 may also update the input upstream layer 153BN and the response upstream layer 157BN based on the third error and based on any remaining gradients from the application of the first error to the input layer 132B3 and subsequent content layers.
The scoring model 150B of fig. 2B is a multiple-loss model that determines each error of the plurality of errors based on a comparison (e.g., dot product) between output vectors generated over "paired" but separate parallel layers. Such a multiple-loss model enables collaborative training of paired parallel layers. For example, responsive upstream layer 157B1 and input upstream layer 153B1 are "paired" in the example of fig. 2B, because error engine 182 determines an error based on the dot product of separate vectors 194B1 and 196B1 generated above layers 153B1 and 157B1—and updates layers 153B1 and 157B1 based on the error. For example, layers 153B1 and 157B1 may be updated based on the error, but not other layers. Thus, layers 157B1 and 153B1 are trained in dependency of each other while remaining separated—effectively independently training layers 157B1 and 153B1 to score responses. Likewise, the responsive upstream layer 157BN and the input upstream layer 153BN are trained in dependence upon each other while still remaining separated. For example, the error engine 182 determines an error based on the dot product of the individual vectors 194BN and 196BN generated over the layers 153BN and 157bn—and updates the layers 153BN and 157BN based on the error. For example, layers 153BN and 157BN may be updated based on the error, but not other layers. Input downstream layer 154B and responsive downstream layer 158B are trained in dependence upon each other while still remaining separated. For example, error engine 182 determines an error based on the dot product of individual vectors 195B and 197B generated above layers 154B and 158B-and updates layers 154B and 158B based on the error. The error engine 182 may further apply any remaining gradients to the upstream layers 153B1, 153BN, 157B1, 157BN after updating the layers 154B and 158B.
Although fig. 2B is illustrated with respect to a single training example, it should be understood that a large number of training examples will be utilized during training of scoring model 130A.
FIG. 3 illustrates an example of generating a response vector for a response and storing the response vector in association with the response. Response indexing system 140 retrieves responses from response database 172. Response database 172 may be, for example, a database of "whitelisted" responses (e.g., responses that meet some criteria such as frequency usage criteria, length criteria, content criteria, etc.).
Response indexing system 140 generates response vectors based on applying response characteristics of the responses as inputs to response neural network model 154. The response feature may be, for example, a word embedding feature and/or other features, such as those described above with respect to the input feature. In particular, the response indexing system 140 generates response vectors based on the applied inputs on top of the response neural network model 154. The response vector and an indication of the response 174A (e.g., the response itself or an associated identifier) are stored by the response indexing system 140 in a response index having the response vector 174. The response indexing system 140 also stores associations of response vectors with indications of responses.
Response indexing system 140 generates a response index having response vector 174 by processing a large number (e.g., all) of the responses of response database 172. The generated index 174 includes a corresponding predetermined response vector and/or other values stored in association with each of the responses. For example, index 174 may have an association of stored "response A" with a corresponding response vector, an association of stored "response B" with a corresponding response vector, and so forth. Index 174 may have similarly stored associations with each of a plurality (thousands, hundreds of thousands, etc.) of additional responses.
Various techniques may be utilized to store and/or construct associations and/or values in index 174. For example, in some embodiments, the index 174 is partitioned into a plurality of slices. In some of those and/or other embodiments, the response indexing system 140 determines a plurality of clusters of response vectors, seeking to cluster similar vectors together. The response indexing system 140 may build a tree or other structure to enable an initial search for relevant response vectors by clustering (e.g., by the vector comparison scoring engine 124). In contrast to a less computationally efficient search for each response vector separately, such a tree or other structure may first enable searching each cluster to identify the most relevant cluster.
In some implementations, the response indexing system 140 generates a hierarchical model of a hierarchical combination of vector quantization, orthogonal transformation, and product quantization of the transform-based response vector quantization residuals for the index 174. The hierarchical model may be quantified by layeringTo approximate
Wherein the method comprises the steps of
Is a response vector +.>Vector quantization of (i), i.e.
/>
And is also provided withIs the learned orthogonal rotation that is applied to the vector quantized residual. />Is the product quantization of the rotation residual. Integration quantizer->Given by the following formula:
concatenating codewords is by rotating the residualDividing into K subvectors->(k=1, 2, …, K) and is +.>These sub-vectors are quantized independently to obtain:
codebook C for vector quantization during training VQ Codebook for product quantizationAnd the rotation matrix R is all trained jointly to use random gradient descent (SGD) to let +.>Is minimized. At the time of reasoning, prediction is performed by taking the candidate with the highest quantized dot product. Can be in no reconstruction->But performs the distance calculation very efficiently by using a look-up table for the asymmetric distance calculation. Furthermore, SIMD (single instruction, multiple data) instructions may be used to perform a lookup operation in a register.
FIG. 4 illustrates an example of generating an input vector based on a received electronic communication and selecting a response based on a comparison of the input vector and a response vector stored in association with the selected response.
In fig. 4, the input vector engine 122 determines input features based on the electronic communication 152A. The input vector engine 122 generates an input vector 153A based on applying those input features as inputs to the input neural network model 154 and generating an input vector 153A on top of the model 154 based on the applied inputs.
Vector comparison scoring engine 124 uses input vector 153A to determine one or more responses and scores 154A from index 174 to provide to response selection engine 126. For example, the vector comparison scoring engine 124 may determine responses and/or scores based on dot products of the input vector and corresponding pre-stored response vectors for those responses in the index 174.
Response selection engine 126 determines the received responses and selected responses 155A of scores 154A and provides those selected responses 155A to presentation engine 128. The presentation engine 128 provides the selected response 155A as a suggestion for inclusion in the reply to the electronic communication 152A.
Turning now to fig. 5, a flow chart illustrating a method 500 of training a scoring model according to various embodiments disclosed herein is provided. For convenience, the operations of the flowcharts are described with reference to systems performing the operations. The system may include one or more components, such as one or more processors (e.g., a CPU, GPU, and/or TPU). Although the operations of method 500 are shown in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 552, the system identifies a batch of training instances. For example, each of the training instances may be a positive training instance having one or more sets of input features, response features, and an indication of whether the instance is a positive or negative instance.
At block 554, the system selects a training instance for the batch.
At block 556, the system generates an input vector based on applying one or more sets of input features of the selected training examples to the input neural network.
At block 558, the system generates a response vector based on applying the response characteristics of the selected training instance to the response neural network.
At block 560, the system determines a response score based on the dot product of the input vector generated in block 556 and the response vector generated in block 558.
At block 562, the system determines an error for the training instance based on a comparison of the response score to the response score indicated by the training instance. For example, where the training instance is a positive training instance, the response score indicated by the training instance may be a "1" or other "positive" value.
At block 564, the system determines whether there are any additional unprocessed training instances in the batch. If so, the system proceeds to block 554 and selects an additional training instance. The system then performs blocks 556, 558, 560, and 562 based on the additional training instances.
If at the iteration of block 564, the system determines that there are no additional unprocessed training instances in the batch, then the system proceeds to block 566.
At block 566, the system determines an additional negative response score based on the dot product of the input vector and the response vector based on the different training examples. For example, the system may determine an additional negative training instance response score based on the dot product of the input vector generated based on the first training instance at block 556 and the response vector generated based on the second, different training instance at block 558. By using input vectors and response vectors generated based on two different training examples, it can be assumed that the corresponding input features and response features are not based on "actual" electronic communication, response. Accordingly, it may be assumed that the additional response score generated at block 566 is an additional "negative" response score. Execution of block 566 effectively provides additional negative training examples while enabling reuse of previously generated input vectors and response vectors. In other words, additional negative training examples are effectively obtained without the need to computationally intensive generate additional input vectors and response vectors.
As one particular example, assume that the batch of blocks 552 consists of 100 positive training examples. After training based on 100 positive training examples, 100 input vectors and 100 response vectors have been generated. The first "negative" correlation value may be generated based on a dot product of a first input vector for the first training instance and a second response vector for the second training instance. A second "negative" correlation value may be generated based on a dot product of the first input vector and a third response vector of a third training example. An additional "negative" correlation value may be determined based on the dot product of the first input vector and the response vectors for the fourth through first hundred training examples. In addition, 99 "negative" correlation values may be similarly determined based on the input vector for the second training instance and the response vectors of other training instances (not those of the second training instance). 99 "negative" correlation values, etc., may be similarly determined based on the input vector for the third training instance and the response vectors of other training instances (not those of the third training instance). Thus, 9,900 "negative" correlation values may be generated by a relatively computationally efficient dot product calculation based on vectors that have been generated by the positive training examples. Additionally, a total error may be determined (at block 670 below) that is based on a function of all "negative" correlation values (e.g., a softmax function) and back-propagating (at block 572) the total error over the input and response neural networks.
At block 568, the system determines an additional error based on the additional negative response score determined at block 566. In particular, because the response score determined at block 566 is considered for the additional negative instance, the system determines an additional error based on a comparison of the negative response score of block 566 to a "0" or other "negative" value.
At block 570, the system determines an error for the lot. The error for the lot may be based on the error determined at the iteration of blocks 562 and 568.
At block 572, the system back propagates the batch-based error over the input neural network model and the response neural network model.
The system may then identify a new batch of training instances and restart the method 500 for the new batch. Such training may continue until one or more criteria are met. Although fig. 5 illustrates a particular batch training method, it should be understood that non-batch training may additionally or alternatively be used in training. Additionally, blocks 566 and 568 may be omitted and/or other blocks may be omitted or added in some embodiments.
In some implementations that utilize additional negative example response scores during training (e.g., as described with respect to blocks 566 and 568 of method 500), it may be the case that response vectors for common responses with high a priori likelihood are frequently utilized. Such bias may lead to scoring models that favor specific and long responses rather than short and general responses. To correct for this, some embodiments may bias the response score for a given response generated at run-time (e.g., by vector comparison scoring engine 124) using a bias score derived from the log-likelihood of the given response (e.g., as estimated using a language model). In other words, the bias score may "boost" the response score for a commonplace response (indicated as commonplace by the language model) more than the response score for a non-commonplace response. In some of those embodiments, since the language model inherently assigns lower probabilities to longer sequences, another bias score may optionally be added to increase the score of the long response.
Fig. 6A and 6B each illustrate an example graphical user interface 600A and 600B for providing a selected response as a suggestion for inclusion in a reply to a received electronic communication. The graphical user interfaces 600A and 600B may be presented at the client device 106 (e.g., in a browser executing at the client device 106 and/or in a dedicated electronic communication application executing at the client device 106).
In FIG. 6A, the original email 680A that has been sent to the user is being viewed by the user before the user has provided any user interface input to indicate a desire to reply to the original email 680A. The selected responses 691A, 692A, and 693A are presented in the graphical user interface 600A and are presented for inclusion in a reply to an email. For example, user selection of response 691A can automatically present to the user the text "I'd love to-! (i'm happy |) "or such reply e-mail may be automatically generated and sent (without first presenting the user with an editable version). The user selection of the response may be a single user interface input such as a single "tap", a single "mouse click", or the like.
In fig. 6B, the original chat message 680B that has been sent to the user is being viewed by the user before the user has provided any content for inclusion in the reply to the original chat message 680B (e.g., possibly after the user has selected the "reply" interface element, but before the user has "typed" any content for the reply). Selected responses 691B, 692B, and 693B are presented in graphical user interface 600B and are presented for inclusion in a reply to original chat message 680B. For example, user selection of response 693B may automatically present to the user the text "What weighted? (what is.
While examples of graphical interfaces are presented in fig. 6A and 6B, it should be understood that selected responses may additionally or alternatively be provided for audible presentation to a user via a client device. For example, the client device 106 may audibly "read" the received electronic communication and then audibly provide "say a with i's willingness to respond, B with what time to respond, C with sorry, i's inability to respond". In response to the A, B or C spoken user interface input during or after the audible provision, the client device 106 may then cause a corresponding reply to be generated and sent.
Where the systems described herein collect or may utilize personal information about a user, the user may be provided with an opportunity to control whether programs or features collect user information (e.g., information about the user's social network, social actions or activities, professions, the user's preferences, or the user's current geographic location) or to control whether and/or how content that may be more relevant to the user is received from a content server. In addition, certain data may be processed in one or more ways before it is stored or used so that personally identifiable information is removed. For example, the identity of the user may be processed such that personally identifiable information cannot be determined for the user, or the geographic location of the user may be generalized (such as to a city, ZIP code, or state level) where geographic location information is obtained such that a particular geographic location of the user cannot be determined. Thus, the user may control how information about the user is collected and/or used.
FIG. 7 is a block diagram of an example computing device 710 that may optionally be utilized to perform one or more aspects of the techniques described herein. The computing device 710 includes at least one processor 714 (e.g., CPU, GPU, and/or TPU) that communicates with a number of peripheral devices via a bus subsystem 712. These peripheral devices may include a storage subsystem 724 (including, for example, a memory subsystem 725 and a file storage subsystem 726), a user interface output device 720, a user interface input device 722, and a network interface subsystem 715. Input and output devices allow users to interact with computing device 710. The network interface subsystem 715 provides an interface to external networks and couples to corresponding interface devices among other computing devices.
User interface input devices 722 may include a keyboard, a pointing device such as a mouse, trackball, touch pad, or graphics tablet, a scanner, a touch screen incorporated into a display, an audio input device such as a voice recognition system, a microphone, and/or other types of input devices. In general, use of the term "input device" is intended to include all possible types of devices and ways to input information into computing device 710 or onto a communication network.
The user interface output device 720 may include a display subsystem, a printer, a facsimile machine, or a non-visual display such as an audio output device. The display subsystem may include a Cathode Ray Tube (CRT), a flat panel device such as a Liquid Crystal Display (LCD), a projection device, or some other mechanism for creating regular images. The display subsystem may also provide for non-visual display, for example, via an audio output device. In general, use of the term "output device" is intended to include all possible types of devices and manners for outputting information from the computing device 710 to a user, or to another machine or computing device.
Storage subsystem 724 stores programming and data constructs that provide the functionality of some or all of the modules described herein. For example, storage subsystem 724 may include logic to perform selected aspects of the methods described herein.
These software modules are typically executed by processor 714, alone or in combination with other processors. Memory 725 used in storage subsystem 724 may include a number of memories including a main Random Access Memory (RAM) 730 for storing instructions and data during program execution and a Read Only Memory (ROM) 732 in which fixed instructions are stored. File storage subsystem 726 may provide persistent storage for program and data files, and may include a hard disk drive, a solid state drive, a floppy disk drive, and associated removable media, CD-ROM drive, optical drive, or removable media cartridge. Modules implementing the functionality of certain embodiments may be stored by file storage subsystem 726 in storage subsystem 724, or in other machines accessible by processor 714.
Bus subsystem 712 provides a mechanism for letting the various components and subsystems of computing device 710 communicate with each other as intended. Although bus subsystem 712 is shown schematically as a single bus, alternative embodiments of the bus subsystem may use multiple buses.
Computing device 710 may be of various types including a workstation, a server, a computing cluster, a blade server, a server farm, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computing device 710 depicted in FIG. 7 is intended only as a specific example for purposes of illustrating some embodiments. Many other configurations of computing device 710 are possible with more or fewer components than the computing device depicted in fig. 7.
Although several embodiments have been described and illustrated herein, various other means and/or structures for performing a function and/or obtaining a result and/or one or more of the advantages described herein may be utilized and each such change and/or modification is considered to be within the scope of the embodiments described herein. More generally, all parameters, dimensions, materials, and/or configurations will depend upon the specific application or applications for which the present teachings are used. Those skilled in the art will recognize, or be able to ascertain using no more than routine experimentation, many equivalents to the specific embodiments described herein. It is, therefore, to be understood that the foregoing embodiments are presented by way of example only and that, within the scope of the appended claims and equivalents thereto, the embodiments may be practiced otherwise than as specifically described and claimed. Embodiments of the present disclosure relate to each individual feature, system, article, material, kit, and/or method described herein. Furthermore, if such features, systems, articles, materials, kits, and/or methods are not mutually inconsistent, any combination of two or more such features, systems, articles, materials, kits, and/or methods is included within the scope of the present disclosure.
Claims (11)
1. A method implemented by one or more processors, comprising:
identifying a plurality of positive training instances, each of the plurality of positive training instances comprising an input feature and a response feature, wherein for each of the positive training instances:
the input features are based on the content of the electronic communication, and
the response feature is based on a reply electronic communication that is a reference true phase reply to the electronic communication;
for each of the positive training examples, generating a corresponding input vector based on processing the input features of the positive training examples using an input layer of a scoring model;
for each of the positive training examples, generating a corresponding response vector based on processing the response characteristics of the positive training example using a response layer of the scoring model;
for each of the positive training examples, generating a positive response score based on comparing the corresponding input vector of the positive training example with the corresponding response vector;
generating a positive error based on comparing the positive response score to a positive value;
generating a negative pairing comprising a corresponding input vector from a first one of the positive training instances and a corresponding response vector from a second one of the positive training instances;
Generating a negative response score based on comparing the corresponding input vector and the corresponding response vector of the negative pairing;
generating a negative error based on comparing the negative response score to a negative value; and
the scoring model is updated based on the positive error and the negative error.
2. The method of claim 1, further comprising:
generating an additional negative pairing comprising a corresponding input vector from the first one of the positive training instances and a corresponding response vector from a third one of the positive training instances;
generating an additional negative response score based on comparing the corresponding input vector and the corresponding response vector of the additional negative pairing; and
generating an additional negative error based on comparing the additional negative response score to a negative value;
wherein updating the scoring model is further based on the additional negative error.
3. The method of claim 2, further comprising:
generating a further negative pairing comprising a corresponding input vector from the first one of the positive training instances and a corresponding response vector from a fourth one of the positive training instances;
Generating a further negative response score based on comparing the corresponding input vector and the corresponding response vector of the further negative pairing; and
generating a further negative error based on comparing the further negative response score to a negative value;
wherein updating the scoring model is further based on the further negative error.
4. The method according to claim 1,
wherein comparing the corresponding input vector and the corresponding response vector of the positive training example includes generating a dot product of the corresponding input vector and the corresponding response vector of the positive training example, and
wherein comparing the corresponding input vector and the corresponding response vector of the negative pairing training instance comprises generating a dot product of the corresponding input vector and the corresponding response vector of the negative pairing training instance.
5. The method of claim 1, further comprising:
after training the scoring model:
identifying an additional response;
generating an additional response vector based on additional response features that process the additional response using a response layer of the scoring model; and
The association of the additional response vector with the additional response is stored in one or more computer-readable media.
6. The method of claim 5, further comprising:
after storing the association of the additional response vector with the additional response:
receiving a new input feature of a new electronic communication, the new electronic communication directed to a user and generated after the storing;
generating a new input vector based on processing the new input feature using the input layer of the scoring model;
generating a response score indicating a likelihood that the additional response is an appropriate response for the new electronic communication, wherein generating the response score is based on a comparison of the new input vector and the additional response vector stored in association with the additional response; and
based on the response score, a suggestion is provided to the user's client device to include the additional response in a reply to the new electronic communication.
7. A method implemented by one or more processors, the method comprising:
identifying an input feature of a transmitted electronic communication directed from a transmitting user to a receiving user, the transmitted electronic communication being an email, a text message, a chat message, or an instant message;
Generating a first input vector based on applying a first set of the input features to a first input layer of the trained input neural network model;
generating a second input vector based on applying a second set of the input features to a second input layer of the trained input neural network model,
wherein the first set of input features of the input features are unique relative to the second set of input features of the input features, and wherein the first input layer is parallel to the second input layer in the trained input neural network model;
generating a first response vector based on applying response characteristics of the candidate responses to a first response layer of the trained responsive neural network model;
generating a second response vector based on applying the response characteristics to a second response layer of the trained responsive neural network model,
wherein the first response layer is parallel to the second response layer in the trained response neural network model;
generating a response score based on the first input vector, the second input vector, the first response vector, and the second response vector;
Based on the response score, it is determined whether to provide the candidate response for inclusion in a reply electronic communication that is a reply to the electronic communication by the receiving user.
8. The method of claim 7, wherein generating the response score comprises:
generating a total input vector based on applying the first input vector and the second input vector to an input downstream layer of the input neural network model;
generating a total response vector based on applying the first response vector and the second response vector to a response downstream layer of the response neural network model; and
the response score is generated based on a comparison of the total input vector and the total response vector.
9. The method of claim 7, wherein generating the response score comprises:
generating a first response score based on a comparison of the first input vector and the first response score;
generating a second response score based on a comparison of the second input vector and the second response vector; and
the response score is generated based on the first response score and the second response score.
10. The method of claim 7, wherein generating the first response vector and the second response vector are both performed prior to creating the transmitted electronic communication.
11. A system, comprising:
a memory storing instructions;
one or more processors executing stored instructions to cause one or more of the processors to perform the method of any of claims 1 to 10.
Applications Claiming Priority (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762460558P | 2017-02-17 | 2017-02-17 | |
US62/460,558 | 2017-02-17 | ||
US15/476,292 US11373086B2 (en) | 2017-02-17 | 2017-03-31 | Cooperatively training and/or using separate input and response neural network models for determining response(s) for electronic communications |
US15/476,292 | 2017-03-31 | ||
CN201880012576.6A CN110383297B (en) | 2017-02-17 | 2018-02-15 | Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications |
PCT/US2018/018397 WO2018152345A1 (en) | 2017-02-17 | 2018-02-15 | Cooperatively training and/or using separate input and response neural network models for determining response(s) for electronic communications |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880012576.6A Division CN110383297B (en) | 2017-02-17 | 2018-02-15 | Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117172288A true CN117172288A (en) | 2023-12-05 |
Family
ID=63167909
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880012576.6A Active CN110383297B (en) | 2017-02-17 | 2018-02-15 | Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications |
CN202311093488.2A Pending CN117172288A (en) | 2017-02-17 | 2018-02-15 | Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880012576.6A Active CN110383297B (en) | 2017-02-17 | 2018-02-15 | Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications |
Country Status (4)
Country | Link |
---|---|
US (1) | US11373086B2 (en) |
EP (1) | EP3577603A1 (en) |
CN (2) | CN110383297B (en) |
WO (1) | WO2018152345A1 (en) |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10374982B2 (en) * | 2017-06-30 | 2019-08-06 | Microsoft Technology Licensing, Llc | Response retrieval using communication session vectors |
US11030997B2 (en) * | 2017-11-22 | 2021-06-08 | Baidu Usa Llc | Slim embedding layers for recurrent neural language models |
US11676220B2 (en) | 2018-04-20 | 2023-06-13 | Meta Platforms, Inc. | Processing multimodal user input for assistant systems |
US10978056B1 (en) * | 2018-04-20 | 2021-04-13 | Facebook, Inc. | Grammaticality classification for natural language generation in assistant systems |
US11886473B2 (en) | 2018-04-20 | 2024-01-30 | Meta Platforms, Inc. | Intent identification for agent matching by assistant systems |
US10782986B2 (en) | 2018-04-20 | 2020-09-22 | Facebook, Inc. | Assisting users with personalized and contextual communication content |
US11307880B2 (en) | 2018-04-20 | 2022-04-19 | Meta Platforms, Inc. | Assisting users with personalized and contextual communication content |
US11715042B1 (en) | 2018-04-20 | 2023-08-01 | Meta Platforms Technologies, Llc | Interpretability of deep reinforcement learning models in assistant systems |
US20200097818A1 (en) * | 2018-09-26 | 2020-03-26 | Xinlin LI | Method and system for training binary quantized weight and activation function for deep neural networks |
CN111177328B (en) * | 2018-11-12 | 2023-04-28 | 阿里巴巴集团控股有限公司 | Question-answer matching system and method, question-answer processing device and medium |
US11194973B1 (en) * | 2018-11-12 | 2021-12-07 | Amazon Technologies, Inc. | Dialog response generation |
CN110417637A (en) * | 2019-04-26 | 2019-11-05 | 成海林 | AI artificial intelligence augmentative communication technology |
US20230028934A1 (en) * | 2021-07-13 | 2023-01-26 | Vmware, Inc. | Methods and decentralized systems that employ distributed machine learning to automatically instantiate and manage distributed applications |
CN114816963B (en) * | 2022-06-28 | 2022-09-20 | 南昌航空大学 | Embedded software quality evaluation method, system, computer and readable storage medium |
Family Cites Families (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6490573B1 (en) | 2000-04-11 | 2002-12-03 | Philip Chidi Njemanze | Neural network for modeling ecological and biological systems |
US20020178360A1 (en) * | 2001-02-25 | 2002-11-28 | Storymail, Inc. | System and method for communicating a secure unidirectional response message |
AU2001293596A1 (en) | 2000-09-29 | 2002-04-08 | Gavagai Technology Incorporated | A method and system for adapting synonym resources to specific domains |
US9318108B2 (en) * | 2010-01-18 | 2016-04-19 | Apple Inc. | Intelligent automated assistant |
US8515212B1 (en) | 2009-07-17 | 2013-08-20 | Google Inc. | Image relevance model |
US8131786B1 (en) * | 2009-11-23 | 2012-03-06 | Google Inc. | Training scoring models optimized for highly-ranked results |
US20110224982A1 (en) * | 2010-03-12 | 2011-09-15 | c/o Microsoft Corporation | Automatic speech recognition based upon information retrieval methods |
US9129300B2 (en) | 2010-04-21 | 2015-09-08 | Yahoo! Inc. | Using external sources for sponsored search AD selection |
US8849721B2 (en) | 2011-09-21 | 2014-09-30 | Facebook, Inc. | Structured objects and actions on a social networking system |
US20130317808A1 (en) * | 2012-05-24 | 2013-11-28 | About, Inc. | System for and method of analyzing and responding to user generated content |
US9218546B2 (en) * | 2012-06-01 | 2015-12-22 | Google Inc. | Choosing image labels |
US9336495B2 (en) | 2012-10-28 | 2016-05-10 | Nec Corporation | Query generation and time difference features for supervised semantic indexing |
US20140214960A1 (en) * | 2013-01-31 | 2014-07-31 | Linkedln Corporation | Methods and systems for targeting query messages in a social graph |
US20140229407A1 (en) * | 2013-02-14 | 2014-08-14 | Salesforce.Com, Inc. | Distributing relevant information to users of an enterprise network |
US10079785B2 (en) * | 2015-02-12 | 2018-09-18 | Google Llc | Determining reply content for a reply to an electronic communication |
CN105138710B (en) * | 2015-10-12 | 2019-02-19 | 金耀星 | A kind of chat agency plant and method |
US10021051B2 (en) * | 2016-01-01 | 2018-07-10 | Google Llc | Methods and apparatus for determining non-textual reply content for inclusion in a reply to an electronic communication |
US10387888B2 (en) * | 2016-07-08 | 2019-08-20 | Asapp, Inc. | Assisting entities in responding to a request of a user |
CN106407311B (en) | 2016-08-30 | 2020-07-24 | 北京百度网讯科技有限公司 | Method and device for obtaining search result |
JP6787770B2 (en) * | 2016-12-14 | 2020-11-18 | 東京都公立大学法人 | Language mnemonic and language dialogue system |
US11580350B2 (en) * | 2016-12-21 | 2023-02-14 | Microsoft Technology Licensing, Llc | Systems and methods for an emotionally intelligent chat bot |
-
2017
- 2017-03-31 US US15/476,292 patent/US11373086B2/en active Active
-
2018
- 2018-02-15 CN CN201880012576.6A patent/CN110383297B/en active Active
- 2018-02-15 CN CN202311093488.2A patent/CN117172288A/en active Pending
- 2018-02-15 EP EP18707834.0A patent/EP3577603A1/en active Pending
- 2018-02-15 WO PCT/US2018/018397 patent/WO2018152345A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
CN110383297A (en) | 2019-10-25 |
US20180240014A1 (en) | 2018-08-23 |
EP3577603A1 (en) | 2019-12-11 |
CN110383297B (en) | 2023-09-22 |
US11373086B2 (en) | 2022-06-28 |
WO2018152345A1 (en) | 2018-08-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110383297B (en) | Cooperatively training and/or using separate input neural network models and response neural network models for determining responses to electronic communications | |
US11030515B2 (en) | Determining semantically diverse responses for providing as suggestions for inclusion in electronic communications | |
US20220036197A1 (en) | Cooperatively training and/or using separate input and subsequent content neural networks for information retrieval | |
US10416846B2 (en) | Determining graphical element(s) for inclusion in an electronic communication | |
US11762865B2 (en) | Automatically augmenting message exchange threads based on tone of message | |
US10917371B2 (en) | Methods and apparatus for determining non-textual reply content for inclusion in a reply to an electronic communication | |
WO2018018626A1 (en) | Conversation oriented machine-user interaction | |
US11494427B2 (en) | Generating a personal database entry for a user based on natural language user interface input of the user and generating output based on the entry in response to further natural language user interface input of the user | |
GB2558718A (en) | Search engine | |
US20160292149A1 (en) | Word sense disambiguation using hypernyms | |
CN111279332A (en) | Generating request-agnostic interaction scores for electronic communications using machine-learning models and utilizing request-agnostic interaction scores | |
US10733529B1 (en) | Methods and apparatus for determining original electronic messages that contain asks | |
US20130159293A1 (en) | Generating a supplemental description of an entity | |
US20230046851A1 (en) | Multi-model approach to natural language processing and recommendation generation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |