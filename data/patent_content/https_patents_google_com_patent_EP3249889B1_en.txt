EP3249889B1 - Workload migration across a hybrid network - Google Patents
Workload migration across a hybrid network Download PDFInfo
- Publication number
- EP3249889B1 EP3249889B1 EP17172054.3A EP17172054A EP3249889B1 EP 3249889 B1 EP3249889 B1 EP 3249889B1 EP 17172054 A EP17172054 A EP 17172054A EP 3249889 B1 EP3249889 B1 EP 3249889B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- data
- workload
- computing device
- storage
- source
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013508 migration Methods 0.000 title description 106
- 230000005012 migration Effects 0.000 title description 103
- 238000000034 method Methods 0.000 claims description 140
- 230000008569 process Effects 0.000 claims description 111
- 238000013500 data storage Methods 0.000 claims description 27
- 238000004891 communication Methods 0.000 claims description 17
- 238000012546 transfer Methods 0.000 claims description 13
- 230000010076 replication Effects 0.000 claims description 6
- 230000004044 response Effects 0.000 claims description 4
- 238000003672 processing method Methods 0.000 claims 1
- 230000003362 replicative effect Effects 0.000 claims 1
- 238000010586 diagram Methods 0.000 description 16
- 238000013459 approach Methods 0.000 description 15
- 230000008901 benefit Effects 0.000 description 12
- 230000009172 bursting Effects 0.000 description 11
- 230000005540 biological transmission Effects 0.000 description 6
- 238000013523 data management Methods 0.000 description 6
- 238000007726 management method Methods 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 5
- 239000000872 buffer Substances 0.000 description 4
- 230000006835 compression Effects 0.000 description 4
- 238000007906 compression Methods 0.000 description 4
- 238000013439 planning Methods 0.000 description 4
- 230000006870 function Effects 0.000 description 3
- 238000005457 optimization Methods 0.000 description 3
- 238000004590 computer program Methods 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000007613 environmental effect Effects 0.000 description 2
- PMHURSZHKKJGBM-UHFFFAOYSA-N isoxaben Chemical compound O1N=C(C(C)(CC)CC)C=C1NC(=O)C1=C(OC)C=CC=C1OC PMHURSZHKKJGBM-UHFFFAOYSA-N 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000012795 verification Methods 0.000 description 2
- RYGMFSIKBFXOCR-UHFFFAOYSA-N Copper Chemical compound [Cu] RYGMFSIKBFXOCR-UHFFFAOYSA-N 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 238000012937 correction Methods 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 235000003642 hunger Nutrition 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- BWJYPABMMFBINC-UHFFFAOYSA-N n-[2-(4-azido-3-iodophenyl)ethyl]-4-[[2-(3,4-dihydroxyphenyl)-2-hydroxyethyl]amino]pentanamide Chemical compound C=1C=C(O)C(O)=CC=1C(O)CNC(C)CCC(=O)NCCC1=CC=C(N=[N+]=[N-])C(I)=C1 BWJYPABMMFBINC-UHFFFAOYSA-N 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000012913 prioritisation Methods 0.000 description 1
- 230000037351 starvation Effects 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 230000007704 transition Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1095—Replication or mirroring of data, e.g. scheduling or transport for data synchronisation between network nodes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0862—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches with prefetch
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1097—Protocols in which an application is distributed across nodes in the network for distributed storage of data in networks, e.g. transport arrangements for network file system [NFS], storage area networks [SAN] or network attached storage [NAS]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
- G06F2009/4557—Distribution of virtual machine instances; Migration and load balancing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
- G06F9/452—Remote windowing, e.g. X-Window System, desktop virtualisation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
- H04L67/2876—Pairs of inter-processing entities at each side of the network, e.g. split proxies
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
- H04L67/5681—Pre-fetching or pre-delivering data based on network characteristics
Definitions
- the present disclosure generally relates to managing computer resources such as processors, memory and storage in distributed networks including virtual computing systems.
- the present disclosure relates more specifically to computer-implemented techniques for performing workload migration while maintaining workload data in a hybrid network, and even more specifically to an improved computer implemented method of migrating one or more workloads from a source computing device at a backend sub-network to a target computing device at a frontend sub-network while maintaining workload data across the hybrid network.
- the average data center infrastructure is designed to handle an average load and is sometimes over-provisioned with computational and storage resources to handle some sort of peak load.
- the new project often requires upgrading the current infrastructure or adding additional infrastructure. Setting up new servers or upgrading old servers may take a significant amount of time. Additionally, migrating workloads to the additional infrastructure results in significant downtime.
- Traditional workload migration includes a process of copying over data stored on-premises to cloud servers while simultaneously running a workload on-premises. Once the data is fully copied to the cloud servers, the data is synchronized and the workload execution context is transitioned to the cloud. Significant downtime is accrued and workload disruption is at its peak when performing data synchronization tasks and transitioning the workload execution context to the cloud. Additionally, using this traditional approach, the workload cannot be executed on the cloud until the entire migration is complete.
- workload data residing in the data center may still need to be migrated to the cloud.
- migrating the workload data from the data center to the cloud normally requires stopping the computing processes that are using the workload data to prevent the workload data from being modified during the migration process.
- workload data copied from the data center to the cloud may remain unused for a significant amount of time before benefits of having that workload data available on the cloud may be realized.
- EP2945065 is directed to a method and system for real-time cloud bursting.
- the method and system are directed to extending a data center with cloud computing resources by decoupling computing resources and storage devices in a virtualized data center, and booting the decoupled computing resources in a staged process while storage devices are divided and prioritized into components. Data and boot instructions are re-routed and cached as needed through a proxy system.
- workload data residing in the on-prem data center may still need to be migrated to the cloud.
- migrating the workload data from the data center to the cloud could require stopping the computing processes that are using the workload data to prevent the workload data from being modified during the migration process.
- workload data copied from the data center to the cloud may remain unused for a significant amount of time before benefits of having that workload data available on the cloud may be realized.
- Workload migration refers to transferring, from a source computing device to a target computing device, at least one workload computing process as well as the workload data itself.
- the workload migration processes that are described herein may be implemented using one or more computer programs, processes, daemons or other software elements that are hosted at or executed by the nodes that are further described herein for FIG. 1 .
- a hybrid network refers to at least two computing devices, connected through a network, that are physically located in at least two different geographic locations.
- a hybrid network comprises a first subnetwork connected to a second sub-network through one or more edge appliances that act as a proxy (a computer within a particular sub-network that is receiving streaming data from outside the particular sub-network.)
- Cloud bursting refers to transferring the execution of a particular workload computing process from one source computing device to a target computing device without significant downtime to complete the transfer. The workload computing process accesses workload data during execution, but the workload data remains at the source computing device.
- migrating workload data involves pre-fetching blocks of workload data from a source computing device and caching the blocks in a target storage device in a background process.
- a workload running on a target node may access the migrated data through a proxy referred to as the frontend node.
- the primary data source of the workload data is switched from the source computing device to the target computing device.
- the data transferred in the migration process comprises instructions to execute a particular workload computing process and workload data associated with the particular workload computing process.
- the particular workload computing process comprises instructions to execute a virtual machine (VM), instructions to execute an operating system (OS) executing on the VM, and instructions to execute one or more software programs to executing in the OS on the VM.
- the particular computing process comprises instructions to execute an application container (AC) and instructions to execute one or more software applications in the AC.
- AC application container
- WAN Wide Area Network
- a second constraint is providing high workload performance while data is still being migrated.
- a third constraint is keeping the application data on a similar availability level as it was on the source storage when it is being transferred to the target storage.
- a migration system may be implemented in a manner that is compatible with certain constraints imposed by commercial cloud service providers.
- cloud vendors typically provide a virtual environment without special hardware features such as an uninterruptible power supply (UPS), flash memory cache, etc.
- UPS uninterruptible power supply
- Cloud vendors typically give limited availability and reliability for running virtual machines (VMs) which can be turned off or restarted due to infrastructure updates or other operation issues.
- VMs virtual machines
- Cloud vendors typically provide some highly-available and highly-reliable cloud services, such as Object Storage, Load Balancers, etc. Cloud resources are not limited but each resource and each operation has additional computational and storage costs.
- the migration techniques describe herein according to aspects of the invention perform fast, on-demand migration of the workloads (including the VMs or application containers), which can be translated into one or more of the following benefits:
- Non-disruptive background data migration - Data is migrated in the background without affecting workload execution.
- an architecture of a computing system comprises a source computing device, a backend computing device (referred to herein as a backend node), a frontend computing device (referred to herein as a frontend node), and a workload computing device (referred to herein as a target node).
- a source computing device referred to herein as a backend node
- a backend computing device referred to herein as a backend node
- a frontend computing device referred to herein as a frontend node
- a workload computing device referred to herein as a target node
- the phase of the system may be in (1) an initial phase with a workload executing entirely on the source node and the target node performing booting procedures; (2) an intermediate phase with a workload computing process executing on the target node and the workload data stored by the backend node; and (3) a migration finalization phase with the workload executing entirely on the target node.
- FIG. 1 is a block diagram illustrating an example system architecture in an intermediate phase of migration.
- a computer system architecture 101 comprises a VM storage node 103, a backend node 105 coupled to the VM storage node 103, two frontend nodes 107, 109, coupled to the backend node 105 by wide area network (WAN) and/or virtual private network (VPN), and a target node 111 that is currently executing the workload VM 113 connected to at least frontend node 107.
- the VM storage node 103 may comprise a cluster of hosts in an on-premises data center.
- the VM storage node 103 may execute virtual machine management software such as VMware ESX or VMware vCenter, but may be generalized for any source such as Amazon Web Services, Microsoft Azure, or OpenStack.
- the system 101 may also support multiple backend nodes.
- the example system architecture also comprises a management node 115 for managing the hybrid network, a node for remotely managing cloud services 117 such as S3 buckets from AMAZON, and a node for offline image preparation 119.
- Cloud Services Node 117 may exist outside the system 101, and the task of managing cloud services may be provided by the cloud services provider.
- Frontend Node A 107 and Front Node B 109 may interact directly with the cloud services provider when required.
- Each node contains one or more processors and volatile memory with instructions, which when executed by the one or more processors, perform specialized tasks.
- the workload migration processes that are described herein may be implemented using one or more computer programs, processes, daemons or other software elements that are hosted at or executed by the nodes that have been described herein for FIG. 1 .
- Agents may be installed at each of the nodes to cooperatively execute the processes that are described.
- the specific location of software to execute the described functions is not critical and all processes may be implemented using control software at management node 115 that provides instructions or calls to other nodes to carry out aspects of the processes that are described.
- the backend node 105 is physically located near the source node that was originally executing the workload.
- the source node is not shown.
- the source node is not necessary in the intermediate phase unless used as a storage device for the workload data.
- the backend node 105 is physically located near the VM storage node 103.
- the backend node 105 is on-prem.
- the backend node 105 is on that particular cloud service.
- the backend node 105 is programmed or configured to:
- the frontend nodes 107, 109 are physically located near the bootstrapping node.
- the bootstrapping node is not shown in FIG. 1 because it becomes the target node in the intermediate phase.
- the frontend nodes 107, 109 are physically located near the target node 111.
- the frontend nodes 107, 109 are in the cloud.
- the frontend nodes 107, 109 are in that particular on-prem data center.
- the frontend nodes 107, 109 are programmed or configured to:
- Frontend node 107 is configured as the primary data source between the target node 111 and the backend node 105.
- Frontend node 109 is configured as the secondary data source between the target node 111 and the backend node 105 through data replication.
- the target node 111 is the bootstrapping node.
- the bootstrapping node serves as a launch pad for workload VM execution.
- the target node 111 is physically located near the frontend nodes 107, 109.
- the target node(s) 111 are in the cloud.
- the target node(s) 111 are in that particular on-prem data center.
- the target node/bootstrapping node 111 is programmed or configured to:
- two or more nodes may be combined into a single computing device.
- the source node and the backend node 105 may be a single computing device.
- frontend node 107 and the target node 111 may be the same computing device.
- FIG. 6 is a block diagram illustrating clustered storage caches using cloud resources 601.
- Each workload computing process has a high-performance and disposable cache 617, 619, 621, 623, which contains mostly used data blocks and provides low latency and high throughput for workload data.
- the data that is generated by the workload computing process is synchronously replicated to the memory of at least two frontend nodes located in different availability zones 613, 615, which keeps latency low and reliability high.
- frontend node A 603 and node B 605 may each provide clustered storage caches for a connected workload VM.
- Frontend Node A 603 and Frontend Node B 605 provide access to all files to any workload VM 607, 609 connected to them regardless of the physical location of the file.
- the workload computing processes rely on availability infrastructure of public cloud vendor such as AMAZON WEB SERVICES (AWS) Availability Zones and MICROSOFT AZURE Availability Sets.
- AWS AMAZON WEB SERVICES
- Each frontend node 603, 605 includes a remote fetch 625, 627 for retrieving data blocks from another VM.
- the data dispatch 629, 631 from each frontend node 603, 605 works by reading 633, 635 data blocks from caches 617, 619, 621, 623.
- Each data dispatch 629, 631 includes volume maps 630, 632 to track the state of the data blocks.
- Data dispatch 629, 631 writes to the write buffer 641, 643 which may be journaled.
- Each write buffer 641, 643 for the respective node synchronously replicates 645 data between each node.
- Each Workload VM 607, 609 has access to at least one failover path 647, 649 which connects the respective workload to a different node in the event of a node failure.
- the workload computing processes run as a farm of virtual machines or containers that can sustain partial failure.
- the initial transition phase may be based on technology described in the Cloud Bursting Application.
- the backend node takes ownership of the workload data. This can be done by either mounting relevant virtual disks, or connecting to the corresponding virtual storage as described herein.
- a remote data channel is established between the migration source (e.g., on-premises data center) and migration target (e.g., cloud).
- a bootstrapping node boots using the data provided by the frontend node, which streams the data on-demand from the backend node.
- the frontend node starts to pre-fetch the workload data in the background. Even after the initial cloud bursting phase is completed, the migration background process continues in the intermediate phase.
- the backend node takes ownership of the workload data. If the backend node is on-premises, the backend node takes responsibility of the VM disks by either mounting the disk to the backend node or connecting to the disk data using available interfaces such as internet small computer systems interface (iSCSI), VMWARE virtual disk development kit (VDDK), or network file storage (NFS). If the backend node is located in the cloud, the backend node mounts VM disks (e.g. AMAZON elastic block store (EBS) volumes or virtual hard disks (VHDs)). For container based workloads, container-based workloads rely on locally-attached storage to store system state. The storage abstraction is provided by container host using the storage driver.
- EBS AMAZON elastic block store
- VHDs virtual hard disks
- the backend node uses the same storage driver to mount and take ownership of the data.
- the disks are mounted for the purposes of providing remote read access to the data as required by the workloads (on-demand reads and background reads), and writing back the changes done by remote workloads.
- FIG. 2 is a block diagram illustrating a detailed example system architecture of the backend sub-network at an intermediate phase.
- backend node is connected to storage attached network (SAN)/network attached storage (NAS) storage 205.
- the backend node is also connected to a node executing authentication 207 and virtual machine management software 209 such as VMware ESX and VMware vCenter.
- the backend node is also connected to the frontend sub-network through WAN.
- Data management by the frontend node involves the frontend node requesting data that is immediately necessary for the process acquired by the target server computer to function. Alternatively, data that is necessary and unique may be provided to the frontend node.
- These "on-demand" requests may initially be serviced by the backend node, which accesses the source storage of the backend node to service the requests.
- the on-demand requests may also be serviced by the frontend node, which has a cache to access data that has been previously accessed more quickly.
- Migration through a background process typically involves the backend node prioritizing migration content and the frontend node storing said content based on the resources allocated for said migration.
- the data which is or will be required by the workload is migrated based on data access patterns.
- the backend node determines first whether data access patterns of a particular VM's source storage to be migrated are available. If the data access patterns of the particular VM's storage are available, then those data access patterns are used to prioritize migration content.
- a migration management client may provide a control for the network administrator to temporarily track data access patterns prior to transferring the particular application (i.e., while the particular VM is still running on the migration source).
- Data access patterns are made available by installing recording software on source nodes or target nodes that record IO requests performed by a VM running on the node.
- the recording software saves records of the requests in a portable database file.
- the backend node or frontend node then analyze the file to predict the next IO request from a particular VM and pre-fetch the required data. For example, recording software records a VM boot sequence, and saves the reads to offsets 100, 200, 300, and 400. The next time that VM system needs to boot, the VM will perform the same sequence.
- the backend node detects the sequence 100, 200, the backend node pre-fetches the next two offsets 300, 400 and sends them to the frontend node, before the frontend node needs to request those offsets on-demand.
- the backend node scans other VMs in the network for VMs similar to the particular VM (e.g., same OS with same disk size). If access patterns of these similar VMs are available, then they are used to prioritize migration content. Alternatively, the data access patterns of a similar VM may be tracked during the migration of the particular VM in order to prioritize migration content.
- a background process pre-fetches prioritized data which has not already been fetched as on demand data.
- Data is prioritized using the following techniques:
- the backend node prioritizes disk blocks accessed by the workload based on their access frequency while workload was still on-premises. Migration content from those areas is pre-fetched first by the backend node in the background process.
- the backend node Based on the data access pattern that was determined, the backend node gives higher priority to blocks that correspond to files that are frequently accessed by active workloads. Searching for data blocks that correspond to these files may be hardcoded into the background process, such as searching for: Boot disk areas for VMs, meta-data areas of the file system (e.g. new technology file system (NTFS) master file table (MFT)), and popular OS areas (e.g. C: ⁇ Windows ⁇ Program Files or /lib). Migration content from these areas is pre-fetched second by the backend node in the background process.
- NTFS new technology file system
- MFT master file table
- OS areas e.g. C: ⁇ Windows ⁇ Program Files or /lib
- the backend node based on on-demand block requests from the frontend node, gives higher priority to other blocks of a file that corresponds to an on-demand block that was previously accessed. For example, when reading the file meta-data from NTFS MFT is detected, followed by reading the first block of the file, the system starts pre-fetching the other blocks of this file with higher priority. Early on-demand read requests typically are given priority over later on-demand read requests. Migration content from these areas is pre-fetched third by the backend node in the background process.
- the migration process filters out disk areas that are duplicated and/or unused by file system (based on NTFS MFT or EXT meta-data). If unprovisioned areas of the disk are detected, they are not fetched at all. This is achieved by using corresponding query interface (if available), such as VMDKNHD meta-data or container file system structure.
- the migration process involves the backend node pre-fetching data and serving it to the frontend node through a background process.
- the background process is labeled as such because computing resources (e.g., bandwidth, processing cycles, and memory) are dynamically allotted to the background process based on their availability from other higher priority processes. Both the particular application acquired by the target server computer and the on-demand data fetching process have priority when compared to the background migration process.
- the background migration process populates the target storage with remote blocks while the workloads are running at the frontend subnetwork. While the frontend node fetches on-demand data, the background process runs at a low priority; on-demand fetches should not be affected by the background task. If data is fetched on-demand, the system migrates and stores the fetched data despite not going through the background pre-fetch process.
- the background process starts with the frontend node iterating over blocks in a block map, based on pre-fetch priority of the migrated content as described in pre-migrating determinations as described herein.
- the block map describes all necessary data to detect if a block is migrated or not; provide necessary data for block lookup; and provide block meta-data for block decryption (if applicable) and verification.
- the blocks may have already been transferred when fetching or pre-fetching blocks for another VM. If the blocks have already been migrated, the frontend node updates a volume map.
- a separate volume map is maintained for each of the workload computing processes (e.g., VMs) that are transferred across the hybrid network. The volume map tracks data and files for individual VMs.
- the frontend node pre-fetches these blocks from the backend node, saves them to the migration target storage, and updates the block map and the volume map.
- the block map is shared across multiple migrated computing processes. Blocks are checked either by signature or by block index. If the data is available by block index, despite being updated and not matching the remote data, the overwritten data should never be accessed from this entry, thus keeping consistency.
- FIG. 5 is a block diagram illustrating the background migration process.
- the pre-fetch queue 503, maintained in the backend node orders data blocks based on data access patterns as described in pre-migration determinations.
- Data is sent through WAN to the frontend node.
- the block map and data is stored in the cache 505 labeled "ABCXYZ".
- a block may have been transferred for another VM but applies to the VM that is currently being migrated.
- the volume map 507 is updated without necessarily needing to update the block map.
- two individual computing processes have been transferred over referred to as Vol 1 and Vol 2 inside volume maps 507. Portions of those computing processes ABC of Vol 1 and XYZ of Vol 2 have been transferred over, and marked as such in their respective volume maps.
- the backend and frontend nodes utilize the migration medium (e.g. WAN) as efficiently as possible.
- the migration process of the present invention employs the following optimization techniques:
- the fetcher instead of fetching a single block and placing a single block in the migration target storage, the fetcher creates batch request with the corresponding buffer for multiple blocks and start fetching data for all of these (either from remote or cache). This helps to eliminate latency impact of the source storage access. In addition, the process pipelines number of independent fetch request, which eliminates dependency on WAN latency.
- all traffic between source and target is compressed using lossless compression algorithms (for example, the LZ algorithm). Additionally, all migrated content is stored in compressed form. Once migration is finalized with (e.g. option #2 above), the data is decompressed for replication.
- lossless compression algorithms for example, the LZ algorithm
- the system calculates a SHA signature, which is then used to index the migrated data.
- remote fetcher reads data with the same signature from the source storage, only the signature is transferred over the WAN and not the data itself, while receiving side uses already migrated data as a source.
- the system allows using fixed-size blocks or variable-length blocks.
- the migration process includes special handling for unallocated and zeroed disk areas - those blocks are not transferred over the WAN and not stored on the target storage. Apart from reducing the amount of data that is transferred, the migration process maintains priority mechanisms to allow on-demand request requests to get more bandwidth allocation than migration requests.
- QoS-ready WAN When the system is deployed in network environments that support QoS rules by port (or differentiated services control point (DSCP) marking), the migration process creates a separate transmission control protocol (TCP) connection for background fetching operations. This allows to keep low latencies for on demand requests even in case of big TCP send buffers being filled with background data.
- TCP transmission control protocol
- the migration process throttles the outgoing requests from the backend to the frontend, the process limits amount of outstanding fetcher requests issued by the frontend; the process limits amount of executed requests processed by the backend; the process re-ordering outgoing WAN queues to give priority for on-demand fetch requests. Additionally, to prevent starvation of background fetch requests, there is an additional threshold for minimal amount of those requests that can always run.
- the migration process involves one or more processes to pre-fetch data.
- the migration process is often based on the target storage resources pre-allocated for a particular workload.
- Target storage is pre-allocated as a dynamically sized storage device, where storage space is added as more content is migrated over.
- the target storage can also be pre-allocated as a small cache for storing pre-fetched data or as a presized storage device that has storage space pre-allocated for a particular workload.
- a first approach not part of the invention comprises migrating to target storage that is pre-allocated at a size smaller than required for full migration of data.
- the on-prem subsystem remains the primary workload data source both during and after migration, but some data is "cached" in the target storage device.
- the layout of the stored data is adapted to the migration target (i.e. different data storage format for on-premises and cloud).
- the system When workload migration is started, the system only transfers minimal required amount of data for the workload to start and then the remaining content is migrated either as a cache for on-demand data or as cache with pre-fetched content using the background process.
- FIG. 7 is a block diagram illustrating multiple caching tiers 701.
- Memory cache layer 703 provides the fastest response time and very high throughput for most-accessed data, but it has a size limit due to its cost.
- Disk-based storage 705 provides good balance between performance and size and allow to accommodate relatively large dataset for the migrated workloads.
- Persistent cache 707 provides a slower response time than the temporary disk cache 705, but has increased size to accommodate larger workloads.
- Cloud-based Object Storage 709 comes with relatively high latency for data access, but, at the same time, it typically has very low cost per GB which allows storing major portion of rarely accessed workload data in highly-reliable and cost-effective storage.
- An approach according to the invention comprises migrating to target storage having a dynamically changing size.
- the on-prem sub-system remains the primary workload data source until data migration is completed. Once all data is available, the system starts converging iterative replication process as follows:
- the system iteratively copies all migrated data to the target storage, till the CHANGESET is small enough to make the switch.
- the benefits of this approach is an ability to perform large amount of migration tasks with modest migration infrastructure in terms of storage and compute power as only small amount of VMs/volumes are migrated at once (basically, enough to effectively utilize the transfer medium).
- Another benefit is that the copy process (iterative replication) can be performed completely separately from the process that handles workload IO, until the actual switch should be made.
- FIG 4 shows in-of-path data access with pre-allocated storage 401.
- the frontend node 405 fetches data 411 from the backend via WAN/VPN using on-demand reads and background reads.
- the frontend node includes volume maps 407 that track the state of the data blocks.
- the frontend node 405 is connected to the workload VM 409.
- the frontend node uses pre-allocated storage 403 to store migrated content while maintaining a map that tracks untouched data blocks, migrated data blocks (marked as shaded blocks in FIG. 4 ) and modified data blocks (marked as black in FIG. 4 ).
- the migration process according to the invention includes at least two phases: (1) a migration phase and (2) a finalization phase (i.e., switch / cut-off).
- FIG. 3 is a block diagram illustrating various phases of out-of-path migration.
- the migration phase 317 includes a workload VM 311 coupled to a frontend node 303 which comprises volume maps 305, cache 307, and migration storage 309.
- the system iteratively copies 313 all migrated data to the target storage 315 such as cloud storage or SAS/NAIN, until the changeset is small enough to make the switch.
- the system provides read access to the workload VM 311 running on the target, but also writes back any changes that workloads performed during this time.
- the user can decide to pause or even abort the migration process, which returns the workload back to the source with fully updated state of its data.
- all migration content resides on the target storage 315 and the workload is switched 321 to executing against data stored on the target storage 315 as the primary copy.
- all the corresponding storage resources on source node can be disposed.
- the target node takes ownership of the target storage and the proxy (e.g. frontend node) is removed from the data path of the workload.
- the workload switches to native execution on the target node.
- the target node has the ability to run a workload in the cloud before all data is transferred, but once workload data migration is complete, the workload quickly switches to native execution. The entire workload is now running on the target node, the same way as if it was created there (or fully imported) without need for the frontend node to be in the data path.
- the techniques described herein are implemented by one or more special-purpose computing devices.
- the special-purpose computing devices may be hard-wired to perform the techniques, or may include digital electronic devices such as one or more application-specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs) that are persistently programmed to perform the techniques, or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware, memory, other storage, or a combination.
- ASICs application-specific integrated circuits
- FPGAs field programmable gate arrays
- Such special-purpose computing devices may also combine custom hard-wired logic, ASICs, or FPGAs with custom programming to accomplish the techniques.
- the special-purpose computing devices may be desktop computer systems, portable computer systems, handheld devices, networking devices or any other device that incorporates hard-wired and/or program logic to implement the techniques.
- FIG. 8 is a block diagram that illustrates a computer system 800 upon which an embodiment of the invention may be implemented.
- Computer system 800 includes a bus 802 or other communication mechanism for communicating information, and a hardware processor 804 coupled with bus 802 for processing information.
- Hardware processor 804 may be, for example, a general-purpose microprocessor.
- Computer system 800 also includes a main memory 806, such as a random-access memory (RAM) or other dynamic storage device, coupled to bus 802 for storing information and instructions to be executed by processor 804.
- Main memory 806 also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor 804.
- Such instructions when stored in non-transitory storage media accessible to processor 804, render computer system 800 into a special-purpose machine that is customized to perform the operations specified in the instructions.
- Computer system 800 further includes a read-only memory (ROM) 808 or other static storage device coupled to bus 802 for storing static information and instructions for processor 804.
- ROM read-only memory
- a storage device 810 such as a magnetic disk, optical disk, or solid-state drive is provided and coupled to bus 802 for storing information and instructions.
- Computer system 800 may be coupled via bus 802 to a display 812, such as a cathode ray tube (CRT), for displaying information to a computer user.
- a display 812 such as a cathode ray tube (CRT)
- An input device 814 is coupled to bus 802 for communicating information and command selections to processor 804.
- cursor control 816 is Another type of user input device
- cursor control 816 such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor 804 and for controlling cursor movement on display 812.
- This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.
- Computer system 800 may implement the techniques described herein using customized hard-wired logic, one or more ASICs or FPGAs, firmware and/or program logic which in combination with the computer system causes or programs computer system 800 to be a special-purpose machine. According to one embodiment, the techniques herein are performed by computer system 800 in response to processor 804 executing one or more sequences of one or more instructions contained in main memory 806. Such instructions may be read into main memory 806 from another storage medium, such as storage device 810. Execution of the sequences of instructions contained in main memory 806 causes processor 804 to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions.
- Non-volatile media includes, for example, optical disks, magnetic disks, or solid-state drives, such as storage device 810.
- Volatile media includes dynamic memory, such as main memory 806.
- storage media include, for example, a floppy disk, a flexible disk, hard disk, solid-state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NVRAM, any other memory chip or cartridge.
- Storage media is distinct from but may be used in conjunction with transmission media.
- Transmission media participates in transferring information between storage media.
- transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus 802.
- transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.
- Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor 804 for execution.
- the instructions may initially be carried on a magnetic disk or solid-state drive of a remote computer.
- the remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem.
- a modem local to computer system 800 can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal.
- An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus 802.
- Bus 802 carries the data to main memory 806, from which processor 804 retrieves and executes the instructions.
- the instructions received by main memory 806 may optionally be stored on storage device 810 either before or after execution by processor 804.
- Computer system 800 also includes a communication interface 818 coupled to bus 802.
- Communication interface 818 provides a two-way data communication coupling to a network link 820 that is connected to a local network 822.
- communication interface 818 may be an integrated services digital network (ISDN) card, cable modem, satellite modem, or a modem to provide a data communication connection to a corresponding type of telephone line.
- ISDN integrated services digital network
- communication interface 818 may be a local area network (LAN) card to provide a data communication connection to a compatible LAN.
- LAN local area network
- Wireless links may also be implemented.
- communication interface 818 sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.
- Network link 820 typically provides data communication through one or more networks to other data devices.
- network link 820 may provide a connection through local network 822 to a host computer 824 or to data equipment operated by an Internet Service Provider (ISP) 826.
- ISP 826 in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the "Internet" 828.
- Internet 828 uses electrical, electromagnetic or optical signals that carry digital data streams.
- the signals through the various networks and the signals on network link 820 and through communication interface 818, which carry the digital data to and from computer system 800, are example forms of transmission media.
- Computer system 800 can send messages and receive data, including program code, through the network(s), network link 820 and communication interface 818.
- a server 830 might transmit a requested code for an application program through Internet 828, ISP 826, local network 822 and communication interface 818.
- the received code may be executed by processor 804 as it is received, and/or stored in storage device 810, or other non-volatile storage for later execution.
Description
- This application claims the priority of provisional application
62/340447, filed May 23, 2016 - The present disclosure generally relates to managing computer resources such as processors, memory and storage in distributed networks including virtual computing systems. The present disclosure relates more specifically to computer-implemented techniques for performing workload migration while maintaining workload data in a hybrid network, and even more specifically to an improved computer implemented method of migrating one or more workloads from a source computing device at a backend sub-network to a target computing device at a frontend sub-network while maintaining workload data across the hybrid network.
- The average data center infrastructure is designed to handle an average load and is sometimes over-provisioned with computational and storage resources to handle some sort of peak load. However, when a new project comes in, the new project often requires upgrading the current infrastructure or adding additional infrastructure. Setting up new servers or upgrading old servers may take a significant amount of time. Additionally, migrating workloads to the additional infrastructure results in significant downtime.
- Having the ability to migrate some workloads to one or more public "cloud" servers provides a cost efficient solution that avoids setting up new servers or upgrading old servers. However, the migration process still typically requires extensive up-front planning and significant downtime, especially in cases where there is a large amount of data to transfer.
- Traditional workload migration includes a process of copying over data stored on-premises to cloud servers while simultaneously running a workload on-premises. Once the data is fully copied to the cloud servers, the data is synchronized and the workload execution context is transitioned to the cloud. Significant downtime is accrued and workload disruption is at its peak when performing data synchronization tasks and transitioning the workload execution context to the cloud. Additionally, using this traditional approach, the workload cannot be executed on the cloud until the entire migration is complete.
-
U.S. Patent Application No. 14/554,837, entitled "Real Time Cloud Bursting", filed November 26, 2014
processes and the storage resources that a server is using to execute a workload and transferring the computing process to the cloud. Transferring the computing processes to the cloud immediately grants benefits of having additional computing resource while making valuable data center resources available for re-allocation. - Once one or more workloads are executing in the cloud, workload data residing in the data center may still need to be migrated to the cloud. Unfortunately, migrating the workload data from the data center to the cloud normally requires stopping the computing processes that are using the workload data to prevent the workload data from being modified during the migration process. Additionally, workload data copied from the data center to the cloud may remain unused for a significant amount of time before benefits of having that workload data available on the cloud may be realized.
- The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.
-
EP2945065 is directed to a method and system for real-time cloud bursting. The method and system are directed to extending a data center with cloud computing resources by decoupling computing resources and storage devices in a virtualized data center, and booting the decoupled computing resources in a staged process while storage devices are divided and prioritized into components. Data and boot instructions are re-routed and cached as needed through a proxy system. - "A Hybrid Local Storage Transfer Scheme for Live Migration of I/O Intensive Workloads" by Bogdan Nicolae and Franck Capello, available at URL:https://hal.inria.fr/hal-00686654/PDF/paper.pdf, discloses live migration of storage of virtual machines by using a memory-migration independent approach which relies on a hybrid active push / prioritized prefetch strategy, which results in a storage transfer highly resilient to rapid changes of disk state exhibited by I/O intensive workloads.
- In the drawings:
-
FIG. 1 is a block diagram illustrating an example migration system architecture. -
FIG. 2 is a block diagram illustrating an example system architecture of the backend sub-network at the intermediate phase. -
FIG. 3 is a block diagram illustrating various phases of out-of-path migration. -
FIG. 4 is a block diagram illustrating out-of-path data access with pre-allocated storage. -
FIG. 5 is a block diagram illustrating the background migration process. -
FIG. 6 is a block diagram illustrating clustered storage caches using cloud resources. -
FIG. 7 is a block diagram illustrating multiple caching tiers. -
FIG. 8 is a block diagram illustrating a computer system that may be used to implement the techniques described herein. - The invention is defined by the independent claims. Dependent claims define embodiments thereof.
- In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention. Embodiments are described in sections according to the following outline:
- 1.0 GENERAL OVERVIEW
- 2.0 CONTEXT OF IMPLEMENTATION: ENVIRONMENTAL
- CONSTRAINTS AND BENEFITS
- 3.0 EXAMPLE SYSTEM ARCHITECTURE
- 3.1 BACKEND NODE
- 3.3 TARGET NODE
- 3.4 CLUSTERED STORAGE CACHES USING CLOUD RESOURCES
- 4.0 FUNCTIONAL EXAMPLE
- 4.1 INITIAL CLOUD BURSTING PHASE
- 4.1.1 Data Management by Backend Node
- 4.1.2 Data management by Frontend Node
- 4.2 PRE-MIGRATION DETERMINATIONS
- 4.2.1 Determining a data access pattern
- 4.2.2 Prioritizing Migration Content
- 4.3 BACKGROUND MIGRATION PROCESS
- 4.4 BANDWIDTH OPTIMIZATION AND MANAGEMENT
- 4.4.1 Request Batching and Pipelining
- 4.4.2 Lossless Compression
- 4.4.3 Block-level Deduplication
- 4.4.4 Special block detection
- 4.5 MIGRATION PROCESS
- 4.5.1 Migrating to A Target Storage Pre-Allocated at a Size Smaller Than Required for Full Migration
- 4.5.2 Migrating to a Dynamically Sized Target Storage
- 4.5.3 Migrating to a Target Storage Pre-Allocated to a Size Required for Full Migration
- 4.6 MIGRATION FINALIZATION OR ABORTING
- 5.0 HARDWARE OVERVIEW
- 4.1 INITIAL CLOUD BURSTING PHASE
- Having the ability to migrate some workloads to one or more public "cloud" servers provides a cost-efficient solution that avoids setting up new servers or upgrading old servers. However, the migration process still typically requires up-front planning and significant downtime, especially in cases where there is a large amount of data to transfer.
U.S. Patent Application No. 14/554,837, filed November 26, 2014 - Once one or more workloads are executing in the cloud, workload data residing in the on-prem data center may still need to be migrated to the cloud. Unfortunately, migrating the workload data from the data center to the cloud could require stopping the computing processes that are using the workload data to prevent the workload data from being modified during the migration process. Additionally, workload data copied from the data center to the cloud may remain unused for a significant amount of time before benefits of having that workload data available on the cloud may be realized.
- In an aspect of the invention, techniques are described herein to perform workload migration across a hybrid network with cloud bursting as part of the migration process. Workload migration, as used herein, refers to transferring, from a source computing device to a target computing device, at least one workload computing process as well as the workload data itself. The workload migration processes that are described herein may be implemented using one or more computer programs, processes, daemons or other software elements that are hosted at or executed by the nodes that are further described herein for
FIG. 1 . A hybrid network, as used herein, refers to at least two computing devices, connected through a network, that are physically located in at least two different geographic locations. Typically, a hybrid network comprises a first subnetwork connected to a second sub-network through one or more edge appliances that act as a proxy (a computer within a particular sub-network that is receiving streaming data from outside the particular sub-network.) Cloud bursting, as used herein, refers to transferring the execution of a particular workload computing process from one source computing device to a target computing device without significant downtime to complete the transfer. The workload computing process accesses workload data during execution, but the workload data remains at the source computing device. - In another aspect according to the invention, migrating workload data involves pre-fetching blocks of workload data from a source computing device and caching the blocks in a target storage device in a background process. A workload running on a target node may access the migrated data through a proxy referred to as the frontend node. To complete the migration process, the primary data source of the workload data is switched from the source computing device to the target computing device.
- In yet another aspect according to the invention, the data transferred in the migration process comprises instructions to execute a particular workload computing process and workload data associated with the particular workload computing process. In a preferred embodiment, the particular workload computing process comprises instructions to execute a virtual machine (VM), instructions to execute an operating system (OS) executing on the VM, and instructions to execute one or more software programs to executing in the OS on the VM. In an alternative embodiment, the particular computing process comprises instructions to execute an application container (AC) and instructions to execute one or more software applications in the AC.
- In workload migration the required time to migrate is typically proportional to the size of the data. In some approaches, such as truck-based data transfer, data migrated over Wide Area Network (WAN) is subject to bandwidth limitations and other connectivity issues. A second constraint is providing high workload performance while data is still being migrated. A third constraint is keeping the application data on a similar availability level as it was on the source storage when it is being transferred to the target storage.
- A migration system may be implemented in a manner that is compatible with certain constraints imposed by commercial cloud service providers. For example, cloud vendors typically provide a virtual environment without special hardware features such as an uninterruptible power supply (UPS), flash memory cache, etc. Cloud vendors typically give limited availability and reliability for running virtual machines (VMs) which can be turned off or restarted due to infrastructure updates or other operation issues. Cloud vendors typically provide some highly-available and highly-reliable cloud services, such as Object Storage, Load Balancers, etc. Cloud resources are not limited but each resource and each operation has additional computational and storage costs.
- With these constraints in mind, a reliable and cost-efficient infrastructure can be implemented on top of the non-reliable virtual machine platform provided by the cloud vendor. The migration techniques describe herein according to aspects of the invention perform fast, on-demand migration of the workloads (including the VMs or application containers), which can be translated into one or more of the following benefits:
- Immediate benefit - Workload execution (the computing process) is moved to the target with minimal downtime and without the requirement of up-front planning
- Non-disruptive background data migration - Data is migrated in the background without affecting workload execution.
- Easy Abort Procedure - Ability to revert the migration process without heavy cost.
- Quick Cut-off Procedure - Ability to complete the migration process once workload data has been transferred with minimal downtime.
- According to one embodiment according to the invention, an architecture of a computing system comprises a source computing device, a backend computing device (referred to herein as a backend node), a frontend computing device (referred to herein as a frontend node), and a workload computing device (referred to herein as a target node). Realistically, in some embodiments, the system architecture does not change, but the hardware necessary to perform specific functions may vary depending on the phase of migration. The phase of the system may be in (1) an initial phase with a workload executing entirely on the source node and the target node performing booting procedures; (2) an intermediate phase with a workload computing process executing on the target node and the workload data stored by the backend node; and (3) a migration finalization phase with the workload executing entirely on the target node.
-
FIG. 1 is a block diagram illustrating an example system architecture in an intermediate phase of migration. - In an embodiment not explicitly defined by the claims, a
computer system architecture 101 comprises aVM storage node 103, abackend node 105 coupled to theVM storage node 103, twofrontend nodes backend node 105 by wide area network (WAN) and/or virtual private network (VPN), and atarget node 111 that is currently executing the workload VM 113 connected to at leastfrontend node 107. In an embodiment not explicitly defined by the claims, theVM storage node 103 may comprise a cluster of hosts in an on-premises data center. TheVM storage node 103 may execute virtual machine management software such as VMware ESX or VMware vCenter, but may be generalized for any source such as Amazon Web Services, Microsoft Azure, or OpenStack. In an embodiment, thesystem 101 may also support multiple backend nodes. The example system architecture also comprises amanagement node 115 for managing the hybrid network, a node for remotely managingcloud services 117 such as S3 buckets from AMAZON, and a node for offline image preparation 119. In an embodiment,Cloud Services Node 117 may exist outside thesystem 101, and the task of managing cloud services may be provided by the cloud services provider. For example,Frontend Node A 107 andFront Node B 109 may interact directly with the cloud services provider when required. Each node contains one or more processors and volatile memory with instructions, which when executed by the one or more processors, perform specialized tasks. - The workload migration processes that are described herein may be implemented using one or more computer programs, processes, daemons or other software elements that are hosted at or executed by the nodes that have been described herein for
FIG. 1 . Agents may be installed at each of the nodes to cooperatively execute the processes that are described. The specific location of software to execute the described functions is not critical and all processes may be implemented using control software atmanagement node 115 that provides instructions or calls to other nodes to carry out aspects of the processes that are described. - In the initial phase, the
backend node 105 is physically located near the source node that was originally executing the workload. InFIG 1 , the source node is not shown. The source node is not necessary in the intermediate phase unless used as a storage device for the workload data. In the intermediate phase, thebackend node 105 is physically located near theVM storage node 103. In embodiments where the workload is migrating away from an on-prem data center, thebackend node 105 is on-prem. In embodiments where the workload is migrating away from a particular cloud service (to another cloud service or back to on-prem), thebackend node 105 is on that particular cloud service. In an embodiment, thebackend node 105 is programmed or configured to: - Connect and take ownership of the source workload data
- Establish a secure channel to the front end through a trusted domain and encryption (e.g. VPN/secure sockets layer (SSL) or transport layer security (TLS) + dual-side certificate verification)
- Optimize data transfer within the channel to the frontend node through data deduplication and compression
- In the initial phase, the
frontend nodes FIG. 1 because it becomes the target node in the intermediate phase. In the intermediate phase, thefrontend nodes target node 111. In embodiments where the workload is migrating to a cloud computing device, thefrontend nodes frontend nodes frontend nodes - Provide accelerated storage access to transferred workload computing processes
- Maintain or use storage at the same location for data storage and caching
-
Frontend node 107 is configured as the primary data source between thetarget node 111 and thebackend node 105.Frontend node 109 is configured as the secondary data source between thetarget node 111 and thebackend node 105 through data replication. - In the initial phase, the
target node 111 is the bootstrapping node. The bootstrapping node serves as a launch pad for workload VM execution. In the intermediate phase, thetarget node 111 is physically located near thefrontend nodes bootstrapping node 111 is programmed or configured to: - Provide disk abstraction to the guest operating system (OS) in the initial phase
- Carry over the guest OS computing processes in the initial phase
- Execute workload computing processes in the intermediate phase
- Execute the workload in the final phase
- In some embodiments not explicitly defined by the claims, two or more nodes may be combined into a single computing device. For example, the source node and the
backend node 105 may be a single computing device. As another example,frontend node 107 and thetarget node 111 may be the same computing device. - According to aspects not explicitly defined by the claims, clustered storage involves using two or more frontend nodes together to increase performance, capacity, or reliability.
FIG. 6 is a block diagram illustrating clustered storage caches usingcloud resources 601. Each workload computing process has a high-performance anddisposable cache different availability zones frontend node A 603 andnode B 605 may each provide clustered storage caches for a connected workload VM. -
Frontend Node A 603 andFrontend Node B 605 provide access to all files to anyworkload VM cloud object storage 611. Eachfrontend node frontend node caches write buffer write buffer Workload VM failover path - Thus, the workload computing processes run as a farm of virtual machines or containers that can sustain partial failure.
- The initial transition phase may be based on technology described in the Cloud Bursting Application. First, the backend node takes ownership of the workload data. This can be done by either mounting relevant virtual disks, or connecting to the corresponding virtual storage as described herein. Then, a remote data channel is established between the migration source (e.g., on-premises data center) and migration target (e.g., cloud). Finally, a bootstrapping node boots using the data provided by the frontend node, which streams the data on-demand from the backend node. At the same time, the frontend node starts to pre-fetch the workload data in the background. Even after the initial cloud bursting phase is completed, the migration background process continues in the intermediate phase.
- The backend node takes ownership of the workload data. If the backend node is on-premises, the backend node takes responsibility of the VM disks by either mounting the disk to the backend node or connecting to the disk data using available interfaces such as internet small computer systems interface (iSCSI), VMWARE virtual disk development kit (VDDK), or network file storage (NFS). If the backend node is located in the cloud, the backend node mounts VM disks (e.g. AMAZON elastic block store (EBS) volumes or virtual hard disks (VHDs)). For container based workloads, container-based workloads rely on locally-attached storage to store system state. The storage abstraction is provided by container host using the storage driver. For those workloads, the backend node uses the same storage driver to mount and take ownership of the data. The disks are mounted for the purposes of providing remote read access to the data as required by the workloads (on-demand reads and background reads), and writing back the changes done by remote workloads.
-
FIG. 2 is a block diagram illustrating a detailed example system architecture of the backend sub-network at an intermediate phase. In theintermediate phase 201, backend node is connected to storage attached network (SAN)/network attached storage (NAS)storage 205. The backend node is also connected to anode executing authentication 207 and virtualmachine management software 209 such as VMware ESX and VMware vCenter. The backend node is also connected to the frontend sub-network through WAN. - Data management by the frontend node involves the frontend node requesting data that is immediately necessary for the process acquired by the target server computer to function. Alternatively, data that is necessary and unique may be provided to the frontend node. These "on-demand" requests may initially be serviced by the backend node, which accesses the source storage of the backend node to service the requests. The on-demand requests may also be serviced by the frontend node, which has a cache to access data that has been previously accessed more quickly.
- Migration through a background process typically involves the backend node prioritizing migration content and the frontend node storing said content based on the resources allocated for said migration.
- The data which is or will be required by the workload is migrated based on data access patterns. The backend node determines first whether data access patterns of a particular VM's source storage to be migrated are available. If the data access patterns of the particular VM's storage are available, then those data access patterns are used to prioritize migration content. Optionally, a migration management client may provide a control for the network administrator to temporarily track data access patterns prior to transferring the particular application (i.e., while the particular VM is still running on the migration source).
- Data access patterns are made available by installing recording software on source nodes or target nodes that record IO requests performed by a VM running on the node. The recording software saves records of the requests in a portable database file. The backend node or frontend node then analyze the file to predict the next IO request from a particular VM and pre-fetch the required data. For example, recording software records a VM boot sequence, and saves the reads to offsets 100, 200, 300, and 400. The next time that VM system needs to boot, the VM will perform the same sequence. When the backend node detects the sequence 100, 200, the backend node pre-fetches the next two offsets 300, 400 and sends them to the frontend node, before the frontend node needs to request those offsets on-demand.
- However, if the data access patterns of the particular VM are unavailable and unattainable, then the backend node scans other VMs in the network for VMs similar to the particular VM (e.g., same OS with same disk size). If access patterns of these similar VMs are available, then they are used to prioritize migration content. Alternatively, the data access patterns of a similar VM may be tracked during the migration of the particular VM in order to prioritize migration content.
- Based on the determined data access pattern, a background process pre-fetches prioritized data which has not already been fetched as on demand data. Data is prioritized using the following techniques:
- If a data access pattern was obtained of an active workload before the start of the migration phase, the backend node prioritizes disk blocks accessed by the workload based on their access frequency while workload was still on-premises. Migration content from those areas is pre-fetched first by the backend node in the background process.
- Based on the data access pattern that was determined, the backend node gives higher priority to blocks that correspond to files that are frequently accessed by active workloads. Searching for data blocks that correspond to these files may be hardcoded into the background process, such as searching for: Boot disk areas for VMs, meta-data areas of the file system (e.g. new technology file system (NTFS) master file table (MFT)), and popular OS areas (e.g. C:\Windows\Program Files or /lib). Migration content from these areas is pre-fetched second by the backend node in the background process.
- In an aspect of the invention, based on on-demand block requests from the frontend node, the backend node gives higher priority to other blocks of a file that corresponds to an on-demand block that was previously accessed. For example, when reading the file meta-data from NTFS MFT is detected, followed by reading the first block of the file, the system starts pre-fetching the other blocks of this file with higher priority. Early on-demand read requests typically are given priority over later on-demand read requests. Migration content from these areas is pre-fetched third by the backend node in the background process.
- Based on workload OS and file system, the migration process filters out disk areas that are duplicated and/or unused by file system (based on NTFS MFT or EXT meta-data). If unprovisioned areas of the disk are detected, they are not fetched at all. This is achieved by using corresponding query interface (if available), such as VMDKNHD meta-data or container file system structure.
- According to aspects of the invention, the migration process involves the backend node pre-fetching data and serving it to the frontend node through a background process. The background process is labeled as such because computing resources (e.g., bandwidth, processing cycles, and memory) are dynamically allotted to the background process based on their availability from other higher priority processes. Both the particular application acquired by the target server computer and the on-demand data fetching process have priority when compared to the background migration process.
- The background migration process populates the target storage with remote blocks while the workloads are running at the frontend subnetwork. While the frontend node fetches on-demand data, the background process runs at a low priority; on-demand fetches should not be affected by the background task. If data is fetched on-demand, the system migrates and stores the fetched data despite not going through the background pre-fetch process.
- The background process starts with the frontend node iterating over blocks in a block map, based on pre-fetch priority of the migrated content as described in pre-migrating determinations as described herein. The block map describes all necessary data to detect if a block is migrated or not; provide necessary data for block lookup; and provide block meta-data for block decryption (if applicable) and verification.
- The blocks may have already been transferred when fetching or pre-fetching blocks for another VM. If the blocks have already been migrated, the frontend node updates a volume map. A separate volume map is maintained for each of the workload computing processes (e.g., VMs) that are transferred across the hybrid network. The volume map tracks data and files for individual VMs.
- If a block in the queue has not already been migrated, the frontend node pre-fetches these blocks from the backend node, saves them to the migration target storage, and updates the block map and the volume map.
- The block map is shared across multiple migrated computing processes. Blocks are checked either by signature or by block index. If the data is available by block index, despite being updated and not matching the remote data, the overwritten data should never be accessed from this entry, thus keeping consistency.
- According to aspects not explicitly defined by the claims,
FIG. 5 is a block diagram illustrating the background migration process. Thepre-fetch queue 503, maintained in the backend node, orders data blocks based on data access patterns as described in pre-migration determinations. Data is sent through WAN to the frontend node. The block map and data is stored in thecache 505 labeled "ABCXYZ". A block may have been transferred for another VM but applies to the VM that is currently being migrated. In this case, thevolume map 507 is updated without necessarily needing to update the block map. InFIG. 5 , two individual computing processes have been transferred over referred to asVol 1 andVol 2 inside volume maps 507. Portions of those computing processes ABC ofVol 1 and XYZ ofVol 2 have been transferred over, and marked as such in their respective volume maps. - The backend and frontend nodes utilize the migration medium (e.g. WAN) as efficiently as possible. To reduce WAN transfer time and utilize the available resources, the migration process of the present invention employs the following optimization techniques:
- In an aspect not explicitly defined by the claims, instead of fetching a single block and placing a single block in the migration target storage, the fetcher creates batch request with the corresponding buffer for multiple blocks and start fetching data for all of these (either from remote or cache). This helps to eliminate latency impact of the source storage access. In addition, the process pipelines number of independent fetch request, which eliminates dependency on WAN latency.
- In an aspect not explicitly defined by the claims, all traffic between source and target is compressed using lossless compression algorithms (for example, the LZ algorithm). Additionally, all migrated content is stored in compressed form. Once migration is finalized with (
e.g. option # 2 above), the data is decompressed for replication. - In an aspect of the invention, for each block, the system calculates a SHA signature, which is then used to index the migrated data. When remote fetcher reads data with the same signature from the source storage, only the signature is transferred over the WAN and not the data itself, while receiving side uses already migrated data as a source. The system allows using fixed-size blocks or variable-length blocks.
- In in aspect not explicitly defined by the claims, the migration process includes special handling for unallocated and zeroed disk areas - those blocks are not transferred over the WAN and not stored on the target storage. Apart from reducing the amount of data that is transferred, the migration process maintains priority mechanisms to allow on-demand request requests to get more bandwidth allocation than migration requests.
- There two supported modes for traffic prioritization: quality of service (QoS)-ready WAN and QoS-less WAN. With QoS-ready WAN, when the system is deployed in network environments that support QoS rules by port (or differentiated services control point (DSCP) marking), the migration process creates a separate transmission control protocol (TCP) connection for background fetching operations. This allows to keep low latencies for on demand requests even in case of big TCP send buffers being filled with background data.
- With QoS-less WAN, to allow on demand requests get priority over background fetch requests, the migration process throttles the outgoing requests from the backend to the frontend, the process limits amount of outstanding fetcher requests issued by the frontend; the process limits amount of executed requests processed by the backend; the process re-ordering outgoing WAN queues to give priority for on-demand fetch requests. Additionally, to prevent starvation of background fetch requests, there is an additional threshold for minimal amount of those requests that can always run.
- According to aspects of the invention, the migration process involves one or more processes to pre-fetch data. The migration process is often based on the target storage resources pre-allocated for a particular workload. Target storage, according to the invention, is pre-allocated as a dynamically sized storage device, where storage space is added as more content is migrated over. In other aspects not explicitly defined by the claims, the target storage can also be pre-allocated as a small cache for storing pre-fetched data or as a presized storage device that has storage space pre-allocated for a particular workload.
- A first approach not part of the invention comprises migrating to target storage that is pre-allocated at a size smaller than required for full migration of data. In this approach, the on-prem subsystem remains the primary workload data source both during and after migration, but some data is "cached" in the target storage device. The layout of the stored data is adapted to the migration target (i.e. different data storage format for on-premises and cloud).
- The benefits of this approach are:
- immediate benefit from cloud resources without long downtime (e.g. instance starts to run on target in a matter of minutes)
- unified data management
- optimized tiered data storage at reduced costs, and more efficient migration to the next target
- When workload migration is started, the system only transfers minimal required amount of data for the workload to start and then the remaining content is migrated either as a cache for on-demand data or as cache with pre-fetched content using the background process.
- In order to provide good performance while accessing the data, the migration system contains multiple caching tiers, each provides different latency and throughput and serves different purposes. For example,
FIG. 7 is a block diagram illustrating multiple cachingtiers 701.Memory cache layer 703 provides the fastest response time and very high throughput for most-accessed data, but it has a size limit due to its cost. Disk-basedstorage 705 provides good balance between performance and size and allow to accommodate relatively large dataset for the migrated workloads.Persistent cache 707 provides a slower response time than thetemporary disk cache 705, but has increased size to accommodate larger workloads. Cloud-basedObject Storage 709 comes with relatively high latency for data access, but, at the same time, it typically has very low cost per GB which allows storing major portion of rarely accessed workload data in highly-reliable and cost-effective storage. - An approach according to the invention comprises migrating to target storage having a dynamically changing size. In this approach, the on-prem sub-system remains the primary workload data source until data migration is completed. Once all data is available, the system starts converging iterative replication process as follows:
CHANGESET = [full content] while CHANGESET > THRESHOLD do SNAPSHOT = current state copy CHANGESET to the target storage CHANGESET = [written data since SNAPSHOT] end pause / stop workload switch to the target storage resume workload
Claims (8)
- A data processing method comprising:
transferring a workload computing process and workload data associated with the workload computing process from a source computing device to a workload computing device, wherein transferring comprises:receiving, at the workload computing device, one or more data blocks of a plurality of data blocks from a source data storage associated with the source computing device as on-demand data necessary to run the workload computing process on the workload computing device, the workload computing device associated with a target data storage and having a primary source of data at the source data storage;receiving, at the workload computing device, one or more data blocks of the plurality of data blocks from the source data storage in a first background operation while the workload computing process runs on the workload computing device, wherein the first background operation pre-fetches data which has not already been received as on-demand data, wherein computing resources are dynamically allotted to the first background operation with a lower priority based on their availability from the workload computing process and/or the receiving of the on-demand data, and wherein the target data storage is pre-allocated as a dynamically sized storage, wherein storage space is added as more on-demand data or pre-fetched data is received at the workload computing device in the first background operation;calculating a signature for each block of the plurality of data blocks, at the source data storage, and using, at the source data storage, each signature to filter duplicate data blocks from the one or more data blocks of the plurality of data blocks , wherein when the workload computing process running on the workload computing device reads data blocks with the same signature from the source data storage, transferring to the target storage of the workload computing device only the signature of the data blocks, the workload computing device using an already received data block having the same signature;iteratively replicating, on the dynamically sized target data storage, the received on-demand data and pre-fetched data until a set of changes of the one or more data blocks of the plurality of data blocks from the source data storage is smaller than a pre-defined threshold of changes, wherein during the iterative replication the workload computing device is provided read access to the dynamically sized target data storage, and wherein any changes that the workload computing device performed during the iterative replication while having the primary source of data at the source data storage are replicated on the dynamically sized target data storage;in response to determining that the set of changes of the one or more data blocks received as on-demand data and as pre-fetched data is smaller than the pre-defined threshold of changes, switching the primary source of data of the workload computing process from the source data storage to the target data storage;wherein the method is performed by the source computing device, the workload computing device, the source data storage and the target data storage. - The method of claim 1, wherein the workload computing process comprises any of one or more virtual machines or an application container.
- The method of claim 2, further comprising determining, by one or more computing devices in communication with the workload computing device, a data access pattern of the workload computing process, calculating a plurality of priority values for one or more prioritized data blocks of the source data storage based on the data access pattern, and transferring the one or more prioritized data blocks using the first background operation according to the priority values that have been calculated based on the data access pattern, the one or more prioritized data blocks comprising data blocks that were not received by the workload computing device as necessary to run the workload computing process on the workload computing device.
- The method of claim 3, further comprising determining a data access pattern of the workload computing process, and based on the data access pattern, prioritizing transfers of one or more data blocks that correspond to particular files that are frequently accessed by the workload computing process.
- The method of claim 4, further comprising prioritizing transfers of one or more other data blocks of particular files corresponding to one or more data blocks previously accessed by the workload computing process over receiving the one or more data blocks in the first background operation.
- The method of claim 1, further comprising pre-allocating the target data storage using a size that is smaller than would be required for a full data transfer.
- A computer system comprising a source computing device, a workload computing device, a source data storage and a target data storage that are programmed to cause performance of the method recited in any one of Claims 1-6.
- One or more computer-readable data storage media storing sequences of program instructions which, when executed by the computer system of claim 7, cause performance of the method recited in any one of Claims 1-6.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662340447P | 2016-05-23 | 2016-05-23 | |
US15/595,767 US9942323B2 (en) | 2016-05-23 | 2017-05-15 | Workload migration across a hybrid network |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3249889A1 EP3249889A1 (en) | 2017-11-29 |
EP3249889B1 true EP3249889B1 (en) | 2023-07-05 |
Family
ID=58772389
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP17172054.3A Active EP3249889B1 (en) | 2016-05-23 | 2017-05-19 | Workload migration across a hybrid network |
Country Status (2)
Country | Link |
---|---|
US (1) | US9942323B2 (en) |
EP (1) | EP3249889B1 (en) |
Families Citing this family (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10034407B2 (en) * | 2016-07-22 | 2018-07-24 | Intel Corporation | Storage sled for a data center |
US10540402B2 (en) | 2016-09-30 | 2020-01-21 | Hewlett Packard Enterprise Development Lp | Re-execution of an analytical process based on lineage metadata |
US20180096081A1 (en) * | 2016-09-30 | 2018-04-05 | Hewlett Packard Enterprise Development Lp | Relocation of an analytical process based on lineage metadata |
US10599666B2 (en) | 2016-09-30 | 2020-03-24 | Hewlett Packard Enterprise Development Lp | Data provisioning for an analytical process based on lineage metadata |
EP3416056A1 (en) * | 2017-06-16 | 2018-12-19 | Fujitsu Limited | Method for migrating a workload, computer arrangement and non-volatile storage medium |
CN108959397A (en) * | 2018-06-04 | 2018-12-07 | 成都盯盯科技有限公司 | Data de-duplication method and terminal |
US11188368B2 (en) | 2018-10-31 | 2021-11-30 | Nutanix, Inc. | Asynchronous workload migration control |
US11194620B2 (en) | 2018-10-31 | 2021-12-07 | Nutanix, Inc. | Virtual machine migration task management |
US10944630B2 (en) | 2018-11-20 | 2021-03-09 | Cisco Technology, Inc. | Seamless automation of network device migration to and from cloud managed systems |
US11258881B2 (en) | 2019-07-12 | 2022-02-22 | Nutanix, Inc. | Mobility of user applications across cloud infrastructures |
US11977453B2 (en) * | 2019-09-12 | 2024-05-07 | Restorvault, Llc | Virtual replication of unstructured data |
US11620233B1 (en) * | 2019-09-30 | 2023-04-04 | Amazon Technologies, Inc. | Memory data migration hardware |
US11403134B2 (en) * | 2020-01-31 | 2022-08-02 | Hewlett Packard Enterprise Development Lp | Prioritizing migration of data associated with a stateful application based on data access patterns |
US11662934B2 (en) * | 2020-12-15 | 2023-05-30 | International Business Machines Corporation | Migration of a logical partition between mutually non-coherent host data processing systems |
US11947501B2 (en) * | 2021-10-21 | 2024-04-02 | Dell Products L.P. | Two-hierarchy file system |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6839706B2 (en) * | 2001-08-06 | 2005-01-04 | Lefthand Networks, Inc. | Block data storage within a computer network |
US7386616B1 (en) * | 2003-05-09 | 2008-06-10 | Google Inc. | System and method for providing load balanced processing |
US8364923B2 (en) * | 2009-03-30 | 2013-01-29 | Oracle America, Inc. | Data storage system manager and method for managing a data storage system |
US20130007088A1 (en) * | 2011-06-28 | 2013-01-03 | Nokia Corporation | Method and apparatus for computational flow execution |
US9503387B2 (en) * | 2013-08-21 | 2016-11-22 | Cisco Technology, Inc. | Instantiating incompatible virtual compute requests in a heterogeneous cloud environment |
US9753669B2 (en) * | 2014-05-13 | 2017-09-05 | Velostrata Ltd. | Real time cloud bursting |
US9626212B2 (en) * | 2014-06-28 | 2017-04-18 | Vmware, Inc. | Live migration of virtual machines with memory state sharing |
US9304889B1 (en) * | 2014-09-24 | 2016-04-05 | Emc Corporation | Suspending data replication |
US10805184B2 (en) * | 2015-07-28 | 2020-10-13 | Amazon Technologies, Inc. | Data analytics and management of computing infrastructures |
-
2017
- 2017-05-15 US US15/595,767 patent/US9942323B2/en active Active
- 2017-05-19 EP EP17172054.3A patent/EP3249889B1/en active Active
Non-Patent Citations (1)
Title |
---|
BOGDAN NICOLAE ET AL: "A Hybrid Local Storage Transfer Scheme for Live Migration of I/O Intensive Workloads", <10.1145/2287076.2287088>. <HAL-00686654> HPDC'12, 1 June 2012 (2012-06-01), pages 85 - 96, XP055299791, Retrieved from the Internet <URL:https://hal.inria.fr/hal-00686654/PDF/paper.pdf> [retrieved on 20160905], DOI: 10.1145/2287076.2287088 * |
Also Published As
Publication number | Publication date |
---|---|
EP3249889A1 (en) | 2017-11-29 |
US20170339225A1 (en) | 2017-11-23 |
US9942323B2 (en) | 2018-04-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3249889B1 (en) | Workload migration across a hybrid network | |
US10200471B2 (en) | Workload migration across a hybrid network | |
US10298670B2 (en) | Real time cloud workload streaming | |
US9753669B2 (en) | Real time cloud bursting | |
US10824462B2 (en) | Methods and systems for providing cloud based micro-services | |
US8490088B2 (en) | On demand virtual machine image streaming | |
US9489389B2 (en) | System and method for maintaining cache coherency | |
US9547562B1 (en) | Boot restore system for rapidly restoring virtual machine backups | |
US9928091B2 (en) | Techniques for streaming virtual machines from a server to a host | |
US8677111B2 (en) | Booting devices using virtual storage arrays over wide-area networks | |
US8930947B1 (en) | System and method for live migration of a virtual machine with dedicated cache | |
US20110276963A1 (en) | Virtual Data Storage Devices and Applications Over Wide Area Networks | |
US20080104589A1 (en) | Adaptive, Scalable I/O Request Handling Architecture in Virtualized Computer Systems and Networks | |
US11645237B2 (en) | Replicating data utilizing a virtual file system and cloud storage | |
US11099952B2 (en) | Leveraging server side cache in failover scenario | |
US11586391B2 (en) | Technique for efficient migration of live virtual disk across storage containers of a cluster | |
US20080104590A1 (en) | Adaptive, Scalable I/O Request Handling Architecture in Virtualized Computer Systems and Networks | |
US11768740B2 (en) | Restoring operation of data storage systems at disaster recovery sites | |
US20240078198A1 (en) | Instant recovery as an enabler for uninhibited mobility between primary storage and secondary storage | |
US20230054696A1 (en) | User-level services for multitenant isolation | |
US11947501B2 (en) | Two-hierarchy file system | |
US11435935B2 (en) | Shrinking segment cleaning algorithm in an object storage | |
US20220244979A1 (en) | System and method of vm recovery on s3 compatible object storage | |
KR20230051087A (en) | Method for storing data, stroage device, and system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN PUBLISHED |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20180529 |
|
RBV | Designated contracting states (corrected) |
Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20191004 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
REG | Reference to a national code |
Ref document number: 602017070869Country of ref document: DERef country code: DERef legal event code: R079Free format text: PREVIOUS MAIN CLASS: H04L0029080000Ipc: G06F0009455000 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: H04L 67/1097 20220101ALI20230102BHEPIpc: H04L 67/1095 20220101ALI20230102BHEPIpc: G06F 9/455 19900101AFI20230102BHEP |
|
INTG | Intention to grant announced |
Effective date: 20230124 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230527 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1585465Country of ref document: ATKind code of ref document: TEffective date: 20230715 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602017070869Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG9D |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20230705 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1585465Country of ref document: ATKind code of ref document: TEffective date: 20230705 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231006 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231105 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231106Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231005Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231105Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231006Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20230705 |