US20140188919A1 - Duplicate document detection - Google Patents
Duplicate document detection Download PDFInfo
- Publication number
- US20140188919A1 US20140188919A1 US11/675,051 US67505107A US2014188919A1 US 20140188919 A1 US20140188919 A1 US 20140188919A1 US 67505107 A US67505107 A US 67505107A US 2014188919 A1 US2014188919 A1 US 2014188919A1
- Authority
- US
- United States
- Prior art keywords
- documents
- rendered
- signal
- signals
- comparison
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
- 238000001514 detection method Methods 0.000 title description 14
- 238000000034 method Methods 0.000 claims abstract description 26
- 238000012360 testing method Methods 0.000 claims description 28
- 238000010801 machine learning Methods 0.000 claims description 14
- 230000006835 compression Effects 0.000 claims description 12
- 238000007906 compression Methods 0.000 claims description 12
- 238000004590 computer program Methods 0.000 claims description 12
- 238000012545 processing Methods 0.000 claims description 11
- 239000013598 vector Substances 0.000 claims description 11
- 238000004422 calculation algorithm Methods 0.000 claims description 7
- 238000010586 diagram Methods 0.000 description 6
- 238000013515 script Methods 0.000 description 6
- 238000004891 communication Methods 0.000 description 5
- 230000008569 process Effects 0.000 description 4
- 241000288113 Gallirallus australis Species 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 235000014510 cooky Nutrition 0.000 description 2
- 238000003066 decision tree Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000002085 persistent effect Effects 0.000 description 2
- 230000000644 propagated effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000012549 training Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 238000013528 artificial neural network Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000013145 classification model Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000007418 data mining Methods 0.000 description 1
- 238000011156 evaluation Methods 0.000 description 1
- 238000012417 linear regression Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007477 logistic regression Methods 0.000 description 1
- 201000001997 microphthalmia with limb anomalies Diseases 0.000 description 1
- 230000001575 pathological effect Effects 0.000 description 1
- 238000012216 screening Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- G06F17/30634—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- Web search engines are useful tools for locating web pages based on search terms.
- a list of search results typically includes two or more web pages that contain the same core content. These are referred to as duplicate documents, even though the appearance of the web pages is not identical, since users looking for the core content would consider one of the documents redundant.
- web page 102 FIG. 1
- web page 202 FIG. 2
- Both documents contain the same core content 104 despite having differing surrounding content such as navigation bar 106 , title 108 and image 206 .
- Content can be duplicated across documents for a number of reasons.
- a given document's content can change each time a document is fetched from a web server.
- Java servlets executing on a web server can dynamically fashion a web page based on Hypertext Transfer Protocol (HTTP) cookies, session variables, or Uniform Resource Locator (URL) rewriting.
- new content can be dynamically incorporated when the document is rendered on a client (e.g., a web browser).
- Documents that include JavaScript, Hypertext Markup Language (HTML) frames, or Asynchronous JavaScript and XML (AJAX), for example, can cause content to be dynamically incorporated into the rendering based on a user's Internet addresses, the time of year, the time of day, cookies on a user's computer, words contained in the web page, and other information.
- JavaScript Hypertext Markup Language
- HTML Hypertext Markup Language
- AJAX Asynchronous JavaScript and XML
- the contents of the advertisement bar 204 on web page 202 is determined by the following JavaScript code in the corresponding document which is executed by a client during rendering of the document:
- the content of the rendered document i.e., the contents of the add bar 204
- the content of the rendered document can vary each time the document is rendered.
- Typical duplicate document detection techniques can become confused by the pathological nature of some web pages. For example, spammers often stuff web pages with invisible keywords which throws off similarity hashing algorithms. Rare terms in HTML boilerplate can lead frequency-inverse document frequency techniques astray. Documents that have little text content create useless snippets for query-based techniques. And some techniques incorrectly ignore small but important details. For example, similar product pages may only differ in a product number yet would be classified as duplicates.
- one aspect of the subject matter described in this specification can be embodied in a method that includes performing a first plurality of computations on non rendered versions of first and second markup language documents to determine a first plurality of signals, each signal in the first plurality of signals representing a comparison of attributes for the non rendered versions of the first and second documents.
- a second plurality of computations are performed on rendered versions of the first and second markup language documents to determine a second plurality of signals, each signal in the second plurality of signals representing a comparison of attributes for the rendered versions of the first and second documents.
- the first plurality of signals and the second plurality of signals are combined to determine a confidence as to whether the first and second documents are duplicates.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- the first and second plurality of signals are provided as input to a model derived from a machine learning classifier where the model is configured to determine the confidence.
- the first document and the second document are identified based on a query. Dynamic content is incorporated into the rendered versions of the first and second documents.
- a signal in the first or the second plurality of signals is a distance-based signal, a simple signal, or a query-based signal.
- a distance-based signal can be based on Hamming distance, Levenshtein distance, Damerau-Levenshtein distance, term frequency-inverse document frequency, modified compression normal distance, a longest subsequence, Jaccard distance, or a Charikar random-hyperplane hashing algorithm.
- a simple signal can be based on a comparison of titles of the first and second documents, a comparison of the lengths of the rendered or non rendered versions of the first and second documents, a comparison of universal resource locators for the first and second documents, a comparison of compression lengths of the rendered or non rendered versions of the first and second documents, a comparison of fetched strings from the rendered or non rendered versions of the first and second documents, a determination of whether the rendered or non rendered version of the first and second documents is considered spam, or an identification of languages contained in the rendered or non rendered versions of the first and second documents.
- a query-based signal can be based on a comparison of snippets from the non rendered or rendered versions of the first and second documents, a frequency of query terms in the non rendered or rendered versions of the first and second documents, a comparison of relevance data for the non rendered or rendered versions of the first and second documents, a comparison of a language of a query to a language of the non rendered or rendered versions of the first and second documents, or a determination of whether the non rendered or rendered versions of the first and second documents include pornography or spam.
- the first and second plurality of signals can be: 1) provided as input to a first model derived from a machine learning classifier where the first model is configured to determine the confidence; 2) it is determined if the confidence is below a threshold; 3) a new confidence is determined based on a human comparison of the non rendered or rendered versions of the first and second markup language documents; and 4) the new confidence and the first and second plurality of signals are provided to the machine learning classifier to derive a second model with improved accuracy over the first model.
- Duplicate document detection precision i.e., the fraction of detected true duplicates over all detected duplicates
- recall i.e., the fraction of detected true duplicates over all duplicates
- the techniques described herein can be used to avoid crawling mirrored content and infinite hosts, and can be used to maximize unique content in an index. Provides a more accurate evaluation or assessment of result lists returned by search engines.
- FIGS. 1 and 2 show rendered web pages that contain duplicate content.
- FIG. 3 is an illustration of different versions of a document.
- FIG. 4 is a flow diagram of a method for detecting duplicate documents.
- FIG. 5 is a schematic diagram of a system for detecting duplicate documents.
- FIG. 6 is a schematic diagram of a generic computer system.
- FIG. 3 is an illustration of different versions of a document.
- a document is a markup language document such as, for example, an HTML or Extensible HTML (XHTML) document.
- XHTML Extensible HTML
- a document contains a description of how content (e.g. within the document, dynamically determined, and external to the document) is to be presented or formatted in a rendering of the document.
- a document 306 referred to as a fetched body can be obtained by a server 302 (e.g., a web server) or other process, or from local or remote storage (e.g., a file system).
- the source of the document 306 can provide the document 306 through one or more public or private computer networks 304 such as the Internet, for instance.
- the document 306 can be rendered by a web browser or other process capable of processing the document 306 's contents to create a rendered version of the document called a rendered body 308 . Doing so could entail incorporating content from HTML frames, executing JavaScript, and so on.
- the rendered body 308 is represented as a document object model (DOM) 310 which is a hierarchical representation of the rendered body 308 created during processing of the document 306 .
- the DOM 310 consists of nodes representing HTML elements used to create the rendered body 308 .
- a serialized version of the DOM 310 is referred to as a synthetic body 312 .
- the synthetic body represents the content of the fetched body 306 as well as dynamic content incorporated into the rendered body 308 .
- the synthetic body 312 represents a subset of the content of the rendered body 308 .
- Duplicate document detection techniques are applied to one or more attributes of a pair of fetched and rendered bodies for a given document pair.
- Document attributes can include those listed in TABLE 1, however other attributes are possible.
- the number of anchors to the body i.e., other documents on the Internet which link to this body).
- a list of domains a body's anchors are from, and a frequency of each domain.
- a list of domains a body's outbound links refer to, and a frequency of each domain.
- the number of images a rendered body contains. The number of rendered pixels filled by images versus by text content in a rendered body.
- a duplicate document detection technique yields a signal which represents a comparison of attributes associated with a pair of fetched or rendered bodies.
- the signal can be a simple Boolean value indicating whether the inputs are considered duplicates of each other, a confidence or probability that the inputs are duplicates, or a set of values.
- a and B are bodies (fetched or synthetic)
- c is a function that determines compression distance
- AB, AA, BB, and AA represent different concatenations of the bodies
- max is a function that returns the largest of its parameters.
- a comparison of the compression lengths of a pair of bodies Whether a pair of fetched body strings are identical. Human assessor's or automated classifier's judgment of whether a body is considered “spam”.
- Query-based Comparison of query snippets for a pair of bodies A snippet is an extract from a document around words of a query. Many web search engines include snippets in their search results so that users can determine if a result is relevant to their query. Snippets are extracted from a pair of bodies to be compared based on a query associated with the bodies. For example, the pair of bodies might have both appeared in the search results for the query from the same or different search engines. Different detection techniques can be used to compare the snippets. The frequency of query terms in a pair of bodies.
- Comparison of relevance data for a pair of bodies based on the number of users that found the bodies relevant for a given query. For example, the number of times a document was clicked on in a search result list could serve as a relevance indicator. Comparison of other aspects of how suitable a pair of bodies are for the query, e.g., whether the body is in a foreign language compared to the query, whether the body contains pornography or spam. Comparison of a human assessors' judgments of relevance of a pair of bodies with respect to a given query or set of queries.
- FIG. 4 is a high-level flow diagram of a method 400 for detecting duplicate documents.
- a first plurality of computations is performed on non rendered versions (e.g., fetched bodies) of first and second markup language documents to determine a first plurality of signals (step 402 ). Each signal in the first plurality of signals provides a comparison of attributes (see TABLE 1) for the non rendered versions of the first and second documents.
- a second plurality of computations is performed on rendered versions (e.g., synthetic bodies) of the first and second markup language documents to determine a second plurality of signals (step 404 ). Each signal in the second plurality of signals provides a comparison of attributes for the rendered versions of the first and second documents.
- the first plurality of signals and the second plurality of signals are combined using a machine learning-based model to determine a confidence as to whether the first and second documents are duplicates (step 406 ).
- FIG. 5 is a schematic diagram of a system 500 for detecting duplicate documents.
- a pair of fetched body attributes ( 502 a, 504 a ) are provided to a series of duplicate document detection tests 506 , such as those described in TABLE 2, where each test can potentially compare different attributes from the fetched bodies ( 502 a, 504 a ) to generate a signal 516 .
- Attributes provided to the tests 506 can be selected by the tests 506 themselves or by another component that provides the selected attributes to the tests 506 .
- Attribute selection 520 a - b can be based on rules or heuristics that choose some attributes and ignore others based on the type of test that will be performed. For example, on web page 202 ( FIG.
- advertisement content 204 may not be provided to distance-based tests since such content always changes and does not correspond to what a user would consider core content.
- tests in simple detection classes will be provided only with the attributes those tests are based on (e.g., body titles, body lengths).
- distance-based signals or other signals can be computed after removal of “boilerplate”/non-core content from a body. The signal generated from each test 506 is stored in a separate part of a signal vector 510 .
- a pair of synthetic body attributes ( 502 b, 504 b ) corresponding to the fetched body attributes ( 502 a, 504 a ) are provided to another series of duplicate document detection tests 508 where each test can potentially compare different attributes from the synthetic bodies ( 502 b, 504 b ) to generate a signal 518 .
- the series of tests 508 can be the same as 506 , can be entirely different, or can have some tests in common.
- attributes provided to the tests 508 can be selected by the tests 508 themselves or by another component that provides the selected attributes to the tests.
- the signal generated from each test 508 is stored in a separate part of the signal vector 510 .
- the signal vector 510 is provided as input to a model 512 that determines a confidence 514 as to whether the pair of documents corresponding to the bodies 502 a - b and 504 a - b are duplicates.
- the model 512 is derived from a machine learning algorithm (MLA) that has been trained with a data set comprising tuples consisting of a signal vector (derived as described above) for a pair of documents and an indication of whether the documents are duplicates.
- MLA machine learning algorithm
- the model 512 is generated by a MLA such as a propositional rule learner (e.g., JRIP) or a decision tree classifier (e.g., J48) available in the Waikato Environment for Knowledge Analysis (Weka).
- a MLA such as a propositional rule learner (e.g., JRIP) or a decision tree classifier (e.g., J48) available in the Waikato Environment for Knowledge Analysis (Weka).
- Weka is a collection of MLAs for data mining that can be applied directly to data sets or invoked programmatically. Weka is available from the University of Waikato in New Zealand.
- the model can be produced by other tree-based classifiers, rule-based classifiers (e.g., RIPPER), neural network-based classifiers, Bayesian network classifiers, decision-tree classifiers (e.g., ID3 and C4.5), logistic or linear regression-based classifiers, nearest neighbor/instance-based classifiers, or combinations of these.
- rule-based classifiers e.g., RIPPER
- neural network-based classifiers e.g., Bayesian network classifiers, decision-tree classifiers (e.g., ID3 and C4.5), logistic or linear regression-based classifiers, nearest neighbor/instance-based classifiers, or combinations of these.
- RIPPER rule-based classifiers
- neural network-based classifiers e.g., Bayesian network classifiers
- decision-tree classifiers e.g., ID3 and C4.5
- logistic or linear regression-based classifiers e.g., nearest neighbor/instance-based class
- a small set of simple screening tests can be performed on a pair of fetched and/or rendered bodies to determine whether further testing is warranted. If not, the full suite of tests as described above will not be performed on the pair.
- the model produces a confidence as to whether the pair of documents are duplicates. If the confidence is above some threshold, the classifier's classification is accepted. If the confidence is below some threshold, one or more human assessors are shown the pair of documents and asked to make a confidence judgment. Optionally, these additional human assessed pairs may be added to the training data set to generate a model with improved classification accuracy.
- FIG. 6 is a schematic diagram of a generic computer system 600 .
- the system 600 can be used for practicing operations described in association with the method 400 and system 500 .
- the system 600 can include a processor 610 , a memory 620 , a storage device 630 , and input/output devices 640 . Each of the components 610 , 620 , 630 , and 640 are interconnected using a system bus 650 .
- the processor 610 is capable of processing instructions for execution within the system 600 . Such executed instructions can implement one or more steps of method 400 , for example.
- the processor 610 is a single or multi-threaded processor, or a collection of processors.
- the processor 610 is capable of processing instructions stored in the memory 620 or on the storage device 630 to perform duplicate document detection.
- the memory 620 is a computer readable medium such as volatile or non volatile random access memory that stores information within the system 600 .
- the memory 620 could store data structures representing fetched and synthetic document bodies, signal vectors, and a model, for example.
- the storage device 630 is capable of providing persistent storage for the system 600 .
- the storage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, or other suitable persistent storage means.
- the input/output device 640 provides input/output operations for the system 600 .
- the input/output device 640 includes a keyboard and/or pointing device.
- the input/output device 640 includes a display unit for displaying graphical user interfaces.
- the input/output device 640 can provide input/output operations for the system 600 .
- Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus.
- the computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
- data processing apparatus encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few.
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each
Abstract
Methods, program products, and systems for performing a first plurality of computations on non rendered versions of first and second markup language documents to determine a first plurality of signals, each signal in the first plurality of signals representing a comparison of attributes for the non rendered versions of the first and second documents. A second plurality of computations are performed on rendered versions of the first and second markup language documents to determine a second plurality of signals, each signal in the second plurality of signals representing a comparison of attributes for the rendered versions of the first and second documents. The first plurality of signals and the second plurality of signals are combined to determine a confidence as to whether the first and second documents are duplicates.
Description
- This application claims priority to pending U.S. Provisional Application Ser. No. 60/886,868, entitled “Duplicate Document Detection”, filed on Jan. 26, 2007, the entire contents of which are hereby incorporated by reference.
- Web search engines are useful tools for locating web pages based on search terms. However, a list of search results typically includes two or more web pages that contain the same core content. These are referred to as duplicate documents, even though the appearance of the web pages is not identical, since users looking for the core content would consider one of the documents redundant. For example, web page 102 (
FIG. 1 ) is a rendered version of a markup language document (or document) and web page 202 (FIG. 2 ) is a rendered version of another document. Both documents contain thesame core content 104 despite having differing surrounding content such as navigation bar 106,title 108 andimage 206. Content can be duplicated across documents for a number of reasons. Sometimes content is syndicated or the same content is provided in different formats (e.g., optimized for viewing or printing). Duplicate documents clutter search results by pushing relevant results lower in result lists and waste resources by requiring the same content to be crawled and stored more than once by web crawlers. - Traditional techniques for determining whether two documents are duplicates can be confused by the additional content that can surround core content. Additionally, the dynamic nature of web pages make duplicate document detection even harder. In particular, a given document's content can change each time a document is fetched from a web server. For example, Java servlets executing on a web server can dynamically fashion a web page based on Hypertext Transfer Protocol (HTTP) cookies, session variables, or Uniform Resource Locator (URL) rewriting. Moreover, new content can be dynamically incorporated when the document is rendered on a client (e.g., a web browser). Documents that include JavaScript, Hypertext Markup Language (HTML) frames, or Asynchronous JavaScript and XML (AJAX), for example, can cause content to be dynamically incorporated into the rendering based on a user's Internet addresses, the time of year, the time of day, cookies on a user's computer, words contained in the web page, and other information.
- For instance, the contents of the
advertisement bar 204 onweb page 202 is determined by the following JavaScript code in the corresponding document which is executed by a client during rendering of the document: -
<script type=“text/javascript”><! - google_ad_client= “pub-3x92kd940x894501xx2”; google_ad_width = 728; google_ad_height = 90; google_ad_format = “728x90_as”; google_ad_type = “text_image”; google_ad_channel = “”; //--></script> <script type=“text/javascript” src=“http://page2.googlesyndication.com/pagead/show_ads.js”?> </script> - While the above JavaScript code is unchanged each time the document is fetched, the content of the rendered document (i.e., the contents of the add bar 204) can vary each time the document is rendered.
- Typical duplicate document detection techniques can become confused by the pathological nature of some web pages. For example, spammers often stuff web pages with invisible keywords which throws off similarity hashing algorithms. Rare terms in HTML boilerplate can lead frequency-inverse document frequency techniques astray. Documents that have little text content create useless snippets for query-based techniques. And some techniques incorrectly ignore small but important details. For example, similar product pages may only differ in a product number yet would be classified as duplicates.
- In general, one aspect of the subject matter described in this specification can be embodied in a method that includes performing a first plurality of computations on non rendered versions of first and second markup language documents to determine a first plurality of signals, each signal in the first plurality of signals representing a comparison of attributes for the non rendered versions of the first and second documents. A second plurality of computations are performed on rendered versions of the first and second markup language documents to determine a second plurality of signals, each signal in the second plurality of signals representing a comparison of attributes for the rendered versions of the first and second documents. The first plurality of signals and the second plurality of signals are combined to determine a confidence as to whether the first and second documents are duplicates. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products.
- These and other embodiments can optionally include one or more of the following features. The first and second plurality of signals are provided as input to a model derived from a machine learning classifier where the model is configured to determine the confidence. The first document and the second document are identified based on a query. Dynamic content is incorporated into the rendered versions of the first and second documents. A signal in the first or the second plurality of signals is a distance-based signal, a simple signal, or a query-based signal.
- A distance-based signal can be based on Hamming distance, Levenshtein distance, Damerau-Levenshtein distance, term frequency-inverse document frequency, modified compression normal distance, a longest subsequence, Jaccard distance, or a Charikar random-hyperplane hashing algorithm.
- A simple signal can be based on a comparison of titles of the first and second documents, a comparison of the lengths of the rendered or non rendered versions of the first and second documents, a comparison of universal resource locators for the first and second documents, a comparison of compression lengths of the rendered or non rendered versions of the first and second documents, a comparison of fetched strings from the rendered or non rendered versions of the first and second documents, a determination of whether the rendered or non rendered version of the first and second documents is considered spam, or an identification of languages contained in the rendered or non rendered versions of the first and second documents.
- A query-based signal can be based on a comparison of snippets from the non rendered or rendered versions of the first and second documents, a frequency of query terms in the non rendered or rendered versions of the first and second documents, a comparison of relevance data for the non rendered or rendered versions of the first and second documents, a comparison of a language of a query to a language of the non rendered or rendered versions of the first and second documents, or a determination of whether the non rendered or rendered versions of the first and second documents include pornography or spam.
- The first and second plurality of signals can be: 1) provided as input to a first model derived from a machine learning classifier where the first model is configured to determine the confidence; 2) it is determined if the confidence is below a threshold; 3) a new confidence is determined based on a human comparison of the non rendered or rendered versions of the first and second markup language documents; and 4) the new confidence and the first and second plurality of signals are provided to the machine learning classifier to derive a second model with improved accuracy over the first model.
- Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Duplicate document detection precision (i.e., the fraction of detected true duplicates over all detected duplicates) and recall (i.e., the fraction of detected true duplicates over all duplicates) are improved by comparing rendered versions of documents and by using multiple signals as opposed to one signal for each document. Including query-specific signals can further improve recall. The techniques described herein can be used to avoid crawling mirrored content and infinite hosts, and can be used to maximize unique content in an index. Provides a more accurate evaluation or assessment of result lists returned by search engines.
- The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the invention will become apparent from the description, the drawings, and the claims.
-
FIGS. 1 and 2 show rendered web pages that contain duplicate content. -
FIG. 3 is an illustration of different versions of a document. -
FIG. 4 is a flow diagram of a method for detecting duplicate documents. -
FIG. 5 is a schematic diagram of a system for detecting duplicate documents. -
FIG. 6 is a schematic diagram of a generic computer system. - Like reference numbers and designations in the various drawings indicate like elements.
-
FIG. 3 is an illustration of different versions of a document. A document is a markup language document such as, for example, an HTML or Extensible HTML (XHTML) document. Generally speaking, a document contains a description of how content (e.g. within the document, dynamically determined, and external to the document) is to be presented or formatted in a rendering of the document. By way of illustration, adocument 306 referred to as a fetched body can be obtained by a server 302 (e.g., a web server) or other process, or from local or remote storage (e.g., a file system). The source of thedocument 306 can provide thedocument 306 through one or more public orprivate computer networks 304 such as the Internet, for instance. Thedocument 306 can be rendered by a web browser or other process capable of processing thedocument 306's contents to create a rendered version of the document called a rendered body 308. Doing so could entail incorporating content from HTML frames, executing JavaScript, and so on. - The rendered body 308 is represented as a document object model (DOM) 310 which is a hierarchical representation of the rendered body 308 created during processing of the
document 306. TheDOM 310 consists of nodes representing HTML elements used to create the rendered body 308. In various implementations, a serialized version of theDOM 310 is referred to as asynthetic body 312. The synthetic body represents the content of thefetched body 306 as well as dynamic content incorporated into the rendered body 308. In some implementations, thesynthetic body 312 represents a subset of the content of the rendered body 308. - Duplicate document detection techniques are applied to one or more attributes of a pair of fetched and rendered bodies for a given document pair. Document attributes can include those listed in TABLE 1, however other attributes are possible.
-
TABLE 1 DOCUMENT BODY ATTRIBUTES The contents of a body (or selected portions thereof). The length of a body. The title of a body. The Internet domains from whence a fetched body was retrieved. A query-derived snippet for a body. In various implementations, the snippet is based on visible text in a body (i.e., text that would appear in the rendered body) rather than being based on invisible metadata which can be identical for pages on a common website. Data indicating whether a population of users found a body relevant for a query. The URL and/or strings derived from the URL of a body. A collection of words appearing in a body, with or without word frequencies. A collection of N-word phrases appearing in a body, with or without word frequencies. The longest substring a body has in common with a body it is being compared to. A proportion or absolute number of clicks a body receives when presented in search engine result lists, either for a given query or across all queries. The number of anchors to the body (i.e., other documents on the Internet which link to this body). A list of domains a body's anchors are from, and a frequency of each domain. The number of outbound links from a body to other documents. A list of domains a body's outbound links refer to, and a frequency of each domain. A number of search engine queries issued in a given time period, for which the body was retrieved as a result. A list of such search engine queries, with or without frequency of each query. The distribution of words or phrases in such queries, with or without frequency of each word/phrase's appearance in queries or in a document collection. The number of images a rendered body contains. The number of rendered pixels filled by images versus by text content in a rendered body. - A duplicate document detection technique yields a signal which represents a comparison of attributes associated with a pair of fetched or rendered bodies. By way of illustration, the signal can be a simple Boolean value indicating whether the inputs are considered duplicates of each other, a confidence or probability that the inputs are duplicates, or a set of values. There are different classes of duplicate document detection techniques. TABLE 2 below contains a non-exhaustive list of different classes and exemplary techniques. However, other classes and techniques are possible. In various implementations, a plurality of techniques are applied to a given document pair's fetched and synthetic body attributes in order to determine if the documents are duplicates.
-
TABLE 1 DETECTION CLASS SIGNAL BASED ON Distance-based The Hamming distance between strings in a pair of bodies. The Levenshtein distance between strings in a pair of bodies. The Damerau-Levenshtein distance between strings in a pair of bodies. The term frequency-inverse document frequency (tf-idf) weight of words in a pair of bodies. The tf-idf distance is a product of the frequency of a term in a body divided by its frequency in a corpus. In various implementations, the top 100 tf-idf terms in each body are compared using a logarithmic idf table. The longest subsequence in a pair of bodies. The Jaccard distance between strings in a pair of bodies. The Charikar random-hyperplane hashing algorithm. The modified normal compression distance (mcd) between a pair of bodies based on the compression sizes after concatenating the bodies together: where A and B are bodies (fetched or synthetic), c is a function that determines compression distance, AB, AA, BB, and AA represent different concatenations of the bodies, and max is a function that returns the largest of its parameters. Simple Whether the titles of a pair of bodies is the same. Whether the URL's of a pair of bodies overlap. A comparison of URLs from which a pair of bodies were fetched, e.g., same domain (ebay.com), subdomain (autos.ebay.com), or directory within a domain or subdomain (autos.ebay.com/chevys/fourdoor). A comparison of the lengths of a pair of bodies. Let len(X) be the length of a fetched body for document X. In various implementations, the body length distance (bld) between bodies A and B is defined as: A comparison of the compression lengths of a pair of bodies. Whether a pair of fetched body strings are identical. Human assessor's or automated classifier's judgment of whether a body is considered “spam”. Human assessor's or automated classifier's determination of language(s) contained in a body. Query-based Comparison of query snippets for a pair of bodies. A snippet is an extract from a document around words of a query. Many web search engines include snippets in their search results so that users can determine if a result is relevant to their query. Snippets are extracted from a pair of bodies to be compared based on a query associated with the bodies. For example, the pair of bodies might have both appeared in the search results for the query from the same or different search engines. Different detection techniques can be used to compare the snippets. The frequency of query terms in a pair of bodies. Comparison of relevance data for a pair of bodies based on the number of users that found the bodies relevant for a given query. For example, the number of times a document was clicked on in a search result list could serve as a relevance indicator. Comparison of other aspects of how suitable a pair of bodies are for the query, e.g., whether the body is in a foreign language compared to the query, whether the body contains pornography or spam. Comparison of a human assessors' judgments of relevance of a pair of bodies with respect to a given query or set of queries. -
FIG. 4 is a high-level flow diagram of a method 400 for detecting duplicate documents. A first plurality of computations is performed on non rendered versions (e.g., fetched bodies) of first and second markup language documents to determine a first plurality of signals (step 402). Each signal in the first plurality of signals provides a comparison of attributes (see TABLE 1) for the non rendered versions of the first and second documents. A second plurality of computations is performed on rendered versions (e.g., synthetic bodies) of the first and second markup language documents to determine a second plurality of signals (step 404). Each signal in the second plurality of signals provides a comparison of attributes for the rendered versions of the first and second documents. The first plurality of signals and the second plurality of signals are combined using a machine learning-based model to determine a confidence as to whether the first and second documents are duplicates (step 406). -
FIG. 5 is a schematic diagram of a system 500 for detecting duplicate documents. A pair of fetched body attributes (502 a, 504 a) are provided to a series of duplicate document detection tests 506, such as those described in TABLE 2, where each test can potentially compare different attributes from the fetched bodies (502 a, 504 a) to generate asignal 516. Attributes provided to the tests 506 (see TABLE 1) can be selected by the tests 506 themselves or by another component that provides the selected attributes to the tests 506. Attribute selection 520 a-b can be based on rules or heuristics that choose some attributes and ignore others based on the type of test that will be performed. For example, on web page 202 (FIG. 2 ),advertisement content 204 may not be provided to distance-based tests since such content always changes and does not correspond to what a user would consider core content. Similarly, tests in simple detection classes will be provided only with the attributes those tests are based on (e.g., body titles, body lengths). Moreover, distance-based signals or other signals can be computed after removal of “boilerplate”/non-core content from a body. The signal generated from each test 506 is stored in a separate part of asignal vector 510. - A pair of synthetic body attributes (502 b, 504 b) corresponding to the fetched body attributes (502 a, 504 a) are provided to another series of duplicate document detection tests 508 where each test can potentially compare different attributes from the synthetic bodies (502 b, 504 b) to generate a
signal 518. The series oftests 508 can be the same as 506, can be entirely different, or can have some tests in common. As described above, attributes provided to thetests 508 can be selected by thetests 508 themselves or by another component that provides the selected attributes to the tests. The signal generated from eachtest 508 is stored in a separate part of thesignal vector 510. - Once all of the
tests 506 and 508 are complete, thesignal vector 510 is provided as input to a model 512 that determines aconfidence 514 as to whether the pair of documents corresponding to the bodies 502 a-b and 504 a-b are duplicates. The model 512 is derived from a machine learning algorithm (MLA) that has been trained with a data set comprising tuples consisting of a signal vector (derived as described above) for a pair of documents and an indication of whether the documents are duplicates. The MLA builds the classification model 512 based on the training data set. In various implementations, the model 512 is generated by a MLA such as a propositional rule learner (e.g., JRIP) or a decision tree classifier (e.g., J48) available in the Waikato Environment for Knowledge Analysis (Weka). Weka is a collection of MLAs for data mining that can be applied directly to data sets or invoked programmatically. Weka is available from the University of Waikato in New Zealand. In further implementations, the model can be produced by other tree-based classifiers, rule-based classifiers (e.g., RIPPER), neural network-based classifiers, Bayesian network classifiers, decision-tree classifiers (e.g., ID3 and C4.5), logistic or linear regression-based classifiers, nearest neighbor/instance-based classifiers, or combinations of these. - In other implementations, a small set of simple screening tests can be performed on a pair of fetched and/or rendered bodies to determine whether further testing is warranted. If not, the full suite of tests as described above will not be performed on the pair.
- In additional implementations, the model produces a confidence as to whether the pair of documents are duplicates. If the confidence is above some threshold, the classifier's classification is accepted. If the confidence is below some threshold, one or more human assessors are shown the pair of documents and asked to make a confidence judgment. Optionally, these additional human assessed pairs may be added to the training data set to generate a model with improved classification accuracy.
-
FIG. 6 is a schematic diagram of ageneric computer system 600. Thesystem 600 can be used for practicing operations described in association with the method 400 and system 500. Thesystem 600 can include aprocessor 610, amemory 620, astorage device 630, and input/output devices 640. Each of thecomponents system bus 650. Theprocessor 610 is capable of processing instructions for execution within thesystem 600. Such executed instructions can implement one or more steps of method 400, for example. In one implementation, theprocessor 610 is a single or multi-threaded processor, or a collection of processors. Theprocessor 610 is capable of processing instructions stored in thememory 620 or on thestorage device 630 to perform duplicate document detection. - The
memory 620 is a computer readable medium such as volatile or non volatile random access memory that stores information within thesystem 600. Thememory 620 could store data structures representing fetched and synthetic document bodies, signal vectors, and a model, for example. Thestorage device 630 is capable of providing persistent storage for thesystem 600. Thestorage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, or other suitable persistent storage means. The input/output device 640 provides input/output operations for thesystem 600. In one implementation, the input/output device 640 includes a keyboard and/or pointing device. In another implementation, the input/output device 640 includes a display unit for displaying graphical user interfaces. The input/output device 640 can provide input/output operations for thesystem 600. - Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus.
- The computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. The term “data processing apparatus” encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet. The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- While this specification contains many specifics, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular implementations of the invention. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular implementations of the invention have been described. Other implementations are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results.
Claims (27)
1. A computer-implemented method, comprising:
performing a first plurality of tests on non rendered versions of a first and a second markup language document to determine a first plurality of signals, each signal in the first plurality of signals representing a comparison of particular document body attributes for the non rendered versions of the first and second documents, wherein a signal of the plurality of signals is a query-based signal that is based on a comparison of a respective snippet of the first and second documents;
performing a second plurality of tests on rendered versions of the first and second markup language documents to determine a second plurality of signals, each signal in the second plurality of signals representing a comparison of particular synthetic body attributes, corresponding to the particular document body attributes, for the rendered versions of the first and second documents, wherein a signal of the plurality of signals is a query-based signal that is based on a comparison of a respective snippet of the first and second documents;
generating a signal vector that includes each of the first plurality of signals and each of the second plurality of signals; and
providing the signal vector as an input to a machine learning classifier model that has been trained on the first and second plurality of signals to determine a confidence as to whether the first and second documents are duplicates.
2. (canceled)
3. The method of claim 1 wherein each signal in the first plurality of signals is a distance-based signal, a simple signal, or a query-based signal, and wherein each signal in the second plurality of signals is a distance-based signal, a simple signal, or a query-based signal.
4. The method of claim 3 wherein the distance-based signal is based on Hamming distance, Levenshtein distance, Damerau-Levenshtein distance, term frequency-inverse document frequency, modified compression normal distance, a longest subsequence, Jaccard distance, or a Charikar random-hyperplane hashing algorithm.
5. The method of claim 3 wherein the simple signal is based on a comparison of titles of the first and second documents, a comparison of the lengths of the rendered or non rendered versions of the first and second documents, a comparison of universal resource locators for the first and second documents, a comparison of compression lengths of the rendered or non rendered versions of the first and second documents, a comparison of fetched strings from the rendered or non rendered versions of the first and second documents, a determination of whether the rendered or non rendered version of the first and second documents is considered spam, or an identification of languages contained in the rendered or non rendered versions of the first and second documents.
6. The method of claim 3 wherein the query-based signal is further based on a frequency of query terms in the non rendered or rendered versions of the first and second documents, a comparison of relevance data for the rendered versions of the first and second documents, a comparison of a language of a query to a language of the non rendered or rendered versions of the first and second documents, or a determination of whether the non rendered or rendered versions of the first and second documents include pornography or spam.
7. The method of claim 1 , further comprising identifying the first document and the second document based on a search engine query.
8. The method of claim 1 , further comprising incorporating dynamic content into the rendered versions of the first and second documents.
9. The method of claim 1 , further comprising:
providing the first and second plurality of signals as input to a first model derived from a machine learning classifier where the first model is configured to determine the confidence;
determining if the confidence is below a threshold;
obtaining a new confidence based on a human comparison of the non rendered or rendered versions of the first and second markup language documents; and
providing the new confidence and the first and second plurality of signals to the machine learning classifier to derive a second model with improved accuracy over the first model.
10. A non-transitory computer program product, stored on a computer-readable medium which, when executed by data processing apparatus, is operable to cause the data processing apparatus to perform operations comprising:
performing a first plurality of tests on non rendered versions of a first and a second markup language document to determine a first plurality of signals, each signal in the first plurality of signals representing a comparison of particular document body attributes for the non rendered versions of the first and second documents, wherein a signal of the plurality of signals is a query-based signal that is based on a comparison of a respective snippet of the first and second documents;
performing a second plurality of tests on rendered versions of the first and second markup language documents to determine a second plurality of signals, each signal in the second plurality of signals representing a comparison of particular synthetic body attributes, corresponding to the particular document body attributes, for the rendered versions of the first and second documents, wherein a signal of the plurality of signals is a query-based signal based on a comparison of a respective snippet of the first and second documents;
generating a signal vector that includes each of the first plurality of signals and each of the second plurality of signals; and
providing the signal vector as an input to a machine learning classifier model that has been trained on the first and second plurality of signals to determine a confidence as to whether the first and second documents are duplicates.
11. (canceled)
12. The program product of claim 10 wherein each signal in the first plurality of signals is a distance-based signal, a simple signal, or a query-based signal, and wherein each signal in the second plurality of signals is a distance-based signal, a simple signal, or a query-based signal.
13. The program product of claim 12 wherein the distance-based signal is based on Hamming distance, Levenshtein distance, Damerau-Levenshtein distance, term frequency-inverse document frequency, modified compression normal distance, a longest subsequence, Jaccard distance, or a Charikar random-hyperplane hashing algorithm.
14. The program product of claim 12 wherein the simple signal is based on a comparison of titles of the first and second documents, a comparison of the lengths of the rendered or non rendered versions of the first and second documents, a comparison of universal resource locators for the first and second documents, a comparison of compression lengths of the rendered or non rendered versions of the first and second documents, a comparison of fetched strings from the rendered or non rendered versions of the first and second documents, a determination of whether the rendered or non rendered version of the first and second documents is considered spam, or an identification of languages contained in the rendered or non rendered versions of the first and second documents.
15. The program product of claim 12 wherein the query-based signal is further based on a frequency of query terms in the non rendered or rendered versions of the first and second documents, a comparison of relevance data for the rendered versions of the first and second documents, a comparison of a language of a query to a language of the non rendered or rendered versions of the first and second documents, or a determination of whether the non rendered or rendered versions of the first and second documents include pornography or spam.
16. The program product of claim 10 , wherein the operations further comprise identifying the first document and the second document based on a search engine query.
17. The program product of claim 10 , wherein the operations further comprise incorporating dynamic content into the rendered versions of the first and second documents.
18. The program product of claim 10 , further comprising:
providing the first and second plurality of signals as input to a first model derived from a machine learning classifier where the first model is configured to determine the confidence;
determining if the confidence is below a threshold;
obtaining a new confidence based on a human comparison of the non rendered or rendered versions of the first and second markup language documents; and
providing the new confidence and the first and second plurality of signals to the machine learning classifier to derive a second model with improved accuracy over the first model.
19. A system comprising:
data processing apparatus programed to perform operations comprising:
performing a first plurality of tests on non rendered versions of a first and a second markup language document to determine a first plurality of signals, each signal in the first plurality of signals representing a comparison of particular document body attributes for the non rendered versions of the first and second documents, wherein a signal of the plurality of signals is a query-based signal that is based on a comparison of a respective snippet of the first and second documents;
performing a second plurality of tests on rendered versions of the first and second markup language documents to determine a second plurality of signals, each signal in the second plurality of signals representing a comparison of particular synthetic body attributes, corresponding to the particular document body attributes, for the rendered versions of the first and second documents, wherein a signal of the plurality of signals is a query-based signal based on a comparison of a respective snippet of the first and second documents;
generating a signal vector that includes each of the first plurality of signals and each of the second plurality of signals; and
providing the signal vector as an input to a machine learning classifier model that has been trained on the first and second plurality of signals to determine a confidence as to whether the first and second documents are duplicates.
20. (canceled)
21. The system of claim 19 wherein each signal in the first plurality of signals is a distance-based signal, a simple signal, or a query-based signal, and wherein each signal in the second plurality of signals is a distance-based signal, a simple signal, or a query-based signal.
22. The system of claim 21 wherein the distance-based signal is based on Hamming distance, Levenshtein distance, Damerau-Levenshtein distance, term frequency-inverse document frequency, modified compression normal distance, a longest subsequence, Jaccard distance, or a Charikar random-hyperplane hashing algorithm.
23. The system of claim 21 wherein the simple signal is based on a comparison of titles of the first and second documents, a comparison of the lengths of the rendered or non rendered versions of the first and second documents, a comparison of universal resource locators for the first and second documents, a comparison of compression lengths of the rendered or non rendered versions of the first and second documents, a comparison of fetched strings from the rendered or non rendered versions of the first and second documents, a determination of whether the rendered or non rendered version of the first and second documents is considered spam, or an identification of languages contained in the rendered or non rendered versions of the first and second documents.
24. The system of claim 21 wherein the query-based signal is further based on a frequency of query terms in the non rendered or rendered versions of the first and second documents, a comparison of relevance data for the rendered versions of the first and second documents, a comparison of a language of a query to a language of the non rendered or rendered versions of the first and second documents, or a determination of whether the non rendered or rendered versions of the first and second documents include pornography or spam.
25. The system of claim 19 , wherein the operations further comprise identifying the first document and the second document based on a search engine query.
26. The system of claim 19 , wherein the operations further comprise incorporating dynamic content into the rendered versions of the first and second documents.
27. The system of claim 19 , wherein the operations further comprise:
providing the first and second plurality of signals as input to a first model derived from a machine learning classifier where the first model is configured to determine the confidence;
determining if the confidence is below a threshold;
obtaining a new confidence based on a human comparison of the non rendered or rendered versions of the first and second markup language documents; and
providing the new confidence and the first and second plurality of signals to the machine learning classifier to derive a second model with improved accuracy over the first model.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/675,051 US20140188919A1 (en) | 2007-01-26 | 2007-02-14 | Duplicate document detection |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US88686807P | 2007-01-26 | 2007-01-26 | |
US11/675,051 US20140188919A1 (en) | 2007-01-26 | 2007-02-14 | Duplicate document detection |
Publications (1)
Publication Number | Publication Date |
---|---|
US20140188919A1 true US20140188919A1 (en) | 2014-07-03 |
Family
ID=51018442
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/675,051 Abandoned US20140188919A1 (en) | 2007-01-26 | 2007-02-14 | Duplicate document detection |
Country Status (1)
Country | Link |
---|---|
US (1) | US20140188919A1 (en) |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130006610A1 (en) * | 2011-06-30 | 2013-01-03 | Leonard Jon Quadracci | Systems and methods for processing data |
US20150379430A1 (en) * | 2014-06-30 | 2015-12-31 | Amazon Technologies, Inc. | Efficient duplicate detection for machine learning data sets |
CN107291745A (en) * | 2016-03-31 | 2017-10-24 | 阿里巴巴集团控股有限公司 | The management method and device of a kind of data target |
US9805085B2 (en) | 2011-07-25 | 2017-10-31 | The Boeing Company | Locating ambiguities in data |
US20170337240A1 (en) * | 2016-05-19 | 2017-11-23 | Wistron Corporation | Software function verification system and software function verification method |
CN107832611A (en) * | 2017-10-21 | 2018-03-23 | 北京理工大学 | The bot program detection and sorting technique that a kind of dynamic static nature combines |
US20180189369A1 (en) * | 2016-12-30 | 2018-07-05 | Dropbox, Inc. | Version history management |
US20190034475A1 (en) * | 2017-07-28 | 2019-01-31 | Enigma Technologies, Inc. | System and method for detecting duplicate data records |
CN109710729A (en) * | 2018-12-14 | 2019-05-03 | 麒麟合盛网络技术股份有限公司 | A kind of acquisition method and device of text data |
CN111026436A (en) * | 2019-12-09 | 2020-04-17 | 支付宝(杭州)信息技术有限公司 | Model joint training method and device |
US10990470B2 (en) * | 2018-12-11 | 2021-04-27 | Rovi Guides, Inc. | Entity resolution framework for data matching |
US11176154B1 (en) | 2019-02-05 | 2021-11-16 | Amazon Technologies, Inc. | Collaborative dataset management system for machine learning data |
US11526506B2 (en) * | 2020-05-14 | 2022-12-13 | Code42 Software, Inc. | Related file analysis |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6615209B1 (en) * | 2000-02-22 | 2003-09-02 | Google, Inc. | Detecting query-specific duplicate documents |
US20060149800A1 (en) * | 2004-12-30 | 2006-07-06 | Daniel Egnor | Authoritative document identification |
US20070005588A1 (en) * | 2005-07-01 | 2007-01-04 | Microsoft Corporation | Determining relevance using queries as surrogate content |
-
2007
- 2007-02-14 US US11/675,051 patent/US20140188919A1/en not_active Abandoned
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6615209B1 (en) * | 2000-02-22 | 2003-09-02 | Google, Inc. | Detecting query-specific duplicate documents |
US20060149800A1 (en) * | 2004-12-30 | 2006-07-06 | Daniel Egnor | Authoritative document identification |
US20070005588A1 (en) * | 2005-07-01 | 2007-01-04 | Microsoft Corporation | Determining relevance using queries as surrogate content |
Non-Patent Citations (3)
Title |
---|
Bilenko, Mikhail. "Adaptive Duplicate Detection Using Learnable String Similarity Measures", 27 August 2003, ACM. * |
Chalana, Vikram et al. "Duplicate Document Detection in DocBrowse", 24 January 1998, SPIE. * |
Wenyin, Liu et al. "Phishing Webpage Detection", 2005 IEEE * |
Cited By (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130006610A1 (en) * | 2011-06-30 | 2013-01-03 | Leonard Jon Quadracci | Systems and methods for processing data |
US9501455B2 (en) * | 2011-06-30 | 2016-11-22 | The Boeing Company | Systems and methods for processing data |
US9805085B2 (en) | 2011-07-25 | 2017-10-31 | The Boeing Company | Locating ambiguities in data |
US20150379430A1 (en) * | 2014-06-30 | 2015-12-31 | Amazon Technologies, Inc. | Efficient duplicate detection for machine learning data sets |
US10963810B2 (en) * | 2014-06-30 | 2021-03-30 | Amazon Technologies, Inc. | Efficient duplicate detection for machine learning data sets |
CN107291745A (en) * | 2016-03-31 | 2017-10-24 | 阿里巴巴集团控股有限公司 | The management method and device of a kind of data target |
CN107402859A (en) * | 2016-05-19 | 2017-11-28 | 纬创资通股份有限公司 | Software function verification system and verification method thereof |
US10467221B2 (en) * | 2016-05-19 | 2019-11-05 | Wistron Corporation | Software function verification system and software function verification method |
US20170337240A1 (en) * | 2016-05-19 | 2017-11-23 | Wistron Corporation | Software function verification system and software function verification method |
US20180189369A1 (en) * | 2016-12-30 | 2018-07-05 | Dropbox, Inc. | Version history management |
US11526533B2 (en) * | 2016-12-30 | 2022-12-13 | Dropbox, Inc. | Version history management |
US20190034475A1 (en) * | 2017-07-28 | 2019-01-31 | Enigma Technologies, Inc. | System and method for detecting duplicate data records |
CN107832611A (en) * | 2017-10-21 | 2018-03-23 | 北京理工大学 | The bot program detection and sorting technique that a kind of dynamic static nature combines |
US11487608B2 (en) | 2018-12-11 | 2022-11-01 | Rovi Guides, Inc. | Entity resolution framework for data matching |
US10990470B2 (en) * | 2018-12-11 | 2021-04-27 | Rovi Guides, Inc. | Entity resolution framework for data matching |
CN109710729A (en) * | 2018-12-14 | 2019-05-03 | 麒麟合盛网络技术股份有限公司 | A kind of acquisition method and device of text data |
US11176154B1 (en) | 2019-02-05 | 2021-11-16 | Amazon Technologies, Inc. | Collaborative dataset management system for machine learning data |
WO2021114933A1 (en) * | 2019-12-09 | 2021-06-17 | 支付宝(杭州)信息技术有限公司 | Model joint training method and apparatus |
CN111026436A (en) * | 2019-12-09 | 2020-04-17 | 支付宝(杭州)信息技术有限公司 | Model joint training method and device |
US11526506B2 (en) * | 2020-05-14 | 2022-12-13 | Code42 Software, Inc. | Related file analysis |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20140188919A1 (en) | Duplicate document detection | |
US9558264B2 (en) | Identifying and displaying relationships between candidate answers | |
US20160162492A1 (en) | Confidence Ranking of Answers Based on Temporal Semantics | |
Rahman et al. | Effective reformulation of query for code search using crowdsourced knowledge and extra-large data analytics | |
US8346754B2 (en) | Generating succinct titles for web URLs | |
US9679001B2 (en) | Consensus search device and method | |
US10353967B2 (en) | Assigning relevance weights based on temporal dynamics | |
US8954423B2 (en) | Using reading levels in responding to requests | |
US8819047B2 (en) | Fact verification engine | |
US8788514B1 (en) | Triggering music answer boxes relevant to user search queries | |
US9760828B2 (en) | Utilizing temporal indicators to weight semantic values | |
KR101079769B1 (en) | Semantic Search Method and System for Associating with Plurality of Classifications | |
US8326836B1 (en) | Providing time series information with search results | |
US20100191740A1 (en) | System and method for ranking web searches with quantified semantic features | |
Zahra et al. | Geographic variability of Twitter usage characteristics during disaster events | |
US20070112753A1 (en) | Augmenting a training set for document categorization | |
JP5543020B2 (en) | Research mission identification | |
US9697099B2 (en) | Real-time or frequent ingestion by running pipeline in order of effectiveness | |
US8515986B2 (en) | Query pattern generation for answers coverage expansion | |
Carmel et al. | Social bookmark weighting for search and recommendation | |
US8918416B1 (en) | Classifying queries | |
Cheng et al. | Fuzzy matching of web queries to structured data | |
Li et al. | A feature-free search query classification approach using semantic distance | |
US9336330B2 (en) | Associating entities based on resource associations | |
US20190205470A1 (en) | Hypotheses generation using searchable unstructured data corpus |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HUFFMAN, SCOTT;LEHMAN, APRIL;STOLBOUSHKIN, ALEXEI;AND OTHERS;SIGNING DATES FROM 20070205 TO 20070207;REEL/FRAME:019025/0824 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |