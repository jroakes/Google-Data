US7302452B2 - Method and apparatus for handling requests for files in a data processing system - Google Patents
Method and apparatus for handling requests for files in a data processing system Download PDFInfo
- Publication number
- US7302452B2 US7302452B2 US10/455,179 US45517903A US7302452B2 US 7302452 B2 US7302452 B2 US 7302452B2 US 45517903 A US45517903 A US 45517903A US 7302452 B2 US7302452 B2 US 7302452B2
- Authority
- US
- United States
- Prior art keywords
- file
- application
- switch
- files
- request
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
Definitions
- the present invention relates generally to an improved data processing system and in particular, to a method and apparatus for processing data. Still more particularly, the present invention provides a method, apparatus, and computer instructions for managing requests for files.
- An operating system is a master control program that runs the computer.
- the first program loaded when the computer is turned on is referred to as the “kernel” and is the main part of the operating system, which resides in memory at all times.
- the operating system sets the standards for all application programs that run in the computer.
- the applications “talk to” the operating system for all user interface and file management operations.
- Data management is a function provided by the operating system. This function keeps track of the data on storage devices, such as disk, tape and optical storage devices.
- An application or program deals with data by file name and a particular location within the file.
- the operating system's file system knows where that data is physically stored (which sectors on disk) and intersection between the application and operating system is through the programming interface.
- An application needs to read or write data it makes a call to the operating system. This call is also referred to as an application programming interface (API) call.
- API application programming interface
- the operating system employs a file system to allow for easy storage, location, and retrieval of data.
- the present invention provides a method, apparatus, and computer instructions for use in an operating system for managing requests for files.
- a request for a switch file from an application is received.
- the application points to the switch file.
- Many applications may point to the same switch file.
- Location information for the switch file points to a set of files.
- a file from the set of files based on system information to form an identified file is identified.
- the identified file passes to the application.
- the system information may be already present within the system, or passed to the system by a user or process.
- FIG. 1 is a pictorial representation of a data processing system in which the present invention may be implemented in accordance with a preferred embodiment of the present invention
- FIG. 2 is a block diagram of a data processing system in which the present invention may be implemented
- FIG. 3 is a diagram illustrating components used in managing requests for files in accordance with a preferred embodiment of the present invention
- FIG. 4 is a diagram of data structures used in a switch file system in accordance with a preferred embodiment of the present invention.
- FIG. 5 is a flowchart of a process for creating a switch file type in accordance with a preferred embodiment of the present invention.
- FIG. 6 is a flowchart of a process for handling requests for files in accordance with a preferred embodiment of the present invention.
- a computer 100 which includes system unit 102 , video display terminal 104 , keyboard 106 , storage devices 108 , which may include floppy drives and other types of permanent and removable storage media, and mouse 110 . Additional input devices may be included with personal computer 100 , such as, for example, a joystick, touchpad, touch screen, trackball, microphone, and the like.
- Computer 100 can be implemented using any suitable computer, such as an IBM eServer computer or IntelliStation computer, which are products of International Business Machines Corporation, located in Armonk, N.Y. Although the depicted representation shows a computer, other embodiments of the present invention may be implemented in other types of data processing systems, such as a network computer. Computer 100 also preferably includes a graphical user interface (GUI) that may be implemented by means of systems software residing in computer readable media in operation within computer 100 .
- GUI graphical user interface
- Data processing system 200 is an example of a computer, such as computer 100 in FIG. 1 , in which code or instructions implementing the processes of the present invention may be located.
- Data processing system 200 employs a peripheral component interconnect (PCI) local bus architecture.
- PCI peripheral component interconnect
- AGP Accelerated Graphics Port
- ISA Industry Standard Architecture
- Processor 202 and main memory 204 are connected to PCI local bus 206 through PCI bridge 208 .
- PCI bridge 208 also may include an integrated memory controller and cache memory for processor 202 .
- PCI local bus 206 may be made through direct component interconnection or through add-in boards.
- local area network (LAN) adapter 210 small computer system interface SCSI host bus adapter 212 , and expansion bus interface 214 are connected to PCI local bus 206 by direct component connection.
- audio adapter 216 graphics adapter 218 , and audio/video adapter 219 are connected to PCI local bus 206 by add-in boards inserted into expansion slots.
- Expansion bus interface 214 provides a connection for a keyboard and mouse adapter 220 , modem 222 , and additional memory 224 .
- SCSI host bus adapter 212 provides a connection for hard disk drive 226 , tape drive 228 , and CD-ROM drive 230 .
- Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.
- An operating system runs on processor 202 and is used to coordinate and provide control of various components within data processing system 200 in FIG. 2 .
- the operating system may be a commercially available operating system such as Windows XP, which is available from Microsoft Corporation.
- An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system 200 . “Java” is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented programming system, and applications of programs are located on storage devices, such as hard disk drive 226 , and may be loaded into main memory 204 for execution by processor 202 .
- FIG. 2 may vary depending on the implementation.
- Other internal hardware or peripheral devices such as flash read-only memory (ROM), equivalent nonvolatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in FIG. 2 .
- the processes of the present invention may be applied to a multiprocessor data processing system.
- data processing system 200 may not include SCSI host bus adapter 212 , hard disk drive 226 , tape drive 228 , and CD-ROM 230 .
- the computer to be properly called a client computer, includes some type of network communication interface, such as LAN adapter 210 , modem 222 , or the like.
- data processing system 200 may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system 200 comprises some type of network communication interface.
- data processing system 200 may be a personal digital assistant (PDA), which is configured with ROM and/or flash ROM to provide non-volatile memory for storing operating system files and/or user-generated data.
- PDA personal digital assistant
- data processing system 200 also may be a notebook computer or hand held computer in addition to taking the form of a PDA.
- data processing system 200 also may be a kiosk or a Web appliance.
- processor 202 uses computer implemented instructions, which may be located in a memory such as, for example, main memory 204 , memory 224 , or in one or more peripheral devices 226 - 230 .
- the present invention provides a method, apparatus, and computer instructions for managing requests made by applications for files.
- a switch file type is used to allow for multiple applications to point to the same file, but access different files.
- a switch file type is similar to a link, except this type of data structure points to different files based on system information.
- This system information may be, for example, a user identification or an identification of an application.
- Other types of system information may be any indentifier that is available to the operating system.
- This type of system information may include, for example, a group ID, a process group ID, a machine architecture, a number of processors, a uname, and environmental variable. Further, system information could be made available to the system in which this information is passed by a user or process to the operating system.
- the switch file type in these examples is a data structure that may take different forms.
- the data structure may be a record in a file system or a table in the operating system.
- operating system 300 includes switch file process 302 , which is employed to create switch file records 304 .
- These records include the information needed to point to the appropriate files based on system information.
- the different records in switch file records 304 may be created by various mechanisms. For example, a user may issue a command to create the switch file record. Alternatively, a graphical use interface may provide a conduit for prompting and receiving information to create associations of files with system information.
- a user may issue a command to create a switch file using the following command and parameters: ⁇ create> ⁇ switch_file> ⁇ target_file> ⁇ additional_info>
- the parameter ⁇ switch_file> is the name and path of the file that will be called by the application.
- the parameter ⁇ target_file> is the name of the file that is to be used and includes the path to the file.
- the parameter ⁇ additional_info> defines the system information that is to be used to select the target file. For example, to link a user ID Luke to version 1.3 of /usr/lib/library, the following command is issued: crsf/usr/lib/library/usr/lib/library.1.3 userid Luke.
- switch process 302 creates a record in switch file records 304 to link the switch file to the application and to provide for the redirect to the appropriate file based on the system information. Additional links may be placed in the record by additional commands. For example, an additional link to the switch file record described above may be made for a different user ID as follows: crsf/usr/lib/library/usr/lib/library.1.4 userid Joe.
- File system 318 provides access to files, such as files 320 , 322 , 324 , and 326 . These files may take different forms, such as library files, configuration files, executable files, dynamic link library files, and other types of data files.
- the file request is for a switch file record in switch file records 304 , that record is used to identify the appropriate file to be returned to the applications.
- the system information used is a user ID
- the appropriate file within a switch file record may be identified based on the current user that is logged into the system or application. Other types of system information may be used, such as the name of an application.
- FIG. 4 a diagram of data structures used in a switch file system is depicted in accordance with a preferred embodiment of the present invention.
- the file system is a UNIX based file system, which may be implemented as file system 318 in FIG. 3 .
- switch file records such as switch file records 304
- a file is represented by an inode, which is basically a record that stores information about a specific file on a disk.
- An inode is also referred to as an index node and contains information, such as user and group identifiers of the file, the times of last modification and access, a count of the number of hard links to the file, and the type of file.
- an inode contains pointers to disk blocks, containing the data contents of the files.
- Inode 400 is set up based on user IDs.
- Inode 400 includes entries 402 , 404 , and 406 in these examples. These entries are direct entries, which contain pointers that point to file inode 408 and file inode 410 . These file inodes point to data blocks for the actual files. Entry 402 contains the user ID named “User A”, entry 404 contains the user ID named “User B”. Both of these entries contain path information to file 1. File 1 is represented by file inode 408 . Entry 406 contains the user ID named “User C”. This entry points to file inode 410 .
- switch inode 400 points to two different file inodes, file inode 408 and file inode 410 . These file inodes point to the actual data for the files. When the appropriate file inode is selected, the file system will return the file associated with the selected inode to the application.
- indirect entries may be employed.
- single indirect entry 412 points to switch inode 414 , which in turn points to file inode 416 and file inode 418 .
- the file system is able to point to larger amounts of data.
- an indirect entry such as single indirect entry 412 may be used.
- entry 420 is a double indirect entry, which points to switch inode 422 .
- switch inode 422 points to switch inode 424 and switch inode 426 .
- Switch inode 424 points to file inode 428 and file inode 430 .
- switch inode 426 points to file inode 432 and file inode 434 .
- higher levels of indirects such as a triple indirect in entry 436 may be employed, if needed.
- the system information used in this example are user IDs. Of course, other types of system information may be implemented depending on the particular selection.
- FIG. 5 a flowchart of a process for creating a switch file type is depicted in accordance with a preferred embodiment of the present invention.
- the process illustrated in FIG. 5 may be implemented as switch file process 302 within operating system 300 in FIG. 3 .
- the process begins by receiving a request to create a switch file type (step 500 ).
- the switch file type is a data structure that may take various forms, such as an inode of other data structure employed in a file system, depending on the actual implementation.
- the type of information is identified (step 502 ).
- Step 502 is used to identify the type of system information that is to be stored in the record. This system information may be, for example, a user ID.
- the data for the type of information is identified (step 504 ).
- the actual user ID is identified in this step.
- the file is then identified (step 506 ).
- the data is the location and name of the file.
- This information is stored as a pointer to the data for the file.
- the pointer points to a file inode, which points to the actual file data.
- the information identified in steps 504 and 506 may be obtained using various mechanisms. For example, this information may be obtained from parameters in a command entered by a user. Additionally, a graphical user interface may be employed to prompt for and receive the information.
- the data and the file are stored in the switch file record (step 508 ).
- FIG. 6 a flowchart of a process for handling requests for files is depicted in accordance with a preferred embodiment of the present invention.
- the process illustrated in FIG. 6 may be implemented in file system 318 in these examples.
- file system 318 includes switch inodes as described with respect to FIG. 3 and FIG. 4 above.
- the process begins by receiving a request for a file (step 600 ).
- the request is received from an application, such as application 306 in FIG. 3 .
- This request typically includes a path and file name.
- a determination is made as to whether the request is for a switch type file (step 602 ). If the request is for a switch type file, then information for the switch file is identified (step 604 ).
- Information identified in step 604 is information such as a user ID or application name. This information may be readily available to the system of the user may be prompted to enter information depending on the implementation.
- the actual file is located using the identified information and the request (step 606 ).
- This step is performed by examining switch file records, such as inode 400 in FIG. 4 to determine an actual file to be returned to the requesting application.
- switch file record With a switch file record, the system information is used as an index or key to find the appropriate entry within the switch inode.
- the identified entry contains a pointer to a file inode, which points to the actual file.
- the file identified is returned to the application (step 608 ), with the process terminating thereafter.
- the file requested is returned to the application using only the request (step 610 ), with the process terminating thereafter.
- the file system only identifies a file inode to obtain pointers to the location of the data making up the file.
- a pointer to the inode is indirectly passed to the application requesting the file.
- the application receives a file descriptor used by the kernel to index a table of open files for the current process. Each table entry contains a pointer to a file structure that in turn points to the inode.
- the present invention provides a method, apparatus, and computer instructions for managing file requests.
- the mechanism of the present invention allows for the same file to be requested by an application, but allowing for the return of different files depending on system information.
- a browser program requesting a configuration file may receive different files depending on the particular user ID that is currently on the system.
- two versions of an application used on a system may both request the same dynamic link library file. In other words, both applications request a file having the same file name and path.
- Each application may require a different version of the dynamic link library in order to properly execute.
- the mechanism of the present invention may result in different versions of a dynamic link library file being returned depending on the version of the application requesting the file.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/455,179 US7302452B2 (en) | 2003-06-05 | 2003-06-05 | Method and apparatus for handling requests for files in a data processing system |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/455,179 US7302452B2 (en) | 2003-06-05 | 2003-06-05 | Method and apparatus for handling requests for files in a data processing system |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040249784A1 US20040249784A1 (en) | 2004-12-09 |
US7302452B2 true US7302452B2 (en) | 2007-11-27 |
Family
ID=33489892
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/455,179 Expired - Fee Related US7302452B2 (en) | 2003-06-05 | 2003-06-05 | Method and apparatus for handling requests for files in a data processing system |
Country Status (1)
Country | Link |
---|---|
US (1) | US7302452B2 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080250072A1 (en) * | 2007-04-03 | 2008-10-09 | International Business Machines Corporation | Restoring a source file referenced by multiple file names to a restore file |
Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH05303522A (en) | 1992-04-24 | 1993-11-16 | Nec Corp | File server switching system |
US5421001A (en) | 1992-05-01 | 1995-05-30 | Wang Laboratories, Inc. | Computer method and apparatus for a table driven file interface |
US5457795A (en) | 1994-06-01 | 1995-10-10 | Willman; Todd J. | Method and apparatus for sharing and transferring data between software programs |
US5680558A (en) | 1993-12-09 | 1997-10-21 | Canon Kabushiki Kaisha | Multimedia file management in which specialized icons can be created for different file types |
JPH10171689A (en) | 1996-12-10 | 1998-06-26 | Matsushita Electric Ind Co Ltd | Video server device |
US5778359A (en) | 1996-04-18 | 1998-07-07 | Davox Corporation | System and method for determining and verifying a file record format based upon file characteristics |
US5884097A (en) | 1997-05-17 | 1999-03-16 | Intertop Corporation | Data structure and methods for defining and using attribute data blocks to instantiate objects and describe changes to objects |
US6016515A (en) | 1997-04-04 | 2000-01-18 | Microsoft Corporation | Method, computer program product, and data structure for validating creation of and routing messages to file object |
US6047312A (en) | 1995-07-07 | 2000-04-04 | Novell, Inc. | System for replicating and associating file types with application programs among plurality of partitions in a server |
WO2000042756A1 (en) | 1999-01-15 | 2000-07-20 | Terwindt Johannes Gerardus Hen | System for providing a connection between two or more computers |
US6098102A (en) | 1997-11-19 | 2000-08-01 | International Business Machines Corporation | Selective downloading of file types contained in hypertext documents transmitted in a computer controlled network |
JP2001154861A (en) | 1999-11-25 | 2001-06-08 | Nec Soft Ltd | System and method for asynchronously ending process |
US6269371B1 (en) | 1998-02-27 | 2001-07-31 | Kabushiki Kaisha Toshiba | Computer system, and file resources switching method applied to computer system |
US6308061B1 (en) * | 1996-08-07 | 2001-10-23 | Telxon Corporation | Wireless software upgrades with version control |
US6408325B1 (en) | 1998-05-06 | 2002-06-18 | Sun Microsystems, Inc. | Context switching technique for processors with large register files |
US20020120791A1 (en) * | 2001-02-28 | 2002-08-29 | Mobiliti, Inc. | Application independent write monitoring method for fast backup and synchronization of open files |
US6578055B1 (en) * | 2000-06-05 | 2003-06-10 | International Business Machines Corporation | Methods, system and computer program products for mirrored file access through assuming a privileged user level |
US6611848B1 (en) * | 2000-09-13 | 2003-08-26 | Radiant Data Corporation | Methods for maintaining data and attribute coherency in instances of sharable files |
US6625625B1 (en) * | 1999-04-09 | 2003-09-23 | Hitachi, Ltd. | System and method for backup and restoring by utilizing common and unique portions of data |
US20030195951A1 (en) * | 2002-04-12 | 2003-10-16 | Wittel Walter I. | Method and system to dynamically detect, download and install drivers from an online service |
US6889249B2 (en) * | 2001-01-11 | 2005-05-03 | Z-Force, Inc. | Transaction aggregation in a switched file system |
US6907268B2 (en) * | 2001-07-20 | 2005-06-14 | Bellsouth Intellectual Property Corporation | System, method, and apparatus for providing high-speed access to data stored at a digital cellular switch |
-
2003
- 2003-06-05 US US10/455,179 patent/US7302452B2/en not_active Expired - Fee Related
Patent Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH05303522A (en) | 1992-04-24 | 1993-11-16 | Nec Corp | File server switching system |
US5421001A (en) | 1992-05-01 | 1995-05-30 | Wang Laboratories, Inc. | Computer method and apparatus for a table driven file interface |
US5680558A (en) | 1993-12-09 | 1997-10-21 | Canon Kabushiki Kaisha | Multimedia file management in which specialized icons can be created for different file types |
US5457795A (en) | 1994-06-01 | 1995-10-10 | Willman; Todd J. | Method and apparatus for sharing and transferring data between software programs |
US6047312A (en) | 1995-07-07 | 2000-04-04 | Novell, Inc. | System for replicating and associating file types with application programs among plurality of partitions in a server |
US5778359A (en) | 1996-04-18 | 1998-07-07 | Davox Corporation | System and method for determining and verifying a file record format based upon file characteristics |
US6308061B1 (en) * | 1996-08-07 | 2001-10-23 | Telxon Corporation | Wireless software upgrades with version control |
JPH10171689A (en) | 1996-12-10 | 1998-06-26 | Matsushita Electric Ind Co Ltd | Video server device |
US6016515A (en) | 1997-04-04 | 2000-01-18 | Microsoft Corporation | Method, computer program product, and data structure for validating creation of and routing messages to file object |
US5884097A (en) | 1997-05-17 | 1999-03-16 | Intertop Corporation | Data structure and methods for defining and using attribute data blocks to instantiate objects and describe changes to objects |
US6098102A (en) | 1997-11-19 | 2000-08-01 | International Business Machines Corporation | Selective downloading of file types contained in hypertext documents transmitted in a computer controlled network |
US6269371B1 (en) | 1998-02-27 | 2001-07-31 | Kabushiki Kaisha Toshiba | Computer system, and file resources switching method applied to computer system |
US6408325B1 (en) | 1998-05-06 | 2002-06-18 | Sun Microsystems, Inc. | Context switching technique for processors with large register files |
WO2000042756A1 (en) | 1999-01-15 | 2000-07-20 | Terwindt Johannes Gerardus Hen | System for providing a connection between two or more computers |
US6625625B1 (en) * | 1999-04-09 | 2003-09-23 | Hitachi, Ltd. | System and method for backup and restoring by utilizing common and unique portions of data |
JP2001154861A (en) | 1999-11-25 | 2001-06-08 | Nec Soft Ltd | System and method for asynchronously ending process |
US6578055B1 (en) * | 2000-06-05 | 2003-06-10 | International Business Machines Corporation | Methods, system and computer program products for mirrored file access through assuming a privileged user level |
US6611848B1 (en) * | 2000-09-13 | 2003-08-26 | Radiant Data Corporation | Methods for maintaining data and attribute coherency in instances of sharable files |
US6889249B2 (en) * | 2001-01-11 | 2005-05-03 | Z-Force, Inc. | Transaction aggregation in a switched file system |
US20020120791A1 (en) * | 2001-02-28 | 2002-08-29 | Mobiliti, Inc. | Application independent write monitoring method for fast backup and synchronization of open files |
US6907268B2 (en) * | 2001-07-20 | 2005-06-14 | Bellsouth Intellectual Property Corporation | System, method, and apparatus for providing high-speed access to data stored at a digital cellular switch |
US20030195951A1 (en) * | 2002-04-12 | 2003-10-16 | Wittel Walter I. | Method and system to dynamically detect, download and install drivers from an online service |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080250072A1 (en) * | 2007-04-03 | 2008-10-09 | International Business Machines Corporation | Restoring a source file referenced by multiple file names to a restore file |
US7814077B2 (en) * | 2007-04-03 | 2010-10-12 | International Business Machines Corporation | Restoring a source file referenced by multiple file names to a restore file |
US20100306523A1 (en) * | 2007-04-03 | 2010-12-02 | International Business Machines Corporation | Restoring a source file referenced by multiple file names to a restore file |
US8140486B2 (en) | 2007-04-03 | 2012-03-20 | International Business Machines Corporation | Restoring a source file referenced by multiple file names to a restore file |
Also Published As
Publication number | Publication date |
---|---|
US20040249784A1 (en) | 2004-12-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8521790B2 (en) | Increasing efficiency of data storage in a file system | |
US8429192B2 (en) | System and method for supporting a plurality of access control list types for a file system in an operating system | |
US6594665B1 (en) | Storing hashed values of data in media to allow faster searches and comparison of data | |
US7882065B2 (en) | Processing a request to update a file in a file system with update data | |
US6125369A (en) | Continuous object sychronization between object stores on different computers | |
JP4972082B2 (en) | Ability for developers to easily discover or extend well-known locations on the system | |
US7386609B2 (en) | Method, system, and program for managing devices in a network | |
US7673299B2 (en) | System and method for dynamically verifying the compatibility of a user interface resource | |
US8359375B2 (en) | Migration of data between computers | |
US8126859B2 (en) | Updating a local version of a file based on a rule | |
US7100115B1 (en) | Method and apparatus for providing computer-based help | |
US5778385A (en) | Link manager for managing links integrating data between application programs | |
US20050044148A1 (en) | Method and system for accessing multiple types of electronic content | |
EP1012757B1 (en) | Method for performing defined actions when grafting the namespace of one storage medium into the namespace of another storage medium | |
US7512990B2 (en) | Multiple simultaneous ACL formats on a filesystem | |
US8738580B2 (en) | Copying files from one directory to another | |
US8005872B2 (en) | Method for fast deletion of physically clustered data | |
US7219096B2 (en) | Method for migrating open files on a busy file system | |
US20040225855A1 (en) | Method, system, and program for allocating storage units to a data set | |
US20050028152A1 (en) | Method and apparatus for identifying a Java class package name without disassembling Java bytecodes | |
US7302452B2 (en) | Method and apparatus for handling requests for files in a data processing system | |
US20030204525A1 (en) | Application control method, and implementation device and processing program for the same | |
US6625614B1 (en) | Implementation for efficient access of extended attribute data | |
CN103514089B (en) | The software of software manager installs detection method and system | |
US20050257053A1 (en) | System and method for automatically hiding sensitive information obtainable from a process table |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BARFIELD, JANEL GUILLORY;LAMPITT, JOSEPH VERNON;MCLANE, TOMMY LUCAS;REEL/FRAME:014147/0663Effective date: 20030603 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20191127 |