US20180054652A1 - Embeddable media content search widget - Google Patents
Embeddable media content search widget Download PDFInfo
- Publication number
- US20180054652A1 US20180054652A1 US15/798,271 US201715798271A US2018054652A1 US 20180054652 A1 US20180054652 A1 US 20180054652A1 US 201715798271 A US201715798271 A US 201715798271A US 2018054652 A1 US2018054652 A1 US 2018054652A1
- Authority
- US
- United States
- Prior art keywords
- video
- user interface
- content
- content platform
- playlist
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/47—End-user applications
- H04N21/482—End-user interface for program selection
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/40—Information retrieval; Database structures therefor; File system structures therefor of multimedia data, e.g. slideshows comprising image and additional audio data
- G06F16/43—Querying
- G06F16/438—Presentation of query results
- G06F16/4387—Presentation of query results by the use of playlists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/70—Information retrieval; Database structures therefor; File system structures therefor of video data
- G06F16/73—Querying
- G06F16/738—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/70—Information retrieval; Database structures therefor; File system structures therefor of video data
- G06F16/74—Browsing; Visualisation therefor
- G06F16/743—Browsing; Visualisation therefor a collection of video files or sequences
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/70—Information retrieval; Database structures therefor; File system structures therefor of video data
- G06F16/78—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/7867—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using information manually generated, e.g. tags, keywords, comments, title and artist information, manually generated time, location and usage information, user ratings
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
- G06F16/972—Access to data in other repository systems, e.g. legacy data or dynamic Web page generation
-
- G06F17/2235—
-
- G06F17/3082—
-
- G06F17/3084—
-
- G06F17/30849—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0481—Interaction techniques based on graphical user interfaces [GUI] based on specific properties of the displayed interaction object or a metaphor-based environment, e.g. interaction with desktop elements like windows or icons, or assisted by a cursor's changing behaviour or appearance
- G06F3/0482—Interaction with lists of selectable items, e.g. menus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0251—Targeted advertisements
- G06Q30/0253—During e-commerce, i.e. online transactions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0277—Online advertisement
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/06—Buying, selling or leasing transactions
- G06Q30/0601—Electronic shopping [e-shopping]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/06—Buying, selling or leasing transactions
- G06Q30/0601—Electronic shopping [e-shopping]
- G06Q30/0623—Item investigation
- G06Q30/0625—Directed, with specific intent or strategy
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/41—Structure of client; Structure of client peripherals
- H04N21/414—Specialised client platforms, e.g. receiver in car or embedded in a mobile appliance
- H04N21/41407—Specialised client platforms, e.g. receiver in car or embedded in a mobile appliance embedded in a portable device, e.g. video client on a mobile phone, PDA, laptop
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/45—Management operations performed by the client for facilitating the reception of or the interaction with the content or administrating data related to the end-user or to the client device itself, e.g. learning user preferences for recommending movies, resolving scheduling conflicts
- H04N21/4508—Management of client data or end-user data
Definitions
- aspects and implementations of the present disclosure relate to data processing systems, and more specifically, to a software component that can be embedded in user interfaces.
- Such research may include consulting demonstration videos, text-based reviews, audio-based reviews, video-based reviews, retailer websites, shopping search engines, and so forth.
- a first computer system that is associated with a first organization provides a software component to a second computer system that is associated with a second organization, where the software component, when embedded and executed within a user interface provided by the second organization, includes in the user interface a first link to a first media content item and a second link to a second media content item.
- the first media content item and the second media content item reside in a data store associated with the first organization, and the first media content item and the second media content item are selected from a plurality of media content items based on content in the user interface.
- FIG. 1 illustrates an exemplary system architecture, in accordance with one implementation of the present disclosure.
- FIG. 2 depicts a flow diagram of an example of a method for handling a request for a software component.
- FIG. 3 depicts a flow diagram of an example of a method by which a software component is embedded in a user interface that is downloaded and executed by a client machine.
- FIG. 4 depicts a flow diagram of an example of some operations of an embedded software component when executed by a client machine.
- FIG. 5 depicts an illustrative user interface with embedded playlist, in accordance with one implementation of the present disclosure.
- FIG. 6 depicts a flow diagram of an example of a method for processing a request for links to media content items that are relevant to one or more keywords.
- FIG. 7 depicts a block diagram of an illustrative computer system operating in accordance with aspects and implementations of the present disclosure.
- a first computer system that is associated with a first organization provides a software component (known as a “widget”) to a second computer system that is associated with a second organization, where the software component, when embedded and executed within a user interface provided by the second organization, includes in the user interface links to relevant media content items (e.g., video clips, audio clips, etc.) in a data store (e.g., a file server, a relational database, etc.) managed by the first organization.
- relevant media content items e.g., video clips, audio clips, etc.
- a data store e.g., a file server, a relational database, etc.
- the software component may be embedded within a user interface of an application (or “app”) that is created by the second organization and is downloaded and run by a client (e.g., a smartphone, a laptop computer, etc.), while in some other implementations, the software component may be embedded within a web page that is created by the second organization and is downloaded by a client browser.
- an application or “app”
- client e.g., a smartphone, a laptop computer, etc.
- the software component may be embedded within a web page that is created by the second organization and is downloaded by a client browser.
- aspects and implementations of the present disclosure are thus capable of enabling a user who is browsing a retailer's mobile website, for example, on his or her smartphone, or who is using a retailer's mobile app running on the smartphone, to research a potential purchase without having to leave the current web page or suspend the current app.
- a website developer who works for the retailer i.e., the “second organization” referenced above
- can obtain a software component from another organization i.e., the “first organization” referenced above
- embed the software component in a user interface that is downloaded and run by a client e.g., in a web page visited by a client browser, in an app downloaded and run by a client, etc.
- the software component obtains one or more keywords based on content of the user interface (e.g., text, button labels, images, metadata tags, etc.) and transmits a query to the data store of the first organization, where the query specifies the keyword(s) and requests links to media content items in the data store that are relevant to the keyword(s).
- relevant media content items are selected from among the items stored in the data store based on the specified keyword(s) and links to the selected media content items are transmitted to the software component.
- the software component creates a playlist in the user interface, and then populates the playlist with the received links.
- a playlist of relevant videos (e.g., a product demonstration video, etc.) is available for the user to view in the current web page or application, without having to leave the web page or application and visit a new web page or launch another application, thereby improving the user experience.
- relevant videos e.g., a product demonstration video, etc.
- FIG. 1 illustrates an exemplary system architecture 100 , in accordance with one implementation of the present disclosure.
- the system architecture 100 includes a server machine 115 , a media content item store 110 , a software component library 130 , and website developer machines 102 A- 102 N connected to a network 104 .
- Network 104 may be a public network (e.g., the Internet), a private network (e.g., a local area network (LAN) or wide area network (WAN)), or a combination thereof.
- LAN local area network
- WAN wide area network
- Server machine 115 may be a rackmount server, a router computer, a personal computer, a portable digital assistant, a mobile phone, a laptop computer, a tablet computer, a camera, a video camera, a netbook, a desktop computer, a media center, or any combination of the above.
- Server machine 115 includes a web server 140 and a media content item manager 145 .
- the web server 140 and media content item manager 145 may run on different machines (e.g., a plurality of servers that are part of a content hosting and sharing platform, etc.).
- Media content item store 110 is a persistent storage that is capable of storing media content items (e.g., video clips, audio clips, images, etc.), as well as data structures to tag, organize, and index the media content items, and of processing queries pertaining to the stored media content items.
- Media content item store 110 may be hosted by one or more storage devices, such as main memory, magnetic or optical storage based disks, tapes or hard drives, NAS, SAN, and so forth.
- media content item store 110 may be a network-attached file server, while in other embodiments media content item store 110 may be some other type of persistent storage such as an object-oriented database, a relational database, and so forth, that may be hosted by the server machine 115 or one or more different machines coupled to the server machine 115 via the network 104 .
- the media content items stored in the media content item store 110 may include end user content that is uploaded via user devices, as well as media content items uploaded by publishers, libraries, news services, and so forth.
- media content item store 110 is maintained by the same organization (e.g., corporation, government agency, etc.) that maintains server machine 115 .
- Software component library 130 is a persistent storage that is capable of storing software components (e.g., widgets that can be embedded in web pages, widgets that can embedded in user interfaces of applications, software objects [e.g., data structures, business objects, etc.] that can be used by applications written in an object-oriented programming language, etc.), as well as data structures to tag, organize, and index the software components.
- software components e.g., widgets that can be embedded in web pages, widgets that can embedded in user interfaces of applications, software objects [e.g., data structures, business objects, etc.] that can be used by applications written in an object-oriented programming language, etc.
- the software components may be provided by private software organizations, open-source software organizations, independent software developers, and so forth.
- Software component library 130 may be hosted by one or more storage devices, such as main memory, magnetic or optical storage based disks, tapes or hard drives, NAS, SAN, and so forth.
- software component library 130 may be a network-attached file server, while in other embodiments software component library 130 may be some other type of persistent storage such as an object-oriented database, a relational database, and so forth, that may be hosted by the server machine 115 or one or more different machines coupled to the server machine 115 via the network 104 .
- software component library 130 is maintained by the same organization (e.g., corporation, government agency, etc.) that maintains server machine 115 and media content item store 110 .
- media content item manager 145 is capable of receiving requests (e.g., from software components, etc.) for links to items stored in media content item store 110 , and of providing such links in response to the requests. In one implementation, media content item manager 145 may select particular items in media content item store 110 based on one or more keywords specified by a request, and return links to these relevant content items to the sender of the request. In some aspects, media content item manager 145 may also be capable of providing software components (e.g., from software component library 130 , etc.) to developers (e.g., via web server 140 , etc.). Some operations of media content item manager 145 are described in detail below with respect to FIG. 2 and FIG. 6 .
- server machine 115 media content item store 110 , and software component library 130 are associated with one particular organization (e.g., an organization that provides a content hosting and/or sharing platform).
- one particular organization e.g., an organization that provides a content hosting and/or sharing platform.
- the website developer machines 102 A- 102 N are personal computers (PC), laptops, tablet computers, smartphones, or any other computing or communication devices.
- each website developer machine 102 is associated with a human website developer who belongs to an organization that is different than the organization associated with server machine 115 , media content item store 110 , and software component library 130 .
- the website developer machines 102 A- 102 N may run an operating system (OS) that manages hardware and software of the website developer machines 102 A- 102 N.
- a browser (not shown) may run on the website developer machines (e.g., on the OS of the website developer machines).
- the browser may be a web browser that can download and render web pages served by a web server (e.g., web server 140 hosted by server machine 115 , etc.) and download items (e.g., images, software components [or “widgets”], etc.) embedded within or linked to by the web pages.
- a web server e.g., web server 140 hosted by server machine 115 , etc.
- download items e.g., images, software components [or “widgets”], etc.
- FIG. 2 depicts a flow diagram of an example of a method 200 for handling a request for a software component.
- the method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both.
- the method is performed by the server machine 115 of FIG. 1 , while in some other implementations, one or more blocks of FIG. 2 may be performed by another machine.
- a request is received for a software component.
- the request is received by web server 140 from a website developer machine and may be generated in response to a website developer clicking on a particular link, button, etc. of a web page downloaded from server machine 115 .
- the website developer may arrive at the web page via a search engine query, or via a link in an email received by the website developer, etc.
- the requested software component is retrieved from software component library 130 , and at block 203 , the software component is transmitted to the website developer machine.
- web content item manager 145 retrieves the software component and transmits the software component to the website developer machine via the File Transfer Protocol (FTP).
- FTP File Transfer Protocol
- the software component may be obtained by a website developer in some other manner, rather than via downloading from a website (e.g., from a CD-ROM distribution provided to the website developer, etc.).
- FIG. 3 depicts a flow diagram of an example of a method 300 by which a software component is embedded in a user interface that is downloaded and executed by a client machine.
- the method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both.
- a website developer machine receives a software component.
- the website developer machine belongs to a particular organization and the software component is received from a different organization (e.g., from software component library 130 , etc.).
- the software component is embedded in a user interface.
- the user interface may be a web page (e.g., a web page of an e-commerce company, a web page of a shopping search engine service, etc.), and the software component may be a Javascript widget, an ActiveX control, etc. that is embedded within the web page, while in some other implementations, the user interface may be part of an application that executes independent of a browser, and the software component may be a Javascript widget, a Java object, etc. that is embedded within the user interface (e.g., as source code, Java bytecode, object code, etc.).
- the user interface with embedded software component is downloaded by a client machine (e.g., via a smartphone whose user is browsing a web page [for example, a web page of an e-commerce company or of a shopping search engine service] via the World Wide Web, via a smartphone whose user has elected to download an application comprising the user interface [for example, a search engine application, an app provided by baseball team, an app provided by a retailer, etc.] from an “app store” or other site, etc.)
- the software component is executed by the client machine.
- the software component When the software component is embedded within a web page, the software component may be executed when the web page is rendered by a browser running on the client machine, while when the software component is embedded within a user interface (UI) of an application, the software component may be executed when the UI portion of the application code is run by the client machine.
- UI user interface
- FIG. 4 depicts a flow diagram of an example of some operations 400 of an embedded software component when executed by a client machine.
- the operations are performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both.
- the software component includes a playlist in the user interface (e.g., the illustrative user interface 500 with embedded playlist shown in FIG. 5 , etc.).
- the software component may create a playlist widget and add the widget within the markup language code of the user interface so that it is displayed in a particular area of the web page.
- the software component may instantiate a new playlist object and add the playlist object to the elements of the user interface.
- the playlist widget or object comprises a first area that presents a description of media content items (e.g., titles of the media content items and/or a thumbnail of a frame of a video clip item) and enables a user to select one of the media content items, and a second area in which a selected media content item is played.
- a description of media content items e.g., titles of the media content items and/or a thumbnail of a frame of a video clip item
- a second area in which a selected media content item is played.
- some other implementations may create a different type of widget or object, rather than a playlist (e.g., a widget or object in which media content items are described by an unordered set rather than an ordered list, etc.)
- the software component analyzes content in the user interface (e.g., text, button labels, metadata tags, etc.) and obtains one or more keywords based on the content.
- content in the user interface e.g., text, button labels, metadata tags, etc.
- keywords e.g., multi-word phrases (e.g., “Barack Obama,” “San Francisco Giants,” etc.) as well as single words.)
- the one or more keywords might include “Broan”, “Trash Compactor”, “Stainless Steel”, and so forth.
- the software component may analyze content in the user interface at runtime via a self-reflection mechanism provided by the object-oriented programming language.
- the software component transmits a request that specifies the keyword(s) obtained at block 402 and requests links to media content items relevant to the keyword(s).
- the request may also specify the current location of the client machine when allowed by the user (e.g., when the user responds affirmatively to a prompt from the operating system requesting permission for a website or application to use the current location, etc.).
- the request is transmitted to and handled by server machine 115 . A method for handling the request is described in detail below with respect to FIG. 6 .
- the software component receives links to media content items in response to the query transmitted at block 403 .
- the links received at block 404 may be ranked, while in some other implementations, the links may be returned as an unordered set.
- the software component may rank or re-rank the links based on one or more criteria such as current location, relevancy scores, the authors of the media content items, and so forth.
- the links are received from server machine 115 and point to media content items in media content item store 110 .
- the software component populates the playlist included in the UI at block 401 with the links to media content items received at block 404 .
- the software component may include a playlist in the user interface and populate the playlist at compile time (e.g., via modifying code or markup language before downloading and execution of the user interface, etc.), rather than dynamically at runtime, as in the method of FIG. 4 .
- FIG. 6 depicts a flow diagram of an example of a method 600 for processing a request for links to media content items that are relevant to one or more keywords.
- the method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both.
- the method is performed by the server machine 115 of FIG. 1 , while in some other implementations, one or more blocks of FIG. 6 may be performed by another machine.
- a request that specifies one or more keywords and that requests links to media content items related to the keyword(s) is received.
- the request is a web service invocation transmitted by the embedded software component via the hypertext transfer protocol (HTTP) to media content item manager 145 .
- HTTP hypertext transfer protocol
- a new set of one or more keywords is generated based on the keyword(s) received at block 601 .
- media content item manager 145 may consult a dictionary of standard keywords (not depicted in the Figures) and “translate” the keyword(s) received at block 601 , as necessary, in accordance with the dictionary.
- media content item manager 145 may also delete redundant keywords and include one or more additional related keywords to the new keyword set.
- a query specifying the new set of keywords and requesting links to media content items relevant to the keywords is submitted.
- the query is transmitted by media content item manager 145 to media content item store 110 .
- links to relevant media content items are received in response to the query of block 603 .
- media content item store 110 selects the relevant content items based on the new set of keyword(s), and returns the links to media content item manager 145 .
- the links may be ranked when returned by media content item store 110 , while in some other implementations, the links may be returned as an unordered set. In implementations where links are ranked, the ranking may be based on one or more criteria such as: a relevancy score for the keyword with respect to the media content item, the current location of the client machine submitting the request, the author of the media content item, and so forth.
- the links to the selected content items are transmitted to the sender of the request of block 601 .
- media content item manager 145 returns the links to embedded software component via one or more HTTP messages.
- media content item manager 145 may process the links before returning them to the embedded software component (e.g., limiting the number of links to a maximum, ranking or re-ranking the links according to various other criteria, etc.).
- FIG. 7 illustrates an exemplary computer system within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed.
- the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, or the Internet.
- the machine may operate in the capacity of a server machine in client-server network environment.
- the machine may be a personal computer (PC), a set-top box (STB), a server, a network router, switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine.
- PC personal computer
- STB set-top box
- server a server
- network router switch or bridge
- the exemplary computer system 700 includes a processing system (processor) 702 , a main memory 704 (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM)), a static memory 706 (e.g., flash memory, static random access memory (SRAM)), and a data storage device 716 , which communicate with each other via a bus 708 .
- processor processing system
- main memory 704 e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM)
- DRAM dynamic random access memory
- SDRAM synchronous DRAM
- static memory 706 e.g., flash memory, static random access memory (SRAM)
- SRAM static random access memory
- Processor 702 represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processor 702 may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets.
- the processor 702 may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like.
- the processor 702 is configured to execute instructions 726 for performing the operations and steps discussed herein.
- the computer system 700 may further include a network interface device 722 .
- the computer system 700 also may include a video display unit 710 (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device 712 (e.g., a keyboard), a cursor control device 714 (e.g., a mouse), and a signal generation device 720 (e.g., a speaker).
- a video display unit 710 e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)
- an alphanumeric input device 712 e.g., a keyboard
- a cursor control device 714 e.g., a mouse
- a signal generation device 720 e.g., a speaker
- the data storage device 716 may include a computer-readable medium 724 on which is stored one or more sets of instructions 726 (e.g., instructions executed by web page manager 225 , etc.) embodying any one or more of the methodologies or functions described herein. Instructions 726 may also reside, completely or at least partially, within the main memory 704 and/or within the processor 702 during execution thereof by the computer system 700 , the main memory 704 and the processor 702 also constituting computer-readable media. Instructions 726 may further be transmitted or received over a network via the network interface device 722 .
- instructions 726 e.g., instructions executed by web page manager 225 , etc.
- While the computer-readable storage medium 724 is shown in an exemplary embodiment to be a single medium, the term “computer-readable storage medium” should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions.
- the term “computer-readable storage medium” shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure.
- the term “computer-readable storage medium” shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.
Abstract
Description
- This continuation application claims priority to U.S. patent application Ser. No. 13/916,290, filed on Jun. 12, 2013, which is incorporated by reference in its entirety.
- Aspects and implementations of the present disclosure relate to data processing systems, and more specifically, to a software component that can be embedded in user interfaces.
- Users are increasingly researching products and services online prior to making a purchase. Such research may include consulting demonstration videos, text-based reviews, audio-based reviews, video-based reviews, retailer websites, shopping search engines, and so forth.
- The following presents a simplified summary of various aspects of this disclosure in order to provide a basic understanding of such aspects. This summary is not an extensive overview of all contemplated aspects, and is intended to neither identify key or critical elements nor delineate the scope of such aspects. Its purpose is to present some concepts of this disclosure in a simplified form as a prelude to the more detailed description that is presented later.
- In an aspect of the present disclosure, a first computer system that is associated with a first organization provides a software component to a second computer system that is associated with a second organization, where the software component, when embedded and executed within a user interface provided by the second organization, includes in the user interface a first link to a first media content item and a second link to a second media content item. In one implementation, the first media content item and the second media content item reside in a data store associated with the first organization, and the first media content item and the second media content item are selected from a plurality of media content items based on content in the user interface.
- Aspects and implementations of the present disclosure will be understood more fully from the detailed description given below and from the accompanying drawings of various aspects and implementations of the disclosure, which, however, should not be taken to limit the disclosure to the specific aspects or implementations, but are for explanation and understanding only.
-
FIG. 1 illustrates an exemplary system architecture, in accordance with one implementation of the present disclosure. -
FIG. 2 depicts a flow diagram of an example of a method for handling a request for a software component. -
FIG. 3 depicts a flow diagram of an example of a method by which a software component is embedded in a user interface that is downloaded and executed by a client machine. -
FIG. 4 depicts a flow diagram of an example of some operations of an embedded software component when executed by a client machine. -
FIG. 5 depicts an illustrative user interface with embedded playlist, in accordance with one implementation of the present disclosure. -
FIG. 6 depicts a flow diagram of an example of a method for processing a request for links to media content items that are relevant to one or more keywords. -
FIG. 7 depicts a block diagram of an illustrative computer system operating in accordance with aspects and implementations of the present disclosure. - When a user is contemplating purchasing a product or service (e.g., while browsing a retailer's website, while using an application [or “app”] created by the provider of the product or service, etc.), the user often visits other websites or switches among apps in order to research the product or service. Conducting research in this manner is particularly inconvenient on mobile devices (e.g., smartphones, etc.) because such devices typically have small screens and can only display a single website or app on the screen at a time. This inconvenience can discourage users of mobile devices from making purchases, and can result in lost sales of “impulse” and other types of purchases. For example, if a user is viewing a product listings page via a mobile web page or application to shop for an item, and the user wishes to check whether a video demonstration of the item exists, he or she might:
-
- open another web page (or launch another application) to input the item's name into a search engine (e.g., by typing, by copy/pasting, etc.) and filter the search results for videos; or
- launch another application (e.g., an application for searching and viewing videos in a repository) to search for such a video demonstration.
In either case, the user must switch between web pages or applications to find the video demonstration, an inconvenient proposition on a mobile device that may result in the user abandoning the research and purchase.
- Aspects and implementations are disclosed by which a first computer system that is associated with a first organization provides a software component (known as a “widget”) to a second computer system that is associated with a second organization, where the software component, when embedded and executed within a user interface provided by the second organization, includes in the user interface links to relevant media content items (e.g., video clips, audio clips, etc.) in a data store (e.g., a file server, a relational database, etc.) managed by the first organization. In some implementations, the software component may be embedded within a user interface of an application (or “app”) that is created by the second organization and is downloaded and run by a client (e.g., a smartphone, a laptop computer, etc.), while in some other implementations, the software component may be embedded within a web page that is created by the second organization and is downloaded by a client browser.
- Aspects and implementations of the present disclosure are thus capable of enabling a user who is browsing a retailer's mobile website, for example, on his or her smartphone, or who is using a retailer's mobile app running on the smartphone, to research a potential purchase without having to leave the current web page or suspend the current app. More particularly, a website developer who works for the retailer (i.e., the “second organization” referenced above) can obtain a software component from another organization (i.e., the “first organization” referenced above) and embed the software component in a user interface that is downloaded and run by a client (e.g., in a web page visited by a client browser, in an app downloaded and run by a client, etc.). In one implementation, the software component obtains one or more keywords based on content of the user interface (e.g., text, button labels, images, metadata tags, etc.) and transmits a query to the data store of the first organization, where the query specifies the keyword(s) and requests links to media content items in the data store that are relevant to the keyword(s). In response to the query, relevant media content items are selected from among the items stored in the data store based on the specified keyword(s) and links to the selected media content items are transmitted to the software component. The software component creates a playlist in the user interface, and then populates the playlist with the received links. As a result, a playlist of relevant videos (e.g., a product demonstration video, etc.) is available for the user to view in the current web page or application, without having to leave the web page or application and visit a new web page or launch another application, thereby improving the user experience.
-
FIG. 1 illustrates anexemplary system architecture 100, in accordance with one implementation of the present disclosure. Thesystem architecture 100 includes aserver machine 115, a mediacontent item store 110, asoftware component library 130, andwebsite developer machines 102A-102N connected to anetwork 104. Network 104 may be a public network (e.g., the Internet), a private network (e.g., a local area network (LAN) or wide area network (WAN)), or a combination thereof. -
Server machine 115 may be a rackmount server, a router computer, a personal computer, a portable digital assistant, a mobile phone, a laptop computer, a tablet computer, a camera, a video camera, a netbook, a desktop computer, a media center, or any combination of the above.Server machine 115 includes aweb server 140 and a mediacontent item manager 145. In alternative implementations, theweb server 140 and mediacontent item manager 145 may run on different machines (e.g., a plurality of servers that are part of a content hosting and sharing platform, etc.). - Media
content item store 110 is a persistent storage that is capable of storing media content items (e.g., video clips, audio clips, images, etc.), as well as data structures to tag, organize, and index the media content items, and of processing queries pertaining to the stored media content items. Mediacontent item store 110 may be hosted by one or more storage devices, such as main memory, magnetic or optical storage based disks, tapes or hard drives, NAS, SAN, and so forth. In some implementations, mediacontent item store 110 may be a network-attached file server, while in other embodiments mediacontent item store 110 may be some other type of persistent storage such as an object-oriented database, a relational database, and so forth, that may be hosted by theserver machine 115 or one or more different machines coupled to theserver machine 115 via thenetwork 104. The media content items stored in the mediacontent item store 110 may include end user content that is uploaded via user devices, as well as media content items uploaded by publishers, libraries, news services, and so forth. In one implementation, mediacontent item store 110 is maintained by the same organization (e.g., corporation, government agency, etc.) that maintainsserver machine 115. -
Software component library 130 is a persistent storage that is capable of storing software components (e.g., widgets that can be embedded in web pages, widgets that can embedded in user interfaces of applications, software objects [e.g., data structures, business objects, etc.] that can be used by applications written in an object-oriented programming language, etc.), as well as data structures to tag, organize, and index the software components. The software components may be provided by private software organizations, open-source software organizations, independent software developers, and so forth. -
Software component library 130 may be hosted by one or more storage devices, such as main memory, magnetic or optical storage based disks, tapes or hard drives, NAS, SAN, and so forth. In some implementations,software component library 130 may be a network-attached file server, while in other embodimentssoftware component library 130 may be some other type of persistent storage such as an object-oriented database, a relational database, and so forth, that may be hosted by theserver machine 115 or one or more different machines coupled to theserver machine 115 via thenetwork 104. In one implementation,software component library 130 is maintained by the same organization (e.g., corporation, government agency, etc.) that maintainsserver machine 115 and mediacontent item store 110. - In accordance with some implementations, media
content item manager 145 is capable of receiving requests (e.g., from software components, etc.) for links to items stored in mediacontent item store 110, and of providing such links in response to the requests. In one implementation, mediacontent item manager 145 may select particular items in mediacontent item store 110 based on one or more keywords specified by a request, and return links to these relevant content items to the sender of the request. In some aspects, mediacontent item manager 145 may also be capable of providing software components (e.g., fromsoftware component library 130, etc.) to developers (e.g., viaweb server 140, etc.). Some operations of mediacontent item manager 145 are described in detail below with respect toFIG. 2 andFIG. 6 . - In one example,
server machine 115, mediacontent item store 110, andsoftware component library 130 are associated with one particular organization (e.g., an organization that provides a content hosting and/or sharing platform). - The
website developer machines 102A-102N are personal computers (PC), laptops, tablet computers, smartphones, or any other computing or communication devices. In one example, each website developer machine 102 is associated with a human website developer who belongs to an organization that is different than the organization associated withserver machine 115, mediacontent item store 110, andsoftware component library 130. - The
website developer machines 102A-102N may run an operating system (OS) that manages hardware and software of thewebsite developer machines 102A-102N. A browser (not shown) may run on the website developer machines (e.g., on the OS of the website developer machines). The browser may be a web browser that can download and render web pages served by a web server (e.g.,web server 140 hosted byserver machine 115, etc.) and download items (e.g., images, software components [or “widgets”], etc.) embedded within or linked to by the web pages. -
FIG. 2 depicts a flow diagram of an example of amethod 200 for handling a request for a software component. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. In one implementation, the method is performed by theserver machine 115 ofFIG. 1 , while in some other implementations, one or more blocks ofFIG. 2 may be performed by another machine. - For simplicity of explanation, methods are depicted and described as a series of acts. However, acts in accordance with this disclosure can occur in various orders and/or concurrently, and with other acts not presented and described herein. Furthermore, not all illustrated acts may be required to implement the methods in accordance with the disclosed subject matter. In addition, those skilled in the art will understand and appreciate that the methods could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally, it should be appreciated that the methods disclosed in this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methods to computing devices. The term article of manufacture, as used herein, is intended to encompass a computer program accessible from any computer-readable device or storage media.
- At
block 201, a request is received for a software component. In one implementation, the request is received byweb server 140 from a website developer machine and may be generated in response to a website developer clicking on a particular link, button, etc. of a web page downloaded fromserver machine 115. The website developer may arrive at the web page via a search engine query, or via a link in an email received by the website developer, etc. - At
block 202, the requested software component is retrieved fromsoftware component library 130, and atblock 203, the software component is transmitted to the website developer machine. In one implementation, webcontent item manager 145 retrieves the software component and transmits the software component to the website developer machine via the File Transfer Protocol (FTP). It should be noted that in some other implementations, the software component may be obtained by a website developer in some other manner, rather than via downloading from a website (e.g., from a CD-ROM distribution provided to the website developer, etc.). -
FIG. 3 depicts a flow diagram of an example of amethod 300 by which a software component is embedded in a user interface that is downloaded and executed by a client machine. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. - At
block 301, a website developer machine (e.g., one ofmachines 102A through 102N ofFIG. 1 , etc.) receives a software component. In one implementation, the website developer machine belongs to a particular organization and the software component is received from a different organization (e.g., fromsoftware component library 130, etc.). - At
block 302, the software component is embedded in a user interface. In some implementations, the user interface may be a web page (e.g., a web page of an e-commerce company, a web page of a shopping search engine service, etc.), and the software component may be a Javascript widget, an ActiveX control, etc. that is embedded within the web page, while in some other implementations, the user interface may be part of an application that executes independent of a browser, and the software component may be a Javascript widget, a Java object, etc. that is embedded within the user interface (e.g., as source code, Java bytecode, object code, etc.). - At
block 303, the user interface with embedded software component is downloaded by a client machine (e.g., via a smartphone whose user is browsing a web page [for example, a web page of an e-commerce company or of a shopping search engine service] via the World Wide Web, via a smartphone whose user has elected to download an application comprising the user interface [for example, a search engine application, an app provided by baseball team, an app provided by a retailer, etc.] from an “app store” or other site, etc.) Atblock 304, the software component is executed by the client machine. When the software component is embedded within a web page, the software component may be executed when the web page is rendered by a browser running on the client machine, while when the software component is embedded within a user interface (UI) of an application, the software component may be executed when the UI portion of the application code is run by the client machine. -
FIG. 4 depicts a flow diagram of an example of someoperations 400 of an embedded software component when executed by a client machine. The operations are performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. - At
block 401, the software component includes a playlist in the user interface (e.g., theillustrative user interface 500 with embedded playlist shown inFIG. 5 , etc.). When the user interface is a web page, the software component may create a playlist widget and add the widget within the markup language code of the user interface so that it is displayed in a particular area of the web page. Alternatively, when the user interface is part of an application, the software component may instantiate a new playlist object and add the playlist object to the elements of the user interface. In one implementation, the playlist widget or object comprises a first area that presents a description of media content items (e.g., titles of the media content items and/or a thumbnail of a frame of a video clip item) and enables a user to select one of the media content items, and a second area in which a selected media content item is played. It should be noted that some other implementations may create a different type of widget or object, rather than a playlist (e.g., a widget or object in which media content items are described by an unordered set rather than an ordered list, etc.) - At
block 402, the software component analyzes content in the user interface (e.g., text, button labels, metadata tags, etc.) and obtains one or more keywords based on the content. (It should be noted that the term “keyword” is used in this disclosure to include multi-word phrases (e.g., “Barack Obama,” “San Francisco Giants,” etc.) as well as single words.) For example, inillustrative user interface 500 ofFIG. 5 , the one or more keywords might include “Broan”, “Trash Compactor”, “Stainless Steel”, and so forth. It should be noted that when the software component is an object in an object-oriented application, the software component may analyze content in the user interface at runtime via a self-reflection mechanism provided by the object-oriented programming language. Atblock 403, the software component transmits a request that specifies the keyword(s) obtained atblock 402 and requests links to media content items relevant to the keyword(s). In some implementations, the request may also specify the current location of the client machine when allowed by the user (e.g., when the user responds affirmatively to a prompt from the operating system requesting permission for a website or application to use the current location, etc.). In accordance with one aspect, the request is transmitted to and handled byserver machine 115. A method for handling the request is described in detail below with respect toFIG. 6 . - At
block 404, the software component receives links to media content items in response to the query transmitted atblock 403. In some implementations, the links received atblock 404 may be ranked, while in some other implementations, the links may be returned as an unordered set. In one aspect, the software component may rank or re-rank the links based on one or more criteria such as current location, relevancy scores, the authors of the media content items, and so forth. - In one embodiment, the links are received from
server machine 115 and point to media content items in mediacontent item store 110. Atblock 405, the software component populates the playlist included in the UI atblock 401 with the links to media content items received atblock 404. It should be noted that in some other embodiments, the software component may include a playlist in the user interface and populate the playlist at compile time (e.g., via modifying code or markup language before downloading and execution of the user interface, etc.), rather than dynamically at runtime, as in the method ofFIG. 4 . -
FIG. 6 depicts a flow diagram of an example of amethod 600 for processing a request for links to media content items that are relevant to one or more keywords. The method is performed by processing logic that may comprise hardware (circuitry, dedicated logic, etc.), software (such as is run on a general purpose computer system or a dedicated machine), or a combination of both. In one implementation, the method is performed by theserver machine 115 ofFIG. 1 , while in some other implementations, one or more blocks ofFIG. 6 may be performed by another machine. - At
block 601, a request that specifies one or more keywords and that requests links to media content items related to the keyword(s) is received. In one implementation, the request is a web service invocation transmitted by the embedded software component via the hypertext transfer protocol (HTTP) to mediacontent item manager 145. - At
block 602, a new set of one or more keywords is generated based on the keyword(s) received atblock 601. In one implementation, mediacontent item manager 145 may consult a dictionary of standard keywords (not depicted in the Figures) and “translate” the keyword(s) received atblock 601, as necessary, in accordance with the dictionary. In addition, mediacontent item manager 145 may also delete redundant keywords and include one or more additional related keywords to the new keyword set. - At
block 603, a query specifying the new set of keywords and requesting links to media content items relevant to the keywords is submitted. In one implementation, the query is transmitted by mediacontent item manager 145 to mediacontent item store 110. - At
block 604, links to relevant media content items are received in response to the query ofblock 603. In one implementation, mediacontent item store 110 selects the relevant content items based on the new set of keyword(s), and returns the links to mediacontent item manager 145. In some implementations, the links may be ranked when returned by mediacontent item store 110, while in some other implementations, the links may be returned as an unordered set. In implementations where links are ranked, the ranking may be based on one or more criteria such as: a relevancy score for the keyword with respect to the media content item, the current location of the client machine submitting the request, the author of the media content item, and so forth. - At
block 605, the links to the selected content items are transmitted to the sender of the request ofblock 601. In one implementation, mediacontent item manager 145 returns the links to embedded software component via one or more HTTP messages. In some implementations, mediacontent item manager 145 may process the links before returning them to the embedded software component (e.g., limiting the number of links to a maximum, ranking or re-ranking the links according to various other criteria, etc.). -
FIG. 7 illustrates an exemplary computer system within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative implementations, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, or the Internet. The machine may operate in the capacity of a server machine in client-server network environment. The machine may be a personal computer (PC), a set-top box (STB), a server, a network router, switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term “machine” shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein. - The
exemplary computer system 700 includes a processing system (processor) 702, a main memory 704 (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM)), a static memory 706 (e.g., flash memory, static random access memory (SRAM)), and adata storage device 716, which communicate with each other via a bus 708. -
Processor 702 represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, theprocessor 702 may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. Theprocessor 702 may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Theprocessor 702 is configured to executeinstructions 726 for performing the operations and steps discussed herein. - The
computer system 700 may further include anetwork interface device 722. Thecomputer system 700 also may include a video display unit 710 (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device 712 (e.g., a keyboard), a cursor control device 714 (e.g., a mouse), and a signal generation device 720 (e.g., a speaker). - The
data storage device 716 may include a computer-readable medium 724 on which is stored one or more sets of instructions 726 (e.g., instructions executed by web page manager 225, etc.) embodying any one or more of the methodologies or functions described herein.Instructions 726 may also reside, completely or at least partially, within themain memory 704 and/or within theprocessor 702 during execution thereof by thecomputer system 700, themain memory 704 and theprocessor 702 also constituting computer-readable media.Instructions 726 may further be transmitted or received over a network via thenetwork interface device 722. - While the computer-
readable storage medium 724 is shown in an exemplary embodiment to be a single medium, the term “computer-readable storage medium” should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term “computer-readable storage medium” shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term “computer-readable storage medium” shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media. - In the above description, numerous details are set forth. It will be apparent, however, to one of ordinary skill in the art having the benefit of this disclosure, that embodiments may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the description.
- Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.
- It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as “providing,” “including,” “populating,” “transmitting,” or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.
- Aspects and implementations of the disclosure also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.
- The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.
- It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Moreover, the techniques described above could be applied to other types of data instead of, or in addition to, media clips (e.g., images, audio clips, textual documents, web pages, etc.). The scope of the disclosure should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/798,271 US10567845B2 (en) | 2013-06-12 | 2017-10-30 | Embeddable media content search widget |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/916,290 US9805406B2 (en) | 2013-06-12 | 2013-06-12 | Embeddable media content search widget |
US15/798,271 US10567845B2 (en) | 2013-06-12 | 2017-10-30 | Embeddable media content search widget |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/916,290 Continuation-In-Part US9805406B2 (en) | 2013-06-12 | 2013-06-12 | Embeddable media content search widget |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180054652A1 true US20180054652A1 (en) | 2018-02-22 |
US10567845B2 US10567845B2 (en) | 2020-02-18 |
Family
ID=61192509
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/798,271 Active US10567845B2 (en) | 2013-06-12 | 2017-10-30 | Embeddable media content search widget |
Country Status (1)
Country | Link |
---|---|
US (1) | US10567845B2 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180341716A1 (en) * | 2017-05-26 | 2018-11-29 | Microsoft Technology Licensing, Llc | Suggested content generation |
US20220318306A1 (en) * | 2019-12-25 | 2022-10-06 | Beijing Bytedance Network Technology Co., Ltd. | Video-based interaction implementation method and apparatus, device and medium |
Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080154889A1 (en) * | 2006-12-22 | 2008-06-26 | Pfeiffer Silvia | Video searching engine and methods |
US20080319839A1 (en) * | 2007-06-20 | 2008-12-25 | Hugo Olliphant | Dynamically creating a context based advertisement |
US20090024927A1 (en) * | 2007-07-18 | 2009-01-22 | Jasson Schrock | Embedded Video Playlists |
US20090259927A1 (en) * | 2008-04-11 | 2009-10-15 | Quigo Technologies, Inc. | Systems and methods for video content association |
US20100017289A1 (en) * | 2008-07-15 | 2010-01-21 | Adam Sah | Geographic and Keyword Context in Embedded Applications |
US20100070862A1 (en) * | 2008-09-09 | 2010-03-18 | Ilike, Inc. | In-page embeddable platform for media selection and playlist creation |
US20100114722A1 (en) * | 2007-05-09 | 2010-05-06 | Comsquare Co., Ltd. | Advertisement information managing method, advertisement information managing system, call receiving method and call receiving system |
US20110161181A1 (en) * | 2009-07-31 | 2011-06-30 | Vodafone Group Plc | Management of advertisements |
US20110213655A1 (en) * | 2009-01-24 | 2011-09-01 | Kontera Technologies, Inc. | Hybrid contextual advertising and related content analysis and display techniques |
US20110231265A1 (en) * | 2006-07-21 | 2011-09-22 | Say Media, Inc. | Non-expanding interactive advertisement |
US20110320429A1 (en) * | 2010-06-29 | 2011-12-29 | Toby Doig | Systems and methods for augmenting a keyword of a web page with video content |
US20130066719A1 (en) * | 2009-06-03 | 2013-03-14 | Digg, Inc. | Determining advertisement preferences |
US20130276021A1 (en) * | 2011-06-03 | 2013-10-17 | Limelight Networks, inc | Embedded video player with modular ad processing |
US20130332262A1 (en) * | 2012-06-11 | 2013-12-12 | John Hunt | Internet marketing-advertising reporting (iMar) system |
US20140074629A1 (en) * | 2011-03-29 | 2014-03-13 | Yogesh Chunilal Rathod | Method and system for customized, contextual, dynamic & unified communication, zero click advertisement, dynamic e-commerce and prospective customers search engine |
US20140129942A1 (en) * | 2011-05-03 | 2014-05-08 | Yogesh Chunilal Rathod | System and method for dynamically providing visual action or activity news feed |
US20140143043A1 (en) * | 2012-11-21 | 2014-05-22 | General Instrument Corporation | Multi-screen advertisement correlation based on purchases |
US20140316913A1 (en) * | 2012-01-06 | 2014-10-23 | Tencent Technology (Shenzhen) Company Limited | Method and client for displaying advertisements |
US20150154650A1 (en) * | 2012-03-26 | 2015-06-04 | Denoo Inc. | Systems And Methods For Implementing An Advertisement Platform With Novel Cost Models |
US9204205B1 (en) * | 2013-05-31 | 2015-12-01 | Intuit Inc. | Viewing advertisements using an advertisement queue |
US20170052953A1 (en) * | 2011-12-15 | 2017-02-23 | Excalibur Ip, Llc | Systems and methods involving features of search and/or search integration |
US20170053029A1 (en) * | 2011-12-15 | 2017-02-23 | Yahoo! Inc. | Systems and methods involving features of search and/or search integration |
Family Cites Families (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010042107A1 (en) | 2000-01-06 | 2001-11-15 | Palm Stephen R. | Networked audio player transport protocol and architecture |
JP4417357B2 (en) | 2006-08-07 | 2010-02-17 | バリューコマース株式会社 | Method and apparatus for acquiring an advertiser's RSS feed and distributing it as a banner advertisement in an affiliate system |
US7565332B2 (en) | 2006-10-23 | 2009-07-21 | Chipin Inc. | Method and system for providing a widget usable in affiliate marketing |
US8260687B2 (en) | 2007-04-16 | 2012-09-04 | Ebay Inc. | Distributed commerce application-widget |
US9224149B2 (en) | 2007-10-15 | 2015-12-29 | Google Inc. | External referencing by portable program modules |
WO2009086014A1 (en) | 2007-12-28 | 2009-07-09 | Amazon Technologies, Inc. | Widget-assisted detection and exposure of behavioral associations |
JP5238418B2 (en) | 2008-09-09 | 2013-07-17 | 株式会社東芝 | Information recommendation device and information recommendation method |
US8352913B2 (en) | 2009-08-07 | 2013-01-08 | Adobe Systems Incorporated | Generating and resolving component names in an integrated development environment |
US9721035B2 (en) | 2010-06-30 | 2017-08-01 | Leaf Group Ltd. | Systems and methods for recommended content platform |
US20140298184A1 (en) | 2013-03-26 | 2014-10-02 | Larry Bailin | Computer-implemented system and method for integrating and managing product specific data |
-
2017
- 2017-10-30 US US15/798,271 patent/US10567845B2/en active Active
Patent Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110231265A1 (en) * | 2006-07-21 | 2011-09-22 | Say Media, Inc. | Non-expanding interactive advertisement |
US20080154889A1 (en) * | 2006-12-22 | 2008-06-26 | Pfeiffer Silvia | Video searching engine and methods |
US20100114722A1 (en) * | 2007-05-09 | 2010-05-06 | Comsquare Co., Ltd. | Advertisement information managing method, advertisement information managing system, call receiving method and call receiving system |
US20080319839A1 (en) * | 2007-06-20 | 2008-12-25 | Hugo Olliphant | Dynamically creating a context based advertisement |
US20090024927A1 (en) * | 2007-07-18 | 2009-01-22 | Jasson Schrock | Embedded Video Playlists |
US20090259927A1 (en) * | 2008-04-11 | 2009-10-15 | Quigo Technologies, Inc. | Systems and methods for video content association |
US20100017289A1 (en) * | 2008-07-15 | 2010-01-21 | Adam Sah | Geographic and Keyword Context in Embedded Applications |
US20100070862A1 (en) * | 2008-09-09 | 2010-03-18 | Ilike, Inc. | In-page embeddable platform for media selection and playlist creation |
US20110213655A1 (en) * | 2009-01-24 | 2011-09-01 | Kontera Technologies, Inc. | Hybrid contextual advertising and related content analysis and display techniques |
US20130066719A1 (en) * | 2009-06-03 | 2013-03-14 | Digg, Inc. | Determining advertisement preferences |
US20110161181A1 (en) * | 2009-07-31 | 2011-06-30 | Vodafone Group Plc | Management of advertisements |
US20110320429A1 (en) * | 2010-06-29 | 2011-12-29 | Toby Doig | Systems and methods for augmenting a keyword of a web page with video content |
US20140074629A1 (en) * | 2011-03-29 | 2014-03-13 | Yogesh Chunilal Rathod | Method and system for customized, contextual, dynamic & unified communication, zero click advertisement, dynamic e-commerce and prospective customers search engine |
US20140129942A1 (en) * | 2011-05-03 | 2014-05-08 | Yogesh Chunilal Rathod | System and method for dynamically providing visual action or activity news feed |
US20130276021A1 (en) * | 2011-06-03 | 2013-10-17 | Limelight Networks, inc | Embedded video player with modular ad processing |
US20170052953A1 (en) * | 2011-12-15 | 2017-02-23 | Excalibur Ip, Llc | Systems and methods involving features of search and/or search integration |
US20170053029A1 (en) * | 2011-12-15 | 2017-02-23 | Yahoo! Inc. | Systems and methods involving features of search and/or search integration |
US20140316913A1 (en) * | 2012-01-06 | 2014-10-23 | Tencent Technology (Shenzhen) Company Limited | Method and client for displaying advertisements |
US20150154650A1 (en) * | 2012-03-26 | 2015-06-04 | Denoo Inc. | Systems And Methods For Implementing An Advertisement Platform With Novel Cost Models |
US20130332262A1 (en) * | 2012-06-11 | 2013-12-12 | John Hunt | Internet marketing-advertising reporting (iMar) system |
US20140143043A1 (en) * | 2012-11-21 | 2014-05-22 | General Instrument Corporation | Multi-screen advertisement correlation based on purchases |
US9204205B1 (en) * | 2013-05-31 | 2015-12-01 | Intuit Inc. | Viewing advertisements using an advertisement queue |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180341716A1 (en) * | 2017-05-26 | 2018-11-29 | Microsoft Technology Licensing, Llc | Suggested content generation |
US20220318306A1 (en) * | 2019-12-25 | 2022-10-06 | Beijing Bytedance Network Technology Co., Ltd. | Video-based interaction implementation method and apparatus, device and medium |
Also Published As
Publication number | Publication date |
---|---|
US10567845B2 (en) | 2020-02-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9652550B2 (en) | Indexing application pages of native applications | |
US10394949B2 (en) | Deconstructing documents into component blocks for reuse in productivity applications | |
US10339172B2 (en) | System and methods thereof for enhancing a user's search experience | |
CN105283843B (en) | Embeddable media content search widget | |
US9547721B2 (en) | Native application search results | |
US9519703B2 (en) | Refining search results for a compound search query | |
US9892096B2 (en) | Contextual hyperlink insertion | |
US8626757B1 (en) | Systems and methods for detecting network resource interaction and improved search result reporting | |
US10496686B2 (en) | Method and system for searching and identifying content items in response to a search query using a matched keyword whitelist | |
US9767203B2 (en) | Searching content based on transferrable user search contexts | |
US9760557B2 (en) | Tagging autofill field entries | |
RU2693193C1 (en) | Automated extraction of information | |
US10567845B2 (en) | Embeddable media content search widget | |
US11055365B2 (en) | Mechanism for web crawling e-commerce resource pages | |
US9098228B2 (en) | Determining content rendering capabilities for web browser optimization |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:JAINI, SHIVA;REEL/FRAME:043986/0356Effective date: 20130611 |
|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:045624/0204Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |