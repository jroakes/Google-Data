US9760619B1 - Generating weighted clustering coefficients for a social network graph - Google Patents
Generating weighted clustering coefficients for a social network graph Download PDFInfo
- Publication number
- US9760619B1 US9760619B1 US14/279,200 US201414279200A US9760619B1 US 9760619 B1 US9760619 B1 US 9760619B1 US 201414279200 A US201414279200 A US 201414279200A US 9760619 B1 US9760619 B1 US 9760619B1
- Authority
- US
- United States
- Prior art keywords
- node
- probability
- nodes
- neighbors
- triangle
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
- G06F16/285—Clustering or classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G06F17/30598—
-
- G06F17/30958—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q50/00—Systems or methods specially adapted for specific business sectors, e.g. utilities or tourism
- G06Q50/01—Social networking
Definitions
- the specification relates to assessing the quality of nodes in a social network. More specifically, the specification relates to generating weighted clustering coefficients for a social network graph to quantify how tightly interconnected a community is around a node.
- nodes may be tightly associated with other nodes or groups of nodes. For example, a rock star is followed by lots of fans or a popular school teacher is surrounded by students and parents on a social network.
- a clustering coefficient has been extensively used to measure the degree to which nodes in a social network cluster together.
- computing the clustering coefficient can be challenging. The computation of the clustering coefficient requires counting the number of triangles in a social network, which can be hard to implement on a large-scale social network graph.
- a systematic study of the clustering coefficient of weighted networks has not yet been undertaken. Current approaches mainly compute the clustering coefficient of an unweighted network, and therefore neglect the intensity of the interaction between nodes that is usually represented with weights on edges of the social network graph and that measures the statistical cohesiveness of the social network.
- a system for generating weighted clustering coefficients for a social network graph includes a processor and a memory storing instructions that, when executed, cause the system to: receive social graph data associated with a social network, the social graph data including nodes, edges that connect the nodes and weights associated with the edges in a social graph, determine a first probability of existence of an edge in the social graph based on the weights, determine a second probability that a first node forms a triangle with two neighbor nodes and compute a weighted clustering coefficient for the first node based on the first and second probabilities.
- another innovative aspect of the subject matter described in this disclosure may be embodied in methods that include: receiving social graph data associated with a social network, the social graph data including nodes, edges that connect the nodes and weights associated with the edges in a social graph, determining a first probability of existence of an edge in the social graph based on the weights, determining a second probability that a first node forms a triangle with two neighbor nodes and computing a weighted clustering coefficient for the first node based on the first and second probabilities.
- the operations include: identifying s sets of neighbors for the first node; selecting a second node and a third node randomly from the s sets of neighbors, and wherein determining the second probability that the first node forms the triangle with the two neighbor nodes comprises determining the second probability that the first node, the second node and the third node form the triangle in the social graph; normalizing the weights based on a nonlinear mapping function, and wherein determining the first probability of existence of the edge in the social graph is based on the normalized weights; comparing the weighted clustering coefficient with a threshold clustering coefficient; determining whether to mark the first node as spam based on the comparison and generating a list of spam nodes for a user; and determining whether to suggest the first node to a user based on the comparison and suggesting the first node to the user responsive to a positive determination.
- the features include: selecting the second node and the third node randomly from
- the disclosure may be particularly advantageous in providing an optimized and scalable approach to compute a weighted clustering coefficient and to measure the quality of nodes in a social network.
- the disclosure introduces a new definition for the weighted clustering coefficient that can be computed in polynomial time, and therefore overcomes the computational bottleneck.
- the disclosure computes the weighted clustering coefficient based on the observation that connections with large weights are more likely to play a role in a social network. If the weight associated with a connection between a first user and a second user increases, e.g., the relationship between the first and second users is updated from acquaintance to good friend, then the probability of determining that the first and second users are high quality users increases.
- FIG. 1 is a block diagram illustrating an example of a system for generating weighted clustering coefficients for a social network graph.
- FIG. 2 is a block diagram illustrating an example of a measurement application.
- FIG. 3 is a flow diagram of an example method for generating weighted clustering coefficients for a social network graph.
- FIG. 4 is a flow diagram of another example method for generating weighted clustering coefficients for a social network graph.
- FIG. 5 is a flow diagram of an example method for applying weighted clustering coefficients in detecting spam nodes or suggesting connections to users.
- FIG. 6A is an example graph including social graph data associated with at least one node in a social network.
- FIG. 6B is an example graphic representation of a user interface for displaying a suggested user.
- FIGS. 7A-7G are experimental results of a sampling algorithm for computing weighted clustering coefficient.
- FIG. 1 illustrates a block diagram of a system 100 for generating weighted clustering coefficients for a social network graph.
- the illustrated description of the system 100 includes user devices 115 a . . . 115 n that are accessed by users 125 a . . . 125 n and a server 101 .
- these entities of the system 100 are communicatively coupled via a network 105 .
- a letter after a reference number for example “ 115 a ” is a reference to the element having that particular reference number.
- a reference number in the text without a following letter, for example “ 115 ,” is a general reference to any or all instances of the element bearing that reference number.
- the network 105 can be a conventional type network, wired or wireless, and may have any number of configurations for example a star configuration, token ring configuration or other configurations known to those skilled in the art. Furthermore, the network 105 may comprise a local area network (LAN), a wide area network (WAN) (e.g., the Internet), and/or any other interconnected data path across which multiple devices may communicate. In some embodiments, the network 105 may be a peer-to-peer network. The network 105 may also be coupled to or includes portions of a telecommunications network for sending data in a variety of different communication protocols.
- the network 105 includes Bluetooth communication networks or a cellular communications network for sending and receiving data for example via SMS/MMS, hypertext transfer protocol (HTTP), direct data connection, WAP, e-mail, etc. While only one network 105 is illustrated, in practice, one or more networks 105 may be coupled to the above-mentioned entities.
- SMS/MMS SMS/MMS
- HTTP hypertext transfer protocol
- WAP direct data connection
- e-mail e-mail
- the server 101 can be a hardware server that includes a processor, a memory and network communication capabilities.
- the server 101 is communicatively coupled to the network 105 via signal line 102 .
- the server 101 sends and receives data to and from one or more of the user devices 115 a , 115 n via the network 105 .
- the server 101 comprises a measurement application 103 a that generates weighted clustering coefficients for a social network graph. While FIG. 1 illustrates one server 101 , the system 100 may include one or more servers 101 .
- the user devices 115 a , 115 n in FIG. 1 are used by way of example. Although only two user devices 115 are illustrated, the disclosure applies to a system architecture having any number of user devices 115 available to any number of users 125 .
- the user 125 a interacts with the user device 115 a .
- the measurement application 103 b can be stored on the user device 115 a which is communicatively coupled to the network 105 via signal line 108 .
- the measurement application 103 can be split into some components that are stored on the server 101 and some components that are stored on the user device 115 a.
- the user device 115 can be any computing device that includes a memory and a processor.
- the user devices 115 can be a laptop computer, a desktop computer, a tablet computer, a mobile telephone, a personal digital assistant, a mobile email device, a portable game player, a portable music player, a television with one or more processors embedded therein or coupled thereto, or any other electronic device capable of accessing the network 105 , etc.
- the user device 115 can include a mobile device that is worn by the user 125 .
- the user device 115 is included as part of a clip (e.g., a wristband), as part of a jewelry or as part of a pair of glasses.
- the user device 115 can be a smart watch.
- the user 125 can view notifications or suggestions from the measurement application 103 on a display of the device worn by the user 125 .
- the user 125 can view the notifications on a display of a smart watch or a smart wristband.
- the user 125 can view the notifications on an optical head-mounted display of a pair of glasses.
- the measurement application 103 can be software including routines for generating weighted clustering coefficients for a social network graph.
- the measurement application 103 can be implemented using hardware including a field-programmable gate array (FPGA) or an application-specific integrated circuit (ASIC).
- the measurement application 103 can be implemented using a combination of hardware and software.
- the measurement application 103 may be stored in a combination of the devices and servers, or in one of the devices or servers. The measurement application 103 is described in further detail below with reference to FIG. 2 .
- the measurement application 103 measures how tightly interconnected a community is around a node in a social network based on the observation that connections with large weights are more likely to play a role in the social network. If a first user connects 100 users in the social network with most of the connections being high-weight relationships (e.g., good friends) and a second user also connects 100 users in the social network with most of the connections being low-weight relationships (e.g., acquaintances), the measurement application 103 may determine that the first user is a higher quality user than the second user based on the weights associated with the first and second users.
- high-weight relationships e.g., good friends
- a second user also connects 100 users in the social network with most of the connections being low-weight relationships
- the measurement application 103 provides a highly optimized and scalable algorithm for approximating the weighted clustering coefficient at each node of a social graph.
- the measurement application 103 sends a number of messages across processors limited by the number of nodes times the number of samples required.
- the load for each processors is limited by the number of samples used by the algorithm times the maximum degree of a node in the social graph.
- the sampling algorithm performed by the measurement application 103 converges with few hundred samples. However, the computation of other approaches may require super linear time.
- the server 101 includes multiple processors. In other embodiments, multiple servers 101 apply the sampling algorithm.
- FIG. 2 is a block diagram of a computing device 200 that includes the measurement application 103 , a processor 235 , a memory 237 , a communication unit 241 and a storage 243 according to some examples.
- the components of the computing device 200 are communicatively coupled by a bus 220 .
- the computing device 200 can be one of a user device 115 and a server 101 .
- the processor 235 includes an arithmetic logic unit, a microprocessor, a general-purpose controller or some other processor array to perform computations and provide electronic display signals to a display device.
- the processor 235 is coupled to the bus 220 via signal line 236 for communication with the other components.
- Processor 235 may process data signals and may comprise various computing architectures including a complex instruction set computer (CISC) architecture, a reduced instruction set computer (RISC) architecture, or an architecture implementing a combination of instruction sets. Although only a single processor is shown in FIG. 2 , multiple processors 235 may be included.
- the processing capability may be limited to supporting the display of images and the capture and transmission of images. The processing capability might be enough to perform more complex tasks, including various types of feature extraction and sampling. In practice, other processors, operating systems, sensors, displays and physical configurations are possible.
- the memory 237 stores instructions and/or data that may be executed by processor 235 .
- the memory 237 is coupled to the bus 220 via signal line 238 for communication with the other components.
- the instructions and/or data may include code for performing any and/or all of the techniques described herein.
- the memory 237 may be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory or some other memory device known in the art.
- DRAM dynamic random access memory
- SRAM static random access memory
- flash memory or some other memory device known in the art.
- the memory 237 also includes a non-volatile memory or similar permanent storage device and media for example a hard disk drive, a CD-ROM device, a DVD-ROM device, a DVD-RAM device, a DVD-RW device, a flash memory device, or some other mass storage device known in the art for storing information on a more permanent basis.
- a non-volatile memory or similar permanent storage device and media for example a hard disk drive, a CD-ROM device, a DVD-ROM device, a DVD-RAM device, a DVD-RW device, a flash memory device, or some other mass storage device known in the art for storing information on a more permanent basis.
- the communication unit 241 transmits and receives data to and from at least one of the user device 115 and the server 101 depending upon where the measurement application 103 is stored.
- the communication unit 241 is coupled to the bus 220 via signal line 242 .
- the communication unit 241 includes a port for direct physical connection to the network 105 or to another communication channel.
- the communication unit 241 includes a USB, SD, CAT-5 or similar port for wired communication with the user device 115 .
- the communication unit 241 includes a wireless transceiver for exchanging data with the user device 115 or any other communication channel using one or more wireless communication methods, such as IEEE 802.11, IEEE 802.16, BLUETOOTH®, or another suitable wireless communication method.
- the communication unit 241 includes a cellular communications transceiver for sending and receiving data over a cellular communications network such as via short messaging service (SMS), multimedia messaging service (MMS), hypertext transfer protocol (HTTP), direct data connection, WAP, e-mail or another suitable type of electronic communication.
- SMS short messaging service
- MMS multimedia messaging service
- HTTP hypertext transfer protocol
- WAP direct data connection
- e-mail e-mail
- the communication unit 241 includes a wired port and a wireless transceiver.
- the communication unit 241 also provides other conventional connections to the network for distribution of files and/or media objects using standard network protocols such as TCP/IP, HTTP, HTTPS, and SMTP, as will be understood to those skilled in the art.
- the storage 243 can be a non-transitory memory that temporarily stores data used by the measurement application 103 , for example, a cache.
- the storage 243 may be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory or some other memory device known in the art.
- the storage 243 also includes a non-volatile memory or similar permanent storage device and media such as a hard disk drive, a CD-ROM device, a DVD-ROM device, a DVD-RAM device, a DVD-RW device, a flash memory device, or some other mass storage device known in the art for storing information on a more permanent basis.
- the storage 243 is communicatively coupled by the bus 220 for communication with the other components of the computing device 200 via signal line 240 . Although a single storage 243 is shown in FIG. 2 , multiple storage devices 243 may be included.
- the storage 243 stores one or more of social graph data, probabilities, clustering coefficients, information associated with a social network, etc.
- the data stored in the storage 243 is described below in more detail.
- the storage 243 may store other data for providing the functionality described herein.
- the measurement application 103 includes a processing unit 201 , a social network engine 203 , a normalization module 205 , a triangle counter 207 , an aggregator 209 , a user interface engine 211 , and an experiment module 213 .
- the processing unit 201 can be software including routines for handling communications between the measurement application 103 and other components of the computing device 200 .
- the processing unit 201 can be a set of instructions executable by the processor 235 to provide the functionality described below for handling communications.
- the processing unit 201 can be stored in the memory 237 of the computing device 200 and can be accessible and executable by the processor 235 .
- the processing unit 201 may be adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 222 .
- the processing unit 201 sends and receives data, via the communication unit 241 , to and from one or more of a server 101 and a user device 115 .
- the processing unit 201 receives, via the communication unit 241 , a request for detecting spam nodes from a user device 115 and sends the request to other components of the measurement application 103 for further processing.
- the processing unit 201 receives graphical data for providing a user interface to a user from the user interface module 211 and sends the graphical data to a user device 115 , causing the user device 115 to present the user interface to the user.
- the processing unit 201 receives data from components of the measurement application 103 and stores the data in the storage 243 .
- the processing unit 201 receives social graph data including nodes, edges that connect the nodes and weights of the edges from the social network engine 203 , and stores the data in the storage 243 .
- the processing unit 201 retrieves data from the storage 243 and sends the data to components of the measurement application 103 .
- the processing unit 201 retrieves data describing a probability that a node forms a triangle with two neighbor nodes, and sends the data to the aggregator 209 .
- the social network engine 203 can be software including routines for generating and managing a social network.
- the social network engine 203 can be a set of instructions executable by the processor 235 to provide the functionality described below for generating and managing the social network.
- the social network engine 203 can be stored in the memory 237 of the server 101 and can be accessible and executable by the processor 235 .
- the social network engine 203 can be adapted for cooperation and communication with the processor 235 and other components of the server 101 via signal line 224 . Persons of ordinary skill in the art will recognize that the social network engine 203 could receive information about social networks that are managed on a separate server.
- the social network engine 203 manages registration of users and creation of a user profile.
- the user profile associated with a user can include user demographics (e.g., age, location), user interests (e.g., soccer, reading, food), user activities (e.g., search history, indications of approval, posts, comments, multi-player online gaming), work information (e.g., a doctor, an engineer), education (e.g., law, business), etc.
- the social network engine 203 also manages the association of different actions with the user profile including the publication of posts (e.g., text, links or media) to a selected audience, the publication of comments, indications of acknowledgement (e.g., approval, disapproval, thumbs up, thumbs down, like, dislike. etc.), uploading of media (e.g., photos, videos, etc.), check-ins to different locations, and other actions associated with a social network.
- posts e.g., text, links or media
- indications of acknowledgement e.g.,
- the social network engine 203 creates a social graph and an interest graph that are stored in the storage 243 .
- the social graph includes the relationship between people in a social network and the interest graph that includes interests associated with the users. For example, when a first user follows a second user, the relationship is a first-degree relationship. If the second user follows a third user that the first user does not follow, the first user has a second-degree relationship with the third user. This relationship can also be described in terms of social affinity. The first user has a closer social affinity to the second user than the third user.
- the relationship can further be described as single-directional or bi-directional. For example, if user A chooses to follow updates posted by user B, a single-directional relationship is established. If user B also chooses to follow user A, the relationship is bi-directional.
- the social network engine 203 reflects a mapping of users and how they connect in a social network with an undirected graph.
- the undirected graph comprises social graph data.
- the social graph data includes nodes, edges and weights.
- a node represents a user or other entity (e.g., a host, a company) in a social network.
- An edge represents a connection between two nodes.
- An edge has no orientation in the undirected graph.
- a weight associated with an edge measures how close (e.g., the social affinity) is between two nodes.
- the social network engine 203 represents the weight with a positive number to exhibit a varying degree of intensity and heterogeneity in the connections between nodes.
- the social network engine 203 determines a weight based on interactions between nodes, e.g., the number of messages exchanged between two users, the number of links between two hosts, etc. For example, the social network engine 203 generates a large weight associated with an edge between two users that frequently interact with each other. In other embodiments, the social network engine 203 determines a weight based on determining whether the relationship between two users is uni-directional or bi-directional. For example, the social network engine 203 determines a smaller weight for an edge representing a uni-directional relationship than for an edge representing a bi-directional relationship.
- the social network engine 203 manages the social network by updating the social graph.
- the social network engine 203 updates the weights associated with edges. For example, if a first user removes a second user from a group or stops being friends with the second user, the social network engine 203 reduces the weight of the edge connecting the first and second users (or removed the edge if the relationship was uni-directional) to reflect the relationship change.
- the social network engine 203 transmits the data (e.g., social graph data, user activity data, user profiles, etc.) to the normalization module 205 and the triangle counter 207 for processing and organizing with other data sources. In other embodiments, the social network engine 203 also stores the data on the storage 243 .
- the data e.g., social graph data, user activity data, user profiles, etc.
- the social network engine 203 also stores the data on the storage 243 .
- the normalization module 205 can be software including routines for normalizing a weight associated with an edge and determining a first probability of existence of the edge in the social graph based on the normalized weight.
- the normalization module 205 can be a set of instructions executable by the processor 235 to provide the functionality described below for normalizing a weight associated with an edge and determining a first probability of existence of the edge in the social graph based on the normalized weight.
- the normalization module 205 can be stored in the memory 237 of the computing device 200 and can be accessible and executable by the processor 235 .
- the normalization module 205 may be adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 226 .
- the aggregator 209 generates clustering coefficients to quantify how tightly interconnected a community is around a node where the community could be nodes or a group of nodes.
- the aggregator 209 focuses on two aspects when generating clustering coefficients.
- One focus is that the measurement application 103 computes weighted clustering coefficients. Since weights on edges are used to measure the number of messages exchanged between friends or the number of links between hosts in a social network, the statistical level of cohesiveness in the social network that is measured from a clustering coefficient should in principle also depend on the weights of the edges.
- the normalization module 205 determines a first probability of existence of an edge in the social graph based on normalizing the weight associated with the edge. Another focus of the technology is to overcome computational bottleneck.
- the problem of computing the weighted clustering coefficient is closely related to the problem of counting the number of triangles in a social graph. This is computationally expensive even on social graphs of moderate size because of the time complexity needed to enumerate all the length-two paths of the social graph.
- the triangle counter 207 provides a highly optimized and scalable implementation for counting the number of triangles in the social graph. In some embodiments, the triangle counter 207 determines a second probability that a first node forms a triangle with two neighbor nodes.
- the normalization module 205 determines a first probability of an edge depending on the weight of the edge received from the social network engine 203 .
- the weight associated with an edge is a positive number that may be outside the range [0, 1].
- the normalization module 205 determines a mapping function, normalizes the weight of an edge to the range [0, 1] using the mapping function and determines a first probability of existence of the edge based on the normalized weight.
- the normalization module 205 first determines whether to select a linear mapping function or a non-linear mapping function.
- the normalization module 205 receives social graph data including weights w(e) associated with edges e in the social graph from the social network engine 203 , and identifies the maximum weight W (also denoted as “e W ”) and the minimum weight w (also denoted as “e w ”) from w(e).
- the variables W and w will be interchangeable with the variables e W and e w , respectively. If the mapping function is linear, the normalization module 205 would linearly map [e w , e W ] to [0, 1]. However, this mapping may have serious drawbacks.
- the proportion e w /e W can be very small.
- the normalization module 205 determines that the proportion e w /e W is 1/2579857.
- normalizing the weights using the linear mapping would lead the first probability determined based on the normalized weight to be very small, which in turn would result in an extremely small second probability for each triangle determined by the triangle counter 207 in the social graph.
- the normalization module 205 determines to select which non-linear function to normalize the weights.
- the normalization module 205 uses a logarithmic dependence between probability and weight to allow better control of the scale of variation of the parameters (e.g., e w , e W ).
- a classical example of logarithmic function is
- the normalization module 205 interprets the normalized weights as first probabilities of the existence of the edges. For example, the normalization module 205 determines that an edge e appears independently with a first probability p(e), where
- the normalization module 205 determines a higher first probability of the existence of an edge as the weight associated with the edge is larger. The normalization module 205 determines that the first probability equals one for the edge with the maximum weight and determines that the first probability equals zero for the edge with the minimum weight. In some embodiments, the normalization module 205 determines the first probability of existence associated with a set of edges (e.g., two or more edges) based on the weights.
- the normalization module 205 stores the first probability associated with an edge on the storage 243 . In other embodiments, the normalization module 205 sends the first probability to the aggregator 209 .
- the triangle counter 207 can be software including routines for determining a second probability that a first node forms a triangle with two neighbor nodes.
- the triangle counter 207 can be a set of instructions executable by the processor 235 to provide the functionality described below for determining a second probability that a first node forms a triangle with two neighbor nodes.
- the triangle counter 207 can be stored in the memory 237 of the computing device 200 and can be accessible and executable by the processor 235 .
- the triangle counter 207 may be adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 228 .
- a clustering coefficient quantifies how tightly interconnected a community is around a node where the community includes other nodes or a group of nodes.
- the clustering coefficient is based on triplets of the node.
- a triplet includes three nodes that are connected by either two edges (e.g., open triplet) or three edges (e.g., closed triplet).
- a closed triplet is a triangle.
- the triangle counter 207 counts the number of triangles associated with a first node and determines a second probability that the first node forms a triangle with two randomly selected neighbor nodes.
- a traditional unweighted clustering coefficient may be based only on this number. However, a weighted clustering coefficient is not only based on this number or the second probability but also based on the first probability determined by the normalization module 205 .
- a first node has three neighbor nodes. Each node represents a user in a social network. If the first node and the three neighbor nodes connect with each other, the triangle counter 207 determines that the four nodes form six triangles, i.e., the maximum number of triangles that four nodes can possibly form.
- the maximum number of triangles means that the four users associated with the four nodes may be tightly connected classmates who work on different sub-projects of a same project.
- the triangle counter 207 counts three edges in total. Since each of the three edges has the first node in common, the triangle counter 207 determines that the four nodes form zero triangle. This means that the unweighted/weighted clustering coefficient is zero.
- the first user associated with the first node may be considered as a spammer. For example, the first user sends spam emails to the three neighbors and thus forms the three edges. Since a spammer usually sends emails to random users that do not know each other, the clustering coefficient is indicative of the fact that none of the three neighbors of the first user (e.g., the spammer) connect with each other.
- the triangle counter 207 counts three edges. If a second node of the three neighbor nodes also connects with a third node of the three neighbor nodes, the triangle counter 207 counts a fourth edge between the second and third nodes. The triangle counter 207 then determines that one triangle forms between the first, second and third nodes. Consequently a clustering coefficient between the minimum (e.g., zero) and the maximum (e.g., one) can be determined. In this case, the first user may be an ordinary person who interacts with some friends regularly.
- N(v,G) ⁇ u ⁇ V: ⁇ (u,v) ⁇ E ⁇ .
- N(v,G) ⁇ u ⁇ V: ⁇ (u,v) ⁇ E ⁇ .
- the unweighted clustering coefficient of a node v is defined as the probability that a random pair of neighbors of the node v is connected by an edge, e.g.,
- the weighted clustering coefficient can be defined as the expected clustering coefficient on a family of random graphs, e.g.,
- WC v is the weighted coefficient for a node v,u,w are neighbor nodes that may form a triangle with v
- N′(v) is a set of neighboring nodes of v
- the graph G′ (V,E′) ⁇ g n,p is an edge subset E′ of E
- ⁇ (u,w) is a random variable that has value 1 if the randomly selected pair is (u,w) and
- the weighted coefficient can be computed as following:
- p r ( ⁇ ( u,w ) 1
- u,w ⁇ N ′( v )) is the probability that a pair u,w of neighbors of v are selected conditioned on u,w ⁇ N′(v). Since the probability that the nodes u,w,v form a triangle equals to the probability that the randomly selected pair u,w are connected with an edge, the triangle counter 207 can determine a second probability that a first node forms a triangle with two neighbor nodes based on the probability of selecting a specific pair u,w from neighbors of v.
- the probability of selecting two elements u,w from the set S in the first process is 1 ⁇ 3 because there are three selections (u,w), (u,z) or (z,w) in total.
- all the random permutations of u,w,z are ⁇ u,w,z ⁇ , ⁇ w,u,z ⁇ , ⁇ u,z,w ⁇ , ⁇ z,u,w ⁇ , ⁇ z,w,u ⁇ and ⁇ w,z,u ⁇ . Since only the first two permutations out of the six total permutations satisfy the condition that u,w are the two nodes with the smallest positions, the probability computed in the second process is also 1 ⁇ 3.
- the triangle counter 207 first computes the probability for all the permutations containing the nodes ⁇ u,w,z 1 ,z 2 , . . . z i-1 ⁇ and then extends the computation to the permutations also containing the node z i .
- the node z i appears after u and w in the permutation.
- the probability that u and w are the nodes in N′(v) with the two smallest positions will not change, e.g., the triangle counter 207 computes the same probability for all the permutations containing the nodes ⁇ u,w,z 1 ,z 2 , . . .
- the triangle counter 207 determines the probability for each permutation containing all the elements in neighbor sets of v.
- the triangle counter 207 determines a second probability that a first node forms a triangle with two neighbor nodes based on the analysis of the each permutation.
- the triangle counter 207 then sends the second probability to the aggregator 209 to determine an exact weighted clustering coefficient in polynomial time.
- the computational complexity of this exact computation is expensive or even prohibitive for a social network that has a moderate size or a large size.
- the triangle counter 207 uses an efficient sampling algorithm to estimate the second probability that a first node forms a triangle with two neighbor nodes.
- This sampling algorithm provides an approximation of the number of triangles with probability (1 ⁇ ).
- the aggregator 209 can approximate with high probability up to a (1 ⁇ ) factor the weighted clustering coefficient of the node.
- the sampling algorithm is based on the uniform sampling of a random neighbor pair adjacent to a node in a random realization of a graph of the family. The number of samples needed is limited both theoretically and in practical experiments.
- the triangle counter 207 identifies s sets of neighbors for a first node.
- the triangle counter 207 selects a second node and a third node randomly from the s sets of neighbors, and determines a second probability that the first node, the second node and the third node form a triangle in the social graph.
- the triangle counter 207 determines whether the random pair has been selected s times. If yes, a weighted clustering coefficient is computed. For example, the triangle counter 207 selects a pair of nodes (u,w) from the neighbors of node v.
- the triangle counter 207 determines the probability that (u,w,v) form a triangle in the first neighbor set N 1 (v), the probability that (u,w,v) form a triangle in the second neighbor set N 2 (v), the probability that (u,w,v) form a triangle in the third neighbor set N 3 (v) and so on. Once the triangle counter 207 determines the probability that (u,w,v) form a triangle in the s-th neighbor set N s (v), the triangle counter 207 sends the probability to the aggregator 209 to compute an approximate of the weighted clustering coefficient.
- the sampling algorithm will be described in detail with reference to the aggregator 209 and the experiment module 213 .
- the aggregator 209 can be software including routines for computing the weighted clustering coefficient for the first node based on the first and second probabilities.
- the aggregator 209 can be a set of instructions executable by the processor 235 to provide the functionality described below for computing the weighted clustering coefficient for the first node based on the first and second probabilities.
- the aggregator 209 can be stored in the memory 237 of the computing device 200 and can be accessible and executable by the processor 235 .
- the aggregator 209 may be adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 230 .
- the aggregator 209 receives data including the first probability and the second probability from the normalization module 205 and the triangle counter 207 respectively, and computes the clustering coefficient based on the data.
- the triangle counter 207 uses a dynamic programming algorithm to compute the second probabilities.
- the triangle counter 207 uses a sampling algorithm to compute the second probabilities.
- the aggregator 209 computes the weighted clustering coefficient correspondingly.
- the aggregator 209 first determines a square matrix M of dimension
- the matrix M contains the probability that u and w are the nodes in N′(v) with the two smallest positions in a random permutation containing nodes ⁇ u,w,z 1 ,z 2 , . . . z i-1 ,z i ⁇ and with j elements in positions smaller either of u or w.
- the aggregator 209 determines that M 0,0 is equal to 1 because in this case the permutations contains only ⁇ u,w ⁇ .
- the aggregator 209 can compute M 1,0 and M 1,1 . In particular, M 1,0 requires that z 1 is in a position after u and w.
- the aggregator 209 computes that
- the aggregator 209 also determines that
- M 1 , 1 2 3 ⁇ ( 1 - p ⁇ ( e v , z i ) ) ⁇ M 0 , 0 .
- the aggregator 209 computes the matrix M for j ⁇ i as follows:
- the aggregator 209 computes the weighted clustering coefficient
- the aggregator 209 can compute the weighted clustering coefficient in a short time.
- the sampling algorithm is based on sampling a random pair (u,w) from a random graph G′ ⁇ g n,p and checking whether (u,w) ⁇ G′.
- the aggregator 209 computes the weighted clustering coefficient WC v using the sampling algorithm as follows:
- the aggregator 209 amplifies the probability of success by running the sampling algorithm multiple times and returning the median of all results. The implementation of the sampling algorithm will be described in detail with reference to the experiment module 213 .
- the aggregator 209 uses the weighted clustering coefficient in applications relevant to a social network, for example, detecting a spam node in the social network or suggesting a user in the social network. In some embodiments, the aggregator 209 computes a weighted clustering coefficient for a node in a social network, compares the weighted clustering coefficient with a threshold clustering coefficient and determines whether to mark the node as spam based on the comparison. For example, in a social network having 114, 529 hosts, 5709 hosts are marked as “non-spam” and 344 hosts are marked as “spam” manually by a group of volunteers.
- the aggregator 209 computes the weighted clustering coefficients for the nodes in the social network, and determines to mark 2058 hosts as “non-spam” and to mark 93 hosts as “spam” based on a threshold clustering coefficient of zero. If the weighted clustering coefficient exceeds zero, the 93 hosts are not spam. In this way, the aggregator 209 refines the detection of spam nodes. In some embodiments, the aggregator 209 generates a list of spam nodes for a user and communicates with the user interface engine to provide the list to the user.
- the aggregator 209 computes the weighted clustering coefficient for a node in a social network, compares the weighted clustering coefficient with a threshold clustering coefficient, determines whether to suggest the node to a user based on the comparison and suggests the node to the user responsive to a positive determination. For example, the aggregator 209 determines that the weighted clustering coefficient associated with a first node in a social network exceeds a threshold clustering coefficient, which indicates that a tight community is formed around a first user represented by the first node.
- the first user may be a team leader that is in charge of an important project in a company.
- the aggregator 209 suggests that they connect with each other. If a second user is not a neighbor of the first user (e.g., a co-worker that is not in the team), the aggregator 209 suggests that the second user connect with the first user so that the second user can know more about the important project in the company.
- the weighted clustering coefficient can be used in other applications.
- the user interface engine 211 can be software including routines for generating graphical data for providing user interfaces to users.
- the user interface engine 211 can be a set of instructions executable by the processor 235 to provide the functionality described below for generating graphical data for providing user interfaces to users.
- the user interface engine 211 can be stored in the memory 237 of the computing device 200 and can be accessible and executable by the processor 235 .
- the user interface engine 211 may be adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 232 .
- the user interface engine 211 generates graphical data for providing a user interface that includes a list of spam nodes.
- the user interface engine 211 sends the graphical data to a user device 115 , causing the user device 115 to present the user interface to the user.
- the user interface engine 211 generates graphical data for providing a user interface that includes a suggestion for a user. The user may accept or reject the suggestion based on a user action performed on the user interface. An example user interface is shown in FIG. 6B .
- the user interface engine 211 may generate graphical data for providing other user interfaces to users.
- the experiment module 213 can be software including routines for conducting an experiment to simulate a performance of an algorithm.
- the experiment module 213 can be a set of instructions executable by the processor 235 to provide the functionality described below for conducting an experiment to simulate a performance of an algorithm.
- the experiment module 213 can be stored in the memory 237 of the computing device 200 and can be accessible and executable by the processor 235 .
- the experiment module 213 may be adapted for cooperation and communication with the processor 235 and other components of the computing device 200 via signal line 234 .
- the experiment module 213 communicates with the aggregator 209 to use a highly optimized and scalable framework to implement the sampling algorithm for computing the weighted clustering coefficient.
- the experiment module 213 uses a programming model for processing large data sets with a parallel, distributed algorithm on a cluster, such as MapReduce.
- MapReduce framework is designed to simplify the implementation of parallel algorithms at very large scale.
- the data is processed in tuples composed by ⁇ key, value>. The computation proceeds in rounds.
- the computation includes at least three phrases: the Map phase, the Shuffle phase and the Reduce phase.
- each machine receives all the values associated with a specific key k, executes certain computation and outputs ⁇ key, value> tuples with potentially different key k′.
- each machine aggregates all tuples with the same key k′ that is sent to the same physical machine.
- each machine performs a computation that only depends from the tuples with the same key k′ received from the Mapper, and outputs ⁇ key, value> tuples with the key equal to the input k′.
- the experiment module 213 implements the sampling algorithm with MapReduce to approximate the weighted clustering coefficient. This implementation achieves the important design requirements of the MapReduce algorithm in that it i) minimizes the number of MapReduce rounds that are involved, ii) minimizes the amount of communication between machines and iii) balances the working load across different machines.
- the experiment module 213 stores the social graph in ⁇ key; value> tuples that represents the adjacency list of each node.
- the experiment module 213 sends a message with key w i and value i, (u,v i ) to the machine that controls the node w i .
- node u asks node w i whether edge (w i ,v i ) exists in the i-th realization so that the experiment module 213 can infer that a triangle u,w i ,v i exists in realization i.
- node u also sends its adjacency list to itself in order to answer requests from other nodes.
- a naive implementation of the sampling procedure would have running time quadratic in the size of the adjacency list.
- the experiment module 213 uses the MapReduce program to select a random pair of neighbors in linear time, in particular, to assign to each neighbor a random number and to select the two neighbors with the smallest assigned values.
- node u receives its own adjacency list and various requests i, (w,v i ) to check the existence of edge (u,v i ) in realization N i (u). If the test is positive, the experiment module 213 writes a value ⁇ u,w> with its own key to indicate that there should be a triangle with node w in one of the samples.
- each node v reads the values written in the previous Reduce phase. For each detected triangle ⁇ v,u>, node v sends a message ⁇ u,1> to the node u to certify the existence of the triangle.
- the experiment module 213 receives the number of sampled triangles for each node and computes the clustering coefficient for each node by dividing the number of sampled triangles by the number of samples. In some embodiments, the experiment module 213 also extends the MapReduce algorithm to compute the unweighted clustering coefficient.
- the experiment module 213 uses two rounds of MapReduce in the implementation presented above.
- the experiment module 213 sends a number of messages across machines upper bounded by the number of nodes times the number of samples required.
- the load for each machine is upper bounded by the number of samples used by the algorithm times the maximum degree of a node in the social graph.
- the experimental results indicating how fast this implementation is in practice will be described in detail with reference to FIGS. 7A-7G .
- FIG. 3 is a flow diagram of an example of a method 300 for generating weighted clustering coefficients for a social network graph.
- the measurement application 103 comprises a processing unit 201 , a normalization module 205 , a triangle counter 207 and an aggregator 209 .
- the processing unit receives 302 social graph data associated with a social network, the social graph data including nodes, edges that connect the nodes and weights associated with the edges in a social graph.
- the normalization module 205 determines 304 a first probability of existence of an edge in the social graph based on the weights.
- the triangle counter 207 determines 306 a second probability that a first node forms a triangle with two neighbor nodes.
- the aggregator 209 computes 308 a weighted clustering coefficient for the first node based on the first and second probabilities.
- FIG. 4 is a flow diagram of another example of a method 400 for generating weighted clustering coefficients for a social network graph.
- the measurement application 103 comprises a processing unit 201 , a social network engine 203 , a normalization module 205 , a triangle counter 207 and an aggregator 209 .
- the processing unit receives 402 social graph data associated with a social network, the social graph data including nodes, edges that connect the nodes and weights associated with the edges in a social graph.
- a weight associated with an edge measures how close the connection is between two nodes.
- the social network engine 203 represents the weight with a positive number to exhibit a varying degree of intensity and heterogeneity in the connections between nodes.
- the social network engine 203 determines a weight based on interactions between nodes, e.g., the number of messages exchanged between two users, the number of links between two hosts, etc. In other embodiments, the social network engine 203 determines a weight based on determining whether the relationship between two users is uni-directional or bi-directional.
- the normalization module 205 normalizes 404 the weights based on a nonlinear mapping function.
- the normalization module 205 determines 406 a first probability of existence of an edge in the social graph based on the normalized weights.
- the normalization module 205 interprets the normalized weights as first probabilities of existence of the edges. For example, the normalization module 205 determines that an edge e appears independently with a first probability p(e), where
- the triangle counter 207 identifies 408 s sets of neighbors for a first node.
- the triangle counter 207 selects 410 a second node and a third node randomly from the s sets of neighbors.
- the triangle counter 207 determines 412 a second probability that the first node, the second node and the third node form a triangle in the social graph.
- the triangle counter 207 determines 414 whether the random pair has been selected s times. If yes, the method 400 goes to step 416 . Otherwise, the method goes to step 410 .
- the triangle counter 207 selects a pair of nodes (u,w) from the neighbors of node v.
- the triangle counter 207 determines the probability that (u,w,v) form a triangle in the first neighbor set N 1 (v), the probability that (u,w,v) form a triangle in the second neighbor set N 2 (v), the probability that (u,w,v) form a triangle in the third neighbor set N 3 (v) and so on. Once the triangle counter 207 determines the probability that (u,w,v) form a triangle in the s-th neighbor set N s (v), the triangle counter 207 sends the probability to the aggregator 209 to compute an approximate of the weighted clustering coefficient.
- the aggregator 209 computes 416 a weighted clustering coefficient for the first node based on the first and second probabilities.
- the aggregator 209 approximates the weighted clustering coefficient within a relative error of (1 ⁇ ) with a high probability.
- the aggregator 209 amplifies the probability of success by running the sampling algorithm multiple times and returning the median of all results.
- FIG. 5 is a flow diagram of an example of a method 500 for applying weighted clustering coefficients in detecting spam nodes or suggesting connections to users.
- the measurement application 103 comprises a processing unit 201 and an aggregator 209 .
- the processing unit receives 502 social graph data associated with a social network, the social graph data including nodes, edges that connect the nodes and weights associated with the edges in a social graph.
- the aggregator 209 computes 504 a weighted clustering coefficient for a node in the social graph.
- the aggregator 209 compares 506 the weighted clustering coefficient with a threshold clustering coefficient.
- the aggregator 209 determines 508 whether to mark the node as spam based on the comparison.
- the aggregator 209 generates 510 a list of spam nodes for a user. For example, in a social network having 114, 529 hosts, 5709 hosts are marked as “non-spam” and 344 hosts are marked as “spam” manually by a group of volunteers.
- the aggregator 209 computes the weighted clustering coefficients for the nodes in the social network, and determines to mark 2058 hosts as “non-spam” and to mark 93 hosts as “spam” based on the weighted clustering coefficient exceeding a threshold clustering coefficient of zero (or any other measurement known to those of skill in the art). In this way, the aggregator 209 refines the detection of spam nodes.
- the aggregator 209 determines 512 whether to suggest the node to the user based on the comparison.
- the aggregator 209 suggests 514 the node to the user responsive to a positive determination. For example, the aggregator 209 determines that the weighted clustering coefficient associated with a first node in a social network is greater than a threshold, which indicates that a tight community is formed around a first user represented by the first node.
- the first user may be a team leader that is in charge of an important project in a company. If two neighbors of the first node (e.g., team members) have not connected yet in the social network, the aggregator 209 suggests that they connect with each other.
- the aggregator 209 suggests that the second user connect with the first user so that the second user can know more about the important project in the company.
- FIG. 6A is an example graph 600 including social graph data associated with at least one node in a social network.
- the graph 600 is an undirected graph that includes at least node 601 and node 603 .
- Node 601 connects tightly with its neighbors. For example, node 601 forms a first triangle with nodes 605 , 607 and forms a second triangle with nodes 607 , 609 .
- Node 603 also connects with some neighbor nodes, for example, with node 605 , but forms no triangle.
- the weighted clustering coefficient associated with node 601 therefore is larger than the weighted clustering coefficient associated with node 603 .
- the aggregator 209 uses the weighted clustering coefficient in applications such as detecting spam nodes or suggesting connections to a user in the social network.
- FIG. 6B is an example graphic representation of a user interface 650 for displaying a suggested user.
- the user interface 650 includes a suggestion 651 for Alice.
- the suggestion 651 includes a user Ruby that is suggested to Alice based on the weighted clustering coefficient associated with Ruby.
- the aggregator 209 computes a large weighted clustering coefficient associated with Ruby and determines that Ruby is a high quality user that is surrounded by a lot of users. For example, Ruby is the user represented by node 601 in FIG. 6A .
- the suggestion 651 tells Alice that Ruby is someone she might be interesting in connecting with and that she has a lot of connections including Alice's good friend Rose.
- the user interface 650 also includes a “Connect” button 653 such that Alice can connect to Ruby by a click and an “Ignore” button 654 in case Alice is uninterested in connecting with Ruby and does not want to see the suggestion again.
- FIGS. 7A-7G are experimental results of a sampling algorithm for computing weighted clustering coefficient.
- the experiment module 213 uses a publicly available dataset composed by a collection of hosts manually labeled by a group of volunteers.
- the social graph is composed of 114,529 hosts in the .uk domain and there are 5709 hosts marked as “non-spam” and 344 hosts marked as “spam.”
- the experiment module 213 implements the sampling algorithm to analyze the correlation between various definitions of the clustering coefficient.
- the experiment module 213 computes the corresponding score (e.g., the weighted clustering coefficient) for each labeled node, ranks the labeled nodes with the score bigger than zero according to their scores, and computes the precision of each position i of the ranking as the percentage of “non-spam” hosts before position i.
- the average precisions are depicted with lines and the standard deviations are depicted with shadows around the lines.
- FIG. 7A shows the experiment result of applying different techniques to normalize weights associated with edges in the .uk domain graph.
- the experiment module 213 uses two nonlinear mapping functions M 1 and M 2 . Both functions are mapping between [e w , e W ] to [0, 1], e.g., M 1 , M 2 : [e w , e W ] ⁇ [0, 1]. To compare these two mappings, the experiment module 213 runs the sampling approximation algorithm for estimating WC v for all the nodes in the graph and compares the precision of rankings obtained based on the two different rankings. In this experiment, the experiment module 213 executes 3200 samples per node to compute the weighted clustering coefficient.
- the experiment module 213 reruns the algorithm 4 times with different random seeds.
- FIG. 7A shows that the two mapping functions have similar performances.
- M 1 e.g., the first mapping in solid line
- M 2 e.g., the second mapping in dotted line.
- the experiment module 213 performs the sampling algorithm using the mapping M 1 and depicts the results in FIGS. 7B-7G .
- FIG. 7B shows the performance of the sampling algorithm.
- the experiment module 213 analyzes the running time of the sampling algorithm when the number of samples used in the algorithm varies. The experiment module 213 also compares the running time of the sampling algorithm with the running time of the algorithms that considers all the triangles to compute the unweighted clustering coefficient or the weighted clustering coefficient (e.g., the quadratic algorithms).
- FIG. 7B depicts the average running time of the sampling algorithm as a function of the number of samples. Since the running time increases almost linearly with the number of seeds, the experiment module 213 implements the algorithm efficiently by using all the parallelization offered by the MapReduce framework. FIG. 7B also shows a huge difference in the running time between the sampling algorithm and the quadratic algorithm that considers all the triangles. For example, when the number of the samples is 50, 100, 200 or 400, the sampling algorithm performed by the experiment module 213 is 900 times faster than the quadratic algorithm. Even for 3200 samples, the sampling algorithm is still 120 times faster than the quadratic algorithm.
- FIG. 7C shows the performance of the sampling algorithm, in particular, the effects of varying the number of samples on the precision of the algorithm.
- the precision curve changes when the number of samples changes.
- the average precisions are depicted with lines and the standard deviations are depicted with the shadows around the lines.
- the standard deviation decreases quickly as the number of samples increases.
- the length of the ranking decreases when a small number of samples are used. This is because a small number of triangles formed by a small number of samples are hard to be detected.
- the most striking observation is that the precision of ranking decreases when the numbers of samples increases. This observation can be hypothetically explained using the same explanation in the second observation.
- the experiment module 213 analyzes how the precision of the rankings changes as the degrees of nodes change in FIGS. 7D and 7E .
- the experiment module 213 analyzes the relationship between the degree of a node and the correlation between its clustering coefficient and its trustfulness.
- the experiment module 213 analyzes the precision of the rankings of nodes by restricting only to nodes with weighted degree above a specific threshold. Surprisingly, FIG. 7D does not show the same trend as in FIG. 7C . A possible explanation for this is the presence of nodes incident to a single relatively heavy edge. In this case, those nodes would have high weighted degree but small probability to appear in a ranking obtained with a small number of samples.
- the experiment module 213 analyzes the precision of the rankings of nodes by restricting only to nodes with unweighted degree 0, 5, 10 and 20.
- the sample size is 3200.
- FIG. 7E shows a trend similar to FIG. 7C . This result suggests that there is a relationship between the degree of a node and the correlation of its weighted clustering coefficient with its trustfulness, especially a clear relationship between unweighted degree and number of wedges incident to a node.
- the experiment module 213 compares the definition of weighted clustering coefficient in Equation 1 with the definition presented in Barrat et al. and with the classic definition of unweighted clustering coefficient. Note that the definition of the weighted clustering coefficient in Barrat et al. can be found in “The architecture of complex weighted networks” published by A. Barrat et al. in “Proceeding of the National Academy of Sciences of the United States of America” in 2004. The results in FIGS. 7F and 7G indicate that the new definition in Equation 1 is comparable with the other two. In various point of the ranking, the experiment based on the new definition in Equation performs significantly better than the other two. This result is especially attractive given that, for the new definition in Equation 1, the experiment module 213 uses an approximation algorithm that is asymptotically more efficient in theory and 120 times faster in practice (as seen in FIG. 7C ).
- FIG. 7F shows the ranking obtained using the three definitions.
- the experiment module 213 computes the exact clustering coefficient of each node.
- the experiment module 213 approximates the clustering coefficient using 3200 samples per node. It is noted that the ranking obtained by our new definition has a higher precision for the first positions in the ranking and then has performances comparable with the rankings obtained using the other definitions.
- the experiment module 213 compares the performances of the new definition in Equation 1 with the performances of the definition given by Barrat et al. when restricting to nodes with unweighted degree above a specific threshold.
- FIGS. 7D and 7E show that there is an interesting relationship between the degree of a node and the correlation between its weighted clustering coefficient and its trustfulness.
- the comparison is between the two definitions with nodes of degree larger than 0, 5 and 20.
- FIG. 7G shows that the two definitions have very similar performances.
- the new definition is at least as accurate as the definition given by Barrat et al.
- the weighted clustering coefficient with our new definition can be computed with an efficient algorithm, it is the only weighted definition that can be analyzed on large-scale social networks.
- the present embodiment of the specification also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including optical disks, CD-ROMs, and magnetic disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, flash memories including USB keys with non-volatile memory, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.
- the specification can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements.
- the specification is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.
- a computer-usable or computer-readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.
- a data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus.
- the memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.
- I/O devices including but not limited to keyboards, displays, pointing devices, etc.
- I/O controllers can be coupled to the system either directly or through intervening I/O controllers.
- Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks.
- Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.
- modules, routines, features, attributes, methodologies, and other aspects of the disclosure can be implemented as software, hardware, firmware or any combination of the three.
- a component an example of which is a module, of the specification is implemented as software
- the component can be implemented as a standalone program, as part of a larger program, as a plurality of separate programs, as a statically or dynamically linked library, as a kernel loadable module, as a device driver, and/or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming.
- the disclosure is in no way limited to implementation in any specific programming language, or for any specific operating system or environment. Accordingly, the disclosure is intended to be illustrative, but not limiting, of the scope of the specification, which is set forth in the following claims.
Abstract
Description
where W=max w(e) is the maximum weight. Other non-linear mapping functions can be used, which will be described in detail with reference to the
The
In some embodiments, the weighted clustering coefficient can be defined as the expected clustering coefficient on a family of random graphs, e.g.,
In the new definition of the weighted coefficient in Equation 1, WCv is the weighted coefficient for a node v,u,w are neighbor nodes that may form a triangle with v, N′(v) is a set of neighboring nodes of v, the graph G′=(V,E′)∈gn,p is an edge subset E′ of E, and χ(u,w) is a random variable that has value 1 if the randomly selected pair is (u,w) and 0 otherwise.
Therefore, we have:
On the one side, since the
p r(u,w∈N′(v)^(u,w)∈E)=p(e u,v)p(e w,v)p(e w,u) (Equation 3)
On the other side, the second term pr(χ(u,w)=1|ξ(u,v)=1) in Equation 2 depends on the possible instantiations of G′ and therefore may involve the computation of exponentially many terms in large social networks. Note that
p r(χ(u,w)=1|ξ(u,v)=1)=p r(χ(u,w)=1|u,w∈N′(v))
is the probability that a pair u,w of neighbors of v are selected conditioned on u,w∈N′(v). Since the probability that the nodes u,w,v form a triangle equals to the probability that the randomly selected pair u,w are connected with an edge, the
The
More generally, the
The
p r(χ(u,w)=1|u,w∈N′(v))=)Σi=0 N′(v)|−2 M N′(v)|−2,i.
Based on Equation 2 and Equation 3 described above, the
-
- Compute the matrix M for u,w
- Using M, compute the probability p that (u,v,w) is a triangle and is selected
- WCv+=p.
Output WCv.
However, the above-described dynamic programming algorithm could be too slow for a large size social network.
-
- Sample a random wedge <u,w> uniformly from N(v)i
- If (u,w)∈Ei then set Xi←1
- else set Xi←0
Output
applying the Chebyshev inequality gives:
Based on this inequality, the
In some embodiments, the
In some embodiments, the
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/279,200 US9760619B1 (en) | 2014-04-29 | 2014-05-15 | Generating weighted clustering coefficients for a social network graph |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201461986006P | 2014-04-29 | 2014-04-29 | |
US14/279,200 US9760619B1 (en) | 2014-04-29 | 2014-05-15 | Generating weighted clustering coefficients for a social network graph |
Publications (1)
Publication Number | Publication Date |
---|---|
US9760619B1 true US9760619B1 (en) | 2017-09-12 |
Family
ID=59758885
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/279,200 Expired - Fee Related US9760619B1 (en) | 2014-04-29 | 2014-05-15 | Generating weighted clustering coefficients for a social network graph |
Country Status (1)
Country | Link |
---|---|
US (1) | US9760619B1 (en) |
Cited By (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180189818A1 (en) * | 2017-01-03 | 2018-07-05 | International Business Machines Corporation | Rewarding online users as a function of network topology |
CN111177479A (en) * | 2019-12-23 | 2020-05-19 | 北京百度网讯科技有限公司 | Method and device for acquiring feature vectors of nodes in relational network graph |
CN111382628A (en) * | 2018-12-28 | 2020-07-07 | 成都云天励飞技术有限公司 | Method for judging peer and related products |
CN112860949A (en) * | 2019-11-27 | 2021-05-28 | 国网电子商务有限公司 | Method and device for extracting map features |
US11244004B2 (en) * | 2019-10-23 | 2022-02-08 | Salesforce.Com, Inc. | Generating adaptive match keys based on estimating counts |
US11256759B1 (en) | 2019-12-23 | 2022-02-22 | Lacework Inc. | Hierarchical graph analysis |
US11269687B2 (en) * | 2019-06-11 | 2022-03-08 | International Business Machines Corporation | Map reduce using coordination namespace hardware acceleration |
US11301915B2 (en) | 2016-06-13 | 2022-04-12 | Affinio Inc. | Modelling user behavior in social network |
CN114389961A (en) * | 2022-01-14 | 2022-04-22 | 北京睿芯高通量科技有限公司 | Graph flow triangle counting method and device based on node heat sampling |
US11637849B1 (en) | 2017-11-27 | 2023-04-25 | Lacework Inc. | Graph-based query composition |
US11645321B2 (en) * | 2017-11-03 | 2023-05-09 | Salesforce, Inc. | Calculating relationship strength using an activity-based distributed graph |
US11770464B1 (en) | 2019-12-23 | 2023-09-26 | Lacework Inc. | Monitoring communications in a containerized environment |
US11792284B1 (en) | 2017-11-27 | 2023-10-17 | Lacework, Inc. | Using data transformations for monitoring a cloud compute environment |
US11831668B1 (en) | 2019-12-23 | 2023-11-28 | Lacework Inc. | Using a logical graph to model activity in a network environment |
US11841904B1 (en) * | 2021-11-24 | 2023-12-12 | Government Of The United States, As Represented By The Director, National Security Agency | Detection of coactively linked topological structures in networks and databases |
US11909752B1 (en) | 2017-11-27 | 2024-02-20 | Lacework, Inc. | Detecting deviations from typical user behavior |
US11954130B1 (en) | 2019-12-23 | 2024-04-09 | Lacework Inc. | Alerting based on pod communication-based logical graph |
US11979422B1 (en) | 2017-11-27 | 2024-05-07 | Lacework, Inc. | Elastic privileges in a secure access service edge |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6640218B1 (en) * | 2000-06-02 | 2003-10-28 | Lycos, Inc. | Estimating the usefulness of an item in a collection of information |
US7610367B2 (en) | 2003-12-30 | 2009-10-27 | Telenor Asa | Method for managing networks by analyzing connectivity |
US7739211B2 (en) | 2006-11-08 | 2010-06-15 | 21St Century Technologies, Inc. | Dynamic SNA-based anomaly detection using unsupervised learning |
US20130013549A1 (en) * | 2011-07-07 | 2013-01-10 | International Business Machines Corporation | Hardware-assisted approach for local triangle counting in graphs |
US8386574B2 (en) | 2009-10-29 | 2013-02-26 | Xerox Corporation | Multi-modality classification for one-class classification in social networks |
US8446842B2 (en) | 2008-08-27 | 2013-05-21 | International Business Machines Corporation | Method and apparatus for identifying similar sub-graphs in a network |
US20130290226A1 (en) | 2012-04-05 | 2013-10-31 | Maynard Dokken | System and method for social graph and graph assets valuation and monetization |
US20140195984A1 (en) * | 2013-01-07 | 2014-07-10 | Northeastern University | Analytic frameworks for persons of interest |
US20150178406A1 (en) * | 2013-12-23 | 2015-06-25 | Oracle International Corporation | Counting triangles in a graph |
US20150188783A1 (en) * | 2013-12-30 | 2015-07-02 | Telefonaktiebolaget L M Ericsson (Publ) | Method and apparatus for detecting communities in a network |
-
2014
- 2014-05-15 US US14/279,200 patent/US9760619B1/en not_active Expired - Fee Related
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6640218B1 (en) * | 2000-06-02 | 2003-10-28 | Lycos, Inc. | Estimating the usefulness of an item in a collection of information |
US7610367B2 (en) | 2003-12-30 | 2009-10-27 | Telenor Asa | Method for managing networks by analyzing connectivity |
US7739211B2 (en) | 2006-11-08 | 2010-06-15 | 21St Century Technologies, Inc. | Dynamic SNA-based anomaly detection using unsupervised learning |
US8446842B2 (en) | 2008-08-27 | 2013-05-21 | International Business Machines Corporation | Method and apparatus for identifying similar sub-graphs in a network |
US8386574B2 (en) | 2009-10-29 | 2013-02-26 | Xerox Corporation | Multi-modality classification for one-class classification in social networks |
US20130013549A1 (en) * | 2011-07-07 | 2013-01-10 | International Business Machines Corporation | Hardware-assisted approach for local triangle counting in graphs |
US20130290226A1 (en) | 2012-04-05 | 2013-10-31 | Maynard Dokken | System and method for social graph and graph assets valuation and monetization |
US20140195984A1 (en) * | 2013-01-07 | 2014-07-10 | Northeastern University | Analytic frameworks for persons of interest |
US20150178406A1 (en) * | 2013-12-23 | 2015-06-25 | Oracle International Corporation | Counting triangles in a graph |
US20150188783A1 (en) * | 2013-12-30 | 2015-07-02 | Telefonaktiebolaget L M Ericsson (Publ) | Method and apparatus for detecting communities in a network |
Non-Patent Citations (34)
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11301915B2 (en) | 2016-06-13 | 2022-04-12 | Affinio Inc. | Modelling user behavior in social network |
US20180189818A1 (en) * | 2017-01-03 | 2018-07-05 | International Business Machines Corporation | Rewarding online users as a function of network topology |
US10915919B2 (en) | 2017-01-03 | 2021-02-09 | International Business Machines Corporation | Topology-based online reward incentives |
US10475062B2 (en) * | 2017-01-03 | 2019-11-12 | International Business Machines Corporation | Rewarding online users as a function of network topology |
US11645321B2 (en) * | 2017-11-03 | 2023-05-09 | Salesforce, Inc. | Calculating relationship strength using an activity-based distributed graph |
US11979422B1 (en) | 2017-11-27 | 2024-05-07 | Lacework, Inc. | Elastic privileges in a secure access service edge |
US11909752B1 (en) | 2017-11-27 | 2024-02-20 | Lacework, Inc. | Detecting deviations from typical user behavior |
US11689553B1 (en) | 2017-11-27 | 2023-06-27 | Lacework Inc. | User session-based generation of logical graphs and detection of anomalies |
US11882141B1 (en) | 2017-11-27 | 2024-01-23 | Lacework Inc. | Graph-based query composition for monitoring an environment |
US11792284B1 (en) | 2017-11-27 | 2023-10-17 | Lacework, Inc. | Using data transformations for monitoring a cloud compute environment |
US11637849B1 (en) | 2017-11-27 | 2023-04-25 | Lacework Inc. | Graph-based query composition |
US11677772B1 (en) | 2017-11-27 | 2023-06-13 | Lacework Inc. | Using graph-based models to identify anomalies in a network environment |
CN111382628A (en) * | 2018-12-28 | 2020-07-07 | 成都云天励飞技术有限公司 | Method for judging peer and related products |
US11269687B2 (en) * | 2019-06-11 | 2022-03-08 | International Business Machines Corporation | Map reduce using coordination namespace hardware acceleration |
US11244004B2 (en) * | 2019-10-23 | 2022-02-08 | Salesforce.Com, Inc. | Generating adaptive match keys based on estimating counts |
CN112860949A (en) * | 2019-11-27 | 2021-05-28 | 国网电子商务有限公司 | Method and device for extracting map features |
CN111177479B (en) * | 2019-12-23 | 2023-08-18 | 北京百度网讯科技有限公司 | Method and device for acquiring feature vector of node in relational network graph |
US11770464B1 (en) | 2019-12-23 | 2023-09-26 | Lacework Inc. | Monitoring communications in a containerized environment |
US11831668B1 (en) | 2019-12-23 | 2023-11-28 | Lacework Inc. | Using a logical graph to model activity in a network environment |
US11256759B1 (en) | 2019-12-23 | 2022-02-22 | Lacework Inc. | Hierarchical graph analysis |
US11954130B1 (en) | 2019-12-23 | 2024-04-09 | Lacework Inc. | Alerting based on pod communication-based logical graph |
CN111177479A (en) * | 2019-12-23 | 2020-05-19 | 北京百度网讯科技有限公司 | Method and device for acquiring feature vectors of nodes in relational network graph |
US11841904B1 (en) * | 2021-11-24 | 2023-12-12 | Government Of The United States, As Represented By The Director, National Security Agency | Detection of coactively linked topological structures in networks and databases |
CN114389961A (en) * | 2022-01-14 | 2022-04-22 | 北京睿芯高通量科技有限公司 | Graph flow triangle counting method and device based on node heat sampling |
CN114389961B (en) * | 2022-01-14 | 2024-03-08 | 北京中科通量科技有限公司 | Graph flow triangle counting method and device based on node heat sampling |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9760619B1 (en) | Generating weighted clustering coefficients for a social network graph | |
Pennekamp et al. | The intrinsic predictability of ecological time series and its potential to guide forecasting | |
US9223849B1 (en) | Generating a reputation score based on user interactions | |
US10373273B2 (en) | Evaluating an impact of a user's content utilized in a social network | |
US10255282B2 (en) | Determining key concepts in documents based on a universal concept graph | |
US8583471B1 (en) | Inferring household income for users of a social networking system | |
US20160063560A1 (en) | Accelerating engagement of potential buyers based on big data analytics | |
US10757053B2 (en) | High confidence digital content treatment | |
US9614920B1 (en) | Context based group suggestion and creation | |
US20160225017A1 (en) | Size of prize predictive model | |
US9418119B2 (en) | Method and system to determine a category score of a social network member | |
US20170262898A1 (en) | Automated Selection Of User/Message Combinations | |
US11468364B2 (en) | Determining impact of features on individual prediction of machine learning based models | |
US20140337359A1 (en) | Systems and methods for estimation and application of causal peer influence effects | |
US20190066054A1 (en) | Accuracy of member profile retrieval using a universal concept graph | |
US20190065612A1 (en) | Accuracy of job retrieval using a universal concept graph | |
US10296642B1 (en) | Ranking content for user engagement | |
US20170351740A1 (en) | Determining stalwart nodes in signed social networks | |
CN113159934A (en) | Method and system for predicting passenger flow of network, electronic equipment and storage medium | |
US20180308057A1 (en) | Joint optimization and assignment of member profiles | |
US20150278836A1 (en) | Method and system to determine member profiles for off-line targeting | |
Nugroho et al. | A Decision Guidance for Solving Success Rate Political Campaign Using Distance Weighted kNN in Nassi-Shneiderman Framework. | |
CN113763077A (en) | Method and apparatus for detecting false trade orders | |
US20200175455A1 (en) | Classification of skills | |
WO2020214187A1 (en) | Identifying and quantifying sentiment and promotion bias in social and content networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LATTANZI, SILVIO;LEONARDI, STEFANO;SIGNING DATES FROM 20140422 TO 20140503;REEL/FRAME:033188/0308 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044097/0658Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20210912 |