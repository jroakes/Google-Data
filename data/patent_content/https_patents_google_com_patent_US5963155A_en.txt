US5963155A - System and method of transforming information between UCS and EBCDIC representations employing EBCDIC-friendly transformation formats - Google Patents
System and method of transforming information between UCS and EBCDIC representations employing EBCDIC-friendly transformation formats Download PDFInfo
- Publication number
- US5963155A US5963155A US08/968,219 US96821997A US5963155A US 5963155 A US5963155 A US 5963155A US 96821997 A US96821997 A US 96821997A US 5963155 A US5963155 A US 5963155A
- Authority
- US
- United States
- Prior art keywords
- representation
- octet
- length multiple
- octets
- fixed
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/126—Character encoding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/151—Transformation
Definitions
- the present invention relates to a system and method of transforming information between different representations. More particularly, the present invention relates to the transformation of information represented in ISO/IEC 10646-1 (UCS) or Unicode encodings to and/or from EBCDIC-friendly representations.
- UCS ISO/IEC 10646-1
- Unicode Unicode encodings
- characters are represented by values assigned to characters, the specific assignments being defined within a coded character set.
- a common encoding scheme is ASCII which, for example, specifies that the value 97 (hexadecimal 0x61) represents the lower case "a" character, the value 65 (0x41) represents an upper case "A” character, etc.
- Another common encoding scheme is EBCDIC which, for example, specifies that the value 129 (hexadecimal 0x81) represents the lower case "a” character and the value 193 (hexadecimal 0xC1) represents the uppercase "A" character.
- UCS Universal Multiple Octet Coded Character Set
- ISO/IEC International Standards Organization
- UCS can define over two billion characters and UCS includes a two-byte (UCS-2) form and a four-byte (UCS-4) form and these forms and the UCS standard are described in ISO/IEC 10646-1: 1993--Universal Multiple-Octet Coded Character Set and in the corresponding Unicode Standard V2.0, from the Unicode Consortium which employs the UCS-2 form of UCS, and the contents of these publications are incorporated by reference herein.
- UTF-8 A transform referred to as UTF-8 has been developed to transform UCS-2 to and from ASCII. This transform is defined in Amendment No. 2 to ISO/IEC 10646-1 and the contents of this publication are incorporated herein by reference. UTF-8 transforms UCS-2 information to an ASCII-friendly format and vice-versa and maintains the ASCII characters (assigned to values 0 through 127) as single octets and the rest of the UCS-2 character set as sequences of two to six octets (a multi-octet sequence).
- the 95 characters and the SPACE commonly referred to as the graphic characters of the ASCII set, or the G0 set and the 33 control characters (the 32 control characters from 0x00 to 0x1F, referred to as the C0 set, and the DELETE character at 0x7F) are maintained as single octets.
- ISO/IEC 4873 standard defines an 8-bit encoding standard, which defines the structure for other ISO/IEC 8-bit characters sets, such as ISO/IEC 8859-1 (Latin Alphabet No. 1), referred to herein as ISO-8 bit encoding, which employs the same assignment of ASCII characters to values 0x00 through 0x7F but which also includes additional characters.
- ISO/IEC 4873 also includes a second set of control characters from 0x80 to 0x9F, referred to as the C1 set and these latter control characters are mirrored as two-octet escape sequences, i.e.--ESC xx, where ⁇ xx ⁇ is a suitable value.
- the UTF-8 transform does not maintain the C1 set as single-octet characters.
- UTF-8 transforms information between UCS and ASCII-friendly representations, not ASCII representations.
- UTF-8 transforms UCS to an ASCII-friendly form wherein the characters assigned to the first 128 values of the ASCII character set are maintained as single octet strings, but all other characters are represented as variable-length multiple-octet strings of between two and six octets.
- EBCDIC includes 65 control codes, in addition to the 191 letter, number and punctuation characters (generally referred to as ⁇ graphic characters ⁇ ).
- the graphics characters are located at 64 (0x40), for the SPACE character, and from 65 (0x41) to 254 (0xFE) and the control characters are assigned from 0x00 to 0x40 and the EO ("eight ones") character which is assigned to 0xFF.
- a method of transforming information from a fixed-length multiple-octet representation to a target variable-length multiple-octet representation the transformation ensuring that a selected set of characters are represented by single octets in said target representation, comprising the steps of:
- a method of transforming information from a variable-length multiple-octet representation to a fixed-length multiple-octet representation comprising the steps of:
- a method of transforming information from a fixed-length multiple-octet representation to a variable-length multiple-octet representation by receiving an input character string in said fixed-length representation and transforming said input character string to said variable-length multiple-octet representation, said transformation producing a single octet representation in said variable-length representation for a pre-selected set of input characters in said fixed-length representation.
- a system for transforming information between a fixed-length multiple-octet representation and a variable-length multiple-octet representation comprising:
- a first transform stage to transform information between said fixed-length multiple-octet representation and an intermediate variable-length multiple-octet representation, said first transform stage including a pre-defined set of characters which are represented as single octet values in said intermediate variable-length multiple octet representation;
- a second transform stage to transform information between said intermediate representation and said variable-length multiple-octet representation, said second transform stage including means to maintain characters represented as single octets in either of said intermediate representation and said variable-length multiple-octet representation as single octets in the other of said intermediate representation and said variable-length multiple-octet representation.
- the fixed-length multiple-octet representation is UCS-2, UCS-4 or the like.
- the variable-length multiple-octet intermediate representation is ISO-8 bit-friendly.
- the variable-length multiple-octet representation is EBCDIC-friendly.
- FIG. 1 shows a block diagram of an embodiment of the present invention functioning as a UCS to EBCDIC transformation system and method
- FIG. 2 shows a block diagram of the embodiment of FIG. 1 functioning as an EBCDIC to UCS transformation system and method.
- FIG. 1 An embodiment of the present invention which is useful for transforming information between UCS representations and EBCDIC-friendly representations is indicated generally at 20 in FIG. 1.
- the transformation is performed to two stages.
- a first stage 24 converts an input, referred to herein as a U-string (UCS-2 or UCS-4), to an intermediate form, referred to herein as an I8-string, and a second stage 28 converts the I8-string to an EBCDIC-friendly output, referred to herein as an En-string.
- FIG. 2 shows this embodiment 20 of the present invention functioning to transform information in an EBCDIC representation (En-string or EBCDIC) to a UCS representation.
- U-string is intended to comprise both UCS-4 (four octet values from 0 to 2,147,483,647 (0x7FFFFFFF)) and UCS-2 (two octet values from 0 to 65,535 (0xFFFF)) and UCS-2 with S-zones, (two pairs of octets).
- Each character in a U-string is represented as a fixed, multi-octet value, either four octets for UCS-4 or two octets for UCS-2 or two pairs of octets for UCS-2 with S-zones.
- UCS-4 As is known, the arrangement of UCS-4 is often discussed in terms of groups (indicated by the most significant octet of the four octets), planes (indicated by the next most significant octet) and row and column elements (indicated by the two least significant pair of octets).
- UCS-2 is discussed in terms of Row and Column elements and UCS-2 with S-zones is discussed in terms of High and Low pairs.
- Amendment 1 of ISO/IEC Standard 10646 and V2.0 of the Unicode standard discuss the UTF-16 transform whereby the High and Low pairs can be transformed to a UCS-4 representation of row and column elements in group 0, planes 1 through 16, as discussed below.
- the Basic Multilingual Plane, or BMP is 65,536 elements in group 0, plane 0 of UCS-4 (i.e. 0x00000000 to 0x0000FFFF) and most of the world's widely used characters have been allocated positions in the BMP.
- BMP Basic Multilingual Plane
- UCS-2 is a subset of UCS-4 and its two octets represent the row and column elements of the BMP.
- UCS-2 with S-zones comprises, in addition to the BMP, planes 1 through 16 of group 0.
- first stage 24 can process a U-string comprising UCS-4, UCS-2 or UCS-2 with S-Zones representations. In the event that invalid S-Zone pairs are detected, first stage 24 will process each pair of octets as a single value in the range 0x4000 to 0xFFFF.
- the output of first stage 24 is an intermediate representation referred to herein as an I8-string.
- the I8-string is a variable length multi-octet sequence which can comprise 1 to 7 octets and is an ISO-8 bit-friendly format.
- friendly format is intended to comprise any format whereby a multi-octet string has been arranged to represent a selected set of values as single octet values.
- the first 127 characters (including the C0 set) of the ASCII character set and the C1 set of control characters, from the ISO-8 bit encoding scheme are preserved as single octet values and other characters are represented as 2 to 7 octet values.
- processing of 18-strings by ASCII and/or ISO-8 bit systems is simplified and the format is ISO-8 bit-friendly.
- the total number of octets in the string is indicated in the leading octet of the string by the number of high order bits followed by a zero.
- b110xxxxx (where ⁇ x ⁇ represents a ⁇ 1 ⁇ or a ⁇ 0 ⁇ and the leading ⁇ b ⁇ indicates a binary representation) indicates that the I8-string has two octets and b11111110 indicates that the I8-string has seven octets.
- Each trailing octet after the leading octet begins with the bit sequence b101xxxxx.
- a two octet I8-string might be b110xxxxx b101xxxxx. It should be noted that one exception exists to this in that the lead octet of a seven octet I8-string can be all 1's (i.e--0xFF) when the most significant bit of the corresponding U-string is a 1.
- First stage 24 transforms a U-string input, in a specified format, to an I8-string output according to the table shown in Appendix A, for UCS-2, and according to the table shown in Appendix B for UCS-2 with the S-zone.
- the table shown in Appendix C is used for UCS-4.
- the first two columns represent the lower and upper values of the U-string to which the table row applies, and these values are represented as 16 bit values in UCS-2 and 32 bit values in UCS-4, and the next column represents the number of octets in the corresponding I8-string.
- the next column in the table represents the number of bits from the U-string that are contained in the I8-string in the form M(n), where M represents the maximum number of bits that can be carried in the given number of octets assigned to the I8-string and (n) represents the number of bits which are varied to indicate the value within the From/To range for that table row.
- the next column shows the permitted values for the octet sequence for the I8-string, in binary form, with the lowest and greatest values shown, along with the bit pattern of the permitted values.
- the next column shows the lowest and greatest permitted octet sequence values in hexadecimal form and these correspond to the transformed values of the From and the To values in the first two columns.
- Transformation from an I8-string back to a valid UCS string is accomplished by concatenating the values of the x bits shown in the appropriate table row, stripping off the leading 1's and 0's of each octet, and padding the resulting concatenated string with leading 0's to obtain a final UCS string of the desired two octet or four octet form.
- the "shortest” possible encoded value is defined to be the correct value.
- This "shortest string rule” is also employed in the presently preferred embodiment of the invention.
- the table in Appendix D shows the form of I8-string octets from the U-strings transformed by stage 24.
- the table in Appendix E shows the form of I8-string octets from U-strings transformed by a prior art UTF-8 transform.
- first stage 24 transform data between fixed-length multi-octet (UCS-4 or UCS-2) formats and a multi-octet format of from one to seven octets.
- the transformation employed ensures that a selected set of characters are transformed to single octet values corresponding to ASCII/ISO-8 bit character set assignments, as defined in ISO/IEC 4873.
- the EBCDIC control set is not identical to the C0 and C1 sets of ISO/IEC 4873, but the number of control characters is the same (i.e. -65).
- a default correspondence, as defined in IBM's Character Data Representation Architecture (CDRA), as published by IBM, is maintained in a presently preferred embodiment of the present invention.
- CDRA Character Data Representation Architecture
- I8-string is an intermediate representation in the transformation between UCS and EBCDIC-friendly representations
- I8-strings can also be directly employed in ASCII/ISO-8 bit-based systems.
- the present invention will transform information between UCS and the I8, ASCII/ISO-8 bit-friendly, format.
- EBCDIC has different character assignments for use with various languages, and/or in various countries, etc. and these different character assignments are generally referred to as code pages.
- EBCDIC code page 1047 (commonly referred to as the "EBCDIC Open Systems” code page) has different assignments and/or characters than does EBCDIC code page 37 (commonly referred to as the "US/Canada CECP" code page).
- a set of values can be defined for "n" which correspond to various EBCDIC code pages.
- stage 28 can perform a transformation between I8-strings and E1-strings, or E2-strings, etc.
- Each En-string is a multi-octet transformed representation of the I8-string, and thus the U-string.
- the actual conversion of I8-strings to an En-string is performed by table look up which has a unique one to one mapping between I8-string octets and En-string octets and which is symmetric, i.e.--when an I8-string is converted to an En-string and then converted back to an I8-string, the result is identical to the original I8-string.
- the transformation is performed in an octet by octet manner.
- a character preservation principle is employed for the graphic characters of the I8-string (octet values in the range 0x00 to 0x9F), while an octet preservation principle is employed for the range 0xA0 to 0xFF.
- the transformation employed in stage 28 preserves the single octet representation of all EBCDIC control characters by assigning I8-string octets in the ranges of 0x0 to 0x1F and 0x80 to 0x9F, and character 0x7F to EBCDIC octets in the range of 0x00 to 0x3F and to 0xFF.
- the transform also preserves the single octet representation for the set of 95 graphic characters (including the SPACE character) of the ASCII/ISO-8 bit character set at their allocated positions in the target EBCDIC code page (indicated by the selected value of ⁇ n ⁇ ) and preserves the leading octets and trailing octets from the I8-string as their corresponding single octets in the En-string.
- the transform maintains the symmetry between the forward and reverse pairings. As the transform maintains the single octet representation of EBCDIC control characters and graphics characters, En-strings are EBCDIC-friendly.
- stage 28 of whether a sequence is a single octet or multi-octet or whether an octet is a leading or trailing octet is dependent upon the target EBCDIC code page.
- the technique which is presently preferred is to use a reverse vector look-up to locate the I8-string and then determine the resultant octet using the I8-string rules by consulting a table, such as that shown in Appendix D.
- a shadow vector containing the category of each octet in the En-string can be constructed and employed.
- Complete definitions of the above-mentioned code pages are available from a variety of sources and will thus not be described further herein.
- GCGID refers to an ID defined for the glyph.
- Table 1 in Appendix G shows a table for converting between single octet I8-strings and single octet E1-strings (code page 1047) and table 2 shows the categories of octets in E1-strings.
- Table 3 in Appendix G shows a table for converting between single octet I8-strings and single octet E2-strings (code page 500) and table 4 shows the categories of octets in E2-strings.
- Table 5 in Appendix G shows a table for converting between single octet I8-strings and single octet E3-strings (code page 37) and table 6 shows the categories of octets in E3-strings.
- a reverse transform-vector lookup is employed and range checks (using the table in Appendix F, for example) are performed to determine if the I8-string is a single octet, leading octet or trailing octet, and how many octets are in the string if it is a multi-octet string.
- Single octet conversions are then performed using the appropriate ones of tables 1 through 6 of Appendix G.
- the values 0xFFFE and 0xFFFF are not used for character allocation in any plane. Specifically, 0xFFFE is reserved for use as a Signature and 0xFFFF is used to represent a numeric value that is guaranteed not to be a character. 0xFFFF is often used for purposes such as indicated the end of an index of characters, etc. While UTF-8 avoids the use of 0xFE and 0xFF in it's octets, the I8-strings produced by stage 24 and En-strings produced by stage 28 do use the 0xFE and 0xFF values.
- 0xFE and 0xFF are lead octets of seven-octet I8-strings but they are surrounded by a value less than 0xC0.
- the I8-string to En-string pairings are 0xFE to 0x8E or 0x4A and 0xFF to 0xDF or 0xE1.
- the values 0xFE and 0xFF are generated by converting I8-string values according the appropriate conversion table (depending upon the target code page).
- the I8-string to En-string pairings are 0xDA or 0xBF to 0xFE and 0x9F to 0xFF.
- 0xBF is the last element of the set of trailing octets possible in a multi-octet I8-string and must be preceded by a lead octet and zero or more trailing octets (all within the range of 0xA0 to 0xFF).
- 0x9F cannot precede an 0xBF in a properly formed I8-string, and thus the sequence 0xFFFE cannot appear in an En-string.
- 0x9F is associated with a control character, specifically the "Application Program Command (APC)" character in ISO-8, C1.
- API Application Program Command
- APC is followed by a parameter string using values from 0x8 to 0x0D and from 0x20 to 0x7E and is terminated by the control function "String Terminator (ST)" which is associated with value 0x9C in ISO-8, C1.
- ST String Terminator
- E4-strings have been reserved for special use.
- the different octets of the E1, E2 or E3-string are not well grouped for checking.
- a single octet to single octet vector lookup is employed such that octets of E4-strings can be examined directly.
- Table 1 of Appendix H shows the groupings for E4-strings and table 2 shows the distribution of octets from single octet E4-strings and table 3 shows the categories of the octets in E4-strings.
- Table 4 shows a table for converting between single octet I8-strings and single octet E4-strings.
- E4-strings employ the E1 mappings as a base for mapping single octets in the range 0x00-0x9F from the I8-string and the remaining space is allocated to group leading and trailing octets in contiguous ranges, where possible.
- the distribution of single octets is such that it is not always possible to keep each category in a contiguous range.
- Table 1 in Appendix I shows a table of the groupings of E5-string octets and table 2 shows a table for converting between single octet I8-strings and single octet E5-strings (code page 290).
- Table 3 shows the categories of octets in E5-strings.
- the present invention provides a novel system and method of allowing information and/or systems using one or more EBCDIC code pages to represent information to transparently access UCS-coded information and/or systems.
- the first stage of the invention transforms information between fixed-length multiple-octet representations, such as UCS-2or UCS-4, and a variable-length multiple-octet representation wherein the representation of a selected set of characters as single octets is ensured.
- the second stage of the invention transforms information from a variable-length multiple-octet representation to another variable-length multiple-octet representation.
- the transformation is performed on an octet by octet basis, and thus the number of octets representing a character in the output of the transform is the same as the number of octets representing the character in the input of the transform.
- the transform thus preserves single-octet characters as single octets through the transformation. Further, the transform can assign a selected set of invariant or other characters to selected values. While the above discussion concentrates on transformation between UCS and EBCDIC-friendly representations, the present invention is not so limited and can be employed to transform information between UCS and other variable-length multiple-octet representations. Similarly, the present invention can be employed to transform information between other fixed-length multiple-octet representations and variable-length multiple-octet representations.
Abstract
Description
APPENDIX A __________________________________________________________________________ U-string, UCS-2 Form 18-string From To # of # of Octet Sequence (Hex) (Hex) Octets Bits bits (x = 0 or 1) Hex __________________________________________________________________________ 00 1F 1 8 00000000 00 (C0 set) (5) ≦000xxxxx ≦00011111 ≦1F 20 7F 1 8 00100000 20 (G0 set + (7) ≦0xxxxxxx DEL) ≦01111111 ≦7F 80 9F 1 8 10000000 80 (C1 set) (5) ≦100xxxxx ≦10011111 ≦9F A0 3FF 2 10 11000101 10100000 C5 A0 (10) ≦110xxxxx 101xxxxx ≦11011111 10111111 ≦DF BF 400 3FFF 3 14 11100001 10100000 10100000 E1 A0 A0 (14) ≦1110xxxx 101xxxxx 101xxxxx ≦11101111 10111111 10111111 ≦EF BF BF 4000 FFFF 4 18 11110000 10110000 10100000 10100000 F0 B0 A0 A0 (BMP (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx Limit) ≦11110001 10111111 10111111 10111111 ≦F1 BF BF BF __________________________________________________________________________
APPENDIX B __________________________________________________________________________ U-string, UCS-2 Form Including S-Zones 18-string From To # of # of Octet Sequence (Hex) (Hex) Octets Bits bits (x = 0 or 1) Hex __________________________________________________________________________ 4000 D7FF 4 18 11110000 10110000 10100000 10100000 F0 B0 A0 A0 (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx ≦11110001 10110101 10111111 10111111 ≦F1 B5 BF __________________________________________________________________________ BF Note: Valid pairs (HI,LO) of SZone RCelements used to transform planes 1 to 3 in UTF16, are shown below
HI = D800 HI = D8BF 4 18 11110010 10100000 10100000 10100000 F2 A0 A0 A0 + + (18) ≦11110xxx 101xxxxx 101xxxxx 101xxxxx LO = DC00 LO = DFFF ≦11110111 10111111 10111111 10111111 ≦F7 BF BF BF (= 10000) (= 3FFFF) __________________________________________________________________________ Note: HI SZone RCelements that are used for planes 1 to 3 in UTF16, but are not part of valid (HI,LO) pairs follow D800 D8BF 4 18 11110001 10110110 10100000 10100000 F1 B6 A6 A0 S-Zone HI (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx (For 1st three ≦11110001 10110110 10100101 10111111 ≦F1 B6 BF BF planes) __________________________________________________________________________ Note: Valid pairs of (HI,LO) SZone RCelements used for planes 4 to 16 in UTF16, are shown below HI = D8C0 HI = DBFF 5 22 11111000 10101000 10100000 10100000 F8 A8 A0 A0 + + (21) 10100000 A0 LO = DC00 LO = DFFF ≦1111100x 101xxxxx 101xxxxx 101xxxxx (= 40000) (= 10FFFF) 101xxxxx ≦F9 A1 BF BF ≦11111001 10100001 10111111 10111111 BF 10111111 __________________________________________________________________________ Note: HI SZone RCelements that are used for planes 4 to 16 in UTF16, but are not part of valid (HI,LO) pairs follow D8C0 DBFF 4 18 11110001 10110110 10100110 10100000 F1 B6 A6 A0 S-Zone HI (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx (for planes 4 ≦11110001 10110110 10111111 10111111 ≦F1 B6 BF BF to 16) __________________________________________________________________________ Note: LO SZone RCelements that are not part of a valid (HI,LO) pair follo DC00 DFFF 4 18 11110001 10110111 10100000 10100000 F1 B7 A0 A0 S-Zone LO (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx (for planes 1 ≦11110001 10110111 10111111 10111111 ≦F1 B7 BF BF to 16) E000 FFFF 4 18 11110001 10111000 10100000 10100000 F1 B8 A0 A0 (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx ≦11110111 10111111 10111111 10111111 ≦F1 BF BF __________________________________________________________________________ BF
APPENDIX C __________________________________________________________________________ U-string, UCS-4 Form Including S-Zones 18-string From To # of # of Octet Sequence (Hex) (Hex) Octets Bits bits (x = 0 or 1) Hex __________________________________________________________________________ 00 1F 1 8 00000000 00 (C0 set) (5) ≦000xxxxx ≦00011111 ≦1F 20 7F 1 8 00100000 20 (G0 set + (7) ≦0xxxxxxx DEL) ≦01111111 ≦7F 80 9F 1 8 10000000 80 (C1 set) (5) ≦100xxxxx ≦10011111 ≦9F A0 3FF 2 10 11000101 10100000 C5 A0 (10) ≦110xxxxx 101xxxxx ≦11011111 10111111 ≦DF BF 400 3FFF 3 14 11100001 10100000 10100000 E1 A0 A0 (14) ≦1110xxxx 101xxxxx 101xxxxx ≦EF BF ≦11101111 10111111 10111111 BF 4000 FFFF 4 18 11110000 10110000 10100000 10100000 F0 B0 A0 (BMP (16) ≦1111000x 101xxxxx 101xxxxx 101xxxxx A0 Limit) ≦11110001 10111111 10111111 10111111 ≦F1 BF BF BF 10000 3FFFF 4 18 11110010 10100000 10100000 10100000 F2 A0 A0 (Planes 1 (18) ≦11110xxx 101xxxxx 101xxxxx 101xxxxx A0 to 3) ≦11110111 10111111 10111111 10111111 ≦F7 BF BF BF 40000 10FFFF 5 22 11111000 10101000 10100000 10100000 10100000 F8 A8 A0 (Planes 4 (21) ≦1111100x 101xxxxx 101xxxxx 101xxxxx A0 A0xxx to 16) ≦11111001 10100001 10111111 10111111 ≦F9 A1 BF BF BF 110000 3FFFFF 5 22 11111001 10100010 10100000 10100000 10100000 F9 A2 A0 (22) ≦111110xx 101xxxxx 101xxxxx 101xxxxx A0 A0xxx ≦11111011 10111111 10111111 10111111 ≦FB BF BF BF BF 400000 3FFFFFF 6 26 11111100 10100100 10100000 10100000 10100000 FC A4 A0 (26) 10100000 A0 A0 A0 ≦1111110x 101xxxxx 101xxxxx 101xxxxx ≦FD BF 101xxxxx BF BF BF ≦11111101 10111111 10111111 10111111 BF111111 10111111 4000000 3FFFFFFF 7 30 11111110 10100010 10100000 10100000 10100000 FE A2 A0 (30) 10100000 10100000 A0 A0 A0 ≦11111110 101xxxxx 101xxxxx 101xxxxx A01xxxxx 101xxxxx 101xxxxx ≦FE BF ≦11111110 10111111 10111111 10111111 BF BF BF 10111111 10111111 1011l111 BF BF 40000000 7FFFFFFF 7 31 11111111 10100000 10100000 10100000 10100000 FF A0 A0 (special (31) 10100000 10100000 A0 A0 A0 lead ≦11111111 101xxxxx 101xxxxx 101xxxxx A01xxxxx byte) 101xxxxx 101xxxxx ≦FF BF ≦11111111 10111111 10111111 10111111 BF BF BF 10111111 10111111 10111111 BF BF __________________________________________________________________________
APPENDIX D __________________________________________________________________________ Hi →Low Nibble of 18-string 1 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -A -B -C -D -E -F 0- C0 Set 1- (Single Octets) 2- G0 Set and DEL 3- (Single Octets) 4- 5- 6- 7- 8- C1 Set 9- (Single Octets) A- 32 Trailing Octets B- C- 32 Lead Octets of 2-Octet Sequence D- E- 16 Lead Octets of 3-Octet Sequence F- 8 Lead Octets of 4-Octet Sequence 4 Lead Octets of 2 Lead Octets of 2 Lead Octets of 5-Octet Sequence 6-Octet Sequence 7-Octet Sequence __________________________________________________________________________
APPENDIX E __________________________________________________________________________ Hi →Low Nibble of 18-string ↓ -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -A -B -C -D -E -F 0- C0 Set 1- (Single Octets) 2- G0 Set and DEL 3- (Single Octets) 4- 5- 6- 7- 8- 64 Trailing Octets 9- C1 Set is not preserved as Single Octets A- B- C- 32 Lead Octets of 2-Octet Sequence D- E- 16 Lead Octets of 3-Octet Sequence F- 8 Lead Octets of 4-Octet Sequence 4 Lead Octets of 2 Lead Octets of 2 Unused 5-Octet Sequence 6-Octet Sequence __________________________________________________________________________
APPENDIX F __________________________________________________________________________ I8-string 1047 500 37 Hex Glyph GCGID UCS Name Hex Var Hex =/# Hex =/# __________________________________________________________________________ 21 | SP02 Exclamation Mark 5A V 4F # 5A = 5B SM06 Left Square Bracket AD V 4A # BA # 5D ! SM08 Right Square Bracket BD V 5A # BB # 5E SD15 Circumflex Accent 5F V 5F = B0 # 7C | SM13 Vertical Line 4F V BB # 4F = A2 ¢ SC04 Cent Sign 4A V B0 # 4A = A8 u SD17 Diaresis BB V BD # BD # AC SM66 Not Sign B0 V BA # 5F # DD Y LY12 Latin Capital Y with Acute BA V AD # AD # __________________________________________________________________________ Note: The V in the Var column indicates if the character is not part of GCSGID 640. The `=` in the =/# column indicates the value in the Hex column equals the Hex value of the 1047 code page and a `#` indicates inequality
TABLE 1 __________________________________________________________________________ Hi →Lo Nibble of I8-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 37 2D 2E 2F 16 05 25 0B 0C 0D 0E 0F 1- 10 11 12 13 3C 3D 32 26 18 19 3F 27 1C 1D 1E 1F 2- 40 5A 7F 78 5B 6C 50 7D 4D 5D 5C 4E 6B 60 48 61 3- F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 7A 5E 4C 7E 6E 6F 4- 7C C1 C2 C3 C4 C5 C6 C7 C8 C9 D1 D2 D3 D4 D5 06 5- D7 D8 D9 E2 E3 E4 E5 E6 E7 E8 E9 AD E0 80 5F 6D 6- 79 81 82 83 84 85 86 87 88 89 91 92 93 94 95 96 7- 97 98 99 A2 A3 A4 A5 A6 A7 A8 A9 C0 4F D0 A1 07 8- 20 21 22 23 24 15 06 17 28 29 2A 2B 2C 09 0A 1B 9- 30 31 1A 33 34 35 36 08 38 39 3A 38 84 14 3E FF A- 41 AA 4A 81 9F 82 6A 85 88 B4 9A 8A B0 CA AF BC B- 90 8F EA FA BE AD 86 83 9D DA 98 88 B7 88 89 AB C- 64 65 62 66 63 67 9E 68 74 71 72 73 78 75 76 77 D- AC 69 ED EE EB EF EC 8F 80 FD FE FB FC BA AE 59 E- 44 45 42 46 43 47 9C 48 54 51 52 53 58 55 56 57 F- 8C 49 CD CE C8 CF CC E1 70 DD DE DB DC 8D 8E DF __________________________________________________________________________ Hi →Lo Nibble of E1-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 9C 09 86 7F 97 8D 8E 0B 8C 0D 0E 0F 1- 10 11 12 13 9D 85 88 87 18 19 92 8F 1C 1D 1E 1F 2- 80 81 82 83 84 0A 17 1D 88 89 8A 8B 8C 05 06 07 3- 9D 91 16 93 94 95 96 04 98 99 9A 98 14 15 9E 1A 4- 28 A0 E2 E4 E0 E1 E3 E5 E7 F1 A2 2E 3C 28 28 7C 5- 26 E9 EA EB E8 ED EE EF EC DF 21 24 2A 29 38 5E 6- 2D 2F C2 C4 C0 C1 C3 C5 C7 D1 A6 2C 25 5F 3E 3F 7- F8 C9 CA CB C8 CD CE CF CC 60 3A 23 40 27 3D 22 8- D8 61 62 63 64 65 66 67 68 69 AB 88 F0 FD FE B1 9- 80 6A 6B 6C 6D 6E 6F 70 71 72 AA BA E6 B8 C6 A4 A- 85 7E 73 74 75 76 77 78 79 7A A1 DF D0 58 DE AE D- AC A3 A5 87 A9 A7 86 8C 8D DE DD A8 AF 5D 84 D7 C- 78 41 42 43 44 45 46 47 48 49 AD F4 F6 F2 F3 F5 D- 7D 4A 48 4C 1D 4E 4F 50 51 52 DY FB FC FY FA FF E- 5C F7 53 54 55 56 57 58 59 5A B2 D4 D6 D2 D3 D5 F- 30 31 32 33 34 35 36 37 38 39 B3 DB DC D9 DA 9F __________________________________________________________________________
TABLE 2 __________________________________________________________________________ Hi →Lo Nibble of E1-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 1- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 2- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 3- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 4- ii tt 33 33 33 33 33 33 33 44 tt ii ii ii ii vv 5- ii 33 33 33 33 33 33 33 33 22 vv vv ii ii il vv 6- ii ii 22 22 22 22 22 22 22 22 tt ii ii ii ii ii 7- 55 22 22 22 22 22 22 22 22 vv ii vv vv ii ii ii 8- 22 ii ii ii ii ii ii ii ii ii tt tt 44 66 77 tt 9- tt ii ii ii ii ii ii ii ii ii tt tt 33 tt 22 tt A- tt vv ii ii ii ii ii ii ii ii tt tt 22 vv 22 tt B- tt tt tt tt tt tt tt tt tt tt 22 tt tt vv tt 22 c- vv ii ii ii ii ii ii ii ii ii tt 44 44 44 44 44 D- vv ii ii ii ii ii ii ii ii ii tt 55 65 55 55 77 E- vv 44 ii ii ii ii ii ii ii ii tt 22 22 22 22 22 F- ii ii ii ii ii ii ii ii ii ii tt 22 22 22 22 cc __________________________________________________________________________ Legend: cc = control character; ii = invariant, part of syntactic character set; vv = variant part of ISO/IEC 646 (IRV) (ASCII) but varies among EBCDIC code page definitions; all cc, ii and vv octets are single octets. tt = trailing octet in a multipleoctet Enstring: 22, 33, 44, 55, 66, 77 = Firs of 2octet, first of 3octet, . . . , or first of 7octet in a multipleoctet Enstring.
TABLE 3 __________________________________________________________________________ Hi →Lo Nibble of I8-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 D3 37 2D 2E 2F 16 D5 25 DB 0C D0 0E DF 1- 10 11 12 13 3C 30 32 26 18 19 3F 27 1C 1D 1E 1F 2- 40 4F 7F 78 58 6C 5D 7D 4D 5D 5C 4E 6B 60 4B 61 3- FD F1 F2 F3 F4 F5 F6 F7 F8 F9 7A 5E 4C 7E 6E 6F 4- 7C C1 C2 C3 C4 C5 C6 C7 C8 C9 D1 D2 D3 D4 D5 D6 5- 07 08 09 E2 E3 E4 E5 E6 E7 E8 E9 4A E0 5A 5F 60 6- 79 81 82 83 84 85 86 87 88 89 91 92 93 94 95 96 7- 97 98 99 A2 A3 A4 A5 A6 A7 A8 A9 CD BB DD A1 D7 8- 20 21 22 23 24 15 06 17 28 29 2A 2B 2C D9 DA 1B 9- 30 31 1A 33 34 35 36 08 38 39 3A 3B D4 14 3E FF A- 41 AA B0 B1 9F B2 6A 85 BD B4 9A DA BA CA AF BC B- 90 8F EA FA BE AD B6 83 9D DA 9B 8B 87 88 B9 AB C- 64 65 62 66 63 67 9E 68 74 71 72 73 78 75 76 77 D- AC 69 ED EE EB EF EC BF 80 FD FE FB FC AD AE 59 E- 44 45 42 46 43 47 9C 48 54 51 52 53 58 55 56 57 F- 8C 49 CD CE CB CF CC E1 70 DD DE DB DC 8D 8E DF __________________________________________________________________________ Hi →Lo Nibble of E2-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- DD 01 02 03 9C D9 86 7F 97 8D BE DB DC DD DE DF 1- 10 11 12 13 9D 85 D8 87 18 19 92 8F 1C 1B 1E 1F 2- 80 B1 82 83 84 0A 17 1B 88 89 BA 8B 8C D5 06 07 3- 9D 91 16 93 94 95 96 D4 98 99 9A 9B 14 15 9 1A 4- 20 AD E2 E4 ED E1 E3 E5 E7 F1 5B 2E 3C 28 2B 21 5- 26 E9 EA EB E8 ED EE EF EC DF 5D 24 2A 29 3B 5E 6- 2D 2F C2 C4 CD C1 C3 C5 C7 D1 A6 2C 25 5F 3E 3F 7- F8 C9 CA CB C8 CD CE CF CC 6D 3A 23 4D 27 3D 22 8- D8 61 62 63 64 65 66 67 68 69 AB BB FD FD FE B1 9- BD 6A 6B 6C 6D 6E 6F 7D 71 72 AA BA E6 B8 C6 A4 A- 85 7E 73 74 75 76 77 78 79 7A A1 BF DD DD DE AE B- A2 A3 A5 B7 A9 A7 B6 BC BD BE AC 7C AF AD B4 D7 C- 7B 41 42 43 44 45 46 47 48 49 AD F4 F6 F2 F3 F5 D- 7D 4A 4B 4C 4B 4E 4F 5D 51 52 B9 FB FC F9 FA FF E- 5C F7 53 54 55 56 57 58 59 5A D2 D4 D6 D2 D3 D5 F- 3D 31 32 33 34 35 36 37 38 39 B3 DB DC D9 DA 9F __________________________________________________________________________
TABLE 4 __________________________________________________________________________ Hi →Lo Nibble of E2-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 1- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 2- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 3- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 4- ii tt 33 33 33 33 33 33 33 44 vv ii ii ii ii vv 5- ii 33 33 33 33 33 33 33 33 22 vv vv ii ii ii vv 6- ii ii 22 22 22 22 22 22 22 22 tt ii ii ii ii ii 7- 55 22 22 22 22 22 22 22 22 vv ii vv vv ii ii ii 8- 22 ii ii ii ii ii ii ii ii ii tt tt 44 66 77 tt 9- tt ii ii ii ii ii ii ii ii ii tt tt 33 tt 22 tt A- tt vv ii ii ii ii ii ii ii ii tt tt 22 22 22 tt B- tt tt tt tt tt tt tt tt tt tt tt vv tt tt tt 22 C- vv ii ii ii ii ii ii ii ii ii tt 44 44 44 44 44 D- vv ii ii ii ii ii ii ii ii ii tt 55 66 55 55 77 E- vv 44 ii ii ii ii ii ii ii ii tt 22 22 22 22 22 F- ii ii ii ii ii ii ii ii ii ii tt 22 22 22 22 cc __________________________________________________________________________ Legend: cc = control character; ii = invariant, part of syntactic character set; vv = variant part of ISO/IEC 646 (IRV) (ASCII) but varies among EBCDIC code page definitions; all cc, ii and vv octets are single octets. tt = trailing octet in a multipleoctet Enstring: 22, 33, 44, 55, 66, 77 = Firs of 2octet, first of 3octet, . . . , or first of 7octet in a multipleoctet Enstring.
TABLE 5 __________________________________________________________________________ Hi →Lo Nibble of I8-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 37 2D 2E 2F 16 05 25 0B 0C 0D 0E 0F 1- 10 11 12 13 3C 3D 32 26 18 19 3F 27 1C 1D 1E 1F 2- 40 5A 7F 7B 5B 6C 50 7D 4D 5D 5C 4E 68 60 4B 61 3- F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 7A 5E 4C 7E 6E 6F 4- 7C C1 C2 C3 C4 C5 C6 C7 C8 C9 D1 D2 D3 D4 05 D6 5- D7 08 D9 E2 E3 E4 E5 E6 E7 E8 E9 AD E0 BD 5F 6D 6- 79 81 82 83 84 85 86 87 88 89 91 92 93 94 95 96 7- 97 98 99 A2 A3 A4 A5 A6 A7 AB A9 C0 4F D0 A1 07 8- 20 21 22 23 24 15 06 17 28 29 2A 2B 2C 09 CA 1B 9- 30 31 1A 33 34 35 36 08 38 39 3A 3B 04 14 3E FF A- 41 AA 4A B1 9F B2 6A 85 BB B4 9A 8A BD CA AF BC B- 90 8F EA FA 8E A0 86 83 9D DA 9B 8B B7 B8 B9 AB C- 64 65 62 66 63 67 9E 68 74 71 72 73 78 75 76 77 D- AC 69 ED EE EB EF EC 8F 80 FD FE F8 FC BA AE 59 E- 44 45 42 46 43 47 9C 48 54 51 52 53 58 55 56 57 F- 8C 49 CD CE CB CF CC E1 70 DD DE 0B DC 8D 8E DF __________________________________________________________________________ Hi →Lo Nibble of E3-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 9C 09 86 7F 97 8D 8E 0B 0C 0D 0E 0F 1- 10 11 12 13 9D 85 08 87 18 19 92 8F 1C 1D 1E 1F 2- 80 81 82 83 84 0A 17 1B 88 89 8A 88 8C 05 06 07 3- 9D 91 16 93 94 95 96 04 98 99 9A 98 14 15 9E 1A 4- 20 A0 E2 E4 E0 E1 E3 E5 E7 F1 A2 2E 3C 28 2B 7C 5- 26 E9 EA EB E8 ED EE EF EC DF 21 24 2A 29 38 AC 6- 2D 2F C2 C4 C0 C1 C3 C5 C7 D1 A6 2C 25 5F 3E 3F 7- F8 C9 CA C8 C8 CD CE CF CC 60 3A 23 40 27 3D 22 8- D8 61 62 63 64 65 66 67 68 69 AB BB F0 FD FE B1 9- B0 6A 68 6C 6D 6E 6F 70 71 72 AA BA E6 BB C6 A4 A- B5 7E 73 74 75 76 77 78 79 7A A1 BF DD DD DE AE B- 5E A3 A5 B7 A9 A7 B6 BC BB BE 5B 5D AF A8 84 D7 C- 7B 41 42 43 44 45 46 47 48 49 AD F4 F6 F2 F3 F5 D- 7D 4A 4B 4C 4D 4E 4F 50 51 52 B9 FB FC F9 FA FF E- 5C F7 53 54 55 56 57 58 59 5A 82 D4 D6 D2 D3 D5 F- 30 31 32 33 34 35 36 37 38 39 B3 DB DC D9 DA 9F __________________________________________________________________________
TABLE 6 __________________________________________________________________________ Hi →Lo Nibble of E3-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 1- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 2- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 3- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 4- ii tt 33 33 33 33 33 33 33 44 tt ii ii ii ii vv 5- ii 33 33 33 33 33 33 33 33 22 vv vv ii ii ii tt 6- ii ii 22 22 22 22 22 22 22 22 tt ii ii ii ii ii 7- 55 22 22 22 22 22 22 22 22 vv ii vv vv ii ii ii 8- 22 ii ii ii ii ii ii ii ii ii tt tt 44 66 77 tt 9- tt ii ii ii ii ii ii ii ii ii tt tt 33 tt 22 tt A- tt vv ii ii ii ii ii ii ii ii tt tt 22 22 22 tt B- vv tt tt tt tt tt tt tt tt tt vv vv tt tt tt 22 C- vv ii ii ii ii ii ii ii ii ii tt 44 44 44 44 44 D- vv ii ii ii ii ii ii ii ii ii tt 55 66 55 55 77 E- vv 44 ii ii ii ii ii ii ii ii tt 22 22 22 22 22 F- ii ii ii ii ii ii ii ii ii ii tt 22 22 22 22 cc __________________________________________________________________________ Legend: cc = control character; ii = invariant, part of syntactic character set; vv = variant part of ISO/IEC 646 (IRV) (ASCII) but varies among EBCDIC code page definitions; all cc, ii and vv octets are single octets. tt = trailing octet in a multipleoctet Enstring: 22, 33, 44, 55, 66, 77 = Firs of 2octet, first of 3octet, . . . , or first of 7octet in a multipleoctet Enstring.
TABLE 1 __________________________________________________________________________ I8-string Number of Octets E4-string Octets Octets Classification in the Grouping (in hexadecimal) __________________________________________________________________________ C0-DF First of two 32 42-49, 52-59, 62-69, 71-78 E0-EF First of three 16 8A, 9A, AA, BA, CA, DA, EA, FA, 8B, 9B, AB, BB, CB, DB, EB, FB F0-F7 First of four 8 B2-B9 F8-FB First of five 4 6A, 70, B0, B1 FC, FD First o fsix 2 41, 51 FE, FF First of seven 2 4A, E1 A0-BF Trailing Octets 32 80, 8C-8F, 90, 9C-9F, A0, AC, AE, AF, BC, BE, BF, CC-CF, DC-DF, EC- EF, FC-FE Note: All the trailing octets are greater than 7F 00-1F, Control 65 00-3F, FF 7F-9F Characters (same as E1, E2, E3) 20-7E G0 set of 95 Invariance positions in 1047, all graphics remaining code points (same as E1) characters __________________________________________________________________________
TABLE 2 __________________________________________________________________________ Hi →Lo Nibble of E4-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 1- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 2- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 3- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cC cc 4- ii .. .. .. .. .. .. .. .. .. .. ii ii ii ii vv 5- ii .. .. .. .. .. .. .. .. .. vv vv ii ii ii vv 6- ii ii .. .. .. .. .. .. .. .. .. ii ii ii ii ii 7- .. .. .. .. .. .. .. .. .. vv ii vv vv ii ii ii 8- .. a b c d e f g h i .. .. .. .. .. .. 9- .. j k l m n o p q r .. .. .. .. .. .. A- .. vv s t u v w x y z .. .. .. vv .. .. B- .. .. .. .. .. .. .. .. .. .. .. .. .. vv .. .. C- vv A B C D E F G H I .. .. .. .. .. .. D- vv J K L M N O P Q R .. .. .. .. .. .. E- vv .. S T U V W X Y Z .. .. .. .. .. .. F- 0 1 2 3 4 5 6 7 8 9 .. .. .. .. .. cc __________________________________________________________________________ Legend: cc = control character; ii = invariant, part of syntactic character set; vv = variant part of ISO/IEC 646 (IRV) (ASCII) but varies among EBCDIC code page definitions; all cc, ii and vv octets are single octets. `..` available for assigning to lead and trailing octets. The letters a-z, A-Z and digits 0-9 are shown in their invariant positions.
TABLE 3 __________________________________________________________________________ Hi →Lo Nibble of E4-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 1- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 2- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 3- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 4- ii 66 22 22 22 22 22 22 22 22 77 ii ii ii ii vv 5- ii 66 22 22 22 22 22 22 22 22 vv vv ii ii ii vv 6- ii ii 22 22 22 22 22 22 22 22 55 ii ii ii ii ii 7- 55 22 22 22 22 22 22 22 22 vv ii vv vv ii ii ii 8- tt a b c d e f g h i 33 33 tt tt tt tt 9- tt j k l m n o p q r 33 33 tt tt tt tt A- tt vv s t u v w x y z 33 33 tt vv tt tt B- 55 55 44 44 44 44 44 44 44 44 33 33 tt vv tt tt C- vv A B C D E F G H I 33 33 tt tt tt tt D- vv J K L M N O P Q R 33 33 tt tt tt tt E- vv 77 S T U V W X Y Z 33 33 tt tt tt tt F- 0 1 2 3 4 5 6 7 8 9 33 33 tt tt tt cc __________________________________________________________________________ Legend: cc = control character; ii = invariant, part of syntactic character set; vv = variant part of ISO/IEC 646 (IRV) (ASCII) but varies among EBCDIC code page definitions; all cc, ii and vv octets are single octets. tt = trailing octet in a multipleoctet Enstring; 22, 33, 44, 55, 66, 77 = Firs of 2octet, first of 3octet, . . . , or first of 7octet in a multipleoctet Enstring. # The letters a-z, A-Z and digits 0-9 are also shown in their invariant positions.
TABLE 4 __________________________________________________________________________ Hi →Lo Nibble of I8-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 37 2D 2E 2F 16 05 25 08 0C 0D 0E 0F 1- 10 11 12 13 3C 3D 32 26 18 19 3F 27 1C 1D 1E 1F 2- 40 5A 7F 7B 58 6C 50 7D 4D 5D 5C 4E 6B 60 4B 61 3- F0 F1 F2 F3 F4 F5 F6 F7 FB F9 7A 5E 4C 7E 6E 6F 4- 7C C1 C2 C3 C4 C5 C6 C7 C8 C9 D1 D2 D3 D4 D5 D6 5- D7 D8 D9 E2 E3 E4 E5 E6 E7 E8 E9 AD E0 BD 5F 6D 6- 79 81 82 83 84 85 86 87 88 89 91 92 93 94 95 96 7- 97 98 99 A2 A3 A4 A5 A6 A7 A8 A9 C0 4F D0 A1 07 8- 20 21 22 23 24 15 06 17 28 29 2A 2B 2C 09 0A 1B 9- 30 31 1A 33 34 35 36 08 38 39 3A 3B 04 14 3E FF A- 80 BC 8D 8E 8F 90 9C 9D 9E 9F AD AC AE AF BC BE B- BF CC CD CE CF DC DD 0E DF EC ED EE EF FC FD FE C- 42 43 44 45 46 47 48 49 52 53 54 55 56 57 58 59 D- 62 63 64 65 66 67 68 69 71 72 73 74 75 76 77 78 E- 8A 9A AA BA CA DA EA FA 8B 9B AB BB CB DB EB FB F- B2 B3 B4 B5 B6 B7 B8 B9 6A 70 B0 B1 41 51 4A E1 __________________________________________________________________________ Hi →Lo Nibble of E4-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 9C 09 86 7F 97 8D 8E 0B 0C 0D 0E 0F 1- 10 11 12 13 9D 85 08 87 18 19 92 BF 1C 1D 1E 1F 2- 80 81 82 83 84 0A 17 1B 88 89 8A 8B 8C 05 06 07 3- 90 91 16 93 94 95 96 04 98 99 9A 9B 14 15 9E 1A 4- 20 FC C0 C1 C2 C3 C4 C5 C6 C7 FE 2E 3C 28 28 7C 5- 26 FD C8 C9 CA CB CC CD CE CF 21 24 2A 29 3B 5E 6- 2D 2F D0 D1 D2 D3 D4 D5 D6 D7 F8 2C 25 5F 3E 3F 7- F9 D8 D9 DA DB DC DD DE DF 60 3A 23 40 27 30 22 8- A0 61 62 63 64 65 66 67 68 69 E0 E8 A1 A2 A3 A4 9- A5 6A 6B 6C 6D 6E 6F 70 71 72 E1 E9 A6 A7 A8 A4 A- AA 7E 73 74 75 76 77 78 79 7A E2 EA AB 5B AC AD B- FA FB F0 F1 F2 F3 F4 F5 F6 F7 E3 EB AE 5D AF B0 C- 7B 41 42 43 44 45 16 47 48 49 E4 EC B1 B2 B3 B4 D- 7D 4A 4B 4C 4D 4E 4F 50 51 52 E5 E0 B5 B6 B7 B8 E- 5C FF 53 54 55 56 57 58 59 5A E6 EE B9 BA BB BC F- 30 31 32 33 34 35 36 37 38 39 E7 EF BD BE BF 9F __________________________________________________________________________
TABLE 1 __________________________________________________________________________ I8-string Number of Octets E5-string Octets Octets Classification in the Grouping (in hexadecimal) __________________________________________________________________________ C0-DF First of two 32 81-8A, 8C-9A, 9C-9F, AC-AE E0-EF First of three 16 41-4A, 51-56 F0-F7 First of four 8 A1-A8 F8-FB First of five 4 57-59, 5B FC, FD First of six 2 A9, AA FE, FF First of seven 2 5F, 6A A0-BF Trailing Octets 32 AF, B1, BA-BF, CA-CF, DA-DF, E1, EA-EF, FA-FE Note: All the trailing octets are greater than AE 00-1F, Control 65 00-3F, FF 7F-9F Characters (same as E1, E2, E3) 20-7E G0 set of 95 As mapped in code page 290 graphics characters __________________________________________________________________________
TABLE 2 __________________________________________________________________________ Hi →Lo Nibble of I8-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 00 01 02 03 37 20 2E 2F 16 05 25 0B 0C 0D 0E 0F 1- 1D 11 12 13 3C 3D 32 26 18 19 3F 27 1C 1D 1E 1F 2- 40 5A 7F 7B E0 6C 50 7D 4D 5D 5C 4E 6B 60 4B 61 3- FD F1 F2 F3 F4 F5 F6 F7 F8 F9 7A 5E 4C 7E 6E 6F 4- 7C C1 C2 C3 C4 C5 C6 C7 C8 C9 D1 D2 D3 D4 D5 D6 5- 07 D8 D9 E2 E3 E4 E5 E6 E7 E8 E9 70 B2 80 B0 6D 6- 79 62 63 64 65 66 67 68 69 71 72 73 74 75 76 77 7- 78 8B 9B AB B3 B4 B5 B6 B7 B8 B9 C0 4F D0 A0 07 8- 20 21 22 23 24 15 06 17 28 29 2A 2B 2C 09 DA 1B 9- 3D 31 1A 33 34 35 36 08 38 39 3A 38 04 14 3E FF A- B1 BA BB BC DD BE BF CA CB CC CD CE CF DA DB DC B- DD DE DF E1 EA EB EC ED EE EF FA FB FC FD FE AF C- 81 82 83 84 85 86 87 88 89 8A 8C 8D 8E 8F 9D 91 D- 92 93 94 95 96 97 98 99 9A 9C 9D 9E 9F AC AD AE E- 41 42 43 44 45 46 47 48 49 4A 51 52 53 54 55 56 F- A1 A2 A3 A4 A5 A6 A7 A8 57 58 59 5B A9 AA 6A 5F __________________________________________________________________________ Hi →Lo Nibble of E3-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- 0D 01 02 03 9C 09 86 7F 97 8D 8E 0B 0C 0D 0E 0F 1- 1D 11 12 13 9D 85 08 87 18 19 92 8F 1C 1D 1E 1F 2- 80 81 82 83 84 0A 17 1B 88 89 8A 8B 8C D5 06 07 3- 90 91 16 93 94 95 96 04 98 99 9A 9B 14 15 9E 1A 4- 20 E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 2E 3C 28 2B 7C 5- 26 EA EB EC ED EE EF F8 F9 FA 21 FB 2A 29 3B FF 6- 2D 2F 61 62 63 64 65 66 67 68 FE 2C 25 5F 3E 3F 7- 5B 69 6A 6B 6C 6D 6E 6F 70 60 3A 23 40 27 3D 22 8- 5D CD C1 C2 C3 C4 C5 C6 C7 C8 C9 71 CA CB CC CD 9- CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 72 D9 DA DB DC A- 7E FD F1 F2 F3 F4 F5 F6 F7 FC FD 73 DD DE DF BF B- 5E A0 5C 74 75 76 77 78 79 7A A1 A2 A3 A4 A5 A6 C- 7B 41 42 43 44 45 46 47 48 49 A7 A8 A9 AA AB AC D- 7D 4A 4B 4C 4D 4E 4F 5D 51 52 AD AE AF BD D1 B2 E- 24 B3 53 54 55 56 57 58 59 5A B4 B5 B6 B7 B8 B9 F- 30 31 32 33 34 35 36 37 38 39 BA BB BC BD BE 9F __________________________________________________________________________
TABLE 3 __________________________________________________________________________ Hi →Lo Nibble of E4-string ↓ 2 3 4 5 6 7 8 9 A B C D E F __________________________________________________________________________ 0- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 1- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 2- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 3- cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc 4- ii 33 33 33 33 33 33 33 33 33 33 ii ii ii ii vv 5- ii 33 33 33 33 33 33 55 55 55 vv 55 ii ii ii 77 6- ii ii a b c d e f g h 77 ii ii ii ii ii 7- vv i j k l m n o p vv ii vv vv ii ii ii 8- vv 22 22 22 22 22 22 22 22 22 22 q 22 22 22 22 9- 22 22 22 22 22 22 22 22 22 22 22 r 22 22 22 22 A- vv 44 44 44 44 44 44 44 44 66 66 s 22 22 22 tt B- vv tt vv t u v w x y z tt tt tt tt tt tt C- vv A B C D E F G H I tt tt tt tt tt tt D- vv J K L M N O P Q R tt tt tt tt tt tt E- vv tt S T U V W X Y Z tt tt tt tt tt tt F- 0 1 2 3 4 5 6 7 8 9 tt tt tt tt tt cc __________________________________________________________________________ Legend: cc = control character; ii = invariant, part of syntactic character set; vv = variant part of ISO/IEC 646 (IRV) (ASCII) but varies among EBCDIC code page definitions; all cc, ii and vv octets are single octets. tt = trailing octet in a multipleoctet Enstring; 22, 33, 44, 55, 66, 77 = Firs of 2octet, first of 3octet, . . . , or first of 7octet in a multipleoctet Enstring. # The letters a-z, A-Z and digits 0-9 are also shown in their invariant positions. Note that lowercase a-z are not in their traditional EBCDIC invariant positions.
Claims (32)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CA002205641A CA2205641A1 (en) | 1997-05-16 | 1997-05-16 | System and method of transforming information between ucs and ebcdic representations employing ebcdic-friendly transformation formats |
CA2205641 | 1997-05-16 |
Publications (1)
Publication Number | Publication Date |
---|---|
US5963155A true US5963155A (en) | 1999-10-05 |
Family
ID=4160681
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/968,219 Expired - Lifetime US5963155A (en) | 1997-05-16 | 1997-11-12 | System and method of transforming information between UCS and EBCDIC representations employing EBCDIC-friendly transformation formats |
Country Status (2)
Country | Link |
---|---|
US (1) | US5963155A (en) |
CA (1) | CA2205641A1 (en) |
Cited By (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6247048B1 (en) * | 1998-04-30 | 2001-06-12 | Openwave Systems Inc | Method and apparatus for transcoding character sets between internet hosts and thin client devices over data networks |
US6370581B2 (en) * | 1998-06-04 | 2002-04-09 | Sun Microsystems, Inc. | Method, apparatus, and product for transmitting multibyte characters in a network |
US20030167357A1 (en) * | 2002-03-04 | 2003-09-04 | International Business Machines Corporation | Enhancement of source code for execution on a computer platform that has a capability of employing a memory file |
US6829620B2 (en) * | 2001-09-20 | 2004-12-07 | International Business Machines Corporation | Table-level unicode handling in a database engine |
US6861963B1 (en) | 2003-11-07 | 2005-03-01 | Microsoft Corporation | Encoding conversion fallback |
US20060047499A1 (en) * | 2004-09-02 | 2006-03-02 | Yen-Fu Chen | Methods, systems and computer program products for national language support using a multi-language property file |
US20060173931A1 (en) * | 2005-01-31 | 2006-08-03 | James Broadhurst | System and method for managing long names in an application programming interface |
US7219088B1 (en) * | 2002-05-29 | 2007-05-15 | Oracle International Corporation | Method and system for analyzing character data |
US7289991B2 (en) | 2004-06-04 | 2007-10-30 | International Business Machines Corporation | Apparatus, system, and method for sorting character representations of data |
US20080072142A1 (en) * | 2006-09-15 | 2008-03-20 | Inventec Appliances Corp. | Code transformation method for an operation system |
US20100095283A1 (en) * | 2006-10-17 | 2010-04-15 | Samsung Sds Co., Ltd. | Migration Apparatus Which Convert Application Program of Mainframe System into Application Program of Open System and Method for Thereof |
US9684654B2 (en) | 2012-03-30 | 2017-06-20 | International Business Machines Corporation | Performing a code conversion in a smaller target encoding space |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6598052B1 (en) * | 1999-02-19 | 2003-07-22 | Sun Microsystems, Inc. | Method and system for transforming a textual form of object-oriented database entries into an intermediate form configurable to populate an object-oriented database for sending to java program |
US7996411B2 (en) | 2003-03-28 | 2011-08-09 | International Business Machines Corporation | Method, apparatus, and system for translating selected characters in a record processing system |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4597057A (en) * | 1981-12-31 | 1986-06-24 | System Development Corporation | System for compressed storage of 8-bit ASCII bytes using coded strings of 4 bit nibbles |
US5225833A (en) * | 1989-10-20 | 1993-07-06 | Digital Equipment Corporation | Character encoding |
US5381144A (en) * | 1992-10-28 | 1995-01-10 | Matsushita Electric Industrial Co., Ltd. | Versatile escape run-level coder for digital video signal processing apparatus |
US5444445A (en) * | 1993-05-13 | 1995-08-22 | Apple Computer, Inc. | Master + exception list method and apparatus for efficient compression of data having redundant characteristics |
US5682158A (en) * | 1995-09-13 | 1997-10-28 | Apple Computer, Inc. | Code converter with truncation processing |
-
1997
- 1997-05-16 CA CA002205641A patent/CA2205641A1/en not_active Abandoned
- 1997-11-12 US US08/968,219 patent/US5963155A/en not_active Expired - Lifetime
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4597057A (en) * | 1981-12-31 | 1986-06-24 | System Development Corporation | System for compressed storage of 8-bit ASCII bytes using coded strings of 4 bit nibbles |
US5225833A (en) * | 1989-10-20 | 1993-07-06 | Digital Equipment Corporation | Character encoding |
US5381144A (en) * | 1992-10-28 | 1995-01-10 | Matsushita Electric Industrial Co., Ltd. | Versatile escape run-level coder for digital video signal processing apparatus |
US5444445A (en) * | 1993-05-13 | 1995-08-22 | Apple Computer, Inc. | Master + exception list method and apparatus for efficient compression of data having redundant characteristics |
US5682158A (en) * | 1995-09-13 | 1997-10-28 | Apple Computer, Inc. | Code converter with truncation processing |
Cited By (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6247048B1 (en) * | 1998-04-30 | 2001-06-12 | Openwave Systems Inc | Method and apparatus for transcoding character sets between internet hosts and thin client devices over data networks |
US7185101B2 (en) * | 1998-06-04 | 2007-02-27 | Sun Microsystems, Inc. | Method, apparatus, and product for transmitting multibyte characters in a network |
US6370581B2 (en) * | 1998-06-04 | 2002-04-09 | Sun Microsystems, Inc. | Method, apparatus, and product for transmitting multibyte characters in a network |
US20020120764A1 (en) * | 1998-06-04 | 2002-08-29 | Sun Microsystems Inc. | Method, apparatus, and product for transmitting multibyte characters in a network |
US6829620B2 (en) * | 2001-09-20 | 2004-12-07 | International Business Machines Corporation | Table-level unicode handling in a database engine |
US20030167357A1 (en) * | 2002-03-04 | 2003-09-04 | International Business Machines Corporation | Enhancement of source code for execution on a computer platform that has a capability of employing a memory file |
US7219088B1 (en) * | 2002-05-29 | 2007-05-15 | Oracle International Corporation | Method and system for analyzing character data |
US6861963B1 (en) | 2003-11-07 | 2005-03-01 | Microsoft Corporation | Encoding conversion fallback |
US7468683B2 (en) | 2003-11-07 | 2008-12-23 | Microsoft Corporation | Encoding conversion fallback |
US20050099324A1 (en) * | 2003-11-07 | 2005-05-12 | Microsoft Corporation | Encoding conversion fallback |
US7289991B2 (en) | 2004-06-04 | 2007-10-30 | International Business Machines Corporation | Apparatus, system, and method for sorting character representations of data |
US20080275692A1 (en) * | 2004-09-02 | 2008-11-06 | Yen-Fu Chen | System and computer program product for national language support using a multi-language property file |
US8010340B2 (en) | 2004-09-02 | 2011-08-30 | International Business Machines Corporation | Method, system and computer program product for national language support using a multi-language property file |
US7440888B2 (en) * | 2004-09-02 | 2008-10-21 | International Business Machines Corporation | Methods, systems and computer program products for national language support using a multi-language property file |
US20080275693A1 (en) * | 2004-09-02 | 2008-11-06 | Yen-Fu Chen | Method, system and computer program product for national language support using a multi-language property file |
US20060047499A1 (en) * | 2004-09-02 | 2006-03-02 | Yen-Fu Chen | Methods, systems and computer program products for national language support using a multi-language property file |
US7957954B2 (en) | 2004-09-02 | 2011-06-07 | International Business Machines Corporation | System and computer program product for national language support using a multi-language property file |
US20060173931A1 (en) * | 2005-01-31 | 2006-08-03 | James Broadhurst | System and method for managing long names in an application programming interface |
US7676797B2 (en) * | 2005-01-31 | 2010-03-09 | Computer Associates Think, Inc. | System and method for managing long names in an application programming interface |
US8286148B2 (en) | 2005-01-31 | 2012-10-09 | Ca, Inc. | System and method for managing long names in an application programming interface |
US20100138814A1 (en) * | 2005-01-31 | 2010-06-03 | Computer Associates Think, Inc. | System and method for managing long names in an application programming interface |
US20080072142A1 (en) * | 2006-09-15 | 2008-03-20 | Inventec Appliances Corp. | Code transformation method for an operation system |
US20100095283A1 (en) * | 2006-10-17 | 2010-04-15 | Samsung Sds Co., Ltd. | Migration Apparatus Which Convert Application Program of Mainframe System into Application Program of Open System and Method for Thereof |
US9684654B2 (en) | 2012-03-30 | 2017-06-20 | International Business Machines Corporation | Performing a code conversion in a smaller target encoding space |
US10545924B2 (en) | 2012-03-30 | 2020-01-28 | International Business Machines Corporation | Performing a code conversion in a smaller target encoding space |
US11675744B2 (en) | 2012-03-30 | 2023-06-13 | International Business Machines Corporation | Performing a code conversion in a smaller target encoding space |
Also Published As
Publication number | Publication date |
---|---|
CA2205641A1 (en) | 1998-11-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5963155A (en) | System and method of transforming information between UCS and EBCDIC representations employing EBCDIC-friendly transformation formats | |
US5309358A (en) | Method for interchange code conversion of multi-byte character string characters | |
US6138086A (en) | Encoding of language, country and character formats for multiple language display and transmission | |
AU596713B2 (en) | Text compression and expansion method and apparatus | |
US5682158A (en) | Code converter with truncation processing | |
US4611280A (en) | Sorting method | |
US7188115B2 (en) | Processing fixed-format data in a unicode environment | |
US5929792A (en) | Method and apparatus for encoding multiple character sets | |
JPS63316231A (en) | Facilitating of computer sorting | |
JP2830884B2 (en) | Input / output conversion method for multiple character code sets | |
US5225833A (en) | Character encoding | |
Lavanya et al. | A simple approach for building transliteration editors for indian languages | |
JPH06119158A (en) | Variable replacement processor | |
US6859151B2 (en) | Digital data transforming method | |
EP2015456A2 (en) | A computer-implemented method for encoding numeric data and a method for encoding data structures for transmission in a telecommunications system, based on said method of encoding numeric data. | |
US6118391A (en) | Compression into arbitrary character sets | |
KR100305466B1 (en) | Method and system for converting multi-byte character strings between interchange codes within a computer system | |
Korpela | A tutorial on character code issues | |
CN111368509A (en) | Method and system for encoding and decoding generic characters | |
Liu et al. | Distributed multilingual applications of the OSI architecture | |
JP2569857B2 (en) | Variable byte length character input control method | |
Haralambous | Unicode | |
Bettencourt et al. | Proposal to disunify Symbols for Legacy Computing from emoji | |
Beg et al. | Dot matrix alphanumeric display system for Arabic | |
Takahashi et al. | Adding Ethiopic Features to Emacs |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHENG, CHUN-YAO ALEXIS;MERU, IBRAHIM ISMAIL;POND, CLAUDE RICHARD;AND OTHERS;REEL/FRAME:008882/0661;SIGNING DATES FROM 19970527 TO 19970602 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 12 |
|
SULP | Surcharge for late payment |
Year of fee payment: 11 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |