JP6895466B2 - Statistical operations on a 2D image processor - Google Patents
Statistical operations on a 2D image processor Download PDFInfo
- Publication number
- JP6895466B2 JP6895466B2 JP2018568354A JP2018568354A JP6895466B2 JP 6895466 B2 JP6895466 B2 JP 6895466B2 JP 2018568354 A JP2018568354 A JP 2018568354A JP 2018568354 A JP2018568354 A JP 2018568354A JP 6895466 B2 JP6895466 B2 JP 6895466B2
- Authority
- JP
- Japan
- Prior art keywords
- content
- array
- data
- column
- execution
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/16—Constructional details or arrangements
- G06F1/20—Cooling means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T1/00—General purpose image data processing
- G06T1/20—Processor architectures; Processor configuration, e.g. pipelining
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/76—Architectures of general purpose stored program computers
- G06F15/80—Architectures of general purpose stored program computers comprising an array of processing units with common control, e.g. single instruction multiple data processors
- G06F15/8007—Architectures of general purpose stored program computers comprising an array of processing units with common control, e.g. single instruction multiple data processors single instruction multiple data [SIMD] multiprocessors
- G06F15/8023—Two dimensional arrays, e.g. mesh, torus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/40—Filling a planar surface by adding surface attributes, e.g. colour or texture
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T5/00—Image enhancement or restoration
- G06T5/40—Image enhancement or restoration by the use of histogram techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/94—Hardware or software architectures specially adapted for image or video understanding
- G06V10/955—Hardware or software architectures specially adapted for image or video understanding using specific electronic processors
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C19/00—Digital stores in which the information is moved stepwise, e.g. shift registers
Description
発明の分野
本明細書は、概して画像処理に関し、より具体的には二次元画像プロセッサ上での統計演算に関する。
Field of Invention The present specification relates generally to image processing, and more specifically to statistical operations on a two-dimensional image processor.
背景
画像処理は、典型的には、アレイに編成されたピクセル値の処理を含む。ここで、空間的に編成された二次元アレイは、画像の二次元的性質を捕捉する（追加の次元は、時間（例えば二次元画像のシーケンス）およびデータタイプ（例えば色）を含み得る）。典型的なケースでは、アレイ化されたピクセル値は、静止画像または動きの画像を捕捉するフレームのシーケンスを生成したカメラによって提供される。従来の画像プロセッサは、典型的には、２つの極端な側面のいずれかに分類される。
Background image processing typically involves processing pixel values organized in an array. Here, the spatially organized two-dimensional array captures the two-dimensional properties of the image (additional dimensions may include time (eg, sequence of two-dimensional images) and data type (eg, color)). In a typical case, the arrayed pixel values are provided by a camera that has generated a sequence of frames that capture a still or moving image. Traditional image processors typically fall into one of two extreme aspects.
第１の極端な側面は、汎用プロセッサまたは汎用状プロセッサ（例えばベクトル命令拡張を備えた汎用プロセッサ）上で実行されるソフトウェアプログラムとして画像処理タスクを実行する。第１の極端な側面は、一般的に非常に汎用性の高いアプリケーションソフトウェア開発プラットフォームを提供するが、関連するオーバーヘッド（例えば、命令フェッチおよびデコード、オンチップおよびオフチップデータの処理、投機的実行）と組み合わされたより粒度の高いデータ構造の使用は、究極的には、プログラムコードの実行中に、データの単位当たり、より多くのエネルギーが消費される結果となる。 The first extreme aspect is performing an image processing task as a software program running on a general purpose processor or general purpose processor (eg, a general purpose processor with vector instruction extensions). The first extreme aspect generally provides a very versatile application software development platform, but with associated overhead (eg instruction fetch and decode, on-chip and off-chip data processing, speculative execution). The use of finer-grained data structures in combination with will ultimately result in more energy being consumed per unit of data during the execution of the program code.
第２の逆の極端な側面は、固定機能のハードワイヤード回路を、遙かに大きなデータブロックに適用する。カスタム設計された回路に直接適用される、（粒度の高いブロックとは対照的な）より大きなデータブロックの使用は、データ単位当たりの消費電力を大幅に削減する。しかしながら、カスタム設計された固定機能回路の使用は、一般に、プロセッサが実行することができるタスクのセットが限られる結果となる。このように、（第１の極端な側面に関連する）幅広く汎用性の高いプログラミング環境は第２の極端な側面においては欠けている。 The second opposite extreme aspect applies fixed-function hard-wired circuits to much larger data blocks. The use of larger data blocks (as opposed to finer blocks), which are applied directly to custom designed circuits, significantly reduces power consumption per unit of data. However, the use of custom-designed fixed-function circuits generally results in a limited set of tasks that the processor can perform. Thus, a broad and versatile programming environment (related to the first extreme aspect) is lacking in the second extreme aspect.
高度に汎用性の高いアプリケーションソフトウェア開発の機会と、データ単位当たりの電力効率の向上とを両立させた技術プラットフォームは、依然として、望ましいが欠けている解決策である。 A technology platform that combines the opportunity to develop highly versatile application software with improved power efficiency per unit of data remains a desirable but lacking solution.
概要
二次元シフトレジスタ内にコンテントのアレイをロードするステップを含む方法が記載される。二次元シフトレジスタは、実行レーンアレイに結合されている。方法は、第１のシーケンスを繰り返し実行するステップを含む。第１のシーケンスは、シフトレジスタによって、特定の行または列に沿って存在する第１のコンテントを、第２のコンテントが存在する別の平行な行または列にシフトするステップと、実行レーンアレイのうちの特定の対応する行または列によって、第１および第２のコンテントに対して数学的演算を実行するステップとを含む。また、方法は、第２のシーケンスを繰り返し実行するステップを含む。第２のシーケンスは、シフトレジスタによって、第１のシーケンスの行または列に平行な結果の行または列に沿った第１の位置のセットから、結果の行または列に沿った対応する第２の位置のセットへ、コンテントをシフトするステップを含む。結果の行または列は、少なくとも部分的に第１のシーケンスの数学的演算から決定された値を有する。第２のシーケンスはさらに、実行レーンアレイによって、第１の位置のセット中のコンテントのアイテム、および第２の位置のセット中のそれぞれのコンテントのアイテムに対して、数学的演算を実行するステップを含む。
A method is described that includes a step of loading an array of content in a two-dimensional shift register. The two-dimensional shift register is coupled to the execution lane array. The method comprises repeating the first sequence. The first sequence is a shift register that shifts the first content along a particular row or column to another parallel row or column where the second content resides, and the execution lane array. Includes steps to perform mathematical operations on the first and second contents by a particular corresponding row or column of them. The method also includes a step of iteratively executing the second sequence. The second sequence, by means of a shift register, is from the first set of positions along the resulting row or column parallel to the row or column of the first sequence to the corresponding second sequence along the resulting row or column. Includes steps to shift content to a set of positions. The resulting row or column has values determined, at least in part, from the mathematical operations of the first sequence. The second sequence further steps the execution lane array to perform mathematical operations on the content items in the first position set and each content item in the second position set. Including.
上記第１のシーケンスおよび上記第２のシーケンスを実行するための手段を有する装置が記載される。 A device having means for performing the first sequence and the second sequence is described.
図面のリスト
以下の説明および添付の図面は、様々な実施形態を例示するために使用される。
詳細な記載
ａ．画像プロセッサハードウェアアーキテクチャおよび動作
図１は、ハードウェアで実現される画像プロセッサのためのアーキテクチャ１００の実施形態を示す。画像プロセッサは、例えば、シミュレートされた環境内で仮想プロセッサ用に書かれたプログラムコードを、ハードウェアプロセッサによって実際に実行されるプログラムコードに変換するコンパイラによってターゲットとされてもよい。図１に示すように、アーキテクチャ１００は、複数のラインバッファユニット１０１＿１〜１０１＿Ｍ（以下、「ラインバッファ」、「ラインバッファユニット」など）を含み、それらは、複数のステンシルプロセッサユニット１０２＿１〜１０２＿Ｎ（以下、「ステンシルプロセッサ」、「ステンシルプロセッサユニット」など）および対応するシート生成部ユニット１０３＿１〜１０３＿Ｎ（以下、「シート生成部」、「シート生成部ユニット」など）に、ネットワーク１０４（例えば、ネットワークオンチップ（ＮＯＣ）（オンチップスイッチネットワーク、オンチップリングネットワークまたは他の種類のネットワークを含む））を介して相互接続される。一実施形態では、どのラインバッファユニットが、ネットワーク１０４を介してどのシート生成部および対応するステンシルプロセッサに接続してもよい。
Detailed description a. Image Processor Hardware Architecture and Operation Figure 1 shows an embodiment of
一実施形態では、プログラムコードはコンパイルされ、対応するステンシルプロセッサ１０２にロードされて、ソフトウェア開発者によって以前に定義された画像処理動作を実行する（プログラムコードは、例えば、設計および実装に応じて、ステンシルプロセッサの関連のシート生成部１０３にもロードされてもよい）。少なくともいくつかの例では、画像処理パイプラインを、第１のパイプラインステージ用の第１のカーネルプログラムを第１のステンシルプロセッサ１０２＿１にロードし、第２のパイプラインステージ用の第２のカーネルプログラムを第２のステンシルプロセッサ１０２＿２にロードするなどによって、実現することができる。第１のカーネルはパイプラインの第１ステージの機能を実行し、第２のカーネルはパイプラインの第２ステージの機能を実行する（その他も同様）。追加の制御フロー方法がインストールされて、出力画像データをパイプラインの１つのステージから次のステージに受け渡す。 In one embodiment, the program code is compiled and loaded into the corresponding stencil processor 102 to perform image processing operations previously defined by the software developer (program code, eg, depending on design and implementation,). It may also be loaded into the relevant sheet generator 103 of the stencil processor). In at least some examples, the image processing pipeline loads the first kernel program for the first pipeline stage into the first stencil processor 102_1 and the second kernel program for the second pipeline stage. Can be realized by loading the second stencil processor 102_2 or the like. The first kernel performs the functions of the first stage of the pipeline, the second kernel performs the functions of the second stage of the pipeline (and so on). An additional control flow method is installed to pass the output image data from one stage of the pipeline to the next.
他の構成では、画像プロセッサは、同じカーネルプログラムコードを動作させる２つ以上のステンシルプロセッサ１０２＿１、１０２＿２を有する並列マシンとして実現することができる。例えば、画像データの高密度かつ高データレートのストリームが、各々が同じ機能を実行する複数のステンシルプロセッサにわたってフレームを広げることによって処理されてもよい。 In other configurations, the image processor can be implemented as a massively parallel machine with two or more stencil processors 102_1, 102_2 running the same kernel program code. For example, a high density, high data rate stream of image data may be processed by spreading frames across multiple stencil processors, each performing the same function.
さらに他の構成では、カーネルの基本的に任意の有向非巡回グラフ（ＤＡＧ）のハードウェアプロセッサへのロードを、それぞれのステンシルプロセッサをそれら自身のプログラムコードのカーネルとともに構成し、適切な制御フローフックをハードウェアに構成して、出力画像をＤＡＧ設計における１つのカーネルから次のカーネルの入力に向けることによって、行なってもよい。 In yet another configuration, the kernel loads basically any directed non-circular graph (DAG) into the hardware processor, each stencil processor is configured with its own program code kernel, and the appropriate control flow. This may be done by configuring the hook in hardware and directing the output image from one kernel to the input of the next kernel in the DAG design.
一般的なフローとして、画像データのフレームは、マクロＩ／Ｏユニット１０５で受信され、フレーム単位でラインバッファユニット１０１のうちの１つ以上に受け渡される。特定のラインバッファユニットは、それの画像データのフレームを、「ライングループ」と呼ばれる画像データのより小さな領域にパースし、次いでライングループをネットワーク１０４を介して特定のシート生成部に受け渡す。ある完全な（ｆｕｌｌ）単数のライングループを、例えば、フレームの複数の連続した完全な行または列のデータで構成することができる（簡潔化のために、本明細書では主に連続した行と称する）。シート生成部は、画像データのライングループを「シート」と呼ばれる画像データのより小さな領域にさらにパースし、そのシートを対応するステンシルプロセッサに提示する。
As a general flow, a frame of image data is received by the macro I /
単一入力の画像処理パイプラインやＤＡＧフローの場合、一般に、入力フレームは、同じラインバッファユニット１０１＿１に向けられ、それは、画像データをライングループにパースし、ライングループをシート生成部１０３＿１（対応するステンシルプロセッサ１０２＿１はパイプライン／ＤＡＧにおいて第１のカーネルのコードを実行している）に向ける。ステンシルプロセッサ１０２＿１による、それが処理するライングループでの動作が終了した後、シート生成部１０３＿１は、出力ライングループを「下流」のラインバッファユニット１０１＿２に送信する（ある使用例では、出力ライングループは、先に入力ライングループを送信したのと同じラインバッファユニット１０１＿１に送り返すことができる）。 In the case of a single input image processing pipeline or DAG flow, the input frame is generally directed to the same line buffer unit 101_1, which parses the image data into a line group and the line group into a sheet generator 103_1 (corresponding). The stencil processor 102_1 is running the code of the first kernel in the pipeline / DAG). After the stencil processor 102_1 finishes operating in the line group it processes, the sheet generator 103_1 sends the output line group to the "downstream" line buffer unit 101_2 (in one use case, the output line group is , Can be sent back to the same line buffer unit 101_1 that previously sent the input line group).
自身のそれぞれの他のシート生成部およびステンシルプロセッサ（例えば、シート生成部１０３＿２およびステンシルプロセッサ１０２＿２）上で実行されるパイプライン／ＤＡＧにおける次のステージ／動作を表わす１つ以上の「消費側」カーネルは、下流ラインバッファユニット１０１＿２から、第１のステンシルプロセッサ１０２＿１によって生成された画像データを受信する。このようにして、第１のステンシルプロセッサ上で動作する「作成側」カーネルは、その出力データが、第２のステンシルプロセッサ上で動作する「消費側」カーネルに転送され、消費側カーネルは、パイプラインまたはＤＡＧ全体の設計と整合する作成側カーネルの後に次のタスクのセットを実行する。 One or more "consumer" kernels representing the next stage / operation in a pipeline / DAG running on its own other sheet generator and stencil processor (eg, sheet generator 103_2 and stencil processor 102_2). Receives image data generated by the first stencil processor 102_1 from the downstream line buffer unit 101_2. In this way, the "creating" kernel running on the first stencil processor transfers its output data to the "consuming" kernel running on the second stencil processor, and the consuming kernel pipes. Perform the following set of tasks after the creator kernel that is consistent with the design of the entire line or DAG.
ステンシルプロセッサ１０２は、画像データの複数のオーバーラッピングステンシルに対して同時に動作するように設計されている。複数のオーバーラッピングステンシルおよびステンシルプロセッサの内部ハードウェア処理能力は、シートのサイズを効果的に決定する。ここでは、ステンシルプロセッサ１０２内で、実行レーンのアレイが一致して動作して、複数のオーバーラッピングステンシルによってカバーされる画像データ表面領域を同時に処理する。 The stencil processor 102 is designed to operate simultaneously on a plurality of overlapping stencils of image data. The internal hardware processing power of multiple overlapping stencils and stencil processors effectively determines the size of the sheet. Here, within the stencil processor 102, the arrays of execution lanes operate in unison to simultaneously process the image data surface area covered by the plurality of overlapping stencils.
以下でより詳細に説明するように、様々な実施形態において、画像データのシートは、ステンシルプロセッサユニット１０２内の二次元レジスタアレイ構造にロードされる。シートおよび二次元レジスタアレイ構造の使用は、大量のデータを、大量のレジスタ空間に、例えば、処理タスクが実行レーンアレイによってその直後にデータに対して直接的に実行される単一のロード動作として移動することによって、電力消費の改善を効果的に提供すると考えられている。さらに、実行レーンアレイおよび対応するレジスタアレイの使用は、容易にプログラマブル／設定可能な異なるステンシルサイズを提供する。 As described in more detail below, in various embodiments, the sheet of image data is loaded into a two-dimensional register array structure within the stencil processor unit 102. The use of sheet and two-dimensional register array structures is the use of large amounts of data into a large amount of register space, for example, as a single load operation in which processing tasks are performed directly on the data by the execution lane array immediately afterwards. It is believed that moving will effectively provide improved power consumption. In addition, the use of execution lane arrays and corresponding register arrays provides different stencil sizes that are easily programmable / configurable.
図２ａ〜図２ｅは、ラインバッファユニット１０１のパースアクティビティ、およびシート生成部ユニット１０３のより粒度の高いパースアクティビティ、ならびにシート生成部１０３に結合されたステンシルプロセッサ１０２のステンシル処理アクティビティの両方のハイレベルの実施形態を示す。
2a-2e show high levels of both the parsing activity of the
図２ａは、画像データ２０１の入力フレームの実施形態を示す。図２ａはまた、ステンシルプロセッサが動作するように設計された３つのオーバーラッピングステンシル２０２（各ステンシルは、３ピクセル×３ピクセルの寸法を有する）の概要を示す。各ステンシルがそれぞれ出力画像データを生成する出力ピクセルは、ベタ黒で強調表示される。簡潔化のために、３つのオーバーラッピングステンシル２０２は、垂直方向にのみオーバーラップするように示されている。実際には、ステンシルプロセッサは、垂直方向および水平方向の両方にオーバーラップするステンシルを有するように設計されてもよいことを認識することが適切である。
FIG. 2a shows an embodiment of an input frame for
図２ａに示すように、ステンシルプロセッサ内でステンシル２０２が垂直にオーバーラップしているため、フレーム内に単一のステンシルプロセッサが動作することができる画像データの広い領域が存在する。以下でより詳細に説明するように、一実施形態では、ステンシルプロセッサは、データを、それらのオーバーラッピングステンシル内で、左から右へ、画像データにわたって処理する（そして、次のラインのセットに対して、上から下の順序で繰り返す）。このように、ステンシルプロセッサがそれらの動作を前方に進めるにつれて、ベタ黒出力ピクセルブロックの数は、水平方向に右に向かって増大する。上述したように、ラインバッファユニット１０１は、ステンシルプロセッサが今後の拡張された数のサイクルにわたって動作するのに十分な入来フレームからの入力画像データのライングループをパースする役割を担う。ライングループの例示的な図示は、陰影領域２０３として示されている。一実施形態では、ラインバッファユニット１０１は、ライングループをシート生成部との間で送受信するための異なるダイナミクスを認識することができる。例えば、「完全なグループ」と呼ばれる１つのモードによれば、画像データの完全な全幅のラインが、ラインバッファユニットとシート生成部との間で受け渡される。「仮想的に高い」と呼ばれる第２のモードによれば、ライングループは最初に全幅行のサブセットで受け渡される。その後、残りの行は、より小さい（全幅未満の）片で順次受け渡される。
As shown in FIG. 2a, since the
入力画像データのライングループ２０３がラインバッファユニットによって画定され、シート生成部ユニットに受け渡されると、シート生成部ユニットはさらに、ライングループをより精細なシートにパースする。これらの精細なシートは、ステンシルプロセッサのハードウェアの制約に、より的確に合うものである。より具体的には、以下でさらに詳細に説明するように、一実施形態では、各ステンシルプロセッサは二次元シフトレジスタアレイからなる。二次元シフトレジスタアレイは、基本的には、画像データを実行レーンのアレイの「真下」にシフトし、そのシフトのパターンによって、各実行レーンは自身のステンシル内のデータに対して動作する（すなわち、各実行レーンは、自身の情報のステンシルに対して処理を行ない、そのステンシルの出力を生成する）。一実施形態では、シートは、二次元シフトレジスタアレイを「満たす」か、さもなければ二次元シフトレジスタアレイにロードされる入力画像データの表面領域である。
When the
以下でより詳細に説明するように、様々な実施形態では、実際には、任意のサイクルでシフト可能な二次元レジスタデータの複数の層が存在する。便宜上、本記載の多くは、「二次元シフトレジスタ」などの用語を、シフト可能な二次元レジスタデータの１つ以上のそのような層を有する構造を指すために単純に使用する。 As described in more detail below, in various embodiments, there are actually multiple layers of two-dimensional register data that can be shifted in any cycle. For convenience, many of this description simply use terms such as "two-dimensional shift register" to refer to a structure having one or more such layers of shiftable two-dimensional register data.
したがって、図２ｂに示すように、シート生成部は、ライングループ２０３から第１のシート２０４をパースし、それをステンシルプロセッサに提供する（ここでは、データのシートは、参照番号２０４によって全体的に識別される５×５の陰影領域に対応する）。図２ｃおよび図２ｄに示すように、ステンシルプロセッサは、オーバーラッピングステンシル２０２をシート上で左から右へ効果的に移動させることによって、入力画像データのシートに対して動作する。図２ｄのように、シート内のデータから出力値を計算することができるピクセル数（黒く塗られた３×３アレイの９個）が使われる（他のピクセル位置は、シート内の情報から決定される出力値を有することができない）。単純化のために、画像の境界領域は無視されている。
Therefore, as shown in FIG. 2b, the sheet generator parses the
図２ｅに示すように、シート生成部は次いで、ステンシルプロセッサが引き続き動作を行なう次のシート２０５を提供する。なお、ステンシルが次のシートに対して動作を開始するときのステンシルの初期位置は、（先に図２ｄに示されている）第１のシート上で使った点の右隣である。新たなシート２０５においても、ステンシルプロセッサが第１のシートの処理と同じ方法で新たなシートに対して動作するにつれ、ステンシルはひたすら右に移動し続ける。
As shown in FIG. 2e, the sheet generator then provides the
なお、出力ピクセル位置を取り囲むステンシルの境界領域に起因して、第１のシート２０４のデータと第２のシート２０５のデータとの間にいくらかの重なりがある。重なりは、シート生成部が重なり合うデータを２回再送信することによって簡単に処理することができる。代替的な実現例では、次のシートをステンシルプロセッサに供給する際に、シート生成部はステンシルプロセッサに新たなデータのみを送るように進めてもよく、ステンシルプロセッサは、前のシートからの重なり合うデータを再利用する。
It should be noted that there is some overlap between the data on the
ｂ．ステンシルプロセッサ設計および動作
図３は、ステンシルプロセッサユニットアーキテクチャ３００の実施形態を示す。図３に示すように、ステンシルプロセッサは、データ計算ユニット３０１、スカラープロセッサ３０２および関連するメモリ３０３およびＩ／Ｏユニット３０４を含む。データ計算ユニット３０１は、実行レーンのアレイ３０５、二次元シフトアレイ構造３０６、およびアレイの特定の行または列に関連する別個のそれぞれのランダムアクセスメモリ３０７を含む。
b. Stencil Processor Design and Operation Figure 3 shows an embodiment of the stencil
Ｉ／Ｏユニット３０４は、シート生成部から受け取ったデータの「入力」シートをデータ計算ユニット３０１にロードし、ステンシルプロセッサからのデータの「出力」シートをシート生成部に格納する役割を担う。一実施形態では、データ計算ユニット３０１へのシートデータのロードは、受け取ったシートを画像データの行／列にパースし、画像データの行／列を二次元シフトレジスタ構造３０６または実行レーンアレイの行／列のそれぞれのランダムアクセスメモリ３０７にロードすることを必要とする（詳細は後述）。シートが最初にメモリ３０７にロードされる場合、実行レーンアレイ３０５内の個々の実行レーンは、適宜、ランダムアクセスメモリ３０７からシートデータを二次元シフトレジスタ構造３０６にロードすることができる（例えば、シートのデータに対する動作のすぐ前のロード命令として）。データのシートのレジスタ構造３０６へのロード（シート生成部から直接的に、またはメモリ３０７から）が完了すると、実行レーンアレイ３０５の実行レーンはデータに対して動作し、最終的に、完成したデータをシートとして直接的にシート生成部に、またはランダムアクセスメモリ３０７に「書き戻す」。実行レーンがランダムアクセスメモリ９０７に書き戻す場合、Ｉ／Ｏユニット３０４はランダムアクセスメモリ３０７からデータをフェッチして出力シートを形成し、出力シートはシート生成部に転送される。
The I /
スカラープロセッサ３０２は、スカラーメモリ３０３からステンシルプロセッサのプログラムコードの命令を読み出し、実行レーンアレイ３０５内の実行レーンに命令を発行するプログラムコントローラ３０９を含む。一実施形態では、データ計算ユニット３０１からシングルインストラクションマルチプルデータ（ＳＩＭＤ）のような動作を実行するために、単一の同じ命令がアレイ３０５内のすべての実行レーンにブロードキャストされる。一実施形態では、スカラーメモリ３０３から読み出され、実行レーンアレイ３０５の実行レーンに発行される命令の命令フォーマットは、命令１つ当たり２つ以上のオペコードを含む非常に長い命令語（ＶＬＩＷ）タイプのフォーマットを含む。他の実施形態では、ＶＬＩＷフォーマットは、（後述するように、実施形態では２つ以上の従来のＡＬＵ動作を指定することができる）各実行レーンのＡＬＵによって実行される数学的機能を指示するＡＬＵオペコードと、（特定の実行レーンまたは実行レーンのセットに対してメモリ動作を指示する）メモリオペコードとの両方を含む。
The
「実行レーン」という用語は、命令を実行することができる１つ以上の実行ユニットのセット（例えば、命令を実行することができる論理回路）を指す。実行レーンは、しかしながら、様々な実施形態では、単なる実行ユニットを超えた、よりプロセッサに似た機能を含むことができる。例えば、１つ以上の実行ユニットに加えて、実行レーンは、受信された命令をデコードする論理回路、または、より複数命令列／複数データ列方式（ＭＩＭＤ）のような設計の場合、命令をフェッチおよびデコードする論理回路を含むことができる。ＭＩＭＤのようなアプローチに関しては、ここでは集中プログラム制御アプローチが主に記載されているが、より分散型のアプローチが様々な代替実施形態（例えば、アレイ３０５の各実行レーン内のプログラムコードおよびプログラムコントローラを含む）において実施されてもよい。 The term "execution lane" refers to a set of one or more execution units capable of executing an instruction (eg, a logic circuit capable of executing an instruction). Execution lanes, however, can include, in various embodiments, more processor-like functions that go beyond just execution units. For example, in addition to one or more execution units, the execution lane fetches instructions in the case of a logic circuit that decodes the received instructions, or in a design such as more multiple instruction sequence / multiple instruction sequence (MIMD). And can include logic circuits to decode. For approaches such as MIMD, the centralized program control approach is primarily described here, but the more distributed approach is a variety of alternative embodiments (eg, program code and program controller within each execution lane of array 305). May be carried out in).
実行レーンアレイ３０５、プログラムコントローラ３０９および二次元シフトレジスタ構造３０６の組み合わせは、広範囲のプログラマブルな機能のための幅広く適応可能／設定可能なハードウェアプラットフォームを提供する。例えば、アプリケーションソフトウェア開発者は、個々の実行レーンが多種多様な機能を実行することができ、任意の出力アレイ位置に近接した入力画像データに容易にアクセスすることができれば、寸法（例えばステンシルサイズ）だけでなく幅広い異なる機能能力を有するカーネルをプログラミングすることができる。
The combination of execution lane array 305,
実行レーンアレイ３０５によって動作が行なわれる画像データのためのデータ記憶装置として機能することとは別に、ランダムアクセスメモリ３０７は、１つ以上のルックアップテーブルを保持することもできる。様々な実施形態では、１つ以上のスカラールックアップテーブルをスカラーメモリ３０３内でインスタンス化することもできる。
Apart from functioning as a data storage device for the image data operated by the execution lane array 305, the
スカラールックアップは、同じインデックスからの同じルックアップテーブルからの同じデータ値を実行レーンアレイ３０５内の各実行レーンに受け渡すことを含む。様々な実施形態では、上述のＶＬＩＷ命令フォーマットは、スカラープロセッサによって実行されるルックアップ動作をスカラールックアップテーブルに向けるスカラーオペコードを含むようにも拡張される。オペコードとともに使用するために指定されるインデックスは、即値オペランドでもよいし、他の何らかのデータ記憶位置からフェッチされてもよい。いずれにせよ、一実施形態では、スカラーメモリ内のスカラールックアップテーブルからのルックアップは、基本的には、同じクロックサイクル中に実行レーンアレイ３０５内のすべての実行レーンに同じデータ値をブロードキャストすることを含む。ルックアップテーブルの使用および動作に関する追加の詳細は、以下でさらに説明する。 Scalar lookup involves passing the same data values from the same lookup table from the same index to each execution lane in the execution lane array 305. In various embodiments, the VLIW instruction format described above is also extended to include scalar opcodes that direct the lookup operations performed by the scalar processor to the scalar lookup table. The index specified for use with the opcode may be an immediate operand or may be fetched from some other data storage location. In any case, in one embodiment, the lookup from the scalar lookup table in the scalar memory basically broadcasts the same data value to all the execution lanes in the execution lane array 305 during the same clock cycle. Including that. Additional details regarding the use and behavior of lookup tables are described further below.
図４は、データ計算ユニット４０１の実施形態を示す。図４に示すように、データ計算ユニット４０１は、二次元シフトレジスタアレイ構造４０６「の上に」論理的に位置決めされる実行レーンのアレイ４０５を含む。上述したように、様々な実施形態では、シート生成部によって提供される画像データのシートが二次元シフトレジスタ４０６にロードされる。実行レーンは、レジスタ構造４０６からのシートデータに対して動作する。
FIG. 4 shows an embodiment of the
実行レーンアレイ４０５およびシフトレジスタ構造４０６は、互いに対して適所に固定される。しかし、シフトレジスタアレイ４０６内のデータは、戦略的かつ調整された態様でシフトして、実行レーンアレイ内の各実行レーンがデータ内の異なるステンシルを処理するようにする。したがって、各実行レーンは、生成されている出力シートにおいて異なるピクセルに対する出力画像値を決定する。図４のアーキテクチャから、実行レーンアレイ４０５が垂直に近接する実行レーンおよび水平に近接する実行レーンを含むので、オーバーラッピングステンシルが垂直に配置されるだけでなく水平にも配置されることは明らかである。
The execution lane array 405 and the
データ計算ユニット４０１のいくつかの注目すべきアーキテクチャ上の特徴には、実行レーンアレイ４０５よりも広い寸法を有するシフトレジスタ構造４０６が含まれる。すなわち、実行レーンアレイ４０５の外側にレジスタの「ハロー」４０９が存在する。ハロー４０９は、実行レーンアレイの２つの側に存在するように示されているが、実現例に応じて、実行レーンアレイ４０５の２つ未満（１つ）またはそれ以上（３つまたは４つ）の側に存在してもよい。ハロー４０５は、データが実行レーン４０５の「下で」シフトしているときに、実行レーンアレイ４０５の境界の外側にこぼれ出るデータのための「スピルオーバ」空間を提供する働きをする。単純なケースとして、実行レーンアレイ４０５の右端を中心とする５×５のステンシルは、ステンシルの最も左側のピクセルが処理されるとき、さらに右側に４つのハローレジスタ位置を必要とすることになる。図示を簡単にするために、図４では、ハローの右側のレジスタが水平方向シフト連結のみを有するものとして示され、ハローの底側のレジスタが垂直方向シフト連結のみを有するものとして示される。しかしながら、名目上の一実施形態では、いずれの側（右、底）のレジスタも、水平方向連結および垂直方向連結の両方を有し得る。
Some notable architectural features of the
アレイの各行および／もしくは各列またはその一部分に結合されたランダムアクセスメモリ４０７によって追加のスピルオーバールームが提供される（例えば、ランダムアクセスメモリは、４つの実行レーン行と２つの実行レーン列にまたがる実行レーンアレイの「領域」に割り当てられてもよい。単純化のために、該当部分の残りは、主に、行および／または列に基づく割り当てスキームを示す）。ここで、実行レーンのカーネル動作において、二次元シフトレジスタアレイ４０６（一部の画像処理ルーチンによって必要とされる場合がある）の外にあるピクセル値の処理が求められる場合、画像データの面は、例えばハロー領域４０９からランダムアクセスメモリ４０７にさらにこぼれ出ることができる。例えば、ハードウェアに含まれるハロー領域が実行レーンアレイ右端の実行レーンの右側におけるわずか４つの記憶素子である場合の、６×６ステンシルを考える。この場合、ステンシルを完全に処理するために、データをハロー４０９の右端からさらに右側にシフトする必要があるであろう。ハロー領域４０９の外側にシフトされたデータは、ランダムアクセスメモリ４０７にこぼれ出るであろう。ランダムアクセスメモリ４０７および図３のステンシルプロセッサの他の適用例を以下でさらに説明する。
図５ａ〜図５ｋは、上述のように実行レーンアレイ「の下で」二次元シフトレジスタアレイ内で画像データがシフトされる態様の動作例を示す。図５ａに示すように、二次元シフトアレイのデータコンテントは第１のアレイ５０７に示され、実行レーンアレイはフレーム５０５によって示される。また、実行レーンアレイ内の２つの隣接する実行レーン５１０が単純化して示されている。この単純化した図示５１０では、各実行レーンは、シフトレジスタからデータを受け付け、ＡＬＵ出力からデータを受け付け（例えば、サイクルにわたってアキュムレータとして動作する）、または出力データを出力先に書き込むことができるレジスタＲ１を含む。
5a-5k show an example of the mode in which the image data is shifted in the 2D shift register array "under" the execution lane array as described above. As shown in FIG. 5a, the data content of the 2D shift array is shown in the
また、各実行レーンでは、ローカルレジスタＲ２において、その「下の」二次元シフトアレイにおけるコンテントが利用可能である。したがって、Ｒ１は実行レーンの物理レジスタであり、Ｒ２は二次元シフトレジスタアレイの物理レジスタである。実行レーンは、Ｒ１および／またはＲ２によって提供されるオペランドに対して動作可能なＡＬＵを含む。さらに詳細に後述するように、一実施形態では、シフトレジスタは、実際にはアレイ位置毎に複数の（ある「深さ」の）記憶／レジスタ素子で実現されるが、シフト動作は記憶素子の１つの面に限られる（例えば、１サイクルにつき記憶素子の１つの面のみをシフトすることができる）。図５ａ〜図５ｋは、これらのより深いレジスタ位置のうちの１つを、それぞれの実行レーンから生じた結果Ｘを格納するために使用するものとして示している。図示を容易にするために、より深い結果のレジスタは、対応するレジスタＲ２の下ではなく、横に図示されている。 Also, in each execution lane, in the local register R2, the content in its "lower" 2D shift array is available. Therefore, R1 is the physical register of the execution lane, and R2 is the physical register of the two-dimensional shift register array. The execution lane contains an ALU that can operate on the operands provided by R1 and / or R2. As will be described in more detail below, in one embodiment, the shift register is actually implemented by a plurality of storage / register elements (of a certain "depth") for each array position, but the shift operation is performed by the storage element. Limited to one surface (eg, only one surface of the storage element can be shifted per cycle). 5a-5k show one of these deeper register positions as being used to store the result X resulting from each execution lane. For ease of illustration, the deeper resulting registers are shown sideways rather than below the corresponding register R2.
図５ａ〜図５ｋは、実行レーンアレイ５０５内に示された実行レーン位置５１１の対に中心位置が合わせられた２つのステンシルの計算に焦点を当てている。図示を容易にするために、実行レーン５１０の対は、実際には、以下の例によれば、垂直方向に隣接している場合であっても、水平方向に隣接しているものとして図示されている。
5a-5k focus on the calculation of two stencils centered on a pair of execution lane positions 511 shown within the
最初に図５ａに示すように、実行レーン５１１は、それらの中央ステンシル位置に中心が置かれる。図５ｂは、両方の実行レーン５１１によって実行されるオブジェクトコードを示す。図５ｂに示すように、両方の実行レーン５１１のプログラムコードは、シフトレジスタアレイ５０７内のデータを、１つの位置だけ下にシフトさせ、１つの位置だけ右にシフトさせる。これにより、両方の実行レーン５１１がそれらのそれぞれのステンシルの左上隅に位置合わせされる。次に、プログラムコードは、（Ｒ２において）それらのそれぞれの位置にあるデータをＲ１にロードさせる。
First, as shown in FIG. 5a,
次に、図５ｃに示すように、プログラムコードによって、実行レーン５１１の対はシフトレジスタアレイ５０７内のデータを１単位だけ左にシフトする。これにより、各実行レーンのそれぞれの位置の右の値が各実行レーンの位置にシフトされる。次いで、Ｒ１の値（以前の値）に、（Ｒ２における）実行レーンの位置にシフトした新しい値が加算される。結果はＲ１に書き込まれる。図５ｄに示すように、図５ｃについて上述したのと同じ処理が繰り返される。それにより、結果Ｒ１は、上側実行レーンに値Ａ＋Ｂ＋Ｃ、下側実行レーンに値Ｆ＋Ｇ＋Ｈを含むようになる。この時点で、両方の実行レーン５１１はそれらのそれぞれのステンシルの上側行を処理している。なお、こぼれ出る先は、実行レーンアレイ５０５の左側のハロー領域（ハロー領域が左側に存在する場合）か、または、ランダムアクセスメモリ（ハロー領域が実行レーンアレイ５０５の左側に存在しない場合）である。
Next, as shown in FIG. 5c, the program code causes the pair of
次に、図５ｅに示すように、プログラムコードは、シフトレジスタアレイ内のデータを１単位だけ上にシフトさせる。これにより、両方の実行レーン５１１は、それらのそれぞれのステンシルの中間行の右端に位置合わせされる。両方の実行レーン５１１のレジスタＲ１は、この時点で、ステンシルの最上行および中間行の一番右の値の合計を含む。図５ｆおよび図５ｇは、両方の実行レーンのステンシルの中間行にわたって左方向に移動する連続的な進行を示す。図５ｇの処理の終了時に両方の実行レーン５１１がそれぞれのステンシルの最上行の値と中間行の値との合計を含むように、累積加算が続けられる。
Next, as shown in FIG. 5e, the program code shifts the data in the shift register array up by one unit. This aligns both
図５ｈは、各実行レーンを対応のステンシルの最下行に位置合わせする別のシフトを示す。図５ｉおよび図５ｊは、両方の実行レーンのステンシルにわたる処理を完了するための連続的なシフトを示す。図５ｋは、各実行レーンをデータアレイ内の正しい位置に合わせ、その結果をそこに書き込むための追加のシフトを示す。 FIG. 5h shows another shift that aligns each execution lane to the bottom row of the corresponding stencil. 5i and 5j show continuous shifts to complete processing across stencils in both execution lanes. FIG. 5k shows an additional shift to align each execution lane to the correct position in the data array and write the result there.
なお、図５ａ〜図５ｋの例では、シフト動作のためのオブジェクトコードは、（Ｘ、Ｙ）座標で表わされるシフトの方向および大きさを識別する命令フォーマットを含んでもよい。例えば、１つの位置分の上方向シフトのためのオブジェクトコードは、オブジェクトコードでＳＨＩＦＴ０，＋１として表わされてもよい。別の例として、１つの位置分の右方向へのシフトは、オブジェクトコードでＳＨＩＦＴ＋１，０として表わされてもよい。様々な実施形態では、より大きなシフトも、オブジェクトコードで指定され得る（例えば、シフト０，＋２）。ここで、２Ｄシフトレジスタハードウェアが１サイクルにつき１つの位置しかシフトをサポートしない場合、機械は、命令が複数サイクルの実行を要求するものと解釈してもよく、または２Ｄシフトレジスタハードウェアは、１サイクルにつき２つ以上分の位置のシフトをサポートするように設計されてもよい。後者の実施形態については、さらに下で詳述する。
In the examples of FIGS. 5a to 5k, the object code for the shift operation may include an instruction format for identifying the shift direction and magnitude represented by the (X, Y) coordinates. For example, the object code for an upward shift for one position may be represented as
図６ａは、アレイ実行レーンおよびシフトレジスタ構造の単位セルの別のより詳細な図を示す（ハロー領域内のレジスタは、対応する実行レーンを含まない）。実行レーンおよび実行レーンアレイ内の各位置に関連するレジスタ空間は、一実施形態では、実行レーンアレイの各ノードで、図６ａに示す回路をインスタンス化することによって実現される。図６ａに示すように、単位セルは、４つのレジスタＲ２〜Ｒ５からなるレジスタファイル６０２に結合された実行レーン６０１を含む。任意のサイクル中、実行レーン６０１は、レジスタＲ１〜Ｒ５のうちのいずれかに対して読み出しまたは書き込みを行なうことができる。２つの入力オペランドを必要とする命令の場合、実行レーンはＲ１〜Ｒ５のうちのいずれかからオペランドの両方を取り出すことができる。
FIG. 6a shows another more detailed view of the array execution lane and the unit cell of the shift register structure (registers in the halo region do not include the corresponding execution lane). The register space associated with the execution lane and each position in the execution lane array is realized in one embodiment by instantiating the circuit shown in FIG. 6a at each node of the execution lane array. As shown in FIG. 6a, the unit cell includes an
一実施形態では、単一サイクル中に、レジスタＲ２〜Ｒ４のうちのいずれか１つ（ただ１つ）のコンテントを、出力マルチプレクサ６０３を介して隣接のレジスタファイルのうちの１つにシフト「アウト」させ、レジスタＲ２〜Ｒ４のうちのいずれか１つ（ただ１つ）のコンテントを、入力マルチプレクサ６０４を介して隣接レジスタファイルのうちの対応する１つからシフト「イン」されるコンテントで置き換え、その結果、隣接レジスタファイル間のシフトが同じ方向となるようにする（例えば、すべての実行レーンが左にシフトする、すべての実行レーンが右にシフトするなど）ことによって、二次元シフトレジスタ構造が実現される。同じレジスタでは、同じサイクルでコンテントをシフトアウトさせるととともにコンテントをシフトインされるコンテントで置き換えるのが一般的であるが、マルチプレクサ構成６０３、６０４では、同じサイクル中に同じレジスタファイル内でシフト元レジスタとシフト先レジスタとが異なることも可能である。
In one embodiment, the content of any one (only one) of registers R2 to R4 is shifted "out" to one of the adjacent register files via the
なお、図６に示すように、シフトシーケンス中、実行レーンは、レジスタファイル６０２から左、右、上および下の隣接レジスタファイルにコンテントをシフトアウトする。また、同じシフトシーケンスに関連して、実行レーンは、左、右、上および下の隣接レジスタファイルのうちの特定の１つから、コンテントをレジスタファイル内にシフトする。ここでも、シフトアウト先およびシフトイン元は、すべての実行レーンについての同じシフト方向と一致しなければならない（例えば、シフトアウト先が右隣である場合、シフトインは左隣からでなければならない）。
As shown in FIG. 6, during the shift sequence, the execution lane shifts out the content from the
一実施形態では、１サイクルにつき１つの実行レーンにつき１つのレジスタのコンテントだけをシフトすることが許可されるが、他の実施形態では、２つ以上のレジスタのコンテントをシフトイン／アウトすることが許可されてもよい。例えば、図６ａに示されたマルチプレクサ回路６０３、６０４の第２のインスタンスが図６ａの設計に組み込まれる場合、同じサイクル中に２つのレジスタのコンテントがシフトアウト／インされてもよい。当然のことながら、１サイクルにつき１つのレジスタのコンテントだけがシフトされることが許可される実施形態においても、数学的演算間のシフトのためにより多くのクロックサイクルを費やすことによって、複数のレジスタからのシフトが数学的演算間で行われてもよい（例えば、数学的演算間で２つのシフト演算を費やすことによって、２つのレジスタのコンテントが数学的演算間でシフトされてもよい）。
In one embodiment, only one register content is allowed to shift per execution lane per cycle, while in other embodiments it is possible to shift in / out the content of two or more registers. May be allowed. For example, if a second instance of the
なお、シフトシーケンス中、シフトアウトされる実行レーンのレジスタファイルが全コンテント未満である場合、各実行レーンのシフトアウトされないレジスタのコンテントは元の場所に残る（シフトしない）。したがって、シフトインされるコンテントに置き換えられない非シフトコンテントは、シフトサイクルにわたって実行レーンの一部に残る。各実行レーンで見られるメモリユニット（「Ｍ」）を用いて、実行レーンアレイ内の実行レーンの行および／または列に関連するランダムアクセスメモリ空間からデータをロードしたり、当該ランダムアクセスメモリ空間にデータを格納したりする。ここで、Ｍユニットは、実行レーンの自身のレジスタ空間からロードしたり当該レジスタ空間に格納したりできないデータをロード／格納するためによく使用されるという点で、標準的なＭユニットとして機能する。様々な実施形態では、Ｍユニットの主な動作は、ローカルレジスタからメモリにデータを書き込み、メモリからデータを読み出してそれをローカルレジスタに書き込むことである。 If the register file of the execution lane to be shifted out is less than the total content during the shift sequence, the content of the register that is not shifted out of each execution lane remains in the original location (does not shift). Therefore, non-shift content that cannot be replaced by content that is shifted in remains part of the execution lane throughout the shift cycle. The memory unit (“M”) found in each execution lane is used to load data from or into the random access memory space associated with the rows and / or columns of the execution lane in the execution lane array. Store data. Here, the M unit functions as a standard M unit in that it is often used to load / store data that cannot be loaded from or stored in its own register space in the execution lane. .. In various embodiments, the main operation of the M unit is to write data from the local register to the memory, read the data from the memory and write it to the local register.
ハードウェア実行レーン６０１のＡＬＵユニットによってサポートされるＩＳＡオペコードに関して、様々な実施形態において、ハードウェアＡＬＵによってサポートされる数学的オペコードは、仮想実行レーンによってサポートされる数学的オペコード（例えば、ＡＤＤ、ＳＵＢ、ＭＯＶ、ＭＵＬ、ＭＡＤ、ＡＢＳ、ＤＩＶ、ＳＨＬ、ＳＨＲ、ＭＩＮ／ＭＡＸ、ＳＥＬ、ＡＮＤ、ＯＲ、ＸＯＲ、ＮＯＴ）と一体的に結び付けられる（例えば実質的に同じである）。上述のように、メモリアクセス命令が実行レーン６０１によって実行されることにより、関連するランダムアクセスメモリからデータをフェッチしたり、当該ランダムアクセスメモリにデータを格納したりすることができる。さらに、ハードウェア実行レーン６０１は、シフト演算命令（右、左、上、下）をサポートし、二次元シフトレジスタ構造内でデータをシフトする。上述したように、プログラム制御命令は主にステンシルプロセッサのスカラープロセッサによって実行される。
With respect to the ISA opcodes supported by the ALU unit in the
ｃ．ステンシルプロセッサ上で実行される統計演算
図７は、画像フレーム６００の例示的な図を示す。図７に示すように、画像７００は、タイルのアレイに分割されているものとして見ることができる。図７の特定的な例示画像は、１６タイル×１６タイルのアレイからなる。図８に示すように、各タイルはさらに、シートのアレイに分割することができる。図８の例示的な図は、例えば、図７の画像７００のタイルの最上行に沿った第１の２つのタイル８０１、８０２を示す。図８が示すように、各タイルはシートのアレイに分割することができる。図８の特定的な例では、各タイルは１６×１６のシートのアレイからなる。各シートは、例えば、１６×１６のピクセル値のアレイからなってもよい。
c. Statistical Calculations Performed on a Stencil Processor FIG. 7 shows an exemplary diagram of an image frame 600. As shown in FIG. 7, the
上で詳細に説明したように、様々な実施形態では、ステンシルプロセッサは、データの単位としてのシートを処理するように設計されている。ここでは、画像データのシートはステンシルプロセッサの二次元レジスタ空間内にロードされており、プロセッサは、画像データのシートに対して、ある画像処理タスクを実行する。図８に示すように、様々な実施形態では、画像全体の処理は、例えば、第１のタイル８０１の端から端まで（例えば、タイルの端から端まで左から右へ）シート行を処理することと、引き続き第２の隣接タイル８０２内の同じ行に沿って同じ方向にシートを処理することとを含む。
As described in detail above, in various embodiments, the stencil processor is designed to process a sheet as a unit of data. Here, the sheet of image data is loaded in the two-dimensional register space of the stencil processor, and the processor executes a certain image processing task on the sheet of image data. As shown in FIG. 8, in various embodiments, the processing of the entire image processes, for example, sheet rows from end to end of the first tile 801 (eg, from left to right from end to end of the tile). This includes processing the sheets in the same direction along the same row in the second
処理は、特定の行に沿ったすべてのシートが画像のすべてのタイルの端から端まで処理されるまで続けられる。次いで、次の（例えば、下の）シート行が処理され、この処理が繰り返される。例えば、画像の第１のシート行に沿った１６番目のタイルの１６番目のシートが処理された後、第２のシート行に沿った１番目のタイルの１番目のシートが次に処理される。 The process continues until all sheets along a particular row have been processed across all tiles in the image. The next (eg, bottom) sheet row is then processed and this process is repeated. For example, after the 16th sheet of the 16th tile along the 1st sheet row of the image is processed, the 1st sheet of the 1st tile along the 2nd sheet row is processed next. ..
画像に対する統計処理は、しばしば、画像内のピクセル値の合計を算出することを伴う。例えば、一般的な統計演算は、平均ピクセル値を算出することである。したがって、ピクセル値が画像にわたって合計され、次いで、合計されたピクセル数で正規化される。様々な実施形態では、画像統計はタイル粒度で組織される。したがって、例えば、平均ピクセル値は画像内のタイル毎に維持される。その後、必要に応じて、タイルを処理することによって画像に関する他の統計を算出する。 Statistical processing of an image often involves calculating the sum of the pixel values in the image. For example, a common statistical operation is to calculate the average pixel value. Therefore, the pixel values are summed across the image and then normalized by the summed number of pixels. In various embodiments, image statistics are organized at tile particle size. So, for example, the average pixel value is maintained for each tile in the image. Then, if necessary, other statistics about the image are calculated by processing the tiles.
図９は、タイル内のピクセル値を合計するための１つのアプローチを示す。図９は、タイルの左上隅のシート配列を示す。図９に示すように、複数のシート間で、シートアレイ内の同じ位置のピクセル値が合計される。例えば、シート＿０の最も左上のピクセル値に、シート＿１の最も左上のピクセル値が加算される。次いで、結果の合計がシート＿２の最も左上のピクセル値に加算される。この処理は、タイル内のすべてのシートが計算されるまで続けられる。 FIG. 9 shows one approach for summing pixel values in a tile. FIG. 9 shows a sheet arrangement in the upper left corner of the tile. As shown in FIG. 9, the pixel values at the same position in the sheet array are summed between the plurality of sheets. For example, the upper left pixel value of sheet _1 is added to the upper left pixel value of sheet _1. The sum of the results is then added to the top left pixel value of sheet _2. This process continues until all the sheets in the tile have been calculated.
ステンシルプロセッサはシート単位でデータを処理するということを想起すると、合計自体がシート単位で実行される。上述のように、一実施形態では、ステンシルプロセッサは、シート内のアレイ位置毎に実行レーンおよび関連するレジスタ空間を含む。まず、シート＿０がステンシルプロセッサの二次元シフトレジスタ構造内にロードされ、処理される。シート内の各アレイ位置に関連するピクセル値は、二次元シフトレジスタ内の当該アレイ位置のローカルレジスタ空間に保持される。次いで、シート＿１がステンシルプロセッサの二次元シフトレジスタ構造内にロードされ、処理される。 Recalling that the stencil processor processes data on a sheet-by-sheet basis, the sum itself is executed on a sheet-by-sheet basis. As mentioned above, in one embodiment, the stencil processor includes execution lanes and associated register space for each array position in the seat. First, sheet_0 is loaded and processed into the two-dimensional shift register structure of the stencil processor. Pixel values associated with each array position in the sheet are held in the local register space of that array position in the two-dimensional shift register. Sheet_1 is then loaded and processed into the stencil processor's two-dimensional shift register structure.
シート＿１内の各アレイ位置に関連するピクセル値は、シート＿０内の同じアレイ位置のピクセル値に加算される。アレイ位置毎の結果は、二次元シフトレジスタ構造内の当該位置のローカルレジスタ空間に保持され、この処理が続けられる。このように、ステンシルプロセッサが新たなシートを処理する度に、シート内のすべてのアレイ位置について、それまでに処理されたすべてのシートにわたる合計が累積され得る。代替的なアプローチでは、レジスタ空間ではなくステンシルプロセッサの内部メモリ空間に累積合計データが保持されるという点を除いて、上記と同じ処理が実行される（例えば、図３を参照すると、実行アレイ３０５のメモリ実行ユニットに結合されたＲＡＭ３０７、および／または、スカラープロセッサ３０３に関連するスカラーメモリ３０３）。別の代替的な実施形態では、累積合計データは、ステンシルプロセッサの外部のメモリ（例えば、ラインバッファユニット１０１に結合されたメモリなど）に保持される。
The pixel values associated with each array position in sheet_1 are added to the pixel values at the same array position in sheet_1. The result for each array position is held in the local register space at that position in the two-dimensional shift register structure, and this process is continued. Thus, each time the stencil processor processes a new sheet, the sum for all array positions within the sheet over all previously processed sheets can be accumulated. An alternative approach performs the same process as above, except that the cumulative total data is held in the internal memory space of the stencil processor rather than in the register space (see, eg, FIG. 3), the execution array 305.
なお、図８および図９を比較して、タイル１５のシート＿１５が処理されるまでは、タイル０のシート＿１６は処理されない。すなわち、同じシート行がタイルの端から端まで処理される。したがって、統計をタイル単位で追跡した場合、タイル境界をまたいで処理が進む度に統計コンテキストがスイッチする必要がある。図１０は、コンテキストスイッチ処理を図式的に示す。ここでは、ステンシルプロセッサが特定のタイルを処理する際に、当該特定のタイルの統計を保持するデータ構造が生成されてステンシルプロセッサのレジスタ空間または内部メモリ空間に存在するものとする。
In addition, comparing FIG. 8 and FIG. 9, the sheet_16 of the
例えば、タイル＿０のシート０〜シート１５が処理されている間、タイル＿０の統計データ構造がステンシルプロセッサの内部メモリおよび／または二次元レジスタ空間に保持される。タイル＿０のシート＿１５が処理された後、時間１００１において、タイル＿０の統計データ構造がステンシルプロセッサの二次元レジスタ空間または内部メモリ空間からスイッチアウトされるとともに、タイル＿１の統計データ構造がステンシルプロセッサのレジスタ空間または内部メモリ空間にスイッチインされる。同様に、時間１００２において、タイル＿１のシート＿１５の処理と、タイル＿２のシート＿０の処理との間で、タイル＿１の統計データ構造がステンシルプロセッサのレジスタ空間または内部メモリからスイッチアウトされるとともに、タイル＿２の統計データ構造がステンシルプロセッサのレジスタまたはメモリ空間にスイッチインされる。
For example, while
画像内の２番目のシート行の処理が始まる際には、タイル＿１５のシート＿１５が処理された後、時間１０１６において、タイル＿１５の統計データ構造がステンシルプロセッサのレジスタまたは内部メモリ空間からスイッチアウトされるとともに、タイル＿０の統計データ構造が再びステンシルプロセッサのレジスタまたは内部メモリ空間にスイッチインされる。同様に、時間１００１において、タイル＿０の統計データ構造がステンシルプロセッサのレジスタ空間または内部メモリ空間からスイッチアウトされるとともに、タイル＿１の統計データ構造がステンシルプロセッサのレジスタ空間または内部メモリ空間にスイッチインされる。タイル０〜タイル１５のすべてのシートが処理される時点（タイル０〜タイル１５の各々の統計データ構造が完成する時点）まで、処理はこのように続けられる。処理は、引き続き画像内の２番目のシート行に対して行なわれる。
At time 1016, the statistical data structure of tile_15 is switched out of the stencil processor's registers or internal memory space after the sheet_15 of tile_15 is processed when the processing of the second sheet row in the image begins. At the same time, the statistical data structure of tile_0 is switched back into the register or internal memory space of the stencil processor. Similarly, at
図１１は、特定のタイルについて保持され得る前述の統計データ構造の例示的な図を示す。上述のように、ここでは、統計データ構造は例えばタイルのシート内の同じピクセル位置におけるすべてのピクセル値の合計を保持してもよい。タイル内のすべてのシートを合計し終わったときに、そのタイルの「完成」データ構造が生成される。すなわち、完成データ構造は、タイル内のすべてのシートにわたる同じシートピクセル位置における合計を含む。図示を容易にするために、図１１は、シートの四隅のピクセル位置における合計のみを図式的に示している。 FIG. 11 shows an exemplary diagram of the aforementioned statistical data structure that can be retained for a particular tile. As mentioned above, here the statistical data structure may hold, for example, the sum of all pixel values at the same pixel position within a sheet of tiles. When you have finished summing all the sheets in a tile, the "finished" data structure for that tile is generated. That is, the finished data structure contains sums at the same sheet pixel position across all sheets in the tile. For ease of illustration, FIG. 11 graphically shows only the sums at the pixel positions of the four corners of the sheet.
さらなる統計処理は、図１１の累積アレイ全体を削減してスカラー値にすることである。このスカラー値は、例えば図１１のアレイのすべてのピクセル位置にわたって合計したものであり、ひいてはタイル全体におけるすべてのピクセル値の合計に対応するものである。すなわち、図１１は、同じシートピクセル位置におけるタイル内のすべてのピクセル値の合計のアレイであり、図１１のアレイ内のすべての要素にわたる合計は、シートピクセル位置単位でのタイル内のすべてのピクセル値の合計に対応する。図１２ａ〜図１２ｅは、アレイ全体の、スカラーへの削減を示す。図１２ａ〜図１２ｅの説明から明らかになるように、削減処理は、ステンシルプロセッサのコンポーネントである二次元シフトレジスタアレイを特定的に用いる。 Further statistical processing is to reduce the entire cumulative array of FIG. 11 to scalar values. This scalar value is, for example, summed over all pixel positions in the array of FIG. 11 and thus corresponds to the sum of all pixel values across the tile. That is, FIG. 11 is an array of sums of all pixel values in a tile at the same sheet pixel position, and sums across all elements in the array of FIG. 11 are all pixels in a tile per sheet pixel position. Corresponds to the sum of the values. 12a-12e show the reduction of the entire array to scalars. As will be apparent from the description of FIGS. 12a-12e, the reduction process specifically uses a two-dimensional shift register array, which is a component of the stencil processor.
ここでは、図１１の統計アレイが、まず、ステンシルプロセッサの二次元シフトアレイ内にロードされるものとする。図１２ａは、シフトレジスタの第１のシフト動作を示す。この動作では、１列おきのデータ列が左隣りにシフトされる。図１２ａに示す各シフトは、シフトされるピクセル値と、当該シフトされるピクセル値のシフト先の位置のピクセル値とを含む。次いで、これらのピクセル値の対は、同じ実行レーンのレジスタ空間にシフトされて保持される実行レーンに加算される。 Here, it is assumed that the statistical array of FIG. 11 is first loaded into the two-dimensional shift array of the stencil processor. FIG. 12a shows the first shift operation of the shift register. In this operation, every other column of data is shifted to the left. Each shift shown in FIG. 12a includes a pixel value to be shifted and a pixel value at a position to which the shifted pixel value is shifted. These pixel value pairs are then added to the execution lanes that are shifted and held in the register space of the same execution lane.
したがって、図１２ａのシフトおよびその後行なわれる合計が終了した後、アレイの１列おきの列は、その列の各ピクセル位置のレジスタ空間内の隣接ピクセル値の対の合計を含む。すなわち、例えば、列１２０１は列１２０１のすべてのピクセル位置における隣接ピクセル値の合計を含み、列１２０２は列１２０２のすべてのピクセル位置における隣接ピクセル値の合計を含む（その他も同様）。なお、図１２ａに示すすべてのシフトを単一サイクルで行ない、その直後のサイクルで合計を行なってもよい。したがって、削減により、わずか２サイクル（サイクルＣ１およびＣ２）でアレイを５０％削減することができる。
Therefore, after the shift of FIG. 12a and the subsequent summation are completed, every other column of the array contains the sum of pairs of adjacent pixel values in the register space at each pixel position in that column. That is, for example,
図１２ｂに示すように、図１２ａの演算による合計を有する最も近接した列が、シフトおよび加算される。すなわち、図１２ａの演算の後、列１２００、列１２０２、列１２０４、列１２０６、列１２０８、列１２１０、列１２１２、および列１２１４のみが、図１２ａの合計演算による合計コンテントを有する（他の列も合計コンテントを有してもよいが、それらのコンテントは使用されない。一実施形態では、使用されないコンテントを決定するシフトおよび合計演算は、節電のため実行しない）。したがって、列１２０２のピクセル値は、２つのアレイ位置の分だけ左にシフトされて、列１２００となる。対応するシフト元からシフト先への対は、列１２０６から列１２０４、列１２１０から列１２０８、および列１２１４から列１２１２についても存在する。図１２の演算の場合と同様に、ピクセル値の対は、シフト先で実行レーン論理によって加算される。したがって、図１２ｂの演算の後には、列１２００、列１２０４、列１２０８および列１２１２に合計値が存在する。なお、一実施形態では、二次元シフトレジスタは、単一サイクルで「２つ分の位置だけホップする」シフトを実行することができる。つまり、図１２ｂに示すシフトのうちのすべてを単一サイクル（Ｃ３）で実行し、直後のサイクル（Ｃ４）で合計演算を実行することができる。したがって、この削減演算によって、４サイクル後には、図１１のアレイを７５％削減することができる。
As shown in FIG. 12b, the closest columns with the calculated sums of FIG. 12a are shifted and added. That is, after the operation of FIG. 12a, only
しかしながら、ここで、様々な実施形態では各実行レーンが複数のレジスタを有していることを指摘することが適切である。すなわち、再び図６を手短に参照すると、各実行レーンは、データをシフトイン／シフトアウトするために、および／または、ＡＬＵ演算の結果を格納するために、複数のレジスタＲ１〜Ｒ５を有する。さらに、多くの画像処理アルゴリズムは、複数のデータの「チャネル」を有する。例えば、赤（Ｒ）、緑（Ｇ）、および青（Ｂ）のピクセルからなる画像において、Ｒデータのシート／タイル／フレームからなる第１のチャネルが、Ｇデータのシート／タイル／フレームからなる第２のチャネルとは別に処理されてもよく、さらにこれらはいずれもＢデータのシート／タイル／フレームの第３のチャネルとは別に処理されてもよい。 However, it is appropriate here to point out that in various embodiments each execution lane has a plurality of registers. That is, with reference to FIG. 6 again briefly, each execution lane has a plurality of registers R1 to R5 to shift in / out the data and / or to store the result of the ALU operation. In addition, many image processing algorithms have multiple "channels" of data. For example, in an image consisting of red (R), green (G), and blue (B) pixels, the first channel consisting of sheets / tiles / frames of R data consists of sheets / tiles / frames of G data. They may be processed separately from the second channel, and all of them may be processed separately from the third channel of the sheet / tile / frame of the B data.
前述の図１２ａおよび図１２ｂの例は、シフトおよび合計を実行するために費やすべき２サイクルを示したが、この限定は、同一チャネル内の演算のみに当てはまることを認識することが適切である。なぜなら、合計は先行のシフトによって決まるからである。重要なことには、一実施形態では、実行レーンアレイは、単一サイクルでシフト演算およびＡＬＵ演算の両方を指定することができるＶＬＩＷ型命令語を受け取る。この命令フォーマットおよびアレイ位置１つにつき複数のレジスタを用いることによって、図１２ａおよび図１２ｂのコア処理に従って、２つの異なるチャネルを同時に削減することができる。すなわち、例えば、第１のサイクルではＲがシフトされるとともにＧが合計され、次の第２のサイクルでは、シフトされたばかりのＲが合計されるとともに、合計されたばかりのＧの結果がシフトされる、というソフトウェアパイプラインループのような方法である。この方法で、プロセッサ全体は、例えば２つのチャネルにわたる１サイクル毎に、シフトおよび合計削減を実行することができる。 The examples in FIGS. 12a and 12b above show the two cycles that should be spent performing shifts and sums, but it is appropriate to recognize that this limitation applies only to operations within the same channel. Because the total is determined by the preceding shift. Importantly, in one embodiment, the execution lane array receives a VLIW instruction word that allows both shift and ALU operations to be specified in a single cycle. By using this instruction format and multiple registers per array position, two different channels can be reduced simultaneously according to the core processing of FIGS. 12a and 12b. That is, for example, in the first cycle, R is shifted and G is summed, and in the next second cycle, R that has just been shifted is summed and the result of G that has just been summed is shifted. , Is a software pipeline loop-like method. In this way, the entire processor can perform shifts and total reductions, eg, every cycle across two channels.
図１２ｃに示すように、削減処理が続けられるが、シフトは（さらに）長い。ここでは、列１２０４のピクセル値がシフトされて列１２００となって列１２００に加えられ、列１２１２のピクセル値がシフトされて列１２０８となって列１２０８に加えられる。したがって、図１２ｃの演算（二次元シフトレジスタが例えば４単位の位置のシフトをサポートする場合、費やすのは次の２サイクル（Ｃ５およびＣ６）だけである）の後、合計値は列１２００および列１２０８のみに存在する。図１２ｄは、列１２０８における値がシフトされて列１２００となり、列１２００に加えられた際の、横軸に沿って完了した削減を示す。ここでも、二次元シフトレジスタが図１２ｄに示すシフトを単一サイクルで実行できるものとすると、図１２ｄの削減は８サイクルＣ８で達成される（一実施形態では、シフトレジスタは図１２ｄに示す大きさのシフトを全体においてサポートするわけではないが、列１２０８から列１２００へのシフトについては、単一サイクルでサポートする）。
As shown in FIG. 12c, the reduction process continues, but the shift is (further) longer. Here, the pixel values in
図１２ｅは、列１２００に沿って実行される次の削減を示す。この削減により、最終的にはアレイ全体がサイクルＣ１６の時点でのスカラー合計値となる。図１２ｅの削減は、垂直方向である点および１つの列のみに沿っている点以外は、基本的には図１２ａ〜図１２ｄの削減と同じである。一実施形態では、図１２ａ〜図１２ｄの水平方向の削減の場合と同様に、各削減シーケンスは、シフトレジスタが対応のシフトを実行するために１サイクルを費やし、同じ位置にシフトされたばかりの値をローカル値に加えるために別の１サイクルを費やす。
FIG. 12e shows the next reduction implemented along
図１２ａ〜図１２ｅの削減処理の上記の説明は、図１１に示されるように、タイル内のすべてのシートについて、シート内のピクセル位置毎に別の合計値が維持される実施形態に向けられていた。しかしながら、図１０に関して説明したように、特定のタイルの「完成した」統計構造が実現される前に、タイル内のすべての行を処理する必要がある。画像の行を横切るスキャンは複数のタイルをまたぐため、タイルのデータ構造は、タイル境界をまたぐ度にインおよびアウトにコンテキストスイッチされる。 The above description of the reduction process of FIGS. 12a-12e is directed to an embodiment in which for all sheets in a tile, a different total value is maintained for each pixel position in the sheet, as shown in FIG. Was there. However, as described with respect to FIG. 10, all rows within a tile need to be processed before a "finished" statistical structure for a particular tile can be achieved. Scans across rows of images span multiple tiles, so the tile data structure is context-switched in and out each time it crosses a tile boundary.
したがって、各タイル統計データ構造は、それまでに処理されたシートについて、シート内のピクセル位置毎の合計値または「カウンタ」を含む。よって、タイルの統計データ構造の寸法は、タイル内のシートの寸法（例えば、１６×１６合計値）に対応する。（図９および図１０によって示唆されるように）画像内に複数のタイルが存在する場合、画像について保持された統計データの量（すなわち、（画像内のタイル数）×（タイル１つ当たりのカウンタ数））は大きくなり得る。ここで、タイルの完成データ構造が作られるとすぐにタイルを削減してスカラーの状態にすることによって、統計追跡負担が緩和され得る。 Therefore, each tile statistical data structure includes a total value or "counter" for each pixel position in the sheet for the sheets processed so far. Thus, the dimensions of the tile's statistical data structure correspond to the dimensions of the sheets within the tile (eg, 16x16 total value). If there are multiple tiles in the image (as suggested by FIGS. 9 and 10), the amount of statistical data retained for the image (ie, (number of tiles in the image) x (per tile). The number of counters)) can be large. Here, the burden of statistical tracking can be eased by reducing the tiles to a scalar state as soon as the completed data structure of the tiles is created.
代替的には、再び図１０を参照すると、コンテキストスイッチアウトされる度に、統計アレイを削減してスカラーの状態にしてもよい。例えば、格納される直前の時間１００１、および格納される直前の時間１０１７に、タイル＿０の統計アレイを削減してスカラーの状態にしてもよい。ここでは、コンテキストスイッチアウトの前に毎回図１２ａ〜図１２ｅの削減を実行することによって、より多くの処理が費やされる（タイル１つ当たり１つのスカラー削減ではなく、タイル１つ当たり複数のスカラー削減が実行される）かもしれないが、スイッチアウトされる統計のデータフットプリントサイズは遙かに小さくなる。これにより、スイッチアウトされた統計データは、画像プロセッサ全体にわたってラインバッファメモリに向けられるのではなく、ステンシルプロセッサメモリ内部に保持されやすくなり得る。
Alternatively, referring to FIG. 10 again, the statistical array may be reduced to a scalar state each time the context is switched out. For example, at the
他の統計処理によっても負担が低減され得る。例えば、「グローバル」と呼ばれる１つの統計追跡モードによれば、全体のフレーム／画像は単一タイルのみを費やすとみなされる。したがって、統計データ構造が１つしか存在せず、コンテキストスイッチは生じない（すなわち、ラスタスキャン処理においてタイル境界が横断されることはない）。画像内のすべてのシートが処理されたとき（上述の図１２ａ〜図１２ｅの削減を実行することによって画像全体のスカラーが生成され得る時点）、データ構造は「完成」する。 The burden can also be reduced by other statistical processing. For example, according to one statistical tracking mode called "global", the entire frame / image is considered to spend only a single tile. Therefore, there is only one statistical data structure and no context switch occurs (ie, the tile boundaries are not crossed in the raster scan process). When all the sheets in the image have been processed (when the overall image scalar can be generated by performing the reductions of FIGS. 12a-12e above), the data structure is "completed".
図１２ｆに示される別の統計追跡モードでは、統計は、画像１２５０内の１つ以上の「ウィンドウ」１２５１、１２５２、１２５３ついて追跡される。それらのウィンドウは、さまざまな組み合わせで重なり合っていてもよいし、重なり合っていなくてもよい。シートは、特定のパターンで（例えば、次の行を処理するために下がる前に、画像の端から端まで左から右へ）処理され得る。特定のウィンドウ内で処理が行なわれる間、ピクセル位置毎に統計が累積される（シート寸法は、図９の上述の説明に従う）。ウィンドウを離れるときに、累積動作が停止する。ラスタスキャンが横断して最終的にウィンドウ内に戻ってきたとき、統計累積が再開する。
In another statistical tracking mode shown in FIG. 12f, statistics are tracked for one or more "windows" 1251, 1252, 1253 in
例えば、図１２ｆを参照すると、ウィンドウ１２５１についての統計累積は、ラスタスキャンが経路１２５４をたどってウィンドウ１２５１から出るときに停止されるが、ラスタスキャンが経路１２５５に到達して再びウィンドウ１２５１内に入るときに再開する。なお、この動作はすべてのウィンドウに付随して行なわれ、その結果として、重なり合ったウィンドウの領域については、統計が同時に累積される。例えば、ラスタスキャン経路１２５６を参照すると、点Ａに到達したときに、ウィンドウ１２５１についての統計追跡が再開する。しばらくしてから、点Ｂに到達したときに、ウィンドウ１２５２についての統計追跡が再開する。さらにしばらくしてから、点Ｃに到達したときに、ウィンドウ１２５１についての統計追跡が停止し、点Ｄに到達したときに、ウィンドウ１２５２についての統計追跡が停止する。ラスタスキャンがウィンドウの全体の表面積をカバーした後、ウィンドウについての累積が完成すると、当該ウィンドウについて累積されたデータ（ここでも、シート内のピクセル位置１つにつき１つの累積値）は、図１２ａ〜図１２ｅに関して上述した処理に従って削減され得る。
For example, referring to FIG. 12f, statistical accumulation for
図４の説明から、ランダムアクセスメモリ４０７が実行レーンアレイ４０５および二次元シフトレジスタ４０６に結合され、ステンシルプロセッサにローカルシステムメモリ機能を付与し得ることを想起されたい。ここでは、実行レーンアレイ４０５内の複数の実行レーンが、同じランダムアクセスメモリユニットを共有してもよい。例えば、図４を参照すると、実行レーンの第１のサブセットはランダムアクセスメモリ４０７＿１に結合されてもよく、実行レーンの第２のサブセットはランダムアクセスメモリ４０７＿２に結合されてもよい（その他も同様）。図４は、同じ行に沿って存在する実行レーンが同じランダムアクセスメモリに結合された１つのアプローチを示す。
Recall from the description of FIG. 4 that the
図１３は、実行レーンの二次元ブロックが同じランダムアクセスメモリに結合された別のアプローチを示す。図１３の特定の例では、４つの実行レーンのブロックは同じランダムアクセスメモリに結合されている。ここでは、例えば、４つの実行レーンのうちの最も左上のブロックはランダムアクセスメモリ１３０７＿１に結合されており、４つの実行レーンのうちの最も右上のブロックはランダムアクセスメモリ１３０７＿２に結合されている（その他も同様）。４つの実行レーンの他の個々のブロックは、それぞれ自身のランダムアクセスメモリに結合されるものとするが、図面を簡単にするために図示はしない。 FIG. 13 shows another approach in which two-dimensional blocks of execution lanes are combined into the same random access memory. In the particular example of FIG. 13, the blocks of the four execution lanes are combined into the same random access memory. Here, for example, the uppermost block of the four execution lanes is connected to the random access memory 1307_1, and the uppermost block of the four execution lanes is connected to the random access memory 1307_2 (others). The same applies). The other individual blocks of the four execution lanes shall each be coupled to their own random access memory, but are not shown for simplicity of drawing.
画像について追跡される別の一般的な統計のセットは、ヒストグラムである。ヒストグラムは、基本的には、特定のパラメータを複数のビンに分割する。例えば、８ビット強度値は、２５６の別個のビン（固有の８ビット値につき１つのビン）に分割され得る。画像のデータにおいて値が観測される回数は、各ビンについて記録される。したがって、例えば、各固有の８ビット値が観測される回数は、カウント値とともにビン毎に個別に記録される。ビンのセットにわたるそれぞれのカウント値の分布は、ヒストグラムに対応する。図１４は、（横軸に沿った）複数のビンの各々について、（縦軸に沿った）別個のカウントを示すヒストグラムの例示的な図を示す。 Another common set of statistics tracked for an image is a histogram. The histogram basically divides a particular parameter into multiple bins. For example, an 8-bit intensity value can be divided into 256 separate bins (one bin for each unique 8-bit value). The number of times a value is observed in the image data is recorded for each bin. Therefore, for example, the number of times each unique 8-bit value is observed is recorded individually for each bin together with the count value. The distribution of each count value across a set of bins corresponds to a histogram. FIG. 14 shows an exemplary diagram of a histogram showing separate counts (along the vertical axis) for each of the plurality of bins (along the horizontal axis).
図１５ａおよび図１５ｂは、高解像度ヒストグラムを生成するための、図４および図１３のステンシルプロセッサの能力を拡張するための技術に関する。すなわち、多数のビンを有するヒストグラムである。図１５ａは、図４および図１３のステンシルプロセッサの名目設計点の実施形態を示す。この実施形態では、同じランダムアクセスメモリを共有する実行レーンのグループ内の各実行レーンには、ランダムアクセスメモリ内に自身の専用のメモリ空間が設けられる。ここでは、図１５ａを参照すると、４つの実行レーン１５０１のセットの各々は、ランダムアクセスメモリ１５０７に結合されている。ただし、各実行レーンは、名目上はランダムアクセスメモリ１５０７内の自身の専用空間のみにアクセスするように設計されている。図１５に示されるように、例えば実行レーン１５０１＿１は、ランダムアクセスメモリ内のアドレス指定可能な領域１５０２＿１のみにアクセスするように設計されている。ランダムアクセスメモリ１５０７の他の区画は、グループ１５０１内の他の実行レーンに割り当てられていることが示されている。
15a and 15b relate to techniques for extending the capabilities of the stencil processors of FIGS. 4 and 13 to generate high resolution histograms. That is, it is a histogram having a large number of bins. FIG. 15a shows an embodiment of the nominal design points of the stencil processors of FIGS. 4 and 13. In this embodiment, each execution lane in the group of execution lanes sharing the same random access memory is provided with its own dedicated memory space in the random access memory. Here, referring to FIG. 15a, each of the four sets of
図１５ａの各実行レーンのメモリ区画の問題は、実行レーンが観測データをビン区分するヒストグラムビンの数を、区画によって効果的に制限することである。すなわち、各区画が対応するメモリ空間の量は限られているので、各実行レーンは、単一区画内に確立され得るビンの総数にわたってデータ項目をビン区分することしかできない。これにより、実行レーンがビン区分することのできるヒストグラムの解像度が制限されるという望ましくない影響がもたらされる可能性がある（なお、様々な実施形態では、所定のサイクルでメモリにアクセスすることができるのは、グループ内の実行レーンのうちの１つだけである）。 The problem with the memory partition of each execution lane in FIG. 15a is that the execution lane effectively limits the number of histogram bins that bin the observation data by partition. That is, because the amount of memory space each partition corresponds to is limited, each execution lane can only bin data items over the total number of bins that can be established within a single partition. This can have the undesired effect of limiting the resolution of the histogram in which the execution lanes can be binned (note that in various embodiments, memory can be accessed in predetermined cycles. Is only one of the execution lanes in the group).
したがって、図１５ｂは、より良いアプローチを示す。このアプローチでは、ランダムメモリを共有する各実行レーンが併合空間の総量に自由にアクセス可能となるように、少なくともヒストグラムモード時にはランダムアクセスメモリ内の区画が実質的に併合される。区画を併合して、ランダムアクセスメモリを共有する実行レーンの各々が実質的に併合空間の総量に自由にアクセスすることを許可することによって、より多くのビンを収容可能な、より広いデータフィールドが提供される。より多くのビンが収容される結果、ヒストグラムの解像度が高められ得る。したがって、例えば、図１５ａのアプローチの単一区画が保持できるカウント値がわずか２５６ビンである場合に、図１５ｂの併合空間が保持できるカウント値は１０２４ビンである。したがって、図１５ａのアプローチの実行レーンが生成可能なヒストグラムが有するのはわずか２５６ビンである一方、図１５ｂのアプローチにおける同じ実行レーンが生成可能なヒストグラムが有するのは１０２４ビンである。他の実施形態は、異なるビン数を有してもよい。 Therefore, FIG. 15b shows a better approach. In this approach, the partitions in the random access memory are effectively merged, at least in histogram mode, so that each execution lane sharing the random memory has free access to the total amount of merged space. A wider data field that can accommodate more bins by merging partitions and allowing each of the execution lanes sharing random access memory to have virtually free access to the total amount of merged space. Provided. As a result of accommodating more bins, the resolution of the histogram can be increased. Thus, for example, if the single compartment of the approach of FIG. 15a can hold only 256 bins, then the merged space of FIG. 15b can hold a count of 1024 bins. Thus, the histogram that can generate the execution lanes of the approach of FIG. 15a has only 256 bins, while the histogram that can generate the same execution lanes of the approach of FIG. 15b has 1024 bins. Other embodiments may have different bin numbers.
図１６および１７ａ〜図１７ｃは、まず、実行レーンが観測データをそれぞれのローカルメモリにビン区分けし、次いで、二次元シフトレジスタ構造および実行レーンのＡＬＵ能力を用いて、それぞれのカウントをビン間で集計することによって、画像全体にわたってヒストグラムを決定し得るアプローチに関するものである。 In FIGS. 16 and 17a-17c, the execution lane first bins the observation data into their respective local memories, and then uses the two-dimensional shift register structure and the ALU capability of the execution lane to count each count between the bins. It relates to an approach that can determine a histogram over the entire image by aggregating.
図１６は、隣接実行レーンが４つの隣接ブロックにグループ分けされる、高レベルな図を示す。各グループは、それぞれのランダムアクセスメモリへのアクセスが与えられる。図１５ａおよび図１５ｂの図に関して上述したように、各ランダムアクセスメモリの空間が併合され、同じグループ内の各実行レーンが同じ併合メモリ空間にアクセス可能となっている。単純化のために、２つのグループのブロックである実行レーン１６０１、１６０２のみを、それぞれに対応する併合メモリ空間１６０７＿１、１６０７＿２とともに図示する。
FIG. 16 shows a high-level diagram in which adjacent execution lanes are grouped into four adjacent blocks. Each group is given access to its own random access memory. As described above with respect to the figures of FIGS. 15a and 15b, the spaces of the random access memories are merged so that each execution lane in the same group can access the same merged memory space. For simplicity, only two groups of blocks,
ヒストグラムを生成するために、画像の一連のシートが二次元シフトレジスタ内にロードされる。ヒストグラムのビンは、実行レーングループ毎に併合メモリ空間内に割り当てられ、個々の実行レーンは、各実行レーンが観測する特定の値について、併合メモリ空間内にビン毎に維持されているそれぞれのカウント値をインクリメントする。例えば、同じグループ内の実行レーン１、２、３、および４がそれぞれビン４、９、１２、および２１に対応する値を観測する場合、実行レーンはビン４のカウント値を更新し、実行レーン２はビン９のカウント値を更新し、実行レーン３はビン１２のカウント値を更新し、実行レーン４はビン２１のカウント値を更新する。様々な実施形態では、実行レーンのグループが共有するメモリには、１つの実行レーンしかアクセスできないため、実行レーンは前述の更新を連続サイクルで実行する。
A series of sheets of images are loaded into a two-dimensional shift register to generate a histogram. Histogram bins are assigned in the merged memory space for each execution lane group, and each execution lane is a count maintained for each bin in the merged memory space for a particular value observed by each execution lane. Increment the value. For example, if
画像の複数のシートが処理された後、ランダムアクセスメモリの各々の併合メモリ空間は、基本的には、構成要素である実行レーンのヒストグラムを含む。例えば、図１６を参照すると、ランダムアクセスメモリ１６０７＿１内の併合メモリ空間は、グループ１６０１内の実行レーンのヒストグラムデータを含み、ランダムアクセスメモリ１６０７＿２内の併合メモリ空間は、グループ１６０２内の実行レーンのヒストグラムデータを含む。
After processing multiple sheets of the image, each merged memory space of the random access memory basically contains a histogram of the execution lanes that are the components. For example, referring to FIG. 16, the merged memory space in the random access memory 1607_1 contains the histogram data of the execution lanes in the
次いで、次の演算は、すべての実行レーンのヒストグラムが実現されるように、各ランダムアクセスメモリのコンテントを併合することである。図１７ａは、ヒストグラムが３２ビン（ビン０〜３１）のみを含む単純化した例に関するものである。ここでは、実行レーンのグループおよびそれらに対応する併合メモリ空間の各々について、ビン０〜７のカウント値が左上の実行レーンのレジスタ空間内にロードされ、ビン８〜１５のカウント値が右上の実行レーンのレジスタ空間内にロードされ、ビン１６〜２３のカウント値が右下の実行レーンのレジスタ空間内にロードされ、ビン２４〜３１のカウント値が左下の実行レーンのレジスタ空間内にロードされる。図１７ａは、グループ１７０１および１７０２の実行レーンのそれぞれのレジスタ空間のコンテントを示す。ここでも、図示を簡単にするために２つのグループのみを示し、様々な実施形態では、グループ１７０１および１７０２のコンテントパターンは、実行レーンアレイ内のすべてのグループにわたって繰り返される。実施形態では、ロードされたレジスタコンテントは、データ構造における異なるビット位置のそれぞれのカウント値を維持するベクトルデータ構造の形態をとる。異なるビット位置は、データ構造が維持している異なるビンに対応する。
The next operation is then to merge the content of each random access memory so that a histogram of all execution lanes is realized. FIG. 17a relates to a simplified example in which the histogram contains only 32 bins (
図１７ｂは、第１の削減シーケンスを示す。第１の削減シーケンスでは、第１のグループからの実行レーンのヒストグラムコンテントが、第２のグループからの同じ相対位置の実行レーンのレジスタ空間内にシフトされる。すなわち、例えば第２のグループ１７０２の左上の実行レーンは、レジスタコンテントを第１のグループ１７０１の左上の実行レーンのレジスタ空間内にシフトさせることにより、グループ１７０１、１７０２の両方にわたって収集したビン０〜７のヒストグラムデータをグループ１７０１の左上の実行レーンのレジスタ空間に統合する。他の３つの実行レーン位置についても、対応する演算が実行される。なお、２つのアレイレーン位置にわたる適切なサイズのデータ構造を二次元シフトレジスタが単一サイクルでシフトすることができる場合、シフトは単一サイクルで起こり得る。８ビンのビンコンテントが、単一サイクルでシフト可能なデータよりも多くのデータを費やす場合、複数のサイクルが使われてもよい。
FIG. 17b shows the first reduction sequence. In the first reduction sequence, the histogram content of the execution lanes from the first group is shifted into the register space of the execution lanes at the same relative position from the second group. That is, for example, the upper left execution lane of the
いずれにせよ、第２のグループ１７０２のビンコンテントが第１のグループ１７０１のレジスタ空間内にシフトされた後、実行レーンはそれぞれのビンデータの対のベクトル加算を実行し、それぞれのビンの総カウント値を累積する。すなわち、例えばベクトル加算演算の後、グループ１７０１の上側実行レーンは、グループ１７０１および１７０２の両方によって集計されたビン０〜７の各々の総カウントを有するデータ構造を含む。また、対応するカウント値の累積は、グループ１７０１のうちの他の３つの実行レーンのレジスタ空間内に存在する。ここでも、様々な実施形態では、シフト演算と同様に、ベクトルの合計は単一サイクルで行われてもよい。また、ここでも、図１７ａおよび図１７ｂは２つのグループのみを示しているが、様々な実施形態では、図１７ａおよび図１７ｂの演算は、実行レーンアレイ内のグループのすべての対について同時に実行される。
In any case, after the bin content of the
図１７ｃは、次の繰り返しを示す。当該次の繰り返しでは、集計されたばかりの累積カウント（例えば、図１７ｂの時点）が同様の処理（ただし、シフト長さがより長いという点が異なる）に従って再び統合される。例えば、再び図１７ｂを手短に参照すると、４つの実行レーンのうちの別の対のグループ１７０３、１７０４（各々は、アレイにおいてグループ１７０２の真下に物理的に存在する）をイメージすることができるであろう。図１７ｃは、これらのグループ１７０３、１７０４の両方を示す。図１７ｂの演算が終了した後、グループ１７０３および１７０４のコンテントがグループ１７０３内に累積される。したがって、図１７ｃの演算は、シフトされているグループ１７０３の累積コンテントを、グループ１７０１のレジスタ空間内にシフトする。図１７ｃのベクトル加算演算の後、グループ１７０１は、グループ１７０１〜１７０４の各々によって当初に集計されたすべてのビンの累積カウントを含む。図１７ｃに示す単純化した８×８の実行レーンアレイでは、図１７ｃのベクトル加算演算の後、すべての値がグループの最上行に累積されていることになる。
FIG. 17c shows the following repetition. In the next iteration, the just aggregated cumulative counts (eg, at time in FIG. 17b) are reintegrated according to similar processing, except that the shift length is longer. For example, again briefly referring to FIG. 17b, one can imagine another pair of
ここから、図１２ｅの垂直方向の削減と同様に（グループ内の異なる実行レーン位置の各々が、自身のビンのセットを維持し続けた状態で）、グループの最上行内で水平方向の削減が開始されてもよい。最終的には、この処理によって単一グループへの統合が行なわれる。この単一グループでは、当該グループ内の各アレイ位置が、対応するビンについて、画像にわたる総カウントを有する。 From here, the horizontal reduction begins within the top row of the group, similar to the vertical reduction in FIG. 12e (with each of the different execution lane positions in the group continuing to maintain its own set of bins). May be done. Ultimately, this process results in integration into a single group. In this single group, each array position within the group has a total count over the image for the corresponding bin.
様々な実施形態では、ヒストグラムはタイル粒度で記録される。したがって、ヒストグラムの累積時に、図１０に関して上述したコンテキストスイッチと同様のヒストグラムデータのコンテキストスイッチが実行され得る。ここでは、例えば、プロセッサのランダムアクセスメモリ内の前述の併合データ構造は、特定のタイルのみのヒストグラムデータを格納するように構成されている。画像データのラスタスキャン処理がタイル境界をまたぐとき、処理がちょうど終わるタイルのヒストグラムデータ構造は（例えばステンシルプロセッサメモリから、例えばラインバッファ内へ書き込まれることによって）スイッチアウトされ、処理がちょうど始まるタイルのヒストグラムデータ構造は（例えばステンシル処理メモリ内に書き込まれることによって）スイッチインされる。ラスタスキャンが完成タイルを完全に処理した後、図１７ａ〜図１７ｃの削減およびその後の処理が実行され、タイル全体の完成ヒストグラムが決定され得る。 In various embodiments, the histogram is recorded at tile grain size. Therefore, when the histograms are accumulated, a context switch of histogram data similar to the context switch described above with respect to FIG. 10 can be executed. Here, for example, the above-mentioned merged data structure in the random access memory of the processor is configured to store histogram data of only specific tiles. When the raster scan of image data crosses tile boundaries, the histogram data structure of the tile just ending is switched out (eg by writing from stencil processor memory, eg into the line buffer) and the processing is just starting on the tile. The histogram data structure is switched in (eg by being written into stencil processing memory). After the raster scan has completely processed the finished tile, the reduction and subsequent processing of FIGS. 17a-17c may be performed to determine the finished histogram of the entire tile.
なお、低解像度ヒストグラムの場合、ステンシルプロセッサのランダムアクセスメモリにおいて記憶空間の併合を必要としないことが考えられる。この場合、例えば、低解像度ヒストグラムのすべてのビンを保持するのに、図１５ａの専用の各実行レーンメモリ空間で十分であり得る。このように、各実行レーンメモリ空間を併合する必要がない（したがって、高解像度ヒストグラムのみに供され得る）場合もある。さらに、いくつかのヒストグラムは解像度が十分に低く、実行レーンのそれぞれのレジスタ空間内にビンカウント値を保持可能であり得る（ここでは、各実行レーンが異なるレジスタにアクセスし得るように、レジスタファイルはピクセル値によって動的に指標付けられ得る）。この場合、ランダムアクセスメモリの使用は不要である。低解像度ヒストグラム（例えば、各実行レーン専用メモリまたはレジスタ空間の併合を必要としないヒストグラム）では、ビン総計は、図１７ａ〜図１７ｃの処理ではなく、図１２ａ〜図１２ｅの処理を用いて累積され得る。 In the case of the low resolution histogram, it is considered that the stencil processor's random access memory does not require the merging of storage spaces. In this case, for example, each dedicated execution lane memory space of FIG. 15a may be sufficient to hold all the bins of the low resolution histogram. Thus, it may not be necessary to merge each execution lane memory space (thus, it may only be available for high resolution histograms). In addition, some histograms are low enough resolution and may be able to hold bin count values in their respective register space in the execution lane (here, register files so that each execution lane can access different registers. Can be dynamically indexed by pixel value). In this case, it is not necessary to use the random access memory. In low resolution histograms (eg, histograms that do not require merging of dedicated memory or register space for each execution lane), bin totals are accumulated using the processing of FIGS. 12a-12e rather than the processing of FIGS. 17a-17c. obtain.
同様に、コンテキストスイッチに関して、高解像度ヒストグラムデータ構造のみが、ステンシルプロセッサメモリまたはレジスタ空間から（例えば、ラインバッファへ）のスイッチを必要とすることが考えられる。この場合、低解像度ヒストグラムでは、ステンシルプロセッサのローカルメモリおよび／またはレジスタ空間において、「スイッチアウトされた」ヒストグラムデータコンテキストが維持され得る。 Similarly, with respect to context switching, it is possible that only high resolution histogram data structures require a switch from stencil processor memory or register space (eg, to a line buffer). In this case, the low resolution histogram may maintain a "switched out" histogram data context in the stencil processor's local memory and / or register space.
図１６および図１７ａ〜図１７ｃは、ビン数の多いヒストグラムを可能にするために、結合されたメモリリソースをまとめて共有する実行レーンのグループのメカニズムを示した。これに対して、図１８ａおよび図１８ｂは、異なるグループの実行レーンにわたってヒストグラムのビンカウントを拡張し得るメカニズムを示す。図１８ａは、実行レーンアレイの、例えば左上隅を示す。ここでは、４×２の実行レーンの第１のグループ１８１０と、４×２の実行レーンの第２のグループ１８１１とを示す。グループ１８１０、１８１１の両方が、図１６および図１７ａ〜図１７ｃに関して上述したように、ビンサイズを拡大するためにメモリリソースを共有し得る。
16 and 17a-17c show the mechanism of groups of execution lanes that collectively share combined memory resources to allow histograms with a large number of bins. In contrast, FIGS. 18a and 18b show a mechanism by which the histogram bin count can be extended across different groups of execution lanes. FIG. 18a shows, for example, the upper left corner of the execution lane array. Here, the
ここでは、グループ１８１０、１８１１の各々が１０２４個の異なるヒストグラムビンを別個にサポートすることが可能な場合、グループ１８１０および１８１１を論理的に組み合わせて２０４８個のビンをサポートすることも可能である。このように、実行レーンのグループを組み合わせることによって、ビン数に関してヒストグラムサイズを拡大することができる。「空間的」と呼ばれる１つのアプローチによれば、同じ論理組み合わせ内の異なる実行レーングループは、異なるビン範囲にビン区分する役割を担う。例えば、グループ１８１０内の実行レーンは、ビン０〜１０２３にビン区分する役割を担い、グループ１８１１内の実行レーンは、ビン１０２４〜２０４７にビン区分する役割を担う。このように、配置すべき特定の正しいビンへの配置が保証されるように入力ピクセルデータを完全に処理するために、図１８ｂに示すようにデータがシフトされる。すなわち、例えば、ビン区分すべきデータは、まず、第１のグループ１８１０の実行レーンにロードされ、いずれかのデータ項目がビン０〜１０２３に該当した場合、それらはグループ１８１０内のそれぞれの実行レーンによってビン区分される。最初のビン区分処理の後、図１８ｂに示すように、第１のグループにロードされたデータは第２のグループ１８１１にシフトされる。ビン範囲１０２４〜２０４７に該当するという理由で第１のグループによってビン区分されなかった残りのデータアイテムは、グループ１８１１内のそれぞれの実行レーンによってビン区分されることになる。
Here, if
このように、この例では、実行レーンアレイ内のすべてのグループのすべてのレーン内にデータが最初にロードされ、アレイ全体は、ビン区分処理の合間にシフトを挟みながら、データに対する処理を実行する。例えば、最初に、グループ１８１０および１８１１内の両方にデータがロードされる。データがロードされた後、グループ１８１０は、グループ１８１０内にロードされ、かつビン０〜１０２３に該当するデータ値をビン区分し、グループ１８１１は、グループ１８１１内にロードされ、かつビン１０２４〜２０４７に該当するデータ値をビン区分する。この最初のビン区分シーケンスの後、当初グループ１８１０内にロードされたデータはグループ１８１１内にシフトされ、当初グループ１８１１内にロードされたデータは、ビン０〜１０２３にビン区分される別のグループ内にシフトされる（例えば、グループ１８１１の真下のグループなど）。単純化のために、図１８ｂには、当初グループ１８１１内にロードされたデータのシフトについては図示しない。なお、３つ以上のグループを組み合わせることによって、ビンサイズをさらに拡大することができる。例えば、グループ１８１１の真下の４×２の実行レーンのグループを用いて、ビン範囲２０４８〜３０７２にビン区分することができる。
Thus, in this example, the data is loaded first in all lanes of all groups in the execution lane array, and the entire array performs processing on the data with a shift in between binning operations. .. For example, first, data is loaded into both
時間的と呼ばれる別の代替的なビン区分拡張アプローチでは、物理的な実行レーンのグループを組み合わせ、組み合わせたグループ間で二次元シフトレジスタを用いてシフトさせるのではなく、実行レーンのグループは組み合わせられない。むしろ、ビン区分範囲が、実行レーンに対してインおよびアウトにコンテキストスイッチされる。この場合、例えば、最初に、データがすべての実行レーングループ内にロードされる。第１の繰り返しの際に、各グループは、第１のビン範囲（例えば、ビン０〜１０２３）に従ってビン区分する。第１の範囲へのビン区分が完了した後、データがレジスタアレイ内でシフトされるのではなく、どのビン区分範囲に当てはまるかを決定するビン区分コンテキスト情報がスイッチされる（例えば、範囲０〜１０２３にビン区分されるコンテキストは実行レーングループからスイッチアウトされ、範囲１０２４〜２０４７にビン区分されるコンテキストは実行レーングループへスイッチインされる）。次いで実行レーンは、新たな、より大きな範囲についてビン区分処理を再実行する。最後のビン区分範囲コンテキストがスイッチインされてビン区分されるまで、処理が続けられる。 Another alternative bin division expansion approach, called temporal, combines groups of physical execution lanes and combines groups of execution lanes rather than shifting between the combined groups using a two-dimensional shift register. Absent. Rather, the bin compartment is context-switched in and out for the execution lane. In this case, for example, the data is first loaded into all execution lane groups. During the first iteration, each group bins according to a first bin range (eg, bins 0-1023). After binning to the first range is complete, instead of shifting the data in the register array, the binning context information that determines which binning range applies is switched (eg, ranges 0 to 0). Contexts binned to 1023 are switched out of the execution lane group, and contexts binned to the range 1024-2047 are switched in to the execution lane group). The execution lane then re-executes the bin division process for a new, larger range. Processing continues until the last binning range context is switched in and binned.
様々な実施形態では、画像プロセッサは、上述のいずれかの動作モード（例えば、ステンシルプロセッサからのコンテキストスイッチ、実行レーンレジスタ空間の併合、グローバル統計追跡、各タイルの統計追跡、ウィンドウ統計追跡など）を確立するための構成レジスタ空間を有する。上述の統計演算は、プログラムコード（例えば、ステンシルプロセッサによって実行されるオブジェクトコード）にまとめられ、機械可読記憶媒体に格納されてもよい。 In various embodiments, the image processor performs one of the modes of operation described above (eg, context switching from a stencil processor, merge of execution lane register spaces, global statistical tracking, statistical tracking for each tile, window statistical tracking, etc.). It has a configuration register space to establish. The above-mentioned statistical operations may be grouped into program code (for example, object code executed by a stencil processor) and stored on a machine-readable storage medium.
上述の様々な実施形態は、ある状況では行に対して処理を行ない、別の状況では列に行なったが、行に対して行なった処理を代わりに列に対して行なってもよく、逆も同様であることは容易に明らかになるはずである。 In the various embodiments described above, processing was performed on a row in one situation and on a column in another, but the processing performed on a row may be performed on a column instead, and vice versa. It should be easy to see that it is similar.
図１９は、一体化されたカメラ１９０１、ＩＳＰ／ＩＰＵ、およびプロセッサ１９０２を示す。カメラ１９０１は、レンズアセンブリ１９０７と画像センサ１９０６とを含み得る。カメラ１９０１からの生画像データは、カメラ１９０１から、画像信号プロセッサ（ＩＳＰ）、および／または画像処理ユニット（ＩＰＵ）１９０４、ならびにカメラ統計ユニット１９０５を備えるＩＳＰサブシステムに送信される得る。様々な実施形態では、カメラ統計ユニット１９０５は、専用の論理回路を用いてカメラ１９０１によって生成された生画像データから統計を算出するハードウェアコンポーネントである。さらに他の実施形態では、カメラ統計ユニット１９０５はソフトウェアコンポーネントであり、カメラ統計は、プログラムコードを実行可能なＩＰＵハードウェア１９０４上で実行される（ここでは、画像信号処理（ＩＳＰ）ハードウェアは、従来はプログラムコードを実行可能ではない）。ここでは、そのようなＩＰＵはソフトウェアで従来のＩＳＰ関連タスクを実行するように構成されてもよく、したがって、従来のＩＳＰはプラットフォームには実際には存在しない（すなわち、すべての統計および画像信号処理機能がＩＰＵによってソフトウェアで実行される）。さらに他のアプローチでは、ＩＳＰ／ＩＰＵサブシステムは、専用のハードウェア統計回路、ＩＰＵ上で実行されるソフトウェア、および／またはＩＳＰハードウェア回路の組み合わせとして実現されてもよい。いずれにせよ、ＩＰＵハードウェア１９０４が少なくとも部分的に統計ソフトウェアを実行する実現例（または、ＩＳＰ／ＩＰＵハードウェア１９０４が細粒プログラムコードを実行するのではなく、ハードウェア統計エンジン１９０５からの粗粒統計関連コマンドを受け取るコプロセッサまたはアクセラレータとして動作する実現例）では、ＩＳＰ／ＩＰＵ１９０４は、上で詳述した説明および教示のうちのいずれかに従って、二次元シフトレジスタアレイ構造を含み、削減を実行し、および／またはヒストグラムを生成してもよい。このような実施形態では、ＩＳＰ／ＩＰＵ１９０４は、前のセクションで詳述したＩＰＵ特徴のうちのいずれか／すべてを含むように設計されてもよい。
FIG. 19 shows an
ＩＳＰ／ＩＰＵサブシステムの様々なハードウェア回路コンポーネントは、プロセッサ１９０２および他の電気的機能（例えば、グラフィックス処理ユニット（ＧＰＵ））も含む大型システムオンチップ上に集積されてもよい。多くの実施形態ではプロセッサ１９０２はコンピューティングシステム（例えば、ハンドヘルド装置）の処理コアであってもよいが、他の実施形態では、プロセッサ１９０２は、カメラ１９０１により密接に結合されていてもよいし、もしくはカメラ１９０１の部品であってもよい。
Various hardware circuit components of the ISP / IPU subsystem may be integrated on a large system-on-chip that also includes a
カメラ統計エンジン１９０５は、カメラ１９０１によって生成されたピクセルデータから統計を算出する。次いで、統計エンジン１９０５によって生成された統計は、高次処理のために使用され得る。例えば、統計はプロセッサ１９０２に転送され、プロセッサ１９０２は、その統計を用いて、より高いレベルのカメラ制御機能を実行する。そのようなより高いレベル機能は、自動焦点、自動露出、および／または自動ホワイトバランスを含む。カメラ制御機能は、例えば、プロセッサ１９０２上で実行されるソフトウェア１９０３（例えば、アンドロイドオペレーティングシステムに関連する３Ａカメラ制御ソフトウェアなど）として実現されてもよい。カメラ制御以外に用いられる他のタイプの統計データは、プロセッサ１９０２または他の処理のための他の場所（例えば、コンピュータビジョンソフトウェアまたはハードウェアのための統計情報）へ転送されてもよい。
The
図２０は、上述の記載によって説明された方法を示す。図２０に示すように、方法は、実行レーンアレイに結合された二次元シフトレジスタ２００１内にコンテントのアレイをロードするステップを含む。方法はさらに、第１のシーケンス２００２を繰り返し実行するステップとを含む。第１のシーケンス２００２は、シフトレジスタによって、特定の行または列に沿って存在する第１のコンテントを、第２のコンテントが存在する別の平行な行または列にシフトするステップと、実行レーンアレイのうちの特定の対応する行または列によって、第１および第２のコンテントに対して数学的演算を実行するステップとを含む。方法はさらに、第２のシーケンス２００３を繰り返し実行するステップを含む。第２のシーケンス２００３は、シフトレジスタによって、第１のシーケンスの行または列に平行な結果の行または列に沿った第１の位置のセットから、結果の行または列に沿った対応する第２の位置のセットへ、コンテントをシフトするステップを含む。結果の行または列は、少なくとも部分的に第１のシーケンスの数学的演算から決定された値を有する。第２のシーケンスはさらに、実行レーンアレイによって、第１の位置のセット中のコンテントのアイテム、および第２の位置のセット中のそれぞれのコンテントのアイテムに対して、数学的演算を実行するステップを含む。
FIG. 20 shows the method described by the description above. As shown in FIG. 20, the method includes loading an array of content into a two-dimensional shift register 2001 coupled to an execution lane array. The method further includes a step of iteratively executing the
ｄ．実現例の実施形態
上述した様々な画像プロセッサアーキテクチャの特徴は、必ずしも従来の意味での画像処理に限定されず、したがって、画像プロセッサを再特徴付けしてもよい（またはしなくてもよい）他の適用例に適用することができることを指摘することが適切である。例えば、実際のカメラ画像の処理とは対照的に、アニメーションの作成および／または生成および／またはレンダリングにおいて上述した様々な画像プロセッサアーキテクチャの特徴のいずれかが使用される場合、画像プロセッサはグラフィックス処理ユニットとして特徴づけられてもよい。さらに、上述した画像プロセッサアーキテクチャの特徴は、ビデオ処理、視覚処理、画像認識および／または機械学習などの他の技術的用途にも適用することができる。このように適用されて、画像プロセッサは、より汎用的なプロセッサ（例えば、コンピューティングシステムのＣＰＵであるか、またはその一部である）と（例えばコプロセッサとして）一体化されてもよく、またはコンピューティングシステム内のスタンドアロンプロセッサであってもよい。
d. Embodiments of the Examples The features of the various image processor architectures described above are not necessarily limited to image processing in the traditional sense, and therefore the image processor may (or may not) be recharacterized. It is appropriate to point out that it can be applied to the application examples of. For example, if any of the various image processor architecture features described above are used in creating and / or generating and / or rendering animations, as opposed to processing the actual camera image, the image processor will process the graphics. It may be characterized as a unit. In addition, the features of the image processor architecture described above can be applied to other technical applications such as video processing, visual processing, image recognition and / or machine learning. Applied in this way, the image processor may be integrated (eg, as a coprocessor) with a more general purpose processor (eg, the CPU of a computing system, or part of it), or It may be a stand-alone processor in the computing system.
上述したハードウェア設計の実施形態は、半導体チップ内で、および／または最終的に半導体製造プロセスに向けての回路設計の記述として、具現化することができる。後者の場合、そのような回路記述は、（例えばＶＨＤＬまたはＶｅｒｉｌｏｇ）レジスタ転送レベル（ＲＴＬ）回路記述、ゲートレベル回路記述、トランジスタレベル回路記述、またはマスク記述、またはそれらの様々な組み合わせの形態をとってもよい。回路記述は、典型的には、コンピュータ可読記憶媒体（例えばＣＤ−ＲＯＭまたは他のタイプの記憶技術）で具現化される。 The hardware design embodiments described above can be embodied within the semiconductor chip and / or as a description of the circuit design for the semiconductor manufacturing process in the end. In the latter case, such circuit descriptions may take the form of register transfer level (RTL) circuit descriptions, gate level circuit descriptions, transistor level circuit descriptions, or mask descriptions, or various combinations thereof (eg VHDL or Verilog). Good. The circuit description is typically embodied in a computer-readable storage medium (eg, a CD-ROM or other type of storage technology).
先のセクションから、上記の画像プロセッサは、（例えば、ハンドヘルド装置のカメラからのデータを処理するハンドヘルド装置のシステムオンチップ（ＳＯＣ）の一部として）コンピュータシステム上のハードウェアで具現化できることを認識することが適切である。なお、画像プロセッサがハードウェア回路として具現化される場合、画像プロセッサによって処理される画像データはカメラから直接受信されてもよい。ここで、画像プロセッサは、別体のカメラの一部であってもよいし、一体化されたカメラを有するコンピューティングシステムの一部であってもよい。後者の場合、画像データは、カメラから直接、またはコンピューティングシステムのシステムメモリから受信することができる（例えば、カメラは、その画像データを画像プロセッサではなくシステムメモリに送信する）。なお、先のセクションで説明した特徴の多くは、（アニメーションをレンダリングする）グラフィックスプロセッサユニットにも適用可能である。 From the previous section, we recognize that the image processor described above can be embodied in hardware on a computer system (eg, as part of a handheld device's system-on-chip (SOC) that processes data from the handheld device's camera). It is appropriate to do. When the image processor is embodied as a hardware circuit, the image data processed by the image processor may be directly received from the camera. Here, the image processor may be part of a separate camera or part of a computing system that has an integrated camera. In the latter case, the image data can be received directly from the camera or from the system memory of the computing system (eg, the camera sends the image data to the system memory instead of the image processor). Note that many of the features described in the previous section are also applicable to the graphics processor unit (which renders the animation).
図２１は、コンピューティングシステムの例示的な図である。以下に説明するコンピューティングシステムのコンポーネントの多くは、一体化されたカメラおよび関連する画像プロセッサ（例えば、スマートフォンまたはタブレットコンピュータなどのハンドヘルド装置）を有するコンピューティングシステムに適用可能である。当業者は、２つの間の範囲を容易に定めることができるであろう。 FIG. 21 is an exemplary diagram of a computing system. Many of the components of a computing system described below are applicable to computing systems that have an integrated camera and associated image processor (eg, a handheld device such as a smartphone or tablet computer). Those skilled in the art will be able to easily define the range between the two.
図２１に示すように、基本的なコンピューティングシステムは、中央処理ユニット２１０１（例えば、マルチコアプロセッサまたはアプリケーションプロセッサ上に配置された複数の汎用処理コア２１１５＿１〜２０１５＿Ｎおよびメインメモリコントローラ２１１７を含み得る）、システムメモリ２１０２、ディスプレイ２１０３（例えばタッチスクリーン、フラットパネル）、ローカル有線ポイントツーポイントリンク（例えばＵＳＢ）インタフェース２１０４、様々なネットワークＩ／Ｏ機能２１０５（イーサネット（登録商標）インタフェースおよび／またはセルラーモデムサブシステムなど）、無線ローカルエリアネットワーク（例えばＷｉＦｉ）インタフェース２１０６、ワイヤレスポイントツーポイントリンク（例えばブルートゥース（登録商標））インタフェース２１０７および全地球測位システムインタフェース２１０８、様々なセンサ２１０９＿１〜２１０９＿Ｎ、１つ以上のカメラ２１１０、バッテリ２１１１、電力管理制御ユニット２１１２、スピーカおよびマイクロホン２１１３、ならびに音声コーダ／デコーダ２１１４を含んでもよい。
As shown in FIG. 21, a basic computing system may include a central processing unit 2101 (eg, including a plurality of general purpose processing cores 2115_1 to 2015_N and a
アプリケーションプロセッサまたはマルチコアプロセッサ２１５０は、そのＣＰＵ２１０１における１つ以上の汎用処理コア２１１５、１つ以上のグラフィカル処理ユニット２１１６、メモリ管理機能２１１７（例えばメモリコントローラ）、Ｉ／Ｏ制御機能２１１８および画像処理ユニット２１１９を含んでもよい。汎用処理コア２１１５は、典型的には、コンピューティングシステムのオペレーティングシステムおよびアプリケーションソフトウェアを実行する。グラフィックス処理ユニット２１１６は、典型的には、ディスプレイ２１０３上に提示されるグラフィックス情報を生成するために、グラフィックス集中型機能を実行する。メモリ制御機能２１１７は、システムメモリ２１０２とインタフェースして、システムメモリ２１０２との間でデータの書き込み／読み出しを行なう。電力管理制御ユニット２１１２は、システム２１００の電力消費を全体的に制御する。
The application processor or
画像処理ユニット２１１９は、先のセクションで詳述した画像処理ユニットの実施形態のうちのいずれかに従って実現することができる。代替的にまたは組み合わせて、ＩＰＵ２１１９は、ＧＰＵ２１１６およびＣＰＵ２１０１のうちのいずれかまたは両方にそのコプロセッサとして結合されてもよい。さらに、様々な実施形態では、ＧＰＵ２１１６は、上で詳述した画像プロセッサの特徴のうちのいずれかを用いて実現されてもよい。
The
タッチスクリーンディスプレイ２１０３、通信インタフェース２１０４〜２１０７、ＧＰＳインタフェース２１０８、センサ２１０９、カメラ２１１０、およびスピーカ／マイクコーデック２１１３、２１１４の各々はすべて、必要に応じて、一体化された周辺装置（例えば１つ以上のカメラ２１１０）も含むコンピューティングシステム全体に対して様々な形態のＩ／Ｏ（入力および／または出力）として見ることができる。実現例によっては、これらのＩ／Ｏコンポーネントの様々なものは、アプリケーションプロセッサ／マルチコアプロセッサ２１５０上に一体化されてもよく、またはアプリケーションプロセッサ／マルチコアプロセッサ２１５０のダイから離れて、またはそのパッケージ外に配置されてもよい。
The touch screen display 2103,
一実施形態では、１つ以上のカメラ２１１０は、カメラとその視野内の対象との間の深度を測定可能な深度カメラを含む。アプリケーションプロセッサまたは他のプロセッサの汎用ＣＰＵコア（もしくはプログラムコードを実行するために命令実行パイプラインを有する他の機能ブロック）上で実行されるアプリケーションソフトウェア、オペレーティングシステムソフトウェア、デバイスドライバソフトウェアおよび／またはファームウェアは、上記の機能のうちのいずれかを実行してもよい。
In one embodiment, the one or
本発明の実施形態は、上述したような様々な処理を含むことができる。これらの処理は、機械実行可能命令で具現化されてもよい。これらの命令は、汎用または特殊目的のプロセッサに特定の処理を実行させるために使用できる。代替的に、これらの処理は、処理を実行するためのハードワイヤード論理を含む特定のハードウェアコンポーネントによって、またはプログラミングされたコンピュータコンポーネントとカスタムハードウェアコンポーネントとの任意の組み合わせによって実行されてもよい。 Embodiments of the present invention can include various treatments as described above. These processes may be embodied in machine executable instructions. These instructions can be used to force a general or special purpose processor to perform a particular operation. Alternatively, these operations may be performed by specific hardware components that include hard-wired logic to perform the processes, or by any combination of programmed computer components and custom hardware components.
本発明の要素はまた、機械実行可能命令を記憶するための機械可読媒体として提供されてもよい。機械可読媒体は、フロッピー（登録商標）ディスク、光ディスク、ＣＤ−ＲＯＭ、および光磁気ディスク、フラッシュメモリ、ＲＯＭ、ＲＡＭ、ＥＰＲＯＭ、ＥＥＰＲＯＭ、磁気もしくは光カード、伝搬媒体、または電子命令を記憶するのに適した他のタイプの媒体／機械可読媒体を含むが、それらに限定はされない。例えば、要素は、搬送波または通信リンク（例えばモデムもしくはネットワーク接続）を介する他の伝搬媒体で具現化されたデータ信号によって、遠隔のコンピュータ（例えばサーバ）から要求側コンピュータ（例えばクライアント）に転送されたコンピュータプログラムとしてダウンロードすることができる。 The elements of the present invention may also be provided as a machine-readable medium for storing machine-executable instructions. Machine-readable media are for storing floppy (registered trademark) disks, optical disks, CD-ROMs, and magneto-optical disks, flash memories, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media, or electronic instructions. Includes, but is not limited to, other types of suitable media / machine readable media. For example, the element was transferred from a remote computer (eg server) to a requesting computer (eg client) by a data signal embodied in a carrier wave or other propagation medium over a communication link (eg modem or network connection). It can be downloaded as a computer program.
前述の明細書では、特定の実施形態の例を説明した。しかしながら、特許請求の範囲に記載される本発明のより広い精神および範囲から逸脱することなく、様々な修正および変更がなされ得ることは明らかであろう。したがって、明細書および図面は、限定的ではなく例示的なものとみなされるべきである。 In the above specification, an example of a specific embodiment has been described. However, it will be clear that various modifications and modifications can be made without departing from the broader spirit and scope of the invention described in the claims. Therefore, the specification and drawings should be regarded as exemplary rather than limiting.
Claims (13)
実行レーンアレイに結合された二次元シフトレジスタ内にコンテントのアレイをロードするステップと、
第１のシーケンスを繰り返し実行するステップとを含み、前記第１のシーケンスは、
前記二次元シフトレジスタによって、特定の行または列に沿って存在する第１のコンテントを、第２のコンテントが存在する別の平行な行または列にシフトするステップと、
前記実行レーンアレイのうちの特定の対応する行または列によって、前記第１および第２のコンテントに対して数学的演算を実行するステップとを含み、前記方法はさらに、
第２のシーケンスを繰り返し実行するステップを含み、前記第２のシーケンスは、
前記二次元シフトレジスタによって、前記第１のシーケンスの前記行または列に平行な結果の行または列に沿った第１の位置のセットから、前記結果の行または列に沿った対応する第２の位置のセットへ、コンテントをシフトするステップを含み、前記結果の行または列は、少なくとも部分的に前記第１のシーケンスの前記数学的演算から決定された値を有し、前記第２のシーケンスはさらに、
前記実行レーンアレイによって、前記第１の位置のセット中のコンテントのアイテム、および前記第２の位置のセット中のそれぞれのコンテントのアイテムに対して、数学的演算を実行するステップを含む、方法。 It's a method
Steps to load an array of content into a 2D shift register coupled to an execution lane array,
The first sequence includes a step of repeatedly executing the first sequence.
A step of shifting a first content along a particular row or column to another parallel row or column in which a second content resides by means of the two-dimensional shift register.
The method further comprises performing mathematical operations on the first and second contents by a particular corresponding row or column of the execution lane array.
The second sequence comprises the step of repeatedly executing the second sequence.
From the set of first positions along the resulting row or column parallel to the row or column of the first sequence by the two-dimensional shift register, the corresponding second along the row or column of the result. The resulting row or column comprises, at least in part, a value determined from the mathematical operation of the first sequence, comprising the step of shifting the content to a set of positions. further,
A method comprising the step of performing a mathematical operation on an item of content in the set of the first position and each item of content in the set of the second position by the execution lane array.
名目上個々の実行レーンのために確保されている記憶空間を併合するステップと、
実行レーンのグループが、併合された記憶空間に書き込むことによって、ビンカウントを更新するステップとをさらに含む、請求項６に記載の方法。 Before the first and second sequences,
With the step of merging the storage space nominally reserved for individual execution lanes,
The method of claim 6, further comprising a step of updating the bin count by having a group of execution lanes write to the merged storage space.
前記二次元シフトレジスタによって、前記第１のシーケンスの前記行または列に平行な第２の結果の行または列に沿った第１の位置の第２のセットから、前記第２の結果の行または列に沿った対応する第２の位置の第２のセットへ、コンテントをシフトするステップを含み、前記第２の結果の行または列は、少なくとも部分的に前記第１のシーケンスの前記数学的演算から決定された値を有し、前記第２のシーケンスはさらに、
前記第１の位置の第２のセット中のコンテントのアイテム、および前記第２の位置の第２のセット中のそれぞれのコンテントのアイテムに対して、第２の数学的演算を実行するステップを含む、請求項１から８のいずれかに記載の方法。 The second sequence further
From the second set of first positions along the row or column of the second result parallel to the row or column of the first sequence by the two-dimensional shift register, the row or column of the second result The row or column of the second result comprises, at least in part, the mathematical operation of the first sequence, comprising shifting the content to a second set of corresponding second positions along the column. The second sequence further comprises a value determined from
A step of performing a second mathematical operation on the items of content in the second set of the first position and the items of each content in the second set of the second position is included. , The method according to any one of claims 1 to 8.
タイル境界の処理をまたいで、累積コンテントのコンテキストスイッチをさらに実行する、請求項１０に記載の方法。 Calculated across tiles in the image
10. The method of claim 10, further performing a context switch of cumulative content across tile boundary processing.
複数の処理コアと、
システムメモリに結合されるとともに、前記複数の処理コアに結合されたメモリコントローラと、
実行レーンアレイに結合された二次元シフトレジスタを有する画像プロセッサと、
請求項１２に記載のプログラムを格納した記憶媒体とを備える、コンピューティングシステム。 It ’s a computing system,
With multiple processing cores
A memory controller coupled to the system memory and coupled to the plurality of processing cores,
An image processor with a two-dimensional shift register coupled to the execution lane array,
Ru and a storage medium storing the program according to claim 12, the computing system.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/201,134 US20180005059A1 (en) | 2016-07-01 | 2016-07-01 | Statistics Operations On Two Dimensional Image Processor |
US15/201,134 | 2016-07-01 | ||
PCT/US2017/036439 WO2018005029A1 (en) | 2016-07-01 | 2017-06-07 | Statistics operations on two dimensional image processor |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2019526849A JP2019526849A (en) | 2019-09-19 |
JP6895466B2 true JP6895466B2 (en) | 2021-06-30 |
Family
ID=59227904
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2018568354A Active JP6895466B2 (en) | 2016-07-01 | 2017-06-07 | Statistical operations on a 2D image processor |
Country Status (8)
Country | Link |
---|---|
US (2) | US20180005059A1 (en) |
JP (1) | JP6895466B2 (en) |
KR (1) | KR102253027B1 (en) |
CN (1) | CN107563951B (en) |
DE (2) | DE202017103695U1 (en) |
GB (1) | GB2554492B (en) |
TW (2) | TWI661360B (en) |
WO (1) | WO2018005029A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10503689B2 (en) * | 2017-05-15 | 2019-12-10 | Google Llc | Image processor I/O unit |
US10489878B2 (en) * | 2017-05-15 | 2019-11-26 | Google Llc | Configurable and programmable image processor unit |
JP6931122B2 (en) | 2017-08-09 | 2021-09-01 | グーグル エルエルシーＧｏｏｇｌｅ ＬＬＣ | Reduction of parasitic interactions in qubit grids for surface code error correction |
CA3228561A1 (en) | 2017-08-09 | 2019-02-14 | Google Llc | Frequency pattern for reducing parasitic interactions in a qubit grid |
CN111183433B (en) | 2017-08-09 | 2023-10-31 | 谷歌有限责任公司 | Reducing parasitic interactions in quantum grids |
US10467142B1 (en) * | 2019-05-07 | 2019-11-05 | 12 Sigma Technologies | Enhancement of real-time response to request for detached data analytics |
US11500811B2 (en) * | 2020-06-12 | 2022-11-15 | Alibaba Group Holding Limited | Apparatuses and methods for map reduce |
KR20220049325A (en) * | 2020-10-14 | 2022-04-21 | 삼성전자주식회사 | Accelerator and electronic device including the same |
Family Cites Families (114)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4445177A (en) | 1981-05-22 | 1984-04-24 | Data General Corporation | Digital data processing system utilizing a unique arithmetic logic unit for handling uniquely identifiable addresses for operands and instructions |
JPS60151789A (en) * | 1984-01-19 | 1985-08-09 | Hitachi Ltd | Multifunctional processor of picture |
JPS6379180A (en) | 1987-03-06 | 1988-04-09 | Hitachi Ltd | Lsi for processing parallel image |
DE3851005T2 (en) | 1987-06-01 | 1995-04-20 | Applied Intelligent Syst Inc | Parallel neighboring processing system and method. |
US4935894A (en) | 1987-08-31 | 1990-06-19 | Motorola, Inc. | Multi-processor, multi-bus system with bus interface comprising FIFO register stocks for receiving and transmitting data and control information |
US4972495A (en) * | 1988-12-21 | 1990-11-20 | General Electric Company | Feature extraction processor |
US4939642A (en) * | 1989-02-01 | 1990-07-03 | The Board Of Trustees Of The Leland Stanford Jr. University | Virtual bit map processor |
US5253308A (en) | 1989-06-21 | 1993-10-12 | Amber Engineering, Inc. | Massively parallel digital image data processor using pixel-mapped input/output and relative indexed addressing |
US5173947A (en) * | 1989-08-01 | 1992-12-22 | Martin Marietta Corporation | Conformal image processing apparatus and method |
US5093871A (en) | 1989-10-10 | 1992-03-03 | Unisys Corporation | Method and apparatus for effecting background suppression of image data |
GB8925723D0 (en) * | 1989-11-14 | 1990-01-04 | Amt Holdings | Processor array system |
WO1994009595A1 (en) | 1991-09-20 | 1994-04-28 | Shaw Venson M | Method and apparatus including system architecture for multimedia communications |
US5581773A (en) * | 1992-05-12 | 1996-12-03 | Glover; Michael A. | Massively parallel SIMD processor which selectively transfers individual contiguously disposed serial memory elements |
US5644517A (en) * | 1992-10-22 | 1997-07-01 | International Business Machines Corporation | Method for performing matrix transposition on a mesh multiprocessor architecture having multiple processor with concurrent execution of the multiple processors |
US5428804A (en) * | 1992-12-18 | 1995-06-27 | Xerox Corporation | Edge crossing circuitry for SIMD architecture |
JP3482660B2 (en) | 1993-09-08 | 2003-12-22 | ソニー株式会社 | Image data processing apparatus and image data processing method |
US5612693A (en) | 1994-12-14 | 1997-03-18 | International Business Machines Corporation | Sliding window data compression using a toroidal bit shift register |
JP3573755B2 (en) | 1996-01-15 | 2004-10-06 | シーメンス アクチエンゲゼルシヤフト | Image processing processor |
US5892962A (en) | 1996-11-12 | 1999-04-06 | Lucent Technologies Inc. | FPGA-based processor |
US6148111A (en) * | 1998-04-27 | 2000-11-14 | The United States Of America As Represented By The Secretary Of The Navy | Parallel digital image compression system for exploiting zerotree redundancies in wavelet coefficients |
US6366289B1 (en) | 1998-07-17 | 2002-04-02 | Microsoft Corporation | Method and system for managing a display image in compressed and uncompressed blocks |
US6587158B1 (en) | 1998-07-23 | 2003-07-01 | Dvdo, Inc. | Method and apparatus for reducing on-chip memory in vertical video processing |
US7010177B1 (en) | 1998-08-27 | 2006-03-07 | Intel Corporation | Portability of digital images |
EP1164544B1 (en) | 1999-03-16 | 2011-11-02 | Hamamatsu Photonics K.K. | High-speed vision sensor |
EP1181648A1 (en) * | 1999-04-09 | 2002-02-27 | Clearspeed Technology Limited | Parallel data processing apparatus |
US6681058B1 (en) * | 1999-04-15 | 2004-01-20 | Sarnoff Corporation | Method and apparatus for estimating feature values in a region of a sequence of images |
EP1107107A1 (en) * | 1999-12-10 | 2001-06-13 | Koninklijke Philips Electronics N.V. | Parallel data processing and shuffling |
JP3922859B2 (en) | 1999-12-28 | 2007-05-30 | 株式会社リコー | Image processing apparatus, image processing method, and computer-readable recording medium storing program for causing computer to execute the method |
US6745319B1 (en) | 2000-02-18 | 2004-06-01 | Texas Instruments Incorporated | Microprocessor with instructions for shuffling and dealing data |
US6728862B1 (en) | 2000-05-22 | 2004-04-27 | Gazelle Technology Corporation | Processor array and parallel data processing methods |
US6728722B1 (en) | 2000-08-28 | 2004-04-27 | Sun Microsystems, Inc. | General data structure for describing logical data spaces |
GB2371459B (en) * | 2001-01-19 | 2005-05-04 | Pixelfusion Ltd | Image scaling |
US6922716B2 (en) * | 2001-07-13 | 2005-07-26 | Motorola, Inc. | Method and apparatus for vector processing |
US7286717B2 (en) | 2001-10-31 | 2007-10-23 | Ricoh Company, Ltd. | Image data processing device processing a plurality of series of data items simultaneously in parallel |
JP4146654B2 (en) | 2002-02-28 | 2008-09-10 | 株式会社リコー | Image processing circuit, composite image processing circuit, and image forming apparatus |
US9170812B2 (en) | 2002-03-21 | 2015-10-27 | Pact Xpp Technologies Ag | Data processing system having integrated pipelined array data processor |
WO2003088033A1 (en) | 2002-04-09 | 2003-10-23 | University Of Rochester | Multiplier-based processor-in-memory architectures for image and graphics processing |
US7506135B1 (en) * | 2002-06-03 | 2009-03-17 | Mimar Tibet | Histogram generation with vector operations in SIMD and VLIW processor by consolidating LUTs storing parallel update incremented count values for vector data elements |
AU2003286131A1 (en) | 2002-08-07 | 2004-03-19 | Pact Xpp Technologies Ag | Method and device for processing data |
EP1450214A1 (en) * | 2002-12-16 | 2004-08-25 | Ricoh Company | Data conversion system for image processing and image forming apparatus |
US20060044576A1 (en) | 2004-07-30 | 2006-03-02 | Kabushiki Kaisha Toshiba | Apparatus for image processing |
US7667764B2 (en) | 2004-06-04 | 2010-02-23 | Konica Minolta Holdings, Inc. | Image sensing apparatus |
JP4219887B2 (en) | 2004-12-28 | 2009-02-04 | 富士通マイクロエレクトロニクス株式会社 | Image processing apparatus and image processing method |
ATE504043T1 (en) | 2005-04-28 | 2011-04-15 | Univ Edinburgh | RECONFIGURABLE INSTRUCTION CELL ARRAY |
US7882339B2 (en) | 2005-06-23 | 2011-02-01 | Intel Corporation | Primitives to enhance thread-level speculation |
US20070198901A1 (en) * | 2005-07-12 | 2007-08-23 | Amit Ramchandran | Configurable interface for connecting various chipsets for wireless communication to a programmable (multi-)processor |
JP2007067917A (en) | 2005-08-31 | 2007-03-15 | Matsushita Electric Ind Co Ltd | Image data processing apparatus |
US20070073999A1 (en) * | 2005-09-28 | 2007-03-29 | Verheyen Henry T | Hardware acceleration system for logic simulation using shift register as local cache with path for bypassing shift register |
US7602974B2 (en) | 2005-10-21 | 2009-10-13 | Mobilic Technology (Cayman) Corp. | Universal fixed-pixel-size ISP scheme |
US20070126673A1 (en) | 2005-12-07 | 2007-06-07 | Kostadin Djordjev | Method and system for writing data to MEMS display elements |
FR2895103B1 (en) | 2005-12-19 | 2008-02-22 | Dxo Labs Sa | METHOD AND SYSTEM FOR PROCESSING DIGITAL DATA |
US7750915B1 (en) * | 2005-12-19 | 2010-07-06 | Nvidia Corporation | Concurrent access of data elements stored across multiple banks in a shared memory resource |
US7802073B1 (en) | 2006-03-29 | 2010-09-21 | Oracle America, Inc. | Virtual core management |
US8176265B2 (en) * | 2006-10-30 | 2012-05-08 | Nvidia Corporation | Shared single-access memory with management of multiple parallel requests |
US20080111823A1 (en) | 2006-11-13 | 2008-05-15 | Faraday Technology Corp. | Graphics processing system |
EP1927949A1 (en) * | 2006-12-01 | 2008-06-04 | Thomson Licensing | Array of processing elements with local registers |
US8321849B2 (en) | 2007-01-26 | 2012-11-27 | Nvidia Corporation | Virtual architecture and instruction set for parallel thread computing |
US7876330B2 (en) * | 2007-03-30 | 2011-01-25 | Kabushiki Kaisha Toshiba | Color conversion apparatus, filter processing apparatus and color conversion method |
US20080244222A1 (en) | 2007-03-30 | 2008-10-02 | Intel Corporation | Many-core processing using virtual processors |
US8117137B2 (en) * | 2007-04-19 | 2012-02-14 | Microsoft Corporation | Field-programmable gate array based accelerator system |
JP4389976B2 (en) | 2007-06-29 | 2009-12-24 | ブラザー工業株式会社 | Image processing apparatus and image processing program |
JP4844853B2 (en) | 2007-09-05 | 2011-12-28 | 国立大学法人東北大学 | Solid-state imaging device and driving method thereof |
US9513905B2 (en) * | 2008-03-28 | 2016-12-06 | Intel Corporation | Vector instructions to enable efficient synchronization and parallel reduction operations |
CN102047241B (en) | 2008-05-30 | 2014-03-12 | 先进微装置公司 | Local and global data share |
JP4999791B2 (en) | 2008-06-30 | 2012-08-15 | キヤノン株式会社 | Information processing apparatus, control method thereof, and program |
US8456480B2 (en) * | 2009-01-14 | 2013-06-04 | Calos Fund Limited Liability Company | Method for chaining image-processing functions on a SIMD processor |
KR101572879B1 (en) | 2009-04-29 | 2015-12-01 | 삼성전자주식회사 | Dynamic parallel system and method for parallel application program |
JP5302769B2 (en) * | 2009-05-14 | 2013-10-02 | キヤノン株式会社 | Scan conversion apparatus, image encoding apparatus, and control method thereof |
US20110055495A1 (en) | 2009-08-28 | 2011-03-03 | Qualcomm Incorporated | Memory Controller Page Management Devices, Systems, and Methods |
EP2290538A3 (en) * | 2009-08-31 | 2011-06-22 | Imec | Method and device for reducing power consumption in application specific instruction set processors |
US8976195B1 (en) | 2009-10-14 | 2015-03-10 | Nvidia Corporation | Generating clip state for a batch of vertices |
US8436857B2 (en) | 2009-10-20 | 2013-05-07 | Oracle America, Inc. | System and method for applying level of detail schemes |
US8595428B2 (en) | 2009-12-22 | 2013-11-26 | Intel Corporation | Memory controller functionalities to support data swizzling |
US8749667B2 (en) | 2010-08-02 | 2014-06-10 | Texas Instruments Incorporated | System and method for maintaining maximum input rate while up-scaling an image vertically |
GB2483225B (en) * | 2010-08-27 | 2018-07-11 | Nvidia Tech Uk Limited | Improved processor architecture |
US8508612B2 (en) | 2010-09-30 | 2013-08-13 | Apple Inc. | Image signal processor line buffer configuration for processing ram image data |
US8797323B2 (en) | 2011-01-18 | 2014-08-05 | Intel Corporation | Shadowing dynamic volumetric media |
WO2012105174A1 (en) | 2011-01-31 | 2012-08-09 | パナソニック株式会社 | Program generation device, program generation method, processor device, and multiprocessor system |
US9092267B2 (en) | 2011-06-20 | 2015-07-28 | Qualcomm Incorporated | Memory sharing in graphics processing unit |
US20130027416A1 (en) | 2011-07-25 | 2013-01-31 | Karthikeyan Vaithianathan | Gather method and apparatus for media processing accelerators |
WO2013046712A1 (en) * | 2011-09-29 | 2013-04-04 | パナソニック株式会社 | Sealed secondary battery |
JP5742651B2 (en) | 2011-10-15 | 2015-07-01 | コニカミノルタ株式会社 | Image processing apparatus, linkage method, and linkage program |
US20140247673A1 (en) | 2011-10-28 | 2014-09-04 | Naveen Muralimanohar | Row shifting shiftable memory |
CN103828370B (en) * | 2011-10-31 | 2017-11-03 | 联发科技股份有限公司 | Buffer unit, way to play for time and entropy decoder |
JP5746100B2 (en) | 2011-12-27 | 2015-07-08 | 京セラドキュメントソリューションズ株式会社 | Image forming apparatus |
US8823736B2 (en) | 2012-01-20 | 2014-09-02 | Intel Corporation | Graphics tiling architecture with bounding volume hierarchies |
US10244246B2 (en) | 2012-02-02 | 2019-03-26 | Texas Instruments Incorporated | Sub-pictures for pixel rate balancing on multi-core platforms |
US9235769B2 (en) | 2012-03-15 | 2016-01-12 | Herta Security, S.L. | Parallel object detection method for heterogeneous multithreaded microarchitectures |
TWI520598B (en) | 2012-05-23 | 2016-02-01 | 晨星半導體股份有限公司 | Image processing apparatus and image processing method |
US9232139B2 (en) | 2012-07-24 | 2016-01-05 | Apple Inc. | Image stabilization using striped output transformation unit |
US9378181B2 (en) | 2012-11-09 | 2016-06-28 | Intel Corporation | Scalable computing array |
JP6020091B2 (en) | 2012-11-27 | 2016-11-02 | 富士通株式会社 | Arithmetic processing device control program, arithmetic processing device control method, and arithmetic processing device |
US9490971B2 (en) * | 2012-12-28 | 2016-11-08 | Intel Corporation | Instruction for fast ZUC algorithm processing |
US8954992B2 (en) | 2013-03-15 | 2015-02-10 | Lenovo Enterprise Solutions (Singapore) Pte. Ltd. | Distributed and scaled-out network switch and packet processing |
US9146885B2 (en) * | 2013-05-17 | 2015-09-29 | Analog Devices, Inc. | Parallel atomic increment |
US9477999B2 (en) * | 2013-09-20 | 2016-10-25 | The Board Of Trustees Of The Leland Stanford Junior University | Low power programmable image processor |
JP6329412B2 (en) * | 2014-03-26 | 2018-05-23 | 株式会社メガチップス | SIMD processor |
US9569811B2 (en) * | 2014-06-26 | 2017-02-14 | Qualcomm Incorporated | Rendering graphics to overlapping bins |
GB2533284B (en) | 2014-12-11 | 2017-04-12 | Imagination Tech Ltd | Performing object detection |
US9678716B2 (en) * | 2014-12-22 | 2017-06-13 | Arm Limited | Apparatus and method for performing absolute difference operation |
US10996959B2 (en) * | 2015-01-08 | 2021-05-04 | Technion Research And Development Foundation Ltd. | Hybrid processor |
US9749548B2 (en) | 2015-01-22 | 2017-08-29 | Google Inc. | Virtual linebuffers for image signal processors |
US10402946B2 (en) * | 2015-03-17 | 2019-09-03 | Lexmark International, Inc. | System and method for performing orthogonal rotation and mirroring operation in a device |
US10291813B2 (en) | 2015-04-23 | 2019-05-14 | Google Llc | Sheet generator for image processor |
US10095479B2 (en) | 2015-04-23 | 2018-10-09 | Google Llc | Virtual image processor instruction set architecture (ISA) and memory model and exemplary target hardware having a two-dimensional shift array structure |
KR102370617B1 (en) * | 2015-04-23 | 2022-03-04 | 삼성전자주식회사 | Method and apparatus for processing a image by performing adaptive sampling |
US9785423B2 (en) | 2015-04-23 | 2017-10-10 | Google Inc. | Compiler for translating between a virtual image processor instruction set architecture (ISA) and target hardware having a two-dimensional shift array structure |
US9769356B2 (en) | 2015-04-23 | 2017-09-19 | Google Inc. | Two dimensional shift array for image processor |
US9756268B2 (en) | 2015-04-23 | 2017-09-05 | Google Inc. | Line buffer unit for image processor |
US9965824B2 (en) | 2015-04-23 | 2018-05-08 | Google Llc | Architecture for high performance, power efficient, programmable image processing |
US9772852B2 (en) | 2015-04-23 | 2017-09-26 | Google Inc. | Energy efficient processor core architecture for image processor |
US9632979B2 (en) * | 2015-06-01 | 2017-04-25 | Intel Corporation | Apparatus and method for efficient prefix sum operation |
JP6771018B2 (en) * | 2015-07-23 | 2020-10-21 | マイヤプリカ テクノロジー エルエルシー | Improved performance of 2D array processor |
US9760794B2 (en) * | 2015-09-25 | 2017-09-12 | Intel Corporation | Method and system of low-complexity histrogram of gradients generation for image processing |
-
2016
- 2016-07-01 US US15/201,134 patent/US20180005059A1/en not_active Abandoned
-
2017
- 2017-05-16 US US15/596,286 patent/US10915773B2/en active Active
- 2017-06-07 JP JP2018568354A patent/JP6895466B2/en active Active
- 2017-06-07 KR KR1020197003053A patent/KR102253027B1/en active IP Right Grant
- 2017-06-07 WO PCT/US2017/036439 patent/WO2018005029A1/en active Application Filing
- 2017-06-20 GB GB1709787.4A patent/GB2554492B/en active Active
- 2017-06-21 DE DE202017103695.2U patent/DE202017103695U1/en active Active
- 2017-06-21 DE DE102017113735.1A patent/DE102017113735B4/en active Active
- 2017-06-29 TW TW106121713A patent/TWI661360B/en active
- 2017-06-29 TW TW108114332A patent/TWI736880B/en active
- 2017-07-03 CN CN201710532140.7A patent/CN107563951B/en active Active
Also Published As
Publication number | Publication date |
---|---|
DE202017103695U1 (en) | 2017-11-21 |
WO2018005029A1 (en) | 2018-01-04 |
TW201812641A (en) | 2018-04-01 |
GB2554492B (en) | 2020-05-06 |
US20180005059A1 (en) | 2018-01-04 |
KR102253027B1 (en) | 2021-05-17 |
TWI661360B (en) | 2019-06-01 |
TWI736880B (en) | 2021-08-21 |
JP2019526849A (en) | 2019-09-19 |
KR20190028453A (en) | 2019-03-18 |
US20180005061A1 (en) | 2018-01-04 |
GB2554492A (en) | 2018-04-04 |
CN107563951B (en) | 2021-06-08 |
CN107563951A (en) | 2018-01-09 |
US10915773B2 (en) | 2021-02-09 |
GB201709787D0 (en) | 2017-08-02 |
DE102017113735A1 (en) | 2018-01-04 |
DE102017113735B4 (en) | 2022-09-01 |
TW201928760A (en) | 2019-07-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6895466B2 (en) | Statistical operations on a 2D image processor | |
JP6764904B2 (en) | 2D shift array for image processors | |
JP6858239B2 (en) | Compiler techniques for mapping program code to high-performance, power-efficient, programmable image processing hardware platforms | |
JP6764954B2 (en) | Convolutional neural network on a programmable 2D image processor | |
JP6793228B2 (en) | Sheet generator for image processor | |
JP6571790B2 (en) | High-performance, power-efficient, programmable image processing architecture | |
JP7066732B2 (en) | Configurable and programmable image processor unit | |
KR101971657B1 (en) | Energy-efficient processor core architecture for image processors | |
KR102050899B1 (en) | Compiler Managed Memory for Image Processors | |
US10719295B2 (en) | Circuit to perform dual input value absolute value and sum operation | |
JP6775088B2 (en) | Program code variants to improve image processor runtime efficiency | |
JP6820428B2 (en) | Configuring application software on a multi-core image processor | |
CN110574067A (en) | Image processor I/O unit |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20190521 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20190521 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20200702 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20200901 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20210511 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20210607 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 6895466Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |