US6671850B1 - On-the-fly algebraic error correction system and method for reducing error location search - Google Patents
On-the-fly algebraic error correction system and method for reducing error location search Download PDFInfo
- Publication number
- US6671850B1 US6671850B1 US09/562,575 US56257500A US6671850B1 US 6671850 B1 US6671850 B1 US 6671850B1 US 56257500 A US56257500 A US 56257500A US 6671850 B1 US6671850 B1 US 6671850B1
- Authority
- US
- United States
- Prior art keywords
- roots
- polynomial
- error
- transformed
- locator polynomial
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/65—Purpose and implementation aspects
- H03M13/6502—Reduction of hardware complexity or efficient processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/60—Methods or arrangements for performing computations using a digital non-denominational number representation, i.e. number representation without radix; Computing devices using combinations of denominational and non-denominational quantity representations, e.g. using difunction pulse trains, STEELE computers, phase computers
- G06F7/72—Methods or arrangements for performing computations using a digital non-denominational number representation, i.e. number representation without radix; Computing devices using combinations of denominational and non-denominational quantity representations, e.g. using difunction pulse trains, STEELE computers, phase computers using residue arithmetic
- G06F7/724—Finite field arithmetic
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11B—INFORMATION STORAGE BASED ON RELATIVE MOVEMENT BETWEEN RECORD CARRIER AND TRANSDUCER
- G11B20/00—Signal processing not specific to the method of recording or reproducing; Circuits therefor
- G11B20/10—Digital recording or reproducing
- G11B20/18—Error detection or correction; Testing, e.g. of drop-outs
- G11B20/1833—Error detection or correction; Testing, e.g. of drop-outs by adding special lists or symbols to the coded information
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/13—Linear codes
- H03M13/15—Cyclic codes, i.e. cyclic shifts of codewords produce other codewords, e.g. codes defined by a generator polynomial, Bose-Chaudhuri-Hocquenghem [BCH] codes
- H03M13/151—Cyclic codes, i.e. cyclic shifts of codewords produce other codewords, e.g. codes defined by a generator polynomial, Bose-Chaudhuri-Hocquenghem [BCH] codes using error location or error correction polynomials
- H03M13/1525—Determination and particular use of error location polynomials
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2207/00—Indexing scheme relating to methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F2207/72—Indexing scheme relating to groups G06F7/72 - G06F7/729
- G06F2207/7209—Calculation via subfield, i.e. the subfield being GF(q) with q a prime power, e.g. GF ((2**m)**n) via GF(2**m)
Definitions
- the present invention relates to the field of data storage, and particularly to error correcting systems and methods employing on-the-fly algebraic error correcting codes. More specifically, this invention relates to an improved method for transforming an error locator polynomial into two polynomials whose roots are elements in a smaller subfield, in order to significantly simplify the complexity of the error location calculation implementation.
- cyclic error correcting codes in connection with the storage of data in storage devices is well established and is generally recognized as a reliability requirement for the storage system.
- the error correcting process involves the processing of syndrome bytes to determine the location and value of each error.
- Non-zero syndrome bytes result from the exclusive-ORing of error characters that are generated when data is written on the storage medium.
- ECC check characters The number of ECC check characters employed depends on the desired power of the code. As an example, in many present day ECC systems used in connection with the storage of 8-bit bytes in a storage device, two check bytes are used for each error to be corrected in a codeword having a length of at most 255 byte positions. Thus, for example, six check bytes are required to correct up to three errors in a block of data having 249 data bytes and six check bytes. Six distinctive syndrome bytes are therefore generated in such a system. If there are no errors in the data word comprising the 255 bytes read from storage, then the six syndrome bytes contain an all zero pattern. Under such a condition, no syndrome processing is required and the data word may be sent to the central processing unit. However, if one or more of the syndrome bytes are non-zero, then syndrome processing involves the process of identifying the location of the bytes in error and further identifying the error pattern for each error location.
- error locator polynomial The overall objective of the mathematics involved employing the error locator polynomial is to define the locations of the bytes in error by using only the syndrome bytes that are generated in the system.
- the error locator polynomial has been conventionally employed as the start of the mathematical analysis to express error locations in terms of syndromes, so that binary logic may be employed to decode the syndrome bytes into first identifying the locations in error, in order to enable the associated hardware to identify the error patterns in each location.
- error locations in an on-the-fly ECC used in storage or communication systems are calculated as roots of the error locator polynomial.
- the calculation of the roots represents a bottleneck in the implementation of the on-the-fly ECC.
- the roots calculation is done by explicit formulas whose hardware implementation becomes increasingly complex as the number of correctable errors increases.
- the roots calculation is done by an iterative search over all possible data symbol locations.
- the latency of these designs can be excessive, which requires several searches to be conducted in parallel over disjoint phases of symbol locations, and to be implemented in the arithmetic of the finite field that covers the complete data set.
- a method is provided to transform an error locator polynomial into two new polynomials whose roots are elements in a smaller subfield, in order to significantly simplify the complexity, and to reduce the latency of the error correcting system hardware implementation.
- the above and other features of the present invention are realized by an on-the-fly algebraic error correction system and corresponding method for reducing error location search.
- the method transforms an error locator polynomial into two transformed polynomials whose roots are elements in a smaller subfield, in order to significantly simplify the complexity, and to reduce the latency of the error correcting system hardware implementation.
- the present method requires at most (m 2 /2) evaluations of polynomials over the Galois field GF(2 2n ), along with root finding of two polynomials of degree m over the Galois subfield GF(2 n ).
- FIG. 1 is a schematic illustration of a data storage system such as a disk drive that implements an on-the-fly algebraic error correction code (ECC) according to the present invention
- ECC on-the-fly algebraic error correction code
- FIG. 2 is a block diagram detailing the architecture of a buffered hard disk controller that includes an on-the-fly (OTF) error correction code (ECC) system for implementing the on-the-fly error correction code according to the present invention
- OTF on-the-fly
- ECC error correction code
- FIG. 3 is a block diagram of the data storage system of FIG. 1, depicting data flow along a read channel and a write channel of the hard drive controller of FIG. 2, and illustrating an exemplary on-the-fly error correction code system comprised of an ECC read processor and an ECC write processor;
- FIG. 4 is a block diagram of the data storage system of FIG. 1, detailing the main components of an error correction code module that forms part of the ECC read processor and the ECC write processor of FIG. 3;
- FIG. 5 is a functional flow chart that illustrates the implementation of an error correction code by the error correction code module of FIG. 4;
- FIG. 6 is a functional flow chart that illustrates a step in the error correction code of FIG. 5, for splitting a polynomial f(x) in a Galois field GF(2 2n ) into two polynomials f 1 (x) and f 2 (x) and transforming the latter polynomials in a Galois subfield GF(2 n );
- FIG. 7 illustrates the process of transforming the roots of the polynomial f(x) by a set of quadratic transformations and the resulting polynomial f 1 (x);
- FIG. 8 illustrates the process of transforming the roots of the polynomial f(x) by a set of quadratic transformations, and the resulting polynomial f 2 (x).
- FIG. 1 illustrates a disk drive 10 comprised of a head stack assembly 12 and a stack of spaced apart magnetic, optical and/or MO data storage disks or media 14 that are rotatable about a common shaft 16 .
- the head stack assembly 12 includes a number of actuator arms 20 that extend into spacings between the disks 14 , with only one disk 14 and one actuator arm 20 being illustrated for simplicity of illustration.
- the disk drive 10 further includes a preamplifier 44 , a read/write channel 48 , and a hard disk controller 50 .
- the head stack assembly 12 also includes an E-shaped block 24 and a magnetic rotor 26 attached to the block 24 in a position diametrically opposite to the actuator arms 20 .
- the rotor 26 cooperates with a stator (not shown) for the actuator arms 20 to rotate in a substantially radial direction, along an arcuate path in the direction of an arrow A.
- Energizing a coil of the rotor 26 with a direct current in one polarity or the reverse polarity causes the head stack assembly 12 , including the actuator arms 20 , to rotate around axis P in a direction substantially radial to the disks 14 .
- a head disk assembly 33 is comprised of the disks 14 and the head stack assemblies 12 .
- a transducer head 40 is mounted on the free end of each actuator arm 20 for pivotal movement around axis P.
- the magnetic rotor 26 controls the movement of the head 40 in a radial direction, in order to position the head 40 in registration with data information tracks or data cylinders 42 to be followed, and to access particular data sectors on these tracks 42 .
- a data cylinder includes a set of corresponding data information tracks 42 for the data surfaces of the stacked disks 14 .
- Data information tracks 42 include a plurality of segments or data sectors, each containing a predefined size of individual groups of data records that are saved for later retrieval and updates.
- the data information tracks 42 can be disposed at predetermined positions relative to a servo reference index.
- FIG. 2 illustrates an exemplary architecture of a buffered hard disk controller 50 that comprises an on-the-fly (OTF) error correction code (ECC) system 100 for implementing the on-the-fly error correction code according to the present invention.
- OTF on-the-fly
- ECC error correction code
- the hard drive controller 50 includes a logic drive circuit 105 that formats data from the hard disk assembly 33 , for example from 8 bits to 32 bits.
- a FIFO register 110 stores the formatted data and exchanges the same with a sector buffer 120 .
- the ECC system 100 receives the formatted data from the drive logic circuit 105 and performs the error correction coding algorithm of the present invention, as described herein.
- a buffer manager 115 controls data traffic between the ECC system 100 , a sector buffer (i.e., random access memory) 120 , and a microprocessor 125 .
- Another FIFO register 130 stores data and exchanges the same with the sector buffer 120 .
- a sequence controller 135 is connected between the drive logic circuit 105 , the microprocessor 125 , and a host interface 140 , to control the sequence operation of the data traffic and various commands across the hard drive controller 50 .
- the host interface 140 provides an interface between the hard drive controller 50 and a host 60 .
- FIG. 3 is a block diagram of the hard disk controller 50 of FIG. 2 that includes an on-the-fly error correction code system 100 comprised of an ECC read processor 163 and an ECC write processor 167 .
- an on-the-fly error correction code system 100 comprised of an ECC read processor 163 and an ECC write processor 167 .
- sequences of digital binary data are to be written onto the disk 14 , they are placed temporarily in a buffer 165 and subsequently processed and transduced along a write path or channel ( 157 , 167 , and 169 ).
- a predetermined number of binary data elements, also termed bytes, in a data string are moved from the buffer 165 and streamed through an ECC write processor 167 .
- the data bytes are mapped into codewords drawn from a suitable linear block or cyclic code such as a Reed-Solomon code.
- each codeword is mapped in a write path signal-shaping unit 169 into a run length limited or other bandpass or spectral-shaping code and changed into a time-varying signal.
- the write path signal-shaping unit 169 includes an encoder 202 (FIG. 4) for encoding the signals as described herein.
- the time-varying signal is applied through an interface read/write transducer interface 157 and thence to the write element in a magnetoresistive or other suitable transducer head 40 for conversion into magnetic flux patterns.
- sequences of magnetic flux patterns are to be read from the disk 14 , they are processed in a read path or channel ( 157 , 159 , 161 , and 163 ) and written into the buffer 165 .
- the time-varying signals sensed by transducer 40 are passed through the read/write transducer interface 157 to a digital signal extraction unit 159 .
- the signal is detected and a decision is made as to whether it should be resolved as a binary 1 or 0.
- these 1's and 0's stream out of the signal extraction unit 159 they are arranged into codewords in the formatting unit 11 .
- each codeword is applied to an ECC read processor 163 over a path from a formatter 161 . Also, the output from the ECC processor 163 is written into buffer 165 .
- the read path also operates in a synchronous datastreaming manner such that any detected errors must be located and corrected within the codeword well in time for the ECC read processor 163 to receive the next codeword read from the disk track 42 .
- the buffer 165 and the read and write channels may be monitored and controlled by the microprocessor 125 (FIG. 2) to ensure efficacy where patterns of referencing may dictate that a path not be taken down, such as sequential read referencing.
- ECC error correction code
- the ECC system 100 includes several functional units such as an encoder 202 , a syndrome generator 205 , a key equation solver 210 that provides error locator and error evaluator polynomial calculations, and the ECC module 200 .
- an important aspect of the ECC module 200 is the transformation of the error locator polynomial f(x) generated by the key equation solver 210 , and whose coefficients are stored in the registers 215 and 217 .
- This transformation is implemented by means of digital hardware logic into two new polynomials, i.e., f 1 (x) and f 2 (x) whose roots lie in a subfield of the original Galois field.
- the original error locations are for example, 8-bit addresses
- the transformed error locations are 4-bit addresses.
- the roots of the transformed polynomials f 1 (x) and f 2 (x) are elements in the Galois subfield GF(2 n ).
- the actual operations executed by the ECC module 200 and more specifically by the transformer 222 and the transformer 254 of the ECC module 200 , are preferably precomputed by an algorithm and hardwired into digital logic for a given maximum error locator polynomial degree. While the transformers 222 and 254 are illustrated as being separate components, it should be clear that these two transformers 222 and 254 can be functionally combined.
- the actual search for the roots of the polynomials f 1 (x) and f 2 (x) by the search units 242 , 264 , respectively, can now be executed in the arithmetic of the subfield GF(2 n ) instead of the field GF(2 2n ). While the search units 242 and 264 are illustrated as being separate components, it should be clear that these two search units 242 and 264 can be functionally combined.
- FIG. 5 it represents a functional flow chart that illustrates a transformation method 400 for implementing an error correction code by means of the error correction code module 200 of FIG. 4 .
- the theory supporting the method 400 will be now described in general introductory terms.
- the method 400 starts at step 410 by splitting a polynomial f(x) over a finite field with 2 2n elements.
- the method 400 constructs two polynomials f 1 (x) and f 2 (x) over a subfield with 2 n elements at steps 422 and 454 , respectively.
- the method 400 locates the roots of the polynomial f(x) over the Galois field GF(2 2n ) by finding the roots of f 1 (x) and f 2 (x) over the Galois field GF(2 n ) at steps 442 and 464 , respectively.
- the method 400 identifies the roots of the polynomials f 1 (x) and f 2 (x) that correspond to the roots of the polynomial f(x).
- the new method 400 requires at most (2 n+1 ) polynomial evaluations of polynomials over the Galois subfield GF(2 n ) and m 2 /2 evaluations of polynomials over the Galois field GF(2 2n ).
- the method 400 optimizes the root searching process for a polynomial f(x) whose degree is less than 2 n .
- the finite Galois field GF(2 2n ) i.e., with an even degree over the Galois subfield GF(2) is constructed by making a quadratic extension to the Galois subfield GF(2 n ).
- FIGS. 4 through 6 they illustrate a specific and exemplary implementation of the transformation algorithm 422 (FIGS. 5, 6 ) of splitting a polynomial f(x) in a Galois field GF(2 2n ) into two polynomials f 1 (x) and f 2 (x) and transforming the latter polynomials in a Galois subfield GF(2 n ).
- the transformation of the polynomial f 1 (x) is implemented by the transformer 222 (FIG. 4 )
- the transformation of the polynomial f 2 (x) is implemented by the transformer 254 (FIG. 4 ).
- the roots of the polynomial f(x) are expressed in the form: “a i ⁇ +b i ”, and the polynomial f(x) is transformed to a new polynomial g(y) whose roots are a i .
- the transformation algorithm 422 transforms these roots by the map z ⁇ Z 2′′ +z. This transformation could be implemented by eliminating the variable x from the following equations:
- the Galois subfield GF(2 n ) is a vector space of dimension n over the subfield GF(2), and thus, the transformation algorithm 422 presumes a basis r 1 through r n where r 1 is assumed to be equal to 1 (the unit vector).
- the transformation algorithm 422 presents an iterative construction of quadratic transformations that compose to yield the transformation Z 2 n +z. Each quadratic transformation is of the form: z ⁇ z 2 +c i z for some element c i , in the subfield GF(2 n ).
- the transformation algorithm 422 presents a procedure for computing the values of c i .
- m i m i ⁇ 1 2 +c i ⁇ m i ⁇ 1 for 1 ⁇ i ⁇ n.
- FIG. 7 illustrates the process 422 (FIG. 5) of transforming the roots of the polynomial f(x) by a set of quadratic transformation (step 560 ), as implemented by means of the transformer 222 (FIG. 4 ), and the step 442 (FIG. 5) of finding the roots of the resulting polynomial f 1 (x) by means of a search unit 242 (FIG. 4 ).
- the process 560 starts by eliminating x from the following equations:
- g 1 ( y ) y 3 +g 12 ⁇ y 2 +g 11 ⁇ y+g 10 , and
- g 0 ( y ) g 03 ⁇ y 3 +g 02 ⁇ y 2 g 01 ⁇ y+g 00 .
- the n transformations of the form (x 2 +c i x), yield a final polynomial f 1 (x) g(y) whose roots have been transformed by (x 2 n +x) and stored in registers 660 .
- the roots of this polynomial g(y) provide the coefficients a i associated with each root of the original polynomial f(x). All the roots (and coefficients after dividing through by the leading coefficient) of the polynomial g(y) lie in the Galois subfield GF(2 n ), which permits the use of less expensive hardware to locate the roots over this subfield.
- FIG. 7 illustrates the actual expressions of g 12 , g 11 , g 10 , g 03 , g 02 , g 01 , and g 00 in terms of the coefficients of the polynomial f(x): V 0 , V 1 , V 2 , V 3 , V 4 , V 5 and V 6 , as well as expressions for the coefficients of the transformed polynomial: V 0 , V′ 1 , V′ 2 , V′ 3 , V′ 4 , V′ 5 and V′ 6 .
- FIG. 8 illustrates the process 454 (FIG. 5) of transforming the roots of the polynomial f(x) by a set of quadratic transformation (step 760 ), as implemented by means of the transformer 254 (FIG. 4 ), and the step 464 (FIG. 5) of finding the roots of the resulting polynomial f 2 (x) by means of a search unit 264 (FIG. 4 ).
- the process 760 is preferably implemented in an identical sequence and manner as described above in connection with the process 560 (FIG. 7 ).
- Applying the same sequence of quadratic transformations 750 to this new polynomial 700 yields a polynomial f 2 (x) whose roots a i +b i and stored in registers 777 .
- This polynomial 777 has its coefficients and roots in the Galois subfield GF(2 n ).
- the roots of this polynomial f 2 (x) are located by the search unit 264 (FIG. 4) as described herein.
- the on-the-fly error correction code system 100 has computed two sequences of values in the Galois subfield GF(2 n ), a i and (a i +b i ) for 1 ⁇ i ⁇ m.
- a pairing module 275 needs to test all the pairs of values from the appropriate sequences. For each value a i from the first sequence and (a j +b j ) from the second sequence, the error correction code system 100 computes the candidate root: [a i ⁇ +a i +(a j +b j )], and tests whether or not this is a root of the original polynomial f(x). After a root is found, it is removed from the corresponding pair from the two sequences, and the testing of the remaining pairs continues. After at most m 2 /2 polynomial evaluations, all the roots of the polynomial f(x) would be found.
- the elements ⁇ and ⁇ and the coefficients c i can be precomputed for the corresponding quadratic transformations.
- the original polynomial is also scaled to f(x/ ⁇ ), its transform computed, and its roots located, requiring an additional 2 n polynomial evaluations over the Galois subfield GF(2 n ).
- the elements in the two sequences are matched (or paired), providing at most m 2 /2 candidate roots to be tested against the original polynomial f(x).
Abstract
Description
Claims (22)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/562,575 US6671850B1 (en) | 2000-05-01 | 2000-05-01 | On-the-fly algebraic error correction system and method for reducing error location search |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/562,575 US6671850B1 (en) | 2000-05-01 | 2000-05-01 | On-the-fly algebraic error correction system and method for reducing error location search |
Publications (1)
Publication Number | Publication Date |
---|---|
US6671850B1 true US6671850B1 (en) | 2003-12-30 |
Family
ID=29736970
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/562,575 Expired - Lifetime US6671850B1 (en) | 2000-05-01 | 2000-05-01 | On-the-fly algebraic error correction system and method for reducing error location search |
Country Status (1)
Country | Link |
---|---|
US (1) | US6671850B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020170018A1 (en) * | 2001-04-24 | 2002-11-14 | International Business Machines Corporation | Root solver and associated method for solving finite field polynomial equations |
US20050154964A1 (en) * | 2004-01-14 | 2005-07-14 | Andrei Vityaev | Data retrieval from a storage device using a combined error correction and detection approach |
US20100251071A1 (en) * | 2009-03-31 | 2010-09-30 | Hideyasu Fujiwara | Redundant code generation method and device, data restoration method and device, and raid storage device |
US8327242B1 (en) * | 2008-04-10 | 2012-12-04 | Apple Inc. | High-performance ECC decoder |
US10848182B2 (en) | 2018-09-13 | 2020-11-24 | Apple Inc. | Iterative decoding with early termination criterion that permits errors in redundancy part |
Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4504948A (en) | 1982-12-29 | 1985-03-12 | International Business Machines Corporation | Syndrome processing unit for multibyte error correcting systems |
US4875211A (en) | 1986-12-10 | 1989-10-17 | Matsushita Electric Industrial Co., Ltd. | Galois field arithmetic logic unit |
US5001715A (en) | 1988-05-12 | 1991-03-19 | Digital Equipment Corporation | Error location system |
US5377207A (en) | 1992-09-03 | 1994-12-27 | The United States Of America As Represented By The United States National Aeronautics And Space Administration | Mappings between codewords of two distinct (N,K) Reed-Solomon codes over GF (2J) |
US5535140A (en) | 1993-01-22 | 1996-07-09 | Canon Kabushiki Kaisha | Polynominal-set deriving apparatus and method |
US5710782A (en) | 1995-12-28 | 1998-01-20 | Quantum Corporation | System for correction of three and four errors |
US5737343A (en) | 1994-06-27 | 1998-04-07 | Sgs-Thomson Microelectronics S.A. | Circuit for localizing errors in Reed-Solomon decoders |
US5768296A (en) | 1994-07-01 | 1998-06-16 | Quantum Corporation | ECC system supporting different-length Reed-Solomon codes whose generator polynomials have common roots |
US5771246A (en) | 1996-09-17 | 1998-06-23 | Quantum Corporation | Multiple-burst-correction system |
US5805617A (en) | 1996-02-28 | 1998-09-08 | Daewoo Electronics Co., Ltd. | Apparatus for computing error correction syndromes |
US5818854A (en) | 1994-06-27 | 1998-10-06 | Sgs-Thomson Microelectronics S.A. | Reed-solomon decoder |
US5905740A (en) * | 1997-04-08 | 1999-05-18 | Seagate Technology, Inc. | Apparatus and method for error correction |
US5942005A (en) | 1997-04-08 | 1999-08-24 | International Business Machines Corporation | Method and means for computationally efficient error and erasure correction in linear cyclic codes |
US5943348A (en) * | 1997-10-14 | 1999-08-24 | Lsi Logic Corporation | Method to check for burst limiting in error correcting systems |
US5946328A (en) | 1997-11-17 | 1999-08-31 | International Business Machines Corporation | Method and means for efficient error detection and correction in long byte strings using integrated interleaved Reed-Solomon codewords |
US6092233A (en) * | 1998-03-20 | 2000-07-18 | Adaptec, Inc. | Pipelined Berlekamp-Massey error locator polynomial generating apparatus and method |
US6122766A (en) * | 1996-10-25 | 2000-09-19 | Matsushita Electric Industrial Co., Ltd. | Reed-Solomon decoder having a three-stage pipeline structure |
US6154868A (en) * | 1997-07-18 | 2000-11-28 | International Business Machines Corporation | Method and means for computationally efficient on-the-fly error correction in linear cyclic codes using ultra-fast error location |
US6192497B1 (en) * | 1998-08-27 | 2001-02-20 | Adaptec, Inc. | Parallel Chien search circuit |
US6199188B1 (en) * | 1997-10-07 | 2001-03-06 | Quantum Corporation | System for finding roots of degree three and degree four error locator polynomials over GF(2M) |
US6374383B1 (en) * | 1999-06-07 | 2002-04-16 | Maxtor Corporation | Determining error locations using error correction codes |
-
2000
- 2000-05-01 US US09/562,575 patent/US6671850B1/en not_active Expired - Lifetime
Patent Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4504948A (en) | 1982-12-29 | 1985-03-12 | International Business Machines Corporation | Syndrome processing unit for multibyte error correcting systems |
US4875211A (en) | 1986-12-10 | 1989-10-17 | Matsushita Electric Industrial Co., Ltd. | Galois field arithmetic logic unit |
US5001715A (en) | 1988-05-12 | 1991-03-19 | Digital Equipment Corporation | Error location system |
US5377207A (en) | 1992-09-03 | 1994-12-27 | The United States Of America As Represented By The United States National Aeronautics And Space Administration | Mappings between codewords of two distinct (N,K) Reed-Solomon codes over GF (2J) |
US5535140A (en) | 1993-01-22 | 1996-07-09 | Canon Kabushiki Kaisha | Polynominal-set deriving apparatus and method |
US5818854A (en) | 1994-06-27 | 1998-10-06 | Sgs-Thomson Microelectronics S.A. | Reed-solomon decoder |
US5737343A (en) | 1994-06-27 | 1998-04-07 | Sgs-Thomson Microelectronics S.A. | Circuit for localizing errors in Reed-Solomon decoders |
US5768296A (en) | 1994-07-01 | 1998-06-16 | Quantum Corporation | ECC system supporting different-length Reed-Solomon codes whose generator polynomials have common roots |
US5710782A (en) | 1995-12-28 | 1998-01-20 | Quantum Corporation | System for correction of three and four errors |
US5805617A (en) | 1996-02-28 | 1998-09-08 | Daewoo Electronics Co., Ltd. | Apparatus for computing error correction syndromes |
US5771246A (en) | 1996-09-17 | 1998-06-23 | Quantum Corporation | Multiple-burst-correction system |
US6122766A (en) * | 1996-10-25 | 2000-09-19 | Matsushita Electric Industrial Co., Ltd. | Reed-Solomon decoder having a three-stage pipeline structure |
US5905740A (en) * | 1997-04-08 | 1999-05-18 | Seagate Technology, Inc. | Apparatus and method for error correction |
US5942005A (en) | 1997-04-08 | 1999-08-24 | International Business Machines Corporation | Method and means for computationally efficient error and erasure correction in linear cyclic codes |
US6154868A (en) * | 1997-07-18 | 2000-11-28 | International Business Machines Corporation | Method and means for computationally efficient on-the-fly error correction in linear cyclic codes using ultra-fast error location |
US6345376B1 (en) * | 1997-07-18 | 2002-02-05 | International Business Machines Corporation | Method and means for computationally efficient on-the-fly error correction in linear cyclic codes using ultra-fast error location |
US6199188B1 (en) * | 1997-10-07 | 2001-03-06 | Quantum Corporation | System for finding roots of degree three and degree four error locator polynomials over GF(2M) |
US5943348A (en) * | 1997-10-14 | 1999-08-24 | Lsi Logic Corporation | Method to check for burst limiting in error correcting systems |
US5946328A (en) | 1997-11-17 | 1999-08-31 | International Business Machines Corporation | Method and means for efficient error detection and correction in long byte strings using integrated interleaved Reed-Solomon codewords |
US6092233A (en) * | 1998-03-20 | 2000-07-18 | Adaptec, Inc. | Pipelined Berlekamp-Massey error locator polynomial generating apparatus and method |
US6192497B1 (en) * | 1998-08-27 | 2001-02-20 | Adaptec, Inc. | Parallel Chien search circuit |
US6374383B1 (en) * | 1999-06-07 | 2002-04-16 | Maxtor Corporation | Determining error locations using error correction codes |
Non-Patent Citations (6)
Title |
---|
"Convenient Roots for a Reed Solomon Code," IBM Technical Disclosure Bulletin, vol. 27, No. 2, Jul. 1984. |
"Fast Double Error Correction," IBM Technical Disclosure Bulletin, vol. 25, No. 5, Oct. 1982. |
"Implementation of Reed Solomon Codes over Symbols of Size 16 Bits-Method and Apparatus," IBM Technical Disclosure Bulletin, vol. 37, No. 02A, Feb. 1994. |
"Logic and Software Engineering," International Workshop in Honor of Chih-Sung Tang, Aug. 14-15, 1995. |
Carl Bender et al., "Quasi-Exactly Solvable Quartic Potential," Journal of Physics A Mathematical and General, vol. 31, No. 14, Apr. 10, 1998. |
D.S. Dummit, "Solving Solvable Quintics," Mathematics of Computation, vol. 57, No. 195, Jul. 1991, pp. 387-401. |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020170018A1 (en) * | 2001-04-24 | 2002-11-14 | International Business Machines Corporation | Root solver and associated method for solving finite field polynomial equations |
US6792569B2 (en) * | 2001-04-24 | 2004-09-14 | International Business Machines Corporation | Root solver and associated method for solving finite field polynomial equations |
US20050154964A1 (en) * | 2004-01-14 | 2005-07-14 | Andrei Vityaev | Data retrieval from a storage device using a combined error correction and detection approach |
EP1560215A3 (en) * | 2004-01-14 | 2006-01-04 | Broadcom Corporation | Improved data retrieval from a storage device using a combined error correction and detection approach |
US7426676B2 (en) | 2004-01-14 | 2008-09-16 | Broadcom Corporation | Data retrieval from a storage device using a combined error correction and detection approach |
US20080320369A1 (en) * | 2004-01-14 | 2008-12-25 | Andrei Vityaev | Data retrieval from a storage device using a combined error correction and detection approach |
US8429489B2 (en) | 2004-01-14 | 2013-04-23 | Broadcom Corporation | Data retrieval from a storage device using a combined error correction and detection approach |
US8327242B1 (en) * | 2008-04-10 | 2012-12-04 | Apple Inc. | High-performance ECC decoder |
US20100251071A1 (en) * | 2009-03-31 | 2010-09-30 | Hideyasu Fujiwara | Redundant code generation method and device, data restoration method and device, and raid storage device |
US8499224B2 (en) * | 2009-03-31 | 2013-07-30 | Nec Corporation | Redundant code generation method and device, data restoration method and device, and raid storage device |
US10848182B2 (en) | 2018-09-13 | 2020-11-24 | Apple Inc. | Iterative decoding with early termination criterion that permits errors in redundancy part |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6792569B2 (en) | Root solver and associated method for solving finite field polynomial equations | |
US6553536B1 (en) | Soft error correction algebraic decoder | |
US8086941B2 (en) | Computing an error detection code syndrome based on a correction pattern | |
EP0316063B1 (en) | Error correction using look-up tables | |
JP4598711B2 (en) | Error correction device | |
US4796110A (en) | System and method for encoding and storing digital information on magnetic tape | |
KR100236367B1 (en) | Error correction method | |
JP4733403B2 (en) | Decoder, data storage device, and data error correction method | |
US6345376B1 (en) | Method and means for computationally efficient on-the-fly error correction in linear cyclic codes using ultra-fast error location | |
US7774679B2 (en) | Techniques for performing reduced complexity galois field arithmetic for correcting errors | |
EP0905911B1 (en) | Data error correcting method and apparatus | |
US6671850B1 (en) | On-the-fly algebraic error correction system and method for reducing error location search | |
US5617432A (en) | Common error protection code for data stored as a composite of different data formats | |
US7131052B2 (en) | Algebraic decoder and method for correcting an arbitrary mixture of burst and random errors | |
US4989211A (en) | Sector mis-synchronization detection method | |
EP1486872B1 (en) | Correcting erroneous data using redundancy blocks | |
JP4527255B2 (en) | System and method for detecting synchronization errors | |
US7475329B2 (en) | Techniques for performing Galois field logarithms for detecting error locations that require less storage space | |
JP3993921B2 (en) | Storage device | |
JP2553565B2 (en) | Galois field arithmetic unit | |
JP2001044853A (en) | Chain search circuit, error correction device and disk driver | |
JP2005135572A (en) | Method and system for correcting error in data retrieved from recording medium, and computer readable storage medium including computer executable command | |
JP2553571B2 (en) | Galois field arithmetic unit | |
Malhotra et al. | A double error-correction scheme for peripheral systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:COX, CHARLES EDWIN;HASSNER, MARTIN AURELIANO;TRAGER, BARRY MARSHALL;AND OTHERS;REEL/FRAME:010773/0322Effective date: 20000404 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |