US7774782B1 - Limiting requests by web crawlers to a web host - Google Patents
Limiting requests by web crawlers to a web host Download PDFInfo
- Publication number
- US7774782B1 US7774782B1 US10/742,398 US74239803A US7774782B1 US 7774782 B1 US7774782 B1 US 7774782B1 US 74239803 A US74239803 A US 74239803A US 7774782 B1 US7774782 B1 US 7774782B1
- Authority
- US
- United States
- Prior art keywords
- web
- lease
- host
- crawler
- capacity
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5027—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals
- G06F9/505—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals considering the load
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
Definitions
- the present invention relates generally to the field of a search engine in a computer network system, in particular to system and method of allocating a web host's load capacity among multiple competing web crawlers.
- a search engine system is essentially a distributed database system. It provides a powerful source of indexed documents from the Internet (or an Intranet).
- a search engine On the front end of a search engine, a user submits a search query that usually comprises two or three keywords suggesting the user's search interest.
- the search engine returns a series of links to documents that match the search query in accordance with a set of predefined search criteria.
- the search engine employs web crawlers that retrieve content of hundreds of millions of web pages stored in various web hosts.
- a web crawler also known as a spider or a wanderer, is a special software program that automatically traverses the Internet.
- the capacity of a web crawler i.e., the number of documents crawled by a web crawler per unit time, is limited by the computer hardware resources (for example, disk space and network bandwidth) available for the crawler.
- a search engine often fragments the Internet into multiple sub-spaces and dispatches multiple web crawlers to crawl the Internet simultaneously, each web crawler responsible for accessing one of the sub-spaces.
- One approach of fragmenting the Internet is to group web pages at different web hosts into different categories according to their contents.
- a “news” category may include web pages whose contents are closely related to news and an “education” category may contain web pages that are deemed to be related to education.
- one or more news web crawlers are directed to crawl web pages in the “news” category and a certain number of education web crawlers are devoted to dealing with those web pages in the “education” category.
- a web host may store web pages belonging to multiple categories.
- a web portal like www.yahoo.com often has one sub-directory like education.yahoo.com storing education-related information and another sub-directory like news.yahoo.com storing news-oriented information.
- load capacity of a web host is often limited by the web host's hardware setup.
- load capacity starvation prevents web crawlers from retrieving documents from a web host and passing them to an indexer in a timely fashion, which adversely affects both the web host and the freshness of search results generated by the search engine.
- a system for balancing a web host's load capacity among multiple competing web crawlers of a search engine receives from a plurality of web crawlers a stream of capacity requests for a plurality of web hosts.
- Each web host has an associated maximum load capacity—representing the maximum number of document requests that the web crawlers may collectively issue to the web host during each unit of time (e.g., a maximum number of requests per minute).
- the system creates a lease between the web host and the web crawler.
- the lease includes an identity of the web crawler, an identity of the web host, a load capacity allocated to the web crawler and a scheduled time.
- the load capacity allocated to a requesting web crawler is based on its fair share of the web host's load capacity as a function of the web crawler's priority and a requested web host's unallocated load capacity.
- the priority of a web crawler which may be assigned (for example) by a system administrator, represents a weight of the web crawler's capacity request for a web host relative to weights of other competing web crawlers' capacity requests for the same web host.
- the priority of a web crawler can be time-variant and its magnitude can be adjusted through a system setup procedure.
- the scheduled time of a lease may have different meanings in different scenarios.
- the scheduled time of the lease is a callback time at which the web crawler submits a new capacity request for its fair share.
- the scheduled time is a lease update time. The web crawler is required to submit a lease renewal request by the lease update time in order to avoid losing its lease with the web host.
- the load capacity allocated to the web crawler may be automatically reduced by the system, and if the web crawler does not submit a request for a lease update by an associated lease expire time, the load capacity allocated to the web crawler may be revoked entirely.
- a web crawler may submit an explicit request to release the load capacity that has been granted to the web crawler.
- FIG. 1 illustrates a network environment comprising a search engine and a plurality of web hosts.
- FIG. 2 is a host load capacity table stored in a host load server.
- FIG. 3A is a web crawler priority table, each web crawler having a single priority that applies to any web host it attempts to crawl.
- FIG. 3B is a web crawler priority table, each web crawler having multiple priorities with respect to multiple hosts or groups of hosts.
- FIG. 4 is a data structure stored in the host load server that comprises a plurality of load capacity leases between web hosts and web crawlers.
- FIG. 5 is a data structure stored in the host load server for storing information used by the host load server to manage the plurality of leases.
- FIG. 6 illustrates how the host load server dynamically distributes a web host's load capacity among multiple web crawlers according to their respective priorities and requests.
- FIG. 7A is a flowchart illustrating how the host load server interacts with multiple web crawlers and processes their capacity requests.
- FIG. 7B is a flowchart illustrating how the host load server releases the load capacity allocated to a web crawler in response to a lease expire alert or a capacity releasing request from the web crawler.
- FIG. 7C is a flowchart illustrating how the host load server allocates a new share of a web host's load capacity to a web crawler in response to a lease update alert.
- FIG. 8 is a block diagram of a host load server
- FIG. 9 is a block diagram of a web crawler.
- FIG. 10 is a data structure stored in a web crawler that groups various hosts and their associated lists of universal resource locators (URL) into unique groups.
- URL universal resource locators
- the present invention relates to a system and method of dynamically allocating a web host's load capacity among multiple competing web crawlers.
- One goal of the system and method is to avoid overloading any web host with more document requests than it can timely handle.
- Another goal of the system and method is to avoid document download delays when the web crawlers download documents from the web host.
- FIG. 1 illustrates a network environment comprising a search engine 101 and a plurality of web hosts 102 .
- the search engine 101 and the web hosts 102 are connected to each other through the Internet 103 .
- Each web host 102 has an associated or assigned load capacity, e.g., the number of download requests it is able to handle per unit time.
- the search engine 101 or more specifically, the backend of the search engine 101 , comprises one or more web crawlers (for example, News crawler 104 , Image crawler 105 and Main crawler 106 ) and a host load server 108 .
- Each of the web crawlers taking News crawler 104 as an example, maintains a list of URLs (not shown) provided by the search engine 101 within a given period of time.
- News crawler 104 For each URL in the list, News crawler 104 submits a download request to a web host 102 through the Internet 103 .
- the web host 102 in response, returns a document associated with the URL to News crawler 104 for further processing, such as indexing.
- the host load server 108 is the desired mechanism in the search engine 101 responsible for allocating an appropriate share of a web host's load capacity among multiple web crawlers competing for the web host's limited load capacity.
- a web crawler like Main crawler 106 may further comprise a URL scheduler 112 , a URL manager 114 , a URL server 116 and a plurality of download robots 118 .
- the URL scheduler 112 determines which URLs will be crawled for a given period of time and passes them to the URL manager 114 .
- the URL manager 114 investigates the status of the URLs passed by the URL scheduler 112 , e.g., their page ranks, and then prioritizes them for crawling. For example, a URL of higher page rank is given a higher priority so that it will be crawled before other URLs of lower page ranks.
- the URL server then distributes the prioritized URLs to respective download robots 118 .
- a robot 118 uses various protocols (e.g., HTTP, HTTPS, gopher, File Transfer Protocol, etc.) to download documents associated with the URLs from respective web hosts.
- protocols e.g., HTTP, HTTPS, gopher, File Transfer Protocol, etc.
- the URL server 116 Prior to distributing the prioritized URLs to the robots 118 , the URL server 116 needs to determine the maximum number of URL requests to be sent to a web host. It does this by making a procedure call to the host load server 108 .
- the host load server 108 stores information for each known web host (i.e., a server storing documents known to the search engine 101 ) indicating the maximum load capacity available for the entire search engine 101 and the portion of that load capacity which is currently in use or reserved by different web crawlers.
- the URL server 116 sends a load capacity request 120 to the host load server 108 , asking for the right to send download requests to a specified web host at a certain rate.
- the host load server 108 allocates a share of the specified web host's load capacity 122 to the URL server 116 .
- the URL server 116 will be told how many URLs it can send to its robots 118 for downloading per unit time. Accordingly, the URL server 116 parcels out the proper number of prioritized URLs to different robots 118 . The robots 118 then take these URLs and download (or at least attempt to download) the documents at those URLs.
- FIGS. 2-5 are data structures in the host load server 108 storing various information that is used for allocating a web host's load capacity among competing web crawlers.
- FIG. 2 is a host load capacity table 200 .
- the web hosts are approximately divided into two categories, unusual load capacity category 210 and usual load capacity category 220 .
- a web host is qualified as a member in the unusual load capacity category 210 if it has a load capacity higher or lower than a predetermined default value. Otherwise, the web host is deemed as a member in the usual load capacity category 220 .
- a web host is qualified as a member of the unusual load capacity category 210 if it has a load capacity higher than a first predetermined threshold or lower than a second predefined threshold. Otherwise, the web host is deemed as a member in the usual load capacity category 220 .
- Every web host in the unusual load capacity category 210 has a unique entry in the host load capacity table 200 that includes a unique host ID assigned to the web host and a specific amount of load capacity associated with the web host.
- a web host having ID “Host 1 ” is a member in the unusual load capacity category 210 and its maximum load capacity is 7.
- the web hosts in the usual load capacity category 220 all correspond to the same entry or the last entry in the host load table having a default load capacity. While the default load capacity is shown as “1” in table 200 , the specific default value may be any appropriate value for the search engine and web hosts.
- the determination of which web hosts require entries in the host load capacity table 200 is based on knowledge about the web hosts, including their bandwidth for handling requests, and also requests from some web hosts (e.g., the webmasters of those web hosts) to reduce the load imposed by the web crawlers on those web hosts (e.g., a web host's webmaster may request that the number of URLs downloaded from a web host be limited to X URLs per hour, where X is a value specified by the web host's webmaster.)
- priority values are assigned to the web crawlers by a system administrator.
- FIG. 3A depicts a web crawler priority table 300 in which each web crawler is assigned a specific value indicating its relative priority as compared with priorities of other web crawlers. For instance, if a News crawler has a priority of 10 and a Main crawler has a priority of 8, then when both crawlers request an allocation of load capacity, the News crawler will typically be allocated about 25% more load capacity than the Main crawler.
- a default value, specified either in the priority table 300 or elsewhere is assigned to each web crawler not specifically identified by an entry in the table 300 .
- each web crawler is assigned a single priority that applies to any web host it attempts to crawl.
- each web crawler may be assigned multiple priorities with respect to multiple hosts or groups of hosts.
- a data structure for this is shown in FIG. 3B , in which a web crawler priority table 310 maps various web hosts to priority tables 320 , 330 and 340 , each of which lists a set of crawler priorities for the web host or hosts linked to the respective priority table.
- Multiple web hosts may reference the same priority table (e.g., 330 ), and web hosts not listed in table 310 are assigned a default priority table (e.g., priority table 300 ).
- a lease includes at least an identity of the web crawler, an identity of the web host, a load capacity allocated to the web crawler and a scheduled time. When the scheduled time is up, the lease may be extended or terminated depending on the specific status of the lease. A more detailed discussion about the scheduled time is provided below in connection with FIGS. 5 and 6 .
- FIG. 4 depicts a host load capacity allocation table 400 in accordance with some embodiments.
- This table is essentially a snapshot of the load capacity distribution at various web hosts that are being visited by a search engine's multiple web crawlers at a particular moment.
- FIG. 4 suggests that a web host may simultaneously maintain multiple leases with different web crawlers at the same time.
- table 410 associated with Host A contains at least three leases, one with News crawler, one with Main crawler and one with Image crawler.
- the load capacity allocated to Image crawler happens to be zero, suggesting that a lease does not guarantee that a web crawler has acquired its fair share or even any non-trivial share of a web host's load capacity.
- a lease simply means that a web crawler has registered at the host load server and the host load server has acknowledged the existence of the load capacity request for a particular web host. If a web crawler like Image crawler initially receives a zero share of load capacity, because all available capacity is already allocated, the crawler will typically receive a non-zero allocation when it renews its request at the scheduled time indicated in the host load capacity allocation table 400 .
- a lease between a web crawler and a web host establishes that the web crawler is granted a certain amount of the web host's load capacity for a time period that ends at the scheduled time indicated in the corresponding lease entry in the host load capacity allocation table 400 .
- the web crawler is able to submit a certain number of download requests to the web crawler according to its granted load capacity.
- the web crawler has to either renew the lease or surrender its granted load capacity at least partially so as to avoid the phenomenon of load capacity starvation discussed above.
- FIG. 5 illustrates a timeline data structure that stores information identifying specific actions that are scheduled to be taken by the host load server.
- the timeline data structure is a one-dimensional array 500 , each component or entry of the array corresponding to one particular time along the timeline. In one embodiment, there is a fixed time interval, e.g., one second, between two adjacent components.
- Each component corresponding to a time at which at least one event is scheduled includes a pointer to a table of alerts 510 , 520 , 530 .
- Each alert identifies an action to be taken by the host load server, which generally corresponds to a scheduled change in status of a load reservation by a web crawler. An alert is triggered when the current time matches the time associated with the component in which the alert is stored.
- the host load server inserts alerts into the timeline data structure primarily as a precaution against failures by the web crawlers to renew or cancel their web host load capacity leases in a timely fashion. So long as all the web crawlers timely renew or cancel all their web host load capacity leases, the alerts identified in the timeline data structure are canceled prior to their being triggered. Mechanisms for inserting alerts, canceling alerts and triggering actions based on the scheduled alerts are described below with reference to FIGS. 7A-7C .
- the host load server When the host load server generates a lease between a web host and a web crawler, it identifies a first component in the array 500 according to the lease's scheduled time (or lease update time) and inserts a first alert into a table associated with the first component.
- the first alert identifies a web host (e.g., by specifying the web host's ID), a web crawler (e.g., by specifying the web crawler's ID) and an action or alert type, equal to “update”.
- An “update” alert instructs the host load server to perform certain actions (described below) if this alert is not canceled prior to time associated with the component in which the alert is stored.
- the host load server also identifies a second component that is associated with a second scheduled time (or lease expire time) that is several seconds, e.g., 15 seconds, after the first component's scheduled time and inserts a second alert into a table associated with the second component.
- the second alert identifies the web host and the web crawler associated with the lease that was generated, and also identifies an action or alert type of “expire”.
- the “expire” alert instructs the host load server to terminate the lease at (or short after) the time associated with the alert if the lease had not been renewed or canceled by that time. Terminating lease releases load capacity for use by other competing web crawlers, if any.
- the reason for creating alerts in the timeline data structure shown in FIG. 5 is that a web crawler nay not expressly renew or renounce its lease at its scheduled times. This may happen if the web crawler fails or it's functionality deteriorates or is compromised. Normally, however, the web crawler will request a lease renewal if it has any unprocessed URL's corresponding to the lease's web host at the end of lease period (or at a scheduled time shortly before the lease end time).
- the host load server allocates a new share of the web host's load capacity to this web crawler, generates a new set of lease update and expire alerts in the timeline data structure for the renewed lease and cancels outstanding lease update/expire alerts, if any, based on the pre-renewed lease.
- the web crawler determines at or before the scheduled end of the lease period that is has no unprocessed URL's for the lease's web host, it will normally submit a lease release to the host load server.
- the host load server releases from the web crawler its allocated load capacity, making the released load capacity available for other requesting web crawlers, if any, and cancels any outstanding lease update/expire alerts associated with the lease.
- FIG. 6 presents an example explaining how a host load server dynamically distributes a web host's load capacity among multiple competing web crawlers based on their explicit requests and/or scheduled alerts stored in the host load server.
- the web host's maximum load capacity is 10 and there are three competing web crawlers whose priorities are 5 (News), 3 (Main) and 2 (Image), respectively.
- There are initially two existing leases in table 610 one for News crawler and the other for Main crawler.
- the maximum load capacity of 10 is split into two shares according to the two crawlers' priorities, 6.25 for News crawler and 3.75 for Main crawler.
- the first event along the timeline 600 is that Image crawler submits a capacity request 615 to the host load server.
- a new lease is created in table 620 accordingly for Image crawler. Since the web host's load capacity has been completely booked by the other two existing leases, the new lease ends up with zero load capacity temporarily. To get its fair share of the web host's load capacity, Image crawler needs to call back later at a scheduled time.
- the scheduled time is usually a small amount of time (e.g., 5 seconds or less) after any of existing leases is scheduled to be updated or expired, because the host load server can re-distribute the web host's load capacity among multiple competing web crawlers only after it updates or expires an existing lease.
- the host load server responds to the capacity request 615 by the Image crawler by returning a lease having a load capacity of zero, and a specified callback time.
- the callback action is initiated by the Image crawler or the requesting web crawler.
- the callback action can be triggered by an alert previously stored in the timeline data structure when the lease was created.
- News crawler submits a lease update request 625 at a certain time.
- the host load server uses this opportunity to re-evaluate the load capacity that should be allocated to News crawler.
- the share reserved for News crawler drops from 6.25 to 5 due to the newly emerging competition from Image crawler, and therefore a load capacity of 1.25 becomes available (i.e., is temporarily unassigned).
- Image crawler does not inherit the newly released load capacity of 1.25 immediately, because there is no express capacity request from Image crawler yet. Later on, Image crawler's capacity request 635 arrives and the released load capacity (1.25) is granted to Image crawler (table 640 ).
- the host load server arranges a second callback action for Image crawler following Main crawler's scheduled update/expire alerts.
- the lease grant given to Image crawler includes an specified update time, at which time the Image crawler will make a callback with an update request.
- Main crawler After Main crawler submits a lease update request 645 , its allocated load capacity is downgraded to 3 (table 650 ), which is its fair share under the current competition. Accordingly, the released load capacity (0.75) is granted to Image crawler when it submits its capacity update request 655 .
- Table 660 shows that each of the three web crawlers has a share of the web host's load capacity proportional to its associated priority.
- Main crawler submits a capacity releasing request 665 to the host load server even though its lease is not due to update or expire.
- the host load server removes the entry associated with Main crawler from table 670 .
- the host load server may cancel any outstanding alert associated with Main crawler's lease since the lease has been terminated.
- the load capacity (3) released by Main crawler is also available for the two remaining web crawlers to compete.
- the first event following Main crawler's capacity releasing request 655 is a lease update alert 675 associated with News crawler, indicating that New crawler has not submitted any express request to renew or renounce its lease yet.
- the lease update alert 675 triggers the host load server to update News crawler's load capacity.
- 2.14 out of the unallocated load capacity of 3 is granted to News crawler (for a total allocation of 7.14) based on News crawler's relative priority (5) over Image crawler's (2). Since this lease update is not initiated by News crawler, the host load server does not create a new set of alerts to extend News crawler's updated lease. Nor would the host load server cancel any outstanding alert associated with the previous lease for the same reason.
- the lease expire alert 685 associated with News crawler occurs, triggering the host load server to terminate the lease between News crawler and the web host.
- Table 690 now contains or identifies only one lease, the lease between Image crawler and the web host. Note that the lease's allocated load capacity is still 2 because Image crawler has not submitted a capacity update request since its request 655 , and furthermore the host load server has not encountered an alert to update that lease either.
- the host load server receives a lease update request 695 from Image crawler, indicating that Image crawler needs more time to finish its job. Since there is no other web crawler competing against Image crawler for the web host's load capacity, all the remaining load capacity (8) is granted to Image crawler. In other words, Image crawler has an exclusive control over the web host's maximum load capacity for a limited period of time, e.g., two minutes, until there is a capacity request from another web crawler or Image crawler explicitly renounces its lease.
- FIGS. 7A-C are a set of flowcharts illustrating the actions performed by the host load server when handling different types of capacity requests or alerts associated with various web crawlers.
- the host load server is in an idle mode, waiting for the arrival of next request from a web crawler or an alert from its timeline data structure. While waiting, the host load server keeps track of the passage of time and at appropriate times reads the current slot of the timeline data structure 500 so as to trigger any alerts corresponding to the current time.
- the host load server receives a capacity request for a web host from a web crawler. At this moment, there may or may not be a capacity lease existing between the web host and the web crawler. In response, the host load server calculates the web crawler's fair share of the web host's load capacity according to its priority. In one embodiment, a web crawler's fair share is determined as
- FairShare_i Capacity ⁇ Priority_i ⁇ j ⁇ ⁇ Priority_j .
- a web crawler may not receive its fair share of load capacity initially if most of the web host's load capacity has been granted to other web crawlers that submitted their capacity requests ahead of this web crawler.
- the host load server allocates an appropriate share of the web host's load capacity to the web crawler at step 715 .
- the appropriate share is a function of Min(Capacity ⁇ Capacity_allocated, FairShare_i, [Capacity_requested]), where the parameter Capacity_allocated refers to the sum of capacity that has been granted to other web crawlers, and the optional parameter Capacity_requested indicates the specific amount of load capacity requested by the web crawler corresponding to index i. For example, the web crawler receives zero load capacity if Capacity_allocated is equal to Capacity.
- the parameter Capacity_requested is used if the web crawler knows in advance how much load capacity it needs to complete its mission and specifies that parameter in its request.
- the host load server creates a new lease (if it is the first request from the web crawler) or updates an existing lease (if otherwise) between the web host and the web crawler.
- a lease includes a host ID, a crawler ID, an allocated load capacity and a scheduled time. The scheduled time determines, for example, when the lease should be renewed per the web crawler's request or effectively how long the web crawler has a complete control of its allocated share of load capacity.
- the host load server schedules a lease update alert and a least expire alert for a newly created or updated lease, for example by storing representations of those alerts in one or more data structures such as the timeline data structure shown in FIG.
- the lease expire alert is scheduled to be later than the lease update alert by a predefined period of time, e.g., 15 seconds. These alerts may be useful in the event that the web crawler loses contact with the host load server for any technical reason.
- the host load server cancels outstanding lease update and/or lease expire alerts, if any, based on a previous lease between the web crawler and the web host. This step prevents a lease from having more than one lease update alert or lease expire alert, which would otherwise be the case if the previous lease were updated per the web crawler's express request prior to its expiration.
- the host load server After step 723 , the host load server returns to the idle mode, step 705 , where it waits for the arrival of next request from a web crawler or an alert from its timeline data structure. As noted above, while waiting, the host load server keeps track of the passage of time and at appropriate times reads the current slot of the timeline data structure 500 so as to trigger any alerts corresponding to the current time.
- the host load server receives a capacity releasing request from a web crawler with respect to an existing lease. This may happen if the web crawler completes its download requests prior to the expiration of its lease with a web host.
- the host load server receives a lease expire alert with respect to an existing lease, suggesting that the host load server has not received any express request, be it a renewing or renouncing request, from the web crawler associated with the lease, since the creation or last update of the lease. In either case, the host load server releases the share of load capacity allocated to the web crawler, making it available for other competing web crawlers, and deletes the lease entry from its host load capacity allocation table at step 730 ( FIG. 7B ).
- the host load server returns to step 723 , removing any outstanding alerts associated with the deleted lease. For example, if the lease is terminated per the web crawler's explicit request at step 725 , there are still one or two lease alerts associated with the lease in the timeline data structure. The host load server removes the alert or alerts to avoid false alerts from occurring in the future.
- the host load server receives a lease update alert with respect to an existing lease, indicating that the host load server has not received a request from the web crawler associated with the lease since the creation or last update of the lease.
- the host load server allocates a new share of load capacity to the web crawler based on the web crawler's priority over other competing web crawlers and the availability of unallocated capacity for the web host associated with the lease.
- the host load server here does not return to step 723 .
- the host load server preserves the remaining lease expire alert associated with the lease so as to terminate the lease if there is still no request from the web crawler when the lease expire alert is triggered.
- a host load server 800 typically includes one or more processing units (CPU's) 802 , one or more network or other communications interfaces 810 , memory 812 , and one or more communication buses 814 for interconnecting these components.
- the host load server 800 may optionally include a user interface 804 comprising a display 806 and a keyboard 808 .
- Memory 812 may include high speed random access memory and may also include non-volatile memory, such as one or more magnetic disk storage devices.
- Memory 812 may include mass storage that is remotely located from the central processing unit(s) 802 .
- the memory 812 preferably stores:
- the host load allocation module 822 may further comprise:
- FIG. 9 depicts the internal structure of a web crawler 900 in some embodiments.
- the host load server will work with web crawlers having a variety of other internal structures.
- the web crawler 900 may be implemented using multiple servers so as to improve the throughput and reliability of the web crawler 900 .
- modules 922 , 924 , 930 and 940 may each be implemented on distinct servers that communicate with and work in conjunction with other ones of the servers in the web crawler 900 .
- the web crawler 900 also includes one or more processing units (CPU's) 902 , one or more network or other communications interfaces 910 , memory 912 , and one or more communication buses 914 for interconnecting these components.
- the memory 912 preferably stores:
- some of the modules or instructions stored in the memory 912 of the web crawler may be stored only in the memory of the server(s) performing the functions associated with that module or set of instructions.
- the URL server module 930 further comprises:
- each URL in the URL list 936 is associated with a web host whose address may be uniquely identified from the URL.
- a URL such as http://156.22.78.39/thesis.pdf suggests that the web host's Internet Protocol (IP) address is 156.22.78.39 and the document waiting to be downloaded, thesis.pdf, is located at the web host's root directory.
- IP Internet Protocol
- a URL does not contain the IP address of a web host, but only a textual description of the web host, e.g., www.yahoo.com.
- the textual descriptions of web hosts even though unique, may cause a problem for host load capacity allocation because multiple URL prefixes may actually point to a same IP address. This is very common in the case that two or more websites are maintained on a same application service provider (ASP).
- ASP application service provider
- the web crawler groups these web hosts together under a unique group name in order to avoid potential clashes among different robots competing for the limited load capacity allocated to the web crawler.
- the web crawler examines the IP address of each web host, and assigns a unique name, e.g., an IP address, to a group of web hosts having a same IP address.
- the grouping tables 1010 , 1020 are generated and maintained by the URL Server module 930 , based on information received from the URL manager module 924 and the robot module(s) 940 .
- FIG. 10 is a data structure stored in a web crawler that groups various web hosts and their associated lists of URLs into unique groups.
- Table 1010 includes various forms of expressions for a web host, such as URLs, IP addresses, or domain names.
- Table 1020 has one entry for each group of web hosts, the entry including a canonical group name, a group load capacity, an estimated download time per document and a next ready time.
- the group name is often the IP address of the web hosts in the group.
- the group load capacity is the load capacity that has been leased to the web crawler for the identified group.
- the estimated download time per document refers to an average amount of time it takes to download a document from the web host during a predefined recent time period, or for a predefined number of recent downloads from the web host.
- the next ready time refers to a time at which the web crawler plans to crawl a next URL associated this group.
- Each of the tables 1030 contains a list of URLs that will be crawled by the web crawler for a respective group. This mechanism enabled the robots to share the group load capacity that has been allocated or leased to the web crawler.
- the canonical group name for each group of web hosts is used as the host ID in the host load capacity table 200 (shown in FIG. 2 ). Lease requests from the web crawlers for web hosts that are members of a group specify the group name for the corresponding group.
Abstract
Description
However, as suggested above in connection with
Min(Capacity−Capacity_allocated, FairShare_i, [Capacity_requested]),
where the parameter Capacity_allocated refers to the sum of capacity that has been granted to other web crawlers, and the optional parameter Capacity_requested indicates the specific amount of load capacity requested by the web crawler corresponding to index i. For example, the web crawler receives zero load capacity if Capacity_allocated is equal to Capacity. The parameter Capacity_requested is used if the web crawler knows in advance how much load capacity it needs to complete its mission and specifies that parameter in its request.
-
- an
operating system 816 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 818 that is used for connecting the
host load server 800 to other servers or computers via one or more communication networks (wired or wireless), such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; - a system initialization module (or instructions) 820 that initializes other modules and data structures stored in
memory 812 required for the appropriate operation ofhost load server 800; - a host load allocation module (or instructions) 822 for processing capacity requests for a web host, allocating appropriate shares of the web host's load capacity to a plurality of requesting web crawlers and establishing lease update/expire alerts for each lease;
- a host load capacity table 830 for storing the maximum load capacities of a plurality of web hosts;
- a web crawler priority table 840 for storing the priorities of a web crawler relative to other competing web crawlers with respect to each of the plurality of web hosts;
- a load capacity allocation table 850 for storing leases between the web crawlers and web hosts; and
- a timeline data structure for storing lease update/expire alerts associated with respective leases between the web crawlers and web hosts.
- an
-
- a load capacity appropriation module (or instructions) 824 for calculating a web crawler's fair share of a web host's load capacity based upon the web crawler's priority and granting an appropriate amount of the load capacity to the web host according to the availability of the web host's load capacity;
- a lease create/update/release module (or instructions) 826 for creating a new lease between a requesting web crawler and a requested web host, updating and extending an existing lease by granting the requesting web crawler a new share of load capacity and assigning the lease a new scheduled time, or releasing an existing lease's load capacity allocated to the web crawler and terminating the lease, in accordance with the web crawler's respective requests or alerts associated with the lease; and
- a lease update/expire alert module (or instructions) 828 for creating or canceling lease update/expire alerts for a newly created or existing lease.
In some embodiments, thesemodules
-
- an
operating system 916 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - a network communication module (or instructions) 918 that is used for connecting the
web crawler 900 to thehost load server 800 and other servers or computers via one or more communication networks (wired or wireless), such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; - a system initialization module (or instructions) 920 that initializes other modules and data structures stored in
memory 912 required for the appropriate operation of theweb crawler 900; - a URL scheduler module (or instructions) 922 for determining which URLs will be crawled by the
web crawler 900 for a given period of time; - a URL manager module (or instructions) 924 for investigating the status of the URLs passed by the
URL scheduler module 922, e.g., their page ranks, and then prioritizing them for web crawling; - a URL server module (or instructions) 930 for distributing the URLs prioritized by the
URL manager module 924 amongmultiple download robots 940; and - a plurality of download robot modules (or set of instructions) 940 for downloading documents associated with the prioritized URLs from respective web hosts using various network protocols.
- an
-
- a capacity request module (or instructions) 932 for submitting capacity requests to the
host load server 800 and for receiving leases that satisfy the requests from thehost load server 800; - a capacity release module (or instructions) 934 for instructing the
host load server 800 to terminate a lease and releasing the load capacity associated with the lease for use by other web crawlers; and - a list of
URLs 936 that need to be processed by theweb crawler 900.
- a capacity request module (or instructions) 932 for submitting capacity requests to the
Claims (27)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/742,398 US7774782B1 (en) | 2003-12-18 | 2003-12-18 | Limiting requests by web crawlers to a web host |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/742,398 US7774782B1 (en) | 2003-12-18 | 2003-12-18 | Limiting requests by web crawlers to a web host |
Publications (1)
Publication Number | Publication Date |
---|---|
US7774782B1 true US7774782B1 (en) | 2010-08-10 |
Family
ID=42536705
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/742,398 Expired - Fee Related US7774782B1 (en) | 2003-12-18 | 2003-12-18 | Limiting requests by web crawlers to a web host |
Country Status (1)
Country | Link |
---|---|
US (1) | US7774782B1 (en) |
Cited By (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090100436A1 (en) * | 2007-10-12 | 2009-04-16 | Microsoft Corporation | Partitioning system including a generic partitioning manager for partitioning resources |
US20090100441A1 (en) * | 2007-10-12 | 2009-04-16 | Microsoft Corporation | Resource assignment system with recovery notification |
US20100077098A1 (en) * | 2006-10-12 | 2010-03-25 | Vanessa Fox | System and Method for Enabling Website Owners to Manage Crawl Rate in a Website Indexing System |
US20100262592A1 (en) * | 2005-05-31 | 2010-10-14 | Brawer Sascha B | Web Crawler Scheduler that Utilizes Sitemaps from Websites |
US20100318508A1 (en) * | 2005-05-31 | 2010-12-16 | Brawer Sascha B | Sitemap Generating Client for Web Crawler |
US20110125726A1 (en) * | 2009-11-25 | 2011-05-26 | Microsoft Corporation | Smart algorithm for reading from crawl queue |
US20110179178A1 (en) * | 2006-08-04 | 2011-07-21 | Vanessa Fox | System and Method for Managing Multiple Domain Names for a Website in a Website Indexing System |
US8255385B1 (en) * | 2011-03-22 | 2012-08-28 | Microsoft Corporation | Adaptive crawl rates based on publication frequency |
US8285703B1 (en) * | 2009-05-13 | 2012-10-09 | Softek Solutions, Inc. | Document crawling systems and methods |
US20130205013A1 (en) * | 2010-04-30 | 2013-08-08 | Telefonaktiebolaget L M Ericsson (Publ) | Network management in a communications network |
US8533226B1 (en) | 2006-08-04 | 2013-09-10 | Google Inc. | System and method for verifying and revoking ownership rights with respect to a website in a website indexing system |
US20130325871A1 (en) * | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US8838571B2 (en) * | 2010-06-28 | 2014-09-16 | International Business Machines Corporation | Data-discriminate search engine updates |
US20150104104A1 (en) * | 2004-05-05 | 2015-04-16 | Google Inc. | Methods and apparatus for automated true object-based image analysis and retrieval |
US9088625B1 (en) * | 2012-12-12 | 2015-07-21 | Google Inc. | Obtaining an image for a place of interest |
US20160127262A1 (en) * | 2014-10-31 | 2016-05-05 | The Nielsen Company (Us), Llc | Method and apparatus to throttle media access by web crawlers |
US20160294978A1 (en) * | 2007-06-29 | 2016-10-06 | Amazon Technologies, Inc. | Service request management |
CN106534244A (en) * | 2015-09-14 | 2017-03-22 | 中国移动通信集团公司 | Scheduling method and device for proxy resources |
US9712520B1 (en) | 2015-06-23 | 2017-07-18 | Amazon Technologies, Inc. | User authentication using client-side browse history |
JP2018072873A (en) * | 2016-10-24 | 2018-05-10 | ヤフー株式会社 | Information processing apparatus, information processing method, and program |
US10007733B1 (en) * | 2015-06-09 | 2018-06-26 | EMC IP Holding Company LLC | High-performance network data capture and storage |
CN108664489A (en) * | 2017-03-29 | 2018-10-16 | 腾讯科技（深圳）有限公司 | Web site contents monitoring method and device |
US10182046B1 (en) * | 2015-06-23 | 2019-01-15 | Amazon Technologies, Inc. | Detecting a network crawler |
CN109471979A (en) * | 2018-12-20 | 2019-03-15 | 北京奇安信科技有限公司 | A kind of method, system, equipment and medium grabbing dynamic page |
CN109684058A (en) * | 2018-12-18 | 2019-04-26 | 成都睿码科技有限责任公司 | It is a kind of for multi-tenant can linear expansion efficient crawler platform and its application method |
US10290022B1 (en) | 2015-06-23 | 2019-05-14 | Amazon Technologies, Inc. | Targeting content based on user characteristics |
CN111092921A (en) * | 2018-10-24 | 2020-05-01 | 北大方正集团有限公司 | Data acquisition method, device and storage medium |
US10846059B2 (en) | 2019-02-05 | 2020-11-24 | Simply Inspired Software, Inc. | Automated generation of software bindings |
US11029887B2 (en) * | 2018-12-19 | 2021-06-08 | Fujitsu Limited | Data process execution device, storage medium, and data process execution system |
US20210251489A1 (en) * | 2012-10-31 | 2021-08-19 | Philips Image Guided Therapy Corporation | Dependency-based startup in a multi-modality medical system |
US11379539B2 (en) * | 2019-05-22 | 2022-07-05 | Microsoft Technology Licensing, Llc | Efficient freshness crawl scheduling |
US11716405B1 (en) | 2021-04-14 | 2023-08-01 | Splunk Inc. | System and method for identifying cache miss in backend application |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6003060A (en) * | 1996-12-20 | 1999-12-14 | International Business Machines Corporation | Method and apparatus to share resources while processing multiple priority data flows |
US6263350B1 (en) * | 1996-10-11 | 2001-07-17 | Sun Microsystems, Inc. | Method and system for leasing storage |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US20020073188A1 (en) * | 2000-12-07 | 2002-06-13 | Rawson Freeman Leigh | Method and apparatus for partitioning system management information for a server farm among a plurality of leaseholds |
US20030061260A1 (en) * | 2001-09-25 | 2003-03-27 | Timesys Corporation | Resource reservation and priority management |
US6950874B2 (en) * | 2000-12-15 | 2005-09-27 | International Business Machines Corporation | Method and system for management of resource leases in an application framework system |
US7047491B2 (en) * | 2000-12-05 | 2006-05-16 | Schubert Daniel M | Electronic information management system for abstracting and reporting document information |
US7260543B1 (en) * | 2000-05-09 | 2007-08-21 | Sun Microsystems, Inc. | Automatic lease renewal with message gates in a distributed computing environment |
-
2003
- 2003-12-18 US US10/742,398 patent/US7774782B1/en not_active Expired - Fee Related
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6263350B1 (en) * | 1996-10-11 | 2001-07-17 | Sun Microsystems, Inc. | Method and system for leasing storage |
US6003060A (en) * | 1996-12-20 | 1999-12-14 | International Business Machines Corporation | Method and apparatus to share resources while processing multiple priority data flows |
US6285999B1 (en) | 1997-01-10 | 2001-09-04 | The Board Of Trustees Of The Leland Stanford Junior University | Method for node ranking in a linked database |
US7260543B1 (en) * | 2000-05-09 | 2007-08-21 | Sun Microsystems, Inc. | Automatic lease renewal with message gates in a distributed computing environment |
US7047491B2 (en) * | 2000-12-05 | 2006-05-16 | Schubert Daniel M | Electronic information management system for abstracting and reporting document information |
US20020073188A1 (en) * | 2000-12-07 | 2002-06-13 | Rawson Freeman Leigh | Method and apparatus for partitioning system management information for a server farm among a plurality of leaseholds |
US6950874B2 (en) * | 2000-12-15 | 2005-09-27 | International Business Machines Corporation | Method and system for management of resource leases in an application framework system |
US20030061260A1 (en) * | 2001-09-25 | 2003-03-27 | Timesys Corporation | Resource reservation and priority management |
Non-Patent Citations (4)
Title |
---|
Brin, S., et al., "The Anatomy of a Large-Scale Hypertextual Web Search Engine," In Proc. of the 7th Int'l World Wide Web Conf., 1998. |
Haveliwala, T.H., "Topic-Sensitive PageRank," In Proc. of the 11th Int'l World Wide Web Conf., May 2002. |
Jeh, G., et al., "Scaling Personalized Web Search," In Proc. of the 12th Int'l World Wide Web Conf., 2003. |
Kamvar, S.D., et al., "Exploiting the Block Structure of the Web for Computing PageRank," Stanford Univ. Technical Report, 2003. |
Cited By (56)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150104104A1 (en) * | 2004-05-05 | 2015-04-16 | Google Inc. | Methods and apparatus for automated true object-based image analysis and retrieval |
US9424277B2 (en) * | 2004-05-05 | 2016-08-23 | Google Inc. | Methods and apparatus for automated true object-based image analysis and retrieval |
US9002819B2 (en) | 2005-05-31 | 2015-04-07 | Google Inc. | Web crawler scheduler that utilizes sitemaps from websites |
US20100318508A1 (en) * | 2005-05-31 | 2010-12-16 | Brawer Sascha B | Sitemap Generating Client for Web Crawler |
US8417686B2 (en) | 2005-05-31 | 2013-04-09 | Google Inc. | Web crawler scheduler that utilizes sitemaps from websites |
US8037054B2 (en) | 2005-05-31 | 2011-10-11 | Google Inc. | Web crawler scheduler that utilizes sitemaps from websites |
US8037055B2 (en) | 2005-05-31 | 2011-10-11 | Google Inc. | Sitemap generating client for web crawler |
US20100262592A1 (en) * | 2005-05-31 | 2010-10-14 | Brawer Sascha B | Web Crawler Scheduler that Utilizes Sitemaps from Websites |
US8533226B1 (en) | 2006-08-04 | 2013-09-10 | Google Inc. | System and method for verifying and revoking ownership rights with respect to a website in a website indexing system |
US20110179178A1 (en) * | 2006-08-04 | 2011-07-21 | Vanessa Fox | System and Method for Managing Multiple Domain Names for a Website in a Website Indexing System |
US8156227B2 (en) | 2006-08-04 | 2012-04-10 | Google Inc | System and method for managing multiple domain names for a website in a website indexing system |
US8032518B2 (en) | 2006-10-12 | 2011-10-04 | Google Inc. | System and method for enabling website owners to manage crawl rate in a website indexing system |
US8458163B2 (en) | 2006-10-12 | 2013-06-04 | Google Inc. | System and method for enabling website owner to manage crawl rate in a website indexing system |
US20100077098A1 (en) * | 2006-10-12 | 2010-03-25 | Vanessa Fox | System and Method for Enabling Website Owners to Manage Crawl Rate in a Website Indexing System |
US10616372B2 (en) * | 2007-06-29 | 2020-04-07 | Amazon Technologies, Inc. | Service request management |
US20160294978A1 (en) * | 2007-06-29 | 2016-10-06 | Amazon Technologies, Inc. | Service request management |
US11418620B2 (en) | 2007-06-29 | 2022-08-16 | Amazon Technologies, Inc. | Service request management |
US8266634B2 (en) | 2007-10-12 | 2012-09-11 | Microsoft Corporation | Resource assignment system with recovery notification |
US20090100436A1 (en) * | 2007-10-12 | 2009-04-16 | Microsoft Corporation | Partitioning system including a generic partitioning manager for partitioning resources |
US20090100441A1 (en) * | 2007-10-12 | 2009-04-16 | Microsoft Corporation | Resource assignment system with recovery notification |
US8707318B2 (en) * | 2007-10-12 | 2014-04-22 | Microsoft Corporation | Partitioning system including a generic partitioning manager for partitioning resources |
US20130325871A1 (en) * | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US8285703B1 (en) * | 2009-05-13 | 2012-10-09 | Softek Solutions, Inc. | Document crawling systems and methods |
US20110125726A1 (en) * | 2009-11-25 | 2011-05-26 | Microsoft Corporation | Smart algorithm for reading from crawl queue |
US20130205013A1 (en) * | 2010-04-30 | 2013-08-08 | Telefonaktiebolaget L M Ericsson (Publ) | Network management in a communications network |
US8838571B2 (en) * | 2010-06-28 | 2014-09-16 | International Business Machines Corporation | Data-discriminate search engine updates |
US8255385B1 (en) * | 2011-03-22 | 2012-08-28 | Microsoft Corporation | Adaptive crawl rates based on publication frequency |
US20210251489A1 (en) * | 2012-10-31 | 2021-08-19 | Philips Image Guided Therapy Corporation | Dependency-based startup in a multi-modality medical system |
US9088625B1 (en) * | 2012-12-12 | 2015-07-21 | Google Inc. | Obtaining an image for a place of interest |
US9747012B1 (en) | 2012-12-12 | 2017-08-29 | Google Inc. | Obtaining an image for a place of interest |
US10686722B2 (en) * | 2014-10-31 | 2020-06-16 | The Nielsen Company (Us), Llc | Methods and apparatus to throttle media access by web crawlers |
US10257113B2 (en) * | 2014-10-31 | 2019-04-09 | The Nielsen Company (Us), Llc | Method and apparatus to throttle media access by web crawlers |
US20230111858A1 (en) * | 2014-10-31 | 2023-04-13 | The Nielsen Company (Us), Llc | Methods and apparatus to throttle media access by web crawlers |
US11546270B2 (en) | 2014-10-31 | 2023-01-03 | The Nielsen Company (Us), Llc | Methods and apparatus to throttle media access by web crawlers |
US20160127262A1 (en) * | 2014-10-31 | 2016-05-05 | The Nielsen Company (Us), Llc | Method and apparatus to throttle media access by web crawlers |
US9887933B2 (en) * | 2014-10-31 | 2018-02-06 | The Nielsen Company (Us), Llc | Method and apparatus to throttle media access by web crawlers |
US10007733B1 (en) * | 2015-06-09 | 2018-06-26 | EMC IP Holding Company LLC | High-performance network data capture and storage |
US9712520B1 (en) | 2015-06-23 | 2017-07-18 | Amazon Technologies, Inc. | User authentication using client-side browse history |
US10212170B1 (en) | 2015-06-23 | 2019-02-19 | Amazon Technologies, Inc. | User authentication using client-side browse history |
US10290022B1 (en) | 2015-06-23 | 2019-05-14 | Amazon Technologies, Inc. | Targeting content based on user characteristics |
US10182046B1 (en) * | 2015-06-23 | 2019-01-15 | Amazon Technologies, Inc. | Detecting a network crawler |
CN106534244A (en) * | 2015-09-14 | 2017-03-22 | 中国移动通信集团公司 | Scheduling method and device for proxy resources |
CN106534244B (en) * | 2015-09-14 | 2020-01-17 | 中国移动通信集团公司 | Scheduling method and device of proxy resources |
JP2018072873A (en) * | 2016-10-24 | 2018-05-10 | ヤフー株式会社 | Information processing apparatus, information processing method, and program |
CN108664489A (en) * | 2017-03-29 | 2018-10-16 | 腾讯科技（深圳）有限公司 | Web site contents monitoring method and device |
CN108664489B (en) * | 2017-03-29 | 2022-12-23 | 腾讯科技（深圳）有限公司 | Website content monitoring method and device |
CN111092921A (en) * | 2018-10-24 | 2020-05-01 | 北大方正集团有限公司 | Data acquisition method, device and storage medium |
CN111092921B (en) * | 2018-10-24 | 2022-05-10 | 北大方正集团有限公司 | Data acquisition method, device and storage medium |
CN109684058B (en) * | 2018-12-18 | 2022-11-04 | 成都睿码科技有限责任公司 | Efficient crawler platform capable of being linearly expanded for multiple tenants and using method thereof |
CN109684058A (en) * | 2018-12-18 | 2019-04-26 | 成都睿码科技有限责任公司 | It is a kind of for multi-tenant can linear expansion efficient crawler platform and its application method |
US11029887B2 (en) * | 2018-12-19 | 2021-06-08 | Fujitsu Limited | Data process execution device, storage medium, and data process execution system |
CN109471979A (en) * | 2018-12-20 | 2019-03-15 | 北京奇安信科技有限公司 | A kind of method, system, equipment and medium grabbing dynamic page |
US11327720B2 (en) | 2019-02-05 | 2022-05-10 | Simply Inspired Software, Inc. | Automated generation of software bindings |
US10846059B2 (en) | 2019-02-05 | 2020-11-24 | Simply Inspired Software, Inc. | Automated generation of software bindings |
US11379539B2 (en) * | 2019-05-22 | 2022-07-05 | Microsoft Technology Licensing, Llc | Efficient freshness crawl scheduling |
US11716405B1 (en) | 2021-04-14 | 2023-08-01 | Splunk Inc. | System and method for identifying cache miss in backend application |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7774782B1 (en) | Limiting requests by web crawlers to a web host | |
US6321265B1 (en) | System and method for enforcing politeness while scheduling downloads in a web crawler | |
US6377984B1 (en) | Web crawler system using parallel queues for queing data sets having common address and concurrently downloading data associated with data set in each queue | |
US6351775B1 (en) | Loading balancing across servers in a computer network | |
US5444848A (en) | Distribution of communications connections over multiple service access points by choosing remote and local access points having lowest number of connections | |
US7376953B2 (en) | Apparatus and method for routing a transaction to a server | |
US7310687B2 (en) | Methods and systems for managing class-based condensation | |
US6941355B1 (en) | System for selecting and disseminating active policies to peer device and discarding policy that is not being requested | |
JP2002512411A (en) | Access control method and device | |
US7634560B2 (en) | Method for measuring server performance, system for measuring server performance and computer programs therefor | |
US20120215741A1 (en) | LDAP Replication Priority Queuing Mechanism | |
CN108173774B (en) | Client upgrading method and system | |
US8024744B2 (en) | Method and system for off-loading user queries to a task manager | |
US20040220924A1 (en) | System and method for updating a cache | |
US9361474B2 (en) | Network filesystem asynchronous I/O scheduling | |
KR19980063396A (en) | Filtered use of Internet data transmission to reduce delays and improve user control | |
US7587488B2 (en) | Dynamic background rater for internet content | |
US20040158637A1 (en) | Gated-pull load balancer | |
US7006512B2 (en) | Apparatus and methods for managing queues on a mobile device system | |
US5448731A (en) | Method and apparatus for controlling the deferred execution of user requests in a data processing system | |
US7155727B2 (en) | Efficient data buffering in a multithreaded environment | |
US6934761B1 (en) | User level web server cache control of in-kernel http cache | |
US7299269B2 (en) | Dynamically allocating data buffers to a data structure based on buffer fullness frequency | |
US5404515A (en) | Balancing of communications transport connections over multiple central processing units | |
US20060117041A1 (en) | Connection of an application to a resource manager selected from a plurality of resource managers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:POPESCU, CATALIN T.;ACHARYA, ANURAG;REEL/FRAME:015087/0442Effective date: 20040429 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.) |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20180810 |