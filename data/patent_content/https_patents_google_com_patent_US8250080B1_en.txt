US8250080B1 - Filtering in search engines - Google Patents
Filtering in search engines Download PDFInfo
- Publication number
- US8250080B1 US8250080B1 US12/013,260 US1326008A US8250080B1 US 8250080 B1 US8250080 B1 US 8250080B1 US 1326008 A US1326008 A US 1326008A US 8250080 B1 US8250080 B1 US 8250080B1
- Authority
- US
- United States
- Prior art keywords
- filter
- url
- length
- count
- patterns
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000001914 filtration Methods 0.000 title claims description 13
- 238000000034 method Methods 0.000 claims abstract description 39
- 230000006870 function Effects 0.000 claims description 17
- 230000014509 gene expression Effects 0.000 claims description 4
- 238000013459 approach Methods 0.000 abstract description 5
- 230000008569 process Effects 0.000 abstract description 5
- 238000010276 construction Methods 0.000 abstract description 4
- 238000012552 review Methods 0.000 description 14
- 238000004590 computer program Methods 0.000 description 3
- 230000015654 memory Effects 0.000 description 3
- 230000001419 dependent effect Effects 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000007423 decrease Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000011156 evaluation Methods 0.000 description 1
- 239000000284 extract Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000001343 mnemonic effect Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 239000000126 substance Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9566—URL specific, e.g. using aliases, detecting broken or misspelled links
Definitions
- the present invention in general relates to search engines.
- Information retrieval systems have predominantly focused on improving the overall quality of the search results presented to the user.
- the quality of the results has typically been measured in terms of accuracy, recall, or other quantifiable measures of performance.
- Information retrieval systems, or ‘search engines’ in the context of the Internet and World Wide Web use different techniques to improve the quality and usefulness of the search results. These techniques may address certain aspects of search engine design such as basic indexing algorithms and document presentation.
- search engines An inherent problem in the design of search engines is that the relevance of search results to a particular user depends on factors that are highly dependent on the user's intent in conducting the search, that is, why they are conducting the search, as well as the user's circumstances, the facts pertaining to the user's information need. Thus, given the same query by two different users, a given set of search results can be relevant to one user and irrelevant to another, entirely because of the different intent and information needs.
- Such sites may include articles labeled as “expert level,” or a particular review as “negative professional review,” or a new product announcement as “new camera”.
- a user interested in a particular point of view, type of information, or the like searches within the domain of such a site for articles or links that have certain associated labels or comments. For example, a user could search the aforementioned digital camera site for all camera reviews labeled “camera”.
- search results may not be filtered based on content that may offer such specific information.
- search results may need to be filtered based on content sought by a user. Furthermore the quality of filtered results may depend on how accurately results returned by a search engine are filtered without rejecting relevant results.
- the present invention relates to systems and methods for improved filtering in search engines.
- the quality of search results is improved through filtering of search results using dynamic adjustment of domain filter size to minimize filter error.
- the construction of the domain filter may be done with a Bloom filter approach, using domain prefixes from annotations.
- the Bloom filter may have a small false positive rate, and thus the search results may contain documents that come from the domains that match the query labels, but which themselves do not satisfy the complete URL pattern for an annotation.
- This Bloom filter error due to its false positive rate, may be minimized by dynamically adjusting the size of the filter. Thus, a larger number of search results are ensured to be from domains that match the domain filter.
- FIG. 1 illustrates a generalized system architecture for a search engine according to an embodiment of the invention.
- FIG. 2 illustrates a filter constructor according to an embodiment of the invention.
- FIG. 3 is a flowchart illustrating the operation of an offset selector according to an embodiment of the invention.
- FIG. 4 is a flowchart illustrating the operation of a filter constructor using an offset selector according to an embodiment of the invention.
- FIG. 5 is table illustrating examples of URL patterns, corresponding path components and pattern lengths.
- the size of a filter in a search engine is dynamically adjusted in order to reduce filter error.
- the filter for example, may be a domain filter that contains domain(s) of preferred search results.
- a search engine processes a query with the domain filter to create a set of search results that are relevant to the query terms and for which a selected portion of the search results satisfy the domain filter. To satisfy the domain filter the selected portion of the documents come from domains identified in the domain filter.
- the search results may then be provided to the user, as a set of search results that are relevant to the query terms and which include some portion of results that match the query labels.
- the construction of the domain filter may be done with a Bloom filter approach, using URL prefixes from URL annotations.
- the domain filter may have a small false positive rate. This false positive rate may result from an inherent false positive rate of the underlying Bloom filter and any approximation method used to construct the domain filter, if such an approximation method is used.
- the search results may contain documents that come from the domains that match the domain filter, but which do not satisfy the query labels.
- This domain filter error due to its false positive rate, may be minimized by dynamically adjusting the size of the domain filter. Thus, a larger number of search results are ensured to be from domains that match the domain filter.
- filtering of search results may be improved through dynamic adjustment of the size of a domain filter.
- offset refers to character(s) that appear after a domain name in a uniform resource locator (URL).
- URL uniform resource locator
- the offset may be ‘/reviews’. This example is not intended to limit the definition.
- offset error refers to the number of characters in an offset that are ignored. As an illustrative example, consider the URL “www.abc.com/reviews”. The offset would be“/reviews”. If, for example, the offset is reduced to “/rev”, the resultant offset error would be ‘4’ as 4 characters within the offset, namely ‘iews’ have been ignored.
- FIG. 1 there is shown a system architecture for a search engine system in accordance with one embodiment.
- the search engine system 100 comprises a front end server 110 , a query processor 120 , filter constructor 130 , domain filter 108 , search engine 180 , content server 170 , annotation database 140 , annotation interface 160 and developer 104 .
- Client 102 can be any type of client, including any type of computer (e.g., desktop computer, workstation, notebook, mainframe, terminal, set-top box etc.), handheld device (personal digital assistant, cellular phone, etc.), or the like. Client device 102 need only have the capability to communicate over a network (e.g. Internet, telephony, LAN, WAN, or combination thereof) with the search engine system 100 . Typically, a client device 102 will support a browser application 103 , and the appropriate networking applications and components, all of which are known to those of skill in the art.
- a network e.g. Internet, telephony, LAN, WAN, or combination thereof
- Front end server 110 is adapted to receive a query from the client 102 and pass it to the query processor 120 , and then subsequently receive the search results back from the query processor 120 and provide them to the client 102 .
- the front end server 110 is further adapted to handle the queries from multiple different clients 102 concurrently.
- Front end server 110 provides the basic interface for receiving search query(ies) and providing search results to client 102 .
- a query 106 may comprise one or more terms and in addition may have one or more labels.
- Query processor 120 is adapted to receive a query 106 from the front end server 110 and pass query 106 , along with a corresponding domain filter 108 based on the labels to the search engine 180 .
- a filter constructor 130 is provided to generate a domain filter 108 .
- Domain filter 108 may be generated based on selecting annotations in the annotation database 140 that have labels that match the query labels and using the domains identified in these matching annotations.
- the size of domain filter 108 is dynamically adjusted in order to minimize a domain filter error.
- a feature domain filter 108 may be a Bloom filter as described below.
- Search engine 180 processes query 106 and domain filter 108 and returns to the query processor 120 a set of search results that are relevant to the query terms and for which a selected portion of the search results satisfy domain filter 108 , in that the selection portion of documents are from domains included in the domain filter 108 . These search results may be provided to user 102 .
- the query processor 120 may further process the search results to produce a result set in which a selected portion of the documents have labels that match the query labels.
- the query processor 120 may then rank the result set using the label matches, and provides a result set to the front end server 110 .
- the front end server 110 may then return the filtered and ranked results to the client 102 .
- Annotation database 140 may contain a large collection of annotations.
- an annotation includes a pattern for a uniform resource locator (URL) for the URLs of documents, and a label to be applied to a document whose URL matches the URL pattern.
- URL uniform resource locator
- URL pattern is a specification of a pattern for a URL.
- the URL pattern can include wildcards as well as regular expressions.
- the term “document” is used herein to refer to any and all types of content that can be accessed by a client over a network.
- a URL pattern can have host suffix patterns or a combination of both URL prefix pattern(s) or host suffix patterns.
- host suffix patterns consider the following patterns:
- path length may represent the number of alpha-numeric characters that may appear in addition to a domain in a URL pattern. Examples of path lengths or lengths of path components are illustrated in and discussed further below with respect to FIG. 5 .
- a query may comprise one or more terms and/or one or more labels.
- a query may be “camera label: professional review” where the term “camera” is the query term, and the token “label:” indicates that the following term is a label of interest.
- the user is searching for documents that have been labeled (by one or more individuals, such as other users, experts, etc.) as being ‘professional reviews’ and have the term ‘camera’.
- Query processor 120 may receive a query from the front end server 110 and determines if it includes any labels. If no labels are present, then the query is passed to the search engine 180 . Labels can be identified by specific token such as “label”, or other syntactic devices (e.g., parenthetical, symbols such as “*”, or the like).
- the query processor 120 may include a parser that performs the initial parsing of the query into query term and labels.
- the filter constructor 130 may construct domain filter 108 that identifies the domains of documents known to the search engine system 100 to have labels that match the query labels. Filter constructor 130 dynamically adjusts the size of domain filter 108 in order to minimize filter error. This dynamic adjustment of filter size can be carried out on the fly for each query 106 .
- the query processor 120 may pass domain filter 108 and the terms from the query to the search engine 180 .
- Search engine 180 performs a search on the query terms and may return documents relevant to the query. Where the search engine 180 receives domain filter 108 , it may perform an additional filtering function on the search results by including a pre-determined minimum portion (e.g., number or percentage) of documents in the search results which are from domains identified in domain filter 108 . The search results are may be passed back to the query processor 120 .
- a pre-determined minimum portion e.g., number or percentage
- domain filter 108 may be implemented as a Bloom filter.
- a Bloom filter may be a space-efficient probabilistic data structure that is used to test whether an element is a member of a set.
- the Bloom filter may be used by the search engine 180 to test whether the domain of a particular search result is included in the URL pattern(s) for labels that match the query labels.
- the Bloom filter may be characterized by the bit array of length L (also called filter length), and a number K of hash function(s) H used to hash entries into the bit array.
- the number K is based on the number P of different entries to be included in the filter, the filter length L, and a desired false positive rate.
- the filter length L may be fixed.
- P is the number of different domain prefixes that are associated with the one or more query labels.
- P is determined after the query labels are matched in the annotation database 140 of a given search query 106 and the set (and hence number) of corresponding domain prefixes D are identified.
- the K hash functions may be based on a Jenkins hash function, known to those skilled in the art.
- the hashes may be done as follows. On each domain prefix that is to be inserted into domain filter 108 , first, a n bit hash is taken of the domain prefix, using, for example, a Jenkins hash. Then for each of the K hash functions that are needed, this n bit hash is rotated by j*i, where
- i is the index of the hash function
- j is the number of bit(s) by which the n bit hash is to be rotated.
- the n bit hash may then be modded by the bit vector size. The result is then set at the appropriate bit in domain filter 108 .
- a feature K can be set based on a desired false positive error rate. False positives are when a filter indicates a URL pattern as being associated with a label when it is not really associated, this can occur for example when the search results may contain documents that come from the domains that match the domain filter, but which do not satisfy the query labels. This domain filter error, due to its false positive rate, may be minimized by dynamically adjusting the size of the domain filter. Thus, a larger number of search results are ensured to be from domains that match the domain filter.
- a domain filter offset error contributed by one URL pattern is defined as the number of characters in a URL pattern's path component that were not hashed because of truncation to an offset value.
- the domain filter offset error can be defined as the sum of the offset errors contributed by each URL pattern that is hashed into the domain filter bit array.
- the domain filter offset error may be an integer.
- the size of the Bloom filter may be calculated when the Bloom filter error rate and the number of URL pattern(s) are known.
- rt is the maximum value of the tolerable error rate while checking for an URL in the Bloom filter where ‘rt’ may also depend on the domain filter offset error and a Bloom filter inherent error rate,
- rb is the Bloom filter inherent error rate
- k is the number of offsets.
- the size of the Bloom filter may be calculated with a computational table known to those skilled in the art.
- the Bloom filter error rate affects the size of the Bloom filter.
- the error rate of the Bloom filter may also depend on the offset length(s) of URL pattern(s). It is then desirable to find offset lengths that will minimize the Bloom filter error. However, these offset lengths may be subject to a maximum limit on maximum value of the tolerable error rate, ‘rt’ and the resultant size of the Bloom filter.
- the offsets that are selected in order to reduce the domain filter offset error may be subsets of the URL pattern lengths. Furthermore, as the number of offsets hashed into the Bloom filter bit array increases, the domain filter offset error decreases but the Bloom filter error increases.
- the domain filter 108 which may be a Bloom filter, is constructed using URL prefixes that may be a combination of the domain and some additional number of characters (e.g., 12 characters), the additional number of characters is defined as the domain extension E.
- the additional characters appearing after a domain may also be referred to as a path component.
- a stride value is a defined as a factor of the extension E.
- the extension E is not arbitrarily selected. Arbitrary selection of extension E may increase error rate of domain filter 108 . Error rate may increase as characters in an URL pattern may be dropped. If the length of the URL pattern is greater than the value of extension E, the URL pattern is truncated to the value of E.
- the above approach may cause the false positive rate of domain filter 108 to increase as additional characters in the path component are discarded in order to reduce the size of the Bloom filter.
- Bloom filter's bit array contains the hash of the URL pattern(s) of “www.google.com/co” and “www.google.com/coop/cse”
- the URL pattern “www.google.com/convert” may pass domain filter 108 when it should not. It should not have passed domain filter 108 as the filter's bit array contains the hash of the URL pattern(s) of “www.google.com/co” and “www.google.com/coop/cse”. This leads to a false positive. An increased number of false positives increases the error rate of the Bloom filter. An increase in the false positive rate may lead to unsatisfactory results being returned to client 102 .
- filter constructor 130 in query processor 120 can construct and dynamically adjust the size of a domain filter 108 that identifies the domains associated with the particular labels included in the user's query.
- Filter constructor 130 may receive as an input a set of URL pattern(s) obtained from annotation database 140 based on labels that may be present in the query.
- the set of URL patterns(s) may include one or more URL patterns.
- the annotation database 140 includes a collection of annotations, where each annotation comprises a label and a URL pattern.
- the annotation database 140 may include an inverted index (or equivalent) that indexes each annotation to whatever URL patterns have been defined for it (whether by the same or different authors).
- filter constructor 130 may provide a determination of a value of filter size necessary to minimize filter error.
- filter constructor 130 extracts the domain prefix from the URL pattern and adds it to the domain filter 108 in a manner that reduces filter error. The operation of the filter constructor 130 in an embodiment is further explained below.
- filter constructor 130 includes pattern lengths calculator 218 , lengths populator 220 , offset error calculator 222 , offset selector 224 , error analyzer 226 and filter size calculator 228 .
- Pattern lengths calculator 218 calculates a length of each URL pattern and generates a data structure where each entry corresponds to the number of URL patterns having a certain path length.
- the data structure may be an array where the value of each index represents a path length and the data contained at that index contains the number of URL patterns corresponding to the path length of index.
- the array may be called as ‘pattern_lengths_count’ where pattern_lengths_count [index] equals the numbers of URLs having a pattern length of ‘index’.
- Lengths populator 220 examines the data structure generated by the pattern lengths calculator 218 and generates a data structure where each entry corresponds to non-zero path lengths of URL pattern(s) for a given set of URL pattern(s).
- the set of URL patterns(s) may include one or more URL patterns.
- the data structure may be an array called a ‘lengths vector’ where the data contained at each index corresponds to the URL path length.
- Offset error calculator 222 examines the data structures generated by the pattern lengths calculator 218 and the lengths populator 220 to calculate a value of domain filter offset error for a given set of offsets. This domain filter offset error may be output to error analyzer 226 . An example embodiment of the offset error calculator 222 will be explained in further detail below.
- Offset selector 224 generates a data structure comprising acceptable values of offsets for a given set of URL patterns. Offset selector 224 may use several values as inputs. In an example, not intended to limit the invention, these values may include: (a) an empty data structure in which the acceptable values of the offsets may be stored, (b) the number of offsets that are chosen, (c) an index which points to the data structure containing the offsets, and (d) an index which points to the data structure generated by the lengths populator 220 .
- these values may be set initially to the values mentioned below:
- offsets may be initialized to a size equal to a number of offsets (num_offsets),
- a best offsets value (best_offsets) may initialized to a size equal to num_offsets
- best_error may be set to a high value.
- offset selector 224 may be a recursive component thereby needing the acceptable value of the offset error and a data structure comprising acceptable values of offsets as inputs.
- offset selector 224 may carry out a depth first traversal of the data structure containing possible offsets in order to perform an exhaustive search to calculate a value(s) of acceptable offsets.
- a depth first traversal of a data structure may be implemented by an algorithm known to those skilled in the art.
- Filter size calculator 228 generates the size of domain filter 108 that may efficiently encode the given number of URL patterns for a given number of offsets.
- FIG. 3 illustrates a flowchart showing an example operation of offset selector 224 as a method embodiment.
- Method 300 begins with a call to offset selector 224 (step 300 ).
- An index that may be required for recursive calls to method 300 is set (step 302 ). In an embodiment this index may range from
- sizeof (lengths) is the size of the data structure generated by the lengths populator 220 .
- num_offsets is the number of offsets that may be generated by offset selector 224 .
- which_len is an index into the data structure generated by lengths populator 220 and refers to a value of a path length of a URL pattern in that data structure.
- the value of the offset contained at an location in a data structure is made equal to a length stored at a location referred by an index to the array of lengths (step 304 ). In an embodiment, this may be represented as
- offset [which_offset] is the value of an offset in the data structure containing offsets referred to by which_offset.
- Offset selector 224 checks if we are generating the last offset (step 306 ). In an embodiment, this may be represented as
- method 300 is recursively called with the value of the index incremented by one and the value of which_offset incremented by 1 (step 314 ). Thus method 300 is called again with the following values being provided to offset selector 224 .
- the offset error calculator 222 When all ‘num_offsets’ offsets have been determined, the offset error calculator 222 generates a value of the offset error (step 308 ). Error analyzer 226 then checks whether the current numerical value of the error is less than the numerical value of best error found so far (step 310 ). If the current value of the error is less than the value of the best error, the value of the best error and the best offsets is updated by offset selector 224 and method 300 returns. If the current value of the error is greater than the value of the acceptable error, then method 300 returns. Method 300 is called recursively depending on an evaluation by the offset selector 224 at step 306 .
- offset selector 224 generates a value of offset(s) that yields the smallest error rate amongst all possible offset combinations for ‘num_offset’ offsets.
- FIG. 4 is a flowchart illustrating the dynamic adjustment of the size of domain filter 108 , implemented as a Bloom filter.
- the pattern lengths calculator 218 receives a set of URL pattern(s) and generates a ‘pattern_lengths_count’ array (step 400 ). Lengths populator 220 may generate an array called as a ‘lengths vector’ using the ‘pattern_lengths_count’ array (step 402 ). The value of “num_offsets” needed by offset selector 224 is then set to the value of ‘1’ by filter constructor 130 (step 404 ). Filter constructor 130 then sets the sizes of the “offsets” and the “best_offsets” data structures needed by offset selector 224 to the size of “num_offsets”. Furthermore “which_len” and “which_offset” are set to a value of 0 by filter constructor 130 .
- “best_error” is also set to a very high value in this step (step 406 ).
- Offset selector 224 identifies “best_offsets” by recursively calling method 300 as illustrated in FIG. 3 .
- Offset selector 224 then generates “best_offsets” and “best_error” (step 408 ).
- Filter size calculator 228 then checks if the size of domain filter 108 is less than a threshold (step 412 ). If the size of domain filter 108 is greater than the threshold, offset selector 224 outputs “best_offsets” (step 416 ). If the size of domain filter 108 is greater than a threshold, error analyzer 226 checks the value of “best_error” (step 418 ).
- offset selector 224 outputs “best_offsets” (step 416 ). If the value of “best_error” is found to be un-acceptable, filter constructor 130 increases “num_offsets” by 1 (step 420 ). The incremented value of “num_offsets” may be provided to filter constructor 130 .
- domain filter 108 may be dynamically adjusted to minimize the filter error.
- FIG. 5 illustrates a table which contains several example URL patterns that may be included in a search engine. The figure lists the each example URL pattern followed by its path component and the corresponding length of the path component or pattern length.
- Pattern lengths calculator 218 calculates a length of each URL pattern and generates a data structure where each entry corresponds to the number of URL patterns having a certain path length.
- the data structure may be an array where each the value of each index represents a path length and the data contained at that index contains the number of URL patterns corresponding to the path length of index.
- the output of the pattern lengths calculator may be an array called ‘pattern_lengths_count’.
- pattern_lengths_count array may be generated as follows
- pattern_lengths_count [0
- Lengths populator 220 examines the data structure generated by the pattern lengths calculator 218 and generates a data structure where each entry corresponds to non-zero lengths of URL patterns for a given set of URL patterns.
- the set of URL patterns may include one or more URL patterns.
- the data structure may be an array where the data contained at each index corresponds to the URL path length.
- lengths vector may be generated as follows:
- the length of each URL pattern in the search engine may be inferred.
- Offset error calculator 222 examines the data structures generated by the pattern lengths calculator 218 and the lengths populator 220 to calculate a value of a domain filter offset error for a given set of offsets identified by offset selector 224 .
- URL patterns that use an offset value of 3 may be URL patterns that have path lengths greater than or equal to 3 and less than the next offset.
- the next offset the example URL patterns illustrate, in FIG. 5 is 12. This includes all URLs with path lengths 3, 5, 7 and 11.
- Domain filter offset error contributed by URLs with path length m and are going to use offset 3 may be given by the formula, pattern_lengths_count[m]*(m ⁇ 3)
- URL patterns with path lengths of 12, 13 and 18 are may use offset value of 12.
- 20] causes a domain filter offset error which is the summation of 14, 8 and 2.
- offset error calculator 222 may generate values of offset errors.
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.
Abstract
Description
K=ln 2·(L/P)
rb=1−(1−rt)^(1/k) where
pattern_lengths_count[m]*(m−3)
Σpattern_lengths_count[m]*(m−3)=1*(3−3)+1*(5−3)+1*(7−3)+1*(11−3)=14.
1*(12−12)+2*(13−12)+1*(18−12)=8
1*(20−20)+1*(22−20)=2.
14+8+2=24
Claims (42)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/013,260 US8250080B1 (en) | 2008-01-11 | 2008-01-11 | Filtering in search engines |
US13/588,905 US8533206B1 (en) | 2008-01-11 | 2012-08-17 | Filtering in search engines |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/013,260 US8250080B1 (en) | 2008-01-11 | 2008-01-11 | Filtering in search engines |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/588,905 Continuation US8533206B1 (en) | 2008-01-11 | 2012-08-17 | Filtering in search engines |
Publications (1)
Publication Number | Publication Date |
---|---|
US8250080B1 true US8250080B1 (en) | 2012-08-21 |
Family
ID=46641697
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/013,260 Active 2028-12-15 US8250080B1 (en) | 2008-01-11 | 2008-01-11 | Filtering in search engines |
US13/588,905 Expired - Fee Related US8533206B1 (en) | 2008-01-11 | 2012-08-17 | Filtering in search engines |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/588,905 Expired - Fee Related US8533206B1 (en) | 2008-01-11 | 2012-08-17 | Filtering in search engines |
Country Status (1)
Country | Link |
---|---|
US (2) | US8250080B1 (en) |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8533206B1 (en) | 2008-01-11 | 2013-09-10 | Google Inc. | Filtering in search engines |
CN103383665A (en) * | 2013-07-12 | 2013-11-06 | 北京奇虎科技有限公司 | Method and device suitable for caching data during URL data capture |
US20140244779A1 (en) * | 2013-02-27 | 2014-08-28 | Marvell World Trade Ltd. | Efficient Longest Prefix Matching Techniques for Network Devices |
WO2015081789A1 (en) * | 2013-12-02 | 2015-06-11 | 北京奇虎科技有限公司 | Url purification method and apparatus |
US20150178381A1 (en) * | 2013-12-20 | 2015-06-25 | Adobe Systems Incorporated | Filter selection in search environments |
US9465826B2 (en) | 2012-11-27 | 2016-10-11 | Hewlett Packard Enterprise Development Lp | Estimating unique entry counts using a counting bloom filter |
CN106126684A (en) * | 2016-06-29 | 2016-11-16 | 联想(北京)有限公司 | A kind of method and device generating web crawlers configuration file |
WO2017039603A1 (en) * | 2015-08-31 | 2017-03-09 | Hewlett Packard Enterprise Development Lp | Domain classification |
US10268734B2 (en) * | 2016-09-30 | 2019-04-23 | International Business Machines Corporation | Providing search results based on natural language classification confidence information |
CN110737687A (en) * | 2019-09-06 | 2020-01-31 | 平安普惠企业管理有限公司 | Data query method, device, equipment and storage medium |
US20200065838A1 (en) * | 2017-11-29 | 2020-02-27 | Qualtrics, Llc | Collecting and analyzing electronic survey responses including user-composed text |
US10795946B2 (en) * | 2014-05-30 | 2020-10-06 | Beestripe Llc | Method of redirecting search queries from an untrusted search engine to a trusted search engine |
US20230325157A1 (en) * | 2022-04-11 | 2023-10-12 | Nvidia Corporation | Regular expression processor |
Families Citing this family (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN103530336B (en) * | 2013-09-30 | 2017-09-15 | 北京奇虎科技有限公司 | The identification equipment and method of Invalid parameter in uniform resource position mark URL |
US9569522B2 (en) * | 2014-06-04 | 2017-02-14 | International Business Machines Corporation | Classifying uniform resource locators |
US10733164B2 (en) | 2015-06-23 | 2020-08-04 | Microsoft Technology Licensing, Llc | Updating a bit vector search index |
US10467215B2 (en) | 2015-06-23 | 2019-11-05 | Microsoft Technology Licensing, Llc | Matching documents using a bit vector search index |
US10229143B2 (en) | 2015-06-23 | 2019-03-12 | Microsoft Technology Licensing, Llc | Storage and retrieval of data from a bit vector search index |
US11281639B2 (en) | 2015-06-23 | 2022-03-22 | Microsoft Technology Licensing, Llc | Match fix-up to remove matching documents |
US11392568B2 (en) | 2015-06-23 | 2022-07-19 | Microsoft Technology Licensing, Llc | Reducing matching documents for a search query |
US10242071B2 (en) | 2015-06-23 | 2019-03-26 | Microsoft Technology Licensing, Llc | Preliminary ranker for scoring matching documents |
US10565198B2 (en) | 2015-06-23 | 2020-02-18 | Microsoft Technology Licensing, Llc | Bit vector search index using shards |
CN105938480A (en) * | 2016-04-07 | 2016-09-14 | 重庆大学 | RFID redundant data cleansing method and system based on DTBF |
JP7017027B2 (en) * | 2017-03-17 | 2022-02-08 | 富士フイルムビジネスイノベーション株式会社 | Search device, search program, and search system |
CN106960052B (en) * | 2017-03-31 | 2020-09-15 | 深圳微众信用科技股份有限公司 | Credit investigation data acquisition method and system |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6360215B1 (en) * | 1998-11-03 | 2002-03-19 | Inktomi Corporation | Method and apparatus for retrieving documents based on information other than document content |
US6363377B1 (en) * | 1998-07-30 | 2002-03-26 | Sarnoff Corporation | Search data processor |
US20030005036A1 (en) * | 2001-04-06 | 2003-01-02 | Michael Mitzenmacher | Distributed, compressed Bloom filter Web cache server |
US6701350B1 (en) * | 1999-09-08 | 2004-03-02 | Nortel Networks Limited | System and method for web page filtering |
US20040193879A1 (en) * | 2003-03-27 | 2004-09-30 | Hitachi, Ltd. | Computer system |
US20050033803A1 (en) * | 2003-07-02 | 2005-02-10 | Vleet Taylor N. Van | Server architecture and methods for persistently storing and serving event data |
US20050086520A1 (en) * | 2003-08-14 | 2005-04-21 | Sarang Dharmapurikar | Method and apparatus for detecting predefined signatures in packet payload using bloom filters |
US20050149507A1 (en) * | 2003-02-05 | 2005-07-07 | Nye Timothy G. | Systems and methods for identifying an internet resource address |
US20050175010A1 (en) * | 2004-02-09 | 2005-08-11 | Alcatel | Filter based longest prefix match algorithm |
US20060026147A1 (en) * | 2004-07-30 | 2006-02-02 | Cone Julian M | Adaptive search engine |
US20070050280A1 (en) * | 2005-08-31 | 2007-03-01 | Credit Market Analysis, Ltd | Methods, software, and systems for over-the-counter trading |
US20070115986A1 (en) * | 2005-11-01 | 2007-05-24 | Udaya Shankara | Method to perform exact string match in the data plane of a network processor |
US20070199054A1 (en) * | 2006-02-23 | 2007-08-23 | Microsoft Corporation | Client side attack resistant phishing detection |
US20080141342A1 (en) * | 2005-01-14 | 2008-06-12 | Jon Curnyn | Anti-Phishing System |
US7602785B2 (en) * | 2004-02-09 | 2009-10-13 | Washington University | Method and system for performing longest prefix matching for network address lookup using bloom filters |
US7647329B1 (en) * | 2005-12-29 | 2010-01-12 | Amazon Technologies, Inc. | Keymap service architecture for a distributed storage system |
US7668812B1 (en) * | 2006-05-09 | 2010-02-23 | Google Inc. | Filtering search results using annotations |
US7680875B1 (en) * | 2002-04-01 | 2010-03-16 | Novell, Inc. | Markers for cached objects |
US7711679B2 (en) * | 2004-07-26 | 2010-05-04 | Google Inc. | Phrase-based detection of duplicate documents in an information retrieval system |
US7886043B1 (en) * | 2007-03-29 | 2011-02-08 | Trend Micro Inc | Hybrid method and apparatus for URL filtering |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8239445B1 (en) * | 2000-04-25 | 2012-08-07 | International Business Machines Corporation | URL-based sticky routing tokens using a server-side cookie jar |
US8145710B2 (en) * | 2003-06-18 | 2012-03-27 | Symantec Corporation | System and method for filtering spam messages utilizing URL filtering module |
US20070083671A1 (en) * | 2005-10-11 | 2007-04-12 | International Business Machines Corporation | Servlet filters to decode encoded request parameters |
US7873635B2 (en) * | 2007-05-31 | 2011-01-18 | Microsoft Corporation | Search ranger system and double-funnel model for search spam analyses and browser protection |
US20090089278A1 (en) * | 2007-09-27 | 2009-04-02 | Krishna Leela Poola | Techniques for keyword extraction from urls using statistical analysis |
US8250080B1 (en) | 2008-01-11 | 2012-08-21 | Google Inc. | Filtering in search engines |
-
2008
- 2008-01-11 US US12/013,260 patent/US8250080B1/en active Active
-
2012
- 2012-08-17 US US13/588,905 patent/US8533206B1/en not_active Expired - Fee Related
Patent Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6363377B1 (en) * | 1998-07-30 | 2002-03-26 | Sarnoff Corporation | Search data processor |
US6360215B1 (en) * | 1998-11-03 | 2002-03-19 | Inktomi Corporation | Method and apparatus for retrieving documents based on information other than document content |
US6701350B1 (en) * | 1999-09-08 | 2004-03-02 | Nortel Networks Limited | System and method for web page filtering |
US20030005036A1 (en) * | 2001-04-06 | 2003-01-02 | Michael Mitzenmacher | Distributed, compressed Bloom filter Web cache server |
US7680875B1 (en) * | 2002-04-01 | 2010-03-16 | Novell, Inc. | Markers for cached objects |
US20050149507A1 (en) * | 2003-02-05 | 2005-07-07 | Nye Timothy G. | Systems and methods for identifying an internet resource address |
US20040193879A1 (en) * | 2003-03-27 | 2004-09-30 | Hitachi, Ltd. | Computer system |
US20050033803A1 (en) * | 2003-07-02 | 2005-02-10 | Vleet Taylor N. Van | Server architecture and methods for persistently storing and serving event data |
US20050086520A1 (en) * | 2003-08-14 | 2005-04-21 | Sarang Dharmapurikar | Method and apparatus for detecting predefined signatures in packet payload using bloom filters |
US20050175010A1 (en) * | 2004-02-09 | 2005-08-11 | Alcatel | Filter based longest prefix match algorithm |
US7602785B2 (en) * | 2004-02-09 | 2009-10-13 | Washington University | Method and system for performing longest prefix matching for network address lookup using bloom filters |
US7711679B2 (en) * | 2004-07-26 | 2010-05-04 | Google Inc. | Phrase-based detection of duplicate documents in an information retrieval system |
US20060026147A1 (en) * | 2004-07-30 | 2006-02-02 | Cone Julian M | Adaptive search engine |
US20080141342A1 (en) * | 2005-01-14 | 2008-06-12 | Jon Curnyn | Anti-Phishing System |
US20070050280A1 (en) * | 2005-08-31 | 2007-03-01 | Credit Market Analysis, Ltd | Methods, software, and systems for over-the-counter trading |
US20070115986A1 (en) * | 2005-11-01 | 2007-05-24 | Udaya Shankara | Method to perform exact string match in the data plane of a network processor |
US7647329B1 (en) * | 2005-12-29 | 2010-01-12 | Amazon Technologies, Inc. | Keymap service architecture for a distributed storage system |
US20070199054A1 (en) * | 2006-02-23 | 2007-08-23 | Microsoft Corporation | Client side attack resistant phishing detection |
US7668812B1 (en) * | 2006-05-09 | 2010-02-23 | Google Inc. | Filtering search results using annotations |
US7886043B1 (en) * | 2007-03-29 | 2011-02-08 | Trend Micro Inc | Hybrid method and apparatus for URL filtering |
Non-Patent Citations (3)
Title |
---|
Bloom, B., "Space/Time Trade-offs in Hash Coding with Allowable Errors," Communications of the ACM; vol. 13, No. 7; Jul. 1970; pp. 422-426. |
Dharmapurikar et al., Longest Prefix Matching Using Bloom Filters, Apr. 2006, IEEE, vol. 14, Issue 2, pp. 397-409. * |
National Institute of Standards and Technology, "Bloom Filter," downloaded from http://www.nist.gov/dads/HTML/bloomFilter.html on Jan. 1, 2008; 1 page. |
Cited By (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8533206B1 (en) | 2008-01-11 | 2013-09-10 | Google Inc. | Filtering in search engines |
US9465826B2 (en) | 2012-11-27 | 2016-10-11 | Hewlett Packard Enterprise Development Lp | Estimating unique entry counts using a counting bloom filter |
CN105122745B (en) * | 2013-02-27 | 2019-06-28 | 马维尔国际贸易有限公司 | Efficient longest prefix match technology for the network equipment |
US20140244779A1 (en) * | 2013-02-27 | 2014-08-28 | Marvell World Trade Ltd. | Efficient Longest Prefix Matching Techniques for Network Devices |
CN105122745A (en) * | 2013-02-27 | 2015-12-02 | 马维尔国际贸易有限公司 | Efficient longest prefix matching techniques for network devices |
US9819637B2 (en) * | 2013-02-27 | 2017-11-14 | Marvell World Trade Ltd. | Efficient longest prefix matching techniques for network devices |
CN103383665A (en) * | 2013-07-12 | 2013-11-06 | 北京奇虎科技有限公司 | Method and device suitable for caching data during URL data capture |
CN103383665B (en) * | 2013-07-12 | 2016-04-27 | 北京奇虎科技有限公司 | Be suitable in url data crawl the method for data buffer storage and device |
WO2015081789A1 (en) * | 2013-12-02 | 2015-06-11 | 北京奇虎科技有限公司 | Url purification method and apparatus |
US20150178381A1 (en) * | 2013-12-20 | 2015-06-25 | Adobe Systems Incorporated | Filter selection in search environments |
US9477748B2 (en) * | 2013-12-20 | 2016-10-25 | Adobe Systems Incorporated | Filter selection in search environments |
US10795946B2 (en) * | 2014-05-30 | 2020-10-06 | Beestripe Llc | Method of redirecting search queries from an untrusted search engine to a trusted search engine |
WO2017039603A1 (en) * | 2015-08-31 | 2017-03-09 | Hewlett Packard Enterprise Development Lp | Domain classification |
US11288594B2 (en) | 2015-08-31 | 2022-03-29 | Trend Micro Incorporated | Domain classification |
CN106126684B (en) * | 2016-06-29 | 2019-12-24 | 联想(北京)有限公司 | Method and device for generating network crawler configuration file |
CN106126684A (en) * | 2016-06-29 | 2016-11-16 | 联想(北京)有限公司 | A kind of method and device generating web crawlers configuration file |
US10268734B2 (en) * | 2016-09-30 | 2019-04-23 | International Business Machines Corporation | Providing search results based on natural language classification confidence information |
US11086887B2 (en) | 2016-09-30 | 2021-08-10 | International Business Machines Corporation | Providing search results based on natural language classification confidence information |
US20200065838A1 (en) * | 2017-11-29 | 2020-02-27 | Qualtrics, Llc | Collecting and analyzing electronic survey responses including user-composed text |
US10748165B2 (en) * | 2017-11-29 | 2020-08-18 | Qualtrics, Llc | Collecting and analyzing electronic survey responses including user-composed text |
CN110737687A (en) * | 2019-09-06 | 2020-01-31 | 平安普惠企业管理有限公司 | Data query method, device, equipment and storage medium |
US20230325157A1 (en) * | 2022-04-11 | 2023-10-12 | Nvidia Corporation | Regular expression processor |
Also Published As
Publication number | Publication date |
---|---|
US8533206B1 (en) | 2013-09-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8250080B1 (en) | Filtering in search engines | |
US8577878B1 (en) | Filtering search results using annotations | |
US8332422B2 (en) | Using text search engine for parametric search | |
US7630973B2 (en) | Method for identifying related pages in a hyperlinked database | |
US9760570B2 (en) | Finding and disambiguating references to entities on web pages | |
US7844594B1 (en) | Information search, retrieval and distillation into knowledge objects | |
US10268641B1 (en) | Search result ranking based on trust | |
US7617195B2 (en) | Optimizing the performance of duplicate identification by content | |
US9081861B2 (en) | Uniform resource locator canonicalization | |
US9275144B2 (en) | System and method for metadata search | |
US7801876B1 (en) | Systems and methods for customizing behavior of multiple search engines | |
US20120239667A1 (en) | Keyword extraction from uniform resource locators (urls) | |
US20050091203A1 (en) | Method and apparatus for improving the readability of an automatically machine-generated summary | |
US20080215564A1 (en) | Query rewrite | |
US20040030780A1 (en) | Automatic search responsive to an invalid request | |
US11775767B1 (en) | Systems and methods for automated iterative population of responses using artificial intelligence | |
US20110307479A1 (en) | Automatic Extraction of Structured Web Content | |
US20090083266A1 (en) | Techniques for tokenizing urls | |
CN111368227A (en) | URL processing method and device | |
Forte et al. | A content classification and filtering server for the Internet | |
US9722967B2 (en) | Exposing file metadata as LDAP attributes | |
US8086441B1 (en) | Efficient string search | |
KR102169143B1 (en) | Apparatus for filtering url of harmful content web pages | |
US20090182759A1 (en) | Extracting entities from a web page | |
EP2662785A2 (en) | A method and system for non-ephemeral search |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GUHA, RAMANATHAN;WAGLE, VRISHALI;SIGNING DATES FROM 20080104 TO 20080111;REEL/FRAME:020356/0883 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE RECORDATION COVERSHEET WHICH INCORRECTLY INCLUDED A COMMA IN THE NAME OF ASSIGNEE AND ERROR IN THE ADDRESS OF THE ASSIGNEE PREVIOUSLY RECORDED ON REEL 020356 FRAME 0883. ASSIGNOR(S) HEREBY CONFIRMS THE ENTIRE RIGHT, TITLE AND INTEREST THROUGHOUT THE WORLD;ASSIGNORS:GUHA, RAMANATHAN;WAGLE, VRISHALI;SIGNING DATES FROM 20080104 TO 20080111;REEL/FRAME:028842/0600 |
|
CC | Certificate of correction | ||
CC | Certificate of correction | ||
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |