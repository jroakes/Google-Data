US20240160403A1 - Multi-modal input on an electronic device - Google Patents
Multi-modal input on an electronic device Download PDFInfo
- Publication number
- US20240160403A1 US20240160403A1 US18/421,189 US202418421189A US2024160403A1 US 20240160403 A1 US20240160403 A1 US 20240160403A1 US 202418421189 A US202418421189 A US 202418421189A US 2024160403 A1 US2024160403 A1 US 2024160403A1
- Authority
- US
- United States
- Prior art keywords
- input
- computing device
- mobile computing
- spoken utterance
- user
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 91
- 230000015654 memory Effects 0.000 claims description 36
- 238000006243 chemical reaction Methods 0.000 claims description 20
- 238000004891 communication Methods 0.000 claims description 19
- 238000012545 processing Methods 0.000 claims description 18
- 230000003993 interaction Effects 0.000 claims description 14
- 230000004044 response Effects 0.000 claims description 12
- 238000013518 transcription Methods 0.000 claims description 9
- 230000035897 transcription Effects 0.000 claims description 9
- 230000000007 visual effect Effects 0.000 claims description 3
- 230000008569 process Effects 0.000 abstract description 22
- 238000010586 diagram Methods 0.000 description 14
- 238000004590 computer program Methods 0.000 description 11
- 230000006870 function Effects 0.000 description 6
- 238000013519 translation Methods 0.000 description 6
- 230000014616 translation Effects 0.000 description 6
- 230000009471 action Effects 0.000 description 5
- 230000001413 cellular effect Effects 0.000 description 5
- 238000001514 detection method Methods 0.000 description 5
- 230000000694 effects Effects 0.000 description 5
- 230000007246 mechanism Effects 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 3
- 238000012360 testing method Methods 0.000 description 3
- 238000012549 training Methods 0.000 description 3
- 235000010627 Phaseolus vulgaris Nutrition 0.000 description 2
- 244000046052 Phaseolus vulgaris Species 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 239000000047 product Substances 0.000 description 2
- 230000000644 propagated effect Effects 0.000 description 2
- PEDCQBHIVMGVHV-UHFFFAOYSA-N Glycerine Chemical compound OCC(O)CO PEDCQBHIVMGVHV-UHFFFAOYSA-N 0.000 description 1
- 241000042032 Petrocephalus catostoma Species 0.000 description 1
- 230000001133 acceleration Effects 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 239000002131 composite material Substances 0.000 description 1
- 235000009508 confectionery Nutrition 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 230000005055 memory storage Effects 0.000 description 1
- 239000000203 mixture Substances 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 238000007781 pre-processing Methods 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 239000011435 rock Substances 0.000 description 1
- 238000010079 rubber tapping Methods 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000000926 separation method Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000001755 vocal effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/16—Sound input; Sound output
- G06F3/167—Audio in a user interface, e.g. using voice commands for navigating, audio feedback
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0487—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser
- G06F3/0488—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures
- G06F3/04886—Interaction techniques based on graphical user interfaces [GUI] using specific features provided by the input device, e.g. functions controlled by the rotation of a mouse with dual sensing arrangements, or of the nature of the input device, e.g. tap gestures based on pressure sensed by a digitiser using a touch-screen or digitiser, e.g. input of commands through traced gestures by partitioning the display area of the touch-screen or the surface of the digitising tablet into independently controllable areas, e.g. virtual keyboards or menus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
- G06F40/284—Lexical analysis, e.g. tokenisation or collocates
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/58—Use of machine translation, e.g. for multi-lingual retrieval, for server-side translation for client devices or for real-time translation
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/005—Language recognition
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/30—Distributed recognition, e.g. in client-server systems, for mobile phones or network applications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
Abstract
A computer-implemented input-method editor process includes receiving a request from a user for an application-independent input method editor having written and spoken input capabilities, identifying that the user is about to provide spoken input to the application-independent input method editor, and receiving a spoken input from the user. The spoken input corresponds to input to an application and is converted to text that represents the spoken input. The text is provided as input to the application.
Description
- This patent application is a continuation of, and claims priority under 35 U.S.C. § 120 from, U.S. patent application Ser. No. 17/812,320, filed on Jul. 13, 2022, which is a continuation of U.S. patent application Ser. No. 16/892,749, filed on Jun. 4, 2020, which is a continuation of U.S. patent application Ser. No. 16/169,279, filed on Oct. 24, 2018, which is a continuation of U.S. patent application Ser. No. 14/988,408, filed on Jan. 5, 2016, which is a continuation of U.S. patent application Ser. No. 14/299,837, filed on Jun. 9, 2014, which is a continuation of U.S. patent application Ser. No. 13/249,172, filed on Sep. 29, 2011, which is a continuation of U.S. patent application Ser. No. 12/977,003, filed on Dec. 22, 2010, which claims priority under 35 U.S.C. § 119(e) from, U.S. Provisional Application 61/330,219, filed on Apr. 30, 2010, and U.S. Provisional Application 61/289,968, filed on Dec. 23, 2009. The disclosures of these prior applications are considered part of the disclosure of this application and are hereby incorporated by reference in their entireties.
- This document relates to systems and techniques for multi-modal input into an electronic device and conversion of spoken input to text.
- Computer users employ a number of mechanisms to provide input to their computing devices. Keyboards are common input devices, and they typically include single-digit numbers (e.g., in a cellular telephone) each of the letters in the alphabet, and some characters (e.g., in Qwerty or Dvorak keyboards). On mobile devices, keyboards are frequently “virtual” in form, and are displayed on a touch screen of a device. Such keyboards may be made available to various different applications running on a device, using a program known as an Input Method Editor, or IME, so that the IME receives the user input and then passes it to whatever application is currently active on the device. An IME can also translate user input, such as when a user enters Roman characters in a written language like Pinyin, and the IME generates Chinese characters that correspond to the typed Pinyin. Where the Pinyin corresponds to multiple possible characters, the IME can display all such characters, the user can tap the intended character, and the IME can pass that character to the operating application.
- Users of computer devices, and particularly of mobile computing devices, may be constrained in their use of a keyboard. For example, the keyboard itself may be constrained in size because mobile device displays are small, so that only a sub-set of relevant characters can be displayed or the keys may be too small to press accurately. Also, the user may be constrained, in that they cannot easily type on a keyboard while walking through a crowded airport or driving a car. In such situations, spoken input may be preferred over typed input. However, speech-to-text conversion or translation typically requires lots of computer processing power, and mobile devices typically do not have much processing power. Also, such conversion often requires a particular user to “train” the system so that it better understands the user's voice and speech patterns.
- This document describes systems and techniques for multi-modal input into an electronic device, including speech input. In one example, an IME that provides keyboard services to a device may also provide for spoken input to the device. Much of the IME services may be unchanged from an ordinary IME, but the IME may be augmented to provide for speech-to-text conversion. Specifically, the IME may take a user input in whatever form (e.g., typed, spoken, D Pad, etc.) and may convert it to a standard form for presentation to an active application (e.g., passing characters or other key presses). Applications may subscribe to the IME's services just as they would subscribe if the IME did not accept voice input, and the provision of such speech-to-text functionality can be transparent to the applications.
- A user could choose when to provide typed input and when to provide spoken input to the IME. First, the user may be in an application that requires input, and may take an appropriate action to invoke the IME (e.g., pressing a particular button or soft key on the device, moving the device in a certain manner, and the like). A keyboard may be initially displayed on the user's device, and the user may take another appropriate action to indicate that he or she will provide speech input. For example, the user may press a microphone button on the virtual keyboard, or may make a swipe across the virtual keyboard or another action that is inconsistent with an intent to provide typed input in the virtual keyboard. At that point, the IME can begin “listening” to the device's microphone and after the user has spoken, may pass corresponding text to the application.
- In these manners, certain implementations may provide one or more benefits. For example, speech-to-text functionality may be provided on a computing device relatively simply, while re-using other IME functionality (e.g., interfaces to applications on a device) that is needed for keyboard-based IME translation. Use of context-specific language models in the manners discussed above and below may also permit more accurate conversion of speech to text, regardless of whether the system is trained to a particular user. Such context-specificity may also be provided automatically and transparently for a user, and at a level of specificity that is most suited to a particular situation. For example, where a user is simply interacting with a web page, the language model for the page may be used, but if the user is interacting with a form on the page, a more specific language model that is directed to that form or a particular field on the form may be used (with lower weightings, but higher-than-normal weightings, applied to the page-specific model).
- Particular manners of using public user activity, such as search activity, to build contextual language models may also result in the generation of accurate models in a convenient manner. Such data may be made available via natural user activity that is already occurring voluntarily by the users. Also, the activity may occur in large enough volumes to provide enough data needed to generate a complete and accurate model for many contexts, and in this case, for many web pages. The models may also be updated over time, because the public user activity occurs continuously over time, so that continuously up-to-date models may be provided to users seeking speech-to-text conversion services.
- In general, in one aspect, methods, computer program products and systems are described for a multi-modal input-method editor. A request can be received from a user of an electronic device for an application-independent input method editor having written and spoken input capabilities. That the user intends to provide spoken input to the application-independent input method editor can be identified, and the spoken input can be received from the user. The spoken input can be input to an application executing on the electronic device. The spoken input can be provided to a remote server. The remote server includes a speech recognition system configured to recognize text based on the spoken input. Text can be received from the remote server, where the text represents the spoken input. The text can be provided to the application as user input.
- In general, in one aspect, methods, computer program products and systems are described relating to an input-method editor. A request is received from a user of an electronic device for an application-independent input method editor having written and spoken input capabilities. The application-independent input method editor is configured to receive input for multiple applications executable by the electronic device. It is identified that the user is about to provide spoken input to the application-independent input method editor. The spoken input is received from the user and corresponds to an input to an application from the multiple applications. The spoken input is provided to a remote server, which remote server includes a speech recognition system configured to recognize text based on the spoken input and is a server that is remote to the electronic device. Text is received from the remote server that represents the spoken input. The text is provided as the input to the application.
- Implementations of the methods, computer program products and systems can include one or more of the following features. A list of candidates of text representing the spoken input can be presented to the user. A selection can be received from the user of a candidate from the list. Providing the text to the application as user input can include providing the selection of the candidate from the list to the application.
- A written input can be received from the user and a language of the written input determined. A language indicator can be provided to the remote server based on the determined language indicating the language of the spoken input. A context indicator can be provided to the remote server such that the speech recognition system can select a language model from multiple language models based on the context indicator. The context indicator can specify the context in which the user input is received, a webpage in which the user input is received, an application in which the user input is received, a web form in which the user input is received, a field in the web form in which the user input is received and/or metadata associated with the field in the web form to name a few examples.
- A written input can be received from the user in a first writing system, and one or more candidates can be presented in a second writing system based on the written input in the first writing system. In an example, the first writing system is Pinyin and the second writing system is Hanzi.
- Intermediate processing can be performed on the received spoken input, e.g., noise reduction, filtering, or otherwise, and the spoken input provided to the remote server can be the intermediately processed spoken input.
- In some implementations, a request is received from a user of an electronic device for an application-independent input method editor having written and spoken input capabilities. The application-independent input method editor is configured to receive input for multiple applications executable by the electronic device. It is identified that the user is about to provide spoken input to the application-independent input method editor. The spoken input is received from the user and corresponds to an input to an application from the multiple applications. The spoken input is converted at the electronic device to text that represents the spoken input. The text is provided as the input to the application.
- The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings, and from the claims.
-
FIG. 1A is a conceptual diagram of an example system including a multi-modal input method editor. -
FIG. 1B is a block diagram of an example system that can be used to implement the multi-modal input method editor. -
FIG. 1C is a block diagram of example software that can be used to implement the input method editor. -
FIG. 2 is a flow chart of an example process for generating text using a multi-modal input method editor. -
FIGS. 3A-E show example screen shots of an electronic device including a multi-modal input method editor. -
FIG. 4 is a block diagram of an example system for receiving speech input and training language models to interpret the speech input. -
FIG. 5A is a block diagram of queries and associated websites in search results -
FIG. 5B is a URL showing search terms in a query -
FIG. 6 is a block diagram of an example system for recognizing speech input to a computing device. -
FIGS. 7A and 7B show flowcharts of example processes of building an interpolated language model. -
FIG. 8 shows a flowchart of an example process for recognizing text in an utterance. -
FIG. 9 shows examples of generic computer devices that may be used to execute the actions discussed in this document. -
FIG. 10 is a block diagram of an example data structure of a language model. - Like reference symbols in the various drawings indicate like elements.
- This document describes techniques and systems that may be used to provide speech-to-text conversion for a user of a computing device, such as a smartphone. In certain instances, the speech input may be handled in a manner similar to other input (e.g., typed input) using an application such as an IME, where the IME can be switched into modes depending on the manner that the user chooses to enter data. Where transformation of the input is needed, the input may in certain circumstances be transmitted (either in a raw or converted form) to a server system remote from the computing device that may be programmed to pass a transformed input back to the device, such as by providing text in response to receiving spoken inputs. The computing device may also provide the server system with meta data that is passed with, or at essentially the same time as, the spoken inputs, and the meta data may be used by the server system to identify a context in which the user is entering the spoken input. The server system may then use that meta data to identify a language model to be used and/or to build a language model on the fly, such as by dynamically applying particular weightings to different language models (which may each be derived from different input corpuses).
-
FIG. 1A is a conceptual diagram of anexample system 100 that includes a multi-modal input method editor (IME) 102. In this example, theIME 102 is implemented in a mobileelectronic device 104, though it should be understood that theIME 102 can be implemented in a different electronic device, e.g., a PC, laptop computer, PDA, etc. Theelectronic device 104 includes multipleuser input devices 106, including amicrophone 105 to receive spoken user input. Other user input mechanisms include a keyboard, which can include a soft or virtual keyboard (e.g., a touchscreen keyboard 108) or a hard or physical keyboard, a mouse, a trackball, and the like. Theuser input mechanisms 106 are capable of receiving spoken input (i.e., by the microphone) and written input (i.e., by the keyboard 108). - The user input can be received by the
electronic device 104 for use as input into one ofvarious applications 110 that can execute on theelectronic device 104, e.g., a web browser, an e-mail application, a word processing application, a contacts book, and/or a calendar. In some implementations, the user input is an input into a web form on a particular web page of a particular web site. The IME is generally application-independent, i.e., can be used for most any of theapplications 110. - If the user input is spoken input, i.e., a speech utterance, the spoken input can be provided to a remote server for conversion to text. For example, the
speech utterance 111 can be transmitted over thenetwork 112 to aremote server 114 that includes aspeech service 116 andspeech recognizer system 118. Thenetwork 112 can include one or more local area networks (LANs), a wide area network (WAN), such as the Internet, a wireless network, such as a cellular network, or a combination of all of the above. - The
speech recognizer system 118 can use one ormore language models 120 to recognize text from the speech utterance. Thetext 113, which can be a selected best candidate or can be a list of n-best candidates that correspond to the speech utterance, is provided back to theelectronic device 104 over thenetwork 112. Thetext 113 can be displayed to the user on adisplay 122 of theelectronic device 104. - If the
text 113 includes a list of n-best candidates, theuser 101 can select a candidate from the list that corresponds to the user's spoken input, for example, using thekeyboard 108 or another input mechanism, such as touching the touch screen over one of the candidates, to navigate the list and make a selection. - The user can also provide written input, and can provide input using a combination of written and spoken input. For example, the user can begin a search query in a web browser by speaking one or more words and can then add to the query string by typing additional input using the
keyboard 108. TheIME 102 can provide the combined user input to the relevant application, i.e., the web browser application in this example. In some implementations, the language that the written input is written in can be determined and then provided as a language indicator to theremote server 114. Theremote server 114 can use the language indicator when converting thespeech utterance 111 to thetext 113. For example, by knowing the language in which the speech is spoken, anappropriate language model 120 can be selected for use by thespeech recognizer 118. -
FIG. 1B is a block diagram of an example system 130 that can be used to implement a multi-modal IME. The example system 130 can be implemented, for example, in a computer device, such as a personal computer device, or other electronic devices, such as a mobile phone, mobile communication device, personal digital assistant (PDA), Global Positioning System (GPS) navigation device, and the like. - The example system 130 includes a processing device 132, a first data store 134, a second data store 136, input devices 138, output devices 140, and a network interface 142. A bus system 144, including, for example, a data bus and a motherboard, can be used to establish and control data communication between the components 132, 134, 136, 138, 140 and 142. Other system architectures can also be used.
- The processing device 132 can, for example, include one or more microprocessors. The first data store 134 can, for example, include a random access memory storage device, such as a dynamic random access memory, or other types of computer-readable medium memory devices. The second data store 136 can, for example, include one or more hard drives, a flash memory, and/or a read only memory, or other types of computer-readable medium memory devices.
- The input devices 138 include at least one input device that is configured to receive spoken input and at least one input device configured to receive written input. Example input devices 138 can include a microphone, keyboard, a mouse, a stylus, etc., and example s 140 can include a display device, an audio device, etc. The network interface 142 can, for example, include a wired or wireless network device operable to communicate data to and from a network 146. The network 146 can include one or more local area networks (LANs), a wide area network (WAN), such as the Internet, a wireless network, such as a cellular network, or a combination of all of the above.
- In some implementations, the system 130 can include input method editor (IME) code 131 from a data store, such as the data store 136. The input method editor code 131 can be defined by instructions that upon execution cause the processing device 132 to carry out input method editing functions. The input method editor code 131 can, for example, include interpreted instructions, such as script instructions, e.g., JavaScript or ECMAScript instructions, that can be executed in a web browser environment. Other implementations can also be used, e.g., a stand-alone application, an applet, a plug-in module, etc., for use in a user interface, such as a display that displays user inputs received by use of keypad mapping for a mobile device or keyboard mapping for a mobile device or personal computer.
- Execution of the input method editor code 131 generates or launches an input method editor instance (IMEI) 133. The input method editor instance 133 facilitates the processing of one or more input methods at the system 130, during which time the system 130 can receive inputs for characters or symbols, such as, for example, spoken or written input. For example, the user can use one or more of the input devices 138, e.g., a microphone for spoken input or a keyboard for written input. In some implementations, the user input can be Roman characters that represent input in a first writing system, e.g., Pinyin, and the input method editor can convert the input to a second writing system, e.g., Hanzi terms. In some examples, a Hanzi term can be composed of more than one Pinyin input.
- The first data store 134 and/or the second data store 136 can store an association of inputs. Based on a user input, the input method editor instance 133 can use information in the data store 134 and/or the data store 136 to identify one or more candidate selections represented by the input. In some implementations, if more than one candidate selection is identified, the candidate selections are displayed on an output device 140. For example, if the user input is spoken input, then a list of candidate selections showing written text representations of the spoken input can be presented to the user on the output device 140. In another example, if the user input is Pinyin inputs, the user can select from the candidate selections a Hanzi term, for example, that the user desires to input.
- In some implementations, a remote computing system 148 having access to the system 130 can be used to convert spoken user input to written user input. For example, the remote system 148 can be a server that provides a speech recognition service via the network 146. One or more speech utterances forming the spoken input can be transmitted to the remote system 148 over the network 146. The remote system 148 can determine a text conversion of the spoken input, for example, using a convenient form of speech recognizer system, and transmit the text conversion to the system 130. The text conversion can be a best candidate for text corresponding to the spoken input or can be a list of n-best candidate selections for presentation to the user for selection as the input. In an example implementation, the speech recognizer system can include Hidden Markov Modeling (HMM) encoded in a finite state transducer (FST). Other configurations of speech recognizer can be used by the remote system 148.
- In some implementations, the remote system 148 can also be used to edit a logographic script. For example, the remote system 148 may be a server that provides logographic script editing capability via the network 146. In one example, a user can edit a logographic script stored in the data store 134 and/or the data store 136 using a remote computing system, e.g., a client computer. The system 130 can, for example, select a character and receive an input from a user over the network interface 142. The processing device 132 can, for example, identify one or more characters adjacent to the selected character, and identify one or more candidate selections based on the received input and the adjacent characters. The system 130 can transmit a data communication that includes the candidate selections back to the remote computing system.
-
FIG. 1C includes a block diagram of example software that can be used to implement an input method editor inFIG. 1B (e.g., IMEI 133). The system 160 includes a user interface 162 and software 164. A user 166 can access system 160 through the user interface 162. The software 164 includes applications 165, IME engine 166, an operating system (OS) 167, a speech recognition system 169 including a language model 168, and a detection engine 170. The operating system 167 is a particular piece of software that can provide the user interface 162 between the software 164 (e.g., applications 165 and IME engine 166) and the user 166. - As shown in
FIG. 1C , the speech recognition system 169 and language model 168 are separate from IME engine 166. In particular, the speech recognition system 169 and language model 168 (which can include two or more language models) are included within software 164 as a separate software component. Other implementations are possible. For example, the speech recognition system 169 and language model 168 can be located remotely (e.g., at the remote system 148 ofFIG. 1B ). As another example, the speech recognition system 169 and language model 168 can be included within the IME engine 166. - The language model 168 can define one or more language sub-models, each sub-model tailored to a particular application, or webpage, or webform on a particular webpage, or website, to name a few examples. Each language sub-model can, for example, define a particular rule set, e.g., grammar particular to a language, phrase sets, verbals, etc., that can be used to determine a user's likely intent in entering a set of inputs (e.g., inputs for generating candidates that are translations, transliterations, or other types of phonetic representations). In some implementations, each language sub-model can also include a user history of a particular user, e.g., a dictionary of words and phrased often used by a particular user.
- The detection engine 170 includes an input module 172 and can include a timing module 174. The input module 172 can, for example, receive input (e.g., keystrokes representing characters or a speech utterance) to particular applications 165 and send the received input to the IME engine 166. In some implementations, the detection engine 170 is a component of the IME engine 166.
- The detection engine 170 can detect input and determine whether or not to send the input to the IME engine 166. The IME engine 166 can, for example, be implemented using the input method editor code 131 and associated data stores 134 and 136, and provide output candidates in text converted from speech to an interface (e.g., user interface 162) as the input (e.g., speech utterances) is detected, as described with reference to
FIGS. 2 and 3A -E below. - The components of system 160 can be communicatively coupled to one or more of each other. Though the components identified above are described as being separate or distinct form each other, one or more of the components may be combined in a single system, or to perform a single process or routine. The functional description provided herein including separation of responsibility for distinct functions is by way of example. Other storage architectures can also be used. In particular, other groupings or other divisions of functional responsibilities can be made as necessary or in accordance with design preferences. For example, IME engine 166 can perform the functions of detection engine 170. As another example, input module 172 and timing module 174 can be combined into a single module.
-
FIG. 2 is a flowchart of anexample process 200 for using an input method editor to receive spoken input from a user input device and to provide written, or textual, input to a corresponding application. A request is received from a user for an application-independent input method editor that has written and spoken input capabilities (Step 202). By way of illustrative example, and without limitation, the request can be received by a mobile electronic device that has a touchscreen keyboard. Example screenshots from such a mobile electronic device are shown inFIGS. 3A-E . These screenshots can be used to illustrate theexample process 200; however, it should be understood that other devices can implement theprocess 200, and the screenshots shown are not intended to be limiting. -
FIG. 3A shows a screenshot 300 where a user has selected to activate a web browser application. Through the web browser application, the user has selected to navigate to the Google search page at the URL www.google.com 302.FIG. 3B shows a screen shot 304 with a soft touchscreen keyboard 306 displayed in a lower portion of the display screen. For example, the user can touch or tap the screen in the search query field 308 to automatically have the keyboard 306 displayed, although other mechanisms can be used to trigger the display of the keyboard 306. The example keyboard 306 shown includes a microphone key 310. An example of a request that can be received from the user includes the user selecting the microphone key 310. Another example includes the user selecting a graphical entity, such as a microphone icon or button, displayed next to or in an input field, e.g., in search query field 308. Another example includes the user swiping his/her finger across the input field, e.g., in a left to right motion, or tapping the input field. Yet another example includes the user picking up the device in a manner that is consistent with raising a microphone included in the device to the proximity of the user's mouth, which can be detected, for example, by an accelerometer reading. Other forms of request can be received from the user for an application-independent input method editor having written and spoken input capabilities, and the above are but some examples. - A user's intention to provide spoken input to the application-independent input method editor is then identified in the process (Step 204). For example, receiving a speech utterance from the user can be used to identify that the user intends to provide spoken input. In other implementations, receiving the request from the user for the input method editor with written and spoken input capabilities can also be used to identify that the user intends to provide spoken input, i.e., the same user action can provide both the request and be used to identify the user's intention. In some implementations, as shown in the screenshot 312 in
FIG. 3C , a graphical element can be displayed that prompts the user to speak, such as the microphone graphic 314 and the instructions “Speak now” 316. - A spoken input, i.e., a speech utterance, is then received from the user. The user provides the spoken input as input to an application that is executing on the device (Step 206). The spoken input is provided to a remote server that includes a speech recognition system configured to recognize text based on the spoken input (Step 208). For example, referring again to
FIG. 1B , the spoken input can be sent over the network 146 to the remote system 148, where the remote system 148 includes a speech recognition system to recognize text from a speech utterance. Because processing the speech to text conversion can take some time, in some implementations a graphic is displayed to the user to indicate that the process is in progress, such as the “Working” graphic 320 shown in the screenshot 322 inFIG. 3D . - Text is then received from the remote server, where the text represents the spoken input (Step 210). Once the remote server, e.g., remote system 148, has processed the speech utterance, the corresponding text is sent back to the user's device and can be displayed for the user. In some implementations, the best candidate for representation of the speech utterance is selected by the speech recognition system at the remote server and provided to the device. However, in some implementations, an n-best list of candidates can be provided and presented to the user for selection of the correct candidate. For example, referring to
FIG. 3E , a screen shot 324 shows a list of suggestions, with the best candidate “the man in the moon” displayed at the top of the list as the default selection. - The text, i.e., the spoken input converted to written input, is then provided to the application as user input (Step 212). That is, once the correct text conversion is selected, if a list of candidates was provided, or once the best candidate has been received, if only one was sent from the remote server, the written input can be passed to the application as the user input for processing by the application.
- In some implementations, a context indicator can be sent with the spoken input to the remote system for conversion to text. The remote system can use the context indicator to facilitate the speech-to-text conversion. For example, the context indicator can be used as a basis for selecting an appropriate language model to use by the speech recognition system. The context indicator can specify the context in which the spoken user input was received. For example, the context indicator can specify a name of a field, e.g., in a web form, the name of the application in which the input was received, and/or identify a web page if the user input was received in a web browser application. As another example, the context indicator can include metadata relating to a field in which the user input was received. For example, the metadata can specify that the field requires a one-word answer, or a date, or a name, and the like. In some implementations, the context indicator information can be obtained by the input method editor from the operating system of the electronic device.
- The device may pass a sound file (including streaming sound data) of the spoken input to a remote server system, and may take steps to improve the quality of the speech-to-text conversion. As one example, the device may pass information that allows the server system to select a language model that is relatively small in size and is specific to the task that the user is currently facing. For example, when applications register with the IME, they may provide information about fields into which a user can enter information in the applications. The IME can pass such information to the server system, so that the server system may select an appropriate language model. For example, if the cursor is in an “address” field of an application, the IME can pass such information to the server system so that, for example, a user utterance that sounds like “scheet” is interpreted as “street” and not “sweet.”
- The language model that is applied may also be a composite of, or interpolation of, multiple separate language models. The different models may be relatively small models that have been derived from large data corpuses (e.g., SMS messages and e-mail messages). The models may be prepared off-line by analyzing such corpuses, and the mixture weights that are applied to the models may be generated on-the-fly at run-time, including after data from a particular instance of speech input starts being received from a user. The weightings may be a function, for example, of the field into which a user is currently making an utterance (e.g., the “to” or “from” fields of an email message versus the “body” field of an email message).
- The language model may also be chosen more generally, without reference to a particular input field in which the cursor is located. For example, an application developer may register their application with an app store, and may indicate the type of application that it is, such as a music player. Similarly, a server system may have a number of topic-specific language models that it stores. Thus, if a user of a music application speaks the word “Heart” or “Hart” (which would not be plain from the spoken word itself), the IME may pass a “music” indication to the server system, so that the application is passed the word “heart,” and the user sees a song list for the female-led rock band. If the media player is a video player, the IME may pass the word “Hart” (assuming there are no great movies or television shows with the word “heart” in their titles) so that the user is shown an index of the episodes of the iconic detective drama “Hart to Hart.”
- When the user is interacting with a web page, such as in a web browser, different context information can be used for selecting the proper language model. In particular, the domain or a sub-domain for the page may be provided, so that the that the language model will be specific to the particular type of web site. For example, if the web site is Amazon, then the language model may be one in which “shopping” terms have higher prominence. For example, “product” may have a higher score than “protect” for similar sounds. Such a model may be prepared to be directed to the site itself (e.g., by analyzing input forms on the site, and analyzing text on the site), or on a category that the site matches. Thus, for example, the same language model may be used for the sites Amazon.com, Buy.com, and the like.
-
FIG. 4 is a block diagram of an example system 400 for receiving speech input and training language models to interpret the speech input. In the system 400, users of client devices enter data into text input fields, and a speech server analyzes that data to determine the type of text the users entered. The speech server builds language models from this information, and uses the language models to recognize speech input associated with similar input fields. - Clients 402, such as computers executing a web browser with an optional toolbar, can receive text input for web forms. When this input is used as part of a process to browse to another page, such as typing in a search field or order form field before pressing a submit button, the text and destination information can be saved in a
toolbar log 404. Clients 406, such as computers and mobile computing devices, can receive text based web search queries from users. These queries can be resolved by a web search server (not shown) and the queries and search results can be stored in query logs 408. The client 406 can receive text input to applications, such as an email client, a messaging client, and/or a word processor and spoken input to applications. The text input and transcriptions of spoken input can be stored in input logs 409. - A speech recognition server 410 can retrieve the data in the toolbar logs 404, the query logs 408, and/or the input logs 409. A speech recognition system 412 can group this data into categories or classifications. The speech recognition system 412 creates a series of language models 414 a-414 n. The language models can contain words, phrases, sentences, etc. from the toolbar logs 404, query logs 408, and/or the input logs 409 based on a particular topic. For example, if the
language model A 414 a is a language model of British last name, it can contain “Churchill,” “Bean,” and “Pigou.” In another example, if thelanguage model B 414 b contains technology-related language, it can contain “object oriented programming,” “reverse polish notation,” and “garbage in, garbage out.” - In some implementations, the speech recognition system 412 can build interpolated language models from the language models 414 a-414 n. For example, the speech recognition system 412 can use an utterance with a known text result, and poll the language models 414 a-414 n to determine the confidence level that each language model 414 a-414 n would associate with the utterance/known text pair. The confidence level returned by each language model 414 a-414 n can be used by the speech recognition system 412 to create an interpolated language model. For example, using a test utterance and text of “Mr. Bean writes in reverse polish notation,” the
language model A 414 a gives a confidence level of 50%, thelanguage model B 414 b give a confidence level of 65%, and the other language models 414 c-414 n give substantially 0% confidence levels. In this example, the speech recognition system 412 can create an interpolated language model that heavily weighs the language model A and B 414 a-b. The particular weightings may be equal to or proportional to the confidence levels, in certain implementations. - A
client device 416 can execute an application that accepts text input and can receive an utterance from a user for that text input. Theclient device 416 can transmit the utterance, along with the context in which the utterance was made or received, to the speech recognition server 410 for translation into text. In some implementations, the context in which an utterance is received is determined by theclient device 416 with the field name or label associated with the text input. For example, some applications include metadata for an application input field such as package name, field number or name, and/or attribute flags (e.g. long sentence, email, street address, etc.). In some applications, a text label associated with or displayed near an input box is used to determine the context. - A
speech service 418 can receive the utterance and context. In some implementations, thespeech service 418 can map the context to broader categories or to the categories of the language models 414 a-414 n. In some implementations, thespeech service 418 can maintain a cache of utterances and resultant texts, and if a received utterance substantially matches a cached utterance, thespeech service 418 can return the appropriate cached resultant texts. - The speech recognition system 412 uses or creates an interpolated language model to recognize the text in the utterance. In some implementations, a single candidate text is identified. In some implementations, the top n candidates are identified either wherein all candidates meet a certain confidence threshold, or wherein the top n candidates are selected.
- The text or texts identified by the speech recognition system 412 is returned to the
client 416, where it is, for example, displayed in a text input field that has focus. - Such context-specific language models may be generated in a variety of ways, including by using search information from a public search engine. For example, bi-grams may be made between search queries and web sites that are highly relevant to those queries (e.g., are in the list of top 10 sites returned to the queries). The queries and sites may then be assigned as nodes in a graph, joined by the relationship between the two. Clusters of such relationships may then be identified, and language models may be generated for those clusters. A particular language model for a web site may then be generated as a weighted combination of the language models for the clusters around the site in the graph.
-
FIG. 5A is a block diagram 500 of queries and associated websites in search results. A group ofqueries 502 is a collection of example queries that can be collected from a browser executing a toolbar. The queries can be submitted to a web search engine, and a list of search results can be returned. For example, a search for “mike lebeau” can result in search results including facebook.com and linkedin.com. A search for “blink” can result in search results including amazon.com. - The queries and associated websites can be used, for example, in determining a relationship between queries and related topics or categories. In this example, if it is known that facebook.com and linkedin.com are social network websites, it can be determined that the queries “bill byrne,” “will rusch,” “mike lebeau,” and “brian stope” may be the names of people. Similarly, if it is known that amazon.com is a retailer with a reputation as a book retailer, it can be determined that “blink” and “great gatsby” may be the names or titles of a retail products, perhaps books. Similarly, if a search for “william gibson” returns links to both facebook.com and amazon.com, it can be determined that “william gibson” may be an author.
-
FIG. 5B is a URL showing search terms in a query. The URL in this example can be recorded by a web browser executing a toolbar. When a user submits a form via a GET request, the contents of the form can be encoded and logged in the URL parameters. In this example, a search on the webpage facebook.com can generate the URL shown. Thename parameter 550, in this example “bill %20byrne”, indicates that “bill byrne” was entered into a field in a web form. -
FIG. 6 is a block diagram of anexample system 600 for recognizing speech input to a computing device. In thesystem 600, a user enters speech input to an application via an IME. The speech input is analyzed at a speech recognition server and text is returned to the application. - An application 604 executes on a
computing device 602, for example a mobile computing device. Aninput method manager 608 can manage input methods that the application 604 accepts, including speech input from a user. Aspeech IME 610 in the operating system of thecomputing device 602 records speech input and collects context data from aninput context 612. - Speech IME 160 can transmit the speech input and context to a voice data center 614. A speech service
front end 616 can receive the speech input and context and prepare the speech input and context for analysis. For example, statistics can be collected, recognition jobs can be created and sorted, etc. Aspeech recognition system 618 examines the context, and selects an associated language model from a big table oflanguage models 622. The associated language model in the big table oflanguage models 622 can contain a reference to a language model in aProdLM 620. Thespeech recognition system 618 uses the referenced language model in theProdLM 620 to analyze the speech input and determine a text string. The text string is returned to thespeech input method 610, for example by way of the speech servicefront end 616. The text string can be presented to the user of thecomputing device 602, and if approved by the user, can be sent to the application 604 as text input. - In some implementations, data obtained from web toolbar logs can be used in determining an interpolated language model. A sample of content of user input (e.g., queries) into a web form can be obtained from web toolbar logs, e.g., in URLs. That is, when a user submits a web form via a GET request, the content of the user input into fields of the web form can be encoded and logged in the URL parameters (e.g., as was described above in reference to
FIG. 5B ). A toolbar log can therefore provide sample data of what users have input (i.e., typed) into each of the fields of a number of web forms. In some instances, however, the volume of this data may be too sparse to train a good language model for the web form. However, for a particular web form a larger training set can be available if queries of the same category as the queries input into the particular web form are used. That is, queries that correspond to search results having similar websites in the top N search results (where N is an integer, e.g., 10) as each other are probably generally within the same category. To group queries by category, clusters in a search query—search result (website) graph (where queries and websites are assigned to nodes) can be identified, where an edge between a particular query node and a particular website node occurs whenever the website appears in the top N results for the particular query. A language model can then be trained per cluster, that is, language models can be trained for a category (if a cluster is representative of a category of queries). - To generate an interpolated language model for a particular web form (or web site), the interpolated language model can be built using multiple language models formed from a number of clusters. In some implementations, the multiple language models can be selected as follows. A sample of user input into the particular web form (i.e., sample queries) can be obtained, e.g., from a web toolbar log. For example, referring again to
FIG. 5B , the sample data may be the query “bill byrne” that is input into a web form on the www.facebook.com website, which is also reflected in the graph shown inFIG. 5A . In this example, “bill byrne” belongs to a cluster that includes people-oriented websites (e.g., facebook.com and linkedin.com) and people names (Bill Byrne, Will Rusch, Mike Lebeau, Brian Strope and William Gibson). In this simple example, the “bill byrne” query belongs to only the people names cluster. However, a query may belong to many clusters. In such instances, for the sample queries obtained from the web toolbar data, the K most significant clusters (K is a number/integer) can be identified and weighted, with the sum of their weights adding to 1.0. In some implementations, the K most significant clusters can be determined by counting the number of sample queries (from the web toolbar log sample data) that fall into each cluster and then optimizing the weights of only the top K clusters. Other techniques to determine the K most significant clusters can be used. The interpolated language model for the web form can be used to convert a speech input received for a field in the form into text. The converted text can be transmitted to an electronic device that initially received the speech input, or transmitted elsewhere, to be used as text input for the field in the web form. -
FIG. 7A shows a flowchart of an example process 700 of building an interpolated language model for a website (or a web form of a website). In the process 700, pairs of queries and results are collected, base language models are created, and interpolated language models are created. - In
step 702, pairs containing web queries and result sites are extracted from web search logs. For example, a web browser or web browser add on can report queries, query result URLs, or search results to a central repository. In another example, a web search server can create a log of search terms and website domain names that were returned in response to those search terms. - In
step 704, a cluster bipartite graph, also known as a bigraph, is formed by the pairs. A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that every edge connects a vertex in the first set to one in the second set. In some implementations, the first set can contain nodes representing queries and the second set can contain nodes representing results. Clusters are identified in the bipartite graph, for example so that each cluster consists of queries and results that may by semantically or syntactically similar. - In step 706, language models are trained based on the queries in the clusters. In some implementations, sample utterances are recorded by a range of speakers and associated with the queries. The utterances for each query can be aggregated, such as by determining an average waveform and a deviation factor indicating how much deviation from the mean was found for most utterances.
- In step 708, web form sample data is obtained from toolbar logs, the web form sample data relating to the particular web form (or website) for which the interpolated language model is being generated (e.g., the interpolated language model can be for the web form). In some implementations, a web browser toolbar can record and transmit the URLs of websites visited by the browser. The URLs can include input text (i.e., sample queries) that has been entered into the web form and submitted. This information can be used to associate a particular website domain, or web page with a particular topic or idea.
- In step 710, the K most significant clusters for the input text, i.e., the sample queries, obtained from the web form sample data are identified. A list of cluster names is collected and ranked in order of significance or similarity to the data collected in the step 708. A predetermined number (K, in this case) of the most significant clusters are identified. For example, clusters are identified that include the sample queries. To limit the number of clusters to K, i.e., to identify the K most significant, in some implementations, the number of sample queries that fall into each cluster can be counted and the weights assigned to each cluster optimized for only the top K clusters.
- In step 712, an interpolated language model for the web form (or website) is built. In one example, a data structure is created that contains links to the K most significant language models. This data structure represents a combined language model that delegates speech recognition functionality to the referenced language models.
- In step 714, K interpolation weights are optimized. Each referenced language model can have a weight, such as a percentage, integer in a particular range, or probability, associated with the referenced language model in the interpolated language model. In some implementations, this weight can be determined by testing a known pairs of utterances and text. The pairs can be submitted to the referenced language models, which can return a confidence level representing the likelihood or accuracy of the language model to correctly identify the text in the utterance. The confidence levels, optionally normalized or otherwise converted, can be used as weighting values in the interpolated language model. Thus, reference language models likely to correctly identify text in a particular classification are most heavily weighted.
- Although a particular number, type, and order of steps are shown, it will be understood by one skilled in the art that other number, types, and orders are possible. For example, other methods of clustering or graph creation can be used in the
step 704. In another example, input field flags and descriptions are obtained in the step 708. In another example,step 702 and step 714 can be combined using a process that builds an interpolation model and interpolation weights in one step. -
FIG. 7B shows a flowchart of anexample process 750 of building an interpolated language model. In theprocess 750, text input and associated metadata is collected, base language models are created, and interpolated language models are created using the base models and interpolation factors such as weightings to be provided to each of multiple base models. - In step 752, text input and input metadata pairs are extracted from input logs. For example, an application can report to a central repository input entered into an input field and metadata for the input field. In some examples, the text input can include voice input that is transcribed into a text format. In some examples, application wide or operating system wide metadata schemes can define or describe the type of input field, such as an address field, a free form text field, a search field, or a social status field.
- In
step 754, a cluster bipartite graph, also known as a bigraph, is formed by the pairs. A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that every edge connects a vertex in the first set to one in the second set. In some implementations, the first set can contain nodes representing input metadata and the second set can contain nodes representing text input. Clusters are identified in the bipartite graph, for example so that each cluster consists of similar input metadata. - In step 756, language models are trained based on the text input in the clusters. In some implementations, sample utterances are recorded by a range of speakers and associated with the metadata. The utterances for each text input can be aggregated, such as by determining an average waveform and a deviation factor indicating how much deviation from the mean was found for most utterances.
- In
step 758, input metadata is categorized. The input metadata can be used to associate a particular input field or application with a particular topic or idea. Example topics or ideas include, but are not limited to, address fields, free form text fields, search field, social status fields, and numeric fields. - In step 760, the K most significant clusters for a category are identified. A list of cluster names is collected and ranked in order of significance or similarity to the data collected in the
step 758. A predetermined number (K, in this case) of the most significant clusters are then identified. - In step 762, an interpolated language model is built. In one example, a data structure is created that contains links to the K most significant language models. This data structure represents a combined language model that delegates speech recognition functionality to the referenced language models.
- In step 764, K interpolation weights are optimized. Each referenced language model that is referenced in the data structure can have a weight, such as a percentage, integer in a particular range, or probability, associated with it. In some implementations, this weight can be determined by testing a known pair or pairs of utterances and text. The pairs can be submitted to the referenced language models, which can return a confidence level representing the likelihood or accuracy of the language model to correctly identify the text in the utterance. The confidence levels, optionally normalized or otherwise converted, can be used as weighting values in the interpolated language model. Thus, reference language models that are likely to identify text in a particular classification correctly are most heavily weighted.
- Although a particular number, type, and order of steps are shown for the process in this figure, it will be understood by one skilled in the art that other number, types, and orders are possible. For example, in step 762 and step 764, a data structure with weighted links to the K most significant language models can be selected from a collection of some or all possible data structures with weighted links to language models.
-
FIG. 8 shows a flowchart of anexample process 800 for recognizing text in an utterance. In theprocess 800, an utterance is received, the speech in the utterance is recognized, and text, or a list of text options, is returned. - In step 802, an utterance is received. For example, a speech recognition server can receive translation requests from clients. The translation request can include an utterance (e.g. an audio file) and a context (e.g. text or other data describing how the utterance may be used or categorized).
- In step 804, a relevant language model is determined. For example, an interpolated language model for web search, free form text input, or social status can be determined. In some implementations, language models, including interpolated language models, can be indexed by keyword, web domain, application type, or other criteria. Using metadata associated with the utterance, such as context or source information, a relevant language model can be determined.
- In
step 806, speech recognition is performed. The utterance can used by a speech recognition application using the language model. The speech recognition application can calculate one or more candidate text strings from the utterance. A confidence level can be associated with each text string. - In step 808, a K-best list of text strings representing the utterance is returned (where K is an integer). In some implementations, the text string with the highest confidence value is selected and returned. In some implementations, a particular number (K, in this case) of text strings with the highest confidence level are returned.
- Although a particular number, type, and order of steps are shown, it will be understood by one skilled in the art that other number, types, and orders are possible. For example, in step 808, all text strings with a confidence level above a particular threshold can be returned. In another example, an utterance can be preprocessed before
step 806 to improve recognition. -
FIG. 9 shows an example of ageneric computer device 900 and a genericmobile computer device 950, which may be used with the techniques described here.Computing device 900 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.Computing device 950 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. -
Computing device 900 includes aprocessor 902,memory 904, astorage device 906, a high-speed interface 908 connecting tomemory 904 and high-speed expansion ports 910, and alow speed interface 912 connecting tolow speed bus 914 andstorage device 906. Each of thecomponents processor 902 may process instructions for execution within thecomputing device 900, including instructions stored in thememory 904 or on thestorage device 906 to display graphical information for a GUI on an external input/output device, such asdisplay 916 coupled tohigh speed interface 908. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 900 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 904 stores information within thecomputing device 900. In one implementation, thememory 904 is a volatile memory unit or units. In another implementation, thememory 904 is a non-volatile memory unit or units. Thememory 904 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 906 is capable of providing mass storage for thecomputing device 900. In one implementation, thestorage device 906 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product may be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 904, thestorage device 906, memory onprocessor 902, or a propagated signal. - The
high speed controller 908 manages bandwidth-intensive operations for thecomputing device 900, while thelow speed controller 912 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller 908 is coupled tomemory 904, display 916 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 910, which may accept various expansion cards (not shown). In the implementation, low-speed controller 912 is coupled tostorage device 906 and low-speed expansion port 914. The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 900 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 920, or multiple times in a group of such servers. It may also be implemented as part of arack server system 924. In addition, it may be implemented in a personal computer such as alaptop computer 922. Alternatively, components fromcomputing device 900 may be combined with other components in a mobile device (not shown), such asdevice 950. Each of such devices may contain one or more ofcomputing device multiple computing devices -
Computing device 950 includes aprocessor 952,memory 964, an input/output device such as adisplay 954, acommunication interface 966, and atransceiver 968, among other components. Thedevice 950 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of thecomponents - The
processor 952 may execute instructions within thecomputing device 950, including instructions stored in thememory 964. The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of thedevice 950, such as control of user interfaces, applications run bydevice 950, and wireless communication bydevice 950. -
Processor 952 may communicate with a user throughcontrol interface 958 anddisplay interface 956 coupled to adisplay 954. Thedisplay 954 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 956 may comprise appropriate circuitry for driving thedisplay 954 to present graphical and other information to a user. Thecontrol interface 958 may receive commands from a user and convert them for submission to theprocessor 952. In addition, anexternal interface 962 may be provide in communication withprocessor 952, so as to enable near area communication ofdevice 950 with other devices.External interface 962 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used. - The
memory 964 stores information within thecomputing device 950. Thememory 964 may be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.Expansion memory 974 may also be provided and connected todevice 950 throughexpansion interface 972, which may include, for instance, a SIMM (Single In Line Memory Module) card interface.Such expansion memory 974 may provide extra storage space fordevice 950, or may also store applications or other information fordevice 950. Specifically,expansion memory 974 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example,expansion memory 974 may be provide as a security module fordevice 950, and may be programmed with instructions that permit secure use ofdevice 950. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the
memory 964,expansion memory 974, memory onprocessor 952, or a propagated signal that may be received, for example, overtransceiver 968 orexternal interface 962. -
Device 950 may communicate wirelessly throughcommunication interface 966, which may include digital signal processing circuitry where necessary.Communication interface 966 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 968. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System)receiver module 970 may provide additional navigation- and location-related wireless data todevice 950, which may be used as appropriate by applications running ondevice 950. -
Device 950 may also communicate audibly usingaudio codec 960, which may receive spoken information from a user and convert it to usable digital information.Audio codec 960 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset ofdevice 950. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating ondevice 950. - The
computing device 950 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 980. It may also be implemented as part of asmartphone 982, personal digital assistant, or other similar mobile device. -
Device 950 may also include one or more different devices that are capable of sensing motion. Examples include, but are not limited to, accelerometers and compasses. Accelerometers and compasses, or other devices that are capable of detecting motion or position are available from any number of vendors and may sense motion in a variety of ways. For example, accelerometers may detect changes in acceleration while compasses may detect changes in orientation respective to the magnetic North or South Pole. These changes in motion may be detected by thedevice 950 and used to update the display of therespective devices 950 according to processes and techniques described herein. - Various implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here may be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
-
FIG. 10 is a block diagram of anexample data structure 1000 of a language model. Thedata structure 1000 can weightedly link a semantic idea or category with language models, for example, for use in speech recognition. - A semantic category 1002, such as a search query or type of input field, can be linked to one or more of a collection of interpolated
language models 1004. The interpolatedlanguage models 1004 can be linked to one or morebase language models 1006. The links between the interpolatedlanguage models 1004 andbase language models 1006 can be weighted. In some examples, the sum of the weights of the links from one interpolated language model can be 1 or can be normalized to 1. - It will be understood that, although a particular number and configuration of interpolated
language models 1004,base language models 1006, and links are shown, other numbers and configurations are possible. For example, sufficient interpolatedlanguage models 1004 may exist that every weighted combination ofbase language models 1006 has a linked interpolatedlanguage model 1004. In some examples, interpolated language model can be linked to more or fewerbase language models 1006. In some examples, different link weights between interpolatedlanguage models 1004 andbase language models 1006 may exist, such as positive integers, probabilities, or dimensional distance (e.g. W,X,Y,Z values for four dimensional space.) In some implementations, multiple semantic categories 1002 can be linked to a single interpolatedlanguage model 1004. - In some examples, interpolated
language models 1004 can be created on demand, such as when a semantic category 1002 is added to the data structure. The interpolatedlanguage models 1004 can persists after the removal of semantic categories (not shown). For example, previously removed semantic categories (not shown) may have prompted the creation of the interpolatedlanguage models data structure 1004, and linked to any of the interpolatedlanguage models 1004. - In some examples, every possible interpolated
language model 1004 can be pre-created for use by a new semantic category 1008. Some of these examples can be used in situations, such as when many new semantic categories 1008 are expected, when pre-processing time is available, and/or when fewbase language models 1006 are expected. - A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of what is described here.
- In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims.
Claims (20)
1. A computer-implemented method executed on data processing hardware of a mobile computing device that causes the data processing hardware to perform operations comprising:
displaying, on an electronic display of the mobile computing device, a user interface for a particular application executing on the mobile computing device, the user interface comprising a text field and a graphical microphone, the graphical microphone displayed next to the text field on the electronic display;
in response to receiving first interaction data indicating user interaction with the text field, invoking the user interface to further display a virtual keyboard on the electronic display;
in response to receiving second interaction data indicating user interaction with the graphical microphone:
removing the virtual keyboard from display on the electronic display so as to disable an ability of the particular application executing on the mobile computing device to receive typed text input; and
enabling a voice input mode for the particular application executing on the mobile computing device by invoking the user interface to display a visual indication that the particular application is enabled to receive voice input; and
after enabling the voice input mode for the particular application, detecting a spoken utterance directed toward the particular application.
2. The computer-implemented method of claim 1 , wherein the operations further comprise, after detecting the spoken utterance directed toward the particular application:
providing audio data corresponding to the spoken utterance to a server system, the server system comprising a speech recognition system;
receiving, from the server system, a transcription of the spoken utterance generated by the server system; and
displaying the transcription of the spoken utterance on the electronic display.
3. The computer-implemented method of claim 2 , wherein the operations further comprise:
determining a context associated with the spoken utterance;
providing, to the server system, data that indicates the context associated with the spoken utterance; and
receiving the transcription of the spoken utterance from the server system, wherein the server system generated the transcription based on the data that indicates the context associated with the utterance.
4. The computer-implemented method of claim 1 , wherein the spoken utterance is captured by a microphone of the mobile computing device.
5. The computer-implemented method of claim 1 , wherein the mobile computing device comprises an audio output device.
6. The computer-implemented method of claim 1 , wherein the operations further comprise, in response to detecting the spoken utterance, invoking the user interface to display a graphic indicating that speech-to-text conversion on the spoken utterance is in progress.
7. The computer-implemented method of claim 6 , wherein the operations further comprise, in response to detecting the spoken utterance, invoking the user interface to further display a graphical cancel button for canceling the speech-to-text conversion on the spoken utterance.
8. The computer-implemented method of claim 1 , wherein the user interface comprises a user interface for a multi-modal input method editor that enables the particular application executing on the mobile computing device to receive voice input and typed input.
9. The computer-implemented method of claim 1 , wherein the operations further comprise, in response to receiving the second interaction data indicating user interaction with the graphical microphone, removing the graphical microphone from display on the electronic display.
10. The computer-implemented method of claim 1 , wherein the mobile computing device comprises a mobile phone.
11. A mobile computing device comprising:
an electronic display;
data processing hardware; and
memory hardware in communication with the data processing hardware and storing instructions that when executed on the data processing hardware cause the data processing hardware to perform operations comprising:
displaying, on the electronic display, a user interface for a particular application executing on the mobile computing device, the user interface comprising a text field and a graphical microphone, the graphical microphone displayed next to the text field on the electronic display;
in response to receiving first interaction data indicating user interaction with the text field, invoking the user interface to further display a virtual keyboard on the electronic display;
in response to receiving second interaction data indicating user interaction with the graphical microphone:
removing the virtual keyboard from display on the electronic display so as to disable an ability of the particular application executing on the mobile computing device to receive typed text input; and
enabling a voice input mode for the particular application executing on the mobile computing device by invoking the user interface to display a visual indication that the particular application is enabled to receive voice input; and
after enabling the voice input mode for the particular application, detecting a spoken utterance directed toward the particular application.
12. The mobile computing device of claim 11 , wherein the operations further comprise, after detecting the spoken utterance directed toward the particular application:
providing audio data corresponding to the spoken utterance to a server system, the server system comprising a speech recognition system;
receiving, from the server system, a transcription of the spoken utterance generated by the server system; and
displaying the transcription of the spoken utterance on the electronic display.
13. The mobile computing device of claim 12 , wherein the operations further comprise:
determining a context associated with the spoken utterance;
providing, to the server system, data that indicates the context associated with the spoken utterance; and
receiving the transcription of the spoken utterance from the server system, wherein the server system generated the transcription based on the data that indicates the context associated with the utterance.
14. The mobile computing device of claim 11 , wherein the spoken utterance is captured by a microphone of the mobile computing device.
15. The mobile computing device of claim 11 , wherein the mobile computing device comprises an audio output device.
16. The mobile computing device of claim 11 , wherein the operations further comprise, in response to detecting the spoken utterance, invoking the user interface to display a graphic indicating that speech-to-text conversion on the spoken utterance is in progress.
17. The mobile computing device of claim 16 , wherein the operations further comprise, in response to detecting the spoken utterance, invoking the user interface to further display a graphical cancel button for canceling the speech-to-text conversion on the spoken utterance.
18. The mobile computing device of claim 11 , wherein the user interface comprises a user interface for a multi-modal input method editor that enables the particular application executing on the mobile computing device to receive voice input and typed input.
19. The mobile computing device of claim 11 , wherein the operations further comprise, in response to receiving the second interaction data indicating user interaction with the graphical microphone, removing the graphical microphone from display on the electronic display.
20. The mobile computing device of claim 11 , wherein the mobile computing device comprises a mobile phone.
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/812,320 Continuation US11914925B2 (en) | 2009-12-23 | 2022-07-13 | Multi-modal input on an electronic device |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240160403A1 true US20240160403A1 (en) | 2024-05-16 |
Family
ID=
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11914925B2 (en) | Multi-modal input on an electronic device | |
US11416214B2 (en) | Multi-modal input on an electronic device | |
CN111710333B (en) | Method and system for generating speech transcription | |
US10181322B2 (en) | Multi-user, multi-domain dialog system | |
KR102390940B1 (en) | Context biasing for speech recognition | |
US8380512B2 (en) | Navigation using a search engine and phonetic voice recognition | |
US20170154623A1 (en) | Pronunciation learning through correction logs | |
US11016968B1 (en) | Mutation architecture for contextual data aggregator | |
US20180308471A1 (en) | Acoustic model training using corrected terms | |
JP2002116796A (en) | Voice processor and method for voice processing and storage medium | |
US11170765B2 (en) | Contextual multi-channel speech to text | |
CN112262382A (en) | Annotation and retrieval of contextual deep bookmarks | |
JP7400112B2 (en) | Biasing alphanumeric strings for automatic speech recognition | |
US20240160403A1 (en) | Multi-modal input on an electronic device | |
CN1965349A (en) | Multimodal disambiguation of speech recognition | |
AT&T | ||
JP7257010B2 (en) | SEARCH SUPPORT SERVER, SEARCH SUPPORT METHOD, AND COMPUTER PROGRAM |