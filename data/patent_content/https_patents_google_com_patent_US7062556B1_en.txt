US7062556B1 - Load balancing method in a communication network - Google Patents
Load balancing method in a communication network Download PDFInfo
- Publication number
- US7062556B1 US7062556B1 US09/447,400 US44740099A US7062556B1 US 7062556 B1 US7062556 B1 US 7062556B1 US 44740099 A US44740099 A US 44740099A US 7062556 B1 US7062556 B1 US 7062556B1
- Authority
- US
- United States
- Prior art keywords
- server
- servers
- load
- group
- groups
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5027—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals
- G06F9/505—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resource being a machine, e.g. CPUs, Servers, Terminals considering the load
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5061—Partitioning or combining of resources
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/50—Indexing scheme relating to G06F9/50
- G06F2209/5011—Pool
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/50—Indexing scheme relating to G06F9/50
- G06F2209/505—Clust
Definitions
- the invention relates to the field of communications, and more particularly, to communication load balancing in a communication system.
- Load balancing attempts to ensure that the workload on each server is within a small degree (or balance criterion) of the workload present on every other servers in the system.
- Load balancing is an interchangeable term with the term: load sharing.
- Load sharing is commonly used in situations of sharing the load of a heavily loaded processor with a lightly loaded one.
- load leveling One other term occasionally seen in literature is load leveling. Rather than trying to obtain a strictly even distribution of load across all hosts, or simply utilizing idle hosts, load leveling seeks to avoid congestion on any one host server.
- load-balancing techniques for communication traffic distribution.
- One such advantage is reducing the impact of performance of a server when one or more servers fail to function.
- a network of clients and servers with no load balancing mechanism is likely to exhibit unequal loading among the servers.
- Some of the servers may be heavily loaded and some other may be lightly loaded or even idle.
- a failure in a heavily loaded server will cause severe performance degradation.
- Load balancing significantly reduces such a risk.
- Server capacity is often represented by a pre-determined upper limit of available processing capacity in the server. For example, if a server can process in average 100 tasks per unit time, its capacity is normally quoted as 80 tasks per unit time, i.e., 80% of its maximal capacity. This is to leave enough headroom to accommodate load fluctuation. Reducing the load fluctuation in a server is one of the important things of load balancing. If the load variation is carefully controlled with adequate load balancing, the server capacity can be quoted higher, for example, 90% of its maximal capacity. This is a substantial increase over a situation without load balancing.
- load balancing reduces average system response time.
- Average response time in a system is the most widely used metric in measuring the efficiency of a load-balancing algorithm.
- the average system response time in a system with or without load balancing mechanism looks like the graph depicted in FIG. 6 . From the graph, it is clear that load balancing can reduce the average system response time, most of the time, in a significant way.
- load balancing tries to ensure a fair and balanced resource utilization of the resources at the servers.
- a well-designed load balancing strategy should seek to avoid any resource idleness when there is enough load in the system to at least lightly load resources.
- Load balancing activity adds to the cost of a communication system.
- Load balancing requires processing capacity for computation, communication overhead and memory space to maintain load balancing information. To justify the use of load balancing, the usefulness of each load-balancing step must be weighed against the amount of added processing and communication.
- Load balancing improves the performance of a distributed system such as a communication network, usually in terms of response time or resource utilization, by allocating workload amongst a set of cooperating servers connected to the network.
- the distribution of system load can take place statically or dynamically.
- a static load balancing may probabilistically or deterministically assign or transfer jobs to servers without consideration of runtime events. This approach is both simple and effective when server workload can be accurately characterized and where the scheduler is in control of all activities, or is at least aware of a consistent background over which it makes its own distribution. Problems arise when the background load is liable to fluctuations, or there are jobs outside the control of the static load distributor.
- Typical examples of static load distribution are Round Robin, uniform or random distribution, and probabilistic distribution which includes assigning or transferring a request to server i with probability p i , which are pre-determined.
- Dynamic load balancing is designed to overcome the problems of unknown or uncharacteristic workloads. Dynamic load distribution methods typically monitor server workload for any factors that may affect the choice of the most appropriate assignment and distribute jobs accordingly. Essentially, dynamic algorithms improve performance by exploiting short-term fluctuations in the server (or system) state. However, dynamic algorithms incur more overheads than their static counterparts by collecting, storing, and analyzing state information.
- Load balancing schemes are usually partitioned into a policy portion and a mechanism portion.
- the policy portion includes a set of choices that are made to distribute the load.
- the mechanism portion carries out the physical distribution of load and provides any information required by the policies.
- Participation Policy determines whether a server will take part in load distribution. It can be as simple as comparing an instance load to a threshold based on the local load, or a more complex security issue such as the refusal of accepting new load due to security concern.
- the location policy is responsible for selecting the participating servers between whom the load is distributed. This policy is also responsible for handling the homogeneity or heterogeneity of the participants.
- Candidate Selection Policy selects the jobs, process, objects, or whatever the workload unit is, to be distributed.
- the transfer mechanism deals with transferring jobs or processes between servers. This is to allow heavily loaded servers to off-load part of their load (new or existing) to lightly loaded servers.
- the transfers can be classified into preemptive transfers and non-preemptive transfers.
- Preemptive transfers involve transferring a partially executed task along with its state (e.g., a virtual memory image, a process control block, unread I/O buffers and messages, file pointers, timer that have been set, etc.) This can be very costly for the communication network traffic.
- state e.g., a virtual memory image, a process control block, unread I/O buffers and messages, file pointers, timer that have been set, etc.
- non-preemptive transfers involve only tasks that have not begun execution and hence do not require transferring the information regarding the state of the task.
- the performance feedback mechanism allows the users (clients) to provide performance feedback to the load distribution agents, e.g., the average response time clients experienced. Such feedback may be used to detect unexpected network problems (e.g., the average response time surges) or assist in load distribution decision.
- a clearly defined load metric is very important in client/server load distribution scheme, as it represents the workload being distributed. Participation, location and even candidate selections are based on the load, and it is therefore critical that the load metric is relevant. For example, the number of processes on a server may be completely irrelevant load metric as it does not provide any information about the contention for resources on that server.
- Average Response Time is the most widely used load metric in related load balancing literatures. The response time of a client request is the time elapsed from the initiation of the request to the receiving of a response. Minimizing the average response time is often the goal of load balancing. CPU run queue length has been used for years as an important indicator of system load.
- the uptime command in UNIX BSD 4.2-and-after can provide the average number of jobs in the run queue over the last 1, 5 and 15 minutes.
- Buffer Occupancy is another load metric. If servers are equipped with input and output buffers, their occupancy can provide a useful insight of system load.
- Useful load metrics range from instantaneous CPU queue length to a linear combination of CPU, memory and I/O queue lengths. In certain cases, the linear combination of exponentially smoothed CPU, I/O and memory queue lengths produces good performance in load balancing. In other findings, a single resource queue length works as good as a combined load metric. These findings confirm that the load metric is important, but also indicate that the suitability of any load metric depends on the system, workload and load distribution scheme for which it is used.
- WAN wide area network
- LAN local area network
- idle servers If there is a reasonable proportion of idle servers at any time in a system, then these servers represent an immediately allocable resource.
- the idleness criteria can be fairly simple. For example, an idle host must have had less than one run-able process, averaged over the last minute, and no keyboard or mouse input for the past 30 seconds.
- Communication may also be a measure of load, and it is desirable to minimize the communication load between two objects or processes. This encourages the communicating entities to reside together on the same server or close together to minimize the communication cost.
- the first policy may be to transfer objects from an over-loaded server to an under-loaded server.
- the second policy may be to move heavily communicating objects to the same server.
- the second policy clusters communicating objects, and thus through communication, certain objects express an affinity for each other.
- the number of jobs assigned to each server is the most straightforward load metric for load balancing algorithms. This may be the easiest load metric each server can measure. In telephony applications, the number of jobs assigned is simply the number of trunks occupied.
- Polling is a message directed at only one server to return its current load. If polling is performed on demand, it results in the most up to date information, but at a potentially high cost. With polling, all potential servers in the system are contacted before each job is scheduled. This could result in the job being delayed while waiting on the other servers to respond, and as the number of job arrivals in the system increases, there will be a corresponding rise in the network traffic.
- servers periodically send out load updates to clients, either by broadcast or multicast. Periodic updating is cheaper and fast when checked on the local machine. The major problem is that information can become stale between updates, and result in incorrect job placements
- a broadcast type method includes a form of undirected communication where all host servers and clients are involved in exchanging information by broadcasting over the network.
- a broadcast type method may lead to an unacceptable amount of network traffic; in addition, all hosts receive the load updates whether or not the hosts are involved in load distribution. In large networks, there may be a substantial propagation delay over all hosts in the network.
- the primary advantage is also that all hosts on the network have access to all the broadcast information, and this can be used not only to update recorded server loads on all clients, but also to synchronize a distributed load distribution policy.
- the form of broadcast constrains the members of a group. This reduces some problems associated with the broadcast method, as only members of a certain group receive the load information, but there still may be a lot of traffic.
- the primary advantage of the group communication system is that identification of participating hosts (clients or servers) is simplified, making the location of suitable sources or destinations a much simpler problem.
- a method of central load collection agent can be used to collect and store load information for clients to use.
- Three typical agents include 1) Global Agent where all servers periodically transmit their loads to a central global collection agent. If there is no change in a server's load from the last period, then no update is sent to the collection agent. The accumulated load vector is then periodically broadcast from the central collection agent to all clients in the system; 2) Central Agent where the system has a central agent, except that the load is not periodically collected or distributed. Instead if a client wishes to send a job or a server wishes to off-load a job, then it sends a request to the central agent. The central agent then replies with a suggested destination.
- Centex Agent includes a combination of the Global and Central algorithms where a central agent collects all of the periodic load updates, but does not automatically distribute them. If a client (or server) needs to locate a destination, then it contacts the central agent for the most recent information.
- each server can process an arbitrary number of requests simultaneously, a good rule of thumb at looking at each server's behavior shows the number of requests in each server follows a Poisson distribution.
- the average number of requests is equal to average request arrival rate divided by average server service rate, which is known as Erlang in telephony.
- the variance of the number of requests is approximately equal to the average number of requests, and 95% of the time, the number of requests will be bounded between the average +/ ⁇ 2 standard deviations where one standard deviation is equal to a squared root of variance.
- join-the-least-loaded-server is the best load balancing method if clients always know the current load of any server.
- An ideal but unrealistic way is to have each server send out a Load Update message to all clients every time its load changes. This will guarantee that clients always learn the current load of servers and perform a perfect load-balancing job. However, this ideal practice will create lots of control messages and consume lots of valuable network bandwidth.
- servers do not update clients of their load frequent enough a least loaded server based on clients' knowledge could be flooded with all the requests of services and it may be over-loaded before it can broadcast its load to all clients.
- a key aspect of such method is how to pick a good timing for servers to broadcast their load updates such that clients can have appropriate and accurate information to distribute the requests.
- FIG. 1 depicts a logical partitioning of clients and servers in a communication network.
- N clients 101 - 1 through 101 -N and K servers 111 - 1 through 111 -K. Let's assume, there are more clients than servers (N ⁇ K.) Such assumptions are most prevalent in practical cases.
- Clients are partitioned into client groups 121 - 1 through 121 -K. Each client group is served by a corresponding server. Each client in a client group sends its jobs to the assigned server respectively as shown through logical connections 131 - 1 through 131 -K.
- Each server and client group pair can be viewed as an independent queuing system. If assume Poisson arrivals of clients' tasks and exponential, service rate for each server may be calculated using known analysis.
- FIG. 2 depicts another logical partitioning of client and servers where there are more servers than clients (N ⁇ K).
- Servers 211 - 1 through 211 -K are partitioned into server groups 221 - 1 through 221 -N, and each server group serves one client selected from clients 201 - 1 through 201 -N.
- a First Come First Serve (FCFS) queue is formed at each client and jobs are removed one at a time by any of the available servers in each server group.
- FCFS First Come First Serve
- FIG. 3 depicts a flow diagram for a sender initiated algorithm that may be used to perform load balancing.
- the focus on load distributing activities initiated by an overloaded server is to send tasks to an under-loaded server. In other words, they fall into the load-sharing category.
- Over-loaded servers use a threshold (T) based transfer policy to decide at a decision block 302 whether or not a new arriving request 301 should be transferred.
- the queue length at the over-loaded server is compared to the threshold T at a decision block 302 . If the decision at block 302 is to transfer arriving request 301 because the threshold T has been reached, a server “i” is selected at a selector block 303 based on Random or Round Robin method.
- the server “i” is polled.
- the queue length at the server “i” is compared to a threshold T. If the queue length at the server “i” is smaller than the threshold T, the request is transferred to the server “i” at transfer block 306 . If the queue length at the server “i” is larger than the threshold T, a new server “i” is selected at selector block 303 , and the process is repeated.
- the number of repeated polls is compared against a number of polls limit. If the number of polls limit has been reached, the process sends the request to a request-locally-block 308 for queuing the request locally.
- sender-initiated algorithms provide significant performance improvement over systems that offer no load sharing algorithms at all. However, they may cause system instability at high system loads. When the system is heavily loaded, no server is likely to be lightly loaded, so a sender is unlikely to find a suitable destination server to share its load. The polling activity in sender-initiated algorithms increases as the request arrival rate increases. Eventually, the workload that cannot be offloaded from another server, together with the overhead incurred by polling, exceeds the server's processing capacity and results in instability. Unless the sender-initiated algorithms can adapt to the system state, they are not effective at high system loads.
- FIG. 4 depicts a flow diagram for a receiver initiated algorithm that may be used to perform load balancing.
- load-distributing activities are initiated from an under-loaded server (receiver), which tries to get a request from an overloaded server (sender.)
- An under-loaded server polls randomly or Round Robin other servers looking for a task transfer.
- the decisions in sender or receiver are mainly threshold based.
- a receiver server “j” makes a request 401 for a task transfer.
- Decision block 402 compares a queue length of request 401 against a threshold T. If the queue length is less than the threshold T, at a block 403 , a server “i” is selected based on Random or Round Robin method.
- the server “i” as a sender server candidate is polled.
- the queue length at the server “i” is compared to a threshold T. If the queue length at the sender server “i” is larger than the threshold T, the request is transferred to the receiver server “j” at transfer block 406 . If the queue length at the sender server “i” is smaller than the threshold T, a new sender server “i” is selected at selector block 403 , and the process is repeated.
- the number of repeated polls is compared against a number of polls limit. If the number of polls limit has been reached, the process stops at a stop block 408 .
- the server should wait until next request departs or for a predetermined period before reinitiating the polling activity if the server “j” is still a receiver server.
- Such a receiver-initiated algorithm does not cause system instability because even at high system loads a receiver is likely to find a suitable sender within a few polls. Consequently, the number of polls increases as the system load increases.
- a drawback for such a receiver-initiated algorithm is the cost associated with the preemptive transfer. Most of the time, the polls arrive at senders just after new requests have arrived. At the senders, the newly arrived requests immediately take the CPU run queue. The transfer of a request that is being executed in a preemptive transfer is quite costly on the CPU capacity.
- both senders and receivers initiate load-distributing activities for task transfers. These algorithms have both the advantages and disadvantages. Normal implementation of the symmetrically initiated algorithms is to preserve the advantages and use adaptive methods to avoid the disadvantageous outcomes.
- One drawback for implementing the symmetrically initiated algorithm is that the load distributing activities incur more overhead and computation for both the sender and receiver servers.
- a general perception for avoiding load-balancing disadvantages is to use dynamic load balancing algorithms.
- dynamic load balancing algorithms are inevitably more complex which may negate their benefits.
- Stability of the load-balancing algorithm is also an important factor to consider. Views of stability include the theoretic queuing perspective and the algorithmic perspective. From the queuing perspective, when the long-term arriving rate of tasks to a system is greater than the rate in which the system can perform work, the system is viewed unstable. For example, if a load-balancing algorithm performs excessive message exchanges to collect system state information, and the arriving load plus the processing overhead incurred by the algorithm exceeds the service capacity of the system, the system will become unstable.
- An algorithm is termed unstable if it performs fruitless actions indefinitely with nonzero probability. For example, consider a thrashing process in a heavily loaded system where a task moves indefinitely from one server to another in search for a transfer candidate without ever receiving any service. Such a moving orphan task with its overhead can cause the algorithm to be in the unstable mode.
- Round Robin is usually the preferred choice.
- a small client/server system sometimes does not justify the need of a sophisticated load-balancing algorithm.
- a simple static load-balancing algorithm (for example, Round Robin) may simply do the job well.
- a well-designed load-balancing algorithm should also take the fail-over impact into consideration. The method involves how the algorithm reacts to a sudden server failure, and where shall the load directed on the failed (or failing) server are redistributed.
- a robust load-balancing algorithm also needs to consider how to accommodate a repaired server in its load distribution.
- FIG. 1 depicts a logical partitioning of clients and servers in a communication network.
- FIG. 2 depicts another logical partitioning of clients and servers where there are more servers than clients.
- FIG. 3 depicts a flow diagram for a sender initiated algorithm that may be used to perform load balancing.
- FIG. 4 depicts a flow diagram for a receiver initiated algorithm that may be used to perform load balancing.
- FIG. 5 depicts a communication network with a client/server environment where servers are grouped with corresponding time period for loading change according to various aspects of the invention.
- FIG. 6 is a graphical depiction of an average system response time in a system with and without a load balancing mechanism.
- FIG. 7 is a graphical depiction of a determination of a load assignment time period according to an aspect of the present invention.
- Load assignment according to various aspects of the invention solves one or more problems associated with load balancing in a communication network.
- An embodiment of the invention may be included in a communication system network having a plurality of servers. Each of the plurality of servers may have a load level based on serving a number of clients in the communication system network.
- a method according to an embodiment of the invention includes grouping the plurality of servers into a first and second server groups, the first server group having a load level less than the load level of the second server group.
- Load assignment takes place by assigning load to a server selected from the servers in the first server group from an initial time until expiration of a time period T. The time period T may be calculated based on the load level of at least one of the servers.
- load assignment takes place by assigning load to a server selected from the servers in the first and second server groups.
- load distribution takes place by anticipating a time period T that determines an optimum time for distributing load to a server in either the first group of servers or the first and second groups of the servers.
- Each client independently may calculate the time period T.
- the load information at each server is readily available to all clients in a communication network since each server may periodically broadcast its load level information.
- a method in another embodiment, includes grouping the plurality of servers into a plurality of server groups G 0 through G 2 .
- Server groups G 0 through G 2 respectively have load levels progressively from a least amount of load level to a most amount of load level.
- Time periods T 1 and T 2 are calculated, the time period T 2 being longer than the time period T 1 .
- Load assignment takes place by assigning load to a server selected from the servers in the server group G 0 from an initial time until expiration of the time period T 1 .
- load assignment takes place by assigning load to a server selected from the servers in the server groups G 0 and G 1 .
- load assignment takes place by assigning load to a server selected from the servers in the server groups G 0 , G 1 and G 2 .
- a method includes grouping the plurality of servers into a plurality of server groups G 0 through Gk.
- the server groups G 0 through Gk respectively have load levels progressively from a least amount of load level to a most amount of load level, the server group Gk having the most load level larger than the load level of the server groups G 0 , and larger than any intervening server groups where “k” is larger than two.
- the intervening server groups have progressively larger load level than the load level of the server group G 0 .
- a plurality of time periods T 1 through Tk are calculated, the time period Tk being longer than time period T 1 , and longer than any intervening time periods where k is larger than two.
- the intervening time periods are progressively longer than time period T 1 .
- Load assignment takes place by assigning load to a server selected from the servers in the server group G 0 from an initial time until expiration of the time period T 1 .
- load balancing takes place by assigning load to a server selected from the servers in the server groups including the server group G 0 and at least one other server group selected from the server groups G 1 through Gk.
- a method includes grouping the plurality of servers into a plurality of server groups G 0 through Gk.
- the server groups G 0 through Gk respectively have load levels progressively from a least amount of load level to a most amount of load level, the server group Gk having the most load level larger than the load level of the server groups G 0 , and larger than any intervening server groups where “k” is larger than two.
- a plurality of time periods T 1 through Tk are calculated respectively corresponding to the server groups G 1 through Gk.
- Load assignment takes place by assigning load to a server selected from the servers in the server group G 0 from an initial time until expiration of the time period T 1 . After expiration of each of the time periods T 1 through Tk measured from the initial time, load assignment takes place by assigning load to a server selected from the servers in a combination of servers including the server group G 0 and at least one other server group, in the server groups G 1 through Gk, corresponding to an expiring time period.
- calculation of each of the plurality of time periods T 1 through Tk may be based on a difference between load levels of at least two server groups in the plurality of server groups G 0 through Gk.
- Load level of servers may change depending on the number of clients using the communication network and served by the servers.
- Calculation of each of the plurality of time periods T 1 through Tk may be based on: 1) load levels of at least two server groups selected from the plurality of server groups G 1 through Gk, 2) a request arrival rate, and 3) a server service rate, or 4) a combination of 1 through 3.
- the request arrival rate may be substituted for an average request arrival rate of the plurality of servers, or an average request arrival rate of a combination of servers of the plurality of servers.
- the server service rate may be substituted for an average service rate of the plurality of servers, or an average service rate of a combination of servers of the plurality of servers.
- Each client at different times may place different levels of load on a server or a plurality of servers.
- a client may be in communication with another source for receiving voice and data at the same time.
- the load level requirement changes when the data has been transferred to its destination.
- the number of clients served by the plurality of servers may change which as a result changes the load levels at one or more servers.
- a new load level information may be received periodically depending on the requirements of the clients.
- Calculating the plurality of time periods is repeated to produce a new plurality of time periods T 1 through Tk corresponding to the new plurality of server groups G 0 through Gk.
- the initial time is reset to a reset initial time.
- Load assignment takes place by assigning load to a server selected from the servers in the new server group G 0 from the reset initial time until expiration of the new time period T 1 .
- load assignment takes place by assigning load to a server selected from the servers in the server groups exclusively from G 0 to the server group that its index corresponds to the index of the expired time period.
- grouping of the plurality of server groups G 0 through Gk may be based on similarity of load levels among the plurality of servers. For example, the servers with similar low load levels may be grouped in the server group G 0 , and similarly, the servers with similar large load levels grouped in the server group Gk. The servers in each intervening server groups have similar load levels.
- a round robin selection method or a random selection method may be used for at least one load assignment in assigning load to a server selected from the server group G 0 .
- a round robin selection method or a random selection method may be used for at least one load assignment to a server selected from servers in the combination of the server groups.
- an anticipatory load balancing allows putting load projection intelligence in a client-server environment to route requests of services to groups of least loaded servers based on not only server load updates but also on an intelligent projection time period T which is based on one or more servers loading behavior.
- Putting projecting capability into client-server environment reduces the frequency of server updates which results in preserving valuable network bandwidth. Improperly managed traffic load distribution in a client-server environment will cause inefficient use of server resources, higher risk of server overload, longer transaction delay, and lower system capacity.
- the anticipatory load balancing method allows load balancing across all the available servers.
- a client-server environment 510 where there are clients 501 - 1 through M (C 1 , C 2 , . . . , C M ) and servers 502 - 1 through N(S 1 , S 2 , . . . , S N ).
- Each server broadcasts its load periodically to all clients.
- Each client maintains a server load list.
- the load list is updated each time a new update from any server arrives.
- the load in each server is defined to be the total number of requests physically residing in the server, whether they are being served or waiting for service in queues. Based on available server loading information, clients will distribute requests for services to servers according to the invention.
- the goal for the load balancing is to reduce the load variance in each server as much as possible and ensure a fair and efficient use of server resources.
- communication system network 500 may have a plurality of servers 502 - 1 through N each having a load level based on serving a number of clients selected from the clients 501 - 1 through M.
- a method according to an embodiment of the invention includes grouping the plurality of servers 502 - 1 through N into a plurality of server groups 503 - 0 through 503 - k , G 0 through Gk.
- the server groups G 0 through Gk respectively have load levels progressively from a least amount of load level to a most amount of load level, the server group Gk having the most load level larger than the load level of the server groups G 0 , and larger than any intervening server groups where “k” is larger than two.
- the servers 502 - 1 through N with similar loads are grouped together to form the server groups 503 - 0 through k (G 0 through Gk.)
- a plurality of time periods T 1 through Tk are calculated respectively corresponding to the server groups G 1 through Gk.
- Load assignment takes place by assigning load to a server selected from the servers in the server group G 0 from an initial time until expiration of the time period T 1 .
- load assignment takes place by assigning load to a server selected from the servers in the server groups exclusively from G 0 to the server group that its index corresponds to the index of the expired time period.
- the calculation of the time period T depends on the knowledge about the server service pattern and client request arrival pattern.
- a graphical representation of a determination of the time period is depicted in FIG. 7 . The calculation of time period T as shown may change without departing from the main scope of the invention.
Abstract
Description
Claims (13)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/447,400 US7062556B1 (en) | 1999-11-22 | 1999-11-22 | Load balancing method in a communication network |
PCT/US2000/030334 WO2001038972A1 (en) | 1999-11-22 | 2000-11-02 | Load balancing method in a communication network |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/447,400 US7062556B1 (en) | 1999-11-22 | 1999-11-22 | Load balancing method in a communication network |
Publications (1)
Publication Number | Publication Date |
---|---|
US7062556B1 true US7062556B1 (en) | 2006-06-13 |
Family
ID=23776235
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/447,400 Expired - Fee Related US7062556B1 (en) | 1999-11-22 | 1999-11-22 | Load balancing method in a communication network |
Country Status (2)
Country | Link |
---|---|
US (1) | US7062556B1 (en) |
WO (1) | WO2001038972A1 (en) |
Cited By (99)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010032232A1 (en) * | 2000-01-31 | 2001-10-18 | Zombek James M. | Messaging method and apparatus including a protocol stack that corresponds substantially to an open system interconnection (OSI) model and incorporates a simple network transport layer |
US20010031641A1 (en) * | 2000-04-11 | 2001-10-18 | Dara Ung | Wireless chat automatic status tracking |
US20030023743A1 (en) * | 2001-07-26 | 2003-01-30 | Raphel Jose Kolencheril | System, method and computer program product to maximize server throughput while avoiding server overload by controlling the rate of establishing server-side net work connections |
US20040003066A1 (en) * | 2002-06-26 | 2004-01-01 | Microsoft Corporation | Method and system for matching network clients and servers under matching constraints |
US20040087311A1 (en) * | 2001-03-28 | 2004-05-06 | Anders Haglund | Load distribution between nodes in communication networks |
US20040111509A1 (en) * | 2002-12-10 | 2004-06-10 | International Business Machines Corporation | Methods and apparatus for dynamic allocation of servers to a plurality of customers to maximize the revenue of a server farm |
US20040202182A1 (en) * | 2003-02-12 | 2004-10-14 | Martin Lund | Method and system to provide blade server load balancing using spare link bandwidth |
US20040267930A1 (en) * | 2003-06-26 | 2004-12-30 | International Business Machines Corporation | Slow-dynamic load balancing method and system |
US20050021862A1 (en) * | 2000-03-31 | 2005-01-27 | Dickens Coal Llc | Automatic selection of content-delivery provider using link mapping database |
US20050038890A1 (en) * | 2003-08-11 | 2005-02-17 | Hitachi., Ltd. | Load distribution method and client-server system |
US20050060608A1 (en) * | 2002-05-23 | 2005-03-17 | Benoit Marchand | Maximizing processor utilization and minimizing network bandwidth requirements in throughput compute clusters |
US20050102676A1 (en) * | 2003-11-06 | 2005-05-12 | International Business Machines Corporation | Load balancing of servers in a cluster |
US20050114372A1 (en) * | 2000-02-25 | 2005-05-26 | Coile Brantley W. | System and method for content management over network storage devices |
US20050210472A1 (en) * | 2004-03-18 | 2005-09-22 | International Business Machines Corporation | Method and data processing system for per-chip thread queuing in a multi-processor system |
US20050216910A1 (en) * | 2002-05-23 | 2005-09-29 | Benoit Marchand | Increasing fault-tolerance and minimizing network bandwidth requirements in software installation modules |
US20050257220A1 (en) * | 2002-06-20 | 2005-11-17 | Mckee Paul F | Distributed computer |
US20050282628A1 (en) * | 2004-06-02 | 2005-12-22 | Beatty John A | Method and apparatus for a gaming network architecture |
US20060010207A1 (en) * | 2000-09-25 | 2006-01-12 | Crossbeam Systems, Inc. | Network application apparatus |
US20060069780A1 (en) * | 2004-09-30 | 2006-03-30 | Batni Ramachendra P | Control server that manages resource servers for selected balance of load |
US20060072452A1 (en) * | 2004-10-06 | 2006-04-06 | Olariu Gabriel L | Method and system for load balancing over a set of communication channels |
US20060117046A1 (en) * | 2002-12-31 | 2006-06-01 | Robertson Derrick D | Distributed storage network |
US20060167972A1 (en) * | 2000-01-31 | 2006-07-27 | Zombek James M | System and method for re-directing requests from browsers for communications over non-IP based networks |
US20060195894A1 (en) * | 2005-02-25 | 2006-08-31 | Microsoft Corporation | Windows remote debugger service |
US20060212873A1 (en) * | 2005-03-15 | 2006-09-21 | Takashi Takahisa | Method and system for managing load balancing in data processing system |
US20060235972A1 (en) * | 2005-04-13 | 2006-10-19 | Nokia Corporation | System, network device, method, and computer program product for active load balancing using clustered nodes as authoritative domain name servers |
US20070124431A1 (en) * | 2005-11-30 | 2007-05-31 | Ranjan Sharma | Tie resolution in application load level balancing |
US20070136469A1 (en) * | 2005-12-12 | 2007-06-14 | International Business Machines Corporation | Load Balancing and Failover of Distributed Media Resources in a Media Server |
US20070136414A1 (en) * | 2005-12-12 | 2007-06-14 | International Business Machines Corporation | Method to Distribute Speech Resources in a Media Server |
US20070192863A1 (en) * | 2005-07-01 | 2007-08-16 | Harsh Kapoor | Systems and methods for processing data flows |
US20070198710A1 (en) * | 2004-12-30 | 2007-08-23 | Xstor Systems, Inc. | Scalable distributed storage and delivery |
US20070276934A1 (en) * | 2006-05-25 | 2007-11-29 | Fuji Xerox Co., Ltd. | Networked queuing system and method for distributed collaborative clusters of services |
US20080025620A1 (en) * | 2006-07-28 | 2008-01-31 | Fujifilm Corporation | Data compression apparatus and data compressing program storage medium |
US20080052712A1 (en) * | 2006-08-23 | 2008-02-28 | International Business Machines Corporation | Method and system for selecting optimal clusters for batch job submissions |
US20080059721A1 (en) * | 2006-09-01 | 2008-03-06 | Microsoft Corporation | Predictive Popular Content Replication |
US20080059746A1 (en) * | 2004-06-07 | 2008-03-06 | Michael Fisher | Distributed storage network |
US20080059565A1 (en) * | 2006-09-01 | 2008-03-06 | Microsoft Corporation | Adaptive Content Load Balancing |
US20080172419A1 (en) * | 2006-12-29 | 2008-07-17 | Anita Richards | Managing events in a computing environment |
US20080178003A1 (en) * | 2007-01-18 | 2008-07-24 | Matsushita Electric Works, Ltd. | Systems and methods for determining a time delay for sending a key update request |
US20090070489A1 (en) * | 2001-06-18 | 2009-03-12 | Open Invention Network, Llc | Content-aware application switch and methods thereof |
US20090172191A1 (en) * | 2006-03-14 | 2009-07-02 | Dan Mihai Dumitriu | System and method for routing service requests |
US20090187819A1 (en) * | 2000-11-13 | 2009-07-23 | Bonefas Rudy G | Method and system for deploying content to wireless devices |
US20090234949A1 (en) * | 2008-03-13 | 2009-09-17 | Harris Corporation, Corporation Of The State Of Delaware | System and method for distributing a client load from a failed server among remaining servers in a storage area network (san) |
US20100029375A1 (en) * | 2006-02-09 | 2010-02-04 | Buchholz Dale R | Wagering game server availability broadcast message system |
US20100042565A1 (en) * | 2000-09-25 | 2010-02-18 | Crossbeam Systems, Inc. | Mezzazine in-depth data analysis facility |
US20100057880A1 (en) * | 2008-08-27 | 2010-03-04 | International Business Machines Corporation | Method of Routing Messages to Multiple Consumers |
US20100070625A1 (en) * | 2008-09-05 | 2010-03-18 | Zeus Technology Limited | Supplying Data Files to Requesting Stations |
US20100077255A1 (en) * | 2008-09-22 | 2010-03-25 | International Business Machines Corporation | Catalog recovery through system management facilities reverse transversal |
US20100082762A1 (en) * | 2008-09-29 | 2010-04-01 | Fujitsu Limited | Message tying processing method and apparatus |
US7707457B2 (en) | 2002-05-23 | 2010-04-27 | Exludus Technologies, Inc. | Completing an interrupted data replication operation |
US20100115327A1 (en) * | 2008-11-04 | 2010-05-06 | Verizon Corporate Resources Group Llc | Congestion control method for session based network traffic |
US20100180025A1 (en) * | 2009-01-14 | 2010-07-15 | International Business Machines Corporation | Dynamic load balancing between chassis in a blade center |
US20100185766A1 (en) * | 2009-01-16 | 2010-07-22 | Fujitsu Limited | Load distribution apparatus, load distribution method, and storage medium |
US20100217866A1 (en) * | 2009-02-24 | 2010-08-26 | Thyagarajan Nandagopal | Load Balancing in a Multiple Server System Hosting an Array of Services |
US20110106949A1 (en) * | 2009-10-30 | 2011-05-05 | Cisco Technology, Inc. | Balancing Server Load According To Availability Of Physical Resources |
US20110213869A1 (en) * | 2000-09-25 | 2011-09-01 | Yevgeny Korsunsky | Processing data flows with a data flow processor |
US20110214157A1 (en) * | 2000-09-25 | 2011-09-01 | Yevgeny Korsunsky | Securing a network with data flow processing |
US20110213880A1 (en) * | 2004-06-28 | 2011-09-01 | Neuse Douglas M | System and method for performing capacity planning for enterprise applications |
US20110219035A1 (en) * | 2000-09-25 | 2011-09-08 | Yevgeny Korsunsky | Database security via data flow processing |
US8028039B1 (en) * | 2005-12-23 | 2011-09-27 | Reflexis Systems, Inc. | System and method for communicating data between wireless mobile hand-held computer and a back-end computer system |
US20110282980A1 (en) * | 2010-05-11 | 2011-11-17 | Udaya Kumar | Dynamic protection of a resource during sudden surges in traffic |
US8090856B1 (en) | 2000-01-31 | 2012-01-03 | Telecommunication Systems, Inc. | Intelligent messaging network server interconnection |
US8135657B2 (en) | 2000-09-25 | 2012-03-13 | Crossbeam Systems, Inc. | Systems and methods for processing data flows |
US8159961B1 (en) * | 2007-03-30 | 2012-04-17 | Amazon Technologies, Inc. | Load balancing utilizing adaptive thresholding |
US20120159499A1 (en) * | 2010-12-17 | 2012-06-21 | Verizon Patent And Licensing Inc. | Resource optimization |
WO2013049232A1 (en) * | 2011-09-29 | 2013-04-04 | Oracle International Corporation | System and method for supporting accurate load balancing in a transactional middleware machine environment |
US8468132B1 (en) | 2010-12-28 | 2013-06-18 | Amazon Technologies, Inc. | Data replication framework |
US8554762B1 (en) * | 2010-12-28 | 2013-10-08 | Amazon Technologies, Inc. | Data replication framework |
US20130297770A1 (en) * | 2012-05-02 | 2013-11-07 | Futurewei Technologies, Inc. | Intelligent Data Center Cluster Selection |
US8600821B2 (en) | 1999-05-11 | 2013-12-03 | Ipventure, Inc. | Webstore supporting multiple merchants |
US8601365B2 (en) | 2000-11-10 | 2013-12-03 | Ipventure, Inc. | Data transmission and rendering techniques implemented over a client-server system |
US8626333B2 (en) | 1999-05-11 | 2014-01-07 | Ipventure, Inc. | Method and system for order fulfillment in a distribution center |
US20140012808A1 (en) * | 2010-01-15 | 2014-01-09 | Ibm Corporation | Method and system for distributed task dispatch in a multi-application environment based on consensus |
US20140047104A1 (en) * | 2012-08-13 | 2014-02-13 | Verisign, Inc. | Systems and Methods for Load Balancing Using Predictive Routing |
US8713151B2 (en) * | 2010-03-05 | 2014-04-29 | Zte Corporation | Configuration method and system of complex network and configuration and management module of server resources |
US8751334B2 (en) | 2000-12-27 | 2014-06-10 | Ipventure, Inc. | Item substitution for unavailable items relating to a customer order |
US20140173042A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Framework Supporting Content Delivery With Delivery Services Network |
US20140172989A1 (en) * | 2012-12-14 | 2014-06-19 | Yigal Dan Rubinstein | Spam detection and prevention in a social networking system |
US20140214996A1 (en) * | 2013-01-29 | 2014-07-31 | Stg Interactive S.A. | Distributed Computing Architecture |
US8880428B2 (en) | 2001-03-19 | 2014-11-04 | Ipventure, Inc. | Restricted purchase of regulated items over a network |
US20140372588A1 (en) | 2011-12-14 | 2014-12-18 | Level 3 Communications, Llc | Request-Response Processing in a Content Delivery Network |
US20150263958A1 (en) * | 2014-03-17 | 2015-09-17 | Electronics And Telecommunications Research Institute | Load balancing apparatus and method |
US20150326650A1 (en) * | 2010-12-10 | 2015-11-12 | Salesforce.Com, Inc. | Systems and techniques for utilizing resource aware queues and/or service sharing in a multi-server environment |
US20150358988A1 (en) * | 2014-06-06 | 2015-12-10 | Industrial Technology Research Institute | Base station and scheduling method for wireless network |
US9294565B2 (en) | 2011-07-12 | 2016-03-22 | Microsoft Technology Licensing, Llc | Efficient data access on a shared data network |
US9449065B1 (en) | 2010-12-28 | 2016-09-20 | Amazon Technologies, Inc. | Data replication framework |
US9525696B2 (en) | 2000-09-25 | 2016-12-20 | Blue Coat Systems, Inc. | Systems and methods for processing data flows |
US9634918B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Invalidation sequencing in a content delivery framework |
US9800608B2 (en) | 2000-09-25 | 2017-10-24 | Symantec Corporation | Processing data flows with a data flow processor |
US20180332104A1 (en) * | 2009-12-10 | 2018-11-15 | Royal Bank Of Canada | Coordinated processing of data by networked computing resources |
US10198492B1 (en) | 2010-12-28 | 2019-02-05 | Amazon Technologies, Inc. | Data replication framework |
US20190089776A1 (en) * | 2001-09-28 | 2019-03-21 | Level 3 Communications, Llc | Multi-Tiered Server Network |
US10652087B2 (en) | 2012-12-13 | 2020-05-12 | Level 3 Communications, Llc | Content delivery framework having fill services |
US10701148B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having storage services |
US10701149B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having origin services |
US20200210230A1 (en) * | 2019-01-02 | 2020-07-02 | Mellanox Technologies, Ltd. | Multi-Processor Queuing Model |
US10791050B2 (en) | 2012-12-13 | 2020-09-29 | Level 3 Communications, Llc | Geographic location determination in a content delivery framework |
US10833794B2 (en) | 2018-12-14 | 2020-11-10 | Forgamers Inc. | Data transmission boosting system |
US11218536B2 (en) * | 2011-08-31 | 2022-01-04 | Metaswitch Networks Ltd | Processing data and operating a communications device |
US11368548B2 (en) | 2012-12-13 | 2022-06-21 | Level 3 Communications, Llc | Beacon services in a content delivery framework |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP2669798A1 (en) * | 2012-05-31 | 2013-12-04 | Alcatel Lucent | Load distributor, intra-cluster resource manager, inter-cluster resource manager, apparatus for processing base band signals, method and computer program for distributing load |
CN105007337A (en) * | 2015-08-20 | 2015-10-28 | 浪潮(北京)电子信息产业有限公司 | Cluster system load balancing method and system thereof |
WO2017066966A1 (en) * | 2015-10-22 | 2017-04-27 | Oracle International Corporation | System and method for providing mssq notifications in transactional processing environment |
WO2017066953A1 (en) | 2015-10-22 | 2017-04-27 | Oracle International Corporation | System and method for providing distributed caching in transactional processing environment |
Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4894846A (en) * | 1988-06-30 | 1990-01-16 | Digital Equipment Corporation | Method for maintaining a correct time in a distributed processing system |
US5774668A (en) * | 1995-06-07 | 1998-06-30 | Microsoft Corporation | System for on-line service in which gateway computer uses service map which includes loading condition of servers broadcasted by application servers for load balancing |
US5835724A (en) * | 1996-07-03 | 1998-11-10 | Electronic Data Systems Corporation | System and method for communication information using the internet that receives and maintains information concerning the client and generates and conveys the session data to the client |
US5918017A (en) * | 1996-08-23 | 1999-06-29 | Internatioinal Business Machines Corp. | System and method for providing dynamically alterable computer clusters for message routing |
US6003083A (en) * | 1998-02-19 | 1999-12-14 | International Business Machines Corporation | Workload management amongst server objects in a client/server network with distributed objects |
US6006259A (en) * | 1998-11-20 | 1999-12-21 | Network Alchemy, Inc. | Method and apparatus for an internet protocol (IP) network clustering system |
US6078960A (en) * | 1998-07-03 | 2000-06-20 | Acceleration Software International Corporation | Client-side load-balancing in client server network |
US6078943A (en) * | 1997-02-07 | 2000-06-20 | International Business Machines Corporation | Method and apparatus for dynamic interval-based load balancing |
US6119143A (en) * | 1997-05-22 | 2000-09-12 | International Business Machines Corporation | Computer system and method for load balancing with selective control |
US6128644A (en) * | 1998-03-04 | 2000-10-03 | Fujitsu Limited | Load distribution system for distributing load among plurality of servers on www system |
US6195680B1 (en) * | 1998-07-23 | 2001-02-27 | International Business Machines Corporation | Client-based dynamic switching of streaming servers for fault-tolerance and load balancing |
US6249801B1 (en) * | 1998-07-15 | 2001-06-19 | Radware Ltd. | Load balancing |
US6253230B1 (en) * | 1998-09-22 | 2001-06-26 | International Business Machines Corporation | Distributed scalable device for selecting a server from a server cluster and a switched path to the selected server |
US6324177B1 (en) * | 1997-05-02 | 2001-11-27 | Cisco Technology | Method and apparatus for managing connections based on a client IP address |
US6327622B1 (en) * | 1998-09-03 | 2001-12-04 | Sun Microsystems, Inc. | Load balancing in a network environment |
US6424992B2 (en) * | 1996-12-23 | 2002-07-23 | International Business Machines Corporation | Affinity-based router and routing method |
US6470394B1 (en) * | 1998-02-27 | 2002-10-22 | The Sabre Group, Inc. | Apparatus and method for data conversion and load balancing in a computer network |
US6760775B1 (en) * | 1999-03-05 | 2004-07-06 | At&T Corp. | System, method and apparatus for network service load and reliability management |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6128657A (en) * | 1996-02-14 | 2000-10-03 | Fujitsu Limited | Load sharing system |
US6092178A (en) * | 1998-09-03 | 2000-07-18 | Sun Microsystems, Inc. | System for responding to a resource request |
-
1999
- 1999-11-22 US US09/447,400 patent/US7062556B1/en not_active Expired - Fee Related
-
2000
- 2000-11-02 WO PCT/US2000/030334 patent/WO2001038972A1/en active Application Filing
Patent Citations (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4894846A (en) * | 1988-06-30 | 1990-01-16 | Digital Equipment Corporation | Method for maintaining a correct time in a distributed processing system |
US5774668A (en) * | 1995-06-07 | 1998-06-30 | Microsoft Corporation | System for on-line service in which gateway computer uses service map which includes loading condition of servers broadcasted by application servers for load balancing |
US5951694A (en) * | 1995-06-07 | 1999-09-14 | Microsoft Corporation | Method of redirecting a client service session to a second application server without interrupting the session by forwarding service-specific information to the second server |
US5835724A (en) * | 1996-07-03 | 1998-11-10 | Electronic Data Systems Corporation | System and method for communication information using the internet that receives and maintains information concerning the client and generates and conveys the session data to the client |
US5918017A (en) * | 1996-08-23 | 1999-06-29 | Internatioinal Business Machines Corp. | System and method for providing dynamically alterable computer clusters for message routing |
US6424992B2 (en) * | 1996-12-23 | 2002-07-23 | International Business Machines Corporation | Affinity-based router and routing method |
US6078943A (en) * | 1997-02-07 | 2000-06-20 | International Business Machines Corporation | Method and apparatus for dynamic interval-based load balancing |
US6324177B1 (en) * | 1997-05-02 | 2001-11-27 | Cisco Technology | Method and apparatus for managing connections based on a client IP address |
US6119143A (en) * | 1997-05-22 | 2000-09-12 | International Business Machines Corporation | Computer system and method for load balancing with selective control |
US6003083A (en) * | 1998-02-19 | 1999-12-14 | International Business Machines Corporation | Workload management amongst server objects in a client/server network with distributed objects |
US6470394B1 (en) * | 1998-02-27 | 2002-10-22 | The Sabre Group, Inc. | Apparatus and method for data conversion and load balancing in a computer network |
US6128644A (en) * | 1998-03-04 | 2000-10-03 | Fujitsu Limited | Load distribution system for distributing load among plurality of servers on www system |
US6078960A (en) * | 1998-07-03 | 2000-06-20 | Acceleration Software International Corporation | Client-side load-balancing in client server network |
US6249801B1 (en) * | 1998-07-15 | 2001-06-19 | Radware Ltd. | Load balancing |
US6195680B1 (en) * | 1998-07-23 | 2001-02-27 | International Business Machines Corporation | Client-based dynamic switching of streaming servers for fault-tolerance and load balancing |
US6327622B1 (en) * | 1998-09-03 | 2001-12-04 | Sun Microsystems, Inc. | Load balancing in a network environment |
US6253230B1 (en) * | 1998-09-22 | 2001-06-26 | International Business Machines Corporation | Distributed scalable device for selecting a server from a server cluster and a switched path to the selected server |
US6006259A (en) * | 1998-11-20 | 1999-12-21 | Network Alchemy, Inc. | Method and apparatus for an internet protocol (IP) network clustering system |
US6760775B1 (en) * | 1999-03-05 | 2004-07-06 | At&T Corp. | System, method and apparatus for network service load and reliability management |
Non-Patent Citations (4)
Title |
---|
"Classification of Load Distribution Algorithms", Reinhard Riedl and Lutz Richter, Department of Computer Science, University of Zurich, 1996 IEEE. |
"Load Distributing for Locally Distributed Systems", Niranjan G. Shivaratri, Phillip Krueger, and Mukesh Singhal, Ohio State University, Dec. 1992. |
"Resource Based Policies for Load Distribution", Kristian Paul Budendorfer, Victoria University of Wellington, Aug. 31, 1996. |
"The Sprite Network Operating System", John K. Ousterhout, Andrew R. Chereson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch, University of California at Berkeley, Feb. 1988. |
Cited By (283)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8600821B2 (en) | 1999-05-11 | 2013-12-03 | Ipventure, Inc. | Webstore supporting multiple merchants |
US9396451B2 (en) | 1999-05-11 | 2016-07-19 | June Ray Limited | Method and system for order fulfillment in a distribution center |
US9342808B2 (en) | 1999-05-11 | 2016-05-17 | June Ray Limited | Load balancing technique implemented in a data network device utilizing a data cache |
US9697547B2 (en) | 1999-05-11 | 2017-07-04 | June Ray Limited | Integrated online store |
US8635113B2 (en) | 1999-05-11 | 2014-01-21 | Ipventure, Inc. | Integrated online store |
US9865010B2 (en) | 1999-05-11 | 2018-01-09 | June Ray Limited | Online store product availability |
US8626333B2 (en) | 1999-05-11 | 2014-01-07 | Ipventure, Inc. | Method and system for order fulfillment in a distribution center |
US20010032232A1 (en) * | 2000-01-31 | 2001-10-18 | Zombek James M. | Messaging method and apparatus including a protocol stack that corresponds substantially to an open system interconnection (OSI) model and incorporates a simple network transport layer |
US20100268782A1 (en) * | 2000-01-31 | 2010-10-21 | Zombek James M | System and method for re-directing requests from browsers for communications over non-IP based networks |
US20020052968A1 (en) * | 2000-01-31 | 2002-05-02 | Rudy Bonefas | Messaging method and apparatus for routing messages in a client server environment over multiple wireless and wireline networks |
US8090856B1 (en) | 2000-01-31 | 2012-01-03 | Telecommunication Systems, Inc. | Intelligent messaging network server interconnection |
US8200829B2 (en) | 2000-01-31 | 2012-06-12 | Telecommunication Systems, Inc. | System and method for re-directing requests from browsers for communications over non-IP based networks |
US7689696B2 (en) | 2000-01-31 | 2010-03-30 | Telecommunication Systems, Inc. | System and method for re-directing requests from browsers for communications over non-IP based networks |
US9100241B2 (en) | 2000-01-31 | 2015-08-04 | Telecommunication Systems, Inc. | System and method for re-directing requests from browsers for communications over non-IP based networks |
US8578032B2 (en) | 2000-01-31 | 2013-11-05 | Telecommunication Systems, Inc. | System and method for re-directing requests from browsers for communication over non-IP based networks |
US7895256B2 (en) | 2000-01-31 | 2011-02-22 | Telecommunication Systems, Inc. | Open system interconnection (OSI) messaging |
US20060167972A1 (en) * | 2000-01-31 | 2006-07-27 | Zombek James M | System and method for re-directing requests from browsers for communications over non-IP based networks |
US7921225B2 (en) * | 2000-01-31 | 2011-04-05 | Telecommunication Systems, Inc. | Routing messages in a client server environment over multiple networks |
US8015160B2 (en) * | 2000-02-25 | 2011-09-06 | Fr. Chantou Co. Limited Liability Company | System and method for content management over network storage devices |
US20050114372A1 (en) * | 2000-02-25 | 2005-05-26 | Coile Brantley W. | System and method for content management over network storage devices |
US20050021862A1 (en) * | 2000-03-31 | 2005-01-27 | Dickens Coal Llc | Automatic selection of content-delivery provider using link mapping database |
US20010031641A1 (en) * | 2000-04-11 | 2001-10-18 | Dara Ung | Wireless chat automatic status tracking |
US10091335B2 (en) | 2000-05-10 | 2018-10-02 | June Ray Limited | Data transmission and rendering techniques by a device via a network |
US9413808B2 (en) | 2000-05-10 | 2016-08-09 | June Ray Limited | Data transmission and rendering techniques by a device via a network |
US20110238839A1 (en) * | 2000-09-25 | 2011-09-29 | Yevgeny Korsunsky | Network intrusion detection apparatus |
US20060010207A1 (en) * | 2000-09-25 | 2006-01-12 | Crossbeam Systems, Inc. | Network application apparatus |
US20110213869A1 (en) * | 2000-09-25 | 2011-09-01 | Yevgeny Korsunsky | Processing data flows with a data flow processor |
US20110214157A1 (en) * | 2000-09-25 | 2011-09-01 | Yevgeny Korsunsky | Securing a network with data flow processing |
US20110219035A1 (en) * | 2000-09-25 | 2011-09-08 | Yevgeny Korsunsky | Database security via data flow processing |
US20110231513A1 (en) * | 2000-09-25 | 2011-09-22 | Yevgeny Korsunsky | Application distribution control network apparatus |
US20060143499A1 (en) * | 2000-09-25 | 2006-06-29 | Crossbeam Systems, Inc. | Flow scheduling for network application |
US20110238783A1 (en) * | 2000-09-25 | 2011-09-29 | Yevgeny Korsunsky | Source-based data flow processing network apparatus |
US7836443B2 (en) | 2000-09-25 | 2010-11-16 | Crossbeam Systems, Inc. | Network application apparatus |
US9244739B2 (en) | 2000-09-25 | 2016-01-26 | Blue Coat Systems, Inc. | Applications processing in a network apparatus |
US9800608B2 (en) | 2000-09-25 | 2017-10-24 | Symantec Corporation | Processing data flows with a data flow processor |
US8046465B2 (en) * | 2000-09-25 | 2011-10-25 | Crossbeam Systems, Inc. | Flow scheduling for network application apparatus |
US20100042565A1 (en) * | 2000-09-25 | 2010-02-18 | Crossbeam Systems, Inc. | Mezzazine in-depth data analysis facility |
US9525696B2 (en) | 2000-09-25 | 2016-12-20 | Blue Coat Systems, Inc. | Systems and methods for processing data flows |
US8135657B2 (en) | 2000-09-25 | 2012-03-13 | Crossbeam Systems, Inc. | Systems and methods for processing data flows |
US8402540B2 (en) | 2000-09-25 | 2013-03-19 | Crossbeam Systems, Inc. | Systems and methods for processing data flows |
US20080162390A1 (en) * | 2000-09-25 | 2008-07-03 | Harsh Kapoor | Systems and methods for processing data flows |
US8601365B2 (en) | 2000-11-10 | 2013-12-03 | Ipventure, Inc. | Data transmission and rendering techniques implemented over a client-server system |
US20090187819A1 (en) * | 2000-11-13 | 2009-07-23 | Bonefas Rudy G | Method and system for deploying content to wireless devices |
US9418053B2 (en) | 2000-11-13 | 2016-08-16 | Zhigu Holdings Limited | Method and system for deploying content to wireless devices |
US8095663B2 (en) | 2000-11-13 | 2012-01-10 | TeleCommunication Stystems, Inc. | Method and system for deploying content to wireless devices |
US8751334B2 (en) | 2000-12-27 | 2014-06-10 | Ipventure, Inc. | Item substitution for unavailable items relating to a customer order |
US8880428B2 (en) | 2001-03-19 | 2014-11-04 | Ipventure, Inc. | Restricted purchase of regulated items over a network |
US20040087311A1 (en) * | 2001-03-28 | 2004-05-06 | Anders Haglund | Load distribution between nodes in communication networks |
US7751314B2 (en) * | 2001-03-28 | 2010-07-06 | Telefonaktiebolaget Lm Ericsson (Publ) | Load distribution between nodes in communication networks |
US9356877B1 (en) * | 2001-06-18 | 2016-05-31 | Open Invention Network, Llc | Intelligent switching of client packets among a group of servers |
US8656047B1 (en) | 2001-06-18 | 2014-02-18 | Open Invention Network, Llc | Intelligent switching of client packets among a group of servers |
US8122146B1 (en) | 2001-06-18 | 2012-02-21 | Open Invention Network, Llc | Intelligent switching of client packets among a group of servers |
US20090070489A1 (en) * | 2001-06-18 | 2009-03-12 | Open Invention Network, Llc | Content-aware application switch and methods thereof |
US9954785B1 (en) * | 2001-06-18 | 2018-04-24 | Open Invention Network Llc | Intelligent switching of client packets among a group of servers |
US9032090B1 (en) * | 2001-06-18 | 2015-05-12 | Open Invention Network, Llc | Intelligent switching of client packets among a group of servers |
US7937490B2 (en) * | 2001-06-18 | 2011-05-03 | Open Invention Network, Llc | Intelligent switching of client packets among a group of servers |
US20070088826A1 (en) * | 2001-07-26 | 2007-04-19 | Citrix Application Networking, Llc | Systems and Methods for Controlling the Number of Connections Established with a Server |
US20030023743A1 (en) * | 2001-07-26 | 2003-01-30 | Raphel Jose Kolencheril | System, method and computer program product to maximize server throughput while avoiding server overload by controlling the rate of establishing server-side net work connections |
US8799502B2 (en) | 2001-07-26 | 2014-08-05 | Citrix Systems, Inc. | Systems and methods for controlling the number of connections established with a server |
US20100262655A1 (en) * | 2001-07-26 | 2010-10-14 | Jose Kolencheril Raphel | System, Method and Computer Program Product to Maximize Server Throughput While Avoiding Server Overload by Controlling the Rate of Establishing Server-Side Network Connections |
US7774492B2 (en) * | 2001-07-26 | 2010-08-10 | Citrix Systems, Inc. | System, method and computer program product to maximize server throughput while avoiding server overload by controlling the rate of establishing server-side net work connections |
US8635363B2 (en) | 2001-07-26 | 2014-01-21 | Citrix Systems, Inc. | System, method and computer program product to maximize server throughput while avoiding server overload by controlling the rate of establishing server-side network connections |
US20190089776A1 (en) * | 2001-09-28 | 2019-03-21 | Level 3 Communications, Llc | Multi-Tiered Server Network |
US10911531B2 (en) * | 2001-09-28 | 2021-02-02 | Level 3 Communications, Llc | Multi-tiered server network |
US7707457B2 (en) | 2002-05-23 | 2010-04-27 | Exludus Technologies, Inc. | Completing an interrupted data replication operation |
US20050060608A1 (en) * | 2002-05-23 | 2005-03-17 | Benoit Marchand | Maximizing processor utilization and minimizing network bandwidth requirements in throughput compute clusters |
US20050216910A1 (en) * | 2002-05-23 | 2005-09-29 | Benoit Marchand | Increasing fault-tolerance and minimizing network bandwidth requirements in software installation modules |
US20050257220A1 (en) * | 2002-06-20 | 2005-11-17 | Mckee Paul F | Distributed computer |
US7937704B2 (en) * | 2002-06-20 | 2011-05-03 | British Telecommunications Public Limited Company | Distributed computer |
US7165103B2 (en) * | 2002-06-26 | 2007-01-16 | Microsoft Corporation | Method and system for matching network clients and servers under matching constraints |
US20040003066A1 (en) * | 2002-06-26 | 2004-01-01 | Microsoft Corporation | Method and system for matching network clients and servers under matching constraints |
US7783759B2 (en) * | 2002-12-10 | 2010-08-24 | International Business Machines Corporation | Methods and apparatus for dynamic allocation of servers to a plurality of customers to maximize the revenue of a server farm |
US20040111509A1 (en) * | 2002-12-10 | 2004-06-10 | International Business Machines Corporation | Methods and apparatus for dynamic allocation of servers to a plurality of customers to maximize the revenue of a server farm |
US8656022B2 (en) | 2002-12-10 | 2014-02-18 | International Business Machines Corporation | Methods and apparatus for dynamic allocation of servers to a plurality of customers to maximize the revenue of a server farm |
US20100228858A1 (en) * | 2002-12-10 | 2010-09-09 | International Business Machines Corporation | Methods and apparatus for dynamic allocation of servers to a plurality of customers to maximize the revenue of a server farm |
US20060117046A1 (en) * | 2002-12-31 | 2006-06-01 | Robertson Derrick D | Distributed storage network |
US7610333B2 (en) | 2002-12-31 | 2009-10-27 | British Telecommunications Plc | Method and apparatus for operating a computer network |
US20060149836A1 (en) * | 2002-12-31 | 2006-07-06 | Robertson Derrick D | Method and apparatus for operating a computer network |
US8463867B2 (en) | 2002-12-31 | 2013-06-11 | British Telecommunications Plc | Distributed storage network |
US20040202182A1 (en) * | 2003-02-12 | 2004-10-14 | Martin Lund | Method and system to provide blade server load balancing using spare link bandwidth |
US7835363B2 (en) * | 2003-02-12 | 2010-11-16 | Broadcom Corporation | Method and system to provide blade server load balancing using spare link bandwidth |
US7752262B2 (en) * | 2003-06-26 | 2010-07-06 | International Business Machines Corporation | Slow-dynamic load balancing system and computer-readable medium |
US20040267930A1 (en) * | 2003-06-26 | 2004-12-30 | International Business Machines Corporation | Slow-dynamic load balancing method and system |
US20090100133A1 (en) * | 2003-06-26 | 2009-04-16 | International Business Machines Corporation | Slow-Dynamic Load Balancing System and Computer-Readable Medium |
US7475108B2 (en) * | 2003-06-26 | 2009-01-06 | International Business Machines Corporation | Slow-dynamic load balancing method |
US20050038890A1 (en) * | 2003-08-11 | 2005-02-17 | Hitachi., Ltd. | Load distribution method and client-server system |
US20080209044A1 (en) * | 2003-11-06 | 2008-08-28 | International Business Machines Corporation | Load balancing of servers in a cluster |
US20050102676A1 (en) * | 2003-11-06 | 2005-05-12 | International Business Machines Corporation | Load balancing of servers in a cluster |
US8104042B2 (en) | 2003-11-06 | 2012-01-24 | International Business Machines Corporation | Load balancing of servers in a cluster |
US7389510B2 (en) * | 2003-11-06 | 2008-06-17 | International Business Machines Corporation | Load balancing of servers in a cluster |
US20050210472A1 (en) * | 2004-03-18 | 2005-09-22 | International Business Machines Corporation | Method and data processing system for per-chip thread queuing in a multi-processor system |
US7771276B2 (en) * | 2004-06-02 | 2010-08-10 | Wms Gaming Inc. | Method and apparatus for a gaming network architecture |
US20050282628A1 (en) * | 2004-06-02 | 2005-12-22 | Beatty John A | Method and apparatus for a gaming network architecture |
US20080059746A1 (en) * | 2004-06-07 | 2008-03-06 | Michael Fisher | Distributed storage network |
US20110213880A1 (en) * | 2004-06-28 | 2011-09-01 | Neuse Douglas M | System and method for performing capacity planning for enterprise applications |
US20140207951A1 (en) * | 2004-06-28 | 2014-07-24 | Ca, Inc. | System and method for performing capacity planning for enterprise applications |
US8296426B2 (en) * | 2004-06-28 | 2012-10-23 | Ca, Inc. | System and method for performing capacity planning for enterprise applications |
US8051171B2 (en) * | 2004-09-30 | 2011-11-01 | Alcatel Lucent | Control server that manages resource servers for selected balance of load |
US20060069780A1 (en) * | 2004-09-30 | 2006-03-30 | Batni Ramachendra P | Control server that manages resource servers for selected balance of load |
US8341266B2 (en) * | 2004-10-06 | 2012-12-25 | Hughes Network Systems, Llc | Method and system for load balancing over a set of communication channels |
US20060072452A1 (en) * | 2004-10-06 | 2006-04-06 | Olariu Gabriel L | Method and system for load balancing over a set of communication channels |
US7844691B2 (en) * | 2004-12-30 | 2010-11-30 | Xstor Systems, Inc. | Scalable distributed storage and delivery |
US8171125B2 (en) * | 2004-12-30 | 2012-05-01 | Xstor Systems, Inc. | Scalable distributed storage and delivery |
US20110072108A1 (en) * | 2004-12-30 | 2011-03-24 | Xstor Systems, Inc | Scalable distributed storage and delivery |
US20070198710A1 (en) * | 2004-12-30 | 2007-08-23 | Xstor Systems, Inc. | Scalable distributed storage and delivery |
US20060195894A1 (en) * | 2005-02-25 | 2006-08-31 | Microsoft Corporation | Windows remote debugger service |
US7748033B2 (en) * | 2005-02-25 | 2010-06-29 | Microsoft Corporation | Windows remote debugger service |
US20060212873A1 (en) * | 2005-03-15 | 2006-09-21 | Takashi Takahisa | Method and system for managing load balancing in data processing system |
US7712103B2 (en) * | 2005-03-15 | 2010-05-04 | Hitachi, Ltd. | Method and system for managing load balancing in data processing system |
US20060235972A1 (en) * | 2005-04-13 | 2006-10-19 | Nokia Corporation | System, network device, method, and computer program product for active load balancing using clustered nodes as authoritative domain name servers |
US7548945B2 (en) * | 2005-04-13 | 2009-06-16 | Nokia Corporation | System, network device, method, and computer program product for active load balancing using clustered nodes as authoritative domain name servers |
US20070192863A1 (en) * | 2005-07-01 | 2007-08-16 | Harsh Kapoor | Systems and methods for processing data flows |
US20080133518A1 (en) * | 2005-07-01 | 2008-06-05 | Harsh Kapoor | Systems and methods for processing data flows |
US20080134330A1 (en) * | 2005-07-01 | 2008-06-05 | Harsh Kapoor | Systems and methods for processing data flows |
US20080133517A1 (en) * | 2005-07-01 | 2008-06-05 | Harsh Kapoor | Systems and methods for processing data flows |
US8135836B2 (en) * | 2005-11-30 | 2012-03-13 | Alcatel Lucent | Tie resolution in application load level balancing |
US20070124431A1 (en) * | 2005-11-30 | 2007-05-31 | Ranjan Sharma | Tie resolution in application load level balancing |
US8015304B2 (en) | 2005-12-12 | 2011-09-06 | International Business Machines Corporation | Method to distribute speech resources in a media server |
US8140695B2 (en) * | 2005-12-12 | 2012-03-20 | International Business Machines Corporation | Load balancing and failover of distributed media resources in a media server |
US20070136469A1 (en) * | 2005-12-12 | 2007-06-14 | International Business Machines Corporation | Load Balancing and Failover of Distributed Media Resources in a Media Server |
US20070136414A1 (en) * | 2005-12-12 | 2007-06-14 | International Business Machines Corporation | Method to Distribute Speech Resources in a Media Server |
US8028039B1 (en) * | 2005-12-23 | 2011-09-27 | Reflexis Systems, Inc. | System and method for communicating data between wireless mobile hand-held computer and a back-end computer system |
US8360887B2 (en) | 2006-02-09 | 2013-01-29 | Wms Gaming Inc. | Wagering game server availability broadcast message system |
US20100029375A1 (en) * | 2006-02-09 | 2010-02-04 | Buchholz Dale R | Wagering game server availability broadcast message system |
US10567303B2 (en) | 2006-03-14 | 2020-02-18 | Amazon Technologies, Inc. | System and method for routing service requests |
US20090172191A1 (en) * | 2006-03-14 | 2009-07-02 | Dan Mihai Dumitriu | System and method for routing service requests |
US8396957B2 (en) | 2006-03-14 | 2013-03-12 | Amazon Technologies, Inc. | System and method for routing service requests |
US8805991B1 (en) | 2006-03-14 | 2014-08-12 | Amazon Technologies, Inc. | System and method for routing service requests |
US9692708B2 (en) | 2006-03-14 | 2017-06-27 | Amazon Technologies, Inc. | System and method for routing service requests |
US8037186B2 (en) * | 2006-03-14 | 2011-10-11 | Amazon Technologies, Inc. | System and method for routing service requests |
US20070276934A1 (en) * | 2006-05-25 | 2007-11-29 | Fuji Xerox Co., Ltd. | Networked queuing system and method for distributed collaborative clusters of services |
US7730186B2 (en) * | 2006-05-25 | 2010-06-01 | Fuji Xerox Co., Ltd. | Networked queuing system and method for distributed collborative clusters of services |
US20080025620A1 (en) * | 2006-07-28 | 2008-01-31 | Fujifilm Corporation | Data compression apparatus and data compressing program storage medium |
US20080052712A1 (en) * | 2006-08-23 | 2008-02-28 | International Business Machines Corporation | Method and system for selecting optimal clusters for batch job submissions |
US8255457B2 (en) * | 2006-09-01 | 2012-08-28 | Microsoft Corporation | Adaptive content load balancing |
US8806045B2 (en) | 2006-09-01 | 2014-08-12 | Microsoft Corporation | Predictive popular content replication |
US20080059721A1 (en) * | 2006-09-01 | 2008-03-06 | Microsoft Corporation | Predictive Popular Content Replication |
US20080059565A1 (en) * | 2006-09-01 | 2008-03-06 | Microsoft Corporation | Adaptive Content Load Balancing |
US20080172419A1 (en) * | 2006-12-29 | 2008-07-17 | Anita Richards | Managing events in a computing environment |
US9524296B2 (en) * | 2006-12-29 | 2016-12-20 | Teradata Us, Inc. | Managing events in a computing environment |
US20080178003A1 (en) * | 2007-01-18 | 2008-07-24 | Matsushita Electric Works, Ltd. | Systems and methods for determining a time delay for sending a key update request |
US8588420B2 (en) * | 2007-01-18 | 2013-11-19 | Panasonic Corporation | Systems and methods for determining a time delay for sending a key update request |
US8159961B1 (en) * | 2007-03-30 | 2012-04-17 | Amazon Technologies, Inc. | Load balancing utilizing adaptive thresholding |
US20140222895A1 (en) * | 2007-03-30 | 2014-08-07 | Amazon Technologies, Inc. | Load balancing utilizing adaptive thresholding |
US8576710B2 (en) | 2007-03-30 | 2013-11-05 | Amazon Technologies, Inc. | Load balancing utilizing adaptive thresholding |
US9456056B2 (en) * | 2007-03-30 | 2016-09-27 | Amazon Technologies, Inc. | Load balancing utilizing adaptive thresholding |
US8103775B2 (en) * | 2008-03-13 | 2012-01-24 | Harris Corporation | System and method for distributing a client load from a failed server among remaining servers in a storage area network (SAN) |
US20090234949A1 (en) * | 2008-03-13 | 2009-09-17 | Harris Corporation, Corporation Of The State Of Delaware | System and method for distributing a client load from a failed server among remaining servers in a storage area network (san) |
US20100057880A1 (en) * | 2008-08-27 | 2010-03-04 | International Business Machines Corporation | Method of Routing Messages to Multiple Consumers |
US8180823B2 (en) * | 2008-08-27 | 2012-05-15 | International Business Machines Corporation | Method of routing messages to multiple consumers |
US10193770B2 (en) * | 2008-09-05 | 2019-01-29 | Pulse Secure, Llc | Supplying data files to requesting stations |
US20100070625A1 (en) * | 2008-09-05 | 2010-03-18 | Zeus Technology Limited | Supplying Data Files to Requesting Stations |
US20100077255A1 (en) * | 2008-09-22 | 2010-03-25 | International Business Machines Corporation | Catalog recovery through system management facilities reverse transversal |
US20100082762A1 (en) * | 2008-09-29 | 2010-04-01 | Fujitsu Limited | Message tying processing method and apparatus |
US8539035B2 (en) * | 2008-09-29 | 2013-09-17 | Fujitsu Limited | Message tying processing method and apparatus |
US20100115327A1 (en) * | 2008-11-04 | 2010-05-06 | Verizon Corporate Resources Group Llc | Congestion control method for session based network traffic |
US8793529B2 (en) * | 2008-11-04 | 2014-07-29 | Verizon Patent And Licensing Inc. | Congestion control method for session based network traffic |
US8108503B2 (en) | 2009-01-14 | 2012-01-31 | International Business Machines Corporation | Dynamic load balancing between chassis in a blade center |
US20100180025A1 (en) * | 2009-01-14 | 2010-07-15 | International Business Machines Corporation | Dynamic load balancing between chassis in a blade center |
US20100185766A1 (en) * | 2009-01-16 | 2010-07-22 | Fujitsu Limited | Load distribution apparatus, load distribution method, and storage medium |
US8539077B2 (en) * | 2009-01-16 | 2013-09-17 | Fujitsu Limited | Load distribution apparatus, load distribution method, and storage medium |
US20100217866A1 (en) * | 2009-02-24 | 2010-08-26 | Thyagarajan Nandagopal | Load Balancing in a Multiple Server System Hosting an Array of Services |
US9122537B2 (en) * | 2009-10-30 | 2015-09-01 | Cisco Technology, Inc. | Balancing server load according to availability of physical resources based on the detection of out-of-sequence packets |
US20110106949A1 (en) * | 2009-10-30 | 2011-05-05 | Cisco Technology, Inc. | Balancing Server Load According To Availability Of Physical Resources |
US20180332104A1 (en) * | 2009-12-10 | 2018-11-15 | Royal Bank Of Canada | Coordinated processing of data by networked computing resources |
US10623478B2 (en) * | 2009-12-10 | 2020-04-14 | Royal Bank Of Canada | Coordinated processing of data by networked computing resources |
US11799947B2 (en) | 2009-12-10 | 2023-10-24 | Royal Bank Of Canada | Coordinated processing of data by networked computing resources |
US9880878B2 (en) | 2010-01-15 | 2018-01-30 | International Business Machines Corporation | Method and system for distributed task dispatch in a multi-application environment based on consensus |
US20140012808A1 (en) * | 2010-01-15 | 2014-01-09 | Ibm Corporation | Method and system for distributed task dispatch in a multi-application environment based on consensus |
US9665400B2 (en) * | 2010-01-15 | 2017-05-30 | International Business Machines Corporation | Method and system for distributed task dispatch in a multi-application environment based on consensus |
US8713151B2 (en) * | 2010-03-05 | 2014-04-29 | Zte Corporation | Configuration method and system of complex network and configuration and management module of server resources |
US20110282980A1 (en) * | 2010-05-11 | 2011-11-17 | Udaya Kumar | Dynamic protection of a resource during sudden surges in traffic |
US10192169B2 (en) | 2010-12-10 | 2019-01-29 | Salesforce.Com, Inc. | Methods and systems for making effective use of system resources |
US11888605B2 (en) | 2010-12-10 | 2024-01-30 | Salesforce, Inc. | Methods and systems for making effective use of system resources |
US11153371B2 (en) | 2010-12-10 | 2021-10-19 | Salesforce.Com, Inc. | Systems and techniques for utilizing resource aware queues and/or service sharing in a multi-server environment |
US20160080273A1 (en) * | 2010-12-10 | 2016-03-17 | Salesforce.Com, Inc. | Systems and techniques for utilizing resource aware queues and/or service sharing in a multi-server environment |
US20150326650A1 (en) * | 2010-12-10 | 2015-11-12 | Salesforce.Com, Inc. | Systems and techniques for utilizing resource aware queues and/or service sharing in a multi-server environment |
US10452997B2 (en) * | 2010-12-10 | 2019-10-22 | Salesforce.Com | Systems and techniques for utilizing resource aware queues and/or service sharing in a multi-server environment |
US10762435B2 (en) * | 2010-12-10 | 2020-09-01 | Salesforce.Com, Inc. | Systems and techniques for utilizing resource aware queues and/or service sharing in a multi-server environment |
US11496555B2 (en) | 2010-12-10 | 2022-11-08 | Salesforce.Com, Inc. | Methods and systems for making effective use of system resources |
US10810514B2 (en) | 2010-12-10 | 2020-10-20 | Salesforce.Com, Inc. | Methods and systems for making effective use of system resources |
US20120159499A1 (en) * | 2010-12-17 | 2012-06-21 | Verizon Patent And Licensing Inc. | Resource optimization |
US10198492B1 (en) | 2010-12-28 | 2019-02-05 | Amazon Technologies, Inc. | Data replication framework |
US9268835B2 (en) | 2010-12-28 | 2016-02-23 | Amazon Technologies, Inc. | Data replication framework |
US8468132B1 (en) | 2010-12-28 | 2013-06-18 | Amazon Technologies, Inc. | Data replication framework |
US9734199B1 (en) | 2010-12-28 | 2017-08-15 | Amazon Technologies, Inc. | Data replication framework |
US8554762B1 (en) * | 2010-12-28 | 2013-10-08 | Amazon Technologies, Inc. | Data replication framework |
US10990609B2 (en) | 2010-12-28 | 2021-04-27 | Amazon Technologies, Inc. | Data replication framework |
US9449065B1 (en) | 2010-12-28 | 2016-09-20 | Amazon Technologies, Inc. | Data replication framework |
US9294565B2 (en) | 2011-07-12 | 2016-03-22 | Microsoft Technology Licensing, Llc | Efficient data access on a shared data network |
US11218536B2 (en) * | 2011-08-31 | 2022-01-04 | Metaswitch Networks Ltd | Processing data and operating a communications device |
CN103842964A (en) * | 2011-09-29 | 2014-06-04 | 甲骨文国际公司 | System and method for supporting accurate load balancing in a transactional middleware machine environment |
US8898271B2 (en) * | 2011-09-29 | 2014-11-25 | Oracle International Corporation | System and method for supporting accurate load balancing in a transactional middleware machine environment |
KR20140074320A (en) * | 2011-09-29 | 2014-06-17 | 오라클 인터내셔날 코포레이션 | System and method for supporting accurate load balancing in a transactional middleware machine environment |
WO2013049232A1 (en) * | 2011-09-29 | 2013-04-04 | Oracle International Corporation | System and method for supporting accurate load balancing in a transactional middleware machine environment |
US20130086238A1 (en) * | 2011-09-29 | 2013-04-04 | Oracle International Corporation | System and method for supporting accurate load balancing in a transactional middleware machine environment |
KR101987960B1 (en) * | 2011-09-29 | 2019-09-30 | 오라클 인터내셔날 코포레이션 | System and method for supporting accurate load balancing in a transactional middleware machine environment |
CN103842964B (en) * | 2011-09-29 | 2017-06-13 | 甲骨文国际公司 | The system and method for accurate load balance is supported in transaction middleware machine environment |
US20140372588A1 (en) | 2011-12-14 | 2014-12-18 | Level 3 Communications, Llc | Request-Response Processing in a Content Delivery Network |
US11838385B2 (en) | 2011-12-14 | 2023-12-05 | Level 3 Communications, Llc | Control in a content delivery network |
US10187491B2 (en) | 2011-12-14 | 2019-01-22 | Level 3 Communications, Llc | Request-response processing an a content delivery network |
US10841398B2 (en) | 2011-12-14 | 2020-11-17 | Level 3 Communications, Llc | Control in a content delivery network |
US9451045B2 (en) | 2011-12-14 | 2016-09-20 | Level 3 Communications, Llc | Content delivery network |
US9456053B2 (en) | 2011-12-14 | 2016-09-27 | Level 3 Communications, Llc | Content delivery network |
US11218566B2 (en) | 2011-12-14 | 2022-01-04 | Level 3 Communications, Llc | Control in a content delivery network |
US9516136B2 (en) | 2011-12-14 | 2016-12-06 | Level 3 Communications, Llc | Customer-specific request-response processing in a content delivery network |
US9389920B2 (en) * | 2012-05-02 | 2016-07-12 | Futurewei Technologies, Inc. | Intelligent data center cluster selection |
US20130297770A1 (en) * | 2012-05-02 | 2013-11-07 | Futurewei Technologies, Inc. | Intelligent Data Center Cluster Selection |
US10652318B2 (en) * | 2012-08-13 | 2020-05-12 | Verisign, Inc. | Systems and methods for load balancing using predictive routing |
US20140047104A1 (en) * | 2012-08-13 | 2014-02-13 | Verisign, Inc. | Systems and Methods for Load Balancing Using Predictive Routing |
US9634904B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Framework supporting content delivery with hybrid content delivery services |
US9628344B2 (en) * | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Framework supporting content delivery with reducer services network |
US9667506B2 (en) | 2012-12-13 | 2017-05-30 | Level 3 Communications, Llc | Multi-level peering in a content delivery framework |
US9660874B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with delivery services having dynamically configurable log information |
US9660876B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Collector mechanisms in a content delivery network |
US9686148B2 (en) | 2012-12-13 | 2017-06-20 | Level 3 Communications, Llc | Responsibility-based cache peering |
US20140173131A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Responsibility-based request processing |
US20140173042A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Framework Supporting Content Delivery With Delivery Services Network |
US9705754B2 (en) | 2012-12-13 | 2017-07-11 | Level 3 Communications, Llc | Devices and methods supporting content delivery with rendezvous services |
US9722882B2 (en) | 2012-12-13 | 2017-08-01 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with provisioning |
US9722883B2 (en) | 2012-12-13 | 2017-08-01 | Level 3 Communications, Llc | Responsibility-based peering |
US9722884B2 (en) | 2012-12-13 | 2017-08-01 | Level 3 Communications, Llc | Event stream collector systems, methods, and devices |
US9661046B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services |
US9749191B2 (en) | 2012-12-13 | 2017-08-29 | Level 3 Communications, Llc | Layered request processing with redirection and delegation in a content delivery network (CDN) |
US9749190B2 (en) | 2012-12-13 | 2017-08-29 | Level 3 Communications, Llc | Maintaining invalidation information |
US9749192B2 (en) | 2012-12-13 | 2017-08-29 | Level 3 Communications, Llc | Dynamic topology transitions in a content delivery framework |
US9755914B2 (en) | 2012-12-13 | 2017-09-05 | Level 3 Communications, Llc | Request processing in a content delivery network |
US9787551B2 (en) * | 2012-12-13 | 2017-10-10 | Level 3 Communications, Llc | Responsibility-based request processing |
US9654353B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Framework supporting content delivery with rendezvous services network |
US9819554B2 (en) | 2012-12-13 | 2017-11-14 | Level 3 Communications, Llc | Invalidation in a content delivery framework |
US9847917B2 (en) | 2012-12-13 | 2017-12-19 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback |
US20150180724A1 (en) * | 2012-12-13 | 2015-06-25 | Level 3 Communications, Llc | Dynamic fill target selection in a content delivery framework |
US9654355B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Framework supporting content delivery with adaptation services |
US9654354B2 (en) * | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Framework supporting content delivery with delivery services network |
US9887885B2 (en) * | 2012-12-13 | 2018-02-06 | Level 3 Communications, Llc | Dynamic fill target selection in a content delivery framework |
US9654356B2 (en) | 2012-12-13 | 2017-05-16 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services |
US11368548B2 (en) | 2012-12-13 | 2022-06-21 | Level 3 Communications, Llc | Beacon services in a content delivery framework |
US9647900B2 (en) | 2012-12-13 | 2017-05-09 | Level 3 Communications, Llc | Devices and methods supporting content delivery with delivery services |
US9647901B2 (en) | 2012-12-13 | 2017-05-09 | Level 3 Communications, Llc | Configuring a content delivery network (CDN) |
US10135697B2 (en) | 2012-12-13 | 2018-11-20 | Level 3 Communications, Llc | Multi-level peering in a content delivery framework |
US10142191B2 (en) | 2012-12-13 | 2018-11-27 | Level 3 Communications, Llc | Content delivery framework with autonomous CDN partitioned into multiple virtual CDNs |
US9647899B2 (en) | 2012-12-13 | 2017-05-09 | Level 3 Communications, Llc | Framework supporting content delivery with content delivery services |
US9641402B2 (en) | 2012-12-13 | 2017-05-02 | Level 3 Communications, Llc | Configuring a content delivery network (CDN) |
US9641401B2 (en) | 2012-12-13 | 2017-05-02 | Level 3 Communications, Llc | Framework supporting content delivery with content delivery services |
US9634905B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Invalidation systems, methods, and devices |
US9634918B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Invalidation sequencing in a content delivery framework |
US20140173039A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Framework Supporting Content Delivery With Reducer Services Network |
US9634907B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback |
US20140173040A1 (en) * | 2012-12-13 | 2014-06-19 | Level 3 Communications, Llc | Framework Supporting Content Delivery With Collector Services Network |
US9634906B2 (en) | 2012-12-13 | 2017-04-25 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback |
US10608894B2 (en) | 2012-12-13 | 2020-03-31 | Level 3 Communications, Llc | Systems, methods, and devices for gradual invalidation of resources |
US9628342B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Content delivery framework |
US10652087B2 (en) | 2012-12-13 | 2020-05-12 | Level 3 Communications, Llc | Content delivery framework having fill services |
US9628347B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Layered request processing in a content delivery network (CDN) |
US10701148B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having storage services |
US10700945B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Role-specific sub-networks in a content delivery framework |
US10701149B2 (en) | 2012-12-13 | 2020-06-30 | Level 3 Communications, Llc | Content delivery framework having origin services |
US11121936B2 (en) | 2012-12-13 | 2021-09-14 | Level 3 Communications, Llc | Rendezvous optimization in a content delivery framework |
US10708145B2 (en) | 2012-12-13 | 2020-07-07 | Level 3 Communications, Llc | Devices and methods supporting content delivery with adaptation services with feedback from health service |
US10742521B2 (en) | 2012-12-13 | 2020-08-11 | Level 3 Communications, Llc | Configuration and control in content delivery framework |
US9628345B2 (en) * | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Framework supporting content delivery with collector services network |
US10791050B2 (en) | 2012-12-13 | 2020-09-29 | Level 3 Communications, Llc | Geographic location determination in a content delivery framework |
US9628343B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Content delivery framework with dynamic service network topologies |
US10826793B2 (en) | 2012-12-13 | 2020-11-03 | Level 3 Communications, Llc | Verification and auditing in a content delivery framework |
US10992547B2 (en) | 2012-12-13 | 2021-04-27 | Level 3 Communications, Llc | Rendezvous systems, methods, and devices |
US10841177B2 (en) | 2012-12-13 | 2020-11-17 | Level 3 Communications, Llc | Content delivery framework having autonomous CDN partitioned into multiple virtual CDNs to implement CDN interconnection, delegation, and federation |
US9660875B2 (en) | 2012-12-13 | 2017-05-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with rendezvous services having dynamically configurable log information |
US10862769B2 (en) | 2012-12-13 | 2020-12-08 | Level 3 Communications, Llc | Collector mechanisms in a content delivery network |
US9628346B2 (en) | 2012-12-13 | 2017-04-18 | Level 3 Communications, Llc | Devices and methods supporting content delivery with reducer services |
US10931541B2 (en) | 2012-12-13 | 2021-02-23 | Level 3 Communications, Llc | Devices and methods supporting content delivery with dynamically configurable log information |
US10554601B2 (en) | 2012-12-14 | 2020-02-04 | Facebook, Inc. | Spam detection and prevention in a social networking system |
US9537814B2 (en) * | 2012-12-14 | 2017-01-03 | Facebook, Inc. | Spam detection and prevention in a social networking system |
US20140172989A1 (en) * | 2012-12-14 | 2014-06-19 | Yigal Dan Rubinstein | Spam detection and prevention in a social networking system |
US20140214996A1 (en) * | 2013-01-29 | 2014-07-31 | Stg Interactive S.A. | Distributed Computing Architecture |
US9860192B2 (en) | 2013-01-29 | 2018-01-02 | Stg Interactive, S.A. | Distributed computing architecture |
US9313087B2 (en) * | 2013-01-29 | 2016-04-12 | Stg Interactive, S.A. | Distributed computing architecture |
US20150263958A1 (en) * | 2014-03-17 | 2015-09-17 | Electronics And Telecommunications Research Institute | Load balancing apparatus and method |
US20150358988A1 (en) * | 2014-06-06 | 2015-12-10 | Industrial Technology Research Institute | Base station and scheduling method for wireless network |
US9999098B2 (en) * | 2014-06-06 | 2018-06-12 | Industrial Technology Research Institute | Base station and scheduling method for wireless network |
TWI735829B (en) * | 2018-12-14 | 2021-08-11 | 就肆電競股份有限公司 | Data transmission boost system |
US10833794B2 (en) | 2018-12-14 | 2020-11-10 | Forgamers Inc. | Data transmission boosting system |
US20200210230A1 (en) * | 2019-01-02 | 2020-07-02 | Mellanox Technologies, Ltd. | Multi-Processor Queuing Model |
US11182205B2 (en) * | 2019-01-02 | 2021-11-23 | Mellanox Technologies, Ltd. | Multi-processor queuing model |
Also Published As
Publication number | Publication date |
---|---|
WO2001038972A1 (en) | 2001-05-31 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7062556B1 (en) | Load balancing method in a communication network | |
US10567303B2 (en) | System and method for routing service requests | |
CN101167054B (en) | Methods and apparatus for selective workload off-loading across multiple data centers | |
Zhang et al. | Workload-aware load balancing for clustered web servers | |
US7062768B2 (en) | Dynamic load-distributed computer system using estimated expansion ratios and load-distributing method therefor | |
US7773522B2 (en) | Methods, apparatus and computer programs for managing performance and resource utilization within cluster-based systems | |
EP0822494B1 (en) | Load balancing method and apparatus | |
US5881238A (en) | System for assignment of work requests by identifying servers in a multisystem complex having a minimum predefined capacity utilization at lowest importance level | |
US5031089A (en) | Dynamic resource allocation scheme for distributed heterogeneous computer systems | |
US7243351B2 (en) | System and method for task scheduling based upon the classification value and probability | |
US20050055694A1 (en) | Dynamic load balancing resource allocation | |
US20070143460A1 (en) | Load-balancing metrics for adaptive dispatching of long asynchronous network requests | |
US20010034752A1 (en) | Method and system for symmetrically distributed adaptive matching of partners of mutual interest in a computer network | |
WO2010100859A1 (en) | Distributed system | |
Krueger et al. | An adaptive load balancing algorithm for a multicomputer | |
JP4265377B2 (en) | Load balancing method, apparatus, system, and program | |
Soundarabai et al. | Comparative study on load balancing techniques in distributed systems | |
Lu et al. | On the performance-driven load distribution for heterogeneous computational grids | |
Vashistha et al. | Comparative study of load balancing algorithms | |
Saravanakumar et al. | A novel load balancing algorithm for computational grid | |
Chatterjee et al. | A new clustered load balancing approach for distributed systems | |
Lu et al. | An efficient load balancing algorithm for heterogeneous grid systems considering desirability of grid sites | |
Lu et al. | Towards decentralized load balancing in a computational grid environment | |
Hanamakkanavar et al. | Load balancing in distributed systems: a survey | |
Fu et al. | Task assignment strategy for overloaded systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHEN, DAVID T.;FLEMING, PHILIP J.;REEL/FRAME:010402/0228Effective date: 19991122 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034310/0001Effective date: 20141028 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.) |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.) |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20180613 |