CN115943375A - Privacy preserving cross-domain experimental group partitioning and monitoring - Google Patents
Privacy preserving cross-domain experimental group partitioning and monitoring Download PDFInfo
- Publication number
- CN115943375A CN115943375A CN202280004199.8A CN202280004199A CN115943375A CN 115943375 A CN115943375 A CN 115943375A CN 202280004199 A CN202280004199 A CN 202280004199A CN 115943375 A CN115943375 A CN 115943375A
- Authority
- CN
- China
- Prior art keywords
- digital component
- digital
- application
- server
- secret share
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012544 monitoring process Methods 0.000 title claims abstract description 19
- 238000000638 solvent extraction Methods 0.000 title description 11
- 238000000034 method Methods 0.000 claims abstract description 230
- 230000008569 process Effects 0.000 claims abstract description 179
- 238000002474 experimental method Methods 0.000 claims abstract description 124
- 230000004044 response Effects 0.000 claims abstract description 82
- 238000003860 storage Methods 0.000 claims abstract description 30
- 238000012797 qualification Methods 0.000 claims description 46
- 230000015654 memory Effects 0.000 claims description 14
- 238000012360 testing method Methods 0.000 claims description 10
- 238000013401 experimental design Methods 0.000 claims description 9
- 238000004590 computer program Methods 0.000 abstract description 13
- 101710165590 Mitochondrial pyruvate carrier 1 Proteins 0.000 description 93
- 102100024828 Mitochondrial pyruvate carrier 1 Human genes 0.000 description 93
- 101710101695 Probable mitochondrial pyruvate carrier 1 Proteins 0.000 description 93
- 101710165595 Mitochondrial pyruvate carrier 2 Proteins 0.000 description 84
- 102100025031 Mitochondrial pyruvate carrier 2 Human genes 0.000 description 84
- 101710101698 Probable mitochondrial pyruvate carrier 2 Proteins 0.000 description 84
- 230000006870 function Effects 0.000 description 26
- 238000012545 processing Methods 0.000 description 22
- 238000009826 distribution Methods 0.000 description 18
- 230000000694 effects Effects 0.000 description 16
- 230000001186 cumulative effect Effects 0.000 description 14
- 238000005259 measurement Methods 0.000 description 13
- 238000004422 calculation algorithm Methods 0.000 description 12
- 239000000654 additive Substances 0.000 description 11
- 230000000996 additive effect Effects 0.000 description 11
- 238000004364 calculation method Methods 0.000 description 11
- 235000014510 cooky Nutrition 0.000 description 11
- 238000010586 diagram Methods 0.000 description 11
- 230000007246 mechanism Effects 0.000 description 10
- 238000004891 communication Methods 0.000 description 9
- 238000013461 design Methods 0.000 description 9
- 230000009471 action Effects 0.000 description 6
- 230000001143 conditioned effect Effects 0.000 description 6
- 230000003993 interaction Effects 0.000 description 6
- 238000011282 treatment Methods 0.000 description 6
- 238000004458 analytical method Methods 0.000 description 5
- 230000008859 change Effects 0.000 description 5
- 230000008901 benefit Effects 0.000 description 4
- 230000033001 locomotion Effects 0.000 description 4
- 238000009877 rendering Methods 0.000 description 4
- 230000002776 aggregation Effects 0.000 description 3
- 238000004220 aggregation Methods 0.000 description 3
- 238000006243 chemical reaction Methods 0.000 description 3
- 239000002131 composite material Substances 0.000 description 3
- 235000019800 disodium phosphate Nutrition 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 238000003491 array Methods 0.000 description 2
- 230000009286 beneficial effect Effects 0.000 description 2
- ZYXYTGQFPZEUFX-UHFFFAOYSA-N benzpyrimoxan Chemical compound O1C(OCCC1)C=1C(=NC=NC=1)OCC1=CC=C(C=C1)C(F)(F)F ZYXYTGQFPZEUFX-UHFFFAOYSA-N 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000001010 compromised effect Effects 0.000 description 2
- 238000010276 construction Methods 0.000 description 2
- 238000011156 evaluation Methods 0.000 description 2
- 238000005242 forging Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 230000002085 persistent effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 239000013589 supplement Substances 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 239000013598 vector Substances 0.000 description 2
- 230000006978 adaptation Effects 0.000 description 1
- 230000035045 associative learning Effects 0.000 description 1
- 230000000903 blocking effect Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000010413 gardening Methods 0.000 description 1
- 239000011521 glass Substances 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000014759 maintenance of location Effects 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 239000000203 mixture Substances 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 238000004886 process control Methods 0.000 description 1
- 230000001737 promoting effect Effects 0.000 description 1
- 238000011160 research Methods 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 230000008685 targeting Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
- G06F21/6254—Protecting personal data, e.g. for financial or medical purposes by anonymising data, e.g. decorrelating personal data from the owner's identification
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3236—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions
- H04L9/3242—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions involving keyed hash functions, e.g. message authentication codes [MACs], CBC-MAC or HMAC
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/42—Anonymization, e.g. involving pseudonyms
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, are described for privacy preserving cross-domain experimental monitoring. In one aspect, a method comprises: receiving, by a first server of the MPC system, a request for digital content that includes a first secret share of an application instance identifier that identifies an application instance associated with the device. The first server cooperates with a second server of the secure MPC system to perform a privacy preserving selection process to select a winning digital component from a set of digital components. Each digital component has a corresponding unique experiment identifier and unique control identifier. A first secret share representing the winning digital component is generated. Generating a response, and the response includes the first secret share of the selection result and data representing whether the application is in an experimental group or a control group for each digital component.
Description
Technical Field
This specification relates to data processing, encryption, and privacy preserving web activity analysis.
Background
Persistent identifiers, which can uniquely identify users across different experiments, domains, and requests, allow experiments to be conducted using groups of users that are always exposed to processing or retained as part of control. However, existing monitoring mechanisms, such as cookies, are typically used as persistent identifiers and can be linked to a single user and information about the user. Such vulnerabilities can make users feel that they are too easily identified and their information is too easily compromised. Further, cookies may provide more information than a user wishes to share and are associated with a particular content provider, owner, or distributor.
Disclosure of Invention
The enhancement of online user privacy has led many browser developers to change the way user data is handled. For example, some browsers no longer support some types of cookies, but overriding third party cookies may result in less stable results from experiments. The described systems and methods allow real-time experimentation by providing different forms of content to users across different domains and locations in a network, even if cookies are not available. The described identifiers provide a privacy protection mechanism to allow cross-domain experimental group partitioning and monitoring by allowing the system conducting the experiment to consistently identify whether an application is part of an experimental group or a control group in the experiment, thus providing accurate experimental results across different experiments and domains.
In general, one innovative aspect of the subject matter described in this specification can be embodiment in a method for privacy preserving cross-domain experimental monitoring, the method comprising: receiving, by a first server of a secure multi-party computing (MPC) system, a request for digital content from an application on a user device, wherein the request includes a first secret share (secret share) that identifies an application instance associated with the device or an application instance identifier of the device itself; in response to receiving the request and by a first server of the secure MPC system: in cooperation with a second server of the secure MPC system, performing a privacy protection selection process to select a first winning digital component from the set of digital components, wherein each digital component has a corresponding (i) unique experiment identifier and (ii) unique control identifier, the performing the privacy protection selection process including, for each digital component in the set of digital components, cooperating with the second server and determining, based on the set of qualification rules, a first secret share of a candidate parameter that represents whether the digital component is a qualified candidate for selection in the privacy protection selection process, and cooperating with the second server and determining, based on the first secret share of the application instance identifier and a corresponding first secret share of the candidate parameter value, a secret share of the experimental parameter that represents whether the application is in the experimental group of digital components. The method comprises the following steps: generating a first secret share representing a selection result of the first winning digital component based on the first secret share of the candidate parameter of each digital component and the selection value of each digital component; generating a response to the digital content request, the response comprising: selecting a first secret share of the result, and for each of the one or more digital components including the first winning digital component, data representing whether the application is in an experimental group of digital components or a control group of digital components; and transmitting, by the first server of the secure MPC system, a response to the request for digital content to an application on the user device.
In some embodiments, the data indicating whether the application is in the experimental group for the digital component or the control group for the digital component is represented by a bloom filter. In some embodiments, performing the privacy protection selection process to select the first winning digital component includes, for each digital component in the set of digital components, adding to the bloom filter a corresponding (i) unique experiment identifier if the application is in the experiment group, or (ii) unique control identifier if the application is in the control group.
In some implementations, determining whether the application is part of a control group or part of an experimental group for each digital component includes determining, for each experiment in the set of experiments associated with the digital component, whether the application is part of a control group or part of an experimental group for each digital component.
In some embodiments, the set of qualification rules includes two or more qualification rules, the one or more parameters of the first qualification rule are determined based on an experimental design, the experimental design is based on a number of mutually orthogonal latin squares of a particular size, and the first qualification rule specifies a first range of values for the one or more parameters. In some embodiments, the method includes updating one or more parameters of the first qualification rule based on the experimental design to specify a second range of values for the one or more parameters, and performing, by the first server of the secure MPC system and in cooperation with the second server of the secure MPC system, a counterfactual selection process to select a second winning selection criterion from the set of selection criteria by applying the set of qualification rules that includes the updated first qualification rule.
In some embodiments, transmitting, by the first server of the secure MPC system to the application on the user device, the response to the request for the digital content comprises: receiving, by a first server of a secure MPC system, an encrypted secret share of a response to a request for digital content from a second server of the secure MPC system; encrypting, by the first server of the secure MPC system, a second secret share of the response to the request for digital content to generate an encrypted second secret share of the response; and transmitting, by the first server of the secure MPC system, the encrypted secret share of the response and the encrypted second secret share of the response to the application on the user device.
In some embodiments, the qualification rule set includes one or more qualification rules, the qualification rule set includes at least one positive condition, and the selection criteria set is stored at the secure MPC system. In some embodiments, the set of qualification rules includes at least one negative condition.
In some implementations, attaching the unique experiment identifier associated with the selection criteria to the response to the request for digital content includes adding the unique experiment identifier to a list of unique identifiers included in the response, and attaching the unique control identifier associated with the selection criteria to the response to the request for digital content includes adding the unique control identifier to the list of unique identifiers, where the list of unique identifiers is represented using a bloom filter. In some embodiments, a method comprises: transmitting, by the application program, a first report comprising a list of unique identifiers to a platform associated with the selected digital content; and uploading, by the platform associated with the selected digital component, the batch of one or more reports including the first report to the aggregated reporting server. In some implementations, a method includes transmitting, by an application program, a first report including a list of unique identifiers to an aggregated reporting server.
Other embodiments of this aspect include corresponding systems, apparatus, and computer programs configured to perform the actions of the methods encoded on computer storage devices.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages.
The selection and presentation of digital content is often updated and improved through the use of experiments that test changes in the user's reaction or receipt of digital content based on changes in the content. User-based experimentation is an important technique for assessing how the user experience is affected, where the effect of a particular function or presentation format on the user receiving the content is measured. Such experiments also allow content researchers, providers, developers, and other entities to quantify the incremental impact of particular functions and changes being developed and improve the effectiveness and target key performance indicators of providers. For example, experiments allow content providers to measure the impact of indicators and the selection and presentation of particular digital content on particular indicators, such as publisher revenue or advertiser coverage, as well as audience size and demographics.
The manner in which digital content systems select and implement changes to content such as digital components (e.g., generating experimental or incremental changes to digital components) historically included the use of user information (e.g., browsing information, interest group information, etc.) obtained from third-party cookies, which are cookies stored on client devices by different domains than the domain of web pages rendered on the client devices. In the context of experiments designed and performed to test digital content design and presentation, or other digital experiments, these third-party cookies allow a particular user to be consistently designated as a control group or part of a treatment group exposed to treatment (such as different content or content formats). However, browsers prevent the use of third party cookies, making it more difficult to consistently assign users to a control group or groups exposed to processing, which means that computing resources and bandwidth may be wasted by assigning users to conflicting groups and producing less accurate or inaccurate results. When users are not consistently assigned to multiple groups, the results may be inaccurate because users can be exposed to treatment in one experiment on one publisher web site and to control of the same experiment on a different publisher web site, which may confuse the results, making the results obtained by performing the experiment unreliable and/or unusable. When control or processing is not consistently provided, the content may be irrelevant and new content will need to be provided or new experiments will need to be performed, which may require experiments to be performed on different users or with different content, resulting in additional traffic while invalidating previously provided traffic.
To overcome this problem, privacy-preserving techniques that can use stable cross-domain identifiers only for the purpose of conducting experiments can monitor and analyze network activity while preventing tracking of users and while preventing leakage of user information between computing systems, thereby enabling important experiments while preserving privacy and data security of users.
The described privacy-preserving monitoring mechanism-privacy-preserving experiment identifiers or "peids" -improves user experience and increases user trust by providing privacy guarantees that ensure that such patterns of monitoring user data and activity are not accessible to any third party, while still providing the benefits of being able to perform stable research methodologies, including experiments and testing of various content and presentation methods. The described system includes a secure server group that performs multi-party computations, distributing the computations across multiple parties such that no single party has clear text access to the cryptographic protocols of the data. This ensures that no participant can access the user data in the clear without unauthorized collusion between the parties. The described system can support cross-device stable partitioning of experimental groups (e.g., control group vs. experimental group) if, for example, applications on different devices belonging to the same user (such as web browsers) can synchronize with each other to use the same peid. The described system supports cross-domain experimental partitioning of the same devices and can also support cross-device experimental partitioning with cross-device synchronization of peids.
Furthermore, these experiment identifiers may be used as an alternative in systems that use traditional web activity monitoring methods. For example, peids can be used in existing systems with little need for adaptation under certain conditions, allowing system designers to reuse existing infrastructure for providing relevant statistics about web activity and to perform security functions to protect third parties while improving user privacy.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of a system in which a privacy preserving cross-domain experimental group partitioning and monitoring mechanism is implemented.
FIG. 2 is a data flow diagram of an example process for selecting a digital component to provide a display or distribution to a client device.
FIG. 3 is a swim lane diagram illustrating an example process for issuing and implementing a privacy preserving cross-domain experimental group partitioning and monitoring mechanism to report experimental data.
FIG. 4 is a swim lane diagram illustrating an example process for issuing and implementing privacy preserving cross-domain experimental group partitioning and monitoring mechanisms to support deltas in experiments.
FIG. 5 is a flow diagram illustrating an example process for issuing and implementing a privacy preserving cross-domain experimental group partitioning and monitoring mechanism.
FIG. 6 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document describes systems and techniques for protecting user data and protecting the privacy of users to whom content is provided in the context of an experiment.
User group-based field experiments are an important technology widely adopted by different companies. Experimentation can be used to assess the effectiveness and user experience of new functions being developed and quantify the incremental effect of a particular change. For example, experiments can be used to quantify how likely a user will be to attend a concert performed by a particular orchestra after being shown a particular promotional video, e.g., a portion of a program from a previous season. Without a stable, cross-domain, deterministic user identifier, existing systems that conduct user-based cross-domain field experiments may be ineffective in disapproval of monitoring mechanisms such as third party cookies. The systems and techniques described in this document enable such experiments to be performed while ensuring data security and user privacy.
While alternative solutions exist for performing user-based field experiments, they may not be stable or accurate. For example, request-based experiments may be performed in which each request for content is randomly or pseudo-randomly assigned to a group of experiments. User-based experiments may also be performed based on the first party cookie. However, in both cases, if a user using a particular browser accesses different domains and sends multiple requests for content, the browser may be assigned to the control group one time and the exposure group another time. When users are inconsistently assigned to an experimental group, the effects of the variables being tested may overflow between the experimental group and the control group, leading to inaccurate and therefore unusable results.
In some embodiments, it may be possible to conduct user-based experiments by using information such as the user's email address or phone number, which would allow consistent, cross-domain, and cross-browser tracking. However, users may be concerned about using their personal identity information for any purpose, including assigning users to experimental groups, even if the data is not exposed to any other entity.
The described system presents a secure multiparty computing design that provides information security and privacy. Secure multi-party computing (MPC) is an encryption protocol that prevents access to data by distributing computing among multiple parties such that no single party can access the data of another party. MPC allows multiple parties to jointly compute functions on their respective inputs while keeping those inputs private. The MPC system performs computations by splitting data that should be kept private into shares. These data, which are referred to as secrets, are divided into secret shares, and each of these shares is provided to the participants. The parties then collectively compute a function of their respective secret shares, thereby ensuring confidentiality, integrity, and security of the data. An MPC system includes a cluster of two or more server computers that collectively and securely perform various computations and processes.
For example, the system can distribute experiment design functions, such as assigning a particular peid to a control group or a treatment group, and securely transmit the peid for the experiment. The MPC cluster provides improved process integrity and user privacy relative to executing the process at the requesting client device, which requires the transmission of securely selected candidate digital components from the MPC cluster to the client device. The degree of security provided by the MPC process is that if only one party presumed to be non-colluding remains honest and does not deviate from the cryptographic protocol design, there is no way to expose the user data to any entity. The system follows an honest but curious security model, where all parties are honest to follow the protocol, and the protocol is still private if any number of colluding parties can only get their own output.
By implementing a system in which stable identifiers are used only for experimental purposes and transmitted through a secure MPC method, the system is able to maintain experimental integrity and utility of experimental results while protecting user privacy, providing content that is more likely to be relevant to the user, and providing content in a manner that is more likely to be of interest and/or useful to the user.
The described system enhances the operation of a secure MPC design by providing a stable experiment identifier that can support user-based experiments across domains, and where peids are synchronized across multiple devices owned by the same user. Applications such as browsers, through which users access particular electronic files and resources, share a stable experiment identifier with a secure MPC cluster that can use the identifier to enable or disable various experiments and experimental features, determine which of various stored selection criteria qualify or disqualify for selection to be presented to the user, assign the user to different experimental groups, track experimental results, and report those results for use, among other functions. The secure MPC cluster reports enabled experiments to the aggregation report server for analysis. In some embodiments, the secure MPC cluster performs reporting via a browser, or the secure MPC cluster itself can act as an aggregated reporting server.
Additionally, to support incremental updates and measurements of changes, if the winning selection criteria and associated digital components are part of an incremental experiment or study, the secure MPC cluster performs a counterfactual selection process in the selection process to determine if the user of the browser belongs to a reserved group of winning selection criteria (i.e., a control group to which processing features are not provided). In response to a request for a digital component, the secure MPC cluster can request an application, e.g., a browser, identifying that it belongs to an exposed group or a reserved group (if applicable). The application reports via the aggregated reporting server whether the associated action (such as visiting a website, purchasing a symphony ticket, issuing an electronic birthday card) occurred within the conversion window of all exposed and reserved groups associated with the application.
FIG. 1 is a block diagram of an environment 100 in which an MPC cluster 130 performs a secure MPC process to select digital components for distribution to client devices 110 and to perform experiments based on different content and versions of content. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, a mobile network, or a combination thereof. The network 105 connects client devices 110, secure MPC cluster 130, publishers 140, websites 142, content platforms, e.g., supply Side Platform (SSP) 170 and Demand Side Platform (DSP) 150, and aggregation report server 180. The example environment 100 may include many different client devices 110, secure MPC clusters 130, publishers 140, websites 142, DSPs 150, SSPs 170, and aggregation report servers 180.
The client device 110 is an electronic device capable of communicating over the network 105. Example client devices 110 include personal computers, mobile communication devices, such as smart phones, and other devices capable of sending and receiving data over the network 105. The client device can also include a digital assistant device that accepts audio input through a microphone and outputs audio output through a speaker. When the digital assistant detects a "hot word" or "hot phrase" that activates the microphone to accept audio input, the digital assistant can be placed in a listening mode (e.g., ready to accept audio input). The digital assistant device can also include a camera and/or a display to capture images and visually present information. The digital assistant can be implemented in different forms of hardware devices, including a wearable device (e.g., a watch or glasses), a smartphone, a speaker device, a tablet device, or another hardware device. The client device can also include a digital media device, such as a streaming device that plugs into a television or other display to stream video to a television, game console, or virtual reality system.
The client device 110 typically includes an application 112, such as a web browser and/or a native application, to facilitate the sending and receiving of data over the network 105. A native application is an application developed for a particular platform or a particular device (e.g., a mobile device with a particular operating system). In some implementations, the application 112 can be a program such as an operating system. The publisher 140 can develop and provide, for example, native applications to the client device 110 that are available for download. The Web browser can request the resource 145 from a Web server hosting the publisher's 140 website 142, for example, in response to a user of the client device 110 entering a resource address for the resource 145 or selecting a link referencing the resource address in an address bar of the Web browser. Similarly, the native application can request application content from a publisher's remote server.
Some resources, application pages, or other application content can include digital component slots for rendering digital components using the resources 145 or application pages. The phrase "digital component" as used throughout this document refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components can be electronically stored in the physical memory device as a single file or in a collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files, and include advertising information such that the advertisement is one type of digital component. For example, the digital component may be content intended to supplement web pages or other resource content presented by the application 112. More specifically, the digital components may include digital content related to the resource content (e.g., the digital components may relate to the same subject matter as the web page content, or to related subject matter). Thus, the provision of digital components can supplement and generally enhance web page or application content.
When application 112 loads a resource (or application content) that includes one or more digital component slots, application 112 can request the digital component of each slot. In some implementations, the digital component slots can include code (e.g., scripts) that cause the application 112 to request a digital component from an MPC cluster (such as MPC cluster 130), the MPC cluster 130 selecting the digital component and providing the digital component to the application 112 for presentation to a user of the client device 110. As described below, the application 112 can request digital components from the MPC cluster 130, and the MPC cluster 130 can forward the request or portions of the request to other servers, such as the SSP 170.
Some publishers 140 use the SSC 170 to manage the process of obtaining digital components for their resources and/or digital component slots of applications. SSP170 is a technical platform implemented in hardware and/or software that automates the process of obtaining digital components for resources and/or applications. Each publisher 140 can have a corresponding SSP170 or SSPs 170. Some publishers 140 may use the same SSP 170.
The digital component provider 160 can create (or otherwise publish) digital components that are presented in digital component slots of publishers' resources and applications. The digital component provider 160 can use the DSP150 to manage the provisioning of its digital components for presentation in the digital component slots. DSP150 is a technical platform implemented in hardware and/or software that automates the process of distributing digital components for utilization of resources and/or application presentations. The DSP150 is capable of interacting with multiple supply side platforms SSP on behalf of a digital component provider 160 to provide digital components for rendering by resources and/or applications of multiple different publishers 140. In general, the DSP150 is capable of receiving a request for a digital component (e.g., from an SSP), generating (or selecting) selection criteria for one or more digital components created by one or more digital component providers based on the request, and providing data related to the digital component (e.g., the digital component itself) and selection parameters to the SSP. The selection criteria can indicate the amount that the digital component provider 160 is willing to provide for presentation or user interaction with the digital components. The SSP is then able to select a digital component for presentation at the client device 110 and provide the client device 110 with data that causes the client device 110 to present the digital component.
In some cases, it may be beneficial for a user to receive digital components related to web pages, application pages, or other electronic resources that the user has previously accessed and/or interacted with. To distribute such digital components to users, users can be assigned to groups of users, such as groups of user interests, groups of similar users, or other group types that relate to similar user data, when the users access or perform specific operations at resources (e.g., interact with specific items presented on a web page or add items to a virtual shopping cart). The user group can be generated by the digital component provider 160. That is, each digital component provider 160 is able to assign users to their group of users when they access electronic resources of the digital component provider 160. The user group can also be created by the content platform, such as by the DSP150 and/or the SSP 170.
To protect user privacy, the user's group membership can be maintained at the user's client device 110, e.g., by one of the application programs 112 or the operating system of the client device 110, rather than by the digital component provider, content platform, or other party. In a particular example, a trusted program (e.g., a web browser or operating system) can maintain a list of user group identifiers ("user group list") for a user using a web browser or another application (e.g., a user logging into a browser, application, or client device 110). The user group list can include a group identifier for each user group, each user group including a user as a member. The digital component provider 160 that creates the user group can specify the user group identifier for its user group. The user group identifier for the user group can be descriptive of the group (e.g., a gardening group) or a code representing the group (e.g., not a descriptive alphanumeric sequence). The user group list for the user can be stored in a secure storage at the client device 110 and/or can be encrypted at the time of storage to prevent others from accessing the list.
When the application 112 presents resources or application content related to a web page on the digital component provider 160 or the website 142, the resource can request the application 112 to add one or more user group identifiers to the user group list. In response, application 112 can add one or more user group identifiers to the user group list and securely store the user group list.
The MPC cluster 130 can use the data including the user group membership of the user to select digital components or other content that may be of interest to the user or that may be beneficial to the user/user device in another manner. For example, such digital components or other content may include data that improves the user experience, improves the operation of the user device, or benefits the user or user device in some other manner. However, the user group identifier of the user's user group list can be provided and used to select the digital component to prevent the computing systems MPC1 and MPC2 of the MPC cluster 130 from having clear access to the user group identifier of the user, thereby protecting user privacy when selecting the digital component using the user group membership data. Plaintext is text or data (including binary files) in a form that is viewable or usable without a computational flag, special format, or written in code, and that does not require a key or other decryption device or other decryption process. The MPC cluster 130 also performs a final selection process using the set of candidate selection criteria received from the SSP170 to select the winning selection criteria that are mapped to the digital components. The MPC cluster 130 then provides the data for the digital components mapped to the winning selection criteria directly to the client device 110 in response to the digital component requests. The data can include parameters such as data identifying the digital component, a location at which the digital component is stored and/or from which the digital component can be requested, and winning selection criteria. In some embodiments, the MPC cluster 130 provides the digital components themselves to the client device 110.
The secure MPC cluster 130 includes two computing systems MPC1 and MPC2 (e.g., server computers) that perform secure MPC processes to select digital components for distribution to a user's client devices based on the user's group membership and/or other criteria without explicit access to group membership information (or other sensitive user information). Although the example MPC cluster 130 includes two computing systems, more computing systems can be used as long as MPC cluster 130 includes more than one computing system. For example, the MPC cluster 130 can include three computing systems, four computing systems, or another suitable number of computing systems. Using more computing systems in the MPC cluster 130 can provide more security, but can also increase the complexity of the MPC process.
Computing systems MPC1 and MPC2 can be operated by a single entity. In some embodiments, MPC1 and MPC2 can be operated by different entities. In this manner, each entity may not have clear access to the user's group membership. For example, one of computing systems MPC1 or MPC2 can be operated by a trusted party other than the user, publisher 140, DSP150, SSP170, aggregated report server 180, and digital component provider 160. For example, an industry group, government group, or browser developer may maintain and operate one of computing systems MPC1 and MPC2. Another computing system may be operated by a different one of these groups such that a different trusted party operates each computing system MPC1 and MPC2. Preferably, the different parties operating different computing systems MPC1 and MPC2 have no incentive to collude to compromise user privacy. In some embodiments, computing systems MPC1 and MPC2 are architecturally separate and are monitored to not communicate with each other outside of performing the secure MPC processes described in this document.
In addition to the description throughout this document, a user may be provided with controls (e.g., user interface elements with which the user may interact) that allow the user to select whether and when the systems, programs, or functions described herein may be able to collect user information (e.g., information about the user's social network, social actions or activities, profession, user preferences, or the user's current location), and whether to transfer content or communications from a server to the user. In addition, certain data may be processed in one or more ways before being stored or used in order to remove personally identifiable information. For example, the user's identity may be processed such that no personal identity information of the user can be determined, or the user's geographic location may be generalized where location information is obtained (such as to a city, zip code, or state level) such that no particular location of the user can be determined. Thus, the user may have control over what information is collected about the user, how the information is used, and what information is provided to the user.
Fig. 2 is a data flow diagram of an example process 200 for selecting digital components to provide a display or distribution to a client device. The operations of process 200 can be implemented, for example, by application 112 on client device 110, computing systems MPC1 and MPC2 of MPC cluster 130, DSP150, and SSP 170. The operations of process 200 can also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of process 200. Although the process 200 and other processes are described below in terms of two computing system MPC clusters 130, similar processes can be performed using MPC clusters having more than two computing systems.
This description includes two types of selection criteria-selection criteria that are conditional on sensitive user information, such as user group membership or other traffic sensitive information, or a change in its value that can allow unscrupulous parties to infer parameters of sensitive information, or "conditional selection criteria" and selection criteria that are not conditional on sensitive information, or "unconditional selection criteria". To protect user privacy, the conditions for the "conditional selection criteria" are evaluated within MPC cluster 130, rather than SSP170 or DSP150, to determine whether the digital component corresponding to the conditional selection criteria is eligible for use in the content selection process.
This architecture allows the MPC cluster 130 to protect user privacy and business confidential information and to prove its trustworthiness to application providers, such as the provider of the application 112. In this example, the MPC cluster 130 relies on a secure 2-party computing (2 PC) architecture that applies cryptographic techniques to ensure that there is no leakage of confidential user data or business confidential information if at least one of the two computing systems of the MPC cluster 130 is honest. If the MPC cluster 130 includes more than two computing systems, the current MPC protocol can be extended or other MPC protocols can be used.
The MPC cluster 130 runs a secure 2PC protocol to evaluate and apply conditions to select eligible selection process candidates, performs a selection process to select digital components based on winning selection criteria (e.g., where digital components are mapped to winning selection criteria), and receives exposure notifications to update counters on which those conditions depend. All of these processes can be done using secret share techniques. The protocol is described in detail below.
The process 200 begins at phase a, where an application 112 sends a request for a digital component to the MPC cluster 130 in cooperation with a triggering element from a content distribution server, such as SSP 170. The application 112 can include multiple requests for digital components together into one combined request to pick up multiple digital components. The MPC cluster 130 can then service each of the combined requests independently or make one or more selection decisions collectively. In this example, the request is for a single digital component and includes a request for a digital component selected based on the sensitive information or a digital component selected without using the sensitive information.
The MPC cluster 130 can respond to the request by selecting a particular digital component from a set of digital components that are each mapped to a respective selection criterion. These selection criteria can be selection criteria for digital components previously cached or otherwise stored at the MPC cluster 130 and/or selection criteria generated by a platform, such as the DSP150 or SS P170, just-in-time (JIT) selection criteria. The JIT selection criteria are generated directly in response to a need and increase efficiency and reduce waste because the selection criteria are generated only when digital components are needed. For example, the JIT selection criteria can be generated when a digital component slot becomes available-as indicated by receipt of a request for a digital component. The cached digital components are the digital components for which the MPC computer stores the selection criteria, but the digital components are not necessarily stored in the cache, e.g., the digital components or data of the digital components can be stored in other types of data storage devices or memories.
The request includes information used in the digital component selection process, which includes information that can be sensitive, such as an identifier of a user group that application 112 maps or otherwise associates, and insensitive information, such as contextual signals from application 112 regarding the context in which the digital component is to be presented and/or displayed. As described in further detail below, the design of system 110 improves the protection of user data that can be sensitive or confidential. The request contains a stable experiment identifier peid that can be used to select or remove selection criteria and associated digital components from the selection process. The stable experiment identifier can correspond to an instance of the application 112 running on the client device 110, and the client device 110 can in turn correspond to a user, such as a user logged into the application 112 or a user that is using the application 112. The stable experiment identifiers are encrypted using secret share techniques supported by the MPC cluster 130 to protect user privacy so that no single server of the MPC cluster 130 knows the identifiers and instead holds shares of the identifiers. The application 112 can send a respective share of the stable experiment identifier to each server of the MPC cluster 130.
The trigger element can be, for example, a tag that detects the presence of a digital component slot within an internet location or other electronic resource accessed by the application 112. The trigger element can be placed at, for example, an internet location, and can notify the application 112 of the presence of a digital component slot for which a digital component should be requested.
Process 200 proceeds to phase B, where MPC cluster 130 transmits a digital component request based on less (or less) sensitive information, such as context signals, to SSP 170. For example, the digital component request can be based on information such as user activity information within a particular domain. Such a request is referred to as a "context request," and responding to such a context request can be an unconditional selection criterion because the request is not conditioned on receiving sensitive information. In some cases, the response may include criteria for one or more conditions, such that the response is a conditional response. The context request can contain various contextual signals and user information collected directly by the internet location (e.g., content publisher) that triggered the request for the digital component. For example, the contextual signals can include analytics data, language settings, and other data that help the content publisher provide a good user experience. However, the context request provided to the SSP170 does not include sensitive information, such as a user group identifier.
Process 200 continues with stage C, where SSP170 forwards the context request to one or more DSPs 150. In this particular example, and for simplicity, SSP170 forwards the context request to a single DSP 150. For example, SSP170 can forward the context request to DSP 150. In this example, the DSP150 has digital components and selection criteria mapped to the digital components.
Process 200 continues with stage D where one or more DSPs 150 return selection criteria in response to the context request. For example, DSP150 returns one or more selection criteria that map to digital components responsive to the context request. DSP150 can return any number of selection criteria in response to a context request. In some implementations, the DSP150 can additionally return selection criteria responsive to digital component requests based on sensitive information, such as user group information. These selection criteria are "conditional selection criteria" in that they are conditioned on sensitive information, and thus conditioned on the MPC cluster 130 receiving a request that includes sensitive information that matches the sensitive information for which the selection criteria are conditioned. For each selection criterion provided by DSP150, DSP150 includes information such as a time-to-live (TTL) parameter, i.e., the maximum time span over which MPC cluster 130 can cache the selection criterion. This TTL parameter enables MPC cluster 130 to cache selection criteria received from DSP 150. In some embodiments, without the TTL parameter, the MPC cluster 130 does not cache the received selection criteria and instead will discard the selection criteria after the selection criteria have been used in the selection process, e.g., in the selection process corresponding to the digital component requests transmitted in stages a, B and C.
Process 200 continues with stage E in which SSP170 applies content selection criteria. For example, SSP170 applies rules such as content provider and digital component blocking rules that prevent a particular content provider from qualifying for candidate digital components and selection criteria, or as candidates. In some embodiments, the MPC cluster 130 can apply the rules or a portion of the rules.
In some implementations, the application 112 can maintain a blocked set of identifiers that includes identifiers of digital components that have been explicitly blocked by a user. For example, assume that a user interacts with a mute element corresponding to a given digital component (or a portion of the data delivered to the client device 110). In this example, the user's interaction with the mute element is an indication that the user does not want the digital component or potentially similar digital components (e.g., from a content source or motion, which can be the same content source or motion, or can be different content sources or motions) to be seen in the future (e.g., for at least a certain amount of time). In response to the interaction, the application 112 can add the identifier for the given digital component to the blocked set of universal identifiers, which can then be used to prevent delivery or presentation of other digital components having the same identifier as the given digital component. In some implementations, the application 112 can maintain a blocked set of identifiers that includes identifiers of digital components that were shown to the user too often recently, e.g., more than X times during the last Y minutes. The application 112 can add the identifier for a given digital component to a blocked set of universal identifiers, which can then be used to prevent other digital components having the same identifier as the given digital component from being delivered or presented in the near future.
The SSP170 also applies selection criteria rules to determine, for example, how the selection criteria affect post-release values for particular content providers. The post-release value can indicate, for example, an amount provided to the content provider for releasing the digital component. SSP170 then performs a selection process to determine the top unconditional selection criterion that yields the highest post-issuance value. Unconditional selection criteria are not conditional on sensitive information and, therefore, do not apply content selection rules such as user group membership, frequency control, content distribution rules, and pacing rules. SSP170 then forwards the following criteria selections as JIT selection criteria to MPC cluster 130: all selection criteria that can be cached in the MPC cluster 130 (selection criteria with TTL values), and all selection criteria whose post-publication values are not less than the post-publication values of the top unconditional selection criteria.
The process 200 proceeds to stage F where the MPC cluster 130 updates its cache with the received cache-enabled (i.e., with TTL values) digital components and their corresponding JIT selection criteria. In addition, the MPC cluster 130 applies selection criteria to conditions such as user membership rules, frequency control, pacing rules, and rules that prevent a particular user from micro-targeting all of the selection criteria received in stage E, as well as selection criteria that previously cached digital components select valid candidates for the selection process. Rules can include restrictions and guidance on the manner or frequency of distribution of digital components, as well as other factors. The rules include frequency control, muting, budget, and pacing constraints. The MPC cluster 130 then runs a final selection process among all the valid candidates, selects the winning digital component, and then returns data for the winning digital component to the application 112 in response to the digital component request.
Process 200 continues with stage G in which the winning digital component is rendered by application 112. The application 112 then provides exposure notification to the MPC cluster 130. The exposure notification includes data that allows the MPC cluster 130 to update information related to updating the counter that allows the MPC cluster 130 to enforce the selection rule. In some embodiments, the application 112 may reduce the amount of network communications and battery/bandwidth consumption for mobile devices by sending an exposure notification G to the MPC cluster 130 piggybacked, for example, on top of a future component request a.
The system implements a secret share algorithm to prevent any single server in the MPC cluster from accessing user information, such as the peid. When the system is operating in honest but curious assumptions, the secret-share algorithm ensures that no single server in the MPC can see the peid in the clear. More specifically, for each digit groupRequest for pieces, browser 112 divides the peid into two secret shares [ peid 1 ]And [ peid ] 2 ]Wherein the parameters appearing in parentheses represent secret shares of the variables in parentheses. For example, here [ peid ] 1 ]And [ peid 2 ]Are two secret shares of peid, and are the stable experiment identifiers of the user. With respect to secret shares, subscript 1 indicates a parameter representing a first secret share and subscript 2 indicates a parameter representing a second secret share. These secret shares can be reconstructed into the original secret. For example, only if an entity has a pair [ peid ] 1 ]And [ peid 2 ]When the access rights of the two are limited, the entity can only use the secret share [ peid 1 ]And [ peid 2 ]Reconstructed into the original secret peid. However, the secret shares are encrypted in order to protect user privacy.
By relying on schemes such as additive secret shares, the reconstruction process can be performed using simple operations. For example, the reconstruction process when using simple additive secret shares can use a secret such as [ peid ] 1 ]+[peid 2 ]= peid simple additive operation. Each of the two secret shares is separately and securely maintained by one of the two servers of the MPC cluster 130. The sharing of the peid between the servers is through additive sharing. Peid can be shared by other methods, such as by two random vectors, where the xor of the two random vectors gives the Peid, or by two separate shares, where one share holds the encrypted Peid and the second holds the decryption key, among other methods. The MPC cluster 130 may be adapted to perform the splitting of the key into shares based on the particular method selected.
To ensure that secret shares for one server are not intercepted by another server, the secret shares can be encrypted. For example, the application (which may be a browser) 112 can encrypt each of the secret shares with the public key of the particular MPC server intended to receive the secret share by encrypting PublicKeyEncrypt ([ peid ]) 1 ],MP 1 ) Sends the result of (2) to MPC1, and pubiciKeyEncrypt ([ peid) 2 ],MPC 2 ) The result of (3) is sent to MPC2. Here, public key encrypt (x, y) indicates that the public key y of the server is usedx, the encryption function performed on the same. Thus, pubickeyEn ([ peid) 1 ],MPC 1 ) Denotes the use of the public key of MPC1 at [ peid ] 1 ]The encryption function performed on.
Fig. 3 and 4 are swim lane diagrams illustrating example processes 300 and 400 for issuing and implementing a monitoring mechanism for use by web activities performed across domain experimental group partitions and across different domains. The operations of processes 300 and 400 can be implemented, for example, by client device 110 and/or application 112, MPC cluster 130, DSP150, and/or aggregate report server 180. The operations of processes 300 and 400 can also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of processes 300 and 400.
With respect to FIG. 3, the process 300 begins with step 1, where an application 112 sends a request for a digital component to the MPC cluster 130. For example, step 1 of the process 300 may be similar to phase A of the process 200, where the application 112, in cooperation with a triggering element from a content distribution server, sends a request for a digital component to the MPC cluster 130. The request can include, for example, a set of contextual signals related to a display environment in which the selected digital component is to be displayed. The request can also include, for example, a peid for the user and the application 112 so that the user can be uniquely identified for the purpose of any experiment performed. The context signals can include, for example, a resource locator (e.g., a Universal Resource Locator (URL)) of a resource through which the digital component is to be displayed, a geographic location of the client device 110 at which the digital component is to be displayed, and/or a spoken language setting of the application 112 through which the digital component is to be displayed. Other context signals can also be used.
In some implementations, the set of context signals is transmitted in the form of parameters such as a cache lookup key. The cache lookup key can be a composite message based on the set of context signals. In some implementations, the cache lookup key can be a cryptographic hash of the composite message (e.g., SHA-256).
The MPC cluster 130 can store a corresponding cache lookup key for each digital component for which the MPC cluster 130 stores or stores selection criteria, the cache lookup key indicating the contexts that the digital components qualify for selection. Selection for example, if the selection criteria for a digital component is only eligible for use in the selection process for a given URL, the selection criteria and digital component can be mapped to a cache lookup key that includes the given URL. These cache lookup keys can also be in the form of a composite message.
For incoming requests for digital components, the MPC cluster 130 collects selection criteria for all caches associated with the cache lookup key included in the digital component request. That is, the MPC cluster 130 identifies each digital component that is mapped to a cache lookup key that matches the cache lookup key requested by the digital component and its corresponding selection criteria. These matching digital components can be referred to as qualifying digital components because they qualify for display with the resource for which the digital component is being requested.
After identifying the qualifying digital components, computing systems MPC1 and MPC2 are able to determine which of the qualifying digital components are candidates for the selection process. The digital component is a candidate when each condition of the digital component is satisfied. As described above, these conditions can be based on user group membership, frequency control, content distribution rules, and/or pacing rules.
The digital components that qualify for selection can be filtered and then selected as described above with respect to fig. 2 and process 200. The selected digital components to be provided in the response to the application 112 are then used by the MPC cluster 130 in step 2.
For each cached digital component, the MPC cluster 130 calculates whether the application 112 belongs to a test group for the digital component that receives the process whose effect is to be analyzed, or whether the application 112 belongs to a control group for the digital component that does not receive the process. The experimental or processing group receives digital components with specific features, enhancements, interactive elements, colors, shapes, sizes, fonts, sounds, videos, etc. that the digital content provider or analysis system is interested in quantifying the effects it has when provided to users of a network, such as the internet. These groups can be different for different digital components, and the MPC cluster 130 uses the peids to consistently determine whether the user should be a control group or part of an experimental group, and whether the digital component is a candidate to be provided to the user and the application depending on whether the user/application belongs to the experimental group. The application 112 is assigned to the group as a proxy for the user.
To quantify the impact of a particular digital component or a change to a digital component on a user, each digital component and corresponding selection criteria cached in the MPC cluster 130 may be associated with, for example, one of the four non-negative numbers p, k, r, and s mapped according to the design of the experiment. For example, the system can apply the concept of mutually orthogonal latin squares to ensure that the arguments are truly independent, without hidden confounding correlations. For example, in statistical design for experiments, the assignment of experimental treatments is such that each treatment happens once in each row and column, enabling the use of these square matrices to identify experimental errors from both sources. The non-negative numbers p, k, r and s represent different parameters of the experimental design.
Here, p is a prime number representing the number of moduli (mod) in each layer of the experiment (where each layer is represented by a latin square), and the number of rows/columns in the latin square; k is a layer identifier selected for running the experiment, where k ∈ [0, p-1 ]](ii) a And r is more than or equal to 0 and less than or equal to s and less than or equal to p-1. In other words, [ r, s ]]Limit [0,p-1 ]]The non-empty interval inside, which specifies mod in the layer specified by k in which the experiment is to be performed. In this particular example, let c = peid mod (p) 2 ) X = c mod p, y = c div p, and m = (k × x + y) mod p.
Conceptually, the MPC cluster 130 determines whether the cached digital components and their selection criteria are eligible for selection by determining whether m ∈ [ r, s ]. In other words, the MPC cluster 130 determines whether the cached digital component is a candidate for selection by determining whether r ≦ (kxx + y) mod p ≦ s. Otherwise, the cached digital component is not a candidate and is therefore not eligible for selection. In some embodiments, the digital component must also satisfy all conditions associated with the digital component in order to be candidates for selection, as described below.
For example, the MPC cluster 130 can determine whether m ∈ [ r, s ] by determining whether m ∈ [ r, s ]]In other words, whether r ≦ (kxx + y) mod p ≦ s, to calculate whether application 112 belongs to the experimental group. The MPC cluster 130 may determine whether to perform a process by determining whether to perform a processapplication 112 belongs to a control group.
In addition, each cached numerical component (and corresponding selection criteria) is associated with one or more globally unique experiment identifiers eid experiment And (4) associating. To enforce global uniqueness, the MPC cluster 130 can compute the identifier as being equal to m e [ r, s]Associated eid experiment = HMAC (inner _ domain, domain _ specific _ experience _ id). Here, HMAC, or hash-based message authentication code, is an example cryptographic hash function that can be used to simultaneously verify data integrity and the authenticity of a message, and allow the message to be uniquely hashed. Here, globally unique means that each experiment identifier eid experiment Unique across different domains accessible by application 112. For example, the same experiment identifier can be used across different websites and domains visited by the user of application 112 and does not overlap with any other identifiers or users, regardless of domain.
In addition, each cached numerical component (and corresponding selection criteria) is associated with one or more globally unique experiment identifiers eid control And (5) associating. To enforce global uniqueness, the MPC cluster 130 may compute the identifier as an andapplication 112. For example, the same control identifier can be used across different websites and domains visited by the user of browser 112, and does not overlap with any other identifiers or users, regardless of domain. Controlling an identifier and interval->MPC cluster 130 determines whether or not to ≧ based>
As an example, the list of experiment identifiers attached to a particular digital component response sent from the MPC cluster 130 to the client device 110 can contain O (10) 4 ) One for each experiment being performed, where each experiment represents a different numerical component. The number of attached experimental identifiers varies for each request for a digital component. In some implementations, the list of peids can be large, and to concisely represent the list of peids to reduce the required bandwidth, the system can use a probabilistic data structure, such as a bruker filter or a bloom filter.
In step 2 of the process 300, the MPC cluster 130 constructs a bloom filter with the applicable experiment identifier activated. For example, using 11 hash functions, MPC cluster 130 may construct an optimal bloom filter size of 2 bytes per peid at 0.045% False Positive Rate (FPR). Each bloom filter has an array of bits and to construct the bloom filter, the elements are inserted into the bloom filter one by one. For each element, a hash function is used to infer the bit in the bit array corresponding to the element. For example, if there are 11 hash functions, then 11 hash functions are used to set the 11 bits in the bit array to the value of 1 for the element. To prevent potentially compromised applications from extracting or forging confidential information from the peid list, the MPC cluster 130 may rely on cryptographic algorithms.
The MPC cluster 130 uses bloom filters because bloom filters can accurately represent experiment identifiers that are activated using a small amount of data and can communicate with minimal bandwidth consumption. The MPC cluster 130 is able to control the FPR of the bloom filter such that the effect on the statistical outcome of the experiment is negligible. The construction of the bloom filter is performed using secret shares to protect user privacy, so that each server can compute the location of the identifier within the bloom filter, but does not know whether the value is 0 or 1. The computation can be done, for example, using a = + operation, which can be performed in secret shares. In some embodiments, the bloom filter is configured as a counting bloom filter, which allows the configuration to be done in secret shares and can later be converted to a conventional bloom filter. The construction of the bloom filter is described in further detail below with respect to steps 2-3 of process 400.
In step 3 of the process 300, the MPC cluster 130 can encrypt and/or sign a bloom filter, which can be partitioned into secret shares to prevent any party for which a secret share is meaningful from accessing bloom filter parameters and reconstructing a full bloom filter. For example, the MPC cluster 130 can encrypt the bloom filter using public key encryption.
In step 4 of the process 300, once the MPC cluster 130 has determined whether the application 112 belongs to an experimental group or a control group, the MPC cluster 130 attaches the corresponding experimental identifier to the digital component response returned to the application 112. For example, the MPC cluster 130 can include bloom filters with the digital component responses provided to the application 112. In addition, the MPC cluster 130 selects a winning digital component from the candidate set that satisfies all of its conditions, as described below with respect to steps 504-506 of FIG. 5.
In step 5 of process 300, application 112 renders the digital components associated with the winning selection criteria after the winning digital component has been selected from the qualifying digital components indicated by the bloom filter according to a selection process, such as the process described above with respect to fig. 2. For example, the application 112 can render a video associated with the winning selection criteria.
In step 6 of process 300, the rendered digital component, which is associated with application 112, sends a report to DSP150 through an aggregate measurement function, such as an aggregate measurement API native to application 112. For example, the aggregate measurement API can be integrated into the application 112. In some embodiments, the aggregated measurement API comprises a server, which can be implemented as a secure MPC cluster. The report can contain a list of peids associated with the report. For example, the report can include previously constructed bloom filters and measurements associated with the rendering of the digital component, such as the amount of time the digital component was shown, whether the user's attention was focused on the digital component, whether other applications are running, and whether the digital component is visible, among other measurements.
In step 7 of process 300, after accumulating a threshold number of reports, DSP 10 uploads the reports received in the secret share to aggregated reporting server 180. For example, the DSP150 can periodically upload many encrypted reports in secret shares to the aggregated report server 180 so that the DSP150 does not have access to the clear text of the reports. DSP150 can detect whether a threshold number of reports have been accumulated and upload the reports to aggregated reporting server 180 in batch (i.e., secret share) reports.
In step 8 of process 300, the DSP150 queries the aggregate reporting server 180 to obtain the metrics associated with each peid. For example, DSP150 can provide requests for various analyses, measurements, and other parameters from aggregated reporting server 180.
With respect to fig. 4, process 400 is an example process for publishing and implementing privacy preserving cross-domain experimental group partitioning and monitoring mechanisms to support deltas in experiments. Many of the steps shown with respect to fig. 4 and process 400 are similar to those described above with respect to fig. 3 and process 300.
In step 1 of the process 400, the application 112 sends a request for a digital component to the MPC cluster 130, similar to step 1 of the process 300 described above with respect to FIG. 3.
In some cases, content providers, designers and researchers, as well as other entities, wish to quantify the incremental effects due to a particular function or change. For example, a user is 50% more likely to reply with a "yes" to watch a virtual performance of a particular orchestra after seeing a digital component than if not seeing the particular digital component. To support such incremental studies, the system introduces a counterfactual selection process below to the baseline process described above with respect to fig. 2 and 3.
Similar to the baseline experimental design, the selection criteria for the cache are compared to the values of p, k, r, s,MPC cluster 130 calculates the modulus m from peid, p, and k. />
Here, if m ∈ [ r, s)]Then the user is in the exposure group. In other words, the exposed group is exposed to a digital component that is associated with the cached selection criteria. Exposure groups and Experimental identifier eid exposed And (5) associating. To ensure uniqueness, eid exposed Is defined as eid exposed ＝HMAC(owner_domain,domain_specific_exposed_id)。
If it is not
Here, if m is not within any range, then application 112 is not in an exposed group, nor in a reserved group.
In step 2 of the process 400, the MPC cluster 130 performs a selection process that applies all selection rules to select at most one of the cached digital components as the winner of the selection process. If the winning digital component is associated with the original experimental qualification rule, the MPC cluster 130 will eid exposed And associated metadata is inserted into a response to the request for the digital component.
In step 3 of the process 400, the MPC cluster 130 then performs a counterfactual selection process that applies all the rules of the selection process, except that the experimental qualification rules are set from m e [ r, s]Is updated toMPC cluster 130 can then determine phantom candidate selection criteria based on the updated qualification rules, selecting at most one of the cached digital components and representing the winner of the counterfactual selection process, which is identical to the actual selection process, but for the update of the qualification rules. If the winning digital component is associated with the modified experimental qualification rule, or in other words, if the winning digital component only qualifies to be selected based on the updated qualification rule, the MPC cluster 130 will eid holdback And associated metadata is inserted into a response to the request for the digital component.
The counterfactual selection process can be performed in parallel with the privacy preserving selection process. If the selection criteria of a candidate digital component satisfies the original qualification rules, then the phantom candidate digital component qualifies for the selection process, but those rules have been updated for the counterfactual selection process and, therefore, have not been applied to the selection criteria. The phantom candidate number component can be selected as the winning number component rather than the actual candidate selection criteria which depends on the value of m.
The MPC cluster 130 can perform these two selection processes in parallel, for example in batch mode, without increasing the number of RPCs between the computing systems MPC1 and MPC2. The results of the counterfactual selection process allow the MPC cluster 130 to identify digital components that may not qualify under the original qualification rules.
The counterfactual selection process can have the same form as the actual selection process, and in order for a digital component to qualify for the selection process, the digital component must meet certain distribution requirements. The counterfactual selection process measures what happens when the qualification rules are updated by applying all distribution rules except the original qualification rules applied by the actual selection process.
The counterfactual selection process allows the system to determine if a particular digital component qualifies for distribution if the digital component is part of a different group in the experiment.
As described above, the example processes 300 and 400 qualify digital components for an experimental group to select a winning digital component and include an experimental group identifier in a response to a request for a digital component without much of the details of the MPC process (es) being performed by the MPC cluster 130. The following sections provide additional implementation details that can be used on the example processes 300 and 400.
The computers MPC1 and MPC2 of the MPC cluster 130 are capable of performing a secure MPC process using secret shares to determine various parameters for assigning users to the experimental group. For each selection criterion and each digital component request, the MPC cluster 130 performs the following function c = peid mod (p) 2 ) (ii) a x = c mod p; y = c div p; and m = (k × x + y) mod p. To protect user privacy, the peids are transmitted from the client devices 110 using secret shares, and each server of the MPC cluster 130 receives one secret share of the peids separately. Other input parameters, such as p, k, r, s,
In a digital component request, MPC1 and MPC2 are in Z q Receiving additive secret share of peid, Z q Represents [0, q-1 ]]An arbitrarily large set of integers. In other words, MPC1 and MPC2 receive [ peid ] respectively 1 ]And [ peid ] 2 ]. Here, q is at O (2) 128 ) And p is in O (10,000). In other words, q>>p is the same as the formula (I). For example, q can be a large prime number, where Z q Has a secret share from [0, q-1 ]]A randomly selected value.
Each of the MPC servers MPC1 and MPC2 separately and locally performs a series of functions using their respective secret shares of data to be kept private. For example, MPC1 calculates [ c locally 1 ]＝[peid 1 ]mod(p 2 )；[x 1 ]＝[c 1 ]mod p；[y 1 ]＝[c 1 ]div p; and [ m ] 1 ]＝(k×[x 1 ]+[y 1 ])mod p。
Similarly, MPC2 calculates [ c ] locally 2 ]＝[peid 2 ]mod(p 2 )；[x 2 ]＝[c 2 ]mod p；[y 1 ]＝[c 2 ]div p; and [ m ] 2 ]＝(k×[x 2 ]+[y 2 ]) mod p. As described above, the brackets specify secret shares of the parameters.
Due to the structure of the secure MPC cluster 130, [ x ] 1 ]And [ x ] 2 ]Is Z p X of [ c ], [ y [ c ] ] 1 ]And [ y 2 ]Is Z p Y in [ c ], and [ m 1 ]And [ m ] 2 ]Is Z p M of (1) is added to the secret share.
For each cached digital component and its selection criteria sc, MPC1 and MPC2 can then cooperatively perform a secret share comparison algorithm to determine whether the particular experiment identifier is in an exposed group or a reserved group. For example, MPC1 and MPC2 can cooperatively execute a secret share comparison algorithm to evaluate is _ in _ exposed _ group sc = m ≧ r AND m ≦ s, AND
In some embodiments, MPC1 calculations
[is_in_exposed_group r,1 ]＝1–([m 1 ]<r)
[is_in_exposed_group s,1 ]＝1–([m 1 ]>s)
Similarly, MPC2 calculation
[is_in_exposed_group r,2 ]＝1–([m 2 ]<r)
[is_in_exposed_group s,2 ]＝1–([m 2 ]>s)
For each cached digital component evaluated for eligibility, there are x positive conditions, which are in Z 2 Denoted as a secret message set. For example, these positive conditions can be expressed as { [ Condition ] positive,1 ],…[condition positive,x ]}. These conditions can be related to user group membership, frequency control, content distribution rules, and pacing rules. Each of these conditions must be true (e.g., represented by a value of 1) in order for the cached digital component to qualify for the selection process. In other words, all x positive conditions must be met in order for the cached digital components to be candidates for selection by the MPC cluster 130.
There are y negation conditions, which are at Z 2 Is represented as a secret message set. For example, these negative conditions can be expressed as { [ Condition ] negative,1 ],……[condition negative,y ]}. Each of the y-conditions must be false (e.g., expressed as a value of 0) in order for the cached digital component to be a candidate for selection by the MPC cluster 130.
Examples of positive conditions include membership in a particular user group, values and pacing constraints, and privacy protection rules. For example, the distribution of content can be controlled by input from the digital component provider 160 through value and pacing control techniques. The digital component provider can specify a total threshold for a selected value over a period of time to implement measures to ensure that resources including movement of the digital component are not prematurely exhausted during the activity. For example, the digital component provider 160 can specify that the selected digital components from the digital component provider 160, or the sum of the selected values for a particular digital component over the course of a week, is limited to a maximum of 8000 units. Once the maximum sum of the selection values is reached, the particular digital component to which the maximum value applies will no longer be eligible for the selection process distributed to client device 110 until the end of the time period (e.g., one week).
The digital component provider can also specify a speed or pace at which a threshold of selection values from the digital component provider 160 for a particular digital component is being reached. For example, the digital component provider 160 can specify that a maximum threshold of 6000 units must be reached over the course of a month at a pace of less than 250 units per day. Once the daily sum of the selection values is reached, the digital components provided by the digital component provider 160 to which pacing is applied will no longer be eligible for the selection process distributed to the client device 110 until the end of the time period (e.g., one day).
In addition to enforcing digital component qualification according to content distribution rules, the privacy preserving selection process also preserves user privacy and improves user experience by preserving user k-anonymity in order to provide any component selected to at least k other users. By ensuring that a particular digital component is provided to a threshold number of other users, the system prevents one form of user targeting, referred to as micro-targeting, which narrowly targets the user to the point where some users may be uncomfortable. For example, digital components targeted and distributed to only a few users may feel overly personalized, and users may feel isolated or uncomfortable with respect to the particularities of the digital components. The privacy preserving selection process ensures that the digital components are distributed to a sufficiently broad audience such that users are satisfied with the digital components they receive and the size of the target audience for the digital components.
Examples of negative conditions include user preferences regarding reducing or eliminating content or digital components being presented to them. For example, users often prefer to not continuously show the same third-party content when navigating across multiple different websites, so distributing the same third-party content to the same user continuously across multiple different websites in a short period of time can result in wasted computing resources that are used to distribute content that the user does not want to see, and that may be ignored. One way to limit the number of times a particular user is exposed to the same third party content is to utilize a frequency control technique that prevents the same user from being exposed to the same third party content more than a specified number of times within a short period of time, for example, any 5 minutes 10 minutes in succession, or another suitable period of time.
The system allows further user input by receiving information from the user to mute the digital components, or prevents the digital components from being presented to them for a period of time. For example, a user may select a time period of five days to mute a particular digital component they have been presented. In some implementations, the time period can be specified by the client device 110, MPC cluster 130, DSP150, digital content provider 160, or SSP170 based on the type of content item and/or the type of feedback provided by the user, among other factors.
In this particular example, MPC1 saves { [ Condition ] for a given digital component positive,1,1 ],…[condition positive,x,1 ]And { [ Condition ] negative,1,1 ],…[condition negative,y,1 ]These are secret shares of boolean values that indicate whether each condition is satisfied or not. For example, if a first affirmative condition (condition) is satisfied positive,1 ) Then [ condition ] positive,1,1 ]Will be the first secret share of the secret boolean value of one.
Similarly, MPC2 saves { [ Condition ] positive,1,2 ],…[condition positive,x,2 ]And { [ Condition ] negative,1,2 ],…[condition negative,y,2 ]These are also secret shares of boolean value that indicate whether each condition is met.
For buffered digital components, MPC1 appends the secret share of the positive condition set with [ is _ in _ exposed _ group ] in order to use algorithms, such as GMW (Goldreich-micalio-Wigderson) protocol or garbled circuit, and the inadvertent transport extension (OTe), to compute a candidate parameter is _ dc _ a _ candidate indicating whether the buffered digital component is a candidate for selection, MPC1 appends the secret share of the positive condition set with [ is _ in _ exposed _ group ] r,1 ]And [ is _ in _ exposed _ group s,1 ]. The combination set of positive conditions is { [ Condition { [ positive,1,1 ],……[condition positive,x,1 ],[is_in_exposed_group r,1 ],[is_in_exposed_group s,1 ]}。
Similarly, MPC2 appends the secret share of the positive condition set with [ is _ in _ exposed _ group r,2 ]And [ is _ in _ exposed _ group s,2 ]. The combination set of positive conditions is { [ Condition { ]) positive,1,2 ],……[condition positive,x,2 ],[is_in_exposed_group r,2 ],[is_in_exposed_group s,2 ]}。
The GMW protocol or garbled circuit is used to determine whether all positive conditions of the digital component are true and at least one of the negative conditions of the digital component is false. If so, the numeric component is a candidate for the selection process. In other embodiments, boolean operations can be performed on the secret shares by MPC1 and MPC2 to determine whether all positive conditions are true and at least one of the negative conditions is false. However, the GMW protocol is more efficient and involves less round trip calculations between MPC1 and MPC2. MPC1 guarantees after GMW protocol completion with OTeThere is a first secret share [ is _ dc _ a _ candidate1 ] of candidate parameters for the digital component]And MPC2 holds a second secret share [ is _ dc _ a _ candidate ] of the candidate parameter for the same digital component 2 ]. MPC1 and MPC2 are capable of determining secret shares of candidate parameters for each cached digital component and any JIT digital components available for selection.
The process can use two comparison tests for each determination of whether to assign a user/application 112 to an exposure group, and thus activate each experiment identifier as part of an exposure group based on whether m e r, s. The secret share comparison process can be computationally expensive, requiring multiple round-trip operations between servers MPC1 and MPC2 within MPC cluster 130.
In some embodiments, the protocol used to determine whether to activate a particular experiment identifier can be improved or optimized. In one example, by defining m' = (m-r) mod p, given m, r, s ∈ Z p And r.ltoreq.s, it can be shown that if and only if m'. Ltoreq.s-r, m.epsilon.r, s]. In this simplification of the equation defining the constraint that must be satisfied, the evaluation of m' ≦ (s-r) requires only one comparison test rather than two as described above. This reduces the amount of bandwidth consumed between NPC1 and NPC2 and reduces the delay and computational cost in determining whether a user belongs to the experimental group. Since this process may be performed in real-time between the time the digital component is requested and the digital component is provided in response to the request, reducing latency is critical to reducing errors at the client device 110 and improving the user experience.
MPC1 and MPC2 can use this improvement to engage in secret share comparison test algorithms. Upon completion of the comparison, MPC1 saves [ is _ in _ exposed _ group 1 ]＝(([m 1 ]-r) mod p) is less than or equal to (s-r). Similarly, MPC2 saves [ is _ in _ exposed _ group 2 ]＝(([m 2 ]-r) mod p) is less than or equal to (s-r). That is, for each digital component, each MPC server maintains a secret share of an exposure parameter is _ in _ exposed _ group that indicates whether the user is in an exposed group of digital components.
Thus, the positive set of conditions held by MPC1 is{[condition positive,1,1 ],……[condition positive,x,1 ],[is_in_exposed_group 1 ]}. Therefore, the MPC2 holds a positive set of conditions as { [ Condition ] positive,1,2 ],……[condition positive,x,2 ],[is_in_exposed_group 2 ]}。
Using these conditions, the MPC cluster 130 then proceeds to execute the GMW algorithm using OTe.
This improvement reduces the number of comparison tests required by half and the number of rows in the truth table constructed for the GMW protocol by half without increasing the number of round-trip operations required between servers in the MPC cluster 130.
For each numeric component request, each numeric component (and its corresponding selection criteria) may be associated with an experiment identifier of the eid that is activated if is _ in _ exposed _ group is true experiment Or if is _ in _ hold _ group is true, activated eid control . These parameters can vary per digital component based on whether the user for whom the request is generated should be assigned to an experimental group of digital components.
Returning to application 112 and then to aggregated reporting server 180 a variable number of eids, as described in step 4 of fig. 3 and 4, the system can utilize bloom filters to reduce bandwidth and storage costs.
For example, if the expected number of eids to be activated for a digital component request is N, the MPC cluster 130 can compute the optimal or target number of hash functions F for the desired FPR, and the number of bits per peid B for the bloom filter.
Next, MPC1 and MPC2 can create a counting bloom filter R of size N B, where each element has a value of [0,number of completed digital components ]]And (4) the following steps. Here R = recornstruct (R) 1 ，R 2 ) And MPC1 and MPC2 are capable of creating arrays R, respectively 1 And R 2 . Both arrays have a size of NxB at Z p Containing nxb additive secret shares. Each array is initialized to 0.
To minimize bandwidth consumption, MPC1 and MPC2 performThe following cryptographic protocol to construct a counting bloom filter R, where each element is Z, and then convert R to a normal bloom filter 2 The additive secret share of (1).
For eid experiment For each hash function { f 1 ，...f F }，f i (eid experiment )∈[0，N×B-1]Remains true. For each hash function f i ∈{f 1 ，...f F }, MPC1 will array R 1 [f i (eid experiment )]Increment [ is _ in _ exposed _ group ] 1 ]. For example, MPC1 performs operation R 1 [f i (eid experiment )]+＝[is_in_exposed_group 1 ]。
Similarly, MPC2 will map array R2[ f [ ] i (eid experiment )]Increment [ is _ in _ exposed _ group ] 2 ]. For example, MPC2 performs operation R 2 [f i (eid experiment )]+＝[is_in_exposed_group 2 ]。
To get eid control Inserted into the same bloom filter for each hash function f i ∈{f 1 ，...f F }, MPC1 will array R 1 [f i (eid control )]Increment [ is _ in _ hold _ group [ ] 1 ]. For example, MPC1 performs operation R 1 [f i (eid control )]+＝[is_in_holdback_group 1 ]。
Similarly, MPC1 will mix array R 2 [f i (eid control )]Increment [ is _ in _ hold _ group [ ] 2 ]. For example, MPC1 performs operation R 2 [f i (eid control )]+＝[is_in_holdback_group 2 ]。
In addition, MPC2 pre-selects a pseudo-random function (PRF), where PRF: zxz → {0,1}. In addition, MPC2 selects a random number for the digital component response. Here, R 2 Denotes MPC2 is in Z 2 The resulting bloom filter in (1): r 2 ′[i]= PRF (nonce, i). In some embodiments, these steps are performed by MPC1 instead of MPC2.
MPC2 then constructs the scrambling code circuit of the AND gate to construct the functionceil(log 2 (number _ of _ cached _ bids) + 1) so that MPC1 can compute the result array R of its secret shares 1 ′[i]So that R is 1 ′[i]And R 2 ′[i]Is a secret Boolean message R [ i ]]Z > 0 2 Two additive secret shares of (1). This scrambling circuit calculation requires a round trip calculation between MPC1 and MPC2.
In step 4, the MPC cluster 130 returns a digital component response to the application 112. Depending on the value of m determined above, the response includes eid associated with the winning selected number component in the actual selection process control Or eid associated with the winning selected number component in the counterfactual selection process holdback Or alternatively, does not include either of the two experiment identifiers.
MPC1 and MPC2 then adding R 1 ' and the random number are each returned to the application 112 as part of the digital component response. If MPC1 receives the original digital component request from application 112 and MPC2 needs to return its results to the browser via MPC1, MPC2 may digitally sign and then encrypt its results and return PublicKeyEncrypt (5 ign (MPC 2_ private _ key), browse _ public _ key) to the browser via MPC1 in order to prevent MPC1 from eavesdropping or forging the results of MPC2. In some embodiments, MPC1 may also encrypt and then digitally sign its results.
In step 5 of process 400, application 112 accumulates the peids and associated metadata for the exposed or reserved groups in local storage. For example, application 112 accumulates experiment identifiers in its cache. The application can be associated with exposed groups of some experiments, as well as reserved groups of other experiments.
In step 6 of process 400, the rendered digital component, which is associated with application 112, sends a report to DSP150 through an aggregate measurement function, such as an aggregate measurement API native to application 112. The report can contain a list of peids associated with the report. For example, the report can include previously constructed bloom filters and measurements associated with the rendering of the digital component, such as the amount of time the digital component was shown, whether the user's attention was focused on the digital component, whether other applications are running, and whether the digital component is visible, among other measurements.
In step 7 of process 400, after a threshold number of reports have been accumulated, DSP150 uploads the received reports to aggregated reporting server 180 in secret shares. For example, the DSP150 can periodically upload several encrypted reports in secret shares to the aggregated report server 180 so that the DSP150 does not have access to the clear text of the reports. DSP150 can detect whether a threshold number of reports have been accumulated and upload the reports to aggregated reporting server 180 in batch (i.e., secret share) reports.
In step 8 of process 400, DSP150 queries aggregate reporting server 180 to obtain the metrics associated with each peid. For example, DSP150 can provide requests for various analyses, measurements, and other parameters from aggregated reporting server 180.
Fig. 5 is a flow diagram illustrating an example process 500 for issuing and implementing a privacy preserving experiment monitoring mechanism. The operations of process 500 can be implemented, for example, by application 112, MPC cluster 130, DSP150, and/or aggregated reporting server 180. The operations of process 500 can also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of process 500.
The process 500, in response to receiving the request and continuing with a first server of the secure MPC system, performs a privacy preserving selection process in cooperation with a second server of the secure MPC system to select a first winning digital component from a set of digital components, where each digital component has a corresponding (i) unique experiment identifier and (ii) unique control identifier (504). The set of digital components can include cached digital components having cached lookup keys that match lookup keys included with the request. That is, the set of digital components can be cached digital components for which context signals defined by the requested lookup key match context signals defined by the cached lookup key for the digital component. The first MPC system can compare the requested lookup key to the cached lookup key for the cached digital component.
Performing the privacy-preserving selection process includes, for each digital component in the set of digital components, determining, in cooperation with the second server and based on the set of eligibility rules, a first secret share of a candidate parameter that represents whether the digital component is an eligible candidate for selection in the privacy-preserving selection process (506).
For example, the selection process includes determining whether a digital component is a candidate for selection based on a set of qualification rules. As a result of this candidate determination process, each of MPC1 and MPC2 holds a share of a candidate parameter is _ dc _ a _ candidate for each digital component in the set of digital components, which indicates for each digital component whether the digital component is a candidate for selection. In this manner, the computers of the MPC cluster 130 do not explicitly maintain the actual qualification or candidate list of candidates. In some embodiments, each of the two servers is capable of plaintext caching candidates (not privacy sensitive).
In some embodiments, some portion of the cached candidates may be sensitive information, and thus, neither of the two servers can save the candidates in the clear. In this case, sensitive information of the cached digital component can be preserved in the secret shares.
Similar to the process 200 described above with respect to FIG. 2, each computing system MPC1 and MPC2 is capable of storing, for each condition of each condition digital component (e.g., a digital component having at least one condition), a respective secret share of a parameter for each condition of the digital component. In this way, neither computing system NPC1 nor NPC2 knows the values of the parameters unambiguously, as long as at least one MPC computing system is honest. Each digital component can be conditioned by zero or more conditions. For a given digital component selection process, some digital components can have different conditions and/or a different number of conditions than other digital components.
Although some example conditions are provided above, other conditions can be used. In general, computing systems MPC1 and MPC2 are capable of calculating secret shares of a condition parameter using a secure MPC process. The criteria and techniques for determining the condition parameters can vary. In some embodiments, a secret share of a condition parameter can be received from another computing system, e.g., so that computing systems MPC1 and MPC2 do not compute the condition parameter.
The computing systems MPC1 and MPC2 are able to use the secret shares of the condition parameters to determine whether the condition digital component is a candidate for the digital component selection process. The computing systems MPC1 and MPC2 are able to compute the candidate parameter is _ dc _ a _ candidate for each conditional digital component i using the secret share of the conditional parameter(s) for the conditional digital component i Is given. In general, if a conditional digital component is conditioned on each of the conditions described above, candidate parameters for digital component i can be calculated by determining, for example, whether all positive conditions are true, e.g., one in some embodiments or non-zero in other embodiments, and whether at least one negative condition is false, e.g., zero, as described above with respect to steps 2 and 3 of process 400 of fig. 4.
Since the value of each condition parameter is in a secret share, the computing systems MPC1 and MPC2 are able to cooperate in a secure MPC process using round-trip Remote Process Calls (RPCs) to determine a corresponding secret share [ is _ dc _ a _ secret ] of a candidate parameter of the digital component i using the secret share of the condition parameter i,1 ]And [ is _ dc _ a _ candidate i,2 ]. Can be used forDetermining the secret share [ is _ dc _ a _ candidate ] of a candidate parameter of a digital component i can be performed using any suitable secret share algorithm for determining a logical AND operation i,1 ]And [ is _ dc _ a _ candidate i,2 ]. For example, as described above, GMW protocol or garbled circuit may be used. The computing systems MPC1 and MPC2 are able to determine secret shares of the candidate parameters using only secret shares of the condition parameters for those conditions. With the secure MPC process complete, the computing system MPC1 saves the first secret share [ is _ dc _ a _ candidate ] of the candidate parameter for the ith conditional digital component i,1 ]The computing system MPC2 holds a second secret contribution [ is _ dc _ a _ candidate ] for the candidate parameter of the ith conditional digital component i,2 ]。
In some embodiments, computing systems MPC1 and MPC2 use a garbled circuit protocol to evaluate the condition of each digital component. In this example, one of computing systems MPC1 or MPC2 is capable of constructing a garbled circuit. For this example, assume that computing system MPC1 constructs a garbled circuit. Computing system MPC1 knows its own secret shares and also knows that only one possible bit pattern has to be preserved for the secret shares of computing system MPC2 in order for the candidate parameters of the digital component to become true, or one.
The computing system MPC1 determines the order of the digital components based on a selection criterion, which can be a clear text value, associated with each digital component. Similarly, computing system MPC2 determines the order of the digital components based on selection criteria. The selection criterion can also be referred to as a selection value. The two sequences should be identical because the inputs to the ranking process are identical on both computing systems MPC1 and MPC2. Each computing system MPC1 and MPC2 is capable of determining the order of the digital components. Each order can include a candidate numeric component previously evaluated for candidacy and other numeric components. The order can be from the digital component with the highest selection value to the digital component with the lowest selection value. In some embodiments, the selection value for the sequence can be a value to be provided to the publisher 140 of the resource through which the selected digital component is to be displayed, e.g., after any sharing with the DSP150 and/or SS P170, plus any applicable boost.
Since the selection values are in the clear, the computing systems MPC1 and MPC2 do not have to perform any round-trip calculations to determine the order of the digital components. Instead, each computing system MPC1 and MPC2 is capable of independently ordering the selection values. If the selection values are stored as secret shares at each computing system MPC1 and MPC2, and each computing system MPC1 and MPC2 has a respective secret share for each selection value, then the computing systems MPC1 and MPC2 can perform a secure MPC process using round-trip computations to order the selection values. If there is a tie between two or more selection values, computing systems MPC1 and MPC2 are able to use other metadata to break the tie deterministically for the digital components corresponding to these selection values.
Computing systems MPC1 and MPC2 determine a secret share of the accumulated value for each candidate digital component. Conceptually, the cumulative value for a given numerical component represents the total number of candidate numerical components from the top of the order to the selection value for the given numerical component, excluding the given numerical component even if the given numerical component is a candidate. That is, the cumulative value represents a number of candidate digital components that are more eligible for selection than the given digital component. This concept is shown in table 1 below.
Sorted selection values | is_dc_a_candidate | Cumulative value (acc) | Is the cumulative value equal to 0? |
Highest point of the design | 0 | 0 | 1 |
Second highest | 1 | 0 | 1 |
Third highest | 0 | 1 | 0 |
Height four | 1 | 1 | 0 |
…… | …… | …… | …… |
TABLE 1
In some embodiments, the cumulative value for a given digital component represents the total number of candidate digital components from the top of the order to the given digital component that is included if the given digital component is a candidate. In this example, the fourth column would indicate whether the cumulative value is equal to one instead of zero. For the sake of brevity, the remaining discussion will exclude a given numerical component even if it is a candidate, in the case of the first example where the cumulative value of the given numerical component represents the total number of candidate numerical components from the top of the order to the given numerical component.
Conceptually, in table 1, for each digital component having a candidate parameter is _ dc _ a _ candidate equal to 1, the cumulative value (acc) increases as it progresses from the top of the order to the bottom of the order. The calculation of the accumulated value acc is performed in secret shares, as described below. For example, since the candidate parameter is _ dc _ a _ candidate for the highest selection value is equal to zero, the accumulated value acc for the digital component having the highest selection value is zero. Since the candidate parameter is _ dc _ a _ candidate for the second highest digital component is equal to one, but none of the selected values higher than the second highest digital component has the candidate parameter is _ dc _ a _ candidate equal to one, the accumulated value acc for the second highest digital component is also zero. Moving downwards in order, the accumulated value acc of the candidate parameter is _ dc _ a _ candidate for the third highest selected digital component is incremented to a value of one, based on the candidate parameter is _ dc _ a _ candidate for the second highest selected value having a value of one. Since the candidate parameter is _ dc _ a _ candidate for the third highest digital component is zero, the accumulated value acc for the fourth digital component is not incremented and has the same value zero as the third highest digital component.
Using table 1, computing systems MPC1 and MPC2 will select the digital component corresponding to the selected value for which the overall candidate parameter is _ dc _ a _ candidate has a value of one and the cumulative value acc has a value of zero for distribution to client device 110, as indicated in the fourth column of table 1. This represents the digital component corresponding to the highest ranking selection value for which the candidate parameter is _ dc _ a _ candidate has a value of one. Since the candidate parameter is _ dc _ a _ candidate is in the secret shares of the computing systems MPC1 and MPC2 to maintain user privacy and ensure that user data is not leaked, the computing systems MPC1 and MPC2 determine the secret shares of the accumulated value acc of each digital component and use round-trip computation to determine which digital component's accumulated value acc equals zero and the candidate parameter is _ dc _ a _ candidate equals one.
The computing systems MPC1 and MPC2 are able to independently determine their secret shares of the accumulated value acc of each digital component without any round-trip computation depending on the secret share algorithm in some embodiments. For example, the computing system MPC1 can determine a first share [ acc ] of the accumulated value acc for each digital component i by traversing all digital components in order from highest to lowest and summing the candidate parameters is _ dc _ a _ candidate of the digital components along the way i,1 ]As hereinbefore described with reference toAs described with reference to table 3. Similarly, the computing system MPC1 is able to determine a second share [ acc ] of the accumulated value acc for each digital component i by traversing all digital components in order from highest to lowest and summing the candidate parameters is _ dc _ a _ candidate of the digital components along the way i,2 ]。
Computing systems MPC1 and MPC2 determine, for each digital component, a secret share of a result indicating whether the accumulated value has a specified value. The specified value can be the value zero as shown in columns 3 and 4 of table 1. As described above, the digital component whose accumulated value is zero and whose overall candidate parameter is _ dc _ a _ candidate is one is the digital component having the highest selected value among the candidate digital components.
The computing systems MPC1 and MPC2 are capable of performing multiple rounds of computations, e.g., multiple RPCs, as part of a secure MPC process to compute an equal operation acc in terms of secret shares of each digital component i i =0. The equality operation is used to determine the cumulative value acc of the digital component i i Whether or not to have a value of zero. At the end of the process, the computing system MPC1 has a result acc for each digital component i i =0, and the computing system MPC2 has a result acc for each digital component i =0 another secret share.
Computing systems MPC1 and MPC2 determine a winner parameter is _ dc _ the _ winner for each digital component i i Is given. The computing systems MPC1 and MPC2 can be based on the accumulated value acc for each digital component i i Secret share =0 and candidate parameter is _ dc _ a _ candidate for each digital component i i To determine the winner parameter is _ dc _ the _ winner i . Winner parameter is _ dc _ the _ winner for each digital component i i Can be a boolean value that indicates whether the digital component i is the winner of the selection process, e.g., whether the digital component i is selected for distribution to the client device 110 in response to a digital component request.
In some embodiments, computing systems MPC1 and MPC2 are capable of executing a secret share multiplication protocol to compute a winner parameter [ is _ dc ] in terms of secret shares for each selected value_the_winner i ＝＝(is_dc_a_candidate i ×＝(acc i = 0)). This can include computing one RPC between the systems MPC1 and MPC2 to multiply the two secret shares. At the end of the MPC process, the computing system MPC1 has the value denoted as [ is _ dc _ the _ winner [ ] i,1 ]＝[is_dc_a_candidate i,1 ]x([acc i,1 ]= 1) result is _ dc _ the _ winner i A secret share of (a). Similarly, computing system MPC2 has a value denoted as [ is _ dc _ the _ winner [ ] i,2 ]＝[is_dc_a_candidate sv,2 ]x([acc i,2 ]= 0) result is _ dc _ the _ winner i Another secret share of (a). Note that for all digital components, at most one digital component has a winner parameter is _ dc _ the _ winner equal to one i The digital component is the digital component selected for distribution to the client device 110. All other digital components will equal zero. In some embodiments, computing systems MPC1 and MPC2 are capable of executing secret share logical operation protocols (e.g., GMW or garbled circuit) to compute the winner parameter [ is _ dc _ the _ winner ] in secret shares for each selected value i ＝＝(is_dc_a_candidate i AND(acc i ＝＝0))。
The process 500 continues with transmitting, by the first server of the secure MPC system, a response to the request for digital content to the application on the user device (514). For example, MPC1 in the MPC cluster 130 transmits a response to the request for the digital component to the application 112. In some embodiments, MPC1 can transmit its own first and second, encrypted secret shares from MPC2 to application 112 as responses to requests for digital components.
As described above, the MPC cluster 130 can use the garbled circuitry for the secure MPC process to determine whether the digital component is a candidate for the selection process, e.g., to determine a secret share of the candidate parameter for the digital component. Since each digital component can have many conditions, for example, in some cases over 50, there are many gates in the scrambling circuit of each digital component. Reducing the number of gates will reduce the bandwidth cost of implementing the secure MPC protocol and significantly reduce the delay in selecting digital components.
There are a large number of duplicate calculations AND logical AND calculations between the same pair of inputs or intermediate boolean variables, e.g., for the same digital component or for groups of digital components. A greedy algorithm can be used to avoid repeated computation of sub-expressions AND thus reduce the number of AND operations.
In the above process 500, assume that the candidate parameter is _ dc _ a _ candidate is in Z P In (1), the value is zero or one. The MPC cluster 130 will iterate through all cached digital components from highest to lowest from the digital component with the highest selection value (e.g., the portion attributed to the publisher). For each cached digital component i, the MPC cluster 130 calculates the cumulative value acc i Then calculate Z P Acc of (1) i =0. The result is converted back to Z 2 . From Z 2 To Z p The conversion and return of (a) increases protocol complexity. Z using scrambling code circuitry p Equal test of acc in i =0 can involve log2 (p) gates, which is a significant performance and bandwidth cost.
The MPC cluster 130 can maintain the candidate parameter is _ dc _ a _ candidate in Z2 i And the accumulated value acc is calculated in Z2 with boolean circuits at much lower performance and bandwidth cost i Then acc i =0. For this purpose, the accumulated value acc i The limit is two possible values: zero if no candidate digital component has a higher selection value than the current selection value of the current digital component i, or one if at least one candidate digital component has a higher selection value than the current selection value of the current digital component i. In the process 500 of the graph 500, the cumulative value may be greater than one because the cumulative value is incremented for each candidate number component.
With the updated semantics of the accumulated value acc, the MPC cluster 130 is able to compute the winner parameter is _ dc _ the _ winner i While traversing all cached iterations of the digital component from the highest selection value to the lowest selection value, as described below. The accumulated value acc for the digital component with the highest selected value is always zero. No calculation is required.
The accumulated value acc for the digital component having the second highest selection value is always equal to the value of the candidate parameter is _ dc _ a _ candidate for the digital component having the highest selection value. This also does not require calculation.
Assume that the MPC cluster 130 has calculated the cumulative value acc for the digital component with the nth highest selected value. The accumulated value acc for the digital component with the (n + 1) th highest selection value can be calculated as acc n+1 ＝acc n OR is_dc_a_candidate n . The MPC cluster 130 can further calculate the winner parameter is _ dc _ a _ winner n+1 ＝is_dc_a_candidate n+1 AND NOT acc n+1 。
FIG. 6 is a block diagram of an example computer system 600 that can be used to perform the operations described above. The system 600 includes a processor 610, a memory 620, a storage device 630, and an input/output device 640. Each of the components 610, 620, 630, and 640 can be interconnected, for example, using a system bus 650. The processor 610 is capable of processing instructions for execution within the system 600. In some implementations, the processor 610 is a single-threaded processor. In another implementation, the processor 610 is a multi-threaded processor. The processor 610 is capable of processing instructions stored in the memory 620 or on the storage device 630.
The storage device 630 is capable of providing mass storage for the system 600. In some implementations, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 can include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices (e.g., cloud storage) over a network, or some other mass storage device.
Input/output device 640 provides input/output operations for system 600. In some implementations, the input/output devices 640 can include one or more network interface devices, such as an ethernet card, a serial communication device, such as, and RS-232 port, and/or a wireless interface device, such as, and 802.11 card. In another embodiment, the input/output devices can include driver devices configured to receive input data and transmit output data to external devices 660, such as keyboards, printers, and display devices. However, other implementations can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and so forth.
Although an example processing system has been described in FIG. 6, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or media) for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium can be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage media can also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification can be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" encompasses various apparatuses, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple of the foregoing apparatuses or combinations thereof. An apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment are capable of implementing a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program can, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, the computer can be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse and a trackball, by which the user can provide input to the computer. Other types of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client device having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an internetwork (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to a user interacting with the client device and receiving user input). Data generated at the client device (e.g., a result of the user interaction) can be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
The following is a non-exhaustive list of various aspects of the present disclosure.
The method of aspect 1, wherein the data representing whether the application is in the experimental group or the control group of the digital component is represented by a bloom filter.
for each digital component in the set of digital components:
adding to the bloom filter a corresponding (i) unique experiment identifier and (ii) unique control identifier.
Aspect 4 the method of any of aspects 1 to 3, wherein determining whether the application is part of a control group or a trial group with respect to the first winning digital component comprises:
determining, for each experiment in the set of experiments associated with the digital component, whether the application is part of a control group or an experimental group with respect to the first winning digital component.
Aspect 5. The method according to any one of aspects 1 to 4, wherein the set of qualification rules includes two or more qualification rules,
wherein the one or more parameters of the first qualification rule are determined based on an experimental design based on a number of mutually orthogonal Latin squares of a particular size, an
Wherein the first qualification rule specifies a first range of values for the one or more parameters.
updating the one or more parameters of the first qualification rule to specify a second range of values for the one or more parameters based on the experimental design; and
performing, by the first server of the secure MPC system and in cooperation with the second server of the secure MPC system, a counterfactual selection process to select a second winning selection criterion from the set of selection criteria by applying the set of qualification rules including the updated first qualification rule.
Aspect 7 the method of any of aspects 1 to 6, wherein transmitting, by the first server of the secure MPC system, the response to the request for digital content to the application on the user device comprises:
receiving, by the first server of the secure MPC system, an encrypted secret share of the response to the request for digital content from the second server of the secure MPC system;
encrypting, by the first server of the secure MPC system, a second secret share of the response to the request for digital content to generate an encrypted second secret share of the response; and
transmitting, by a first server of the secure MPC system, the encrypted secret share of the response and the encrypted second secret share of the response to the application on the user device.
The method according to any one of aspects 1 to 7, wherein the set of qualification rules includes one or more qualification rules,
wherein the set of qualification rules includes at least one positive condition and at least one negative condition, and
wherein the set of selection criteria is stored at the secure MPC system.
Aspect 9. The method according to any of aspects 1 to 8, wherein attaching the unique experiment identifier associated with the selection criterion to a response to the request for digital content comprises adding the unique experiment identifier to a list of unique identifiers comprised by the response, and
wherein attaching the unique control identifier associated with the selection criteria to the response to the request for digital content comprises adding the unique control identifier to the list of unique identifiers, and
wherein said list of unique identifiers is represented using a bloom filter.
Aspect 10 the method according to aspect 9, further comprising:
transmitting, by the application program, a first report including the list of unique identifiers to a demand-side platform associated with the selected digital content; and
uploading, by the demand side platform associated with the selected digital component, a batch of one or more reports including the first report to an aggregated reporting server.
Aspect 11. A system, comprising:
a first server of a secure multi-party computing system, and
second server of secure multi-party computing system
The system is configured to perform a method according to any one of aspects 1 to 10.
Claims (21)
1. A method for privacy preserving cross-domain experimental monitoring, comprising:
receiving, by a first server of a secure multiparty computing (MPC) system and from an application on a user device, a request for digital content, wherein the request includes a first secret share of an application instance identifier that identifies an application instance associated with the device or that identifies the device itself;
in response to receiving the request and by the first server of the secure MPC system:
performing a privacy-preserving selection process in cooperation with a second server of the secure MPC system to select a first winning digital component from a set of digital components, wherein each digital component has a corresponding (i) unique experiment identifier and (ii) unique control identifier, the performing the privacy-preserving selection process comprising:
for each digital component in the set of digital components:
determining, in cooperation with the second server and based on a set of eligibility rules, a first secret share of a candidate parameter representing whether the digital component is an eligible candidate for selection in the privacy preserving selection process;
determining, in cooperation with the second server and based on the first secret share of the application identifier and a corresponding first secret share of a candidate parameter value, a secret share of an experimental parameter that represents whether the application is in the experimental group of digital components;
generating a first secret share representing a selection result of the first winning digital component based on the first secret share of the candidate parameter for each digital component and a selection value for each digital component; and
generating a response to the request for digital content, the response comprising: the first secret share of the selection result, and, for each of one or more digital components including the first winning digital component, data indicating whether the application is in the experimental group or the control group of digital components; and
transmitting, by the first server of the secure MPC system, the response to the request for digital content to the application on the user device.
2. The method of claim 1, wherein the data representing whether the application is in the experimental group or the control group of the digital component is represented by a bloom filter.
3. The method of claim 2, wherein conducting a privacy protection selection process to select a first winning digital component comprises:
for each digital component in the set of digital components:
adding to the bloom filter a corresponding (i) unique experiment identifier if the application is in the experiment group, or (ii) unique control identifier if the application is in the control group.
4. The method of any preceding claim, wherein determining, in respect of each digital component, whether the application is part of a control group or part of an experimental group comprises:
for each experiment in the set of experiments associated with the digital component, determining with respect to each digital component whether the application is part of a control group or part of an experiment group.
5. The method of any preceding claim, wherein the qualification rules include two or more qualification rules,
wherein the one or more parameters of the first qualification rule are determined based on an experimental design based on a number of mutually orthogonal Latin squares of a particular size, an
Wherein the first qualification rule specifies a first range of values for the one or more parameters.
6. The method of claim 5, further comprising:
updating the one or more parameters of the first qualification rule to specify a second range of values for the one or more parameters based on the experimental design; and
performing, by the first server of the secure MPC system in cooperation with the second server of the secure MPC system, a counterfactual selection process to select a second winning selection criterion from the set of selection criteria by applying the set of qualification rules including the updated first qualification rule.
7. The method of any preceding claim, wherein transmitting, by the first server of the secure MPC system to the application on the user device, the response to the request for digital content comprises:
receiving, by the first server of the secure MPC system, an encrypted secret share of the response to the request for digital content from the second server of the secure MPC system;
encrypting, by the first server of the secure MPC system, a second secret share of the response to the request for digital content to generate an encrypted second secret share of the response; and
transmitting, by a first server of the secure MPC system, the encrypted secret share of the response and the encrypted second secret share of the response to the application on the user device.
8. The method of any preceding claim, wherein the set of qualification rules includes one or more qualification rules,
wherein the set of qualification rules includes at least one positive condition, and
wherein the set of selection criteria is stored at the secure MPC system.
9. The method of claim 8, wherein the set of qualification rules includes at least one negative condition.
10. The method of any preceding claim, wherein attaching the unique experiment identifier associated with the selection criterion to a response to the request for digital content comprises adding the unique experiment identifier to a list of unique identifiers included by the response, and
wherein attaching the unique control identifier associated with the selection criteria to the response to the request for digital content comprises adding the unique control identifier to the list of unique identifiers, and
wherein said list of unique identifiers is represented using a bloom filter.
11. The method of claim 10, further comprising:
transmitting, by the application program, a first report including the list of unique identifiers to a demand-side platform associated with the selected digital content; and
uploading, by the platform associated with the selected digital component, a batch of one or more reports including the first report to an aggregated reporting server.
12. The method of claim 10, further comprising:
transmitting, by the application program to an aggregated reporting server, a first report comprising the list of unique identifiers.
13. A system, comprising:
one or more processors; and
one or more memory elements comprising instructions that when executed cause the one or more processors to perform operations comprising:
receiving, by a first server of a secure multiparty computing (MPC) system, a request for digital content from an application on a user device, wherein the request comprises a first secret share identifying an application instance associated with the device or an application instance identifier identifying the device itself;
in response to receiving the request and by the first server of the secure MPC system:
performing a privacy-preserving selection process in cooperation with a second server of the secure MPC system to select a first winning digital component from a set of digital components, wherein each digital component has a corresponding (i) unique experiment identifier and (ii) unique control identifier, the performing the privacy-preserving selection process comprising:
for each digital component in the set of digital components:
determining, in cooperation with the second server and based on a set of eligibility rules, a first secret share of a candidate parameter representing whether the digital component is an eligible candidate for selection in the privacy preserving selection process;
determining, in cooperation with the second server and based on the first secret share of the application identifier and a corresponding first secret share of a candidate parameter value, a secret share of an experimental parameter that represents whether the application is in the experimental group of the digital component;
generating a first secret share representing a selection result of the first winning digital component based on the first secret share of the candidate parameter for each digital component and a selection value for each digital component; and
generating a response to the request for digital content, the response comprising: a first secret share of the selection result, and, for each of one or more digital components including the first winning digital component, data representing whether the application is in the experimental group or the control group of digital components; and
transmitting, by the first server of the secure MPC system, the response to the request for digital content to the application on the user device.
14. The system of claim 13, wherein the data representing whether the application is in the experimental group of the digital component or the control group of the digital component is represented by a bloom filter.
15. The system of claim 14, wherein conducting a privacy protection selection process to select a first winning number component comprises:
for each digital component in the set of digital components:
adding to the bloom filter a corresponding (i) unique experiment identifier if the application is in the experiment group, or (ii) unique control identifier if the application is in the control group.
16. The system of any of claims 13 to 15, wherein determining, with respect to each digital component, whether the application is part of a control group or a test group comprises:
for each experiment in the set of experiments associated with the digital component, determining with respect to each digital component whether the application is part of a control group or part of an experiment group.
17. The system of any of claims 13 to 16, further comprising the second server of the secure multi-party computing system.
18. A non-transitory computer storage medium encoded with instructions that, when executed by a distributed computing system, cause the distributed computing system to perform operations comprising:
receiving, by a first server of a secure multiparty computing (MPC) system, a request for digital content from an application on a user device, wherein the request includes a first secret share of an application instance identifier that identifies an application instance associated with the device or that identifies the device itself;
in response to receiving the request and by the first server of the secure MPC system:
performing a privacy-preserving selection process in cooperation with a second server of the secure MPC system to select a first winning digital component from a set of digital components, wherein each digital component has a corresponding (i) unique experiment identifier and (ii) unique control identifier, the performing the privacy-preserving selection process comprising:
for each digital component in the set of digital components:
determining, in cooperation with the second server and based on a set of eligibility rules, a first secret share of a candidate parameter representing whether the digital component is an eligible candidate for selection in the privacy preserving selection process;
determining, in cooperation with the second server and based on the first secret share of the application identifier and a corresponding first secret share of a candidate parameter value, a secret share of an experimental parameter that represents whether the application is in the experimental group of the digital component;
generating a first secret share representing a selection result of the first winning digital component based on the first secret share of the candidate parameter for each digital component and a selection value for each digital component; and
generating a response to the request for digital content, the response comprising: a first secret share of the selection result, and, for each of one or more digital components including the first winning digital component, data representing whether the application is in the experimental group or the control group of digital components; and
transmitting, by the first server of the secure MPC system, the response to the request for digital content to the application on the user device.
19. The non-transitory computer storage medium of claim 18, wherein the data representing whether the application program is in the experimental group or the control group of the digital component is represented by a bloom filter.
20. The non-transitory computer storage medium of claim 19, wherein conducting a privacy protection selection process to select a first winning digital component comprises:
for each digital component in the set of digital components:
adding to the bloom filter a corresponding (i) unique experiment identifier if the application is in the experiment group, or (ii) unique control identifier if the application is in the control group.
21. The non-transitory computer storage medium of any of claims 18 to 20, wherein determining, with respect to each digital component, whether the application is part of a control group or part of an experimental group comprises:
for each experiment in the set of experiments associated with the digital component, it is determined with respect to each digital component whether the application is part of a control group or an experimental group.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
IL283674A IL283674A (en) | 2021-06-03 | 2021-06-03 | Privacy-preserving cross-domain experimental group partitioning and monitoring |
IL283674 | 2021-06-03 | ||
PCT/US2022/023391 WO2022256080A1 (en) | 2021-06-03 | 2022-04-05 | Privacy-preserving cross-domain experimental group partitioning and monitoring |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115943375A true CN115943375A (en) | 2023-04-07 |
Family
ID=81387250
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280004199.8A Pending CN115943375A (en) | 2021-06-03 | 2022-04-05 | Privacy preserving cross-domain experimental group partitioning and monitoring |
Country Status (6)
Country | Link |
---|---|
EP (1) | EP4127982A1 (en) |
JP (1) | JP7448686B2 (en) |
KR (1) | KR20230003536A (en) |
CN (1) | CN115943375A (en) |
IL (1) | IL283674A (en) |
WO (1) | WO2022256080A1 (en) |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2016510913A (en) | 2013-08-09 | 2016-04-11 | トムソン ライセンシングＴｈｏｍｓｏｎ Ｌｉｃｅｎｓｉｎｇ | Privacy protection recommendation method and system based on matrix factorization and ridge regression |
US9679314B1 (en) | 2014-01-31 | 2017-06-13 | Google Inc. | Content selection using distribution parameter data |
WO2018186824A1 (en) | 2017-04-03 | 2018-10-11 | Google Llc | Reducing redirects |
US10645146B2 (en) | 2017-06-13 | 2020-05-05 | Google Llc | Transmitting high latency digital components in a low latency environment |
US20180373882A1 (en) * | 2017-06-23 | 2018-12-27 | Thijs Veugen | Privacy preserving computation protocol for data analytics |
US10917494B2 (en) | 2019-02-01 | 2021-02-09 | Google Llc | Dynamic application content analysis |
-
2021
- 2021-06-03 IL IL283674A patent/IL283674A/en unknown
-
2022
- 2022-04-05 WO PCT/US2022/023391 patent/WO2022256080A1/en active Application Filing
- 2022-04-05 JP JP2022570377A patent/JP7448686B2/en active Active
- 2022-04-05 KR KR1020227040281A patent/KR20230003536A/en unknown
- 2022-04-05 CN CN202280004199.8A patent/CN115943375A/en active Pending
- 2022-04-05 EP EP22719138.4A patent/EP4127982A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
KR20230003536A (en) | 2023-01-06 |
IL283674A (en) | 2023-01-01 |
EP4127982A1 (en) | 2023-02-08 |
JP7448686B2 (en) | 2024-03-12 |
JP2023533906A (en) | 2023-08-07 |
WO2022256080A1 (en) | 2022-12-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7438361B2 (en) | Privacy-preserving centroid model using secure multiparty computation | |
JP2023067928A (en) | Using secure multi-party computation to improve content selection process integrity | |
JP7422892B2 (en) | Processing machine learning modeling data to improve classification accuracy | |
KR20230048126A (en) | Cryptographic Security Control Using Secure Multiparty Operations | |
KR20220126767A (en) | Secure Access to Content Distribution Information Using Secure MPC and Vector Calculations | |
JP7448686B2 (en) | Privacy-preserving cross-domain experimental group division and monitoring | |
JP7471450B2 (en) | Improving the performance of secure multiparty computation | |
JP7440667B2 (en) | Flexible content selection process using secure multiparty calculations | |
JP7425222B2 (en) | Privacy Preserving Measurements Using Secure Multiparty Computation | |
US20240163341A1 (en) | Privacy preserving centroid models using secure multi-party computation | |
EP4014427B1 (en) | Online privacy preserving techniques | |
KR20220103787A (en) | Privacy technology for content selection and distribution |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |