CN116547678A - Weighted alternate paths in graphs for quantum computation - Google Patents
Weighted alternate paths in graphs for quantum computation Download PDFInfo
- Publication number
- CN116547678A CN116547678A CN202180081902.0A CN202180081902A CN116547678A CN 116547678 A CN116547678 A CN 116547678A CN 202180081902 A CN202180081902 A CN 202180081902A CN 116547678 A CN116547678 A CN 116547678A
- Authority
- CN
- China
- Prior art keywords
- matching
- quantum
- edges
- nodes
- endpoint
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/60—Quantum algorithms, e.g. based on quantum optimisation, quantum Fourier or Hadamard transforms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/08—Error detection or correction by redundancy in data representation, e.g. by using checking codes
- G06F11/10—Adding special bits or symbols to the coded information, e.g. parity check, casting out 9's or 11's
- G06F11/1008—Adding special bits or symbols to the coded information, e.g. parity check, casting out 9's or 11's in individual solid state devices
- G06F11/1048—Adding special bits or symbols to the coded information, e.g. parity check, casting out 9's or 11's in individual solid state devices using arrangements adapted for a specific error detection or correction feature
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/70—Quantum error correction, detection or prevention, e.g. surface codes or magic state distillation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/20—Models of quantum computing, e.g. quantum circuits or universal quantum computers
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B82—NANOTECHNOLOGY
- B82Y—SPECIFIC USES OR APPLICATIONS OF NANOSTRUCTURES; MEASUREMENT OR ANALYSIS OF NANOSTRUCTURES; MANUFACTURE OR TREATMENT OF NANOSTRUCTURES
- B82Y10/00—Nanotechnology for information processing, storage or transmission, e.g. quantum computing or single electron logic
Abstract
A computer-implemented method for expanding a set of matching nodes in a partially matched graph may include: a partially-matched graph having a set of matches is obtained by a computing system, the partially-matched graph including one or more edges and a plurality of nodes, the one or more edges having matching labels. The method may include: at least two unmatched nodes are obtained. The method may include: an alternate path is determined from a first unmatched node of the at least two unmatched nodes to a second unmatched node of the at least two unmatched nodes, the alternate path including at least one edge of the one or more edges. The method may include: the matching labels of at least one edge of the alternate path are inverted such that the at least two unmatched nodes are included in the matching set of the partially matched graph.
Description
Priority statement
The present application claims the benefit of priority of U.S. provisional application serial No. 63/121,027, filed on 3 months 12 of 2020, entitled "algorithm for calculating the cost of weighted alternate paths in a graph for quantum computing," which is incorporated herein by reference.
Technical Field
The present disclosure relates generally to algorithms for calculating the cost of weighted alternate paths in a graph, and more particularly to algorithms for calculating the cost of weighted alternate paths in an error graph of a quantum computing system.
Background
Quantum computing is a computational method that exploits quantum effects such as superposition of ground states and entanglement to perform some computations more efficiently than classical digital computers. In contrast to digital computers, which store and manipulate information in the form of bits (e.g., "1" or "0"), quantum computing systems may use quantum bits ("qubits") to manipulate information. Qubits may refer to quantum devices that enable superposition of multiple states (e.g., data in both a "0" state and a "1" state), and/or to superposition of data itself in multiple states. According to conventional terminology, the superposition of "0" and "1" states in a quantum system may be denoted, for example, as |0 > +b|1 >. The "0" state and the "1" state of the digital computer are similar to the |0 > ground state and the |1 > ground state of a qubit, respectively.
Disclosure of Invention
Various aspects and advantages of the embodiments of the disclosure will be set forth in part in the following description, or may be learned from the description, or may be learned through practice of the embodiments.
One example aspect of the present disclosure relates to a computer-implemented method for expanding a set of matching nodes in a partially matched graph. The method may include: a partially-matched graph having a set of matches is obtained by a computing system including one or more computing devices, the partially-matched graph including one or more edges and a plurality of nodes, the one or more edges having matching labels. The method may include: at least two unmatched nodes are obtained by a computing system. The method may include: an alternate path from a first unmatched node of the at least two unmatched nodes to a second unmatched node of the at least two unmatched nodes is determined by the computing system, the alternate path including at least one edge of the one or more edges. The method may include: the matching labels of at least one edge of the alternate path are inverted by the computing system such that the at least two unmatched nodes are included in a matching set of the partially matched graph.
In some implementations, at least one node may be a border node. The boundary nodes may have a constant boundary state such that the boundary nodes are neither matched nor isolated. The boundary nodes may be matched any suitable number of times, such as zero or more times. In some implementations, the algorithms described herein may be configured such that alternate paths from non-matching nodes to boundary nodes are found. For example, to find alternate paths, the boundary nodes may always be non-matching nodes, as the boundary nodes are always available for matching, regardless of any pre-existing matches.
Another example aspect of the present disclosure relates to a method for error detection in a quantum computing system. The method may include: a matching graph is obtained by a computing system including one or more computing devices, the matching graph including one or more edges and a plurality of nodes, the plurality of nodes corresponding to a plurality of qubits of a quantum computing system, the one or more edges having matching labels. The method may include: an error detection signal is obtained by a computing system that includes a first endpoint and a second endpoint, the first endpoint and the second endpoint corresponding to a first qubit and a second qubit of the plurality of qubits. The method may include: an alternate path from the first endpoint to the second endpoint is determined by the computing system, the alternate path including at least one edge of the one or more edges. The method may include: at least one error location in the quantum computing system is detected by the computing system based at least in part on the alternating paths.
Another example aspect of the disclosure relates to a quantum computing system. The quantum computing system may include: quantum hardware comprising a plurality of qubits. The quantum hardware may include one or more classical processors. The one or more classical processors are configured to perform operations. The operations may include: a matching graph is obtained that includes one or more edges and a plurality of nodes, the plurality of nodes corresponding to a plurality of qubits, the one or more edges having matching labels. The operations may include: an error detection signal is obtained that includes a first endpoint and a second endpoint that correspond to a first qubit and a second qubit of the plurality of qubits. The operations may include: an alternate path from the first endpoint to the second endpoint is determined, the alternate path including at least one of the one or more edges. The operations may include: at least one error location in the quantum hardware is detected based at least in part on the alternating paths.
Other aspects of the disclosure relate to various systems, methods, apparatus, non-transitory computer-readable media, computer-readable instructions, and computing devices.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and, together with the description, serve to explain the principles of interest.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art will be set forth in the specification with reference to the accompanying drawings, in which:
FIG. 1 depicts an example quantum computing system according to an example embodiment of the present disclosure;
FIG. 2 depicts an example qubit grid in accordance with example embodiments of the disclosure;
FIG. 3 depicts an example diagram according to an example embodiment of the present disclosure;
FIGS. 4A and 4B depict example diagrams including error information, according to example embodiments of the present disclosure;
FIG. 5 depicts a flowchart of an example method for expanding a set of matching nodes in a partially matched graph, according to an example embodiment of the disclosure;
FIG. 6 depicts a flowchart of an example method for error detection in a quantum computing system, according to an example embodiment of the present disclosure; and
FIG. 7 depicts an example computing system according to an example embodiment of the disclosure.
Detailed Description
Example aspects of the present disclosure relate to systems and methods for expanding the matching (e.g., matching sets of matched and/or isolated nodes and/or edges) of partially matched graphs and/or computing the cost of weighted alternate paths in graphs. In particular, the systems and methods described herein may be used for error detection in quantum computing systems that include one or more qubits. The graph may include one or more nodes and/or one or more edges. Each edge may be shared by two nodes. For example, each edge may connect a first node to a second node. A graph (e.g., one or more edges) may have a set of matches (e.g., a set of nodes and/or edges) such that each edge is one of "matched" or "unmatched. Further, the set of matches may include nodes that are one of matches or orphans. Two nodes are considered to be matching if they share a matching edge. A node may share a matching edge with at most one other node. For example, depending on the constraints of the graph, a node may be linked to at most one matching edge. As another example, the set of matching edges may be a set of edges without nodes or vertices that are common to both edges. Nodes without matching edges are orphaned nodes. In some implementations, the edges may be weighted edges. For example, each edge may have an associated weight.
It should be appreciated that example aspects of the present disclosure will be discussed with reference to matching labels at nodes (e.g., matching node versus orphan node) and edges (e.g., matching edge versus unmatched edge). In some implementations, matches may be represented using only matching labels, and matching nodes may generally refer to nodes sharing matching edges. Thus, a pair of matching nodes may refer to two nodes that match an edge. Additionally and/or alternatively, a node tag may be applied to a node indicating that the node is matched, orphaned, and/or unmatched.
According to example aspects of the disclosure, one or more unmatched nodes may be introduced and/or otherwise presented in the graph. The matching of the graph may be extended to include unmatched nodes. As used herein, "unmatched nodes" refer to nodes that neither match nor are isolated, such as nodes that are not currently included in the matching set of the graph. For example, a partially matched graph may include one or more unmatched nodes that neither match nor are isolated when the graph is partially matched. The unmatched nodes may be connected only to unmatched edges, but may become matched or orphaned in the solution of a partially matched graph. For example, the set of matching nodes and/or edges in the partially matched graph may be expanded to include unmatched nodes, such as by changing the matching labels of the edges in the graph to include some or all of the unmatched nodes. The set of nodes and/or edges with matches may be expanded while satisfying one or more constraints of the matches. As one example, the constraint may be that the node is part of a matching pair with just one other node or is orphaned. As another example, a constraint may be that each node may touch at most one matching edge.
Additionally and/or alternatively, matching of the graph may be extended with reference to a cost function, such as optimizing (e.g., minimizing and/or maximizing) the cost function. For example, in some implementations, the cost function may be based at least in part on edge weights of the matching edges. For example, the cost function may seek to minimize the sum of edge weights of the set of matching edges. When edges are included in the matching set, the cost function may reward lower edge weights and/or penalize higher edge weights. As another example, a cost function may be selected to minimize the cost of alternating paths from a first unmatched node to a second unmatched node.
Example aspects of the present disclosure may include an algorithm for computing a reassignment of a matching label that extends a partial match of a graph given the partial match (e.g., an assignment of the matching label that covers a subset of nodes and/or edges in the graph). The algorithm may extend the partial match to a full match through one or more iterations of the algorithm. For example, the algorithm may be repeated several iterations until each node and/or edge in the graph has a matching and/or isolated assignment to provide a complete match for the graph.
Specifically, the algorithm may include: an alternate path, such as a minimum cost alternate path, and/or the cost of an alternate path from one unmatched node to another node, such as a second unmatched node, is found. As used herein, an alternate path is a sequence of edges and/or nodes that alternate edges marked as unmatched and matched. In particular, if the matching labels along the edges of the alternate paths terminating at the unmatched nodes are inverted, the matching is still valid and the unmatched nodes are included in addition to each existing matching node. If the alternate path spans two unmatched nodes, both unmatched nodes are included in the new match when the matching label is inverted. Furthermore, the total cost of matching edges varies with the cost of alternating paths. In some implementations, the cost of alternating paths may be the sum of the weights of all non-matching edges in the path minus the sum of the weights of all matching edges in the path. Thus, by enhancing the path of minimum cost, unmatched nodes are included in the matching of the lowest total cost increase. This can be applied repeatedly to find a globally optimal weighted match. In some implementations, path costs may be determined by constructing a tree rooted at the unmatched node. Then, for each node reachable through the graph, a minimum cost alternate path to that node and a path (tree) to that node can be established. This may prevent the formation of loops, which is beneficial for quantum computing applications. In some implementations, the tree may be generated by a Bellman-Ford (Bellman-Ford) algorithm that is modified to avoid loops when generating the tree. For example, the algorithm may be modified such that nodes that are ancestors of the current node are not accessed as candidates for the next node in the tree.
According to example aspects of the disclosure, the algorithm may be applied to error detection in a quantum computing system. For example, the algorithm may be implemented by an error detection and/or error correction system for identifying errors in quantum computing. For example, in some implementations, the nodes of the matching graph may correspond to the locations of one or more qubits in the quantum computing system. The existing match graph may be a match graph from a previous point in time. As one example, the one or more qubits may be arranged in a grid or array of qubits. For example, a node in the graph may correspond to coordinates of a qubit within an array of qubits. The weights of the edges in the graph may correspond to the likelihood of an error at some point in the quantum computing system. These weights may be learned from historical usage data of the quantum computing system, estimated from simulations or designs, or established by any other suitable method. For example, a higher weight may be assigned to points where there is less likelihood of error, such that the least cost path is also the path most likely to be error. The weights may be pre-existing when the quantum computer is running.
In some implementations, the qubit grid may include one or more computation qubits and one or more auxiliary qubits. For example, in some implementations, the qubit grid may be an interleaved grid of auxiliary qubits and computation qubits. The computation qubit may perform a computation for evaluating one or more quantum algorithms. Additionally and/or alternatively, the auxiliary qubit may be configured to monitor the parity of the quantum computing system (e.g., the computation qubit) to detect errors in the quantum computing system.
For example, in some implementations, the computing system may receive error information including coordinates describing endpoints of the non-matching parity. For example, the coordinates may correspond to the locations of auxiliary qubits in a qubit grid where unmatched parity is detected. In some cases, the error information may be received in real-time, e.g., in time slices and/or continuously. For example, each time slice may correspond to a set of quantum gate operations at each of the plurality of qubits. The error information may be received with microsecond accuracy (e.g., half of a microsecond). For example, in some embodiments, the computing system may receive error information for endpoint pairs that include non-matching parity in real-time.
Systems and methods according to example aspects of the present disclosure may support addressing minimum cost alternate paths between endpoint pairs. The minimum cost alternate path may indicate the most likely source of error at the endpoint that results in a mismatch parity. Thus, the minimum cost alternate path may indicate the location of the computation qubit where the error occurred. For example, the minimum cost alternate path may include an unstable (erratic) qubit. In some cases, these errors may propagate through quantum computing, so it may be beneficial to detect and/or correct in time.
For purposes of illustration, example aspects of the present disclosure are described herein with respect to quantum computing applications and error detection. Example aspects of the present disclosure may be beneficial for evaluating errors in quantum computing systems. Furthermore, the general problem of weighted matching in the graph may be useful in other applications (including many engineering disciplines). Example aspects of the present disclosure may be applied to such other applications in accordance with the present disclosure.
Systems and methods according to example aspects of the present disclosure may provide a number of technical effects and benefits, including, but not limited to, improvements to computing technologies (e.g., quantum computing technologies). For example, example aspects of the present disclosure may provide reduced evaluation time of error information, particularly for smaller graphs, such as graphs including nodes of orders of magnitude comparable to the order of magnitude of qubits in example quantum computing systems. This is particularly beneficial in quantum computing applications where it may be desirable to quickly solve the small-scale problem. For example, it may be desirable to solve the two-endpoint error information problem as quickly as possible to meet the precise timing requirements of the quantum computing control system, e.g., fast enough so that errors can be accounted for and/or corrected. Particularly in these cases, systems and methods according to example aspects of the present disclosure may have reduced evaluation time compared to some existing methods (e.g., the Blossom algorithm).
Example embodiments of the present disclosure will now be discussed in more detail with reference to the accompanying drawings. As used herein, the term "about" used in connection with a numerical value means within 20% of the numerical value.
Fig. 1 depicts an example quantum computing system 100. Example system 100 is an example of a system on one or more classical computers or quantum computing devices at one or more locations, where the systems, components, and techniques described below may be implemented. Using the disclosure provided herein, one of ordinary skill in the art will appreciate that other quantum computing structures or systems may be used without departing from the scope of the disclosure.
The system 100 includes one or more classical processors 104 in data communication with quantum hardware 102. Quantum hardware 102 includes components for performing quantum computation. For example, quantum hardware 102 includes a quantum system 110, a control device 112, and a readout device 114 (e.g., readout resonator). Quantum system 110 may include one or more multi-level quantum subsystems, such as qubit registers. In some implementations, the multi-level quantum subsystem may include superconducting qubits, such as flux qubits, charge qubits, transport qubits, gmon qubits, and the like.
The type of multi-level electronics subsystem utilized by the system 100 may vary. For example, in some cases, it may be convenient to include one or more readout devices 114 attached to one or more superconducting qubits (e.g., transport qubits, flux qubits, gmon qubits, xmon qubits, or other qubits). In other cases, ion traps, photonic devices, or superconducting cavities may be used (e.g., whereby states may be prepared without the need for qubits). Other examples of implementations of the multi-level quantum subsystem include flux qubits, silicon quantum dots, or phosphorous impurity qubits.
The quantum circuit may be constructed by a plurality of control lines coupled to one or more control devices 112 and applied to a qubit register included in the quantum system 110. Example control devices 112 operating on qubit registers may be used to implement quantum gates or quantum circuits having multiple quantum gates, such as, for example, a Pauli (Pauli) gate, a Hadamard (Hadamard) gate, a Controlled Not (CNOT) gate, a controlled phase gate, a T gate, a multiple quantum bit quantum gate, a coupler quantum gate, and so forth. The one or more control devices 112 may be configured to operate the quantum system 110 via one or more corresponding control parameters (e.g., one or more physical control parameters). For example, in some implementations, the multi-stage quantum subsystem may be a superconducting qubit, and the control device 112 may be configured to provide control pulses to the control lines to generate magnetic fields to adjust the frequency of the qubit.
Quantum hardware 102 can also include readout device 114 (e.g., readout resonator). The measurement results 108 obtained via the measurement device may be provided to the classical processor 104 for processing and analysis. In some implementations, quantum hardware 102 may include quantum circuitry, and control device 112 and readout device 114 may implement one or more quantum logic gates operating quantum system 102 with physical control parameters (e.g., microwave pulses) sent through wires included in quantum hardware 102. Other examples of control devices include arbitrary waveform generators, in which a DAC (digital-to-analog converter) creates a signal.
Readout device 114 may be configured to perform quantum measurements on quantum system 110 and send measurement results 108 to classical processor 104. Further, quantum hardware 102 may be configured to receive data from classical processor 104 specifying physical control qubit parameter values 106. Quantum hardware 102 can use received physical control qubit parameter values 106 to update actions of control device 112 and readout device 114 on quantum system 110. For example, quantum hardware 102 may receive data specifying new values representing voltage strengths of one or more DACs included in control device 112, and may update the actions of the DACs on quantum system 110 accordingly. Classical processor 104 may be configured to initialize quantum system 110 to an initial quantum state, for example, by sending data specifying an initial set of parameters 106 through vector sub-hardware 102.
The readout device 114 may use the difference in impedance for the |0 > state and the |1 > state of an element (e.g., a qubit) of the quantum system to measure the state of the element (e.g., a qubit). For example, due to the non-linearity of the qubit, the resonance frequency of the readout resonator may take on different values when the qubit is in state |0 > or state |1 >. Thus, the microwave pulse reflected from the readout device 114 carries an amplitude and phase shift that depend on the qubit state. In some implementations, a Purcell filter may be used in conjunction with readout device 114 to block microwave propagation at the qubit frequency.
Fig. 2 depicts an example qubit grid 200 according to an example embodiment of the disclosure. As shown in fig. 2, the qubit grid 200 may be an interleaved qubit grid of one or more auxiliary qubits 202 (shown with solid circles) and/or one or more computation qubits 204 (shown with unshaded circles). The auxiliary qubit 202 may be configured to measure errors (e.g., parity) in the output of the computation qubit 204. For example, some of all of the computation qubits 204 may have a time sequence of quantum gate operations that define a quantum algorithm across some or all of the computation qubits 204. Errors in the execution of these quantum gate operations may propagate through the qubit grid 200 and eventually be detected by parity checking at the auxiliary qubit 202. Error information including endpoints corresponding to coordinates of the auxiliary qubit 202 responsible for error detection is then generated and/or transmitted to a control system for error detection and/or correction.
Fig. 3 depicts an example diagram 300 according to an example embodiment of the disclosure. Graph 300 includes nodes 302 and edges 304. According to example aspects of the disclosure, node 302 may correspond to an auxiliary qubit of a quantum computing system. As shown in fig. 3, nodes 302 may be connected by edges 304. Some or all of edges 304 may be associated with computation qubits 305. For example, if error information is received that includes two nodes 302 as endpoints, the computation qubit 305 responsible for the error may be associated (e.g., matched) with the edge 304 of the least-cost alternate path between the two nodes, according to example aspects of the present disclosure.
Fig. 4A and 4B depict example graphs 400, 450 including error information, according to example embodiments of the present disclosure. For example, FIG. 4A depicts an example graph 400 including error endpoints 402, 404, 406, and 408. Graph 400 may include nodes 410 and edges 420. The nodes may correspond to auxiliary qubits. Additionally and/or alternatively, some or all of edges 420 may represent computation qubits. For example, in some implementations, each edge 420 may represent a single computation qubit. Additionally and/or alternatively, in some implementations, an edge may represent an error affecting more than one qubit (e.g., auxiliary qubit and computation qubit). As shown, each node 410 may be connected to one or more other nodes 410 by an edge 420. In some implementations, each edge 420 may have an associated weight. Endpoints 402, 404, 406, and 408 may correspond to auxiliary qubits that detect errors, such as auxiliary qubits that fail a parity check.
Fig. 4B depicts an example graph 450 that includes a greater number of endpoints 452 than graph 400. For example, graph 450 shows how the complexity of solving for the error location may increase as the number of endpoints 452 increases. For example, as can be appreciated from a comparison of fig. 4A and 4B, it may be easier to solve (e.g., assign matching edges to) a graph 400 that includes fewer endpoints than a graph 450 that includes a greater number of endpoints 452. For example, it can be easily inferred (without regard to weight) that edge 422 can match endpoints 402 and 404, and edge 424 most likely matches endpoints 406 and 408. However, as can be seen from FIG. 4B, assigning matches to graph 450 may be more computationally complex.
Example aspects of the present disclosure may support determining matches for graph 400 and/or graph 450. For example, systems and methods according to example aspects of the present disclosure may assign a match tag of "match" or "no match" (or other similar binary quality) to edge 420 such that each endpoint (e.g., 402-408) is included in the match. For example, systems and methods according to example aspects of the present disclosure may find a minimum cost alternate path from a first unmatched node (e.g., a first endpoint) to a second unmatched node (e.g., a second endpoint). For example, the minimum cost alternate path may include edges corresponding to qubits that are most likely to result in erroneous end points. The matching labels along the alternate paths may be reversed resulting in a new optimal (e.g., lowest cost) match that includes unmatched nodes. This may be repeated until an overall optimal (e.g., most likely) solution is obtained. In this way, while the quantum computing system is running, the propagation of errors and/or multiple errors through the system may be continuously considered.
Fig. 5 depicts a flowchart of an example method 500 for expanding a set of matching nodes in a partially matched graph, according to an example embodiment of the disclosure. Although fig. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of method 500 may be omitted, rearranged, combined, and/or adapted in various ways without departing from the scope of the present disclosure.
The method 500 may include: at 502, a partially matched graph including one or more edges and a plurality of nodes is obtained (e.g., by a computing system including one or more computing devices). The one or more edges may have a match. For example, the one or more edges may be assigned a matching tag indicating whether the edges match or do not match. For example, in some implementations, for each edge, the match may be or may include a matching tag indicating one of a matching edge with a matching condition or a non-matching edge with a non-matching condition. The graph may define matching nodes and/or edges according to some constraints. For example, in some implementations, the graph is matched such that each node of the plurality of nodes contacts at most one matching edge.
In some implementations, each of the one or more edges can include a weight. For example, in some implementations, such as implementations in which the graph corresponds to multiple qubits, each edge may be weighted based on the likelihood of error at that edge. For example, in some implementations, edge weights may be established based at least in part on previous analyses and/or simulations of the quantum computing system. In some implementations, the weight may be inversely related to the likelihood of error. For example, edges with low probability of error may have high weights.
The method 500 may include: at 504, at least two unmatched nodes are obtained (e.g., by a computing system). For example, the at least two unmatched nodes may be new nodes, e.g., nodes that are not in the graph before the at least two unmatched nodes are obtained. Additionally and/or alternatively, the at least two unmatched nodes may be existing nodes having updated states, e.g., nodes that have been switched from previously matched (e.g., matched and/or unmatched) to unmatched. In some implementations, the at least two unmatched nodes may be or may include endpoints (e.g., first endpoint and/or second endpoint) included in error information from the quantum computing system.
The method 500 may include: at 506, alternate paths from a first unmatched node of the at least two unmatched nodes to a second unmatched node of the at least two unmatched nodes are determined by the computing system. The alternate path may include at least one of the one or more edges. For example, the alternate path may alternate between matching edges and non-matching edges. As an example, the sequential ordering of edges from a first unmatched node to a second unmatched node may alternate between matching edges and unmatched edges. In some implementations, for alternate paths with only one edge, the edge may be matched or unmatched.
In some implementations, the alternate path may be a least cost alternate path. For example, in some implementations, the cost of the alternate path may be a sum of the mismatch weights of the mismatch edges in the alternate path, wherein the sum of the match weights of the match edges in the alternate path is subtracted from the sum of the mismatch weights. For example, in an implementation of quantum computing error detection, the alternate path according to the cost function may thus correspond to the most likely error path.
In some implementations, determining an alternate path from a first unmatched node of the at least two unmatched nodes to a second unmatched node of the at least two unmatched nodes includes: determining, by the computing system, a tree having a plurality of alternate paths from the first unmatched node to each of the plurality of nodes; and selecting alternate paths from the tree. For example, a tree of alternate paths from the selected mismatch pattern to each node in the graph may be determined. Additionally and/or alternatively, the alternate path may be a least cost alternate path. Thus, alternate paths yielding a second unmatched node may be selected. The tree of alternating paths is advantageous in avoiding loops, which is especially beneficial in quantum computing applications. For example, in some implementations, no alternate path of the plurality of alternate paths may include a loop. In two or more instances, there may be loops in the path using a single edge. As another example, a loop may occur two or more times in a path that includes a single node. The tree of alternate paths may be determined by any suitable algorithm. For example, in some implementations, determining a tree that includes a plurality of alternate paths is performed by applying a bellman-ford algorithm. The bellman-ford algorithm may be modified to prevent loops from forming, for example by selecting only paths that do not include loops. For example, an algorithm may be prevented from accessing a node that is an ancestor of the current node.
The method 500 may include: at 508, the matching labels for at least one edge of the alternate path are inverted. For example, once the alternate path is identified, the matching labels along each side of the alternate path may be inverted. For example, matching edges along alternate paths may be inverted to non-matching edges, and/or non-matching edges along alternate paths may be inverted to matching edges. According to example aspects of the present disclosure, reversing the matching labels along alternating paths from a first unmatched node to a second unmatched node may expand the matching set of the graph to include the unmatched node while remaining valid for the existing node. Furthermore, if the minimum cost alternate path is reversed, the new match may be an overall optimal match (e.g., defined by a cost function).
Fig. 6 depicts a flowchart of an example method 600 for error detection in a quantum computing system, according to an example embodiment of the disclosure. Although fig. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particular illustrated order or arrangement. The various steps of method 600 may be omitted, rearranged, combined, and/or adapted in various ways without departing from the scope of the present disclosure.
The method 600 may include: at 602, a matching graph including one or more edges and a plurality of nodes is obtained (e.g., by a computing system including one or more computing devices). The one or more edges may have a match. For example, the one or more edges may be assigned a matching tag indicating whether the edges match or do not match. For example, in some implementations, for each edge, the match may be or may include a matching tag indicating one of a matching edge with a matching condition or a non-matching edge with a non-matching condition. The graph may define matching nodes and/or edges according to some constraints. For example, in some implementations, the graph is matched such that each node of the plurality of nodes contacts at most one matching edge.
The plurality of nodes may correspond to a plurality of qubits of a quantum computing system. For example, in some implementations, the plurality of qubits may correspond to an interleaved grid of qubits. The interleaving grid may include a plurality of computation qubits interleaved with a plurality of auxiliary qubits. For example, each node may correspond to an auxiliary qubit. Additionally and/or alternatively, each of the one or more edges may correspond to a computation qubit. An example qubit grid is shown in fig. 2. Any suitable qubit grid and/or other plurality of qubits may be employed in accordance with example aspects of the present disclosure.
In some implementations, each of the one or more edges can include a weight. For example, in some implementations, each edge may be weighted based on the likelihood of error at the edge and/or a node (e.g., qubit) of the edge. For example, in some implementations, edge weights may be established based at least in part on previous analyses and/or simulations of the quantum computing system. In some implementations, the weight may be inversely related to the likelihood of error. For example, edges with low probability of error may have high weights.
The method 600 may include: at 604, an error detection signal describing the first endpoint and the second endpoint is obtained (e.g., by a computing system). For example, in some implementations, the first endpoint and/or the second endpoint may be non-matching nodes in the matching graph. The first endpoint and the second endpoint may correspond to a first qubit and a second qubit of the plurality of qubits. For example, in some implementations, each of the first endpoint and the second endpoint corresponds to an auxiliary qubit. The computing system may receive error information including coordinates describing endpoints of the non-matching parity. For example, the endpoints may correspond to the positions of auxiliary qubits in a qubit grid where unmatched parity is detected. In some cases, error information including endpoints may be received in real-time, e.g., in time slices and/or continuously. For example, each time slice may correspond to a set of quantum gate operations at each of the plurality of qubits. The error information may be received with accuracy on the order of microseconds. For example, in some embodiments, the computing system may receive error information for endpoint pairs that include non-matching parity in real-time.
The method 600 may include: at 606, an alternate path from the first endpoint to the second endpoint is determined (e.g., by the computing system). The alternate path may include at least one of the one or more edges. For example, the alternate path may alternate between matching edges and non-matching edges. For example, the sequential ordering of edges from a first endpoint to a second endpoint may alternate between matching edges and non-matching edges. In some implementations, for alternate paths with only one edge, the edge may be matched or unmatched.
In some implementations, the alternate path may be a least cost alternate path. For example, in some implementations, the cost of the alternate path may be a sum of the mismatch weights of the mismatch edges in the alternate path, wherein the sum of the match weights of the match edges in the alternate path is subtracted from the sum of the mismatch weights. For example, in an implementation of quantum computing error detection, the alternate path according to the cost function may thus correspond to the most likely error path.
In some implementations, determining an alternate path from a first endpoint of the at least two endpoints to a second endpoint of the at least two endpoints includes: determining, by the computing system, a tree having a plurality of alternate paths from the first endpoint to each of the plurality of nodes; and selecting alternate paths from the tree. For example, a tree of alternate paths from the selected mismatch pattern to each node in the graph may be determined. Additionally and/or alternatively, the alternate path may be a least cost alternate path. Thus, an alternate path to the second endpoint may be selected. Alternate path trees are advantageous to avoid loops, which is especially beneficial in quantum computing applications. For example, in some implementations, no alternate path of the plurality of alternate paths may include a loop. The tree of alternate paths may be determined by any suitable algorithm. For example, in some implementations, determining a tree that includes a plurality of alternate paths is performed by applying a bellman-ford algorithm. The bellman-ford algorithm may be modified to prevent the formation of loops, for example by selecting only paths that do not include loops.
The method 600 may include: at 608, at least one error location in the quantum computing system is detected (e.g., by the computing system) based at least in part on the alternate path. For example, the alternating paths may be compared to the plurality of qubits to identify the location of errors in the quantum computation. As one example, a matching edge may indicate an unstable qubit. Thus, the location of the error may correspond to, for example, a qubit index, coordinates, and/or other identifier.
In some implementations, the method 600 may further include: at 610, quantum measurements from the at least one error location at the quantum computing system are corrected by the computing system. For example, in some implementations, a quantum algorithm with errors may be re-run to correct the errors. As another example, in some implementations, the measured value from the error location may be corrected, and the quantum algorithm may continue to evaluate with the corrected value.
Fig. 7 depicts a block diagram of an example computing system 1000, which example computing system 1000 may be used to implement systems and methods according to example embodiments of the present disclosure, such as the system discussed with reference to fig. 1. The system 1000 includes a control system 1010 and a quantum computing system 1030 communicatively coupled by a network 1050. One or more aspects of any of the methods described herein may be implemented on the control system 1010 and/or the quantum computing system 1030.
The control system 1010 may include any type of computing device (e.g., a classical computing device). The control system 1010 includes one or more processors 1012 and memory 1014. The one or more processors 1012 may include any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 1014 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 1014 may store data 1016 (e.g., qubit parameters, measurements, etc.) and instructions 1018, the instructions 1018 being executable by processor 1012 to cause control system 1010 to perform operations, such as one or more aspects of any of the methods disclosed herein. According to example embodiments of the disclosure, control system 1010 may be configured to process error information 1020 obtained by measuring an output of a quantum system (e.g., quantum system 1040) to identify errors in quantum computing.
Quantum computing system 1030 includes one or more processors 1032 and memory 1034. The one or more processors 1032 may include suitable processing devices (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or operatively coupled multiple processors. Memory 1034 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, and combinations thereof. Memory 1034 may store data 1036 and instructions 1038, the instructions 1038 being executable by processor 1032 to cause quantum computing system 1030 to perform operations such as implementing quantum circuits having one or more quantum gates on quantum system 1040 having a plurality of qubits and obtaining associated measurements (e.g., error information 1020). Quantum computing system 1030 may be similar to the quantum computing system discussed and described with reference to fig. 1. Other suitable quantum computing systems may be used without departing from the scope of this disclosure.
Network 1050 may be any type of communication network, such as a local area network (e.g., an intranet), a wide area network (e.g., the internet), or some combination thereof, and may include any number of wired or wireless links. In general, communications over network 1050 may be performed via any type of wired and/or wireless connection using various communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), coding or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). In some implementations, network 1050 may be omitted such that control system 1010 is in direct signal communication with quantum computing system 1030.
The implementations of digital, classical and/or quantum topics and digital functional operations and quantum operations described in this specification can be implemented in digital electronic circuitry, in suitable quantum circuitry, or more generally in digital and/or quantum computer software or firmware in tangible implementations, in digital and/or quantum computer hardware (including the structures disclosed in this specification and structural equivalents thereof), or in combinations of one or more of them. The term "quantum computing system" may include, but is not limited to, a quantum computer/computing system, a quantum information processing system, a quantum cryptography system, or a quantum simulator.
Implementations of the digital and/or quantum subject matter described in this specification can be implemented as one or more digital and/or quantum computer programs, i.e., one or more modules of digital and/or quantum computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The digital and/or quantum computer storage medium may be a machine readable storage device, a machine readable storage substrate, a random or serial access storage device, one or more qubits/qubit structures, or a combination of one or more of them. Alternatively or additionally, the program instructions may be encoded on an artificially-generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) capable of encoding digital and/or quantum information, the signal being generated to encode digital and/or quantum information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
The terms quantum information and quantum data refer to information or data carried, held or stored by a quantum system, where the smallest nontrivial system is a qubit, i.e., a system that defines a quantum information unit. It is to be understood that the term "qubit" encompasses all quantum systems that in the corresponding context may be suitably approximated as two-level systems. Such quantum systems may include multi-level systems, e.g., having two or more energy levels. For example, such systems may include atomic, electronic, photonic, ionic, or superconducting qubits. In many implementations, the compute ground state is identified with a ground state and a first excited state, however it is understood that other arrangements are possible in which the compute state is identified with a higher order excited state (e.g., a qubit).
The term "data processing apparatus" refers to digital and/or quantum data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing digital and/or quantum data, including by way of example programmable digital processors, programmable quantum processors, digital computers, quantum computers, or multiple digital and quantum processors or computers, and combinations thereof. The device may also be or further comprise a dedicated logic circuit, such as an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit), or a quantum simulator, i.e. a quantum data processing device designed to simulate or generate information about a specific quantum system. In particular, quantum simulators are specialized quantum computers that do not have the ability to perform general-purpose quantum computing. In addition to hardware, the apparatus may optionally include code that creates an execution environment for digital and/or quantum computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A digital or classical computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a digital computing environment. Quantum computer programs (which may also be referred to or described as programs, software applications, modules, software modules, scripts, or code) may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it is translated into a suitable quantum programming language, or it may be written in a quantum programming language (e.g., QCL, quipper, cirq, etc.).
Digital and/or quantum computer programs may, but need not, correspond to files in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). Digital and/or quantum computer programs may be deployed to be executed on one digital or one quantum computer or on multiple digital and/or quantum computers at one site or distributed across multiple sites and interconnected by a digital and/or quantum data communication network. A quantum data communication network is understood to be a network in which quantum data can be transmitted using quantum systems (e.g., qubits). In general, digital data communication networks cannot transmit quantum data, however quantum data communication networks can transmit quantum data and digital data.
The processes and logic flows described in this specification can be performed by one or more programmable digital and/or quantum computers, operating as appropriate with one or more digital and/or quantum processors, executing one or more digital and/or quantum computer programs, and performing functions by operating on input digital and quantum data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA or ASIC or quantum simulator, or a combination of special purpose logic circuitry or quantum simulators and one or more programmed digital and/or quantum computers.
For a system of one or more digital and/or quantum computers or processors, "configured to" or "operable to" perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof that, when operated, causes the system to perform the operation or action. The one or more digital and/or quantum computer programs being configured to perform a particular operation or action means that the one or more programs include instructions that, when executed by the digital and/or quantum data processing apparatus, cause the apparatus to perform the operation or action. A quantum computer may receive instructions from a digital computer that, when executed by the quantum computing device, cause the device to perform operations or actions.
Digital and/or quantum computers suitable for executing digital and/or quantum computer programs may be based on general or special purpose digital and/or quantum microprocessors or both, or any other type of central digital and/or quantum processing unit. Typically, the central digital and/or quantum processing unit will receive instructions and digital and/or quantum data from a read-only memory, or a random access memory, or a quantum system adapted to transmit quantum data (e.g., photons), or a combination thereof.
Some example elements of a digital and/or quantum computer are a central processing unit for executing instructions and one or more storage devices for storing instructions and digital and/or quantum data. The central processing unit and the memory may be supplemented by, or incorporated in, special purpose logic circuitry or quantum simulators. Typically, a digital and/or quantum computer will also include or be operably coupled (to receive digital and/or quantum data therefrom, or to transmit digital and/or quantum data thereto, or both) to one or more mass storage devices (e.g., a magnetic disk, magneto-optical disk, or a quantum system adapted to store quantum information) for storing digital and/or quantum data. However, digital and/or quantum computers do not require such devices.
Digital and/or quantum computer readable media suitable for storing digital and/or quantum computer program instructions and digital and/or quantum data include all forms of non-volatile digital and/or quantum memory, media and storage devices including, for example: semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD-ROM and DVD-ROM discs; and quantum systems, such as trapped atoms or electrons. It is understood that quantum memories are devices capable of storing quantum data with high fidelity, high efficiency for long periods of time, for example, using light-substance interfaces for transmission, and substances for storing and preserving quantum characteristics (e.g., superposition or quantum coherence) of the quantum data.
The control of the various systems described in this specification, or portions thereof, can be implemented in digital and/or quantum computer program products comprising instructions stored on one or more tangible, non-transitory, machine-readable storage media and executable on one or more digital and/or quantum processing devices. The systems described in this specification, or portions thereof, may each be implemented as an apparatus, method, or electronic system, which may include one or more digital and/or quantum processing devices and a memory storing executable instructions to perform operations described in this specification.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular implementations. Some features described in this specification in the context of separate implementations may also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple implementations separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations, as it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific implementations of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequence, to achieve the desired results. In some cases, multitasking and parallel processing may be advantageous.
Claims (23)
1. A computer-implemented method for expanding a set of matching nodes in a partially matched graph, the method comprising:
Obtaining, by a computing system comprising one or more computing devices, a partially-matched graph having a set of matches, the partially-matched graph comprising one or more edges and a plurality of nodes, the one or more edges having matching labels;
obtaining, by the computing system, at least two unmatched nodes;
determining, by the computing system, an alternate path from a first unmatched node of the at least two unmatched nodes to a second unmatched node of the at least two unmatched nodes, the alternate path including at least one edge of the one or more edges; and
the matching labels of at least one edge of the alternate path are inverted by the computing system such that the at least two unmatched nodes are included in a matching set of partially matched graphs.
2. The method of claim 1, wherein determining an alternate path from a first unmatched node of the at least two unmatched nodes to a second unmatched node of the at least two unmatched nodes comprises:
determining, by the computing system, a tree comprising a plurality of alternate paths from the first unmatched node to each of the plurality of nodes; and
the alternate path is selected from the tree.
3. The method of claim 1 or 2, wherein determining, by the computing system, a tree comprising the plurality of alternate paths is performed by applying a bellman-ford algorithm to the partially matched graph.
4. A method as claimed in any preceding claim, wherein none of the plurality of alternate paths comprises a loop.
5. A method as claimed in any preceding claim, wherein each of the one or more edges comprises a weight.
6. A method as claimed in any preceding claim, wherein the alternate path comprises a least cost alternate path.
7. The method of any preceding claim, wherein the matching tag indicates one of a matching edge with a matching condition or a non-matching edge with a non-matching condition, and wherein the alternate path alternates between a matching edge and a non-matching edge.
8. A method as claimed in any preceding claim, wherein the cost of the alternate path comprises a sum of non-matching weights for non-matching edges in the alternate path, wherein the sum of matching weights for matching edges in the alternate path is subtracted from the sum of non-matching weights.
9. A method as claimed in any preceding claim, wherein the graph is matched such that each node of the plurality of nodes contacts at most one matching edge.
10. A method for error detection in a quantum computing system, the method comprising:
obtaining, by a computing system comprising one or more computing devices, a matching graph comprising one or more edges and a plurality of nodes, the plurality of nodes corresponding to a plurality of qubits of a quantum computing system, the one or more edges having matching labels;
obtaining, by the computing system, an error detection signal comprising a first endpoint and a second endpoint, the first endpoint and the second endpoint corresponding to a first qubit and a second qubit of the plurality of qubits;
determining, by the computing system, an alternate path from the first endpoint to the second endpoint, the alternate path including at least one of the one or more edges; and
at least one error location in the quantum computing system is detected by the computing system based at least in part on the alternating paths.
11. The method of claim 10, further comprising: correcting, by the computing system, quantum measurements from the at least one error location at the quantum computing system.
12. The method of claim 10 or 11, wherein the plurality of qubits comprises an interleaved grid of qubits comprising a plurality of computation qubits interleaved with a plurality of auxiliary qubits.
13. The method of any of claims 10 to 12, wherein the first endpoint and the second endpoint each correspond to an auxiliary qubit.
14. The method of any of claims 10 to 13, wherein each of the one or more edges corresponds to a computation qubit.
15. The method of any of claims 10 to 14, wherein determining, by the computing system, an alternate path from the first endpoint to the second endpoint comprises:
determining, by the computing system, a tree comprising a plurality of alternate paths from the first endpoint to each of the plurality of nodes; and
alternate paths are selected from the tree that terminate at the second endpoint.
16. The method of any of claims 10-15, wherein each of the one or more edges includes a weight, and wherein the weight is based at least in part on a likelihood of error.
17. The method of any of claims 10 to 16, wherein the alternate path comprises a least cost alternate path.
18. The method of any of claims 10 to 17, wherein the matching label indicates one of a matching edge with a matching condition or a non-matching edge with a non-matching condition, and wherein the alternate path alternates between matching edges and non-matching edges.
19. The method of any of claims 10 to 18, wherein the cost of the alternate path comprises a sum of mismatch weights for non-matching edges in the alternate path, wherein the sum of match weights for matching edges in the alternate path is subtracted from the sum of mismatch weights.
20. A quantum computing system, comprising:
quantum hardware comprising a plurality of qubits; and
one or more classical processors;
wherein the one or more classical processors are configured to perform operations comprising:
obtaining a matching graph comprising one or more edges and a plurality of nodes, the plurality of nodes corresponding to the plurality of qubits, the one or more edges having matching labels;
obtaining an error detection signal comprising a first endpoint and a second endpoint, the first endpoint and the second endpoint corresponding to a first qubit and a second qubit of the plurality of qubits;
determining an alternate path from the first endpoint to the second endpoint, the alternate path including at least one edge of the one or more edges; and
at least one error location in the quantum hardware is detected based at least in part on the alternating paths.
21. The method of any of claims 1 to 9, wherein at least one of the at least two unmatched nodes comprises a border node.
22. The method of any of claims 10 to 19, wherein at least one of the first endpoint or the second endpoint comprises a border node.
23. The quantum computing system of claim 20, wherein at least one of the first endpoint or the second endpoint comprises a boundary node.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063121027P | 2020-12-03 | 2020-12-03 | |
US63/121,027 | 2020-12-03 | ||
PCT/US2021/060965 WO2022119764A2 (en) | 2020-12-03 | 2021-11-29 | Weighted alternating paths in graphs for quantum computing |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116547678A true CN116547678A (en) | 2023-08-04 |
Family
ID=79259443
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180081902.0A Pending CN116547678A (en) | 2020-12-03 | 2021-11-29 | Weighted alternate paths in graphs for quantum computation |
Country Status (8)
Country | Link |
---|---|
US (2) | US20220179737A1 (en) |
EP (1) | EP4232968A2 (en) |
JP (1) | JP2023552551A (en) |
KR (1) | KR20230113782A (en) |
CN (1) | CN116547678A (en) |
AU (1) | AU2021391403A1 (en) |
CA (1) | CA3201059A1 (en) |
WO (1) | WO2022119764A2 (en) |
-
2021
- 2021-11-29 WO PCT/US2021/060965 patent/WO2022119764A2/en active Application Filing
- 2021-11-29 KR KR1020237022036A patent/KR20230113782A/en active Search and Examination
- 2021-11-29 JP JP2023534024A patent/JP2023552551A/en active Pending
- 2021-11-29 CN CN202180081902.0A patent/CN116547678A/en active Pending
- 2021-11-29 EP EP21836666.4A patent/EP4232968A2/en active Pending
- 2021-11-29 CA CA3201059A patent/CA3201059A1/en active Pending
- 2021-11-29 AU AU2021391403A patent/AU2021391403A1/en active Pending
- 2021-12-03 US US17/541,433 patent/US20220179737A1/en active Pending
-
2023
- 2023-11-16 US US18/510,754 patent/US20240086279A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20240086279A1 (en) | 2024-03-14 |
WO2022119764A2 (en) | 2022-06-09 |
KR20230113782A (en) | 2023-08-01 |
AU2021391403A1 (en) | 2023-06-22 |
WO2022119764A3 (en) | 2022-07-14 |
JP2023552551A (en) | 2023-12-18 |
US20220179737A1 (en) | 2022-06-09 |
CA3201059A1 (en) | 2022-06-09 |
EP4232968A2 (en) | 2023-08-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
AU2022218621B2 (en) | In-situ quantum error correction | |
AU2022279429B2 (en) | Surface code computations using auto-ccz quantum states | |
CN110692067A (en) | Quantum neural network | |
AU2019389094B2 (en) | Magic state factory constructions for producing CCZ and T states | |
US20220019928A1 (en) | Majorana loop stabilizer codes for error correction of fermionic quantum simulations | |
AU2023200020A1 (en) | Error corrected variational algorithms | |
JP7386998B2 (en) | Reduce errors by selecting circuit gauges | |
US20220358392A1 (en) | Parallel cross entropy benchmarking | |
CN116547678A (en) | Weighted alternate paths in graphs for quantum computation | |
CA3161500A1 (en) | Denoising qubit calibration data with deep learning | |
US20220414514A1 (en) | Frequency Configuration in Quantum Gates for Leakage Removal | |
US20240160976A1 (en) | Backtesting Quantum Device Calibration | |
US11550872B1 (en) | Systems and methods for quantum tomography using an ancilla | |
WO2024081051A2 (en) | Matrix product state-based decoders for stabilizer codes under device noise for quantum computing and information processing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |