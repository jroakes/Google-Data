US8938001B1 - Apparatus and method for coding using combinations - Google Patents
Apparatus and method for coding using combinations Download PDFInfo
- Publication number
- US8938001B1 US8938001B1 US13/080,240 US201113080240A US8938001B1 US 8938001 B1 US8938001 B1 US 8938001B1 US 201113080240 A US201113080240 A US 201113080240A US 8938001 B1 US8938001 B1 US 8938001B1
- Authority
- US
- United States
- Prior art keywords
- range
- adjusted
- calculated
- lower limit
- adjustment
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 title claims abstract description 60
- 239000013598 vector Substances 0.000 claims abstract description 50
- 230000008859 change Effects 0.000 claims description 3
- 238000010586 diagram Methods 0.000 description 23
- 230000008569 process Effects 0.000 description 20
- 238000007906 compression Methods 0.000 description 10
- 230000006835 compression Effects 0.000 description 10
- 230000006837 decompression Effects 0.000 description 8
- 239000000284 extract Substances 0.000 description 6
- 238000004422 calculation algorithm Methods 0.000 description 5
- 230000006870 function Effects 0.000 description 5
- 238000004364 calculation method Methods 0.000 description 4
- 238000013139 quantization Methods 0.000 description 4
- 230000000903 blocking effect Effects 0.000 description 3
- 238000001914 filtration Methods 0.000 description 3
- 238000010606 normalization Methods 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000013144 data compression Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000005192 partition Methods 0.000 description 2
- 230000009466 transformation Effects 0.000 description 2
- 230000003044 adaptive effect Effects 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000001131 transforming effect Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
Definitions
- Digital video is used for various purposes including, for example, remote business meetings via video conferencing, high definition video entertainment, video advertisements, and sharing of user-generated videos.
- video conferencing high definition video entertainment
- video advertisements video advertisements
- sharing of user-generated videos users have higher expectations for video quality and expect high resolution video even when transmitted over communications channels having limited bandwidth.
- VPx promulgated by Google Inc. of Mountain View, Calif.
- H.264 standard promulgated by ITU-T Video Coding Experts Group (VCEG) and the ISO/IEC Moving Picture Experts Group (MPEG), including present and future versions thereof.
- VCEG Video Coding Experts Group
- MPEG Moving Picture Experts Group
- MPEG-4 Part 10 MPEG-4 AVC (formally, ISO/IEC 14496-10).
- Arithmetic coding is one form of entropy coding that can be used in lossless data compression.
- Arithmetic coders can, for example, represent a string of characters (which would normally be represented using a fixed number of bits per character) so that frequently used characters are stored with fewer bits and not-so-frequently occurring characters are stored with more bits. Commonly, the result is that fewer bits are used to represent the string of characters than would be otherwise.
- arithmetic coding can code the entire string of characters into a fractional value.
- Each individual data symbol can be, for example, encoded by representing each symbol in the string of characters by a range of values between 0 and 1. The size of the specific range can signify the probability of that symbol occurring.
- Arithmetic encoding is also recursive in that, on each recursion, the algorithm will further partition the range of values between 0 and 1 and retain one of the partitions as the new interval.
- the coded string of characters lies in the new interval.
- the string of characters is decoded by a series of comparisons to determine how the entropy coder successively partitioned and retained each nested subinterval.
- Embodiments of a method for encoding data by determining a range where the data includes a sequence of symbols each associated with a probability of occurrence and the range is indicative of the encoded data are disclosed herein.
- the method includes, initializing the range, identifying a symbol set from the sequence of symbols, selecting at least one pre-calculated range adjustment vector based on the identified symbol set, adjusting the range using the pre-calculated range adjustment vector and encoding the identified symbol set based on the adjusted range.
- the apparatus includes processor means for initializing the range, identifying a symbol set from the sequence of symbols, selecting at least one pre-calculated range adjustment vector based on the identified symbol set, adjusting the range using the pre-calculated range adjustment vector and encoding the identified symbol set based on the adjusted range.
- Embodiments of a method for decoding data that has been encoded where the where the data is represented by at least one value in a range are disclosed herein.
- the method includes initializing the range and selecting a pre-calculated adjustment vector based on where the at least one value lies in the range.
- the method also includes adjusting the range using the pre-calculated adjustment vector and determining a symbol set from the pre-calculated adjustment vector.
- FIG. 1 is a schematic diagram of a video bitstream
- FIG. 2 is a block diagram of a video compression system in accordance with one embodiment
- FIG. 3 is a block diagram of a video decompression system in accordance with one embodiment
- FIG. 4 is a schematic diagram of a combination table for use in the video compression system of FIG. 2 and the video decompression system of FIG. 3 ;
- FIG. 5 is a flowchart diagram of an exemplary method of encoding in the video compression system of FIG. 2 ;
- FIG. 6 is a flowchart diagram of an exemplary method of creating the combination table of FIG. 4 in the video compression system of FIG. 2 ;
- FIG. 7 is a flowchart diagram of an exemplary method of encoding a single symbol in the video compression system of FIG. 2 ;
- FIG. 8 is a flowchart diagram of an exemplary method of encoding a combination of symbols in the video compression system of FIG. 2 ;
- FIG. 9 is a flowchart diagram of an exemplary method of decoding in the video decompression system of FIG. 3 ;
- FIG. 10 is a flowchart diagram of an exemplary method of creating the combination table of FIG. 4 in the video decompression system of FIG. 3 ;
- FIG. 11 is a flowchart diagram of an exemplary method of decoding a single symbol in the video decompression system of FIG. 3 ;
- FIGS. 12A and 12B are flowchart diagrams of an exemplary method of decoding a combination of symbols in the video decompression system of FIG. 3 .
- an entropy coder that permit increased speed efficiency during coding and/or decoding. Rather than, as described above, encoding or decoding one symbol at a time, the coder can encode and/or decode multiple symbols simultaneously. Details of the entropy coder will be described in additional detail hereafter.
- FIG. 1 is a diagram of a typical video bitstream 10 to be encoded and decoded.
- Video coding formats such as VP8 or H.264, provide a defined hierarchy of layers for video stream 10 .
- Video stream 10 includes a video sequence 12 .
- video sequence 12 consists of a number of adjacent frames 14 , which can then be further subdivided into a single frame 16 .
- frame 16 can be divided into a series of macroblocks 18 , which can contain data corresponding to, for example, a 16 ⁇ 16 block of displayed pixels in frame 16 .
- Each macroblock can contain luminance and chrominance data for the corresponding pixels.
- Macroblocks 18 can also be of any other suitable size such as 16 ⁇ 8 pixel groups or 8 ⁇ 16 pixel groups.
- FIG. 2 is a block diagram of a video compression system in accordance with one embodiment.
- An encoder 20 encodes an input video stream 10 .
- Encoder 20 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 24 : an intra/inter prediction stage 26 , a transform stage 28 , a quantization stage 30 and an entropy encoding stage 32 .
- Encoder 20 also includes a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of further macroblocks.
- Encoder 20 has stages to perform the various functions in the reconstruction path: a dequantization stage 34 , an inverse transform stage 36 , a reconstruction stage 37 and a loop filtering stage 38 .
- each frame 16 within input video stream 10 is processed in units of macroblocks.
- each macroblock can be encoded using either intra-frame prediction (i.e., within a single frame) or inter-frame prediction (i.e. from frame to frame). In either case, a prediction macroblock can be formed.
- intra-prediction a prediction macroblock can be formed from samples in the current frame that have been previously encoded and reconstructed.
- a prediction macroblock can be formed from samples in one or more previously constructed reference frames as described in additional detail herein.
- the prediction macroblock can be subtracted from the current macroblock at stage 26 to produce a residual macroblock (residual).
- Transform stage 28 transforms the residual into transform coefficients in, for example, the frequency domain, and quantization stage 30 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients or quantization levels.
- the quantized transform coefficients are then entropy encoded by entropy encoding stage 32 .
- the entropy-encoded coefficients, together with the information required to decode the macroblock, such as the type of prediction used, motion vectors, and quantizer value, are then output to compressed bitstream 24 .
- the reconstruction path in FIG. 2 is present to ensure that both encoder 20 and a decoder 42 (described below) use the same reference frames to decode compressed bitstream 24 .
- the reconstruction path performs functions similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at dequantization stage 34 and inverse transforming the dequantized transform coefficients at inverse transform stage 36 in order to produce a derivative residual macroblock (derivative residual).
- the prediction macroblock that was predicted at intra/inter prediction stage 26 can be added to the derivative residual to create a reconstructed macroblock.
- a loop filter 38 can then be applied to the reconstructed macroblock to reduce distortion such as blocking artifacts.
- Video stream 10 is composed of a sequence of symbols, and entropy encoding stage 32 losslessly compresses this sequence of symbols.
- the symbols in the video stream 10 have either a value of 0 or a 1.
- the embodiments disclosed herein will be explained with reference to this binary arithmetic coder.
- teachings set forth herein can be readily applied to other arithmetic coders capable of coding video streams with more than two symbols.
- embodiments of the present invention are not limited to coding video and may be applied to any other type of data (e.g. audio, text, etc.).
- encoder 20 can be used to encode compressed bitstream 24 .
- a non-transform based encoder can quantize the residual signal directly without transform stage 28 .
- an encoder may have quantization stage 30 and dequantization stage 34 combined into a single stage.
- the operation of encoding can be performed in many different ways and can produce a variety of encoded data formats.
- the above-described embodiments of encoding may illustrate some exemplary encoding techniques. However, in general, encoding is understood to mean any transformation of data from one form to another that may or may not include compression, reversibility, or loss of data.
- FIG. 3 is a block diagram of a video decompression system or decoder 42 to decode compressed bitstream 24 .
- Decoder 42 similar to the reconstruction path of the encoder 20 discussed previously, includes the following stages to perform various functions to produce an output video stream 44 from compressed bitstream 24 : an entropy decoding stage 46 , a dequantization stage 48 , an inverse transform stage 50 , an intra/inter prediction stage 52 , a reconstruction stage 54 , a loop filter stage 56 and a deblocking filtering stage 58 .
- the data elements within compressed bitstream 24 can be decoded by entropy decoding stage 46 (using, for example, Context Adaptive Binary Arithmetic Decoding) to produce a set of quantized transform coefficients.
- Dequantization stage 48 dequantizes the quantized transform coefficients
- inverse transform stage 50 inverse transforms the quantized transform coefficients to produce a derivative residual that can be identical to that created by the reconstruction stage in the encoder 20 .
- decoder 42 can use intra/inter prediction stage 52 to create the same prediction macroblock as was created in encoder 20 .
- the prediction macroblock can be added to the derivative residual to create a reconstructed macroblock.
- the loop filter 56 can be applied to the reconstructed macroblock to reduce blocking artifacts.
- Deblocking filter 58 can be applied to the reconstructed macroblock to reduce blocking distortion, and the result is output as output video stream 44 .
- decoder 42 can be used to decode compressed bitstream 24 .
- a decoder may produce output video stream 44 without deblocking filtering stage 58 .
- Video stream 10 (or some subset thereof) can thus, be represented by the binary expansion of a single number x with 0 ⁇ x ⁇ 1. Further, each probability can be represented on a linear 8 bit-scale. Accordingly, zero can represent a probability of zero and 255 can represent a probability of one to give the interval 0 ⁇ x ⁇ 255.
- the length of the interval is the range length.
- x can be normalized to a value in a predetermined interval such as 128 ⁇ x ⁇ 255. In other words, if x is less than 128, x can be normalized to be within the predetermined range. The normalization process will be discussed in additional detail below.
- each symbol restricts the possible values of x in proportion to the probability of what is encoded.
- a ⁇ x ⁇ b of possible values of x. If p is the probability of a zero being coded at this stage and if a zero is coded, the interval becomes a ⁇ x ⁇ a+(p ⁇ (b ⁇ a)). In this instance, a is the start value of the interval and a+(p ⁇ (b ⁇ a)) is the end value of the interval. Conversely, if a one is encoded, the interval becomes a+(p ⁇ (b ⁇ a)) ⁇ x ⁇ b. In this instance, a+(p ⁇ (b ⁇ a)) is the start value of the interval and b is the end value of the interval.
- the binary arithmetic coder can write, as the output, any value of x that lies in the final interval. Alternatively, the binary arithmetic coder can output the final interval itself.
- the binary arithmetic encoder encodes one symbol at a time.
- the interval is restricted (or reduced) based on the probability of only the occurrence of the next symbol in the sequence of symbols.
- embodiments of the present invention can encode and (as will be discussed in more detail below) decode a combination of symbols (i.e. a symbol set) simultaneously.
- encoder 20 can restrict the interval based on the value 000.
- encoder 20 can pre-calculate the values for one or more variables (i.e. a pre-calculated range adjustment vector) used in the encoding process. These values can be calculated for all of the possible ranges in, for example, the interval 128 ⁇ x ⁇ 255. These variables can be stored in a combination table 70 for use by the encoder during the encoding process. As will be discussed in more detail below, a similar table can be created and stored for use by the decoder during the decoding process. An exemplary combination table 70 is illustrated in FIG. 4 having a list of range lengths 72 .
- the combination table also includes a value N 74 representing a combination 76 , an increment/decrement value 78 , an adjustment length 80 and a count 82 .
- increment/decrement value 78 will be referred to as increment value 78 and during the decoding process (discussed below), increment/decrement value 78 will be referred to as decrement value 78 .
- Range length 72 represents the difference between the end value and the start value in the interval. Thus, if the interval is 128 ⁇ x ⁇ 255, there are, as illustrated, 128 possible values for the range.
- N is the instance representing combination 76 .
- N can be a value from 0 to 7.
- each combination has three symbols.
- any number of symbols is possible.
- every possible combination is shown in FIG. 4 of the exemplary combination table 70 for a 3-symbol combination, not every possible combination must be present in combination table 70 .
- another exemplary combination table 70 may only contain combination “000” and “011”.
- combination table 70 can include combinations having different numbers of symbols (i.e. two-symbol combinations and four-symbol combinations).
- increment value 78 , adjustment length 80 and count 82 can be pre-calculated so that they can be used during the encoding process. Rather than calculate the values to be used by encoder 20 at the time of encoding, the encoder 20 can use combination table 70 to find (“look-up”) the values corresponding to each range length 72 and each combination 74 . As will be discussed in more detail below, increment value 78 indicates the amount that the left endpoint (i.e. lower limit) of the interval should be increased by to give a new left endpoint. The sum of the new left endpoint and adjustment length 80 gives the new right endpoint of the interval. To calculate increment value 78 and adjustment length 80 , the encoder 20 can perform the mathematical calculations required for all symbols in the combination 74 at once. The results from these mathematical calculations can then be stored in combination table 70 .
- the process for encoding a combination “001” can be processed by using the values of current range (range length 72 ), the probability of encoding a zero (Pzero/256) and the probability of encoding a one ((256 ⁇ Pzero)/256). Assuming the value for encoding a zero and/or one does not change throughout the encoding process, the following calculations can be performed by encoder 20 :
- RangeLength2 Split1
- RangeLength3 RangeLength2 ⁇ Split2;
- P0 is the probability of encoding first symbol as zero
- P1 is the probability of encoding second symbol as zero
- P2 is the probability of encoding third symbol as one
- Split0 is a value used to determine the lower and upper limits for encoding the first symbol and is used to encode the second symbol in the combination;
- Split1 is a value used to determine the lower and upper limits for encoding the second symbol and is used to encode the third symbol in the combination;
- Split2 is a value used to determine the lower and upper limits for encoding the third symbol.
- RangeLength0 is the initial range
- RangeLength1 is the range after encoding the first symbol
- RangeLength2 is the range after encoding the second symbol
- RangeLength3 is the range after encoding the third symbol.
- RangeLength3 can be the value of the adjustment length 80 associated with a combination of “001” and a range length of RangeLength0.
- Increment value 78 can be calculated by, for example, adding the split values (e.g. Split2) associated with symbols having a value of one. In our example, above, only the third symbol has a value of one. Thus, the value of the increment value 78 associated with a combination of “001” and a range length of RangeLength0 is Split2.
- NewLow OldLow+IncrementValue
- IncrementValue is increment value 78 , which is associated with a particular range length 72 and combination 76 .
- NewHigh NewLow+RangeLength; wherein RangeLength is adjustment length 80 which is associated with a particular range length 72 and combination 76 .
- encoder 20 can prevent the adjustment length 80 from falling below a certain value (e.g. 128). Accordingly, the encoder can normalize the value of the range so it is within a predetermined interval (e.g. 128 ⁇ x ⁇ 255). To normalize, for example, encoder 20 can double the NewLow and/or RangeLength. The process can be repeated until the NewLow and/or RangeLength falls within the predetermined interval.
- Count 82 can indicate when bits should be written to or read from encoder 20 or decoder 42 , respectively.
- Combination table 70 can include other suitable values in lieu of or in addition to range length 72 , value N 74 , combination 76 , increment value 78 , adjustment length 80 and count 82 .
- the upper limit of the current range can be decremented to determine a new upper limit.
- range length 72 can be used in conjunction with this new upper limit to find a new lower limit.
- indexing into combination table 70 using two index values i.e. range length 72 and value N 74
- any number of values can be used, including one.
- a single index value may be generated from range length 72 and value N 74 using a predetermined algorithm.
- the index value may also be a concatenation of range length 72 and value N 74 .
- Other techniques of indexing into combination table 70 are also available.
- a flowchart diagram presents one exemplary routine 100 for encoding in the entropy encoding stage 32 .
- a combination table 70 is created ( 102 ).
- the combination table 70 can provide encoder 20 with the pre-calculated range adjustment vectors for each range 72 and combination 74 .
- the details of creating the combination table 70 will be described in additional detail hereafter with respect to FIG. 6 .
- the combination table 70 can be created and/or received from a source external to the encoder 20 (e.g. software preprocessing stage).
- the encoder 20 is initialized ( 104 ). Initializing encoder 20 can include setting variables and/or conditions to predetermined values before the start of the encoding process.
- the encoder 20 After encoder 20 has been initialized, the encoder 20 starts to encode bits (i.e. symbols) into the compressed bitstream 24 ( 106 ). The encoder first determines if the bits to be encoded are a combination as specified in the combination table ( 108 ).
- the encoder 20 encodes a single bit ( 110 ). Details of encoding a single bit will be described in additional detail hereafter with respect to FIG. 7 .
- the encoder 20 encodes the combination ( 114 ). Details of encoding combinations will be described in additional detail hereafter with respect to FIG. 8 .
- the encoder 20 determines if there are additional bits to encode ( 112 ). If there are additional bits to encode, the encoder 20 returns to encode bits ( 106 ). Otherwise, the routine 100 ends.
- a flowchart diagram presents one suitable routine 200 for creating combination table 70 as described previously with respect to step 102 shown in FIG. 5 .
- a variable i is initialized to the highest range on the probability scale ( 202 ).
- Variable i represents the value of the range lengths 72 , which can be, for example, a value from 128 to 255. Thus, the highest range can be set to 255.
- Other suitable values are available.
- Encoder 20 is then initialized with the highest range ( 204 ).
- Value N 74 is then set to zero ( 206 ).
- Bit b is then set to 0 ( 208 ).
- Bit b represents the specific instance of the bit currently being encoded in the combination.
- Bit b of the combination is then encoded in order to pre-calculate the values associated with that combination for populating combination table 70 (e.g. increment value 78 , adjustment value 80 and/or count 82 ). Bit b is then incremented ( 212 ). After bit b is incremented, the encoder 20 determines whether bit b has exceeded the number of the bits in the combination ( 214 ). If b has not exceeded the number of bits in the combination, the next bit b of value N is encoded ( 210 ). The process is repeated until all of the bits have been encoded in the combination. Once all of the bits have been encoded, the final values of increment value 78 , adjustment value 80 and a count 82 will have been determined for that specific combination and range.
- encoder 20 populates the combination table with the values for the current range (i) and value N that based on the resulting values determined during the encoding of the combination ( 216 ). Then variable N is incremented ( 218 ). Encoder 20 then determines if there are additional combinations to be encoded for the current range i ( 220 ). If there are additional combinations to be encoded for this specific range, the process described above is repeated ( 208 ). If there are no additional combinations to be encoded for this specific range, variable i is decrement to decrease the current range ( 222 ). Encoder 20 then determines if variable i is greater than the minimum range ( 224 ). If i does not exceed the minimum range (e.g. 128), encoder 20 populates the values for all combinations in the next range in the combination table ( 206 ). Otherwise if variable i exceeds the minimum range, the process ends and combination table 70 is fully populated.
- a flowchart diagram presents an exemplary routine 300 for encoding a single symbol as described previously with respect to step 110 shown in FIG. 5 .
- the encoder 20 determines if the symbol being encoded is equal to one ( 304 ). If the symbol being encoded is equal to zero, the encoder 20 sets the current range for the bitstream “B.RangeLength” equal to the split value ( 306 ). In this case, the current low limit value “B.Bottom” remains unchanged. However, if the symbol being encoded is a one, the encoder 20 first adds the split value to B.Bottom ( 308 ). The encoder then subtracts the split value from B.RangeLength ( 310 ).
- encoder 20 determines whether B.RangeLength is less than 128 ( 312 ). When B.RangeLength is greater than or equal to 128, encoder 20 first writes a byte to the bitstream ( 314 ). Encoder 20 then masks the low order bits ( 316 ). In other words, neither B.RangeLength nor B.Bottom are normalized.
- B. RangeLength and B.Bottom can be normalized.
- encoder 20 will left-shift B. RangeLength by one bit (i.e. multiply B.RangeLength by 2) ( 318 ).
- encoder 20 will left-shift B.Bottom by one bit (i.e. multiply B.Bottom by 2) ( 320 ). Normalization permits the encoder 20 to maintain the accuracy and precision of the values of B.RangeLength and B.Bottom.
- Encoder 20 then will increment the count (B.Count) for the symbol ( 322 ).
- Encoder 20 determines whether B.Count is equal to 8 ( 324 ).
- B.Count is not equal to 8
- the encoder repeats the process starting at step 312 . If B.Count is equal to 8, encoder 20 then writes a byte to the bitstream ( 314 ). Encoder 20 then masks the low order bits ( 316 ).
- a flowchart diagram presents an exemplary routine 400 for encoding a combination 76 as described at step 114 shown in FIG. 5 .
- the encoder 20 extracts the values for each symbol from the bitstream to be encoded and combined to form “Combo” ( 402 ).
- the encoder 20 determines value N 74 from combo ( 404 ).
- Value N 74 can be used, as discussed previously, to determine the pre-calculated range adjustment vector in combination table 70 .
- Encoder 20 sets the pre-calculated range adjustment vector equal to S based on the current range length 72 and the value N 74 in combination table 70 ( 406 ).
- the pre-calculated range adjustment vector can include increment value 78 , range length adjustment value 80 , and count 82 , which can be denoted as S.IncrementValue, S.AdjustmentLength and S.Count, respectively.
- Encoder 20 then normalizes the current low limit value B.Bottom according to the value of count S.Count ( 408 ).
- Encoder 20 then adds S.Count to a total count value B.SumC ( 410 ).
- B.SumC can indicate when bits should be written to the bitstream.
- Encoder 20 then can add S.IncrementValue to B.Bottom ( 412 ). Encoder 20 then determines whether B.SumC is greater than 8 ( 414 ). If B.SumC is greater than 8, encoder 20 shifts the top bits out to the compressed bitstream 24 ( 416 ). If B.SumC is not greater than 8, no bits are shifted out to the compressed bitstream 24 . Encoder 20 then sets the current range length equal to the S.AdjustmentLength ( 418 ).
- a flowchart diagram presents an exemplary routine 500 for decoding in the entropy decoding stage 46 in decoder 42 .
- the decoder 42 first creates a combination table 70 ( 502 ).
- the combination table 70 created by decoder 42 includes the same values as the corresponding combination table 70 created by encoder 20 .
- it can be encoded in the compressed bitstream 24 as generated by the encoder 24 or an external source.
- the combination table 70 generated by the decoder 42 can provide the pre-calculated range adjustment vectors for each range 72 and combination 74 .
- the decoder 42 is then initialized ( 504 ). Initializing the decoder can include setting variables and/or conditions to predetermined values before the start of the decoding process.
- decoder 42 After the decoder 42 is initialized, decoder 42 decodes bits (i.e. symbols) from the compressed bitstream 24 ( 506 ). Decoder 42 then determines if the bits to be decoded are a combination as specified in the combination table 70 ( 508 ). If the bits to be decoded are not a combination, decoder 42 decodes a single bit ( 510 ). Details of decoding a single bit will be described in additional detail hereafter with respect to FIG. 11 . After a single bit has been decoded, decoder 42 determines if there are additional bits to decode ( 512 ). If there are additional bits to decode, decoder 42 returns to step 506 . Otherwise, the routine 500 ends.
- bits i.e. symbols
- decoder 42 decodes the combination ( 514 ). Details of decoding combinations will be described in additional detail hereafter with respect to FIG. 12 . After the combination 76 has been decoded, decoder 42 determines if there are additional bits to decode ( 512 ). If there are additional bits to decode, decoder 42 returns to step 506 . Otherwise, the routine 500 ends.
- a flowchart diagram presents an exemplary routine 600 for creating a combination table 70 for use in the decoder 42 as described previously with respect to step 502 as shown in FIG. 9 ( 502 ).
- the decoder 42 first initializes a variable i to the highest range on a probability scale ( 602 ).
- Variable i represents the value of the range lengths 72 , which can be, for example, a value from 128 to 255. Thus the highest range can be set to 255. Other suitable values are available.
- Decoder 42 then initializes with the highest range ( 604 ).
- Value N 74 is then set to zero ( 606 ).
- Bit b is then set to 0 ( 608 ).
- Variable b can represent the specific instance of the bit being decided in the combination.
- decoder 42 encodes bit b of the combination in order to pre-calculate the values associated with that combination for populating combination table 70 such as decrement value 78 , adjustment value 80 and/or count 82 ( 610 ). Decoder 42 then increments variable b ( 612 ). After bit b is incremented, decoder 42 determines whether variable b has exceeded the number of the bits in the combination ( 614 ). If b has not exceeded the number of bits in the combination, decoder 42 encodes the next bit b of value N ( 610 ). The process is repeated until all of the bits have been encoded in the combination. Once all of the bits have been encoded, the final values of decrement value 78 , adjustment value 80 and a count 82 will have been determined for that specific combination and range.
- decoder 42 populates the combination table 70 with the values for the current range (i) and value N that based on the resulting values determined during the encoding of the combination ( 610 ). Decoder 42 then increments increment N ( 618 ). Decoder 42 then determines if there are additional combinations to be encoded for the current range i ( 620 ). If there are additional combinations to be encoded for this specific range, decoder 42 returns to step 608 to repeat the process. If there are no additional combinations to be encoded for this specific range, decoder 42 decrement i to decrease the current range ( 622 ). Decoder 42 then determines if i is greater than the minimum range ( 624 ).
- decoder 42 If i exceeds the minimum range (e.g. 128), decoder 42 returns to step 606 to populate the values for all combinations in the next range in the combination table. Otherwise, if i does not exceed the minimum range, the process ends and combination table 70 is fully populated.
- the minimum range e.g. 128
- a flowchart diagram presents an exemplary routine 700 for decoding a single symbol as described previously with respect to step 510 shown in FIG. 9 .
- Decoder 42 first calculates a split value “Split” based on the range length 72 “B.RangeLength” (i.e. the current range) multiplied by the probability for the symbol being decoded ( 702 ).
- Decoder 42 then calculates another split value “BigSplit” from the Split ( 703 ). Specifically, BigSplit can be calculated by multiplying Split by 256 (i.e. shifting Split 8 bits to the left).
- Decoder 42 determines if bits extracted from the compressed bitstream 24 (stored in a variable “B.Bottom”) are greater than or equal to BigSplit ( 704 ).
- the number of bits that are extracted can be of any suitable size. For example, 32 bits can be extracted from the encoded bitstream at a time (i.e. 4 bytes).
- decoder 42 sets the value of the decoded bit “B.Value” equal to zero ( 706 ). Decoder 42 then sets the current range for the bitstream B.RangeLength equal to Split ( 708 ). In this case, the current low limit value “B.Bottom” remains unchanged.
- the decoder 42 sets the value of the decoded bit “B.Value” equal to one ( 710 ). Decoder 42 then subtracts Split from B.RangeLength ( 712 ). Decoder 42 then subtracts BigSplit from B.Bottom ( 714 ).
- decoder 42 determines whether B.RangeLength is less than 128 ( 716 ). When B.RangeLength is greater than or equal to 128, the routine 700 ends. In other words, no bits are read from the compressed bitstream 24 and neither B.RangeLength nor B.Bottom is normalized.
- B.RangeLength When B.RangeLength is less than 128, B. RangeLength and B.Bottom can undergo normalization. Specifically, decoder 42 left-shifts B.RangeLength by one bit (i.e. multiplies B.RangeLength by 2) ( 720 ), and left-shifts B.Bottom by one bit (i.e. multiplies B.Bottom by 2) ( 722 ). Decoder 42 then increments B.Count for the symbol ( 724 ). Decoder 42 then determines whether B.Count is equal to 8 ( 726 ). If B.Count is not equal to 8, decoder 42 returns to step 716 . If B.Count is equal to 8, control reads a byte from compressed bitstream 24 ( 728 ). A byte can then be “ORed” into B.Bottom ( 730 ). The routine 700 then ends.
- a flowchart diagram presents an exemplary routine 800 for decoding a combination 76 as described previously with respect to step 514 shown in FIG. 9 .
- Decoder 42 first initializes variable “i” to a value of one.
- variable i can represent the specific instance of the combination 76 currently being examined in the combination table 70 .
- Decoder 42 determines if bits extracted from the compressed bitstream 24 (stored in a variable “B.Bottom”) are less than the decrement value 78 retrieved from the combination table 70 (for the current range length “CurrentRangeLength” and current value of i ( 804 ).
- decoder 42 increments i ( 806 ). Decoder 42 then determines whether i is greater than the number of combinations in the combination table 70 ( 808 ). If i is not greater than the number of combinations 76 , decoder 42 returns to step 804 to examine the next decrement value in the combination table 70 for the current range length 72 .
- Each of the decrement values 78 (for each range length 72 ) can be sorted in descending order such that a comparison can be made beginning with the lowest value.
- decoder 42 extracts the values from the combination table 70 (based on current range length 72 and the value i) and sets the values equal to S ( 810 ).
- the values extracted can include the current range length 72 , value N 74 , combination 76 , decrement value 78 , adjustment length 80 and count 82 .
- Decoder 42 then extracts the first bit in the combination 76 as the first value decoded ( 812 ). Decoder 42 then extracts the second bit in the combination 76 as the second value decoded ( 814 ). Decoder 42 then extracts the third bit in the combination as the third value decoded ( 816 ). All three of these values are stored in “DecodedValue.” Thus, for example, if the combination was “011,” the ‘0’ is stored in DecodedValue[0], the first ‘1’ is stored in DecodedValue[1] and the second ‘1’ is stored in Decoded Value[2]. Other suitable techniques for extracting and storing the decoded values are also available. Further, this routine is exemplary and is described with reference to combination 76 having three bits. However, as discussed previously, combination 76 may have any number of bits and the routine may be modified to appropriately extract the appropriate number of bits.
- decoder 42 After the combination 76 is decoded by decoder 42 , decoder 42 subtracts S.DecrementValue from B.Bottom ( 818 ). Decoder 42 then normalizes the current low limit value B.Bottom according to the value of count S.Count ( 820 ). Decoder 42 then adds S.Count to a total count value B.SumC ( 822 ). As discussed previously, B.SumC can indicate when bits should be written to the output video stream 44 .
- Decoder 42 determines whether B.SumC is greater or equal to 8 ( 824 ). If B.SumC is less than 8, decoder 42 sets the B.RangeLength equal to S.AdjustmentLength ( 826 ). The routine 800 then ends.
- decoder 42 reads the next byte from the compressed bitstream 24 ( 827 ) and shifts byte (B.SumC minus 8) bits into B.Bottom (in FIG. 12B ). Decoder then determines whether B.SumC is greater than 16 ( 830 ).
- decoder 42 If B.SumC is greater than 16, decoder 42 first increments the compressed bitstream 24 ( 832 ). Decoder 42 then shifts a byte (B.SumC—16) into B.Bottom ( 834 ) subtracts 8 from B.SumC ( 836 ). Subsequently, or if decoder 42 determines that B.SumC is not greater than 16 at step 830 ), decoder 42 increments compressed bitstream 24 ( 838 ) and subtracts 8 from B.SumC ( 840 ). Decoder 42 then (returning to FIG. 12A ) sets the B.RangeLength equal to S.AdjustmentLength ( 826 ). The routine 800 then ends.
- encoding or decoding may illustrate some exemplary encoding techniques.
- encoding and decoding as those terms are used in the claims are understood to mean compression, decompression, transformation or any other change to data whatsoever.
- Encoder 20 and/or decoder 42 are implemented in whole or in part by one or more processors which can include computers, servers, or any other computing device or system capable of manipulating or processing information now-existing or hereafter developed including optical processors, quantum processors and/or molecular processors. Suitable processors also include, for example, general purpose processors, special purpose processors, IP cores, ASICS, programmable logic arrays, programmable logic controllers, microcode, firmware, microcontrollers, microprocessors, digital signal processors, memory, or any combination of the foregoing. In the claims, the term “processor” should be understood as including any the foregoing, either singly or in combination. The terms “signal” and “data” are used interchangeably.
- Encoder 20 and/or decoder 42 also include a memory, which can be connected to the processor through, for example, a memory bus.
- the memory may be read only memory or random access memory (RAM) although any other type of storage device can be used.
- the processor receives program instructions and data from the memory, which can be used by the processor for performing the instructions.
- the memory can be in the same unit as the processor or located in a separate unit that is coupled to the processor.
- encoder 20 can be implemented using a general purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein.
- a special purpose processor can be utilized which can contain specialized hardware for carrying out any of the methods, algorithms and/or instructions described herein.
- Portions of encoder 20 or decoder 42 do not necessarily have to be implemented in the same manner.
- intra/inter prediction stage 26 can be implemented in software whereas transform stage 28 can be implemented in hardware.
- Portions of encoder 20 or portions of decoder 42 may also be distributed across multiple processors on the same machine or different machines or across a network such as a local area network, wide area network or the Internet.
- Encoder 20 and decoder 42 can, for example, be implemented in a wide variety of configurations, including for example on servers in a video conference system.
- encoder 20 can be implemented on a server and decoder 42 can be implemented on a device separate from the server, such as a hand-held communications device such as a cell phone.
- encoder 20 can compress content and transmit the compressed content to the communications device, using the Internet for example.
- the communications device can decode the content for playback.
- the communications device can decode content stored locally on the device (i.e. no transmission is necessary).
- Other suitable encoders and/or decoders are available.
- decoder 42 can be on a personal computer rather than a portable communications device.
- encoder 20 or decoder 42 can be realized in hardware, software or any combination thereof. All or a portion of embodiments of the present invention can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example tangibly contain, store, communicate, and/or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
Abstract
Description
NewLow=OldLow+IncrementValue;
wherein
IncrementValue is
NewHigh=NewLow+RangeLength;
wherein
RangeLength is
Split=1+((RangeLength−1)*Probability)>>8.
Claims (17)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/080,240 US8938001B1 (en) | 2011-04-05 | 2011-04-05 | Apparatus and method for coding using combinations |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/080,240 US8938001B1 (en) | 2011-04-05 | 2011-04-05 | Apparatus and method for coding using combinations |
Publications (1)
Publication Number | Publication Date |
---|---|
US8938001B1 true US8938001B1 (en) | 2015-01-20 |
Family
ID=52301716
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/080,240 Active 2032-04-28 US8938001B1 (en) | 2011-04-05 | 2011-04-05 | Apparatus and method for coding using combinations |
Country Status (1)
Country | Link |
---|---|
US (1) | US8938001B1 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9172967B2 (en) | 2010-10-05 | 2015-10-27 | Google Technology Holdings LLC | Coding and decoding utilizing adaptive context model selection with zigzag scan |
US9179151B2 (en) | 2013-10-18 | 2015-11-03 | Google Inc. | Spatial proximity context entropy coding |
US9247257B1 (en) | 2011-11-30 | 2016-01-26 | Google Inc. | Segmentation based entropy encoding and decoding |
US9392288B2 (en) | 2013-10-17 | 2016-07-12 | Google Inc. | Video coding using scatter-based scan tables |
US9509998B1 (en) | 2013-04-04 | 2016-11-29 | Google Inc. | Conditional predictive multi-symbol run-length coding |
US9774856B1 (en) | 2012-07-02 | 2017-09-26 | Google Inc. | Adaptive stochastic entropy coding |
Citations (74)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4710810A (en) | 1984-03-06 | 1987-12-01 | Nec Corporation | Predictive coding/decoding apparatus for video signal |
US5091782A (en) | 1990-04-09 | 1992-02-25 | General Instrument Corporation | Apparatus and method for adaptively compressing successive blocks of digital video |
US5150209A (en) | 1990-05-11 | 1992-09-22 | Picturetel Corporation | Hierarchical entropy coded lattice threshold quantization encoding method and apparatus for image and video compression |
US5341440A (en) | 1991-07-12 | 1994-08-23 | Earl Joseph G | Method and apparatus for increasing information compressibility |
JPH07135660A (en) | 1993-11-12 | 1995-05-23 | Matsushita Electric Ind Co Ltd | Movement vector coder |
US5461423A (en) | 1992-05-29 | 1995-10-24 | Sony Corporation | Apparatus for generating a motion vector with half-pixel precision for use in compressing a digital motion picture signal |
US5650782A (en) | 1994-01-18 | 1997-07-22 | Daewoo Electronics Co Ltd. | Variable length coder using two VLC tables |
US5686962A (en) | 1994-07-30 | 1997-11-11 | Samsung Electronics Co., Ltd. | Motion image coder using pre-filter to reduce quantization error |
US5708473A (en) | 1994-08-30 | 1998-01-13 | Hughes Aircraft Company | Two stage video film compression method and system |
US5737020A (en) | 1995-03-27 | 1998-04-07 | International Business Machines Corporation | Adaptive field/frame encoding of discrete cosine transform |
US5767909A (en) | 1995-03-28 | 1998-06-16 | Daewoo Electronics, Co., Ltd. | Apparatus for encoding a digital video signal using an adaptive scanning technique |
US5777680A (en) | 1995-06-30 | 1998-07-07 | Daewoo Electronics Co., Ltd. | Video signal encoding system controller for deciding an inter/intra mode, a field/frame DCT mode, and a quantization parameter |
US5818536A (en) | 1995-09-29 | 1998-10-06 | U.S. Philips Corporation | Motion vector selection using a cost function relating accuracy to bit rate |
US5886652A (en) | 1995-08-03 | 1999-03-23 | Ntt Mobile Communications Network, Inc. | Pseudo fixed data transmission device and method |
US5926226A (en) | 1996-08-09 | 1999-07-20 | U.S. Robotics Access Corp. | Method for adjusting the quality of a video coder |
US6115501A (en) | 1995-07-10 | 2000-09-05 | Hyundai Electronics Industries Co., Ltd. | Grid moving method for minimizing image information of an object |
US6125144A (en) | 1996-03-08 | 2000-09-26 | Oki Electric Industry Co., Ltd. | Picture coding method and picture coder |
US6157326A (en) | 1996-03-15 | 2000-12-05 | U.S. Philips Corporation | Method of and device for coding a digital information signal |
US6212234B1 (en) | 1997-06-04 | 2001-04-03 | Fuji Xerox Co., Ltd. | Color image encoding apparatus and color image decoding apparatus |
US6256423B1 (en) | 1998-09-18 | 2001-07-03 | Sarnoff Corporation | Intra-frame quantizer selection for video compression |
WO2001050770A2 (en) | 1999-12-28 | 2001-07-12 | Sony Electronics Inc. | Methods and apparatus for motion estimation using neighboring macroblocks |
US20010022815A1 (en) | 1995-05-26 | 2001-09-20 | Rohit Agarwal | Temporal tile staggering for block based video compression |
US6314208B1 (en) | 1998-07-21 | 2001-11-06 | Hewlett-Packard Company | System for variable quantization in JPEG for compound documents |
US20020009153A1 (en) | 2000-05-17 | 2002-01-24 | Samsung Electronics Co., Ltd. | Variable length coding and decoding methods and apparatuses using plural mapping table |
US20020036705A1 (en) | 2000-06-13 | 2002-03-28 | Samsung Electronics Co., Ltd. | Format converter using bi-directional motion vector and method thereof |
US20020071485A1 (en) | 2000-08-21 | 2002-06-13 | Kerem Caglar | Video coding |
US20020080871A1 (en) | 2000-10-03 | 2002-06-27 | Realtime Data, Llc | System and method for data feed acceleration and encryption |
US6414995B2 (en) | 1999-07-29 | 2002-07-02 | Mitsubishi Denki Kabushiki Kaisha | Motion vector detection system |
US6418166B1 (en) | 1998-11-30 | 2002-07-09 | Microsoft Corporation | Motion estimation and block matching pattern |
US6434197B1 (en) | 1999-01-07 | 2002-08-13 | General Instrument Corporation | Multi-functional transcoder for compressed bit streams |
JP2002290743A (en) | 2001-03-23 | 2002-10-04 | Ricoh Co Ltd | Image information coding method, coding apparatus, digital copying machine, digital facsimile machine, and digital filing apparatus |
US20020168114A1 (en) | 2001-02-06 | 2002-11-14 | Valente Stephane Edouard | Preprocessing method applied to textures of arbitrarily shaped objects |
US20020172289A1 (en) | 2001-03-08 | 2002-11-21 | Kozo Akiyoshi | Image coding method and apparatus and image decoding method and apparatus |
US6501860B1 (en) | 1998-01-19 | 2002-12-31 | Canon Kabushiki Kaisha | Digital signal coding and decoding based on subbands |
US6522784B1 (en) | 2000-04-11 | 2003-02-18 | International Business Machines Corporation | Enhanced compression of gray-level images |
WO2003026315A1 (en) | 2001-09-14 | 2003-03-27 | Ntt Docomo, Inc. | Coding method, decoding method, coding apparatus, decoding apparatus, image processing system, coding program, and decoding program |
US20030081850A1 (en) | 2001-09-14 | 2003-05-01 | Nokia Corporation | Method and system for context-based adaptive binary arithmetic coding |
US6570924B1 (en) | 1998-11-20 | 2003-05-27 | Interval Research Corp | Low cost video compression using fast, modified Z-coding of wavelet pyramids |
JP2003235044A (en) | 2002-02-08 | 2003-08-22 | Nippon Telegr & Teleph Corp <Ntt> | Moving picture encoding method, moving picture decoding method, execution programs for the methods, and recording medium with the execution programs recorded thereon |
US20030215018A1 (en) | 2002-05-14 | 2003-11-20 | Macinnis Alexander G. | System and method for transcoding entropy-coded bitstreams |
US6661842B1 (en) | 2000-09-22 | 2003-12-09 | General Dynamics Decision Systems, Inc. | Methods and apparatus for error-resilient video coding |
US6661925B1 (en) | 2000-03-22 | 2003-12-09 | Board Of Supervisors Of Louisiana State University & Agricultural & Mechanical College | Functional set compression |
US20040013308A1 (en) | 2002-07-18 | 2004-01-22 | Lg Electronics Inc. | Calculation method for prediction motion vector |
US20040120398A1 (en) | 2002-12-19 | 2004-06-24 | Ximin Zhang | System and method for adaptive field and frame video encoding using rate-distortion characteristics |
US20040131117A1 (en) | 2003-01-07 | 2004-07-08 | Sheraizin Vitaly S. | Method and apparatus for improving MPEG picture compression |
US6782053B1 (en) | 1999-08-11 | 2004-08-24 | Nokia Mobile Phones Ltd. | Method and apparatus for transferring video frame in telecommunication system |
US20040234144A1 (en) | 2002-04-26 | 2004-11-25 | Kazuo Sugimoto | Image encoding device, image decoding device, image encoding method, image decoding method, image encoding program, and image decoding program |
US6907079B2 (en) | 2002-05-01 | 2005-06-14 | Thomson Licensing S.A. | Deblocking filter conditioned on pixel brightness |
US6917651B1 (en) | 2000-01-28 | 2005-07-12 | Samsung Electronics Co., Ltd. | Variable length coding method and apparatus |
US20050152459A1 (en) * | 2004-01-14 | 2005-07-14 | Austin Lobo | Decoding method and decoding apparatus |
US20050180500A1 (en) | 2001-12-31 | 2005-08-18 | Stmicroelectronics Asia Pacific Pte Ltd | Video encoding |
US20050276323A1 (en) | 2002-09-27 | 2005-12-15 | Vanguard Software Solutions, Inc. | Real-time video coding/decoding |
US20060001557A1 (en) * | 2003-11-24 | 2006-01-05 | Tom Dong Shiang | Computer-implemented method for compressing image files |
US6985527B2 (en) | 2001-03-07 | 2006-01-10 | Pts Corporation | Local constraints for motion matching |
US7010032B1 (en) | 1999-03-12 | 2006-03-07 | Kabushiki Kaisha Toshiba | Moving image coding apparatus and decoding apparatus |
US20060098738A1 (en) | 2003-01-09 | 2006-05-11 | Pamela Cosman | Video encoding methods and devices |
US20060126724A1 (en) | 2004-12-10 | 2006-06-15 | Lsi Logic Corporation | Programmable quantization dead zone and threshold for standard-based H.264 and/or VC1 video encoding |
US7085425B2 (en) | 1997-09-23 | 2006-08-01 | Telefonaktiebolaget Lm Ericsson (Publ) | Embedded DCT-based still image coding algorithm |
US7116831B2 (en) | 2002-04-10 | 2006-10-03 | Microsoft Corporation | Chrominance motion vector rounding |
US20070025441A1 (en) | 2005-07-28 | 2007-02-01 | Nokia Corporation | Method, module, device and system for rate control provision for video encoders capable of variable bit rate encoding |
EP1768415A1 (en) | 2005-09-27 | 2007-03-28 | Matsushita Electric Industrial Co., Ltd. | Adaptive scan order of DCT coefficients and its signaling |
US7226150B2 (en) | 2003-07-14 | 2007-06-05 | Hitachi, Ltd. | Inkjet head and a method of manufacturing the same |
US20070127831A1 (en) * | 2003-04-10 | 2007-06-07 | Kartik Venkataraman | Compression system for integrated sensor devices |
US20070177673A1 (en) | 2006-01-12 | 2007-08-02 | Lg Electronics Inc. | Processing multiview video |
US20080181299A1 (en) | 2007-01-16 | 2008-07-31 | Dihong Tian | Breakpoint determining for hybrid variable length coding using relationship to neighboring blocks |
US7432329B2 (en) | 1997-05-24 | 2008-10-07 | Byk-Chemie Gmbh | Dispersing agents for pigments or extenders based on acrylic acid alkyl ester polymers |
US20080310745A1 (en) | 2007-06-15 | 2008-12-18 | Qualcomm Incorporated | Adaptive coefficient scanning in video coding |
US20080310503A1 (en) | 2007-06-14 | 2008-12-18 | Samsung Electronics Co., Ltd. | Method and apparatus for entropy-coding/entropy-decoding video data |
US7496143B2 (en) | 2002-05-02 | 2009-02-24 | Fraunhofer-Gesellschaft Zur Foerderung Der Angewandten Forschung E.V. | Method and arrangement for coding transform coefficients in picture and/or video coders and decoders and a corresponding computer program and a corresponding computer-readable storage medium |
US20100054328A1 (en) * | 2006-11-01 | 2010-03-04 | Canon Kabushiki Kaisha | Encoding apparatus and control method thereof |
US20100098169A1 (en) | 2008-10-16 | 2010-04-22 | Texas Instruments Incorporated | Method and apparatus for motion estimation using compressed reference frame |
US20100097250A1 (en) * | 2008-10-17 | 2010-04-22 | Texas Instruments Incorporated | Parallel CABAC Decoding for Video Decompression |
US20100290568A1 (en) * | 2006-03-31 | 2010-11-18 | Hajime Suzuki | Decoding frequency channelised signals |
US7843998B2 (en) | 2004-12-30 | 2010-11-30 | Tandberg Telecom As | Method for improved entropy coding |
-
2011
- 2011-04-05 US US13/080,240 patent/US8938001B1/en active Active
Patent Citations (79)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4710810A (en) | 1984-03-06 | 1987-12-01 | Nec Corporation | Predictive coding/decoding apparatus for video signal |
US5091782A (en) | 1990-04-09 | 1992-02-25 | General Instrument Corporation | Apparatus and method for adaptively compressing successive blocks of digital video |
US5150209A (en) | 1990-05-11 | 1992-09-22 | Picturetel Corporation | Hierarchical entropy coded lattice threshold quantization encoding method and apparatus for image and video compression |
US5341440A (en) | 1991-07-12 | 1994-08-23 | Earl Joseph G | Method and apparatus for increasing information compressibility |
US5461423A (en) | 1992-05-29 | 1995-10-24 | Sony Corporation | Apparatus for generating a motion vector with half-pixel precision for use in compressing a digital motion picture signal |
JPH07135660A (en) | 1993-11-12 | 1995-05-23 | Matsushita Electric Ind Co Ltd | Movement vector coder |
US5650782A (en) | 1994-01-18 | 1997-07-22 | Daewoo Electronics Co Ltd. | Variable length coder using two VLC tables |
US5686962A (en) | 1994-07-30 | 1997-11-11 | Samsung Electronics Co., Ltd. | Motion image coder using pre-filter to reduce quantization error |
KR100213018B1 (en) | 1994-07-30 | 1999-08-02 | 윤종용 | Apparatus for encoding moving picture |
US5708473A (en) | 1994-08-30 | 1998-01-13 | Hughes Aircraft Company | Two stage video film compression method and system |
US5737020A (en) | 1995-03-27 | 1998-04-07 | International Business Machines Corporation | Adaptive field/frame encoding of discrete cosine transform |
US5767909A (en) | 1995-03-28 | 1998-06-16 | Daewoo Electronics, Co., Ltd. | Apparatus for encoding a digital video signal using an adaptive scanning technique |
US6473463B2 (en) | 1995-05-26 | 2002-10-29 | Intel Corporation | Temporal tile staggering for block based video compression |
US20010022815A1 (en) | 1995-05-26 | 2001-09-20 | Rohit Agarwal | Temporal tile staggering for block based video compression |
US5777680A (en) | 1995-06-30 | 1998-07-07 | Daewoo Electronics Co., Ltd. | Video signal encoding system controller for deciding an inter/intra mode, a field/frame DCT mode, and a quantization parameter |
US6115501A (en) | 1995-07-10 | 2000-09-05 | Hyundai Electronics Industries Co., Ltd. | Grid moving method for minimizing image information of an object |
US5886652A (en) | 1995-08-03 | 1999-03-23 | Ntt Mobile Communications Network, Inc. | Pseudo fixed data transmission device and method |
US5818536A (en) | 1995-09-29 | 1998-10-06 | U.S. Philips Corporation | Motion vector selection using a cost function relating accuracy to bit rate |
US6125144A (en) | 1996-03-08 | 2000-09-26 | Oki Electric Industry Co., Ltd. | Picture coding method and picture coder |
US6157326A (en) | 1996-03-15 | 2000-12-05 | U.S. Philips Corporation | Method of and device for coding a digital information signal |
US5926226A (en) | 1996-08-09 | 1999-07-20 | U.S. Robotics Access Corp. | Method for adjusting the quality of a video coder |
US7432329B2 (en) | 1997-05-24 | 2008-10-07 | Byk-Chemie Gmbh | Dispersing agents for pigments or extenders based on acrylic acid alkyl ester polymers |
US6212234B1 (en) | 1997-06-04 | 2001-04-03 | Fuji Xerox Co., Ltd. | Color image encoding apparatus and color image decoding apparatus |
US7085425B2 (en) | 1997-09-23 | 2006-08-01 | Telefonaktiebolaget Lm Ericsson (Publ) | Embedded DCT-based still image coding algorithm |
US6501860B1 (en) | 1998-01-19 | 2002-12-31 | Canon Kabushiki Kaisha | Digital signal coding and decoding based on subbands |
US6314208B1 (en) | 1998-07-21 | 2001-11-06 | Hewlett-Packard Company | System for variable quantization in JPEG for compound documents |
US6256423B1 (en) | 1998-09-18 | 2001-07-03 | Sarnoff Corporation | Intra-frame quantizer selection for video compression |
US6570924B1 (en) | 1998-11-20 | 2003-05-27 | Interval Research Corp | Low cost video compression using fast, modified Z-coding of wavelet pyramids |
US6418166B1 (en) | 1998-11-30 | 2002-07-09 | Microsoft Corporation | Motion estimation and block matching pattern |
US6434197B1 (en) | 1999-01-07 | 2002-08-13 | General Instrument Corporation | Multi-functional transcoder for compressed bit streams |
US7010032B1 (en) | 1999-03-12 | 2006-03-07 | Kabushiki Kaisha Toshiba | Moving image coding apparatus and decoding apparatus |
US6414995B2 (en) | 1999-07-29 | 2002-07-02 | Mitsubishi Denki Kabushiki Kaisha | Motion vector detection system |
US6782053B1 (en) | 1999-08-11 | 2004-08-24 | Nokia Mobile Phones Ltd. | Method and apparatus for transferring video frame in telecommunication system |
WO2001050770A2 (en) | 1999-12-28 | 2001-07-12 | Sony Electronics Inc. | Methods and apparatus for motion estimation using neighboring macroblocks |
US6917651B1 (en) | 2000-01-28 | 2005-07-12 | Samsung Electronics Co., Ltd. | Variable length coding method and apparatus |
US6661925B1 (en) | 2000-03-22 | 2003-12-09 | Board Of Supervisors Of Louisiana State University & Agricultural & Mechanical College | Functional set compression |
US6522784B1 (en) | 2000-04-11 | 2003-02-18 | International Business Machines Corporation | Enhanced compression of gray-level images |
US6934419B2 (en) | 2000-04-11 | 2005-08-23 | International Business Machines Corporation | Enhanced compression of gray-level images |
US20020009153A1 (en) | 2000-05-17 | 2002-01-24 | Samsung Electronics Co., Ltd. | Variable length coding and decoding methods and apparatuses using plural mapping table |
US20020036705A1 (en) | 2000-06-13 | 2002-03-28 | Samsung Electronics Co., Ltd. | Format converter using bi-directional motion vector and method thereof |
US20020071485A1 (en) | 2000-08-21 | 2002-06-13 | Kerem Caglar | Video coding |
US6661842B1 (en) | 2000-09-22 | 2003-12-09 | General Dynamics Decision Systems, Inc. | Methods and apparatus for error-resilient video coding |
US20020080871A1 (en) | 2000-10-03 | 2002-06-27 | Realtime Data, Llc | System and method for data feed acceleration and encryption |
US20020168114A1 (en) | 2001-02-06 | 2002-11-14 | Valente Stephane Edouard | Preprocessing method applied to textures of arbitrarily shaped objects |
US6985527B2 (en) | 2001-03-07 | 2006-01-10 | Pts Corporation | Local constraints for motion matching |
US20020172289A1 (en) | 2001-03-08 | 2002-11-21 | Kozo Akiyoshi | Image coding method and apparatus and image decoding method and apparatus |
JP2002290743A (en) | 2001-03-23 | 2002-10-04 | Ricoh Co Ltd | Image information coding method, coding apparatus, digital copying machine, digital facsimile machine, and digital filing apparatus |
WO2003026315A1 (en) | 2001-09-14 | 2003-03-27 | Ntt Docomo, Inc. | Coding method, decoding method, coding apparatus, decoding apparatus, image processing system, coding program, and decoding program |
US6856701B2 (en) | 2001-09-14 | 2005-02-15 | Nokia Corporation | Method and system for context-based adaptive binary arithmetic coding |
US20030081850A1 (en) | 2001-09-14 | 2003-05-01 | Nokia Corporation | Method and system for context-based adaptive binary arithmetic coding |
EP1351510A1 (en) | 2001-09-14 | 2003-10-08 | NTT DoCoMo, Inc. | Coding method,decoding method,coding apparatus,decoding apparatus,image processing system,coding program,and decoding program |
US20050180500A1 (en) | 2001-12-31 | 2005-08-18 | Stmicroelectronics Asia Pacific Pte Ltd | Video encoding |
JP2003235044A (en) | 2002-02-08 | 2003-08-22 | Nippon Telegr & Teleph Corp <Ntt> | Moving picture encoding method, moving picture decoding method, execution programs for the methods, and recording medium with the execution programs recorded thereon |
US7116831B2 (en) | 2002-04-10 | 2006-10-03 | Microsoft Corporation | Chrominance motion vector rounding |
US20040234144A1 (en) | 2002-04-26 | 2004-11-25 | Kazuo Sugimoto | Image encoding device, image decoding device, image encoding method, image decoding method, image encoding program, and image decoding program |
US6907079B2 (en) | 2002-05-01 | 2005-06-14 | Thomson Licensing S.A. | Deblocking filter conditioned on pixel brightness |
US7496143B2 (en) | 2002-05-02 | 2009-02-24 | Fraunhofer-Gesellschaft Zur Foerderung Der Angewandten Forschung E.V. | Method and arrangement for coding transform coefficients in picture and/or video coders and decoders and a corresponding computer program and a corresponding computer-readable storage medium |
US20030215018A1 (en) | 2002-05-14 | 2003-11-20 | Macinnis Alexander G. | System and method for transcoding entropy-coded bitstreams |
US20040013308A1 (en) | 2002-07-18 | 2004-01-22 | Lg Electronics Inc. | Calculation method for prediction motion vector |
US20050276323A1 (en) | 2002-09-27 | 2005-12-15 | Vanguard Software Solutions, Inc. | Real-time video coding/decoding |
US20040120398A1 (en) | 2002-12-19 | 2004-06-24 | Ximin Zhang | System and method for adaptive field and frame video encoding using rate-distortion characteristics |
US20040131117A1 (en) | 2003-01-07 | 2004-07-08 | Sheraizin Vitaly S. | Method and apparatus for improving MPEG picture compression |
US20060098738A1 (en) | 2003-01-09 | 2006-05-11 | Pamela Cosman | Video encoding methods and devices |
US20070127831A1 (en) * | 2003-04-10 | 2007-06-07 | Kartik Venkataraman | Compression system for integrated sensor devices |
US7226150B2 (en) | 2003-07-14 | 2007-06-05 | Hitachi, Ltd. | Inkjet head and a method of manufacturing the same |
US20060001557A1 (en) * | 2003-11-24 | 2006-01-05 | Tom Dong Shiang | Computer-implemented method for compressing image files |
US20050152459A1 (en) * | 2004-01-14 | 2005-07-14 | Austin Lobo | Decoding method and decoding apparatus |
US20060126724A1 (en) | 2004-12-10 | 2006-06-15 | Lsi Logic Corporation | Programmable quantization dead zone and threshold for standard-based H.264 and/or VC1 video encoding |
US7843998B2 (en) | 2004-12-30 | 2010-11-30 | Tandberg Telecom As | Method for improved entropy coding |
US20070025441A1 (en) | 2005-07-28 | 2007-02-01 | Nokia Corporation | Method, module, device and system for rate control provision for video encoders capable of variable bit rate encoding |
EP1768415A1 (en) | 2005-09-27 | 2007-03-28 | Matsushita Electric Industrial Co., Ltd. | Adaptive scan order of DCT coefficients and its signaling |
US20070177673A1 (en) | 2006-01-12 | 2007-08-02 | Lg Electronics Inc. | Processing multiview video |
US20100290568A1 (en) * | 2006-03-31 | 2010-11-18 | Hajime Suzuki | Decoding frequency channelised signals |
US20100054328A1 (en) * | 2006-11-01 | 2010-03-04 | Canon Kabushiki Kaisha | Encoding apparatus and control method thereof |
US20080181299A1 (en) | 2007-01-16 | 2008-07-31 | Dihong Tian | Breakpoint determining for hybrid variable length coding using relationship to neighboring blocks |
US20080310503A1 (en) | 2007-06-14 | 2008-12-18 | Samsung Electronics Co., Ltd. | Method and apparatus for entropy-coding/entropy-decoding video data |
US20080310745A1 (en) | 2007-06-15 | 2008-12-18 | Qualcomm Incorporated | Adaptive coefficient scanning in video coding |
US20100098169A1 (en) | 2008-10-16 | 2010-04-22 | Texas Instruments Incorporated | Method and apparatus for motion estimation using compressed reference frame |
US20100097250A1 (en) * | 2008-10-17 | 2010-04-22 | Texas Instruments Incorporated | Parallel CABAC Decoding for Video Decompression |
Non-Patent Citations (13)
Title |
---|
"Implementors' Guide; Series H: Audiovisual and Multimedia Systems; Coding of moving video: Implementors Guide for H.264. Advanced video coding for generic audiovisual services". H.264. International Telecommunication Union. Version 12. Dated Jul. 30, 2010. |
"Overview; VP7 Data Format and Decoder". Version 1.5. On2 Technologies, Inc. Dated Mar. 28, 2005. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video". H.264. Advanced video coding for generic audiovisual services. International Telecommunication Union. Version 11. Dated Mar. 2009. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video". H.264. Advanced video coding for generic audiovisual services. International Telecommunication Union. Version 12. Dated Mar. 2007. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video". H.264. Advanced video coding for generic audiovisual services. Version 8. International Telecommunication Union. Dated Nov. 1, 2007. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video". H.264. Amendment 2: New profiles for professional applications. International Telecommunication Union. Dated Apr. 2007. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video; Advanced video coding for generic audiovisual services". H.264. Amendment 1: Support of additional colour spaces and removal of the High 4:4:4. Profile. International Telecommunication Union. Dated Jun. 2006. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video; Advanced video coding for generic audiovisual services". H.264. Version 1. International Telecommunication Union. Dated May 2003. |
"Series H: Audiovisual and Multimedia Systems; Infrastructure of audiovisual services-Coding of moving video; Advanced video coding for generic audiovisual services". H.264. Version 3. International Telecommunication Union. Dated Mar. 2005. |
"VP6 Bitstream & Decoder Specification". Version 1.02. On2 Technologies, Inc. Dated Aug. 17, 2006. |
"VP6 Bitstream & Decoder Specification". Version 1.03. On2 Technologies, Inc. Dated Oct. 29, 2007. |
"VP8 Data Format and Decoding Guide". WebM Project. Google On2. Dated: Dec. 1, 2010. |
Park, Jun Sung, et al. "Selective Intra Prediction Mode Decision for h.264/AVC Encoders", World Accademy of Science, Engineering and Technology 13, (2006). |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9172967B2 (en) | 2010-10-05 | 2015-10-27 | Google Technology Holdings LLC | Coding and decoding utilizing adaptive context model selection with zigzag scan |
US9247257B1 (en) | 2011-11-30 | 2016-01-26 | Google Inc. | Segmentation based entropy encoding and decoding |
US9774856B1 (en) | 2012-07-02 | 2017-09-26 | Google Inc. | Adaptive stochastic entropy coding |
US9509998B1 (en) | 2013-04-04 | 2016-11-29 | Google Inc. | Conditional predictive multi-symbol run-length coding |
US9392288B2 (en) | 2013-10-17 | 2016-07-12 | Google Inc. | Video coding using scatter-based scan tables |
US9179151B2 (en) | 2013-10-18 | 2015-11-03 | Google Inc. | Spatial proximity context entropy coding |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11936884B2 (en) | Coded-block-flag coding and derivation | |
US11638007B2 (en) | Codebook generation for cloud-based video applications | |
US8718146B2 (en) | Method, medium, and system encoding/decoding video data using bitrate adaptive binary arithmetic coding | |
US10645389B2 (en) | Using multiple probability models for entropy coding in video compression | |
US8767823B2 (en) | Method and apparatus for frame memory compression | |
US10735767B2 (en) | Transform coefficient coding using level maps | |
US8938001B1 (en) | Apparatus and method for coding using combinations | |
CN115379241A (en) | Method and apparatus for coding last significant coefficient flag | |
US11627321B2 (en) | Adaptive coding of prediction modes using probability distributions | |
US8891616B1 (en) | Method and apparatus for entropy encoding based on encoding cost | |
KR101710619B1 (en) | Method and apparatus for successively encoding/decoding image | |
KR100858245B1 (en) | Recorded medium having program for coding and decoding using bit-precision, and Apparatus there of | |
US10715821B2 (en) | Embedding information about EOB positions | |
US9247257B1 (en) | Segmentation based entropy encoding and decoding | |
US10284854B2 (en) | Adaptive stochastic entropy coding | |
Richter et al. | On the JPEG 2000 ultrafast mode | |
Arya et al. | A lossless compression algorithm for video frames | |
Ahmed | New Method to Reduce the Size of Codebook in Vector Quantization of Images |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BANKOSKI, JAMES;LAVARNWAY, SCOTT;WILKINS, PAUL;AND OTHERS;SIGNING DATES FROM 20110331 TO 20110401;REEL/FRAME:026095/0416 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |