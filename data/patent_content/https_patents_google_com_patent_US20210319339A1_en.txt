US20210319339A1 - Systems and Methods for Machine Learning in Hyperbolic Space - Google Patents
Systems and Methods for Machine Learning in Hyperbolic Space Download PDFInfo
- Publication number
- US20210319339A1 US20210319339A1 US17/227,817 US202117227817A US2021319339A1 US 20210319339 A1 US20210319339 A1 US 20210319339A1 US 202117227817 A US202117227817 A US 202117227817A US 2021319339 A1 US2021319339 A1 US 2021319339A1
- Authority
- US
- United States
- Prior art keywords
- weights
- computing system
- classification model
- machine
- training examples
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
Definitions
- the present disclosure relates generally to machine learning in hyperbolic space. More particularly, the present disclosure relates to systems and methods that perform normalization techniques and/or identify adversarial examples to facilitate machine learning in hyperbolic space.
- hyperbolic spaces have received sustained interest in recent years, owing to their ability to compactly represent data possessing hierarchical structure (e.g., trees and graphs).
- hierarchical structure e.g., trees and graphs.
- hyperbolic spaces offer a provable advantage over Euclidean spaces for such data: objects requiring an exponential number of dimensions in Euclidean space can be represented in a polynomial number of dimensions in hyperbolic space. This has motivated research into efficiently learning a suitable hyperbolic embedding for large-scale datasets.
- One example aspect of the present disclosure is directed to a computer-implemented method to learn a machine-learned classification model in a hyperbolic space.
- the method includes, for at least one of one or more training iterations: accessing, by a computing system comprising one or more computing devices, a current set of weights of the machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label; identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples, wherein, for each of the one or more of the plurality of training examples, the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model; determining, by the computing system, an updated set of
- the computing system includes one or more processors and one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors cause the computing system to perform operations.
- the operations include, for at least one of one or more training iterations: accessing, by the computing system, a current set of weights of a machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label.
- the operations include, for each of the plurality of training examples: generating, by the computing system, a predicted label for the respective input.
- the operations include determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the predicted label for the respective input; and normalizing, by the computing system, the intermediate set of weights to obtain an updated set of weights for which a Minkowski product of the updated set of weights with itself is less than zero.
- the operations include outputting, by the computing system, the updated set of weights for the machine-learned classification model.
- FIGS. 1A and 1B show example hyperbolic models with geodesics according to example embodiments of the present disclosure.
- FIG. 2 depicts an example algorithm for learning a hyperbolic perceptron according to example embodiments of the present disclosure.
- FIG. 3 depicts an example algorithm for learning a classifier in hyperbolic space according to example embodiments of the present disclosure.
- FIG. 4A shows a Euclidean margin as a distance between support vectors according to example embodiments of the present disclosure.
- FIG. 4B shows a hyperbolic margin as a distance between support vectors according to example embodiments of the present disclosure.
- FIG. 5A depicts a block diagram of an example computing system according to example embodiments of the present disclosure.
- FIG. 5B depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 5C depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 6 depicts a flow chart diagram of an example method to perform machine learning in hyperbolic space according to example embodiments of the present disclosure.
- FIG. 7 depicts a flow chart diagram of an example method to learn a machine-learned classification model in hyperbolic space according to example embodiments of the present disclosure.
- the present disclosure provides systems and methods for performing machine learning in hyperbolic space.
- techniques are provided which enable the learning of a classifier (e.g., large-margin classifier) for data defined within a hyperbolic space (e.g., which may be particularly beneficial for data that possesses a hierarchical structure).
- One example aspect of the present disclosure is a hyperbolic perceptron algorithm, which provably converges to a separating hyperplane.
- the present disclosure provides a hyperbolic version of the classic perceptron algorithm and establishes its convergence for data that is separable with a margin.
- the provided algorithm establishes that it is possible to design classification algorithms that exploit the structure of hyperbolic space, while provably converging to some admissible (not necessarily large-margin) separator.
- Another example aspect of the present disclosure provides algorithms to efficiently learn a machine-learned classification model (e.g., a large-margin hyperplane for a large-margin classifier), relying on the careful injection of adversarial examples.
- a machine-learned classification model e.g., a large-margin hyperplane for a large-margin classifier
- the present disclosure establishes how suitable injection of adversarial examples to gradient-based loss minimization can yield an algorithm which can efficiently learn a classification model.
- the present disclosure further demonstrates that simply performing gradient descent or using adversarial examples alone typically does not suffice to yield such a classifier efficiently.
- the provided algorithms establish that it is further possible to design classification algorithms that provably converge to a large-margin separator, by suitably injecting adversarial examples.
- Yet another example aspect of the present disclosure provides proof that for hierarchical data that embeds well into hyperbolic space, the low embedding dimension ensures superior guarantees when learning the classifier directly in hyperbolic space.
- the present disclosure compares the Euclidean and hyperbolic approaches for hierarchical data and analyzes the trade-off between low embedding dimensions and low distortion (dimension-distortion trade-off) when learning robust classifiers on embedded data.
- the low embedding dimension is sufficient to ensure superior guarantees when learning the classifier in hyperbolic space. Therefore, the present disclosure shows that the adaptation of algorithms to the intrinsic geometry of the data can lead to significant performance gains.
- the present disclosure provides systems and methods for performing machine learning (e.g., learning a classification model such as a large-margin classifier) in hyperbolic space.
- Algorithms are provided for provably learning such classifiers in hyperbolic space.
- Technical analysis establishes that these can be superior to classifiers learned in na ⁇ ve Euclidean space. Therefore, by using a hyperbolic space that better reflects the intrinsic geometry of the data, one can see gains in both representation size and performance.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- improved machine-learned models such as classification models can be developed, which better leverage the intrinsic geometry of certain input data such as data which is hierarchical in nature.
- models can be generated which better account for (e.g., run faster, make better predictions, train faster, etc.) the structure of certain forms of input data.
- aspects of the present disclosure provide algorithms for learning models in hyperbolic space with guaranteed convergence and/or other guarantees.
- the failure of certain models to converge can be reduced or eliminated.
- training attempts or schemes which fail or otherwise represent lost or unproductive usage of computing resources e.g., process usage, memory usage, network bandwidth, etc.
- the following introduces basic notation for two popular models of hyperbolic spaces.
- other models of hyperbolic space can be used with the present disclosure as well.
- the distance (x, y) corresponds to the length of the shortest line (geodesic) along the manifold connecting x and x′ (cf. FIG. 1A ). Note that ( , ) forms a metric space.
- hyperbolic space Another model of hyperbolic space that can be used is the Poincare half-plane model, which defines a hyperbolic metric space on the upper half of the complex plane as follows:
- the Poincare half-plane model can also be defined for higher dimensions. Furthermore, there exists an isometric mapping between both Lorentz model and Poincare half-plane model that preserves the Minkowski product.
- a map ⁇ : X 1 ⁇ X 2 between metric spaces (X 1 , d 1 ) and (X 2 , d 2 ) is called embedding.
- the distance of a point x ⁇ d from the decision boundary ⁇ w can be computed as:
- d ⁇ ( x , ⁇ H w ) ⁇ a ⁇ ⁇ sinh ⁇ ( w * x - w * w ) ⁇ .
- Example aspects of the present disclosure enable learning a large margin classifier in a hyperbolic space.
- margin Analogous to the Euclidean setting, the natural notion of margin is the minimal distance to the decision boundary over all training samples:
- FIG. 2 presents a hyperbolic version of the classic perceptron algorithm and establishes that it will converge on data that is separable with a margin.
- the hyperbolic perceptron learns a binary classifier with respect to the Minkowski product. This is implemented in the update rule:
- the present disclosure enables learning the hyperbolic perceptron via application of a normalization step:
- the proof of Theorem 3.1 follows the standard proof of the Euclidean perceptron and utilizes the Cauchy-Schwartz inequality for the Minkowski product.
- Theorem 3.1 establishes that the hyperbolic perceptron converges to some linear separator. However, for the purposes of generalization, one would ideally like to converge to a large-margin separator. As with the classic Euclidean perceptron, no such guarantee is possible for the hyperbolic perceptron; this motivates to ask whether a suitable modification can rectify this.
- margin losses such as the logistic or hinge loss.
- l ⁇ 1 ⁇ + be a loss function of the form
- f: ⁇ + is some convex, non-increasing function, e.g., the hinge loss.
- the empirical risk of the classifier parametrized by on the training set ⁇ ⁇ 1 ⁇ is
- a common strategy to learn a suitable classifier is to minimize this empirical risk via gradient descent, which for learning rate ⁇ >0 generates iterates
- e i ⁇ d+1 be the i-th standard basis vector.
- ⁇ w t ⁇ t ⁇ 0 is a sequence of classifiers generated by the gradient descent updates (cf. (3.2)). Then, the number of iterations needed to achieve margin ⁇ is ⁇ (exp( ⁇ )).
- Theorem 3.3 reveals that gradient descent on a margin loss is insufficient to efficiently obtain a large-margin classifier.
- this section shows how to alleviate this problem by enriching the training set with adversarial examples before updating the classifier (cf. Algorithm 2 in FIG. 3 ).
- learning a model can include minimizing a robust loss of the following form:
- the inner optimization defined in (4.2) generates an adversarial example by perturbing a given input feature x on the hyperbolic manifold. Note that the magnitude of the perturbation added to the original example is bounded by ⁇ , which is referred to as the adversarial budget. In particular, it is desirable to construct a perturbation that maximizes the loss, i.e., ⁇ tilde over (x) ⁇ argmax (x,z) ⁇ l(z,y;w).
- the outer optimization (cf. (4.1)) can be achieved by an iterative optimization procedure, which generates a sequence of classifiers ⁇ w t ⁇ .
- the classifier w t can be updated according to an update rule , which accepts as input the current estimate of the weight vector, the original training set, and an adversarial perturbation of the training set.
- the update rule produces as output a weight vector which approximately minimizes the robust loss L rob in (4.1).
- the inner maximization can be solved in closed form as:
- the training set is linearly separable, i.e., there exists a w ⁇ d+1 , such that y( w *x) ⁇ 0 for all (x, y) ⁇ .
- the function ⁇ (s), underlying the loss (cf. (3.1)), has the following properties: (i) ⁇ (s)>0 ⁇ s; (ii) ⁇ ′(s) ⁇ 0 ⁇ s; (iii) ⁇ is differentiable, and (iv) ⁇ is ⁇ -smooth.
- An example loss function that fulfills Assumption 1 is the following hyperbolic equivalent of the logistic regression loss:
- Algorithm 2 with a gradient update is guaranteed to converge to a large-margin classifier.
- Algorithm 2 (with an ERM update) outputs a linear separator of ⁇ ′.
- the number of iteration required to achieve a margin at least E is ⁇ (exp(d)).
- Example approaches described herein relate the distance between the support vectors to the size of the margin. The distortion of these distances via embedding then gives a bound on the error induced on the margin.
- one example technique is to relate the distance of the support vectors to the size of the margin via triangle relations.
- ⁇ ′ O ⁇ ( ⁇ log 3 ⁇ ⁇ x ⁇ ) .
- the proof of Theorem 5.1 follows from a simple side length-altitude relations in the Euclidean triangle between support vectors (cf. FIG. 4( a ) ).
- Corollary 5.2 is then a simple application of Bourgain's result on embedding trees into d .
- one example technique is to relate the margin to the pairwise distances of the support vectors. Such a relation can be constructed both in the original and in the embedding space, which allows us to study the influence of distortion on the margin in terms of c H .
- the half-space model d ′ (cf. ⁇ 2.1) is used.
- the Lorentz model + d ′ it may be necessary to map between the two spaces. It is shown in the U.S. Provisional Patent Application No. 63/008,288 that such a mapping exists and preserves the Minkowski product.
- the hyperbolic embedding ⁇ H has two sources of distortion: (1) the multiplicative distortion of pairwise distances, measured by the factor
- the decision hyperplane corresponds to a hypercircle w .
- the support vectors lie on hypercircles x and y , which correspond to the set of points of hyperbolic distance E (i.e., the margin) from the decision boundary.
- E the set of points of hyperbolic distance from the decision boundary.
- the technical proof relies on a construction that reduces the problem to Euclidean geometry via circle inversion on the decision hypercircle.
- FIG. 1A depicts a block diagram of an example computing system 100 that according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more machine-learned models 120 .
- the machine-learned models 120 can be or can otherwise include various margin-based classifiers such as large-margin classifiers.
- the machine-learned models 120 can be or can otherwise include machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- the one or more machine-learned models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- the user computing device 102 can implement multiple parallel instances of a single machine-learned model 120 .
- one or more machine-learned models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the machine-learned models 140 can be implemented by the server computing system 140 as a portion of a web service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130 .
- the user computing device 102 can also include one or more user input component 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more machine-learned models 140 .
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include various margin-based classifiers such as large-margin classifiers.
- the machine-learned models 140 can be or can otherwise include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 152 and a memory 154 .
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned models 120 and/or 140 based on a set of training data 162 .
- the training data 162 can include, for example, data defined within a hyperbolic space such as, for example, data that has a hierarchical structure.
- the model trainer 160 can be configured to perform some or all of the algorithms or methods described herein, including Algorithms 1 and/or 2 and/or the methods of FIGS. 6 and/or 7 .
- the training examples can be provided by the user computing device 102 .
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- FIG. 1A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162 .
- the models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- FIG. 1B depicts a block diagram of an example computing device 10 that performs according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 1C depicts a block diagram of an example computing device 50 that performs according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 1C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50 . As illustrated in FIG. 1C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- FIG. 6 depicts a flow chart diagram of an example method to perform machine learning according to example embodiments of the present disclosure.
- FIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- the method 600 can include accessing by a computing system, a current set of weights of a machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label.
- the machine-learned classification model comprises a large-margin classification model. In some implementations, the machine-learned classification model comprises a binary classification model.
- the hyperbolic space is modeled according to a Lorentz model. In some implementations, the hyperbolic space is modeled according to a Poincare model.
- the method 600 can include accessing the next training example.
- the method 600 can include generating, by the computing system, a predicted label for the respective input.
- generating, by the computing system, the predicted label for the respective input can include determining a sign of a Minkowski product of the respective input and the current set of weights.
- the method 600 can include determining whether the predicted label is different from the respective ground truth label. If different, the method can proceed to 610 ; if not different, the method can proceed to 614 .
- the method 600 can include determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the predicted label for the respective input.
- the method 600 can include normalizing, by the computing system, the intermediate set of weights to obtain an updated set of weights for which a Minkowski product of the updated set of weights with itself is less than zero.
- normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights can include, when a square root of a Minkowski product between a negative of the intermediate set of weights and the intermediate set of weights is less than one: setting, by the computing system, the updated set of weights equal to the intermediate set of weights divided by the square root of the Minkowski product between the negative of the intermediate set of weights and the intermediate set of weights.
- the method 600 can include determining whether additional training examples remain. If additional examples remain, the method can return to 604 ; if additional examples do not remain, the method can proceed to 616 .
- the method 600 can include outputting, by the computing system, the updated set of weights for the machine-learned classification model.
- FIG. 7 depicts a flow chart diagram of an example method to perform machine learning according to example embodiments of the present disclosure.
- FIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- the method 700 can include accessing, by a computing system comprising one or more computing devices, a current set of weights of the machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label.
- the machine-learned classification model comprises a large-margin classification model. In some implementations, the machine-learned classification model comprises a binary classification model.
- the hyperbolic space is modeled according to a Lorentz model. In some implementations, the hyperbolic space is modeled according to a Poincare model.
- the method 700 can include identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples.
- the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model.
- the respective distance to the input of the respective training example is based at least in part on a Minkowski product between the possible input and the input of the respective training example.
- the method 700 can include determining, by the computing system, an updated set of weights for the machine-learned classification model based at least in part on at least one of the one or more adversarial training examples.
- determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples can include performing a gradient descent technique with respect to the loss function.
- the loss function comprises a margin loss function that evaluates a Minkowski product between the current set of weights and the respective input.
- determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples can include: determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples; and normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights such that a Minkowski product of the updated set of weights with itself is less than zero.
- normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights can include: setting, by the computing system, the updated set of weights equal to the intermediate set of weights divided by a square root of a Minkowski product between a negative of the intermediate set of weights and the intermediate set of weights.
- the method 700 can include outputting, by the computing system, the updated set of weights for the machine-learned classification model.
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
Generally, the present disclosure provides systems and methods for performing machine learning in hyperbolic space. Specifically, techniques are provided which enable the learning of a classifier (e.g., large-margin classifier) for data defined within a hyperbolic space (e.g., which may be particularly beneficial for data that possesses a hierarchical structure).
Description
- This application claims priority to and the benefit of U.S. Provisional Patent Application No. 63/008,288, filed Apr. 10, 2020. U.S. Provisional Patent Application No. 63/008,288 is hereby incorporated by reference in its entirety.
- The present disclosure relates generally to machine learning in hyperbolic space. More particularly, the present disclosure relates to systems and methods that perform normalization techniques and/or identify adversarial examples to facilitate machine learning in hyperbolic space.
- More particularly, hyperbolic spaces have received sustained interest in recent years, owing to their ability to compactly represent data possessing hierarchical structure (e.g., trees and graphs). In terms of representation learning, hyperbolic spaces offer a provable advantage over Euclidean spaces for such data: objects requiring an exponential number of dimensions in Euclidean space can be represented in a polynomial number of dimensions in hyperbolic space. This has motivated research into efficiently learning a suitable hyperbolic embedding for large-scale datasets.
- Despite this impressive representation power, little is known about the benefits of hyperbolic spaces for downstream tasks. For example, suppose one wishes to perform classification on data that is intrinsically hierarchical. One may naïvely ignore this structure and use a standard Euclidean embedding and corresponding classifier (e.g., SVM). However, it has not previously been shown that classification algorithms can be designed that exploit the structure of hyperbolic space and offer provable benefits in terms of performance (e.g., predictive accuracy). This fundamental question has received surprisingly limited attention. Indeed, while some prior work has proposed specific algorithms for learning classifiers in hyperbolic space, these have been primarily empirical in nature, and do not come equipped with theoretical guarantees on convergence and generalization.
- Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.
- One example aspect of the present disclosure is directed to a computer-implemented method to learn a machine-learned classification model in a hyperbolic space. The method includes, for at least one of one or more training iterations: accessing, by a computing system comprising one or more computing devices, a current set of weights of the machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label; identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples, wherein, for each of the one or more of the plurality of training examples, the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model; determining, by the computing system, an updated set of weights for the machine-learned classification model based at least in part on at least one of the one or more adversarial training examples; and outputting, by the computing system, the updated set of weights for the machine-learned classification model.
- Another example aspect of the present disclosure is directed to a computing system for performing machine learning in hyperbolic space. The computing system includes one or more processors and one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors cause the computing system to perform operations. The operations include, for at least one of one or more training iterations: accessing, by the computing system, a current set of weights of a machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label. The operations include, for each of the plurality of training examples: generating, by the computing system, a predicted label for the respective input. When the predicted label is different from the respective ground truth label, the operations include determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the predicted label for the respective input; and normalizing, by the computing system, the intermediate set of weights to obtain an updated set of weights for which a Minkowski product of the updated set of weights with itself is less than zero. The operations include outputting, by the computing system, the updated set of weights for the machine-learned classification model.
- Other aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
- These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.
- Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which:
-
FIGS. 1A and 1B show example hyperbolic models with geodesics according to example embodiments of the present disclosure. -
FIG. 2 depicts an example algorithm for learning a hyperbolic perceptron according to example embodiments of the present disclosure. -
FIG. 3 depicts an example algorithm for learning a classifier in hyperbolic space according to example embodiments of the present disclosure. -
FIG. 4A shows a Euclidean margin as a distance between support vectors according to example embodiments of the present disclosure. -
FIG. 4B shows a hyperbolic margin as a distance between support vectors according to example embodiments of the present disclosure. -
FIG. 5A depicts a block diagram of an example computing system according to example embodiments of the present disclosure. -
FIG. 5B depicts a block diagram of an example computing device according to example embodiments of the present disclosure. -
FIG. 5C depicts a block diagram of an example computing device according to example embodiments of the present disclosure. -
FIG. 6 depicts a flow chart diagram of an example method to perform machine learning in hyperbolic space according to example embodiments of the present disclosure. -
FIG. 7 depicts a flow chart diagram of an example method to learn a machine-learned classification model in hyperbolic space according to example embodiments of the present disclosure. - Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.
- Generally, the present disclosure provides systems and methods for performing machine learning in hyperbolic space. Specifically, techniques are provided which enable the learning of a classifier (e.g., large-margin classifier) for data defined within a hyperbolic space (e.g., which may be particularly beneficial for data that possesses a hierarchical structure).
- One example aspect of the present disclosure is a hyperbolic perceptron algorithm, which provably converges to a separating hyperplane. In particular, the present disclosure provides a hyperbolic version of the classic perceptron algorithm and establishes its convergence for data that is separable with a margin. The provided algorithm establishes that it is possible to design classification algorithms that exploit the structure of hyperbolic space, while provably converging to some admissible (not necessarily large-margin) separator.
- Another example aspect of the present disclosure provides algorithms to efficiently learn a machine-learned classification model (e.g., a large-margin hyperplane for a large-margin classifier), relying on the careful injection of adversarial examples. In particular, the present disclosure establishes how suitable injection of adversarial examples to gradient-based loss minimization can yield an algorithm which can efficiently learn a classification model. The present disclosure further demonstrates that simply performing gradient descent or using adversarial examples alone typically does not suffice to yield such a classifier efficiently. Thus, the provided algorithms establish that it is further possible to design classification algorithms that provably converge to a large-margin separator, by suitably injecting adversarial examples.
- Yet another example aspect of the present disclosure provides proof that for hierarchical data that embeds well into hyperbolic space, the low embedding dimension ensures superior guarantees when learning the classifier directly in hyperbolic space. In particular, the present disclosure compares the Euclidean and hyperbolic approaches for hierarchical data and analyzes the trade-off between low embedding dimensions and low distortion (dimension-distortion trade-off) when learning robust classifiers on embedded data. For hierarchical data that embeds well into hyperbolic space, the low embedding dimension is sufficient to ensure superior guarantees when learning the classifier in hyperbolic space. Therefore, the present disclosure shows that the adaptation of algorithms to the intrinsic geometry of the data can lead to significant performance gains.
- Thus, the present disclosure provides systems and methods for performing machine learning (e.g., learning a classification model such as a large-margin classifier) in hyperbolic space. Algorithms are provided for provably learning such classifiers in hyperbolic space. Technical analysis establishes that these can be superior to classifiers learned in naïve Euclidean space. Therefore, by using a hyperbolic space that better reflects the intrinsic geometry of the data, one can see gains in both representation size and performance.
- The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, by enabling machine learning to be performed in hyperbolic space, improved machine-learned models such as classification models can be developed, which better leverage the intrinsic geometry of certain input data such as data which is hierarchical in nature. Thus, enabling machine learning to be performed in hyperbolic space, models can be generated which better account for (e.g., run faster, make better predictions, train faster, etc.) the structure of certain forms of input data.
- As another example, aspects of the present disclosure provide algorithms for learning models in hyperbolic space with guaranteed convergence and/or other guarantees. By providing techniques with guaranteed convergence and/or other guarantees, the failure of certain models to converge can be reduced or eliminated. More generally, by providing techniques with guaranteed convergence and/or other guarantees, training attempts or schemes which fail or otherwise represent lost or unproductive usage of computing resources (e.g., process usage, memory usage, network bandwidth, etc.) can be reduced or eliminated, thereby conserving computing resources.
- 2.1 Hyperbolic Space
- Hyperbolic spaces are smooth Riemannian manifolds
- There are several equivalent models of hyperbolic space, each highlighting a different geometric aspect. In this work, the Lorentz model (aka hyperboloid model) is most prominently discussed for consistency. For x, x′∈
-
- Another model of hyperbolic space that can be used is the Poincare half-plane model, which defines a hyperbolic metric space on the upper half of the complex plane as follows:
-
- The Poincare half-plane model can also be defined for higher dimensions. Furthermore, there exists an isometric mapping between both Lorentz model and Poincare half-plane model that preserves the Minkowski product.
- 2.2 Embeddability of Hierarchical Data
- A map ϕ: X1→X2 between metric spaces (X1, d1) and (X2, d2) is called embedding. One can measure embeddability using the following multiplicative notion of distortion: Define cM≥1 such that for all x, x′∈X1
-
d 2(ϕ(x),ϕ(x′)))≤d 1(x,x′)≤c M ·d 2ϕ(x),ϕ(x′)) - Embeddings with multiplicative distortion cM=1 are termed isometric embeddings.
- Since hierarchical data is tree-like, one can use classic embeddability results for trees as a reference point. For the embeddability of trees, it has been shown that an N-point metric
2 N) with the distortion cM=O(log N). This bound is tight for trees in the sense that embedding them in a Euclidean space (of any dimension) must incur the distortion cm=Ω(log N). On the other hand, trees embed quasi-isometrically with cm=O(1+ε) into hyperbolic space - 2.3 Classification in Hyperbolic Space
-
-
-
-
-
-
- 2.4 Large-Margin Classification in Hyperbolic Space
- Example aspects of the present disclosure enable learning a large margin classifier in a hyperbolic space. Analogous to the Euclidean setting, the natural notion of margin is the minimal distance to the decision boundary over all training samples:
-
- The goal of large-margin classifier learning is then to find a linear separator hw*defined by:
- One step towards learning a large-margin classifier is to establish the ability to provably learn some separator. To this end, this section and
FIG. 2 presents a hyperbolic version of the classic perceptron algorithm and establishes that it will converge on data that is separable with a margin. - 3.1 Example Hyperbolic Perceptron Algorithm
- The hyperbolic perceptron (cf.
Algorithm 1 inFIG. 2 ) learns a binary classifier with respect to the Minkowski product. This is implemented in the update rule: -
v t ←w t +yx. - In contrast to the Euclidean case, the present disclosure enables learning the hyperbolic perceptron via application of a normalization step:
-
-
- It remains to establish that this algorithm converges, i.e., finds a solution which correctly classifies all the training samples. To this end, consider the following notion of hyperbolic linear separability with a margin: for X, X′⊆
-
w*x>γ′∀×∈X and w*x′<−γ′∀x′∈X′, - where γ′=a sin h(γ). Assuming our training set is separable with a margin, the hyperbolic perceptron has the following convergence guarantee.
-
-
- steps and returns a solution with margin γ.
- The proof of Theorem 3.1 follows the standard proof of the Euclidean perceptron and utilizes the Cauchy-Schwartz inequality for the Minkowski product.
- Remark 3.2 Recall that the classic guarantee for the perceptron algorithm in Euclidean space establishes a O(1/γ2) convergence rate When γ˜0, the
-
- convergence rate for hyperbolic spaces can be significantly faster than
-
- indicating that exploiting the structure of hyperbolic space can be beneficial.
- 3.2 A Challenge of Large-Margin Learning
- Theorem 3.1 establishes that the hyperbolic perceptron converges to some linear separator. However, for the purposes of generalization, one would ideally like to converge to a large-margin separator. As with the classic Euclidean perceptron, no such guarantee is possible for the hyperbolic perceptron; this motivates to ask whether a suitable modification can rectify this.
-
-
l(x,y;w)=f(y·(w*x)), (3.1) -
- A common strategy to learn a suitable classifier is to minimize this empirical risk via gradient descent, which for learning rate η>0 generates iterates
-
- Unfortunately, while this will yield a large-margin solution, the following result demonstrates that the number of iterations required may be prohibitively large.
- Theorem 3.3 Let ei ∈
- While this result appears disheartening, fortunately, the present disclosure presents a simple resolution: by suitably adding adversarial examples, the solution found by the gradient descent converges to a large-margin solution in polynomial time.
- Theorem 3.3 reveals that gradient descent on a margin loss is insufficient to efficiently obtain a large-margin classifier. However, this section shows how to alleviate this problem by enriching the training set with adversarial examples before updating the classifier (cf.
Algorithm 2 inFIG. 3 ). In particular, learning a model can include minimizing a robust loss of the following form: -
- The inner optimization defined in (4.2) generates an adversarial example by perturbing a given input feature x on the hyperbolic manifold. Note that the magnitude of the perturbation added to the original example is bounded by α, which is referred to as the adversarial budget. In particular, it is desirable to construct a perturbation that maximizes the loss, i.e., {tilde over (x)}←argmax
- The outer optimization (cf. (4.1)) can be achieved by an iterative optimization procedure, which generates a sequence of classifiers {wt}. The classifier wt can be updated according to an update rule
- It is now established that for a gradient based update rule, the above adversarial training procedure will efficiently converge to a large-margin solution.
- 4.1 Example Fast Convergence Via Gradient-Based Update
-
-
-
- To compute the update, one needs to compute gradients of the outer minimization problem, i.e., ∇w, lrob over
- The inner maximization can be solved in closed form as:
-
- where b, {hacek over (x)}, and {hacek over (x)}⊥ are defined in Theorem 4.4. Given the closed form expression for the adversarial example {tilde over (x)}, one can compute the gradient of the loss as
-
- where ∇wy(w*{tilde over (x)})=y{tilde over (x)}T=y({tilde over (x)}0, −{tilde over (x)}1, . . . , −{tilde over (x)}n)T. With Danskin's theorem, ∇l({tilde over (x)}, y; w)∈∂lrob(x,y;w), from which one can compute the descent direction and therefore the update step.
- 4.1.1 Example Convergence Analysis
- This subsection establishes that the above gradient-based update converges to a large-margin solution in polynomial time. For this analysis, the following assumptions are used:
-
Assumption 1. -
- 2. There exists some constant Rx>0, such that (i) ∥x∥≤Rx and (ii) all possible adversarial perturbations remain within this constraint, i.e., ∥{tilde over (x)}∥≤Rx. Furthermore, we assume ∥w∥≤Rw for some constant Rw. Let Rα: =RxRw.
- 3. The function ƒ(s), underlying the loss (cf. (3.1)), has the following properties: (i) ƒ(s)>0 ∀s; (ii) ƒ′(s)<0 ∀s; (iii) ƒ is differentiable, and (iv) ƒ is β-smooth.
- An example loss function that fulfills
Assumption 1 is the following hyperbolic equivalent of the logistic regression loss: -
- where Rα is as defined in
Assumption 1. The following focuses on this example choice of the loss function. Other loss functions as well as the derivation of the hyperbolic logistic regression loss can be used instead and are discussed in U.S. Provisional Patent Application No. 63/008,288. - First it is shown that
Algorithm 2 with a gradient update is guaranteed to converge to a large-margin classifier. -
- The proof can be found in U.S. Provisional Patent Application No. 63/008,288. While this result guarantees convergence, it does not guarantee efficiency (e.g., by showing a polynomial convergence rate). Next, we quantify the convergence rate of
Algorithm 2, showing that the algorithm with a gradient based update computes a max-margin classifier in polynomial time. - Theorem 4.2 (Convergence rate GD update, Algorithm 2) For a fixed constant c∈(0,1), let the step size
-
-
- The proof of Theorem 4.2 and the accompanying auxiliary results are presented in the U.S. Provisional Patent Application No. 63/008,288.
- 4.2 Discussion Regarding Combining Gradient Descent and Adversarial Training
- It is noted here that the enrichment of the training set with adversarial examples is significantly important for the polynomial-time convergence. Recall first that by Theorem 3.3, without adversarial training, one can construct a simple max-margin problem that cannot be solved in polynomial time. Interestingly, merely using adversarial examples by themselves does not suffice for fast convergence either.
-
-
-
-
- To prove Theorem 4.3, given a spherical code
- 4.3 Example Technique for Computing Adversarial Examples
- This section returns to the issue of efficiently computing the adversarial examples. Consider the certification problem: Given a classifier w∈
- For given (x, y) and w, recall that the adversarial example of interest is defined as follows
- For the underlying loss function (cf. (4.4)), this problem can be equivalently expressed as
-
- where w′=−yw. One can now guess z0, the first coordinate of z in (4.6), which reduces (4.6) to an (Euclidean) linear program with a spherical constraint:
-
- Next, the closed-form solution for (CERT) is provided.
- Theorem 4.4 Given the input example (x, y), let x\0=(x1, . . . , xd). One can efficiently compute a solution to CERT or decide that no solution exists. If a solution exists, then (based on a guess of z0 a maximizing adversarial example has the form {tilde over (x)}=z0, √{square root over (z0 2−1)}(b{hacek over (x)}+√{square root over (1−b2{hacek over (x)})}⊥)). Here,
-
- depends on the adversarial budget α, and {hacek over (x)}⊥ is a unit vector orthogonal to {hacek over (x)}=x\0/∥x\0∥.
- The proof of Theorem 4.4 is presented in U.S. Provisional Patent Application No. 63/008,288.
-
- So far we have focused on classifying data that is given in either Euclidean spaces
- How does the distortion cE, cH impact our guarantees on the margin? In the previous sections, we noticed that some of the guarantees scale with the dimension of the embedding space. Therefore, we want to analyze the trade-off between the higher distortion resulting from working with smaller embedding dimensions and the higher cost of training robust models due to working with larger embedding dimensions.
- Datasets are often encountered in ML applications that are intrinsically hierarchical. Theoretical results on the embeddability of trees (cf. § 2.2) suggest that hyperbolic spaces are especially suitable to represent hierarchical data. Therefore the analysis is restricted to such data. Further, the following assumptions are made on the underlying data and the embedding maps, respectively.
-
-
Assumption 3 The maps ϕH, ϕE preserve the partial order relation in X and the root is mapped onto the origin of the embedding space. - Example approaches described herein relate the distance between the support vectors to the size of the margin. The distortion of these distances via embedding then gives a bound on the error induced on the margin.
- 5.1 Example Euclidean Case
- In the Euclidean case, one example technique is to relate the distance of the support vectors to the size of the margin via triangle relations. Let x, y, ∈
- Theorem 5.1 Let ε′ and ε denote the margin with and without distortion. Then
-
-
-
-
- 5.2 Example Hyperbolic Case
- As in the Euclidean case, one example technique is to relate the margin to the pairwise distances of the support vectors. Such a relation can be constructed both in the original and in the embedding space, which allows us to study the influence of distortion on the margin in terms of cH. In the following, the half-space model
- The hyperbolic embedding ϕH has two sources of distortion: (1) the multiplicative distortion of pairwise distances, measured by the factor
-
-
- i.e., the distortion on both pairwise distances and norms is given by a factor CH −1
- In
FIG. 4B ). In this setting, one can show that the influence on the margin is negligible. More formally: -
- The technical proof relies on a construction that reduces the problem to Euclidean geometry via circle inversion on the decision hypercircle.
-
FIG. 1A depicts a block diagram of anexample computing system 100 that according to example embodiments of the present disclosure. Thesystem 100 includes auser computing device 102, aserver computing system 130, and atraining computing system 150 that are communicatively coupled over anetwork 180. - The
user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device. - The
user computing device 102 includes one ormore processors 112 and amemory 114. The one ormore processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 114 can storedata 116 andinstructions 118 which are executed by theprocessor 112 to cause theuser computing device 102 to perform operations. - In some implementations, the
user computing device 102 can store or include one or more machine-learnedmodels 120. For example, the machine-learnedmodels 120 can be or can otherwise include various margin-based classifiers such as large-margin classifiers. In other examples, the machine-learnedmodels 120 can be or can otherwise include machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models. Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks. - In some implementations, the one or more machine-learned
models 120 can be received from theserver computing system 130 overnetwork 180, stored in the usercomputing device memory 114, and then used or otherwise implemented by the one ormore processors 112. In some implementations, theuser computing device 102 can implement multiple parallel instances of a single machine-learnedmodel 120. - Additionally or alternatively, one or more machine-learned
models 140 can be included in or otherwise stored and implemented by theserver computing system 130 that communicates with theuser computing device 102 according to a client-server relationship. For example, the machine-learnedmodels 140 can be implemented by theserver computing system 140 as a portion of a web service. Thus, one ormore models 120 can be stored and implemented at theuser computing device 102 and/or one ormore models 140 can be stored and implemented at theserver computing system 130. - The
user computing device 102 can also include one or moreuser input component 122 that receives user input. For example, theuser input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. - The
server computing system 130 includes one ormore processors 132 and amemory 134. The one ormore processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 134 can storedata 136 andinstructions 138 which are executed by theprocessor 132 to cause theserver computing system 130 to perform operations. - In some implementations, the
server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which theserver computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof. - As described above, the
server computing system 130 can store or otherwise include one or more machine-learnedmodels 140. For example, themodels 140 can be or can otherwise include various machine-learned models. Example machine-learned models include various margin-based classifiers such as large-margin classifiers. In other examples, the machine-learnedmodels 140 can be or can otherwise include neural networks or other multi-layer non-linear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. - The
user computing device 102 and/or theserver computing system 130 can train themodels 120 and/or 140 via interaction with thetraining computing system 150 that is communicatively coupled over thenetwork 180. Thetraining computing system 150 can be separate from theserver computing system 130 or can be a portion of theserver computing system 130. - The
training computing system 150 includes one ormore processors 152 and amemory 154. The one ormore processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 154 can storedata 156 andinstructions 158 which are executed by theprocessor 152 to cause thetraining computing system 150 to perform operations. In some implementations, thetraining computing system 150 includes or is otherwise implemented by one or more server computing devices. - The
training computing system 150 can include amodel trainer 160 that trains the machine-learnedmodels 120 and/or 140 stored at theuser computing device 102 and/or theserver computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors. For example, a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function). Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations. - In some implementations, performing backwards propagation of errors can include performing truncated backpropagation through time. The
model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained. - In particular, the
model trainer 160 can train the machine-learnedmodels 120 and/or 140 based on a set oftraining data 162. Thetraining data 162 can include, for example, data defined within a hyperbolic space such as, for example, data that has a hierarchical structure. Themodel trainer 160 can be configured to perform some or all of the algorithms or methods described herein, includingAlgorithms 1 and/or 2 and/or the methods ofFIGS. 6 and/or 7 . - In some implementations, if the user has provided consent, the training examples can be provided by the
user computing device 102. Thus, in such implementations, themodel 120 provided to theuser computing device 102 can be trained by thetraining computing system 150 on user-specific data received from theuser computing device 102. In some instances, this process can be referred to as personalizing the model. - The
model trainer 160 includes computer logic utilized to provide desired functionality. Themodel trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some implementations, themodel trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors. In other implementations, themodel trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media. - The
network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over thenetwork 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). -
FIG. 1A illustrates one example computing system that can be used to implement the present disclosure. Other computing systems can be used as well. For example, in some implementations, theuser computing device 102 can include themodel trainer 160 and thetraining dataset 162. In such implementations, themodels 120 can be both trained and used locally at theuser computing device 102. In some of such implementations, theuser computing device 102 can implement themodel trainer 160 to personalize themodels 120 based on user-specific data. -
FIG. 1B depicts a block diagram of anexample computing device 10 that performs according to example embodiments of the present disclosure. Thecomputing device 10 can be a user computing device or a server computing device. - The
computing device 10 includes a number of applications (e.g.,applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. - As illustrated in
FIG. 1B , each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some implementations, the API used by each application is specific to that application. -
FIG. 1C depicts a block diagram of anexample computing device 50 that performs according to example embodiments of the present disclosure. Thecomputing device 50 can be a user computing device or a server computing device. - The
computing device 50 includes a number of applications (e.g.,applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). - The central intelligence layer includes a number of machine-learned models. For example, as illustrated in
FIG. 1C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of thecomputing device 50. - The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the
computing device 50. As illustrated inFIG. 1C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API). -
FIG. 6 depicts a flow chart diagram of an example method to perform machine learning according to example embodiments of the present disclosure. AlthoughFIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 602, the
method 600 can include accessing by a computing system, a current set of weights of a machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label. - In some implementations, the machine-learned classification model comprises a large-margin classification model. In some implementations, the machine-learned classification model comprises a binary classification model.
- In some implementations, the hyperbolic space is modeled according to a Lorentz model. In some implementations, the hyperbolic space is modeled according to a Poincare model.
- At 604, the
method 600 can include accessing the next training example. - At 606, the
method 600 can include generating, by the computing system, a predicted label for the respective input. - In some implementations, generating, by the computing system, the predicted label for the respective input can include determining a sign of a Minkowski product of the respective input and the current set of weights.
- At 608, the
method 600 can include determining whether the predicted label is different from the respective ground truth label. If different, the method can proceed to 610; if not different, the method can proceed to 614. - At 610, the
method 600 can include determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the predicted label for the respective input. - At 612, the
method 600 can include normalizing, by the computing system, the intermediate set of weights to obtain an updated set of weights for which a Minkowski product of the updated set of weights with itself is less than zero. - In some implementations, normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights can include, when a square root of a Minkowski product between a negative of the intermediate set of weights and the intermediate set of weights is less than one: setting, by the computing system, the updated set of weights equal to the intermediate set of weights divided by the square root of the Minkowski product between the negative of the intermediate set of weights and the intermediate set of weights.
- At 614, the
method 600 can include determining whether additional training examples remain. If additional examples remain, the method can return to 604; if additional examples do not remain, the method can proceed to 616. - At 616, the
method 600 can include outputting, by the computing system, the updated set of weights for the machine-learned classification model. -
FIG. 7 depicts a flow chart diagram of an example method to perform machine learning according to example embodiments of the present disclosure. AlthoughFIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 702, the
method 700 can include accessing, by a computing system comprising one or more computing devices, a current set of weights of the machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label. - In some implementations, the machine-learned classification model comprises a large-margin classification model. In some implementations, the machine-learned classification model comprises a binary classification model.
- In some implementations, the hyperbolic space is modeled according to a Lorentz model. In some implementations, the hyperbolic space is modeled according to a Poincare model.
- At 704, the
method 700 can include identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples. In some implementations, for each of the one or more of the plurality of training examples, the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model. - In some implementations, for each possible input contained in the hyperbolic space, the respective distance to the input of the respective training example is based at least in part on a Minkowski product between the possible input and the input of the respective training example.
- At 706, the
method 700 can include determining, by the computing system, an updated set of weights for the machine-learned classification model based at least in part on at least one of the one or more adversarial training examples. - In some implementations, determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples can include performing a gradient descent technique with respect to the loss function.
- In some implementations, the loss function comprises a margin loss function that evaluates a Minkowski product between the current set of weights and the respective input.
- In some implementations, determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples can include: determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples; and normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights such that a Minkowski product of the updated set of weights with itself is less than zero.
- In some implementations, normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights can include: setting, by the computing system, the updated set of weights equal to the intermediate set of weights divided by a square root of a Minkowski product between a negative of the intermediate set of weights and the intermediate set of weights.
- At 708, the
method 700 can include outputting, by the computing system, the updated set of weights for the machine-learned classification model. - The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
- While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.
Claims (20)
1. A computer-implemented method to learn a machine-learned classification model in a hyperbolic space, the method comprising, for at least one of one or more training iterations:
accessing, by a computing system comprising one or more computing devices, a current set of weights of the machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label;
identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples, wherein, for each of the one or more of the plurality of training examples, the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model;
determining, by the computing system, an updated set of weights for the machine-learned classification model based at least in part on at least one of the one or more adversarial training examples; and
outputting, by the computing system, the updated set of weights for the machine-learned classification model.
2. The computer-implemented method of claim 1 , wherein the machine-learned classification model comprises a large-margin classification model.
3. The computer-implemented method of claim 1 , wherein the machine-learned classification model comprises a binary classification model.
4. The computer-implemented method of claim 1 , wherein, for each possible input contained in the hyperbolic space, the respective distance to the input of the respective training example is based at least in part on a Minkowski product between the possible input and the input of the respective training example.
5. The computer-implemented method of claim 1 , wherein determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples comprises performing a gradient descent technique with respect to the loss function.
6. The computer-implemented method of claim 1 , wherein determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples comprises:
determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples; and
normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights such that a Minkowski product of the updated set of weights with itself is less than zero.
7. The computer-implemented method of claim 6 , wherein normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights comprises:
setting, by the computing system, the updated set of weights equal to the intermediate set of weights divided by a square root of a Minkowski product between a negative of the intermediate set of weights and the intermediate set of weights.
8. The computer-implemented method of claim 1 , wherein the loss function comprises a margin loss function that evaluates a Minkowski product between the current set of weights and the respective input.
9. The computer-implemented method of claim 1 , wherein the hyperbolic space is modeled according to a Lorentz model.
10. The computer-implemented method of claim 1 , wherein the hyperbolic space is modeled according to a Poincare model.
11. One or more non-transitory computer-readable media that collectively store a machine-learned classification model that has been trained by performance of operations, the operations comprising:
accessing, by a computing system comprising one or more computing devices, a current set of weights of the machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label;
identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples, wherein, for each of the one or more of the plurality of training examples, the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model;
determining, by the computing system, an updated set of weights for the machine-learned classification model based at least in part on at least one of the one or more adversarial training examples; and
outputting, by the computing system, the updated set of weights for the machine-learned classification model.
12. The one or more non-transitory computer-readable media of claim 11 , wherein the machine-learned classification model comprises a large-margin classification model.
13. The one or more non-transitory computer-readable media of claim 11 , wherein the machine-learned classification model comprises a binary classification model.
14. The one or more non-transitory computer-readable media of claim 11 , wherein, for each possible input contained in the hyperbolic space, the respective distance to the input of the respective training example is based at least in part on a Minkowski product between the possible input and the input of the respective training example.
15. The one or more non-transitory computer-readable media of claim 11 , wherein determining, by the computing system, the updated set of weights for the machine-learned classification model based at least in part on the at least one of the one or more adversarial training examples comprises performing a gradient descent technique with respect to the loss function.
16. A computing system for performing machine learning in hyperbolic space, the system comprising:
one or more processors; and
one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors cause the computing system to perform operations, the operations comprising, for at least one of one or more training iterations:
accessing, by the computing system, a current set of weights of a machine-learned classification model and a plurality of training examples, wherein each of the plurality of training examples comprises a respective input defined within the hyperbolic space and a respective ground truth label;
for each of the plurality of training examples:
generating, by the computing system, a predicted label for the respective input; and
when the predicted label is different from the respective ground truth label:
determining, by the computing system, an intermediate set of weights for the machine-learned classification model based at least in part on the predicted label for the respective input; and
normalizing, by the computing system, the intermediate set of weights to obtain an updated set of weights for which a Minkowski product of the updated set of weights with itself is less than zero; and
outputting, by the computing system, the updated set of weights for the machine-learned classification model.
17. The computing system of claim 16 , wherein normalizing, by the computing system, the intermediate set of weights to obtain the updated set of weights comprises, when a square root of a Minkowski product between a negative of the intermediate set of weights and the intermediate set of weights is less than one:
setting, by the computing system, the updated set of weights equal to the intermediate set of weights divided by the square root of the Minkowski product between the negative of the intermediate set of weights and the intermediate set of weights.
18. The computing system of claim 16 , wherein the operations further comprise:
identifying, by the computing system, one or more adversarial training examples respectively for one or more of the plurality of training examples, wherein, for each of the one or more of the plurality of training examples, the respective adversarial training example comprises an alternative input that, among all possible inputs that are contained in the hyperbolic space and that have a respective distance to the input of the training example that is less than an adversarial budget, maximizes a loss function that evaluates an output of machine-learned classification model; and
adding, by the computing system the one or more adversarial training examples to the plurality of training examples.
19. The computing system of claim 16 , wherein generating, by the computing system, the predicted label for the respective input comprises determining a sign of a Minkowski product of the respective input and the current set of weights.
20. The computing system of claim 16 , wherein the machine-learned classification model comprises a large-margin classification model.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/227,817 US20210319339A1 (en) | 2020-04-10 | 2021-04-12 | Systems and Methods for Machine Learning in Hyperbolic Space |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063008288P | 2020-04-10 | 2020-04-10 | |
US17/227,817 US20210319339A1 (en) | 2020-04-10 | 2021-04-12 | Systems and Methods for Machine Learning in Hyperbolic Space |
Publications (1)
Publication Number | Publication Date |
---|---|
US20210319339A1 true US20210319339A1 (en) | 2021-10-14 |
Family
ID=78006709
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/227,817 Pending US20210319339A1 (en) | 2020-04-10 | 2021-04-12 | Systems and Methods for Machine Learning in Hyperbolic Space |
Country Status (1)
Country | Link |
---|---|
US (1) | US20210319339A1 (en) |
-
2021
- 2021-04-12 US US17/227,817 patent/US20210319339A1/en active Pending
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11604992B2 (en) | Probabilistic neural network architecture generation | |
US20230376771A1 (en) | Training machine learning models by determining update rules using neural networks | |
US10504009B2 (en) | Image hash codes generated by a neural network | |
US11803747B2 (en) | Device placement optimization with reinforcement learning | |
US11720346B2 (en) | Semantic code retrieval using graph matching | |
US20210295166A1 (en) | Partitioned machine learning architecture | |
US20190303535A1 (en) | Interpretable bio-medical link prediction using deep neural representation | |
US9858534B2 (en) | Weight generation in machine learning | |
US20210287136A1 (en) | Systems and methods for generating models for classifying imbalanced data | |
US20230394245A1 (en) | Adversarial Bootstrapping for Multi-Turn Dialogue Model Training | |
US20230075100A1 (en) | Adversarial autoencoder architecture for methods of graph to sequence models | |
US10445650B2 (en) | Training and operating multi-layer computational models | |
US20230020886A1 (en) | Auto-creation of custom models for text summarization | |
US11657118B2 (en) | Systems and methods for learning effective loss functions efficiently | |
US20210019654A1 (en) | Sampled Softmax with Random Fourier Features | |
US20230017072A1 (en) | Systems And Methods For Improved Video Understanding | |
US20230297783A1 (en) | Systems and Methods for Machine-Learned Prediction of Semantic Similarity Between Documents | |
US20230045690A1 (en) | System and method for molecular property prediction using edge conditioned identity mapping convolution neural network | |
US20180121792A1 (en) | Differentiable set to increase the memory capacity of recurrent neural networks | |
US20220067304A1 (en) | Energy-Based Language Models | |
US11694029B2 (en) | Neologism classification techniques with trigrams and longest common subsequences | |
US20210326757A1 (en) | Federated Learning with Only Positive Labels | |
CN116097281A (en) | Theoretical superparameter delivery via infinite width neural networks | |
US20210319339A1 (en) | Systems and Methods for Machine Learning in Hyperbolic Space | |
US20200272895A1 (en) | Answering cognitive queries from sensor input signals |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:RAWAT, ANKIT SINGH;ZAHEER, MANZIL;MENON, ADITYA KRISHNA;AND OTHERS;SIGNING DATES FROM 20200504 TO 20200505;REEL/FRAME:056302/0859 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |