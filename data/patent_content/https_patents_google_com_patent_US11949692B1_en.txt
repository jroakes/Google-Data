US11949692B1 - Method and system for efficient cybersecurity analysis of endpoint events - Google Patents
Method and system for efficient cybersecurity analysis of endpoint events Download PDFInfo
- Publication number
- US11949692B1 US11949692B1 US17/316,634 US202117316634A US11949692B1 US 11949692 B1 US11949692 B1 US 11949692B1 US 202117316634 A US202117316634 A US 202117316634A US 11949692 B1 US11949692 B1 US 11949692B1
- Authority
- US
- United States
- Prior art keywords
- metadata
- cybersecurity
- event
- endpoint
- monitored
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000000034 method Methods 0.000 title claims description 22
- 238000004458 analytical method Methods 0.000 title abstract description 75
- 238000001514 detection method Methods 0.000 claims abstract description 30
- 238000012544 monitoring process Methods 0.000 claims description 12
- 230000008569 process Effects 0.000 claims description 12
- 230000004044 response Effects 0.000 claims description 12
- 238000007689 inspection Methods 0.000 claims description 8
- 238000005067 remediation Methods 0.000 claims description 7
- 230000000694 effects Effects 0.000 abstract description 13
- 238000012517 data analytics Methods 0.000 abstract description 3
- 238000013523 data management Methods 0.000 abstract description 3
- 239000003795 chemical substances by application Substances 0.000 description 89
- 238000004891 communication Methods 0.000 description 19
- 238000012545 processing Methods 0.000 description 11
- 230000000875 corresponding effect Effects 0.000 description 10
- 238000012384 transportation and delivery Methods 0.000 description 8
- 230000003252 repetitive effect Effects 0.000 description 7
- 238000007726 management method Methods 0.000 description 6
- 238000013507 mapping Methods 0.000 description 6
- 230000008093 supporting effect Effects 0.000 description 6
- 238000010200 validation analysis Methods 0.000 description 6
- 230000006870 function Effects 0.000 description 5
- 238000010801 machine learning Methods 0.000 description 5
- 238000012546 transfer Methods 0.000 description 5
- 230000002155 anti-virotic effect Effects 0.000 description 4
- 230000006399 behavior Effects 0.000 description 4
- 238000000605 extraction Methods 0.000 description 4
- 230000003068 static effect Effects 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 238000011156 evaluation Methods 0.000 description 3
- 238000011835 investigation Methods 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 230000002085 persistent effect Effects 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 238000013459 approach Methods 0.000 description 2
- 230000003542 behavioural effect Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 239000002131 composite material Substances 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 230000007613 environmental effect Effects 0.000 description 2
- 238000004374 forensic analysis Methods 0.000 description 2
- 239000011521 glass Substances 0.000 description 2
- 238000009434 installation Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 239000000463 material Substances 0.000 description 2
- 239000002184 metal Substances 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 239000004033 plastic Substances 0.000 description 2
- 230000002265 prevention Effects 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- 230000002123 temporal effect Effects 0.000 description 2
- 230000002411 adverse Effects 0.000 description 1
- 230000004931 aggregating effect Effects 0.000 description 1
- 230000002547 anomalous effect Effects 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 230000001010 compromised effect Effects 0.000 description 1
- 230000001276 controlling effect Effects 0.000 description 1
- 230000002596 correlated effect Effects 0.000 description 1
- 238000013481 data capture Methods 0.000 description 1
- 238000009429 electrical wiring Methods 0.000 description 1
- 239000000284 extract Substances 0.000 description 1
- 208000015181 infectious disease Diseases 0.000 description 1
- 230000008595 infiltration Effects 0.000 description 1
- 238000001764 infiltration Methods 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
- 230000014759 maintenance of location Effects 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000000116 mitigating effect Effects 0.000 description 1
- 239000013307 optical fiber Substances 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000000737 periodic effect Effects 0.000 description 1
- 230000003334 potential effect Effects 0.000 description 1
- 230000003449 preventive effect Effects 0.000 description 1
- 230000035755 proliferation Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000001902 propagating effect Effects 0.000 description 1
- 230000001105 regulatory effect Effects 0.000 description 1
- 230000000246 remedial effect Effects 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 238000000926 separation method Methods 0.000 description 1
- 230000011664 signaling Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/06—Management of faults, events, alarms or notifications
- H04L41/069—Management of faults, events, alarms or notifications using logs of notifications; Post-processing of notifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1408—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic by monitoring network traffic
- H04L63/1416—Event detection, e.g. attack signature detection
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/06—Management of faults, events, alarms or notifications
- H04L41/0631—Management of faults, events, alarms or notifications using root cause analysis; using analysis of correlation between notifications, alarms or events based on decision criteria, e.g. hierarchy, tree or time analysis
- H04L41/064—Management of faults, events, alarms or notifications using root cause analysis; using analysis of correlation between notifications, alarms or events based on decision criteria, e.g. hierarchy, tree or time analysis involving time analysis
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L43/00—Arrangements for monitoring or testing data switching networks
- H04L43/12—Network monitoring probes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/02—Network architectures or network communication protocols for network security for separating internal from external traffic, e.g. firewalls
- H04L63/0209—Architectural arrangements, e.g. perimeter networks or demilitarized zones
- H04L63/0218—Distributed architectures, e.g. distributed firewalls
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1433—Vulnerability analysis
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2463/00—Additional details relating to network architectures or network communication protocols for network security covered by H04L63/00
- H04L2463/121—Timestamp
Definitions
- Embodiments of the disclosure relate to the field of cybersecurity. More specifically, one embodiment of the disclosure relates to a comprehensive cybersecurity platform for processing events observed during run-time at endpoints.
- Cybersecurity attacks have become a pervasive problem for organizations as many networked devices and other resources have been subjected to attack and compromised.
- a cyber-attack constitutes a threat to security arising out of stored or in-transit data which, for example, may involve the infiltration of any type of content, such as software for example, onto a network device with the intent to perpetrate malicious or criminal activity or even a nation-state attack (i.e., “malware”).
- malware detection devices In the years, companies have deployed many different approaches directed to network-based, malware protection services.
- One conventional approach involves the placement of malware detection devices throughout an enterprise network (or subnetwork), including the installation of cybersecurity agents (hereinafter, “agents”).
- agents Operating within an endpoint, an agent is responsible for monitoring and locally storing selected events.
- the “event” includes a task or activity that is conducted by a software component running on the endpoint and, in some situations, the activity may be undesired or unexpected indicating a cyber-attack is being attempted, such as a file being written to disk, a process being executed or created, or an attempted network connection.
- FIG. 1 is a block diagram of an exemplary embodiment of a comprehensive cybersecurity platform.
- FIG. 2 is an exemplary embodiment of an agent deployed within an endpoint of FIG. 1 .
- FIG. 3 is an exemplary embodiment of the logical architecture of the agent of FIG. 2 .
- FIGS. 4 A- 4 B are exemplary flowcharts of the operations performed by agent, including the deduplication operations for illustrative event types.
- FIG. 5 is an exemplary embodiment of the logical architecture of the cybersecurity sensor of FIG. 1 .
- FIGS. 6 A- 6 B are exemplary flowcharts of the operations performed by a cybersecurity sensor in handling a monitored event submission from the endpoint.
- FIGS. 7 A- 7 B are exemplary flowcharts of the operations by the cybersecurity intelligence hub of FIG. 1 during interactions with a cybersecurity sensor.
- Embodiments of the present disclosure generally relate to a comprehensive cybersecurity platform featuring multiple stages in propagating cybersecurity intelligence from an endpoint (e.g., laptop or server) to a cybersecurity intelligence hub located as a public or private cloud-based service.
- One example of the comprehensive cybersecurity platform includes endpoints (first stage); cybersecurity sensors (second stage) that may support any number of endpoints (e.g., tens or hundreds), and a cybersecurity intelligence hub (third stage) that may support any number of sensors (e.g., tens or hundreds) and enhanced services (described below).
- the comprehensive cybersecurity platform is configured to support a cybersecurity intelligence workflow where multiple (two or more) stages apply deduplication controls in the transmission of cybersecurity intelligence collected at the endpoints to the cybersecurity intelligence hub.
- the “nested” deduplication controls are designed to improve the speed and accuracy in determining classifications of an event while, at the same time, reducing overall network throughput requirements and mitigate repetitive analytics on identical events. This allows for better platform scalability without adversely affecting the currency or relevancy of stored metadata within the cybersecurity intelligence hub (referred to as “hub-stored metadata”).
- a “distinct event” includes a task or activity that has not been previously observed; namely, there is currently no matching (i.e. identical or highly correlated) recorded observation of (i) a particular event in a local data store by an agent performing an assessment from a local perspective (first stage), (ii) a particular event in a data store (provided from multiple agents supported by the sensor) by a cybersecurity sensor performing a broader assessment such as from an enterprise perspective (second stage), or a particular event in a global data store (provided from multiple agents and sensors supported by the hub) by a cybersecurity intelligence hub performing an assessment from a platform-wide perspective (third stage).
- the distinct event may exclude certain parameters that are not required for cybersecurity analysis, and in some cases, may obfuscate the distinct nature of events (e.g., logon event with particular typed password excluded from the event, personal identification information “PII”, etc.). The reason is that, for certain events, the content may be less important than the number of attempts being made. “Distinctive metadata” is a portion of collected metadata associated with a monitored event that may be used to distinguish and identify the monitored event from other events.
- each endpoint includes an agent that is configured to control submissions of metadata associated with monitored events through a first deduplication analysis. More specifically, an agent is configured to provide metadata collected for a monitored event (collected metadata) to a cybersecurity sensor when the agent considers that this monitored event is “distinct” (e.g., currently no recorded observation of a particular event).
- One technique for determining whether the monitored event is categorized as “distinct” involves a comparison of a portion of the collected metadata that differentiates the monitored event from other events of similar type (hereinafter referred to as the “distinctive metadata”) to metadata currently stored within a local (e.g., on-board) data store utilized by the agent (referred to as “endpoint-stored metadata”).
- the prescribed storage (caching) policy which may be directed to a duration in storage of metadata maintained by the local data store, may impact the categorization of a monitored event as “distinct.”
- the agent Upon determining that the monitored event is “distinct,” the agent stores at least the collected metadata (and optionally additional metadata as described below) into its local data store and provides at least the collected metadata to the cybersecurity sensor. Otherwise, for a detected benign monitored event, the agent may forego providing the collected metadata to the cybersecurity sensor and merely record the occurrence of the event (e.g., change a count maintained for an entry of the endpoint's local data store that represents the number of detected events corresponding to a prior evaluated event represented by endpoint-stored metadata within the entry).
- the agent stores at least the collected metadata (and optionally additional metadata as described below) into its local data store and provides at least the collected metadata to the cybersecurity sensor. Otherwise, for a detected benign monitored event, the agent may forego providing the collected metadata to the cybersecurity sensor and merely record the occurrence of the event (e.g., change a count maintained for an entry of the endpoint's local data store that represents the number of detected events corresponding to a prior evaluated event represented by endpoint-stored metadata within the entry).
- the agent or the cybersecurity sensor may handle reporting and/or taking other preventive or remediation action on the malicious event and/or provided metadata from its local data store, a cybersecurity sensor and/or the cybersecurity intelligence hub if made available of the endpoint after other stage analyses.
- the cybersecurity sensor After receipt of the collected metadata from the agent, the cybersecurity sensor conducts a second deduplication analysis based, at least in part, on the distinctive metadata to determine whether the monitored event is categorized as “distinct” across all endpoints supported by the sensor or “indistinct” (e.g., prior observation of the particular event). For “indistinct” events, the distinctive metadata represents the monitored event matches metadata representing a prior evaluated event stored within a data store of the sensor and received from any of a plurality of agents, and in some embodiments, the cybersecurity intelligence hub, and/or the enhanced services (referred to as “sensor-stored metadata”).
- the cybersecurity sensor may issue or otherwise initiate an alert, which may include a message sent to administrator (e.g., text, email, audio, etc.) or a report (e.g., represent a malicious verdict on a dashboard screen by a graph, image or illuminating a portion of the dashboard screen to denote a malicious event).
- the alert may be enriched with metadata from multiple sources (described above).
- the cybersecurity sensor may perform other remediation and/or analytics as well.
- the cybersecurity sensor may forego providing the collected metadata to the cybersecurity intelligence hub and merely record the occurrence of the event (e.g., store the metadata provided by the agent and change a count maintained for an entry of the cybersecurity sensor's data store that represents the number of detected events), as described below.
- the cybersecurity sensor Upon determining that the monitored event is “distinct” across all of the endpoints supported by the cybersecurity sensor, the cybersecurity sensor stores at least the collected metadata into the sensor's data store and provides at least the collected metadata to the cybersecurity intelligence hub to conduct another deduplication analysis as described above, this time across all cybersecurity sensors supported by the hub.
- the cybersecurity intelligence hub may solicit the assistance of backend or third party services (described below) to determine a verdict for the monitored event.
- the collected metadata (and perhaps additional metadata accompanying the collected metadata) provides additional cybersecurity intelligence that may be relied upon by authorized users within the comprehensive cybersecurity platform.
- One significant aspect of the invention is controlling conveyance of the vast amount of cybersecurity intelligence collected by endpoints to a global data store of the cybersecurity intelligence hub through a deduplication-based, metadata submission scheme.
- the cybersecurity hub supports malware detection on a global perspective based on received cybersecurity intelligence from all endpoints and sensors at a system-wide level along with cybersecurity intelligence from the enhanced services.
- each cybersecurity sensor supports malware detection on a local perspective, aggregating and providing low-latency classifications (normally in a few seconds) as well as analytic support for a selected group of agents.
- each agent within an endpoint may support specific, localized malware detection.
- the global data store may receive cybersecurity intelligence from other cybersecurity intelligence sources.
- cybersecurity intelligence includes metadata associated with events previously determined to be of a benign, malicious, or unknown (e.g., not previously analyzed or inconclusive) classification. This metadata may be accessed as part of malware detection analyses by any number of authorized customers in efforts to provide more rapid malicious object detection, quicken the issuance (or initiate issuance) of alerts to hasten other remedial action, increased accuracy in cyber-attack detection, and increased visibility and predictability of cyber-attacks, their proliferation, and the extent or spread of infection.
- the comprehensive cybersecurity platform includes the cybersecurity intelligence hub communicatively coupled to cybersecurity intelligence sources and/or cybersecurity sensors each operating as both a source and consumer of cybersecurity intelligence.
- the cybersecurity intelligence hub may operate as (i) a central facility connected via a network to receive metadata from one or more cybersecurity intelligence sources; (ii) an intelligence analytics resource to analyze metadata received directly or indirectly by agents, and store the analysis results and/or classification (verdict) with the collected metadata (or cross-referenced with the collected metadata); and (iii) a central facility serving as a distribution point for the hub-stored metadata via a network.
- the cybersecurity intelligence hub may be deployed as a dedicated system or as part of cloud-based malware detection service (e.g., as part of, or complementary to and interacting with a cybersecurity detection system and service described in detail in U.S. patent application Ser. No. 15/283,126 entitled “System and Method For Managing Formation and Modification of a Cluster Within a Malware Detection System,” filed Sep. 30, 2016; U.S. patent application Ser. No. 15/721,630 entitled “Multi-Level Control For Enhanced Resource and Object Evaluation Management of Malware Detection System,” filed Sep. 29, 2017, the entire contents of both of these applications are incorporated by reference herein).
- the cybersecurity intelligence hub includes a global data store communicatively coupled to a data management and analytics engine (DMAE).
- the global data store operates as a database or repository to receive and store cybersecurity intelligence, including metadata associated with events received from multiple (two or more) agents.
- these events may include (i) events previously analyzed and determined to be of a malicious or benign classification, (ii) events previously analyzed without conclusive results and currently determined to be of an “unknown” classification, and/or (iii) events previously not analyzed (or awaiting analysis), and thus of an “unknown” classification.
- the global data store contains the entire stockpile of cybersecurity intelligence collected and used by individuals, businesses, and/or government agencies (collectively, “customers”), which may be continuously updated by the various intelligence sources and by the DMAE to maintain its currency and relevancy.
- the global data store may be implemented across customers of a particular product and/or service vendor or across customers of many such vendors.
- the stored cybersecurity intelligence within the global data store may include metadata associated with “distinct” events (e.g., not recorded as previously observed within the global data store), gathered from a variety of disparate cybersecurity sources.
- One of these sources may include a cybersecurity sensor, which may be located on a network (or subnetwork) such as at a periphery of the network (or subnetwork), proximate to an email server remotely located from the cybersecurity intelligence hub, or the like.
- a “cybersecurity sensor” may correspond to a physical network device or a virtual network device (software) that aggregates and/or correlates events, as well as assisting in the detection of malicious events and providing alert messages (notifications via logic) in response to such detection.
- the cybersecurity sensor may include (or utilize external from the sensor) a data store for storage of metadata associated with prior evaluated events (sensor-stored metadata).
- the cybersecurity sensor may also include (i) deduplication logic to control propagation of cybersecurity intelligence (e.g., metadata) to the cybersecurity intelligence hub; (ii) metadata parsing logic to parse the collected metadata sourced by an agent from other information in the incoming submission (e.g., messages), (iii) metadata inspection logic to inspect the collected metadata against the sensor-stored metadata, (iv) metadata management logic to maintain a database mapping entries for the sensor-stored metadata to their corresponding sources, and (v) count incrementing logic to set a count associated with an entry that represents a number of times this specific metadata has been detected over a prescribed time window (e.g., ranging from a few seconds or minutes to years).
- deduplication logic to control propagation of cybersecurity intelligence (e.g., metadata) to the cybersecurity intelligence hub
- metadata parsing logic to parse the collected metadata sourced by an agent from other information in the incoming submission (e.g., messages)
- metadata inspection logic to inspect the collected metadata against the sensor-stored metadata
- an endpoint may be communicatively coupled to a cybersecurity sensor.
- an endpoint is a physical network device equipped with an “agent” to monitor and capture events in real-time for cybersecurity investigation or malware detection.
- an endpoint may be a virtual network device being software that processes information such as a virtual machine or any other virtualized resource. The agent may be deployed and operate as part of the endpoint.
- the agent is software running on the endpoint that monitors for and detects one or more events. Some of these monitored events may be categorized as execution events, network events, and/or operation events.
- An example of an “execution event” may involve an activity performed by a process (e.g., open file, close file, create file, write to file, create new process, etc.) running on the endpoint while an example of a “network event” may involve an attempted or successful network connection conducted by endpoint logic.
- An example of an “operation event” may include an attempted or successful operation performed on the endpoint such as a Domain Name System (DNS) lookup or a logon or logoff operation directed to an access controlled system.
- DNS Domain Name System
- the agent Upon detecting a monitored event, the agent collects (i.e., gathers and/or generates) metadata associated with the monitored event. It is contemplated that the type of monitored event may determine, at least in part, the distinctive metadata that is needed to differentiate the monitored event from other events of similar type. Thereafter, the agent conducts an analysis of the monitored event to determine whether or not the monitored event is “distinct” as described above. For example, according to one embodiment of the disclosure, this analysis may include the agent determining whether the distinctive metadata associated with the monitored event, being part of the collected metadata, is currently part of the endpoint-stored metadata (i.e., stored in the endpoint's local data store).
- This local data store is responsible for maintaining metadata associated with prior evaluated events in accordance with a prescribed storage (caching) policy (e.g., cache validation policy).
- the prescribed (caching) policy which can be directed to a duration of storage of metadata, may impact the categorization as to which monitored events occurring within the endpoint are “distinct.” Examples of the potential effects in categorization are described below.
- the deduplication logic determines whether the distinctive metadata matches any endpoint-stored metadata residing in the endpoint's local data store governed by its prescribed storage policy.
- the agent local data store includes multiple (two or more) local data stores, each with a different prescribed storage policy, the agent would need to compare the distinctive metadata to metadata stored in each data store according to its particular storage policy.
- the agent may be configured to supply the collected metadata to the cybersecurity sensor by a “push” or “pull” delivery scheme, described below. Thereafter, the agent generates the submission, including the collected metadata described below, which is provided to the cybersecurity sensor.
- the agent may increment a count corresponding to the number of occurrences this specific metadata (e.g., for execution events, etc.) or specific type of metadata (e.g., for network events, etc.) has been detected by the agent. It is contemplated that, as the count increases and exceeds a prescribed threshold over a prescribed time window, the agent may circumvent its findings and identify the monitored event correspond to the collected metadata as “distinct” in order to potentially force another analysis of the monitored event.
- a timestamp may be generated and added as part of the collected metadata for the monitored event.
- the timestamp allows for the removal of “stale” metadata retained in the local data store of the endpoint longer than a prescribed period of time and provides an indexing parameter for a data store lookup.
- the cybersecurity sensor After receipt of the submission, the cybersecurity sensor extracts at least the collected metadata and determines whether the monitored event is “distinct.” For example, according to one embodiment of the disclosure, the cybersecurity sensor determines whether the distinctive metadata of the collected metadata matches one or more portions of the sensor-stored metadata.
- a local data store is responsible for maintaining the sensor-stored metadata, which may be uploaded from a plurality of agents and/or downloaded from other sources (including the cybersecurity intelligence hub) in accordance with a prescribed storage (caching) policy.
- the cybersecurity sensor Upon determining that the monitored event is “distinct,” the cybersecurity sensor stores at least the collected metadata within the local data store and provides a submission, including at least the collected metadata, for analysis by the DMAE within the cybersecurity intelligence hub.
- the DMAE determines whether the distinctive metadata of the collected metadata is present in the global data store, and if so, a verdict (classification) of a prior evaluated event, which corresponds to the monitored event associated with the distinctive metadata, is returned to the cybersecurity sensor for storage (or cross-reference) with at least the collected metadata.
- the cybersecurity sensor may issue (or initiate issuance of) an alert.
- the cybersecurity sensor may simply halt further operations associated with this submission (as the entry of the sensor's data including at least the collected metadata has been newly added).
- the sensor Upon determining that the monitored event is “indistinct,” namely the distinctive metadata matches a portion of the sensor-stored metadata within an entry of the sensor's data store, the sensor performs operations based on the discovered verdict as described above. Herein, it is contemplated that a count associated with an entry including the portion of the sensor-stored metadata is incremented regardless of the verdict.
- the DMAE may provide some of the distinctive metadata (e.g., an identifier of the object associated with the monitored event such as a hash value or checksum) to object analysis services. If the object has not been analyzed by the object analysis services, according to one embodiment of the disclosure, a request for a copy of the object (e.g., a file constituting an event) may be returned to the DMAE.
- the DMAE fetches the object from the endpoint via the cybersecurity sensor.
- the object analysis services conduct malware detection operations on the object in an effort to confirm a verdict (malicious, benign) for that object.
- the sensor may make a determination of whether to initiate or conduct malware detection operations on the object with the determination and types of operations, and further in some implementations, configurable by an administrator.
- the DMAE may utilize various enrichment services (described below) in an attempt to classify the object.
- the DMAE may send a portion of the collected metadata (e.g., SRC_IP, DEST_IP, and/or DEST_PORT) to the enrichment services or allow such services to gain access to the portion of the collected metadata in efforts to classify the event (e.g., identify whether targeted website is benign or malicious, etc.).
- the collected metadata within the global data store may be classified of “unknown,” and this “unknown” verdict is returned to the local data store within the cybersecurity sensor (and optionally the local data store within the endpoint).
- the “unknown” verdict may be used to triggered additional malware analyses as described below.
- each of the terms “logic,” “system,” “component,” or “engine” is representative of hardware, firmware, and/or software that is configured to perform one or more functions.
- the logic may include circuitry having data processing or storage functionality. Examples of such circuitry may include, but are not limited or restricted to a microprocessor, one or more processor cores, a programmable gate array, a microcontroller, an application specific integrated circuit, wireless receiver, transmitter and/or transceiver circuitry, semiconductor memory, or combinatorial logic.
- the logic may be software in the form of one or more software modules.
- the software modules may include an executable application, a daemon application, an application programming interface (API), a subroutine, a function, a procedure, an applet, a servlet, a routine, source code, a dynamic link library, or one or more instructions.
- the software module(s) may be stored in any type of a suitable non-transitory storage medium, or transitory storage medium (e.g., electrical, optical, acoustical or other form of propagated signals such as carrier waves, infrared signals, or digital signals).
- non-transitory storage medium may include, but are not limited or restricted to a programmable circuit; a semiconductor memory; non-persistent storage such as volatile memory (e.g., any type of random access memory “RAM”); persistent storage such as non-volatile memory (e.g., read-only memory “ROM”, power-backed RAM, flash memory, phase-change memory, etc.), a solid-state drive, hard disk drive, an optical disc drive, or a portable memory device.
- volatile memory e.g., any type of random access memory “RAM”
- persistent storage such as non-volatile memory (e.g., read-only memory “ROM”, power-backed RAM, flash memory, phase-change memory, etc.), a solid-state drive, hard disk drive, an optical disc drive, or a portable memory device.
- the executable code may be stored in persistent storage.
- a “network device” may be construed as either a physical electronic device featuring data processing and/or network connection functionality or a virtual electronic device being software that virtualizes at least a portion of the functionality of the physical electronic device.
- One type of network device is an endpoint that operates as (or operates within) a laptop, a set-top box or other consumer electronic device.
- Other examples of a network device may include, but are not limited or restricted to a server, mobile phone (which may be operating as a mobile hot spot), a desktop computer, a standalone malware detection appliance, a network adapter, or an intermediary communication device (e.g., router, firewall, etc.), a virtual machine, or any other virtualized resource.
- the term “object” generally relates to content having a logical structure or organization that enables it to be classified for purposes of analysis for malware.
- the content may include an executable (e.g., an application, program, code segment, a script, dynamic link library “dll” or any file in a format that can be directly executed by a computer such as a file with an “.exe” extension, etc.), a non-executable (e.g., a file; any document such as a Portable Document Format “PDF” document; a word processing document such as Word® document; an electronic mail “email” message, web page, or other non-executable file, etc.), or simply a collection of related data.
- the object may be retrieved from information in transit (e.g., a plurality of packets) or information at rest (e.g., data bytes from a storage medium).
- Metadata generally refers to a collection of information.
- the collection of information may be associated with an event or an object for example.
- the content of the metadata may depend, at least in part, on the type of event (or object) to which the metadata pertains.
- an event related to a particular activity performed by a process may include a path identifying a location of an object being referenced by the process and an identifier of the object (e.g., hash value or checksum of the object).
- an event related to an attempted or successful network connection may include at least a destination address (SRC_IP); and a destination port associated with the network connection (DEST_PORT).
- the term “message” generally refers to signaling (wired or wireless) as either information placed in a prescribed format and transmitted in accordance with a suitable delivery protocol or information made accessible through a logical data structure such as an API.
- a suitable delivery protocol include, but are not limited or restricted to HTTP (Hypertext Transfer Protocol); HTTPS (HTTP Secure); Simple Mail Transfer Protocol (SMTP); File Transfer Protocol (FTP); iMESSAGE; Instant Message Access Protocol (IMAP); or the like.
- HTTP Hypertext Transfer Protocol
- HTTPS HTTP Secure
- SMTP Simple Mail Transfer Protocol
- FTP File Transfer Protocol
- IMAP Instant Message Access Protocol
- each message may be in the form of one or more packets, frames, or any other series of bits having the prescribed, structured format.
- the message may be delivered in accordance with a “push” or “pull” delivery scheme.
- each cybersecurity sensor may be deployed as a “physical” or “virtual” network device, as described above.
- a “cybersecurity sensor” may include, but are not limited or restricted to the following: (i) a cybersecurity appliance that monitors incoming and/or outgoing network traffic, emails, etc.; (ii) a firewall; (iii) a data transfer device (e.g., router, repeater, portable mobile hotspot, etc.); (iv) a security information and event management system (“SIEM”); (v) a virtual device being software that supports data capture, preliminary analysis of data for malware, and metadata extraction, including an anti-virus application or malware detection agent; (vi) exchange or web server equipped with malware detection software; or the like.
- SIEM security information and event management system
- malware may be broadly construed as any code, communication or activity that initiates or furthers an attack (hereinafter, “cyber-attack”). Malware may prompt or cause unauthorized, unexpected, anomalous, unintended and/or unwanted behaviors or operations constituting a security compromise of information infrastructure (generally “attack-oriented behaviors”). For instance, malware may correspond to a type of malicious computer code that, upon execution and as an illustrative example, takes advantage of (exploit) a vulnerability in a network, for example, to gain unauthorized access, harm or co-opt operation of a network device or misappropriate, modify or delete data.
- malware may correspond to information (e.g., executable code, script(s), data, command(s), etc.) that is designed to cause a network device to experience attack-oriented behaviors.
- information e.g., executable code, script(s), data, command(s), etc.
- attack-oriented behaviors may include a communication-based anomaly or an execution-based anomaly, which, for example, could (1) alter the functionality of a network device in an atypical and unauthorized manner; and/or (2) provide unwanted functionality which may be generally acceptable in another context.
- the terms “compare,” comparing,” “comparison,” or other tenses thereof generally mean determining whether two items match, where a “match” constitutes a finding that the compared items are identical or exceed a prescribed threshold of correlation.
- the compared items may include metadata.
- interconnect may be construed as a physical or logical communication link (or path) between two or more network devices.
- wired and/or wireless interconnects feature the form of electrical wiring, optical fiber, cable, bus trace, or a wireless channel using infrared, radio frequency (RF), may be used.
- RF radio frequency
- a logical link includes well-defined interfaces, function calls, shared resources, dynamic linking, or the like.
- the CCP 100 features endpoints 130 1 - 130 M (M ⁇ 2) (first stage); cybersecurity sensors 120 1 - 120 N (N ⁇ 1) (second stage) each capable of supporting a plurality of agents (e.g., tens or hundreds); and a cybersecurity intelligence hub 110 (third stage) supporting a number of cybersecurity sensors 120 1 - 120 N (e.g., tens or hundreds).
- This multi-stage cybersecurity platform controls the propagation of cybersecurity intelligence from the endpoints 130 1 - 130 M to the cybersecurity intelligence hub 110 by significantly mitigating the transfer of repetitive cybersecurity intelligence between stages. Without such controls, the CCP 100 could not effectively aggregate and provide access to cybersecurity intelligence from thousands of sources.
- each stage including deduplication logic that selectively determines what cybersecurity intelligence to further process or provide to the next stage, where the cybersecurity intelligence is ultimately targeted for storage within a global data store 180 of the cybersecurity intelligence hub 110 .
- the CCP 100 may be organized in accordance with any of a variety of “nested” deduplication logic layouts, such as deduplication logic being deployed at selected neighboring stages (e.g., the sensors 120 1 - 120 N and hub 110 without deployment at the agents 130 1 - 130 M ; the agents 130 1 - 130 M and sensors 120 1 - 120 N without deployment at the hub 110 ) or at non-neighboring stages (e.g., the agents 130 1 - 130 M and the hub 110 without deployment at the sensors 120 1 - 120 N ).
- deduplication logic being deployed at selected neighboring stages (e.g., the sensors 120 1 - 120 N and hub 110 without deployment at the agents 130 1 - 130 M ; the agents 130 1 - 130 M and sensors 120 1 - 120 N without deployment at the hub 110 ) or at non-neighboring stages (e.g., the agents 130 1 - 130 M and the hub 110 without deployment at the sensors 120 1 - 120 N ).
- the CCP 100 comprises a cybersecurity intelligence hub 110 communicatively coupled to one or more cybersecurity sensors 120 1 - 120 N (N ⁇ 1) via a network, and the cybersecurity sensors 120 1 - 120 N are communicatively coupled to one or more endpoints 130 1 - 130 M (M ⁇ 1).
- Each cybersecurity sensors 120 1 , . . . , or 120 N may be deployed on-premises with its supported endpoints 130 1 - 130 M , remotely thereof, or a combination of both types of deployments.
- each cybersecurity sensor is capable of supporting multiple endpoints such as cybersecurity sensor 120 1 supporting endpoints 130 1 - 130 3 and cybersecurity sensor 120 N supporting endpoints 130 M-1 - 130 M .
- each of these endpoint 130 1 - 130 3 and 130 M-1 - 130 M includes a cybersecurity agent 135 1 - 135 3 and 135 M-1 - 135 M , respectively.
- each cybersecurity agent 135 1 - 135 M is software, running in the foreground or in the background as a daemon, which is configured to monitor for particular events or particular types of events (e.g., certain tasks or activities) that occur during operation of its corresponding endpoint (e.g., endpoint 130 1 ).
- Each agent 135 1 , . . . , or 135 M may be configured as a static software component, where the monitored events are predetermined and cannot be modified or expanded.
- each agent 135 1 , . . . , or 135 M may be configured as a dynamic software component allowing for modification as to which events are monitored without re-installation of the agent 135 1 .
- Illustrative examples of types of monitored events may include, but are not limited or restricted to (i) writing an object (e.g., file) to disk, (ii) opening an object (e.g., file), (iii) starting execution of an object (e.g., executable), (iv) connecting to a network, (v) attempting a logon operation, (vi) changing a registry key, or the like.
- the agents 135 1 - 135 M operating within respective endpoints 130 1 - 130 M are communicatively coupled to the cybersecurity sensors 120 1 - 120 N over one or more interconnects 140 1 - 140 M .
- an agent e.g., agent 135 1
- the agent 135 1 also conducts a first deduplication analysis on the collected metadata 150 to determine whether the monitored event has been previously observed.
- This determination may involve performing a comparison between a portion of the collected metadata 150 that distinctively identifies the monitored event (e.g., distinctive metadata 151 ), and corresponding portions of stored metadata 165 within entries (e.g., entry 162 ) of the local data store 160 (hereinafter, “endpoint-stored metadata” 165 ). It is noted that each of the entries (and entries of other data stores) may contain distinctive metadata associated with a prior evaluated event, where the distinctive metadata may be normalized to exclude certain parameters that are not required for cybersecurity analysis (e.g., password for credential events, PII, etc.).
- the distinctive metadata may include the collected Stated differently, depending on the event type, the agent 135 1 may rely on different distinctive metadata to identify the monitored event, and as a result, the agent 135 1 may access a different portion of the endpoint-stored metadata 165 for comparison, as described in detail below.
- the prescribed storage (caching) policy utilized by the endpoint's local data store 160 may impact the categorization of a monitored event as “distinct.” More specifically, the storage policy utilized by the endpoint's local data store 160 may control metadata validation and retention within the local data store 160 such as through LRU (Least Recently Used), FIFO (first-in, first-out), or a time-based validation scheme where the agent-based metadata 165 can reside within the local data store 160 for a prescribed period of time until the agent-based metadata 165 is considered “stale” (e.g., invalid). Hence, in certain situations, a monitored event still may be categorized as “distinct” by the agent 135 1 , despite the presence of matching agent-based metadata 165 in the local data store 160 .
- LRU Least Recently Used
- FIFO first-in, first-out
- time-based validation scheme where the agent-based metadata 165 can reside within the local data store 160 for a prescribed period of time until the agent-based metadata 165 is considered “s
- repetitive access matches to a portion of the endpoint-stored metadata 165 within a particular entry 162 also may impact the categorization of a monitored event as “distinct.” For example, the number of repetitive occurrences of a prior evaluated event (represented by the endpoint-stored metadata within the particular entry 162 ) may be monitored, where the count 163 is increased with every detected occurrence. Hence, when the count 163 exceeds a threshold value over a prescribed time window, the entry 162 may be “tagged” to cause the agent 135 1 to classify any monitored event represented by distinctive metadata that matches the endpoint-stored metadata within the particular entry 162 .
- the agent 135 1 In response to the agent 135 1 determining that the monitored event has been categorized as “distinct,” the agent 135 1 provides at least the collected metadata 150 to the cybersecurity sensor 120 1 over the interconnect 140 1 .
- the agent 135 1 may provide additional metadata 152 associated with the monitored event.
- the additional metadata 152 may include characteristics of the operating environment from which the collected metadata 150 is provided.
- these characteristics may be directed to an identifier of the endpoint 130 1 featuring the agent 135 1 (e.g., model number, software product code, etc.), an IP address of the endpoint 130 1 , geographic identifier surmised from the endpoint's IP address, a software profile or software version utilized by the agent 135 1 , time of analysis, or the like.
- the agent 135 1 could collect/send additional metadata for other events such as additional events related (e.g., linked) to the monitored events.
- the metadata provided to the cybersecurity sensor 120 1 which includes the collected metadata 150 and optionally includes the additional metadata 152 , shall be referred to as “agent-evaluated metadata 155 .”
- the agent-evaluated metadata 155 may be provided to the cybersecurity sensor 120 1 in order to (i) obtain a verdict (e.g., classification, benign or malicious) from the cybersecurity sensor 120 1 (if the monitored event is known) or (ii) maintain currency and relevancy of a data store 170 of the cybersecurity sensor 120 1 and/or the global data store 180 of the cybersecurity intelligence hub 110 to provide more immediate malware detection results to customers.
- the agent-evaluated metadata 155 may be provided in accordance with a “push” or “pull” delivery scheme as described below. In general, the “push” delivery scheme involves the generation and transmission by the agent 135 1 of a message, including the agent-evaluated metadata 155 , to the cybersecurity sensor 120 1 .
- the “pull” delivery scheme involves the cybersecurity sensor 120 1 periodically or aperiodically requesting delivery of newly collected metadata from the agent 135 1 , and the agent 135 1 , in response, provides the agent-evaluated metadata 155 to the cybersecurity sensor 120 1 .
- the agent-evaluated metadata 155 is also now stored as one of the entries within the local data store 165 .
- the cybersecurity sensor 120 1 After receipt of at least the agent-evaluated metadata 155 , the cybersecurity sensor 120 1 conducts a second deduplication analysis.
- This second deduplication analysis includes a comparison of a portion of the agent-evaluated metadata 155 that distinctively identifies the monitored event to corresponding portions of the sensor-stored metadata 175 (i.e., stored metadata within entries of the data store 170 ).
- the portion of the agent-evaluated metadata 155 used in the second deduplication analysis at the cybersecurity sensor 120 1 may be the distinctive metadata 151 of the collected metadata 150 used in the first deduplication analysis at the endpoint 130 1 .
- the portion of the agent-evaluated metadata 155 used in the second deduplication analysis at the cybersecurity sensor 120 1 may differ from the distinctive metadata 151 used in the first deduplication analysis at the endpoint 130 1 .
- the distinctive metadata at all stages will be referenced as “distinctive metadata 151 .”
- the cybersecurity sensor 120 1 determines whether the monitored event had been previously observed. This may be accomplished by determining whether a portion of the agent-evaluated metadata 155 (e.g., the distinctive metadata 151 ) matches a portion of the sensor-stored metadata 174 residing within a particular entry 172 of the data store 170 .
- the portion of the sensor-stored metadata 174 corresponds to metadata representing a prior evaluated event determined to be the monitored event.
- the cybersecurity sensor 120 1 may increment the count 173 , which records the repetitive detections by different agents of the prior evaluated event represented by the sensor-based metadata within the entry 172 .
- the cybersecurity sensor 120 1 may generate an alert 176 , perform another remediation technique, and/or conduct additional analytics on the agent-evaluated metadata 155 .
- the additional analysis may be performed by the cybersecurity sensor 120 1 , by the agent 135 1 , or by other logic within the endpoint 130 1 deploying the agent 135 1 .
- an object or a portion of the evaluated metadata 155 may be run through a machine learning algorithm on the endpoint 130 1 , where prevention/remediation action may be undertaken based on the verdict.
- Repetitive access matches to sensor-stored metadata 175 may be captured by increasing the count 173 associated with entry 172 , for use in entry replacement and/or re-confirming verdict for the prior evaluated event associated with the entry 172 .
- the cybersecurity sensor 120 1 determines that the monitored event remains categorized as “distinct” across all endpoints supported by the sensor 120 1 (e.g., a new (currently unrecorded) observation of a particular event across all supported endpoints by the cybersecurity sensor 120 1 ).
- the cybersecurity sensor 120 1 provides at least the agent-evaluated metadata 155 to the cybersecurity intelligence hub 110 .
- the cybersecurity sensor 120 1 also may provide additional metadata 177 associated with the monitored event such as characteristics of the cybersecurity sensor 120 1 and/or its operating environment for example.
- the additional metadata 177 may include an identifier of the cybersecurity sensor 120 1 (e.g., a device identification “ID” such as a PCI ID, software product code, or any other number, character, or alphanumeric value that uniquely identifies a particular type of physical or virtual component), an IP address of the cybersecurity sensor 120 1 , software profile or software version utilized by the cybersecurity sensor 120 1 , time of analysis, preliminary verdict (if malware analysis performed concurrently), or the like.
- ID device identification
- the additional metadata 177 may include other metadata collected by the cybersecurity sensor 120 1 that pertain to events related to the monitored event and/or events in temporal proximity to the monitored event, as partially described in U.S. patent application Ser. No. 15/725,185 entitled “System and Method for Cyberattack Detection Utilizing Monitored Events,” filed Oct.
- the metadata provided to the cybersecurity intelligence hub 110 which include the agent-evaluated metadata 155 and optionally the additional metadata 177 , shall be referred to as “sensor-evaluated metadata 179 .”
- the sensor-evaluated metadata 179 is also stored within one or more of the entries of the data store 175 or portions of the sensor-evaluated metadata 179 stored separately and cross-referenced to each other.
- the cybersecurity intelligence hub 110 receives, parses, analyzes and stores, in a structured format within the global data store 180 , cybersecurity intelligence received from the cybersecurity sensors 120 1 - 120 N .
- the cybersecurity intelligence hub 110 is configured to receive cybersecurity intelligence (e.g., the sensor-evaluated metadata 179 ) from the first cybersecurity sensor 120 1 .
- the cybersecurity intelligence hub 110 includes a data management and analytics engine (DMAE) 115 , which is configured to verify a verdict (e.g., a “benign,” “malicious,” or “unknown” classification) for the monitored event based on analyses of a portion of the sensor-evaluated metadata 179 that distinctively identifies the monitored event for comparison with one or more portions of the hub-stored metadata 185 (i.e., metadata associated with prior evaluated events) stored within the global data store 180 .
- a verdict e.g., a “benign,” “malicious,” or “unknown” classification
- the cybersecurity intelligence hub 110 may determine a source of the sensor-evaluated metadata 179 from its content (or the IP source address of the cybersecurity sensor 120 1 accompanying the sensor-evaluated metadata 179 ). Thereafter, the cybersecurity intelligence hub 110 provides a verdict and other hub-based metadata associated with the prior evaluated event(s) corresponding to the monitored event, to the cybersecurity sensor 120 1 to handle reporting, remediation and/or additional analytics.
- the reporting by the cybersecurity sensor 120 1 may include a bundle of cybersecurity intelligence associated with a set of events (including the monitored event), which may include metadata collected by the cybersecurity sensor 120 1 that pertains to monitored event as well as other events that are related to (and different from) the monitored event and/or events in temporal proximity to the monitored event. This enhanced reporting allows the cybersecurity sensor 120 1 to provide greater context surrounding the monitored event for cybersecurity detection and prevention.
- the cybersecurity intelligence hub 110 is configured to evaluate what enrichment services 190 are available to obtain a verdict for the monitored event. As shown in FIG. 1 , the cybersecurity intelligence hub 110 is communicatively coupled to the enrichment services 190 , which include backend web services 192 , third party web services 194 , and/or an object analysis services 199 , which may be a separate service or part of the backend web services 192 .
- the enrichment services 190 provide the cybersecurity intelligence hub 110 with access to additional cybersecurity analytics and cybersecurity intelligence using a push and/or pull communication scheme.
- cybersecurity intelligence may be provided (i) automatically, in a periodic or aperiodic manner, to the DMAE 115 of the cybersecurity intelligence hub 110 or (ii) responsive to a query initiated by the cybersecurity intelligence hub 110 requesting analytics or intelligence of the portion of sensor-based metadata 179 .
- one embodiment of the cybersecurity intelligence hub 110 features one or more hardware processors, a non-transitory storage medium including the DMAE 115 to be executed by the processor(s), and the global data store 180 .
- the backend web services 192 may feature one or more servers that deliver cybersecurity intelligence.
- the cybersecurity intelligence may include, but is not limited or restricted to (i) incident investigation/response intelligence 193 , (ii) forensic analysis intelligence 194 using machine-learning models, and/or (iii) analyst-based intelligence 195 .
- the incident investigation/response intelligence 193 may include cybersecurity intelligence gathered by cyber-attack incident investigators during analyses of successful attacks.
- This cybersecurity intelligence provides additional metadata that may identify the nature and source of a cyber-attack, how the identified malware gained entry on the network and/or into a particular network device connected to the network, history of the lateral spread of the malware during the cyber-attack, any remediation attempts conducted and the result of any attempts, and/or procedures to detect malware and prevent future attacks.
- the forensic analysis intelligence 194 may include cybersecurity intelligence gathered by forensic analysts or machine-learning driven forensic engines, which are used to formulate models for use in classifying an event, upon which a verdict (classification) of submitted metadata may be returned to the cybersecurity intelligence hub 110 for storage (or cross-reference) with the submitted metadata.
- the analyst-based intelligence 195 includes cybersecurity intelligence gathered by highly-trained cybersecurity analysts, who analyze malware to produce metadata directed to its structure and code characteristics that may be provided to the cybersecurity intelligence hub 110 for storage as part of the hub-stored metadata 185 within the global data store 180 .
- the third party web services 196 may include cybersecurity intelligence 197 gathered from reporting agencies and other cybersecurity providers, which may be company, industry or government centric.
- the cybersecurity intelligence 197 may include black lists, white lists, and/or URL categorization.
- attacker intelligence 198 may be available, namely cybersecurity intelligence gathered on known parties that initiate cyber-attacks. Such cybersecurity intelligence may be directed to who are the attackers (e.g., name, location, etc.), whether state-sponsored attackers as well as common tools, technique and procedures used by a particular attacker that provide a better understanding typical intent of the cyber-attacker (e.g., system disruption, information exfiltration, etc.), and the general severity of cyber-attacks initiated by a particular attacker.
- Metadata received from the endpoints 130 1 - 130 M as well as cybersecurity intelligence from the enrichment services 190 may be stored and organized as part of the hub-stored metadata 185 within the global data store 180 searchable by an administrator via a user interface of a computer system (not shown) on an object basis, device basis, customer basis, time-basis, industry-basis, geographic-based, or the like.
- the object analysis services 199 conducts malware detection operations on an object retrieved by the cybersecurity intelligence hub 110 , which may be accessed when the hub-store metadata 185 of the global data set 180 fails to match the portion of the sensor-evaluated metadata 179 that distinctly represents the monitored event. Alternatively, the object analysis services 199 may be accessed where a portion of the hub-store metadata 185 matches the portion of the sensor-evaluated metadata 179 , but the verdict within the matching portion of the hub-store metadata 185 is of an “unknown” classification.
- malware detection operations may include, but are not limited or restricted to one or more static analyses (e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and exploit or vulnerability signature matching), one or more run-time behavioral analyses, and/or one or more event-based inspections using machine-learning models.
- static analyses e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and exploit or vulnerability signature matching
- run-time behavioral analyses e.g., heuristics, and exploit or vulnerability signature matching
- event-based inspections using machine-learning models e.g., machine-learning models.
- the DMAE 115 may also provide the object (or make the object available) to additional backend web services 192 and/or third party web services 196 that assist in the analysis of characteristics of the object (e.g., source, object name, etc.) to classify the object (and one or more events associated with the object).
- some or all of the cybersecurity intelligence hub 110 may be located at an enterprise's premises (e.g., located as any part of the enterprise's network infrastructure whether located at a single facility utilized by the enterprise or at a plurality of facilities and co-located with any or all of the sensors 120 1 - 120 N and/or endpoints 130 1 - 130 M ).
- some or all of the cybersecurity intelligence hub 110 may be located outside the enterprise's network infrastructure, generally referred to as public or private cloud-based services that may be hosted by a cybersecurity provider or another entity separate from the enterprise (service customer).
- one of these embodiments may be a “hybrid” deployment, where the cybersecurity intelligence hub 110 may include some logic partially located on premises and other logic located as part of a cloud-based service. This separation allows for sensitive cybersecurity intelligence (e.g., proprietary intelligence learned from subscribing customers, etc.) to remain on premises for compliance with any privacy and regulatory requirements.
- sensitive cybersecurity intelligence e.g., proprietary intelligence learned from subscribing customers, etc.
- the endpoint 130 1 comprises a plurality of components, including one or more hardware processors 200 (referred to as “processor(s)”), a non-transitory storage medium 210 , the local data store 160 , and at least one communication interface 230 .
- processors 200 referred to as “processor(s)”
- non-transitory storage medium 210 the local data store 160
- at least one communication interface 230 the endpoint 130 1 is a physical network device, and as such, these components are at least partially encased in a housing 240 , which may be made entirely or partially of a rigid material (e.g., hard plastic, metal, glass, composites, or any combination thereof) that protects these components from environmental conditions.
- a rigid material e.g., hard plastic, metal, glass, composites, or any combination thereof
- the hardware processor(s) 200 is a multi-purpose, processing component that is configured to execute logic 250 maintained within the non-transitory storage medium 210 operating as a memory.
- processor 200 includes an Intel® central processing unit (CPU) based on an x86 architecture and instruction set.
- processor(s) 200 may include another type of CPU, a digital signal processor, an Application Specific Integrated Circuit (ASIC), a field-programmable gate array, or any other hardware component with data processing capability.
- CPU central processing unit
- ASIC Application Specific Integrated Circuit
- the local data store 160 may include non-volatile memory to maintain metadata associated with prior evaluated events in accordance with a prescribed storage policy (e.g., cache validation policy).
- a prescribed storage policy e.g., cache validation policy.
- the prescribed storage policy features a plurality of rules that are used to determine entry replacement and/or validation, which may impact the categorization of a detected, monitored event as “distinct” or not.
- the communication interface 230 may be configured as an interface to receive the object 260 via any communication medium.
- the communication interface 230 may be network adapter to receive the object 260 via a network, an input/output (TO) connector to receive the object 260 from a dedicated storage device, or a wireless adapter to receive the object via a wireless communication medium (e.g., IEEE 802.11 type standard, BluetoothTM standard, etc.).
- the agent 135 1 may be configured to monitor, perhaps on a continuous basis when deployed as daemon software, for particular events or particular types of events occurring during operation of the endpoint 130 1 . Upon detecting a monitored event, the agent 135 1 is configured to determine whether the monitored event is “distinct,” as described herein.
- monitored events may be detected during execution of the object 260 or processing of the object 260 using a stored application 270 , while in other situations, the monitored events may be detected during endpoint operations (e.g., logon, attempted network connection, etc.). From these events, the agent 135 1 may rely on the stored application 270 , one or more operating system (OS) components 275 , and/or one or more software driver(s) 280 to assist in collecting metadata associated with the detected, monitored event. When the agent 135 1 determines the monitored event is “distinct,” the collected metadata may be included as part of a submission 290 provided to the cybersecurity sensor 120 1 of FIG. 1 .
- OS operating system
- the agent 135 1 includes event monitoring logic 300 , a timestamp generation logic 310 , metadata generation logic 320 , deduplication logic 330 and count incrementing logic 340 .
- the above-identified logic 300 - 340 operate in combination to detect an event and determine whether the event is categorized as “distinct” to cause metadata associated with the monitored event to be directed to the cybersecurity sensor 120 1 and/or the central intelligence hub 110 for further evaluation.
- the agent 135 1 may include event analysis logic 350 to perform a preliminary analysis of the event in an attempt to determine whether the event is malicious, benign or suspicious (i.e., unable to definitively confirm the benign or malicious classification of the event).
- the preliminary analysis may include, but are not limited or restricted to one or more static analyses (e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and/or signature matching).
- the event monitoring logic 300 is configured to monitor for selected events where the monitored events may be set as those events that have a higher tendency of being associated with a cyber-attack (see block 400 of FIG. 4 A ).
- examples of these monitored events may be categorized as (i) an execution event being a task or activity performed by a process, which may manipulate an object (e.g., opening, or writing closing to a file) or creating new processes; (ii) network event being an activity involving establishing or maintaining network connectivity to a network device (e.g., an attempted network connection, etc.); or an “operation event” directed to endpoint operability such as a Domain Name System (DNS) lookup or a logon or logoff operation.
- DNS Domain Name System
- the timestamp generation logic 310 After detecting a monitored event by the event monitoring logic 300 , the timestamp generation logic 310 generates a timestamp, included as part of the collected metadata 150 , to identify a detection time for the monitored event (see blocks 405 - 410 of FIG. 4 A ).
- the timestamp may be utilized as a search index (notably when the event is determined to be distinct and the metadata associated with the event is stored within the local data store 320 of the cybersecurity sensor 120 or the global data store 180 of the cybersecurity intelligence hub 110 ). Additionally, or in the alternative, the timestamp may be utilized to maintain currency of the metadata associated with the events stored within the local data store 320 and the global data store 180 to allow for replacement and/or validation of “stale” metadata.
- the metadata generation logic 320 collects, by gathering and generating, the metadata 150 being associated with the monitored event (see block 415 of FIG. 4 A ).
- the monitored event type detected by the monitoring detection logic 300 , may be used in determining, at least in part, the metadata to be collected, especially the distinctive metadata 151 (see block 420 of FIG. 4 A ).
- the metadata generation logic 320 controls collection of metadata associated with this execution event and forms a data structure for the collected metadata 150 .
- the data structure may include (i) a pointer to a file path providing access to the file, (ii) a file identifier (e.g., a hash value or checksum generated upon retrieval of the file via the file path), (iii) a name of the file, (iv) a creation date or other properties of the file, and/or (v) the name of the process initiating the open file command.
- the distinctive metadata 151 may be represented by a portion of a data structure forming the collected metadata 150 , namely (i) a first field including the file path and (ii) a second field including the file identifier.
- the metadata generation logic 320 controls collection of metadata directed to port and addressing information, including at least (i) a source address such as a source Internet Protocol (IP) address (“SRC_IP”); (ii) a destination address such as a destination IP address (“DEST_IP”); (iii) a destination port (“DEST_PORT”); (iv) a source port for the network connection (“SRC_PORT”); and/or (v) attempted connect time.
- IP Internet Protocol
- DEST_IP destination IP address
- DEST_PORT destination port
- SRC_PORT a source port for the network connection
- the distinctive metadata 151 may be represented by a data structure including at least (i) a first field including the SRC_IP, (ii) a second field including the DEST_IP, and (iii) a third field including the DEST_PORT for the attempted network connection.
- the agent collects metadata associated with this logon event, including at least (i) the username; (ii) logon type (e.g., remote, on premise); (iii) time of logon; and (iv) user account information.
- the collected metadata 150 associated with the operation event may be represented by a data structure including at least the distinctive metadata 151 identified above.
- the deduplication logic 330 After the collected metadata 150 has been gathered and generated by the metadata generation logic 320 , the deduplication logic 330 conducts an analysis of the monitored event to determine whether or not the monitored event is “distinct.” (see blocks 420 - 440 of FIG. 4 A ). According to one embodiment of the disclosure, the deduplication logic 330 analyzes the endpoint-stored metadata 165 for a presence of the distinctive metadata 151 while taking into account the prescribed storage (caching) policy of the local data store 160 .
- the deduplication logic 330 determines the distinctive metadata 151 associated with the collected metadata 150 based on the monitored event type (see block 420 of FIG. 4 A ). Thereafter, the deduplication logic 330 determines whether the distinctive metadata (representing the monitored event) is stored within one or more portions of the endpoint-stored metadata 165 , where such storage is in compliance with prescribed storage policy of the local data store 160 (see blocks 425 - 440 of FIG. 4 A ). This determination may involve comparing the distinctive metadata 151 to one or more portions of the endpoint-stored metadata 165 within an entry of the endpoint's local data store 160 (see block 425 of FIG. 4 A ).
- the deduplication logic 330 may further confirm that storage of the portion of the endpoint-stored metadata 165 is in compliance with storage policy and evaluate the count for an entry including a portion of endpoint-stored metadata that matches the distinctive metadata. When the count exceeds a prescribed threshold within a prescribed time window, the deduplication logic 330 may circumvent its finding and identify the collected metadata 150 as “distinct” in order to transmit the collected metadata to the cybersecurity sensor 120 1 for further analysis, as repeated activity may signify a cyber-attack.
- the count incrementing logic 340 of the agent increments a count associated with the entry (see block 450 of FIG. 4 B ).
- the count is used to monitor repetitious events and allows the deduplication logic 330 to circumvent any “indistinct” categorization to initiate an immediate submission including metadata directed to this type of activity.
- the verdict associated with the matching endpoint-stored metadata is determined (see block 455 of FIG. 4 B ).
- the agent 135 1 may report the presence of a malicious event and/or may provide the malicious event (or an object associated with the malicious event) for subsequent malware analysis (see blocks 460 - 465 of FIG. 4 B ).
- the deduplication logic 330 may submit the monitored event (or an object associated with the monitored event) for subsequent analysis (see blocks 470 - 475 of FIG. 4 B ).
- the deduplication logic 330 may halt further analysis of the monitored event.
- the collected metadata is prepared to be provided to the cybersecurity sensor (see block 480 of FIG. 4 B ).
- additional metadata may be optionally collected to accompany the collected metadata when provided to the cybersecurity sensor 120 1 (see block 485 of FIG. 4 B ).
- the additional metadata may include characteristics of the operating environment from which the collected metadata 150 or other types of metadata that may be useful in providing additional context surrounding the occurrence of the monitored event.
- the agent-evaluated metadata namely the collected metadata 150 with the optional additional metadata 152 , is provided as a submission to the cybersecurity sensor 120 1 supporting the endpoint 130 1 for further analysis (block 490 ).
- the cybersecurity sensor 120 1 deployed within the comprehensive cybersecurity platform (CCP) 100 of FIG. 1 is shown.
- the cybersecurity sensor 120 1 comprises a plurality of components, which include one or more hardware processors 500 (referred to as “processor(s)”), a non-transitory storage medium 510 , the second data store 170 , and one or more communication interfaces (e.g., interfaces 520 and 525 ).
- the cybersecurity sensor 120 1 is a physical network device, and as such, these components are at least partially encased in a housing 530 , which may be made entirely or partially of a rigid material (e.g., hard plastic, metal, glass, composites, or any combination thereof) that protects these components from environmental conditions.
- a rigid material e.g., hard plastic, metal, glass, composites, or any combination thereof
- the hardware processor(s) 500 is a multi-purpose, processing component that is configured to execute logic 540 maintained within the non-transitory storage medium 510 operating as a memory.
- the non-transitory storage medium 510 provides storage for the logic 540 , which includes metadata extraction logic 550 , metadata inspection logic 555 , deduplication logic 560 , metadata management logic 565 , notification logic 570 , and/or count incrementing logic 575 .
- the logic 540 is configured to (i) obtain the agent-evaluated metadata 155 from the submission 290 (extraction logic 550 ); (ii) determine distinctive metadata from the agent-evaluated metadata 155 and collect additional metadata based on processing of the agent-evaluated metadata 155 within the cybersecurity sensor 120 1 (metadata inspection logic 555 ); (iii) determine whether a monitored event associated with the distinctive metadata is categorized as “distinct” based on comparison of sensor-stored metadata produced across all endpoints supported by the cybersecurity sensor 120 1 , and thus, should be provided to the cybersecurity intelligence hub 110 of FIG.
- deduplication logic 560 (deduplication logic 560 ); (iv) manage storage within the data store 170 (metadata management logic 565 ); (v) generate and coordinate transmission of alerts upon detection of malicious events and/or objects (notification logic 570 ); and/or (vi) increment a count associated with one or more entries of the data store 170 including sensor-based metadata that matches the distinctive metadata under analysis (count incrementing logic 575 ).
- the cybersecurity sensor 120 1 may include a content analysis logic 580 to perform a detailed analysis of the event (or a subsequently fetched object) in an attempt to determine whether the event (or object) is malicious or benign.
- the operations of the content analysis logic 580 may be performed in parallel with the event analysis operations performed by the logic 540 .
- the content analysis logic 580 may perform the following analyses including, but are not limited or restricted to one or more of the following: static analyses (e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and/or signature matching), one or more run-time behavioral analyses, and/or one or more event-based inspections using machine-learning models.
- the data store 170 may be configured to maintain (e.g., store) the sensor-stored metadata uploaded from the plurality of agents 135 1 - 135 3 as shown or other cybersecurity intelligence downloaded from other sources (including the cybersecurity intelligence hub 110 ).
- the data store 170 deployed as non-volatile memory, maintains the sensor-based metadata 175 associated with prior evaluated event by the sensor 120 1 in accordance with a prescribed storage policy utilized by the data store 170 .
- the data store 170 is further configured to maintain (i) the agent-evaluated metadata 155 received via the submission 290 and (ii) the additional metadata 177 created prior to and/or during operations conducted by the deduplication logic 560 .
- mapping table may include a metadata-to-object (M-O) mapping table 590 to retain a correspondence between the agent-evaluated metadata 155 and its corresponding object (if requested by the cybersecurity intelligence hub).
- M-O metadata-to-object
- Another exemplary mapping table may include a source-to-metadata (SRC-Meta) mapping table 595 to retain correspondence between the agent-evaluated metadata 155 and/or sensor-evaluated metadata 179 and its originating source (e.g., IP address of the endpoint 130 1 ).
- SRC-Meta source-to-metadata
- a table should be broadly construed as any storage structure that provides an association between stored data, inclusive of relational databases or the like.
- the communication interface 520 may be configured to receive the agent-evaluated metadata 155 .
- the communication interface 520 may include a network-based connector to receive the submission 290 via a network, and/or an input/output (TO) connector to provide security administrator controlled access to the cybersecurity sensor 120 1 to update any of the logic 540 .
- the communication interface 525 may be configured to provide the sensor-evaluated metadata 179 to the cybersecurity intelligence hub 110 of FIG. 1 and receive verdict and/or metadata (e.g., hub-stored metadata, etc.) from the cybersecurity intelligence hub 110 .
- verdict and/or metadata e.g., hub-stored metadata, etc.
- the cybersecurity sensor 120 1 may be implemented entirely as software that may be loaded into a network device and operated in cooperation with an operating system (OS) running on that device.
- OS operating system
- the architecture of the software-based cybersecurity sensor 120 1 includes software modules that, when executed by the processor, perform functions directed to functionality of logic 540 illustrated within the storage medium 510 , as described herein.
- FIGS. 6 A- 6 B an exemplary flowchart of the operations performed by the cybersecurity sensor 120 1 of FIG. 1 in handling a distinct monitored event submission from the endpoint 130 1 (referencing the logic of the cybersecurity sensor 120 1 illustrated in FIG. 5 ) is shown.
- a determination is made if the submission is provided from either one of a plurality of endpoints supported by the cybersecurity sensor 120 1 or the cybersecurity intelligence hub 110 (see blocks 600 - 605 of FIG. 6 A ).
- an analysis of the monitored event represented by the agent-evaluated metadata is conducted to determine whether or not the monitored event is “distinct.” (see blocks 610 - 630 of FIG. 6 A ).
- an analysis of the sensor-stored metadata within the data store is conducted by the metadata inspection logic 555 for a presence of distinctive metadata from the agent-evaluated metadata, taking into account the prescribed storage (caching) policy of the data store. More specifically, a determination is made to identify the distinctive metadata within the agent-evaluated metadata (see block 610 of FIG. 6 A ). This determination is based, at least in part, on identifying the monitored event type. Thereafter, a comparison is conducted by the deduplication logic 560 between the distinctive metadata (representing the monitored event) and one or more portions of the sensor-stored metadata (see blocks 615 - 630 of FIG. 6 A ).
- This determination may involve comparing the distinctive metadata to one or more portions of the server-stored metadata within an entry of the sensor's data store (see block 615 of FIG. 6 A ). When a match is not detected, additional comparisons may be performed between portions of the sensor-stored metadata within other entries of the sensor's data store until either a match is detected or sensor-stored metadata within all of the entries of the sensor's data store have been analyzed (see blocks 620 - 630 of FIG. 6 A ).
- a count associated with the entry within the data store storing the matching sensor-based metadata is incremented (see block 635 of FIG. 6 B ).
- the count may be used to identify a potential cyber-attack, which may prompt providing the sensor-evaluated metadata associated with the repetitive monitored event being received from different agents to the cybersecurity intelligence hub for future analysis.
- a verdict associated with the matching sensor-stored metadata is obtained and determined to be the verdict for the monitored event (see block 640 of FIG. 6 B ).
- the verdict is a “malicious” classification
- an alert is generated and issued to one or more security administrators (e.g., security administrator(s) for an enterprise network including the endpoint (see blocks 645 and 650 of FIG. 6 B ).
- the alert includes enriched metadata collected across all of the endpoints supported by the cybersecurity sensor, including the matching portion of the sensor-based metadata, the agent-evaluated metadata and optionally any additional metadata gathered or generated by the cybersecurity sensor and/or cybersecurity intelligence hub that may provide additional context information to the security administrator.
- the cybersecurity sensor 120 1 may halt further analysis of the monitored event (see operation 655 of FIG. 6 B ). However, upon determining that the verdict is an “unknown” classification (see block 660 of FIG. 6 B ), the cybersecurity sensor 120 1 may communicate with the cybersecurity intelligence hub to resolve the verdict (e.g., determine if a known verdict (benign, malicious) is currently stored in the global data store or may be obtained by the cybersecurity intelligence hub with assistance from the enrichment services as described below). Additionally, or in the alternative, the cybersecurity sensor may perform malware analyses on at least a portion of the agent-evaluated metadata to determine whether such analyses may enable a definitive classification (malicious or benign) to be set (see block 665 of FIG. 6 B ).
- the cybersecurity sensor 120 1 may perform malware analyses on at least a portion of the agent-evaluated metadata to determine whether such analyses may enable a definitive classification (malicious or benign) to be set (see block 665 of FIG. 6 B ).
- the agent-evaluated metadata is prepared to be provided to the cybersecurity intelligence hub (see block 670 of FIG. 6 B ).
- additional metadata may be collected to accompany the agent-evaluated metadata provided to the cybersecurity intelligence hub (see block 675 of FIG. 6 B ).
- the additional metadata may include characteristics of the operating environment of the cybersecurity sensor 120 1 along with additional metadata received from other agents that may be useful in providing further additional context surrounding the monitored event.
- the sensor-evaluated metadata namely the agent-evaluated metadata 155 with optional additional metadata 177 forming the sensor-evaluated metadata 179 , is provided as a submission to the cybersecurity intelligence hub for further analysis (see block 680 of FIG. 6 B ).
- FIGS. 7 A- 7 B an exemplary flowchart of the operations performed by the cybersecurity intelligence hub 110 of FIG. 1 during interactions with the cybersecurity sensor 120 1 is shown.
- an analysis of the monitored event represented by the sensor-evaluated metadata
- the distinctive metadata is revealed from the submission and the distinctive metadata is recovered from the sensor-based metadata.
- the distinctive metadata may be a hash value of an object associated with the monitored event.
- a count associated with the entry within the global data store storing the matching hub-based metadata may be incremented (see block 730 of FIG. 7 B ).
- the verdict associated with the matching sensor-stored metadata is determined (see block 735 of FIG. 7 B ).
- the DMAE 115 accesses the enrichment services (see block 740 of FIG. 7 B ) in efforts to determine whether such resources identifies a verdict for the monitored event (see block 745 of FIG. 7 B ). If so, the entry of the global data store is updated and the hub-stored metadata is provided to the requesting cybersecurity sensor (see block 750 of FIG. 7 B ).
- the DMAE in response to the distinctive metadata failing to match the hub-stored metadata or the DMAE being unable to secure an updated verdict for an entry with a currently unknown verdict, the DMAE generates a request for an object associated with the monitored event (e.g., file) and issues a request message to the requesting cybersecurity sensor to acquire the object from the agent that originated the agent-evaluated metadata used in forming the sensor-evaluated metadata provided to the cybersecurity intelligence hub (see blocks 755 and 760 of FIG. 7 B ). Upon receipt of the object, the DMAE submits the object to the object analysis services to analyze and return a verdict associated with the object (see blocks 765 and 770 of FIG. 7 B ). Upon receipt of the verdict, the entry of the global data store is updated and the hub-stored metadata is provided to the requesting cybersecurity sensor (see block 750 of FIG. 7 B ).
- the monitored event e.g., file
- the DMAE submits the object to the object analysis services to analyze and return a verdict associated with the object
Abstract
A comprehensive cybersecurity platform includes a cybersecurity intelligence hub, a cybersecurity sensor and one or more endpoints communicatively coupled to the cybersecurity sensor, where the platform allows for efficient scaling, analysis, and detection of malware and/or malicious activity. An endpoint includes a local data store and an agent that monitors for one or more types of events being performed on the endpoint, and performs deduplication within the local data store to identify “distinct” events. The agent provides the collected metadata of distinct events to the cybersecurity sensor which also performs deduplication within a local data store. The cybersecurity sensor sends all distinct events and/or file objects to a cybersecurity intelligence hub for analysis. The cybersecurity intelligence hub is coupled to a data management and analytics engine (DMAE) that analyzes the event and/or object using multiple services to render a verdict (e.g., benign or malicious) and issues an alert.
Description
This application is a continuation of U.S. patent application Ser. No. 15/857,467 filed Dec. 28, 2017, now U.S. Pat. No. 11,003,773, issued May 11, 2021, the entire contents of which is incorporated herein by reference.
Embodiments of the disclosure relate to the field of cybersecurity. More specifically, one embodiment of the disclosure relates to a comprehensive cybersecurity platform for processing events observed during run-time at endpoints.
Cybersecurity attacks have become a pervasive problem for organizations as many networked devices and other resources have been subjected to attack and compromised. A cyber-attack constitutes a threat to security arising out of stored or in-transit data which, for example, may involve the infiltration of any type of content, such as software for example, onto a network device with the intent to perpetrate malicious or criminal activity or even a nation-state attack (i.e., “malware”).
Over the years, companies have deployed many different approaches directed to network-based, malware protection services. One conventional approach involves the placement of malware detection devices throughout an enterprise network (or subnetwork), including the installation of cybersecurity agents (hereinafter, “agents”). Operating within an endpoint, an agent is responsible for monitoring and locally storing selected events. Herein, the “event” includes a task or activity that is conducted by a software component running on the endpoint and, in some situations, the activity may be undesired or unexpected indicating a cyber-attack is being attempted, such as a file being written to disk, a process being executed or created, or an attempted network connection.
A tremendous amount of information would be available to cybersecurity analysts in their attempts to identify cyber-attacks by collecting and analyzing the monitored events occurring at each endpoint (i.e., physical or virtual device). While the vast amount of information may seem valuable from a cybersecurity analysis perspective, conventional cybersecurity deployment schemes for analyzing monitored events, especially for a network environment having thousands or even hundreds of thousands of endpoints, are incapable of being effectively (or efficiently) scaled to handle this large quantity of information. One reason for this scaling problem is due, at least in part, to reliance on agents in accurately identifying “malicious” objects (and/or events), especially when the agents feature performance constraints (e.g., limited processing power and/or analysis time) and given their results are extremely noisy (i.e., produce large numbers of false positives).
Embodiments of the invention are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:
Embodiments of the present disclosure generally relate to a comprehensive cybersecurity platform featuring multiple stages in propagating cybersecurity intelligence from an endpoint (e.g., laptop or server) to a cybersecurity intelligence hub located as a public or private cloud-based service. One example of the comprehensive cybersecurity platform includes endpoints (first stage); cybersecurity sensors (second stage) that may support any number of endpoints (e.g., tens or hundreds), and a cybersecurity intelligence hub (third stage) that may support any number of sensors (e.g., tens or hundreds) and enhanced services (described below). Hence, the comprehensive cybersecurity platform is configured to support a cybersecurity intelligence workflow where multiple (two or more) stages apply deduplication controls in the transmission of cybersecurity intelligence collected at the endpoints to the cybersecurity intelligence hub. The “nested” deduplication controls are designed to improve the speed and accuracy in determining classifications of an event while, at the same time, reducing overall network throughput requirements and mitigate repetitive analytics on identical events. This allows for better platform scalability without adversely affecting the currency or relevancy of stored metadata within the cybersecurity intelligence hub (referred to as “hub-stored metadata”).
For purposes of consistency in terminology, as used herein, a “distinct event” includes a task or activity that has not been previously observed; namely, there is currently no matching (i.e. identical or highly correlated) recorded observation of (i) a particular event in a local data store by an agent performing an assessment from a local perspective (first stage), (ii) a particular event in a data store (provided from multiple agents supported by the sensor) by a cybersecurity sensor performing a broader assessment such as from an enterprise perspective (second stage), or a particular event in a global data store (provided from multiple agents and sensors supported by the hub) by a cybersecurity intelligence hub performing an assessment from a platform-wide perspective (third stage). For some events, such as a logon event for example, the distinct event may exclude certain parameters that are not required for cybersecurity analysis, and in some cases, may obfuscate the distinct nature of events (e.g., logon event with particular typed password excluded from the event, personal identification information “PII”, etc.). The reason is that, for certain events, the content may be less important than the number of attempts being made. “Distinctive metadata” is a portion of collected metadata associated with a monitored event that may be used to distinguish and identify the monitored event from other events.
As described below, each endpoint includes an agent that is configured to control submissions of metadata associated with monitored events through a first deduplication analysis. More specifically, an agent is configured to provide metadata collected for a monitored event (collected metadata) to a cybersecurity sensor when the agent considers that this monitored event is “distinct” (e.g., currently no recorded observation of a particular event). One technique for determining whether the monitored event is categorized as “distinct” involves a comparison of a portion of the collected metadata that differentiates the monitored event from other events of similar type (hereinafter referred to as the “distinctive metadata”) to metadata currently stored within a local (e.g., on-board) data store utilized by the agent (referred to as “endpoint-stored metadata”). The prescribed storage (caching) policy, which may be directed to a duration in storage of metadata maintained by the local data store, may impact the categorization of a monitored event as “distinct.”
Upon determining that the monitored event is “distinct,” the agent stores at least the collected metadata (and optionally additional metadata as described below) into its local data store and provides at least the collected metadata to the cybersecurity sensor. Otherwise, for a detected benign monitored event, the agent may forego providing the collected metadata to the cybersecurity sensor and merely record the occurrence of the event (e.g., change a count maintained for an entry of the endpoint's local data store that represents the number of detected events corresponding to a prior evaluated event represented by endpoint-stored metadata within the entry). For a malicious event, the agent or the cybersecurity sensor may handle reporting and/or taking other preventive or remediation action on the malicious event and/or provided metadata from its local data store, a cybersecurity sensor and/or the cybersecurity intelligence hub if made available of the endpoint after other stage analyses.
After receipt of the collected metadata from the agent, the cybersecurity sensor conducts a second deduplication analysis based, at least in part, on the distinctive metadata to determine whether the monitored event is categorized as “distinct” across all endpoints supported by the sensor or “indistinct” (e.g., prior observation of the particular event). For “indistinct” events, the distinctive metadata represents the monitored event matches metadata representing a prior evaluated event stored within a data store of the sensor and received from any of a plurality of agents, and in some embodiments, the cybersecurity intelligence hub, and/or the enhanced services (referred to as “sensor-stored metadata”). Where a malicious verdict is recovered from the matching sensor-based metadata, the cybersecurity sensor may issue or otherwise initiate an alert, which may include a message sent to administrator (e.g., text, email, audio, etc.) or a report (e.g., represent a malicious verdict on a dashboard screen by a graph, image or illuminating a portion of the dashboard screen to denote a malicious event). The alert may be enriched with metadata from multiple sources (described above). The cybersecurity sensor may perform other remediation and/or analytics as well. Otherwise, for a detected benign monitored event, the cybersecurity sensor may forego providing the collected metadata to the cybersecurity intelligence hub and merely record the occurrence of the event (e.g., store the metadata provided by the agent and change a count maintained for an entry of the cybersecurity sensor's data store that represents the number of detected events), as described below.
Upon determining that the monitored event is “distinct” across all of the endpoints supported by the cybersecurity sensor, the cybersecurity sensor stores at least the collected metadata into the sensor's data store and provides at least the collected metadata to the cybersecurity intelligence hub to conduct another deduplication analysis as described above, this time across all cybersecurity sensors supported by the hub. When the collected metadata is made available to the cybersecurity intelligence hub and the monitored event is categorized as “distinct” across all of the sensors communicatively coupled to the cybersecurity intelligence hub, the cybersecurity intelligence hub may solicit the assistance of backend or third party services (described below) to determine a verdict for the monitored event. Being now added as part of the hub-stored metadata, the collected metadata (and perhaps additional metadata accompanying the collected metadata) provides additional cybersecurity intelligence that may be relied upon by authorized users within the comprehensive cybersecurity platform.
One significant aspect of the invention is controlling conveyance of the vast amount of cybersecurity intelligence collected by endpoints to a global data store of the cybersecurity intelligence hub through a deduplication-based, metadata submission scheme. According to the comprehensive cybersecurity platform described herein, the cybersecurity hub supports malware detection on a global perspective based on received cybersecurity intelligence from all endpoints and sensors at a system-wide level along with cybersecurity intelligence from the enhanced services. Similarly, but on a smaller scale, each cybersecurity sensor supports malware detection on a local perspective, aggregating and providing low-latency classifications (normally in a few seconds) as well as analytic support for a selected group of agents. Lastly, each agent within an endpoint may support specific, localized malware detection.
Besides metadata being sourced at the endpoints, the global data store may receive cybersecurity intelligence from other cybersecurity intelligence sources. Collectively, the “cybersecurity intelligence” includes metadata associated with events previously determined to be of a benign, malicious, or unknown (e.g., not previously analyzed or inconclusive) classification. This metadata may be accessed as part of malware detection analyses by any number of authorized customers in efforts to provide more rapid malicious object detection, quicken the issuance (or initiate issuance) of alerts to hasten other remedial action, increased accuracy in cyber-attack detection, and increased visibility and predictability of cyber-attacks, their proliferation, and the extent or spread of infection.
For this embodiment of the disclosure, the comprehensive cybersecurity platform includes the cybersecurity intelligence hub communicatively coupled to cybersecurity intelligence sources and/or cybersecurity sensors each operating as both a source and consumer of cybersecurity intelligence. Herein, the cybersecurity intelligence hub may operate as (i) a central facility connected via a network to receive metadata from one or more cybersecurity intelligence sources; (ii) an intelligence analytics resource to analyze metadata received directly or indirectly by agents, and store the analysis results and/or classification (verdict) with the collected metadata (or cross-referenced with the collected metadata); and (iii) a central facility serving as a distribution point for the hub-stored metadata via a network. In a centralized deployment, the cybersecurity intelligence hub may be deployed as a dedicated system or as part of cloud-based malware detection service (e.g., as part of, or complementary to and interacting with a cybersecurity detection system and service described in detail in U.S. patent application Ser. No. 15/283,126 entitled “System and Method For Managing Formation and Modification of a Cluster Within a Malware Detection System,” filed Sep. 30, 2016; U.S. patent application Ser. No. 15/721,630 entitled “Multi-Level Control For Enhanced Resource and Object Evaluation Management of Malware Detection System,” filed Sep. 29, 2017, the entire contents of both of these applications are incorporated by reference herein).
Herein, the cybersecurity intelligence hub includes a global data store communicatively coupled to a data management and analytics engine (DMAE). The global data store operates as a database or repository to receive and store cybersecurity intelligence, including metadata associated with events received from multiple (two or more) agents. According to one embodiment of the disclosure, these events may include (i) events previously analyzed and determined to be of a malicious or benign classification, (ii) events previously analyzed without conclusive results and currently determined to be of an “unknown” classification, and/or (iii) events previously not analyzed (or awaiting analysis), and thus of an “unknown” classification. In general terms, the global data store contains the entire stockpile of cybersecurity intelligence collected and used by individuals, businesses, and/or government agencies (collectively, “customers”), which may be continuously updated by the various intelligence sources and by the DMAE to maintain its currency and relevancy. The global data store may be implemented across customers of a particular product and/or service vendor or across customers of many such vendors.
Herein, the stored cybersecurity intelligence within the global data store may include metadata associated with “distinct” events (e.g., not recorded as previously observed within the global data store), gathered from a variety of disparate cybersecurity sources. One of these sources may include a cybersecurity sensor, which may be located on a network (or subnetwork) such as at a periphery of the network (or subnetwork), proximate to an email server remotely located from the cybersecurity intelligence hub, or the like.
In general, a “cybersecurity sensor” may correspond to a physical network device or a virtual network device (software) that aggregates and/or correlates events, as well as assisting in the detection of malicious events and providing alert messages (notifications via logic) in response to such detection. The cybersecurity sensor may include (or utilize external from the sensor) a data store for storage of metadata associated with prior evaluated events (sensor-stored metadata). The cybersecurity sensor may also include (i) deduplication logic to control propagation of cybersecurity intelligence (e.g., metadata) to the cybersecurity intelligence hub; (ii) metadata parsing logic to parse the collected metadata sourced by an agent from other information in the incoming submission (e.g., messages), (iii) metadata inspection logic to inspect the collected metadata against the sensor-stored metadata, (iv) metadata management logic to maintain a database mapping entries for the sensor-stored metadata to their corresponding sources, and (v) count incrementing logic to set a count associated with an entry that represents a number of times this specific metadata has been detected over a prescribed time window (e.g., ranging from a few seconds or minutes to years).
As described in detail below, one or more endpoints may be communicatively coupled to a cybersecurity sensor. According to one embodiment of the disclosure, an endpoint is a physical network device equipped with an “agent” to monitor and capture events in real-time for cybersecurity investigation or malware detection. Alternatively, according to one embodiment of the disclosure, an endpoint may be a virtual network device being software that processes information such as a virtual machine or any other virtualized resource. The agent may be deployed and operate as part of the endpoint.
According to one embodiment of the disclosure, the agent is software running on the endpoint that monitors for and detects one or more events. Some of these monitored events may be categorized as execution events, network events, and/or operation events. An example of an “execution event” may involve an activity performed by a process (e.g., open file, close file, create file, write to file, create new process, etc.) running on the endpoint while an example of a “network event” may involve an attempted or successful network connection conducted by endpoint logic. An example of an “operation event” may include an attempted or successful operation performed on the endpoint such as a Domain Name System (DNS) lookup or a logon or logoff operation directed to an access controlled system.
Upon detecting a monitored event, the agent collects (i.e., gathers and/or generates) metadata associated with the monitored event. It is contemplated that the type of monitored event may determine, at least in part, the distinctive metadata that is needed to differentiate the monitored event from other events of similar type. Thereafter, the agent conducts an analysis of the monitored event to determine whether or not the monitored event is “distinct” as described above. For example, according to one embodiment of the disclosure, this analysis may include the agent determining whether the distinctive metadata associated with the monitored event, being part of the collected metadata, is currently part of the endpoint-stored metadata (i.e., stored in the endpoint's local data store). This local data store is responsible for maintaining metadata associated with prior evaluated events in accordance with a prescribed storage (caching) policy (e.g., cache validation policy). The prescribed (caching) policy, which can be directed to a duration of storage of metadata, may impact the categorization as to which monitored events occurring within the endpoint are “distinct.” Examples of the potential effects in categorization are described below.
Accordingly to one embodiment of the disclosure, the deduplication logic determines whether the distinctive metadata matches any endpoint-stored metadata residing in the endpoint's local data store governed by its prescribed storage policy. Of course, it is contemplated that, where the agent local data store includes multiple (two or more) local data stores, each with a different prescribed storage policy, the agent would need to compare the distinctive metadata to metadata stored in each data store according to its particular storage policy.
If no portion of the endpoint-based metadata matches the distinctive metadata representing the monitored event (i.e., the monitored event is “distinct”), the agent may be configured to supply the collected metadata to the cybersecurity sensor by a “push” or “pull” delivery scheme, described below. Thereafter, the agent generates the submission, including the collected metadata described below, which is provided to the cybersecurity sensor.
However, if a portion of the endpoint-stored metadata matches the distinctive metadata (i.e., the monitored event is “indistinct”), where some parameters of the event may be excluded prior to evaluation (e.g. a logon event), the agent may increment a count corresponding to the number of occurrences this specific metadata (e.g., for execution events, etc.) or specific type of metadata (e.g., for network events, etc.) has been detected by the agent. It is contemplated that, as the count increases and exceeds a prescribed threshold over a prescribed time window, the agent may circumvent its findings and identify the monitored event correspond to the collected metadata as “distinct” in order to potentially force another analysis of the monitored event.
It is further contemplated that, upon collecting the metadata, a timestamp may be generated and added as part of the collected metadata for the monitored event. The timestamp allows for the removal of “stale” metadata retained in the local data store of the endpoint longer than a prescribed period of time and provides an indexing parameter for a data store lookup.
After receipt of the submission, the cybersecurity sensor extracts at least the collected metadata and determines whether the monitored event is “distinct.” For example, according to one embodiment of the disclosure, the cybersecurity sensor determines whether the distinctive metadata of the collected metadata matches one or more portions of the sensor-stored metadata. A local data store is responsible for maintaining the sensor-stored metadata, which may be uploaded from a plurality of agents and/or downloaded from other sources (including the cybersecurity intelligence hub) in accordance with a prescribed storage (caching) policy.
Upon determining that the monitored event is “distinct,” the cybersecurity sensor stores at least the collected metadata within the local data store and provides a submission, including at least the collected metadata, for analysis by the DMAE within the cybersecurity intelligence hub. In particular, the DMAE determines whether the distinctive metadata of the collected metadata is present in the global data store, and if so, a verdict (classification) of a prior evaluated event, which corresponds to the monitored event associated with the distinctive metadata, is returned to the cybersecurity sensor for storage (or cross-reference) with at least the collected metadata. Where the verdict is a “malicious” classification, the cybersecurity sensor may issue (or initiate issuance of) an alert. Where the verdict is a “benign” classification, the cybersecurity sensor may simply halt further operations associated with this submission (as the entry of the sensor's data including at least the collected metadata has been newly added).
Upon determining that the monitored event is “indistinct,” namely the distinctive metadata matches a portion of the sensor-stored metadata within an entry of the sensor's data store, the sensor performs operations based on the discovered verdict as described above. Herein, it is contemplated that a count associated with an entry including the portion of the sensor-stored metadata is incremented regardless of the verdict.
However, where the DMAE determines that the collected metadata is distinct, namely the distinctive metadata is not stored in the global data store (as part of the hub-stored metadata), for execution events, the DMAE may provide some of the distinctive metadata (e.g., an identifier of the object associated with the monitored event such as a hash value or checksum) to object analysis services. If the object has not been analyzed by the object analysis services, according to one embodiment of the disclosure, a request for a copy of the object (e.g., a file constituting an event) may be returned to the DMAE. The DMAE fetches the object from the endpoint via the cybersecurity sensor. Thereafter, the object analysis services conduct malware detection operations on the object in an effort to confirm a verdict (malicious, benign) for that object. In other embodiments, the sensor may make a determination of whether to initiate or conduct malware detection operations on the object with the determination and types of operations, and further in some implementations, configurable by an administrator.
For other types of events, such as network or operation events for example, where the DMAE determines that the distinctive metadata associated with this event is “distinct,” the DMAE may utilize various enrichment services (described below) in an attempt to classify the object. For a network event, for example, the DMAE may send a portion of the collected metadata (e.g., SRC_IP, DEST_IP, and/or DEST_PORT) to the enrichment services or allow such services to gain access to the portion of the collected metadata in efforts to classify the event (e.g., identify whether targeted website is benign or malicious, etc.). If no verdict can be determined through such analysis, the collected metadata within the global data store may be classified of “unknown,” and this “unknown” verdict is returned to the local data store within the cybersecurity sensor (and optionally the local data store within the endpoint). The “unknown” verdict may be used to triggered additional malware analyses as described below.
In the following description, certain terminology is used to describe features of the invention. In certain situations, each of the terms “logic,” “system,” “component,” or “engine” is representative of hardware, firmware, and/or software that is configured to perform one or more functions. As hardware, the logic (or system/component/engine) may include circuitry having data processing or storage functionality. Examples of such circuitry may include, but are not limited or restricted to a microprocessor, one or more processor cores, a programmable gate array, a microcontroller, an application specific integrated circuit, wireless receiver, transmitter and/or transceiver circuitry, semiconductor memory, or combinatorial logic.
Alternatively, or in combination with the hardware circuitry described above, the logic (or system/component/engine) may be software in the form of one or more software modules. The software modules may include an executable application, a daemon application, an application programming interface (API), a subroutine, a function, a procedure, an applet, a servlet, a routine, source code, a dynamic link library, or one or more instructions. The software module(s) may be stored in any type of a suitable non-transitory storage medium, or transitory storage medium (e.g., electrical, optical, acoustical or other form of propagated signals such as carrier waves, infrared signals, or digital signals). Examples of non-transitory storage medium may include, but are not limited or restricted to a programmable circuit; a semiconductor memory; non-persistent storage such as volatile memory (e.g., any type of random access memory “RAM”); persistent storage such as non-volatile memory (e.g., read-only memory “ROM”, power-backed RAM, flash memory, phase-change memory, etc.), a solid-state drive, hard disk drive, an optical disc drive, or a portable memory device. As firmware, the executable code may be stored in persistent storage.
A “network device” may be construed as either a physical electronic device featuring data processing and/or network connection functionality or a virtual electronic device being software that virtualizes at least a portion of the functionality of the physical electronic device. One type of network device is an endpoint that operates as (or operates within) a laptop, a set-top box or other consumer electronic device. Other examples of a network device may include, but are not limited or restricted to a server, mobile phone (which may be operating as a mobile hot spot), a desktop computer, a standalone malware detection appliance, a network adapter, or an intermediary communication device (e.g., router, firewall, etc.), a virtual machine, or any other virtualized resource.
The term “object” generally relates to content having a logical structure or organization that enables it to be classified for purposes of analysis for malware. The content may include an executable (e.g., an application, program, code segment, a script, dynamic link library “dll” or any file in a format that can be directly executed by a computer such as a file with an “.exe” extension, etc.), a non-executable (e.g., a file; any document such as a Portable Document Format “PDF” document; a word processing document such as Word® document; an electronic mail “email” message, web page, or other non-executable file, etc.), or simply a collection of related data. In some situations, the object may be retrieved from information in transit (e.g., a plurality of packets) or information at rest (e.g., data bytes from a storage medium).
The term “metadata” generally refers to a collection of information. The collection of information may be associated with an event or an object for example. The content of the metadata may depend, at least in part, on the type of event (or object) to which the metadata pertains. As an illustrative example, an event related to a particular activity performed by a process may include a path identifying a location of an object being referenced by the process and an identifier of the object (e.g., hash value or checksum of the object). Likewise, an event related to an attempted or successful network connection may include at least a destination address (SRC_IP); and a destination port associated with the network connection (DEST_PORT).
The term “message” generally refers to signaling (wired or wireless) as either information placed in a prescribed format and transmitted in accordance with a suitable delivery protocol or information made accessible through a logical data structure such as an API. Examples of the delivery protocol include, but are not limited or restricted to HTTP (Hypertext Transfer Protocol); HTTPS (HTTP Secure); Simple Mail Transfer Protocol (SMTP); File Transfer Protocol (FTP); iMESSAGE; Instant Message Access Protocol (IMAP); or the like. Hence, each message may be in the form of one or more packets, frames, or any other series of bits having the prescribed, structured format. The message may be delivered in accordance with a “push” or “pull” delivery scheme.
As described above, each cybersecurity sensor may be deployed as a “physical” or “virtual” network device, as described above. Examples of a “cybersecurity sensor” may include, but are not limited or restricted to the following: (i) a cybersecurity appliance that monitors incoming and/or outgoing network traffic, emails, etc.; (ii) a firewall; (iii) a data transfer device (e.g., router, repeater, portable mobile hotspot, etc.); (iv) a security information and event management system (“SIEM”); (v) a virtual device being software that supports data capture, preliminary analysis of data for malware, and metadata extraction, including an anti-virus application or malware detection agent; (vi) exchange or web server equipped with malware detection software; or the like.
The term “computerized” generally represents that any corresponding operations are conducted by hardware in combination with software and/or firmware.
As briefly described above, the term “malware” may be broadly construed as any code, communication or activity that initiates or furthers an attack (hereinafter, “cyber-attack”). Malware may prompt or cause unauthorized, unexpected, anomalous, unintended and/or unwanted behaviors or operations constituting a security compromise of information infrastructure (generally “attack-oriented behaviors”). For instance, malware may correspond to a type of malicious computer code that, upon execution and as an illustrative example, takes advantage of (exploit) a vulnerability in a network, for example, to gain unauthorized access, harm or co-opt operation of a network device or misappropriate, modify or delete data. Alternatively, as another illustrative example, malware may correspond to information (e.g., executable code, script(s), data, command(s), etc.) that is designed to cause a network device to experience attack-oriented behaviors. Examples of these attack-oriented behaviors may include a communication-based anomaly or an execution-based anomaly, which, for example, could (1) alter the functionality of a network device in an atypical and unauthorized manner; and/or (2) provide unwanted functionality which may be generally acceptable in another context.
In certain instances, the terms “compare,” comparing,” “comparison,” or other tenses thereof generally mean determining whether two items match, where a “match” constitutes a finding that the compared items are identical or exceed a prescribed threshold of correlation. The compared items may include metadata.
The term “interconnect” may be construed as a physical or logical communication link (or path) between two or more network devices. For instance, as a physical link, wired and/or wireless interconnects feature the form of electrical wiring, optical fiber, cable, bus trace, or a wireless channel using infrared, radio frequency (RF), may be used. A logical link includes well-defined interfaces, function calls, shared resources, dynamic linking, or the like.
Finally, the terms “or” and “and/or” as used herein are to be interpreted as inclusive or meaning any one or any combination. As an example, “A, B or C” or “A, B and/or C” mean “any of the following: A; B; C; A and B; A and C; B and C; A, B and C.” An exception to this definition will occur only when a combination of elements, functions, steps or acts are in some way inherently mutually exclusive.
As this invention is susceptible to embodiments of many different forms, it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.
Referring to FIG. 1 , a block diagram of an exemplary embodiment of a comprehensive cybersecurity platform (CCP) 100 is shown. For this embodiment, the CCP 100 features endpoints 130 1-130 M (M≥2) (first stage); cybersecurity sensors 120 1-120 N (N≥1) (second stage) each capable of supporting a plurality of agents (e.g., tens or hundreds); and a cybersecurity intelligence hub 110 (third stage) supporting a number of cybersecurity sensors 120 1-120 N (e.g., tens or hundreds). This multi-stage cybersecurity platform controls the propagation of cybersecurity intelligence from the endpoints 130 1-130 M to the cybersecurity intelligence hub 110 by significantly mitigating the transfer of repetitive cybersecurity intelligence between stages. Without such controls, the CCP 100 could not effectively aggregate and provide access to cybersecurity intelligence from thousands of sources.
Herein, for illustrative purposes, a three-stage cybersecurity platform scheme is described with each stage including deduplication logic that selectively determines what cybersecurity intelligence to further process or provide to the next stage, where the cybersecurity intelligence is ultimately targeted for storage within a global data store 180 of the cybersecurity intelligence hub 110. However, it is contemplated that the CCP 100 may be organized in accordance with any of a variety of “nested” deduplication logic layouts, such as deduplication logic being deployed at selected neighboring stages (e.g., the sensors 120 1-120 N and hub 110 without deployment at the agents 130 1-130 M; the agents 130 1-130 M and sensors 120 1-120 N without deployment at the hub 110) or at non-neighboring stages (e.g., the agents 130 1-130 M and the hub 110 without deployment at the sensors 120 1-120 N).
According to one embodiment of the disclosure, as shown in FIG. 1 , the CCP 100 comprises a cybersecurity intelligence hub 110 communicatively coupled to one or more cybersecurity sensors 120 1-120 N (N≥1) via a network, and the cybersecurity sensors 120 1-120 N are communicatively coupled to one or more endpoints 130 1-130 M (M≥1). Each cybersecurity sensors 120 1, . . . , or 120 N may be deployed on-premises with its supported endpoints 130 1-130 M, remotely thereof, or a combination of both types of deployments. As shown, each cybersecurity sensor is capable of supporting multiple endpoints such as cybersecurity sensor 120 1 supporting endpoints 130 1-130 3 and cybersecurity sensor 120 N supporting endpoints 130 M-1-130 M. As shown, each of these endpoint 130 1-130 3 and 130 M-1-130 M includes a cybersecurity agent 135 1-135 3 and 135 M-1-135 M, respectively.
As described herein, each cybersecurity agent 135 1-135 M is software, running in the foreground or in the background as a daemon, which is configured to monitor for particular events or particular types of events (e.g., certain tasks or activities) that occur during operation of its corresponding endpoint (e.g., endpoint 130 1). Each agent 135 1, . . . , or 135 M may be configured as a static software component, where the monitored events are predetermined and cannot be modified or expanded. However, as an alternative embodiment, each agent 135 1, . . . , or 135 M may be configured as a dynamic software component allowing for modification as to which events are monitored without re-installation of the agent 135 1. Illustrative examples of types of monitored events may include, but are not limited or restricted to (i) writing an object (e.g., file) to disk, (ii) opening an object (e.g., file), (iii) starting execution of an object (e.g., executable), (iv) connecting to a network, (v) attempting a logon operation, (vi) changing a registry key, or the like.
As shown in FIG. 1 , according to one embodiment of the disclosure, the agents 135 1-135 M operating within respective endpoints 130 1-130 M are communicatively coupled to the cybersecurity sensors 120 1-120 N over one or more interconnects 140 1-140 M. Upon detecting a monitored event, an agent (e.g., agent 135 1) collects (and places in temporary storage) metadata 150 associated with the monitored event. According to one embodiment of the disclosure, the agent 135 1 also conducts a first deduplication analysis on the collected metadata 150 to determine whether the monitored event has been previously observed. This determination may involve performing a comparison between a portion of the collected metadata 150 that distinctively identifies the monitored event (e.g., distinctive metadata 151), and corresponding portions of stored metadata 165 within entries (e.g., entry 162) of the local data store 160 (hereinafter, “endpoint-stored metadata” 165). It is noted that each of the entries (and entries of other data stores) may contain distinctive metadata associated with a prior evaluated event, where the distinctive metadata may be normalized to exclude certain parameters that are not required for cybersecurity analysis (e.g., password for credential events, PII, etc.). The distinctive metadata may include the collected Stated differently, depending on the event type, the agent 135 1 may rely on different distinctive metadata to identify the monitored event, and as a result, the agent 135 1 may access a different portion of the endpoint-stored metadata 165 for comparison, as described in detail below.
According to one embodiment of the disclosure, the prescribed storage (caching) policy utilized by the endpoint's local data store 160 may impact the categorization of a monitored event as “distinct.” More specifically, the storage policy utilized by the endpoint's local data store 160 may control metadata validation and retention within the local data store 160 such as through LRU (Least Recently Used), FIFO (first-in, first-out), or a time-based validation scheme where the agent-based metadata 165 can reside within the local data store 160 for a prescribed period of time until the agent-based metadata 165 is considered “stale” (e.g., invalid). Hence, in certain situations, a monitored event still may be categorized as “distinct” by the agent 135 1, despite the presence of matching agent-based metadata 165 in the local data store 160.
Moreover, repetitive access matches to a portion of the endpoint-stored metadata 165 within a particular entry 162 also may impact the categorization of a monitored event as “distinct.” For example, the number of repetitive occurrences of a prior evaluated event (represented by the endpoint-stored metadata within the particular entry 162) may be monitored, where the count 163 is increased with every detected occurrence. Hence, when the count 163 exceeds a threshold value over a prescribed time window, the entry 162 may be “tagged” to cause the agent 135 1 to classify any monitored event represented by distinctive metadata that matches the endpoint-stored metadata within the particular entry 162.
In response to the agent 135 1 determining that the monitored event has been categorized as “distinct,” the agent 135 1 provides at least the collected metadata 150 to the cybersecurity sensor 120 1 over the interconnect 140 1. According to one embodiment of the disclosure, besides providing the collected metadata 150, the agent 135 1 may provide additional metadata 152 associated with the monitored event. For instance, the additional metadata 152 may include characteristics of the operating environment from which the collected metadata 150 is provided. For example, these characteristics may be directed to an identifier of the endpoint 130 1 featuring the agent 135 1 (e.g., model number, software product code, etc.), an IP address of the endpoint 130 1, geographic identifier surmised from the endpoint's IP address, a software profile or software version utilized by the agent 135 1, time of analysis, or the like. Additionally, or in the alternative, the agent 135 1 could collect/send additional metadata for other events such as additional events related (e.g., linked) to the monitored events.
Hence, for clarity sake, the metadata provided to the cybersecurity sensor 120 1, which includes the collected metadata 150 and optionally includes the additional metadata 152, shall be referred to as “agent-evaluated metadata 155.”
Herein, the agent-evaluated metadata 155 may be provided to the cybersecurity sensor 120 1 in order to (i) obtain a verdict (e.g., classification, benign or malicious) from the cybersecurity sensor 120 1 (if the monitored event is known) or (ii) maintain currency and relevancy of a data store 170 of the cybersecurity sensor 120 1 and/or the global data store 180 of the cybersecurity intelligence hub 110 to provide more immediate malware detection results to customers. Herein, the agent-evaluated metadata 155 may be provided in accordance with a “push” or “pull” delivery scheme as described below. In general, the “push” delivery scheme involves the generation and transmission by the agent 135 1 of a message, including the agent-evaluated metadata 155, to the cybersecurity sensor 120 1. Alternatively, the “pull” delivery scheme involves the cybersecurity sensor 120 1 periodically or aperiodically requesting delivery of newly collected metadata from the agent 135 1, and the agent 135 1, in response, provides the agent-evaluated metadata 155 to the cybersecurity sensor 120 1. The agent-evaluated metadata 155 is also now stored as one of the entries within the local data store 165.
After receipt of at least the agent-evaluated metadata 155, the cybersecurity sensor 120 1 conducts a second deduplication analysis. This second deduplication analysis includes a comparison of a portion of the agent-evaluated metadata 155 that distinctively identifies the monitored event to corresponding portions of the sensor-stored metadata 175 (i.e., stored metadata within entries of the data store 170). According to one embodiment of the disclosure, the portion of the agent-evaluated metadata 155 used in the second deduplication analysis at the cybersecurity sensor 120 1 may be the distinctive metadata 151 of the collected metadata 150 used in the first deduplication analysis at the endpoint 130 1. According to another embodiment of the disclosure, however, the portion of the agent-evaluated metadata 155 used in the second deduplication analysis at the cybersecurity sensor 120 1 may differ from the distinctive metadata 151 used in the first deduplication analysis at the endpoint 130 1. For clarity sake, the distinctive metadata at all stages will be referenced as “distinctive metadata 151.”
The cybersecurity sensor 120 1 determines whether the monitored event had been previously observed. This may be accomplished by determining whether a portion of the agent-evaluated metadata 155 (e.g., the distinctive metadata 151) matches a portion of the sensor-stored metadata 174 residing within a particular entry 172 of the data store 170. The portion of the sensor-stored metadata 174 corresponds to metadata representing a prior evaluated event determined to be the monitored event. Upon determining that the monitored event has been previously observed, the cybersecurity sensor 120 1 may increment the count 173, which records the repetitive detections by different agents of the prior evaluated event represented by the sensor-based metadata within the entry 172.
Furthermore, where the verdict attributed to the prior evaluated event and contained in the sensor-stored metadata 174 is of a “malicious” classification, the cybersecurity sensor 120 1 may generate an alert 176, perform another remediation technique, and/or conduct additional analytics on the agent-evaluated metadata 155. The additional analysis may be performed by the cybersecurity sensor 120 1, by the agent 135 1, or by other logic within the endpoint 130 1 deploying the agent 135 1. For example, an object or a portion of the evaluated metadata 155 may be run through a machine learning algorithm on the endpoint 130 1, where prevention/remediation action may be undertaken based on the verdict.
Repetitive access matches to sensor-stored metadata 175 may be captured by increasing the count 173 associated with entry 172, for use in entry replacement and/or re-confirming verdict for the prior evaluated event associated with the entry 172.
If no match is detected, the cybersecurity sensor 120 1 determines that the monitored event remains categorized as “distinct” across all endpoints supported by the sensor 120 1 (e.g., a new (currently unrecorded) observation of a particular event across all supported endpoints by the cybersecurity sensor 120 1). The cybersecurity sensor 120 1 provides at least the agent-evaluated metadata 155 to the cybersecurity intelligence hub 110. Besides providing the agent-evaluated metadata 155, according to one embodiment of the disclosure, the cybersecurity sensor 120 1 also may provide additional metadata 177 associated with the monitored event such as characteristics of the cybersecurity sensor 120 1 and/or its operating environment for example. The additional metadata 177 may include an identifier of the cybersecurity sensor 120 1 (e.g., a device identification “ID” such as a PCI ID, software product code, or any other number, character, or alphanumeric value that uniquely identifies a particular type of physical or virtual component), an IP address of the cybersecurity sensor 120 1, software profile or software version utilized by the cybersecurity sensor 120 1, time of analysis, preliminary verdict (if malware analysis performed concurrently), or the like.
Also, according to another embodiment of the disclosure, the additional metadata 177 may include other metadata collected by the cybersecurity sensor 120 1 that pertain to events related to the monitored event and/or events in temporal proximity to the monitored event, as partially described in U.S. patent application Ser. No. 15/725,185 entitled “System and Method for Cyberattack Detection Utilizing Monitored Events,” filed Oct. 4, 2017 and incorporated by reference herein, Hence, the metadata provided to the cybersecurity intelligence hub 110, which include the agent-evaluated metadata 155 and optionally the additional metadata 177, shall be referred to as “sensor-evaluated metadata 179.” The sensor-evaluated metadata 179 is also stored within one or more of the entries of the data store 175 or portions of the sensor-evaluated metadata 179 stored separately and cross-referenced to each other.
Referring still to FIG. 1 , the cybersecurity intelligence hub 110 receives, parses, analyzes and stores, in a structured format within the global data store 180, cybersecurity intelligence received from the cybersecurity sensors 120 1-120 N. As shown, the cybersecurity intelligence hub 110 is configured to receive cybersecurity intelligence (e.g., the sensor-evaluated metadata 179) from the first cybersecurity sensor 120 1. The cybersecurity intelligence hub 110 includes a data management and analytics engine (DMAE) 115, which is configured to verify a verdict (e.g., a “benign,” “malicious,” or “unknown” classification) for the monitored event based on analyses of a portion of the sensor-evaluated metadata 179 that distinctively identifies the monitored event for comparison with one or more portions of the hub-stored metadata 185 (i.e., metadata associated with prior evaluated events) stored within the global data store 180.
Where the portion of the sensor-evaluated metadata 179 (representing the monitored event) matches at least one portion of the hub-based metadata 185 (representing a prior evaluated event) maintained in the global data store 180, the cybersecurity intelligence hub 110 may determine a source of the sensor-evaluated metadata 179 from its content (or the IP source address of the cybersecurity sensor 120 1 accompanying the sensor-evaluated metadata 179). Thereafter, the cybersecurity intelligence hub 110 provides a verdict and other hub-based metadata associated with the prior evaluated event(s) corresponding to the monitored event, to the cybersecurity sensor 120 1 to handle reporting, remediation and/or additional analytics. As described above, it is contemplated that the reporting by the cybersecurity sensor 120 1 may include a bundle of cybersecurity intelligence associated with a set of events (including the monitored event), which may include metadata collected by the cybersecurity sensor 120 1 that pertains to monitored event as well as other events that are related to (and different from) the monitored event and/or events in temporal proximity to the monitored event. This enhanced reporting allows the cybersecurity sensor 120 1 to provide greater context surrounding the monitored event for cybersecurity detection and prevention.
However, upon determining that the monitored event remains categorized as “distinct” across all (supported by the hub) cybersecurity sensors 120 1-120 M and corresponding endpoints 130 1-130 M (e.g., no portion of the hub-based metadata 185 matches the portion of the sensor-evaluated metadata 179), the cybersecurity intelligence hub 110 is configured to evaluate what enrichment services 190 are available to obtain a verdict for the monitored event. As shown in FIG. 1 , the cybersecurity intelligence hub 110 is communicatively coupled to the enrichment services 190, which include backend web services 192, third party web services 194, and/or an object analysis services 199, which may be a separate service or part of the backend web services 192.
The enrichment services 190 provide the cybersecurity intelligence hub 110 with access to additional cybersecurity analytics and cybersecurity intelligence using a push and/or pull communication scheme. In accordance with the selected scheme, cybersecurity intelligence may be provided (i) automatically, in a periodic or aperiodic manner, to the DMAE 115 of the cybersecurity intelligence hub 110 or (ii) responsive to a query initiated by the cybersecurity intelligence hub 110 requesting analytics or intelligence of the portion of sensor-based metadata 179. Although not shown, one embodiment of the cybersecurity intelligence hub 110 features one or more hardware processors, a non-transitory storage medium including the DMAE 115 to be executed by the processor(s), and the global data store 180.
As an illustrative example, the backend web services 192 may feature one or more servers that deliver cybersecurity intelligence. The cybersecurity intelligence may include, but is not limited or restricted to (i) incident investigation/response intelligence 193, (ii) forensic analysis intelligence 194 using machine-learning models, and/or (iii) analyst-based intelligence 195. More specifically, the incident investigation/response intelligence 193 may include cybersecurity intelligence gathered by cyber-attack incident investigators during analyses of successful attacks. This cybersecurity intelligence provides additional metadata that may identify the nature and source of a cyber-attack, how the identified malware gained entry on the network and/or into a particular network device connected to the network, history of the lateral spread of the malware during the cyber-attack, any remediation attempts conducted and the result of any attempts, and/or procedures to detect malware and prevent future attacks.
Likewise, the forensic analysis intelligence 194 may include cybersecurity intelligence gathered by forensic analysts or machine-learning driven forensic engines, which are used to formulate models for use in classifying an event, upon which a verdict (classification) of submitted metadata may be returned to the cybersecurity intelligence hub 110 for storage (or cross-reference) with the submitted metadata. The analyst-based intelligence 195 includes cybersecurity intelligence gathered by highly-trained cybersecurity analysts, who analyze malware to produce metadata directed to its structure and code characteristics that may be provided to the cybersecurity intelligence hub 110 for storage as part of the hub-stored metadata 185 within the global data store 180.
Similarly, the third party web services 196 may include cybersecurity intelligence 197 gathered from reporting agencies and other cybersecurity providers, which may be company, industry or government centric. The cybersecurity intelligence 197 may include black lists, white lists, and/or URL categorization. Also, attacker intelligence 198 may be available, namely cybersecurity intelligence gathered on known parties that initiate cyber-attacks. Such cybersecurity intelligence may be directed to who are the attackers (e.g., name, location, etc.), whether state-sponsored attackers as well as common tools, technique and procedures used by a particular attacker that provide a better understanding typical intent of the cyber-attacker (e.g., system disruption, information exfiltration, etc.), and the general severity of cyber-attacks initiated by a particular attacker.
Collectively, metadata received from the endpoints 130 1-130 M as well as cybersecurity intelligence from the enrichment services 190 may be stored and organized as part of the hub-stored metadata 185 within the global data store 180 searchable by an administrator via a user interface of a computer system (not shown) on an object basis, device basis, customer basis, time-basis, industry-basis, geographic-based, or the like.
The object analysis services 199 conducts malware detection operations on an object retrieved by the cybersecurity intelligence hub 110, which may be accessed when the hub-store metadata 185 of the global data set 180 fails to match the portion of the sensor-evaluated metadata 179 that distinctly represents the monitored event. Alternatively, the object analysis services 199 may be accessed where a portion of the hub-store metadata 185 matches the portion of the sensor-evaluated metadata 179, but the verdict within the matching portion of the hub-store metadata 185 is of an “unknown” classification. These malware detection operations may include, but are not limited or restricted to one or more static analyses (e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and exploit or vulnerability signature matching), one or more run-time behavioral analyses, and/or one or more event-based inspections using machine-learning models. Additionally, the DMAE 115 may also provide the object (or make the object available) to additional backend web services 192 and/or third party web services 196 that assist in the analysis of characteristics of the object (e.g., source, object name, etc.) to classify the object (and one or more events associated with the object).
With respect to the architecture of the cybersecurity intelligence hub 110, some or all of the cybersecurity intelligence hub 110 may be located at an enterprise's premises (e.g., located as any part of the enterprise's network infrastructure whether located at a single facility utilized by the enterprise or at a plurality of facilities and co-located with any or all of the sensors 120 1-120 N and/or endpoints 130 1-130 M). As an alternative embodiment, some or all of the cybersecurity intelligence hub 110 may be located outside the enterprise's network infrastructure, generally referred to as public or private cloud-based services that may be hosted by a cybersecurity provider or another entity separate from the enterprise (service customer). For example, one of these embodiments may be a “hybrid” deployment, where the cybersecurity intelligence hub 110 may include some logic partially located on premises and other logic located as part of a cloud-based service. This separation allows for sensitive cybersecurity intelligence (e.g., proprietary intelligence learned from subscribing customers, etc.) to remain on premises for compliance with any privacy and regulatory requirements.
A. General Architecture—Endpoint
Referring now to FIG. 2 , an exemplary embodiment of the endpoint 130 1 deployed within the comprehensive cybersecurity platform (CCP) 100 of FIG. 1 is shown. According to this embodiment of the disclosure, the endpoint 130 1 comprises a plurality of components, including one or more hardware processors 200 (referred to as “processor(s)”), a non-transitory storage medium 210, the local data store 160, and at least one communication interface 230. As illustrated, the endpoint 130 1 is a physical network device, and as such, these components are at least partially encased in a housing 240, which may be made entirely or partially of a rigid material (e.g., hard plastic, metal, glass, composites, or any combination thereof) that protects these components from environmental conditions.
The hardware processor(s) 200 is a multi-purpose, processing component that is configured to execute logic 250 maintained within the non-transitory storage medium 210 operating as a memory. One example of processor 200 includes an Intel® central processing unit (CPU) based on an x86 architecture and instruction set. Alternatively, processor(s) 200 may include another type of CPU, a digital signal processor, an Application Specific Integrated Circuit (ASIC), a field-programmable gate array, or any other hardware component with data processing capability.
The local data store 160 may include non-volatile memory to maintain metadata associated with prior evaluated events in accordance with a prescribed storage policy (e.g., cache validation policy). The prescribed storage policy features a plurality of rules that are used to determine entry replacement and/or validation, which may impact the categorization of a detected, monitored event as “distinct” or not.
The communication interface 230 may be configured as an interface to receive the object 260 via any communication medium. For instance, the communication interface 230 may be network adapter to receive the object 260 via a network, an input/output (TO) connector to receive the object 260 from a dedicated storage device, or a wireless adapter to receive the object via a wireless communication medium (e.g., IEEE 802.11 type standard, Bluetooth™ standard, etc.). The agent 135 1 may be configured to monitor, perhaps on a continuous basis when deployed as daemon software, for particular events or particular types of events occurring during operation of the endpoint 130 1. Upon detecting a monitored event, the agent 135 1 is configured to determine whether the monitored event is “distinct,” as described herein.
In some situations, monitored events may be detected during execution of the object 260 or processing of the object 260 using a stored application 270, while in other situations, the monitored events may be detected during endpoint operations (e.g., logon, attempted network connection, etc.). From these events, the agent 135 1 may rely on the stored application 270, one or more operating system (OS) components 275, and/or one or more software driver(s) 280 to assist in collecting metadata associated with the detected, monitored event. When the agent 135 1 determines the monitored event is “distinct,” the collected metadata may be included as part of a submission 290 provided to the cybersecurity sensor 120 1 of FIG. 1 .
Referring now to FIG. 3 , an exemplary embodiment of the logical architecture of the agent 135 1 of FIG. 2 is shown. The agent 135 1 includes event monitoring logic 300, a timestamp generation logic 310, metadata generation logic 320, deduplication logic 330 and count incrementing logic 340. The above-identified logic 300-340 operate in combination to detect an event and determine whether the event is categorized as “distinct” to cause metadata associated with the monitored event to be directed to the cybersecurity sensor 120 1 and/or the central intelligence hub 110 for further evaluation. As optional logic, the agent 135 1 may include event analysis logic 350 to perform a preliminary analysis of the event in an attempt to determine whether the event is malicious, benign or suspicious (i.e., unable to definitively confirm the benign or malicious classification of the event). The preliminary analysis may include, but are not limited or restricted to one or more static analyses (e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and/or signature matching).
B. Endpoint Communications
Referring now to FIG. 4A , an exemplary flowchart of the operations performed by the agent 135 1 referencing the logic of the agent 135 1 illustrated in FIG. 3 is shown. Herein, the event monitoring logic 300 is configured to monitor for selected events where the monitored events may be set as those events that have a higher tendency of being associated with a cyber-attack (see block 400 of FIG. 4A ). As described above, examples of these monitored events may be categorized as (i) an execution event being a task or activity performed by a process, which may manipulate an object (e.g., opening, or writing closing to a file) or creating new processes; (ii) network event being an activity involving establishing or maintaining network connectivity to a network device (e.g., an attempted network connection, etc.); or an “operation event” directed to endpoint operability such as a Domain Name System (DNS) lookup or a logon or logoff operation.
After detecting a monitored event by the event monitoring logic 300, the timestamp generation logic 310 generates a timestamp, included as part of the collected metadata 150, to identify a detection time for the monitored event (see blocks 405-410 of FIG. 4A ). The timestamp may be utilized as a search index (notably when the event is determined to be distinct and the metadata associated with the event is stored within the local data store 320 of the cybersecurity sensor 120 or the global data store 180 of the cybersecurity intelligence hub 110). Additionally, or in the alternative, the timestamp may be utilized to maintain currency of the metadata associated with the events stored within the local data store 320 and the global data store 180 to allow for replacement and/or validation of “stale” metadata.
Referring still to FIGS. 2-3 and FIG. 4A , the metadata generation logic 320 collects, by gathering and generating, the metadata 150 being associated with the monitored event (see block 415 of FIG. 4A ). The monitored event type, detected by the monitoring detection logic 300, may be used in determining, at least in part, the metadata to be collected, especially the distinctive metadata 151 (see block 420 of FIG. 4A ). For instance, as an illustrative embodiment, where the monitored event is an execution event such as an open file command for example, the metadata generation logic 320 controls collection of metadata associated with this execution event and forms a data structure for the collected metadata 150. As an illustrative example, the data structure may include (i) a pointer to a file path providing access to the file, (ii) a file identifier (e.g., a hash value or checksum generated upon retrieval of the file via the file path), (iii) a name of the file, (iv) a creation date or other properties of the file, and/or (v) the name of the process initiating the open file command. With respect to the collected metadata 150 associated with the execution event, the distinctive metadata 151 may be represented by a portion of a data structure forming the collected metadata 150, namely (i) a first field including the file path and (ii) a second field including the file identifier.
Similarly, as another illustrative example, where the monitored event is an network event such as an attempted network connection for example, the metadata generation logic 320 controls collection of metadata directed to port and addressing information, including at least (i) a source address such as a source Internet Protocol (IP) address (“SRC_IP”); (ii) a destination address such as a destination IP address (“DEST_IP”); (iii) a destination port (“DEST_PORT”); (iv) a source port for the network connection (“SRC_PORT”); and/or (v) attempted connect time. Hence, from this collected metadata 150 associated with this network event, the distinctive metadata 151 may be represented by a data structure including at least (i) a first field including the SRC_IP, (ii) a second field including the DEST_IP, and (iii) a third field including the DEST_PORT for the attempted network connection.
Lastly, as another illustrative example, where the monitored event is an operation event, such as a logon for example, the agent collects metadata associated with this logon event, including at least (i) the username; (ii) logon type (e.g., remote, on premise); (iii) time of logon; and (iv) user account information. Hence, the collected metadata 150 associated with the operation event may be represented by a data structure including at least the distinctive metadata 151 identified above.
After the collected metadata 150 has been gathered and generated by the metadata generation logic 320, the deduplication logic 330 conducts an analysis of the monitored event to determine whether or not the monitored event is “distinct.” (see blocks 420-440 of FIG. 4A ). According to one embodiment of the disclosure, the deduplication logic 330 analyzes the endpoint-stored metadata 165 for a presence of the distinctive metadata 151 while taking into account the prescribed storage (caching) policy of the local data store 160.
More specifically, the deduplication logic 330 determines the distinctive metadata 151 associated with the collected metadata 150 based on the monitored event type (see block 420 of FIG. 4A ). Thereafter, the deduplication logic 330 determines whether the distinctive metadata (representing the monitored event) is stored within one or more portions of the endpoint-stored metadata 165, where such storage is in compliance with prescribed storage policy of the local data store 160 (see blocks 425-440 of FIG. 4A ). This determination may involve comparing the distinctive metadata 151 to one or more portions of the endpoint-stored metadata 165 within an entry of the endpoint's local data store 160 (see block 425 of FIG. 4A ). For this comparison, when a match is not detected, the deduplication logic 330 continues such comparisons until all entries of the endpoint's local data store have been analyzed (see blocks 430-440 of FIG. 4A ). Although not illustrated, it is contemplated that the deduplication logic 330 may further confirm that storage of the portion of the endpoint-stored metadata 165 is in compliance with storage policy and evaluate the count for an entry including a portion of endpoint-stored metadata that matches the distinctive metadata. When the count exceeds a prescribed threshold within a prescribed time window, the deduplication logic 330 may circumvent its finding and identify the collected metadata 150 as “distinct” in order to transmit the collected metadata to the cybersecurity sensor 120 1 for further analysis, as repeated activity may signify a cyber-attack.
Referring now to FIG. 3 and FIG. 4B , in response to detecting a match between the distinctive metadata 151 and a portion of the endpoint-stored metadata 165 within an entry of the local data store, the count incrementing logic 340 of the agent increments a count associated with the entry (see block 450 of FIG. 4B ). Although not illustrated, the count is used to monitor repetitious events and allows the deduplication logic 330 to circumvent any “indistinct” categorization to initiate an immediate submission including metadata directed to this type of activity.
Thereafter, the verdict associated with the matching endpoint-stored metadata is determined (see block 455 of FIG. 4B ). Where the deduplication logic 330 determines that the verdict is a malicious classification, the agent 135 1 may report the presence of a malicious event and/or may provide the malicious event (or an object associated with the malicious event) for subsequent malware analysis (see blocks 460-465 of FIG. 4B ). However, if the deduplication logic 330 determines that the verdict to be an “unknown” classification, the deduplication logic 330 may submit the monitored event (or an object associated with the monitored event) for subsequent analysis (see blocks 470-475 of FIG. 4B ). Lastly, upon determining that the verdict is of a “benign” classification, the deduplication logic 330 may halt further analysis of the monitored event.
When the monitored event is categorized as “distinct,” the collected metadata is prepared to be provided to the cybersecurity sensor (see block 480 of FIG. 4B ). Furthermore, additional metadata may be optionally collected to accompany the collected metadata when provided to the cybersecurity sensor 120 1 (see block 485 of FIG. 4B ). As described above, the additional metadata may include characteristics of the operating environment from which the collected metadata 150 or other types of metadata that may be useful in providing additional context surrounding the occurrence of the monitored event. The agent-evaluated metadata, namely the collected metadata 150 with the optional additional metadata 152, is provided as a submission to the cybersecurity sensor 120 1 supporting the endpoint 130 1 for further analysis (block 490).
A. General Architecture—Cybersecurity Sensor
Referring now to FIG. 5 , an exemplary embodiment of the cybersecurity sensor 120 1 deployed within the comprehensive cybersecurity platform (CCP) 100 of FIG. 1 is shown. According to one embodiment of the disclosure, the cybersecurity sensor 120 1 comprises a plurality of components, which include one or more hardware processors 500 (referred to as “processor(s)”), a non-transitory storage medium 510, the second data store 170, and one or more communication interfaces (e.g., interfaces 520 and 525). As illustrated, the cybersecurity sensor 120 1 is a physical network device, and as such, these components are at least partially encased in a housing 530, which may be made entirely or partially of a rigid material (e.g., hard plastic, metal, glass, composites, or any combination thereof) that protects these components from environmental conditions.
Herein, the hardware processor(s) 500 is a multi-purpose, processing component that is configured to execute logic 540 maintained within the non-transitory storage medium 510 operating as a memory. Operating as a non-volatile memory, the non-transitory storage medium 510 provides storage for the logic 540, which includes metadata extraction logic 550, metadata inspection logic 555, deduplication logic 560, metadata management logic 565, notification logic 570, and/or count incrementing logic 575.
More specifically, executed by the processor(s) 500, the logic 540 is configured to (i) obtain the agent-evaluated metadata 155 from the submission 290 (extraction logic 550); (ii) determine distinctive metadata from the agent-evaluated metadata 155 and collect additional metadata based on processing of the agent-evaluated metadata 155 within the cybersecurity sensor 120 1 (metadata inspection logic 555); (iii) determine whether a monitored event associated with the distinctive metadata is categorized as “distinct” based on comparison of sensor-stored metadata produced across all endpoints supported by the cybersecurity sensor 120 1, and thus, should be provided to the cybersecurity intelligence hub 110 of FIG. 1 (deduplication logic 560); (iv) manage storage within the data store 170 (metadata management logic 565); (v) generate and coordinate transmission of alerts upon detection of malicious events and/or objects (notification logic 570); and/or (vi) increment a count associated with one or more entries of the data store 170 including sensor-based metadata that matches the distinctive metadata under analysis (count incrementing logic 575).
As optional logic, the cybersecurity sensor 120 1 may include a content analysis logic 580 to perform a detailed analysis of the event (or a subsequently fetched object) in an attempt to determine whether the event (or object) is malicious or benign. The operations of the content analysis logic 580 may be performed in parallel with the event analysis operations performed by the logic 540. The content analysis logic 580 may perform the following analyses including, but are not limited or restricted to one or more of the following: static analyses (e.g., anti-virus, anti-spam scanning, pattern matching, heuristics, and/or signature matching), one or more run-time behavioral analyses, and/or one or more event-based inspections using machine-learning models.
Under control by the metadata management logic 565, the data store 170 may be configured to maintain (e.g., store) the sensor-stored metadata uploaded from the plurality of agents 135 1-135 3 as shown or other cybersecurity intelligence downloaded from other sources (including the cybersecurity intelligence hub 110). The data store 170, deployed as non-volatile memory, maintains the sensor-based metadata 175 associated with prior evaluated event by the sensor 120 1 in accordance with a prescribed storage policy utilized by the data store 170. The data store 170 is further configured to maintain (i) the agent-evaluated metadata 155 received via the submission 290 and (ii) the additional metadata 177 created prior to and/or during operations conducted by the deduplication logic 560.
Additionally, the data store 170 may be configured with one or more mapping tables to maintain relationships between incoming and outgoing data. For instance, one exemplary mapping table may include a metadata-to-object (M-O) mapping table 590 to retain a correspondence between the agent-evaluated metadata 155 and its corresponding object (if requested by the cybersecurity intelligence hub). Another exemplary mapping table may include a source-to-metadata (SRC-Meta) mapping table 595 to retain correspondence between the agent-evaluated metadata 155 and/or sensor-evaluated metadata 179 and its originating source (e.g., IP address of the endpoint 130 1). It is contemplated that a table should be broadly construed as any storage structure that provides an association between stored data, inclusive of relational databases or the like.
The communication interface 520 may be configured to receive the agent-evaluated metadata 155. For instance, the communication interface 520 may include a network-based connector to receive the submission 290 via a network, and/or an input/output (TO) connector to provide security administrator controlled access to the cybersecurity sensor 120 1 to update any of the logic 540. Likewise, the communication interface 525 may be configured to provide the sensor-evaluated metadata 179 to the cybersecurity intelligence hub 110 of FIG. 1 and receive verdict and/or metadata (e.g., hub-stored metadata, etc.) from the cybersecurity intelligence hub 110.
In an alternative virtual device deployment, however, the cybersecurity sensor 120 1 may be implemented entirely as software that may be loaded into a network device and operated in cooperation with an operating system (OS) running on that device. For this implementation, the architecture of the software-based cybersecurity sensor 120 1 includes software modules that, when executed by the processor, perform functions directed to functionality of logic 540 illustrated within the storage medium 510, as described herein.
B. Cybersecurity Sensor Communications
Referring now to FIGS. 6A-6B , an exemplary flowchart of the operations performed by the cybersecurity sensor 120 1 of FIG. 1 in handling a distinct monitored event submission from the endpoint 130 1 (referencing the logic of the cybersecurity sensor 120 1 illustrated in FIG. 5 ) is shown. After receipt of an incoming submission (metadata extraction logic 550), a determination is made if the submission is provided from either one of a plurality of endpoints supported by the cybersecurity sensor 120 1 or the cybersecurity intelligence hub 110 (see blocks 600-605 of FIG. 6A ). Upon determining that the submission is from an endpoint (e.g., endpoint 130 1 of FIG. 1 ), an analysis of the monitored event (represented by the agent-evaluated metadata) is conducted to determine whether or not the monitored event is “distinct.” (see blocks 610-630 of FIG. 6A ).
According to one embodiment of the disclosure, an analysis of the sensor-stored metadata within the data store is conducted by the metadata inspection logic 555 for a presence of distinctive metadata from the agent-evaluated metadata, taking into account the prescribed storage (caching) policy of the data store. More specifically, a determination is made to identify the distinctive metadata within the agent-evaluated metadata (see block 610 of FIG. 6A ). This determination is based, at least in part, on identifying the monitored event type. Thereafter, a comparison is conducted by the deduplication logic 560 between the distinctive metadata (representing the monitored event) and one or more portions of the sensor-stored metadata (see blocks 615-630 of FIG. 6A ). This determination may involve comparing the distinctive metadata to one or more portions of the server-stored metadata within an entry of the sensor's data store (see block 615 of FIG. 6A ). When a match is not detected, additional comparisons may be performed between portions of the sensor-stored metadata within other entries of the sensor's data store until either a match is detected or sensor-stored metadata within all of the entries of the sensor's data store have been analyzed (see blocks 620-630 of FIG. 6A ).
Where a match is detected, a count associated with the entry within the data store storing the matching sensor-based metadata is incremented (see block 635 of FIG. 6B ). As stated above, the count may be used to identify a potential cyber-attack, which may prompt providing the sensor-evaluated metadata associated with the repetitive monitored event being received from different agents to the cybersecurity intelligence hub for future analysis.
A verdict associated with the matching sensor-stored metadata is obtained and determined to be the verdict for the monitored event (see block 640 of FIG. 6B ). Where the verdict is a “malicious” classification, an alert is generated and issued to one or more security administrators (e.g., security administrator(s) for an enterprise network including the endpoint (see blocks 645 and 650 of FIG. 6B ). Herein, the alert includes enriched metadata collected across all of the endpoints supported by the cybersecurity sensor, including the matching portion of the sensor-based metadata, the agent-evaluated metadata and optionally any additional metadata gathered or generated by the cybersecurity sensor and/or cybersecurity intelligence hub that may provide additional context information to the security administrator.
Upon determining that the verdict is of a “benign” classification, the cybersecurity sensor 120 1 may halt further analysis of the monitored event (see operation 655 of FIG. 6B ). However, upon determining that the verdict is an “unknown” classification (see block 660 of FIG. 6B ), the cybersecurity sensor 120 1 may communicate with the cybersecurity intelligence hub to resolve the verdict (e.g., determine if a known verdict (benign, malicious) is currently stored in the global data store or may be obtained by the cybersecurity intelligence hub with assistance from the enrichment services as described below). Additionally, or in the alternative, the cybersecurity sensor may perform malware analyses on at least a portion of the agent-evaluated metadata to determine whether such analyses may enable a definitive classification (malicious or benign) to be set (see block 665 of FIG. 6B ).
However, where no match between the distinctive metadata and the sensor-based metadata within the sensor's data store, the agent-evaluated metadata is prepared to be provided to the cybersecurity intelligence hub (see block 670 of FIG. 6B ). Furthermore, additional metadata may be collected to accompany the agent-evaluated metadata provided to the cybersecurity intelligence hub (see block 675 of FIG. 6B ). As described above, the additional metadata may include characteristics of the operating environment of the cybersecurity sensor 120 1 along with additional metadata received from other agents that may be useful in providing further additional context surrounding the monitored event. The sensor-evaluated metadata, namely the agent-evaluated metadata 155 with optional additional metadata 177 forming the sensor-evaluated metadata 179, is provided as a submission to the cybersecurity intelligence hub for further analysis (see block 680 of FIG. 6B ).
Referring back to FIG. 6A , where the incoming submission is provided from the cybersecurity intelligence hub, a determination is made whether the incoming submission is a response to a prior submission by the sensor such as a submission including sensor-evaluated metadata representing a prior monitored event that was distinct to the sensor (see blocks 685 and 690 of FIG. 6A ). If so, the entry within the sensor's data store including the metadata associated with the prior submission is located and updated with metadata provided from the cybersecurity intelligence hub (see block 692 of FIG. 6A ). However, where the incoming submission is not a response to a prior submission by the sensor, a new entry is created within the sensor's data store (see block 694 of FIG. 6A ). After updating or modifying the sensor's data store, the cybersecurity sensor may conduct an analysis of the returned metadata, including a verdict analysis as illustrated in FIG. 6B .
Referring to FIGS. 7A-7B , an exemplary flowchart of the operations performed by the cybersecurity intelligence hub 110 of FIG. 1 during interactions with the cybersecurity sensor 120 1 is shown. Upon receipt of a submission, an analysis of the monitored event (represented by the sensor-evaluated metadata) is uncover the distinctive metadata (see blocks 700 and 705 of FIG. 7A ). More specifically, according to one embodiment of the disclosure, the sensor-based metadata is obtained from the submission and the distinctive metadata is recovered from the sensor-based metadata. Where the monitored event is associated with an object, the distinctive metadata may be a hash value of an object associated with the monitored event. Thereafter, a determination is made (by the DMAE 115 of the cybersecurity intelligence hub 110) whether the distinctive metadata is stored within one or more portions of hub-stored metadata within the global data store (see blocks 715-725 of FIG. 7A ). This determination may involve an iterative comparison of the distinctive metadata to portions of the hub-stored metadata within entries of the global data store 180 to determine if a match is detected.
In response to a match being detected from this comparison, where the global data store is deployed with a similar count-monitoring scheme described above and optionally deployed within the endpoint 130 1 and/or cybersecurity sensor 120 1 of FIG. 1 , a count associated with the entry within the global data store storing the matching hub-based metadata may be incremented (see block 730 of FIG. 7B ). Thereafter, the verdict associated with the matching sensor-stored metadata is determined (see block 735 of FIG. 7B ). Where the verdict is determined to be a “unknown” classification, the DMAE 115 accesses the enrichment services (see block 740 of FIG. 7B ) in efforts to determine whether such resources identifies a verdict for the monitored event (see block 745 of FIG. 7B ). If so, the entry of the global data store is updated and the hub-stored metadata is provided to the requesting cybersecurity sensor (see block 750 of FIG. 7B ).
However, in response to the distinctive metadata failing to match the hub-stored metadata or the DMAE being unable to secure an updated verdict for an entry with a currently unknown verdict, the DMAE generates a request for an object associated with the monitored event (e.g., file) and issues a request message to the requesting cybersecurity sensor to acquire the object from the agent that originated the agent-evaluated metadata used in forming the sensor-evaluated metadata provided to the cybersecurity intelligence hub (see blocks 755 and 760 of FIG. 7B ). Upon receipt of the object, the DMAE submits the object to the object analysis services to analyze and return a verdict associated with the object (see blocks 765 and 770 of FIG. 7B ). Upon receipt of the verdict, the entry of the global data store is updated and the hub-stored metadata is provided to the requesting cybersecurity sensor (see block 750 of FIG. 7B ).
In the foregoing description, the invention is described with reference to specific exemplary embodiments thereof. However, it will be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. For example, while the invention has been described in conjunction with a cybersecurity mechanism, these principles can also be used in any analysis of large volumes of data in which a verdict is sought such as characterizing the data. In conjunction, while the case has been described in terms of verdicts, other verdicts within the cybersecurity field are possible such as cyber-attack type, etc.
Claims (20)
1. An endpoint comprising:
one or more processors; and
a non-transitory storage medium coupled to the one or more processors, the non-transitory storage medium comprises an agent stored within the non-transitory storage medium and executed by the one or more processors, the agent including
(i) event monitoring logic that, when executed by the one or more processors, monitors for one or more types of events being performed on the endpoint,
(ii) metadata logic that, when executed by the one or more processors, is configured to collect metadata associated with a monitored event of the one or more event types being monitored,
(iii) timestamp generation logic configured to generate a timestamp associated with detection of the monitored event and the timestamp being stored as part of the collected metadata,
(iv) deduplication logic that, when executed by the one or more processors, is configured to conduct a first determination as to whether the monitored event is distinct among events monitored by the event monitoring logic by at least comparing a portion of the collected metadata to prior collected metadata, and
(v) count incrementing logic, when executed by the one or more processors and responsive to the deduplication logic determining that the portion of the collected metadata matches a corresponding portion of metadata associated with the monitored event, is configured to set a count identifying a number of occurrences of the monitored event that can prompt the deduplication logic to categorize the monitored event as distinct,
wherein, when the monitored event is categorized as distinct, the deduplication logic to provide at least the portion of the collected metadata to a cybersecurity sensor to conduct a second determination as to whether the monitored event is distinct across events being monitored by a plurality of endpoints including the endpoint.
2. The endpoint of claim 1 , wherein the deduplication logic of the agent is configured to conduct the first determination that includes comparing the portion of the collected metadata to metadata associated with events monitored by the event monitoring logic including the corresponding portion of metadata, the monitored event being categorized as distinct when a level of correlation between the portion of the collected metadata to the corresponding portion of metadata falls below a prescribed correlation threshold.
3. The endpoint of claim 2 , wherein the portion of the collected metadata comprises an identifier of an object being referenced by a process executed by the endpoint and a path identifying a storage location of the object.
4. The endpoint of claim 3 , wherein responsive to the agent detecting the monitored event being a network connection attempted by the endpoint, the portion of the collected metadata comprises a destination address associated with the network connection, a source address associated with the network connection, and a destination port associated with the network connection.
5. The endpoint of claim 1 , wherein the deduplication logic, upon detecting that a number of occurrences of the monitored event exceeding a prescribed threshold during a prescribed time window, is configured to determine that the monitored event is distinct regardless of a presence of the portion of the metadata representing that a prior evaluated event corresponding to the monitored event has been previously detected.
6. The endpoint of claim 1 , wherein the agent being configured to provide additional metadata associated with the monitored event to accompany the collected metadata being provided to the cybersecurity sensor, the additional metadata including characteristics of an operating environment of the endpoint.
7. The endpoint of claim 1 being communicatively coupled to the cybersecurity sensor, the cybersecurity sensor comprises (i) a data store, (ii) metadata inspection logic to determine distinctive metadata being a portion of the collected metadata, representing the monitored event and distinguishing the endpoint from remaining endpoints of the plurality of endpoints, and (iii) a second deduplication logic to (a) determine whether the monitored event associated with the distinctive metadata is categorized as distinct based on metadata associated with events being monitored by all of the plurality of endpoints, and (b) provide at least the collected metadata to a cybersecurity intelligence hub upon determining that the monitored event is distinct across the plurality of endpoints while refraining from providing the collected metadata to the cybersecurity intelligence hub unless the monitored event is determined to be distinct, the cybersecurity intelligence hub classifies the monitored event as malicious or benign.
8. The endpoint of claim 1 being communicatively coupled to the cybersecurity sensor, the cybersecurity sensor comprises (i) a data store, and (ii) a second deduplication logic to (a) determine whether the monitored event associated with the distinctive metadata is categorized as distinct across events being monitored and detected by the one or more endpoints and stored within the data store, and (b) return a verdict to the first endpoint upon detecting, by the cybersecurity sensor, that the portion of the collected metadata matches a portion of the metadata associated with a prior evaluated event corresponding to the monitored event being stored within the data store, the verdict being part of the portion of the metadata stored within the local data store and representing a classification for the monitored event.
9. The endpoint of claim 8 , wherein the verdict being one of a malicious classification or a benign classification.
10. The endpoint of claim 1 being communicatively coupled to the cybersecurity sensor, the cybersecurity sensor comprises notification logic to issue an alert in response to (i) detecting that metadata, provided from the agent and including the collected metadata, matches a portion of the metadata associated with a prior evaluated event that is received from the plurality of endpoints other than the endpoint and (ii) determining that the portion of the metadata includes data that classifies the prior evaluated event as a malicious event.
11. The endpoint of claim 10 , wherein the alert being configured to initiate another remediation technique or conduct additional analytics on the metadata.
12. An endpoint comprising:
one or more processors; and
a non-transitory storage medium coupled to the one or more processors, the non-transitory storage medium comprises an agent, the agent including
(i) event monitoring logic that, when executed by the one or more processors, monitors for one or more types of events being performed on the endpoint,
(ii) metadata logic that, when executed by the one or more processors, is configured to collect metadata associated with a monitored event of the one or more event types being monitored,
(iii) deduplication logic that, when executed by the one or more processors, is configured to conduct a first determination as to whether the monitored event is distinct among events monitored by the event monitoring logic by at least comparing a portion of the collected metadata to prior collected metadata, wherein the deduplication logic, upon detecting that a number of occurrences of the monitored event exceeding a prescribed threshold during a prescribed time window, is configured to determine that the monitored event is distinct regardless of a presence of the portion of the metadata representing that a prior evaluated event corresponding to the monitored event has been previously detected, and
(iv) count incrementing logic, when executed by the one or more processors and responsive to the deduplication logic determining that the portion of the collected metadata matches a corresponding portion of metadata associated with the monitored event, is configured to set a count identifying a number of occurrences of the monitored event that can prompt the deduplication logic to categorize the monitored event as distinct,
wherein, when the monitored event is categorized as distinct, the deduplication logic to provide at least the portion of the collected metadata to a cybersecurity sensor to conduct a second determination as to whether the monitored event is distinct across events being monitored by a plurality of endpoints including the endpoint.
13. The endpoint of claim 12 , wherein the deduplication logic of the agent is configured to conduct the first determination that includes comparing the portion of the collected metadata to metadata associated with events monitored by the event monitoring logic including the corresponding portion of metadata, the monitored event being categorized as distinct when a level of correlation between the portion of the collected metadata to the corresponding portion of metadata falls below a prescribed correlation threshold.
14. The endpoint of claim 13 , wherein the portion of the collected metadata comprises an identifier of an object being referenced by a process executed by the endpoint and a path identifying a storage location of the object.
15. The endpoint of claim 14 , wherein responsive to the agent detecting the monitored event being a network connection attempted by the endpoint, the portion of the collected metadata comprises a destination address associated with the network connection, a source address associated with the network connection, and a destination port associated with the network connection.
16. The endpoint of claim 12 , wherein the agent stored within the non-transitory storage medium and executed by the one or more processors, further comprising:
timestamp generation logic configured to generate a timestamp associated with detection of the monitored event and the timestamp being stored as part of the collected metadata.
17. The endpoint of claim 12 , wherein the agent being configured to provide additional metadata associated with the monitored event to accompany the collected metadata being provided to the cybersecurity sensor, the additional metadata including characteristics of an operating environment of the endpoint.
18. The endpoint of claim 12 being communicatively coupled to the cybersecurity sensor, the cybersecurity sensor comprises (i) a data store, (ii) metadata inspection logic to determine distinctive metadata being a portion of the collected metadata, representing the monitored event and distinguishing the endpoint from remaining endpoints of the plurality of endpoints, and (iii) a second deduplication logic to (a) determine whether the monitored event associated with the distinctive metadata is categorized as distinct based on metadata associated with events being monitored by all of the plurality of endpoints, and (b) provide at least the collected metadata to a cybersecurity intelligence hub upon determining that the monitored event is distinct across the plurality of endpoints while refraining from providing the collected metadata to the cybersecurity intelligence hub unless the monitored event is determined to be distinct, the cybersecurity intelligence hub classifies the monitored event as malicious or benign.
19. The endpoint of claim 12 being communicatively coupled to the cybersecurity sensor, the cybersecurity sensor comprises (i) a data store, and (ii) a second deduplication logic to (a) determine whether the monitored event associated with the distinctive metadata is categorized as distinct across events being monitored and detected by the one or more endpoints and stored within the data store, and (b) return a verdict to the first endpoint upon detecting, by the cybersecurity sensor, that the portion of the collected metadata matches a portion of the metadata associated with a prior evaluated event corresponding to the monitored event being stored within the data store, the verdict being part of the portion of the metadata stored within the local data store and representing a classification for the monitored event.
20. The endpoint of claim 12 being communicatively coupled to the cybersecurity sensor, the cybersecurity sensor comprises notification logic to issue an alert in response to (i) detecting that metadata, provided from the agent and including the collected metadata, matches a portion of the metadata associated with a prior evaluated event that is received from the plurality of endpoints other than the endpoint and (ii) determining that the portion of the metadata includes data that classifies the prior evaluated event as a malicious event.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/316,634 US11949692B1 (en) | 2017-12-28 | 2021-05-10 | Method and system for efficient cybersecurity analysis of endpoint events |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/857,467 US11005860B1 (en) | 2017-12-28 | 2017-12-28 | Method and system for efficient cybersecurity analysis of endpoint events |
US17/316,634 US11949692B1 (en) | 2017-12-28 | 2021-05-10 | Method and system for efficient cybersecurity analysis of endpoint events |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/857,467 Continuation US11005860B1 (en) | 2017-12-28 | 2017-12-28 | Method and system for efficient cybersecurity analysis of endpoint events |
Publications (1)
Publication Number | Publication Date |
---|---|
US11949692B1 true US11949692B1 (en) | 2024-04-02 |
Family
ID=75846074
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/857,467 Active 2038-09-08 US11005860B1 (en) | 2017-12-28 | 2017-12-28 | Method and system for efficient cybersecurity analysis of endpoint events |
US17/316,634 Active US11949692B1 (en) | 2017-12-28 | 2021-05-10 | Method and system for efficient cybersecurity analysis of endpoint events |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/857,467 Active 2038-09-08 US11005860B1 (en) | 2017-12-28 | 2017-12-28 | Method and system for efficient cybersecurity analysis of endpoint events |
Country Status (1)
Country | Link |
---|---|
US (2) | US11005860B1 (en) |
Families Citing this family (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200106787A1 (en) * | 2018-10-01 | 2020-04-02 | Global Data Sentinel, Inc. | Data management operating system (dmos) analysis server for detecting and remediating cybersecurity threats |
US11601352B2 (en) * | 2019-02-21 | 2023-03-07 | Sandvine Corporation | System and method for providing a network traffic portal |
US11201800B2 (en) * | 2019-04-03 | 2021-12-14 | Cisco Technology, Inc. | On-path dynamic policy enforcement and endpoint-aware policy enforcement for endpoints |
US11341090B2 (en) * | 2019-09-26 | 2022-05-24 | American Express Travel Related Services Company, Inc. | Seamless data movement and metadata management in a hybrid cloud setting using a configurable micro services based architecture |
US20210110032A1 (en) * | 2019-10-09 | 2021-04-15 | Jpmorgan Chase Bank, N.A. | Systems and methods for providing a cyber investigative pipeline |
US11615184B2 (en) | 2020-01-31 | 2023-03-28 | Palo Alto Networks, Inc. | Building multi-representational learning models for static analysis of source code |
US11550911B2 (en) * | 2020-01-31 | 2023-01-10 | Palo Alto Networks, Inc. | Multi-representational learning models for static analysis of source code |
US11736496B2 (en) * | 2020-02-17 | 2023-08-22 | Avanan, Inc. | Responsive actions to suspicious e-mail, as inferred from negative user assessment, by third party security systems without modification of existing e-mail clients |
US11836265B2 (en) * | 2020-03-02 | 2023-12-05 | Forcepoint Llc | Type-dependent event deduplication |
US11734431B2 (en) * | 2020-04-27 | 2023-08-22 | Saudi Arabian Oil Company | Method and system for assessing effectiveness of cybersecurity controls in an OT environment |
US20230107209A1 (en) * | 2021-10-06 | 2023-04-06 | AVAST Software s.r.o. | Reducing malware signature redundancy |
CN114143169A (en) * | 2021-11-24 | 2022-03-04 | 浙江大学 | Micro-service application observability system |
US11941121B2 (en) * | 2021-12-28 | 2024-03-26 | Uab 360 It | Systems and methods for detecting malware using static and dynamic malware models |
US11841945B1 (en) | 2022-01-31 | 2023-12-12 | Wiz, Inc. | System and method for cybersecurity threat detection utilizing static and runtime data |
US20240070268A1 (en) * | 2022-08-23 | 2024-02-29 | Bitdefender IPR Management Ltd. | Aggregate Event Profiles for Detecting Malicious Mobile Applications |
Citations (543)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4292580A (en) | 1978-11-30 | 1981-09-29 | Siemens Aktiengesellschaft | Circuit arrangement for attenuation of power oscillations in networks |
US5175732A (en) | 1991-02-15 | 1992-12-29 | Standard Microsystems Corp. | Method and apparatus for controlling data communication operations within stations of a local-area network |
US5319776A (en) | 1990-04-19 | 1994-06-07 | Hilgraeve Corporation | In transit detection of computer virus with safeguard |
US5440723A (en) | 1993-01-19 | 1995-08-08 | International Business Machines Corporation | Automatic immune system for computers and computer networks |
US5490249A (en) | 1992-12-23 | 1996-02-06 | Taligent, Inc. | Automated testing system |
US5657473A (en) | 1990-02-21 | 1997-08-12 | Arendee Limited | Method and apparatus for controlling access to and corruption of information in computer systems |
US5802277A (en) | 1995-07-31 | 1998-09-01 | International Business Machines Corporation | Virus protection in computer systems |
US5842002A (en) | 1994-06-01 | 1998-11-24 | Quantum Leap Innovations, Inc. | Computer virus trap |
US5960170A (en) | 1997-03-18 | 1999-09-28 | Trend Micro, Inc. | Event triggered iterative virus detection |
US5978917A (en) | 1997-08-14 | 1999-11-02 | Symantec Corporation | Detection and elimination of macro viruses |
US5983348A (en) | 1997-09-10 | 1999-11-09 | Trend Micro Incorporated | Computer network malicious code scanner |
US6088803A (en) | 1997-12-30 | 2000-07-11 | Intel Corporation | System for virus-checking network data during download to a client device |
US6092194A (en) | 1996-11-08 | 2000-07-18 | Finjan Software, Ltd. | System and method for protecting a computer and a network from hostile downloadables |
US6094677A (en) | 1997-05-30 | 2000-07-25 | International Business Machines Corporation | Methods, systems and computer program products for providing insertions during delays in interactive systems |
US6108799A (en) | 1997-11-21 | 2000-08-22 | International Business Machines Corporation | Automated sample creation of polymorphic and non-polymorphic marcro viruses |
US6154844A (en) | 1996-11-08 | 2000-11-28 | Finjan Software, Ltd. | System and method for attaching a downloadable security profile to a downloadable |
US20010005889A1 (en) | 1999-12-24 | 2001-06-28 | F-Secure Oyj | Remote computer virus scanning |
US6269330B1 (en) | 1997-10-07 | 2001-07-31 | Attune Networks Ltd. | Fault location and performance testing of communication networks |
US6279113B1 (en) | 1998-03-16 | 2001-08-21 | Internet Tools, Inc. | Dynamic signature inspection-based network intrusion detection |
US6298445B1 (en) | 1998-04-30 | 2001-10-02 | Netect, Ltd. | Computer security |
US20010047326A1 (en) | 2000-03-14 | 2001-11-29 | Broadbent David F. | Interface system for a mortgage loan originator compliance engine |
WO2002006928A2 (en) | 2000-07-14 | 2002-01-24 | Vcis, Inc. | Computer immune system and method for detecting unwanted code in a computer system |
US20020018903A1 (en) | 2000-07-21 | 2002-02-14 | Tadashi Kokubo | Anti-thrombogenic material and manufacturing method therefor |
US6357008B1 (en) | 1997-09-23 | 2002-03-12 | Symantec Corporation | Dynamic heuristic method for detecting computer viruses using decryption exploration and evaluation phases |
WO2002023805A2 (en) | 2000-09-13 | 2002-03-21 | Karakoram Limited | Monitoring network activity |
US20020038430A1 (en) | 2000-09-13 | 2002-03-28 | Charles Edwards | System and method of data collection, processing, analysis, and annotation for monitoring cyber-threats and the notification thereof to subscribers |
US20020091819A1 (en) | 2001-01-05 | 2002-07-11 | Daniel Melchione | System and method for configuring computer applications and devices using inheritance |
US20020095607A1 (en) | 2001-01-18 | 2002-07-18 | Catherine Lin-Hendel | Security protection for computers and computer-networks |
US6424627B1 (en) | 1997-02-24 | 2002-07-23 | Metrobility Optical Systems | Full-duplex medium tap apparatus and system |
US20020116627A1 (en) | 2001-02-20 | 2002-08-22 | Tarbotton Lee Codel Lawson | Software audit system |
US6442696B1 (en) | 1999-10-05 | 2002-08-27 | Authoriszor, Inc. | System and method for extensible positive client identification |
US20020144156A1 (en) | 2001-01-31 | 2002-10-03 | Copeland John A. | Network port profiling |
US20020162015A1 (en) | 2001-04-29 | 2002-10-31 | Zhaomiao Tang | Method and system for scanning and cleaning known and unknown computer viruses, recording medium and transmission medium therefor |
US20020166063A1 (en) | 2001-03-01 | 2002-11-07 | Cyber Operations, Llc | System and method for anti-network terrorism |
US20020169952A1 (en) | 1999-06-21 | 2002-11-14 | Disanto Frank J. | Method and apparatus for securing e-mail attachments |
US6484315B1 (en) | 1999-02-01 | 2002-11-19 | Cisco Technology, Inc. | Method and system for dynamically distributing updates in a network |
US6487666B1 (en) | 1999-01-15 | 2002-11-26 | Cisco Technology, Inc. | Intrusion detection signature analysis using regular expressions and logical operators |
US20020184528A1 (en) | 2001-04-12 | 2002-12-05 | Shevenell Michael P. | Method and apparatus for security management via vicarious network devices |
US6493756B1 (en) | 1999-10-28 | 2002-12-10 | Networks Associates, Inc. | System and method for dynamically sensing an asynchronous network event within a modular framework for network event processing |
US20020188887A1 (en) | 2000-05-19 | 2002-12-12 | Self Repairing Computers, Inc. | Computer with switchable components |
US20020194490A1 (en) | 2001-06-18 | 2002-12-19 | Avner Halperin | System and method of virus containment in computer networks |
US20030021728A1 (en) | 2001-07-26 | 2003-01-30 | Sharpe Richard R. | Method of and apparatus for object-oriented real-time mechanical control of automated chemistry instruments |
US6550012B1 (en) | 1998-12-11 | 2003-04-15 | Network Associates, Inc. | Active firewall system and methodology |
US20030074578A1 (en) | 2001-10-16 | 2003-04-17 | Richard Ford | Computer virus containment |
US20030084318A1 (en) | 2001-10-31 | 2003-05-01 | Schertz Richard L. | System and method of graphically correlating data for an intrusion protection system |
US20030101381A1 (en) | 2001-11-29 | 2003-05-29 | Nikolay Mateev | System and method for virus checking software |
US20030115483A1 (en) | 2001-12-04 | 2003-06-19 | Trend Micro Incorporated | Virus epidemic damage control system and method for network environment |
US20030188190A1 (en) | 2002-03-26 | 2003-10-02 | Aaron Jeffrey A. | System and method of intrusion detection employing broad-scope monitoring |
US20030191957A1 (en) | 1999-02-19 | 2003-10-09 | Ari Hypponen | Distributed computer virus detection and scanning |
US20030200460A1 (en) | 2002-02-28 | 2003-10-23 | Ntt Docomo, Inc | Server apparatus, and information processing method |
US20030212902A1 (en) | 2002-05-13 | 2003-11-13 | Van Der Made Peter A.J. | Computer immune system and method for detecting unwanted code in a P-code or partially compiled native-code program executing within a virtual machine |
US20030229801A1 (en) | 2001-08-01 | 2003-12-11 | Networks Associates Technology, Inc. | Wireless malware scanning back-end system and method |
US20030237000A1 (en) | 2002-06-19 | 2003-12-25 | International Business Machines Corporation | Method, system and program product for detecting intrusion of a wireless network |
US20040003323A1 (en) | 2002-06-29 | 2004-01-01 | Steve Bennett | Control over faults occurring during the operation of guest software in the virtual-machine architecture |
US20040006473A1 (en) | 2002-07-02 | 2004-01-08 | Sbc Technology Resources, Inc. | Method and system for automated categorization of statements |
US20040015712A1 (en) | 2002-07-19 | 2004-01-22 | Peter Szor | Heuristic detection of malicious computer code by page tracking |
US20040019832A1 (en) | 2002-07-23 | 2004-01-29 | International Business Machines Corporation | Method and apparatus for the automatic determination of potentially worm-like behavior of a program |
US20040047356A1 (en) | 2002-09-06 | 2004-03-11 | Bauer Blaine D. | Network traffic monitoring |
US20040083408A1 (en) | 2002-10-24 | 2004-04-29 | Mark Spiegel | Heuristic detection and termination of fast spreading network worm attacks |
US20040088581A1 (en) | 2002-11-04 | 2004-05-06 | Brawn John Melvin | Signal level propagation mechanism for distribution of a payload to vulnerable systems |
US20040093513A1 (en) | 2002-11-07 | 2004-05-13 | Tippingpoint Technologies, Inc. | Active network defense system and method |
US20040111531A1 (en) | 2002-12-06 | 2004-06-10 | Stuart Staniford | Method and system for reducing the rate of infection of a communications network by a software worm |
US20040117624A1 (en) | 2002-10-21 | 2004-06-17 | Brandt David D. | System and methodology providing automation security analysis, validation, and learning in an industrial controller environment |
US20040128355A1 (en) | 2002-12-25 | 2004-07-01 | Kuo-Jen Chao | Community-based message classification and self-amending system for a messaging system |
US6775657B1 (en) | 1999-12-22 | 2004-08-10 | Cisco Technology, Inc. | Multilayered intrusion detection system and method |
US20040165588A1 (en) | 2002-06-11 | 2004-08-26 | Pandya Ashish A. | Distributed network security system and a hardware processor therefor |
US20040236963A1 (en) | 2003-05-20 | 2004-11-25 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US20040243349A1 (en) | 2003-05-30 | 2004-12-02 | Segue Software, Inc. | Method of non-intrusive analysis of secure and non-secure web application traffic in real-time |
US20040249911A1 (en) | 2003-03-31 | 2004-12-09 | Alkhatib Hasan S. | Secure virtual community network system |
US6831893B1 (en) | 2000-04-03 | 2004-12-14 | P-Cube, Ltd. | Apparatus and method for wire-speed classification and pre-processing of data packets in a full duplex network |
US6832367B1 (en) | 2000-03-06 | 2004-12-14 | International Business Machines Corporation | Method and system for recording and replaying the execution of distributed java programs |
US20040255161A1 (en) | 2003-04-12 | 2004-12-16 | Deep Nines, Inc. | System and method for network edge data protection |
US20040268147A1 (en) | 2003-06-30 | 2004-12-30 | Wiederin Shawn E | Integrated security system |
US20050005159A1 (en) | 2003-07-01 | 2005-01-06 | Oliphant Brett M. | Vulnerability and remediation database |
US20050021740A1 (en) | 2001-08-14 | 2005-01-27 | Bar Anat Bremler | Detecting and protecting against worm traffic on a network |
US20050033989A1 (en) | 2002-11-04 | 2005-02-10 | Poletto Massimiliano Antonio | Detection of scanning attacks |
US20050033960A1 (en) | 2001-02-12 | 2005-02-10 | Jukka Vialen | Message authentication |
US20050050148A1 (en) | 2003-06-18 | 2005-03-03 | Said Mohammadioun | System and method for providing notification on remote devices |
US20050086523A1 (en) | 2003-10-15 | 2005-04-21 | Zimmer Vincent J. | Methods and apparatus to provide network traffic support and physical security support |
US20050091513A1 (en) | 2003-10-28 | 2005-04-28 | Fujitsu Limited | Device, method and program for detecting unauthorized access |
US20050091533A1 (en) | 2003-10-28 | 2005-04-28 | Fujitsu Limited | Device and method for worm detection, and computer product |
US20050091652A1 (en) | 2003-10-28 | 2005-04-28 | Ross Jonathan K. | Processor-architecture for facilitating a virtual machine monitor |
US6895550B2 (en) | 2001-12-05 | 2005-05-17 | I2 Technologies Us, Inc. | Computer-implemented PDF document management |
US20050108562A1 (en) | 2003-06-18 | 2005-05-19 | Khazan Roger I. | Technique for detecting executable malicious code using a combination of static and dynamic analyses |
US6898632B2 (en) | 2003-03-31 | 2005-05-24 | Finisar Corporation | Network security tap for use with intrusion detection system |
US20050114663A1 (en) | 2003-11-21 | 2005-05-26 | Finisar Corporation | Secure network access devices with data encryption |
US20050125195A1 (en) | 2001-12-21 | 2005-06-09 | Juergen Brendel | Method, apparatus and sofware for network traffic management |
US6907396B1 (en) | 2000-06-01 | 2005-06-14 | Networks Associates Technology, Inc. | Detecting computer viruses or malicious software by patching instructions into an emulator |
US20050149726A1 (en) | 2003-10-21 | 2005-07-07 | Amit Joshi | Systems and methods for secure client applications |
US20050157662A1 (en) | 2004-01-20 | 2005-07-21 | Justin Bingham | Systems and methods for detecting a compromised network |
US20050183143A1 (en) | 2004-02-13 | 2005-08-18 | Anderholm Eric J. | Methods and systems for monitoring user, application or device activity |
US6941348B2 (en) | 2002-02-19 | 2005-09-06 | Postini, Inc. | Systems and methods for managing the transmission of electronic messages through active message date updating |
US20050201297A1 (en) | 2003-12-12 | 2005-09-15 | Cyrus Peikari | Diagnosis of embedded, wireless mesh networks with real-time, flexible, location-specific signaling |
US20050210533A1 (en) | 2001-11-30 | 2005-09-22 | Copeland John A | Packet Sampling Flow-Based Detection of Network Intrusions |
US20050240781A1 (en) | 2004-04-22 | 2005-10-27 | Gassoway Paul A | Prioritizing intrusion detection logs |
US20050238005A1 (en) | 2004-04-21 | 2005-10-27 | Yi-Fen Chen | Method and apparatus for controlling traffic in a computer network |
US20050262562A1 (en) | 2004-05-21 | 2005-11-24 | Paul Gassoway | Systems and methods of computer security |
US6971097B1 (en) | 2000-06-09 | 2005-11-29 | Sun Microsystems, Inc. | Method and apparatus for implementing concurrently running jobs on an extended virtual machine using different heaps managers |
US20050265331A1 (en) | 2003-11-12 | 2005-12-01 | The Trustees Of Columbia University In The City Of New York | Apparatus method and medium for tracing the origin of network transmissions using n-gram distribution of data |
US20050283839A1 (en) | 2002-09-10 | 2005-12-22 | Ingenia Technology Limited | Security device and system |
US6981279B1 (en) | 2000-08-17 | 2005-12-27 | International Business Machines Corporation | Method and apparatus for replicating and analyzing worm programs |
US20060010495A1 (en) | 2004-07-06 | 2006-01-12 | Oded Cohen | Method for protecting a computer from suspicious objects |
US20060015416A1 (en) | 2001-03-23 | 2006-01-19 | Restaurant Services, Inc. | System, method and computer program product for utilizing market demand information for generating revenue |
US20060015747A1 (en) | 2004-07-16 | 2006-01-19 | Red Hat, Inc. | System and method for detecting computer virus |
US20060015715A1 (en) | 2004-07-16 | 2006-01-19 | Eric Anderson | Automatically protecting network service from network attack |
US20060021054A1 (en) | 2004-07-21 | 2006-01-26 | Microsoft Corporation | Containment of worms |
US20060021029A1 (en) | 2004-06-29 | 2006-01-26 | Brickell Ernie F | Method of improving computer security through sandboxing |
US20060031476A1 (en) | 2004-08-05 | 2006-02-09 | Mathes Marvin L | Apparatus and method for remotely monitoring a computer network |
US7007107B1 (en) | 2001-10-22 | 2006-02-28 | United Electronic Industries | Methods and apparatus for performing data acquisition and control |
US20060047665A1 (en) | 2001-01-09 | 2006-03-02 | Tim Neil | System and method for simulating an application for subsequent deployment to a device in communication with a transaction server |
US20060070130A1 (en) | 2004-09-27 | 2006-03-30 | Microsoft Corporation | System and method of identifying the source of an attack on a computer network |
US20060075496A1 (en) | 2003-05-20 | 2006-04-06 | International Bussiness Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US7028179B2 (en) | 2001-07-03 | 2006-04-11 | Intel Corporation | Apparatus and method for secure, automated response to distributed denial of service attacks |
US20060095968A1 (en) | 2004-10-28 | 2006-05-04 | Cisco Technology, Inc. | Intrusion detection in a data center environment |
US7043757B2 (en) | 2001-05-22 | 2006-05-09 | Mci, Llc | System and method for malicious code detection |
US20060101516A1 (en) | 2004-10-12 | 2006-05-11 | Sushanthan Sudaharan | Honeynet farms as an early warning system for production networks |
US20060101517A1 (en) | 2004-10-28 | 2006-05-11 | Banzhof Carl E | Inventory management-based computer vulnerability resolution system |
US20060117385A1 (en) | 2004-11-30 | 2006-06-01 | Mester Michael L | Monitoring propagation protection within a network |
US7058822B2 (en) | 2000-03-30 | 2006-06-06 | Finjan Software, Ltd. | Malicious mobile code runtime monitoring system and methods |
US20060123477A1 (en) | 2004-12-06 | 2006-06-08 | Kollivakkam Raghavan | Method and apparatus for generating a network topology representation based on inspection of application messages at a network device |
US7069316B1 (en) | 2002-02-19 | 2006-06-27 | Mcafee, Inc. | Automated Internet Relay Chat malware monitoring and interception |
US20060143709A1 (en) | 2004-12-27 | 2006-06-29 | Raytheon Company | Network intrusion prevention |
US20060150249A1 (en) | 2003-05-07 | 2006-07-06 | Derek Gassen | Method and apparatus for predictive and actual intrusion detection on a network |
US7080408B1 (en) | 2001-11-30 | 2006-07-18 | Mcafee, Inc. | Delayed-delivery quarantining of network communications having suspicious contents |
US7080407B1 (en) | 2000-06-27 | 2006-07-18 | Cisco Technology, Inc. | Virus detection and removal system and method for network-based systems |
US20060161989A1 (en) | 2004-12-13 | 2006-07-20 | Eran Reshef | System and method for deterring rogue users from attacking protected legitimate users |
US20060161983A1 (en) | 2005-01-20 | 2006-07-20 | Cothrell Scott A | Inline intrusion detection |
US20060161987A1 (en) | 2004-11-10 | 2006-07-20 | Guy Levy-Yurista | Detecting and remedying unauthorized computer programs |
US20060164199A1 (en) | 2005-01-26 | 2006-07-27 | Lockdown Networks, Inc. | Network appliance for securely quarantining a node on a network |
US20060173992A1 (en) | 2002-11-04 | 2006-08-03 | Daniel Weber | Event detection/anomaly correlation heuristics |
US20060179147A1 (en) | 2005-02-07 | 2006-08-10 | Veritas Operating Corporation | System and method for connection failover using redirection |
US7093002B2 (en) | 2001-12-06 | 2006-08-15 | Mcafee, Inc. | Handling of malware scanning of files stored within a file storage device of a computer network |
US20060184632A1 (en) | 2005-02-15 | 2006-08-17 | Spam Cube, Inc. | Apparatus and method for analyzing and filtering email and for providing web related services |
US7096498B2 (en) | 2002-03-08 | 2006-08-22 | Cipher Trust, Inc. | Systems and methods for message threat management |
US20060191010A1 (en) | 2005-02-18 | 2006-08-24 | Pace University | System for intrusion detection and vulnerability assessment in a computer network using simulation and machine learning |
US7100201B2 (en) | 2002-01-24 | 2006-08-29 | Arxceo Corporation | Undetectable firewall |
US7107617B2 (en) | 2001-10-15 | 2006-09-12 | Mcafee, Inc. | Malware scanning of compressed computer files |
US20060221956A1 (en) | 2005-03-31 | 2006-10-05 | Narayan Harsha L | Methods for performing packet classification via prefix pair bit vectors |
US20060236393A1 (en) | 2005-03-31 | 2006-10-19 | Microsoft Corporation | System and method for protecting a limited resource computer from malware |
US20060242709A1 (en) | 2005-04-21 | 2006-10-26 | Microsoft Corporation | Protecting a computer that provides a Web service from malware |
US20060248519A1 (en) | 2005-05-02 | 2006-11-02 | Ibm Corporation | Methods and arrangements for unified program analysis |
US20060248582A1 (en) | 2005-04-28 | 2006-11-02 | Panjwani Dileep K | One-way proxy system |
US20060251104A1 (en) | 2005-03-31 | 2006-11-09 | Fujitsu Limited | Service apparatus, method of controlling switching of connection destination of client apparatus by service apparatus, and storage medium readable by machine |
US20060288417A1 (en) | 2005-06-21 | 2006-12-21 | Sbc Knowledge Ventures Lp | Method and apparatus for mitigating the effects of malicious software in a communication network |
US20070006288A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Controlling network access |
US20070006313A1 (en) | 2004-09-17 | 2007-01-04 | Phillip Porras | Method and apparatus for combating malicious code |
US20070011174A1 (en) | 1998-09-22 | 2007-01-11 | Kazuo Takaragi | Method and a device for managing a computer network |
US20070016951A1 (en) | 2005-07-13 | 2007-01-18 | Piccard Paul L | Systems and methods for identifying sources of malware |
US20070019286A1 (en) | 2005-07-20 | 2007-01-25 | Alps Electric Co., Ltd. | Wavelength branching filter and optical communication module |
US20070033645A1 (en) | 2005-07-22 | 2007-02-08 | Alcatel | DNS based enforcement for confinement and detection of network malicious activities |
US20070038943A1 (en) | 2005-08-15 | 2007-02-15 | Cisco Technology, Inc. | Interactive text communication system |
US20070064689A1 (en) | 2003-09-19 | 2007-03-22 | Shin Yong M | Method of controlling communication between devices in a network and apparatus for the same |
US20070074169A1 (en) | 2005-08-25 | 2007-03-29 | Fortify Software, Inc. | Apparatus and method for analyzing and supplementing a program to provide security |
US20070094730A1 (en) | 2005-10-20 | 2007-04-26 | Cisco Technology, Inc. | Mechanism to correlate the presence of worms in a network |
US20070101435A1 (en) | 2005-10-14 | 2007-05-03 | Check Point Software Technologies, Inc. | System and Methodology Providing Secure Workspace Environment |
US20070128855A1 (en) | 2005-12-07 | 2007-06-07 | Samsung Electro-Mechanics Co., Ltd. | Printed wiring board and method for manufacturing the same |
US7231667B2 (en) | 2003-05-29 | 2007-06-12 | Computer Associates Think, Inc. | System and method for computer virus detection utilizing heuristic analysis |
US20070143827A1 (en) | 2005-12-21 | 2007-06-21 | Fiberlink | Methods and systems for intelligently controlling access to computing resources |
US20070142030A1 (en) | 2005-12-19 | 2007-06-21 | Airdefense, Inc. | Systems and methods for wireless vulnerability analysis |
US7240364B1 (en) | 2000-05-20 | 2007-07-03 | Ciena Corporation | Network device identity authentication |
US7240368B1 (en) | 1999-04-14 | 2007-07-03 | Verizon Corporate Services Group Inc. | Intrusion and misuse deterrence system employing a virtual network |
US20070157180A1 (en) | 2005-12-30 | 2007-07-05 | Microsoft Corporation | Approximating finite domains in symbolic state exploration |
US20070156895A1 (en) | 2005-12-29 | 2007-07-05 | Research In Motion Limited | System and method of dynamic management of spam |
US20070157306A1 (en) | 2005-12-30 | 2007-07-05 | Elrod Craig T | Network threat detection and mitigation |
US7243371B1 (en) | 2001-11-09 | 2007-07-10 | Cisco Technology, Inc. | Method and system for configurable network intrusion detection |
US20070168988A1 (en) | 2006-01-11 | 2007-07-19 | International Business Machines Corporation | Software verification using hybrid explicit and symbolic model checking |
US7249175B1 (en) | 1999-11-23 | 2007-07-24 | Escom Corporation | Method and system for blocking e-mail having a nonexistent sender address |
US20070171824A1 (en) | 2006-01-25 | 2007-07-26 | Cisco Technology, Inc. A California Corporation | Sampling rate-limited traffic |
US20070174915A1 (en) | 2006-01-23 | 2007-07-26 | University Of Washington | Detection of spyware threats within virtual machine |
US20070192858A1 (en) | 2006-02-16 | 2007-08-16 | Infoexpress, Inc. | Peer based network access control |
US20070192500A1 (en) | 2006-02-16 | 2007-08-16 | Infoexpress, Inc. | Network access control including dynamic policy enforcement point |
US20070198275A1 (en) | 2002-06-27 | 2007-08-23 | Malden Matthew S | Method and system for processing intelligence information |
US20070208822A1 (en) | 2006-03-01 | 2007-09-06 | Microsoft Corporation | Honey Monkey Network Exploration |
US20070220607A1 (en) | 2005-05-05 | 2007-09-20 | Craig Sprosts | Determining whether to quarantine a message |
US20070240220A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | System and method for managing malware protection on mobile devices |
US20070245417A1 (en) | 2006-04-17 | 2007-10-18 | Hojae Lee | Malicious Attack Detection System and An Associated Method of Use |
US7287278B2 (en) | 2003-08-29 | 2007-10-23 | Trend Micro, Inc. | Innoculation of computing devices against a selected computer virus |
US20070250930A1 (en) | 2004-04-01 | 2007-10-25 | Ashar Aziz | Virtual machine with dynamic data flow analysis |
US20070271446A1 (en) | 2004-07-16 | 2007-11-22 | Tomonori Nakamura | Application Execution Device and Application Execution Device Application Execution Method |
US20080005782A1 (en) | 2004-04-01 | 2008-01-03 | Ashar Aziz | Heuristic based capture with replay to virtual machine |
GB2439806A (en) | 2006-06-30 | 2008-01-09 | Sophos Plc | Classifying software as malware using characteristics (or "genes") |
US20080018122A1 (en) | 2005-12-28 | 2008-01-24 | Robert Zierler | Rifle Sling and Method of Use Thereof |
US20080028463A1 (en) | 2005-10-27 | 2008-01-31 | Damballa, Inc. | Method and system for detecting and responding to attacking networks |
US7328453B2 (en) | 2001-05-09 | 2008-02-05 | Ecd Systems, Inc. | Systems and methods for the prevention of unauthorized use and manipulation of digital content |
US20080040710A1 (en) | 2006-04-05 | 2008-02-14 | Prevx Limited | Method, computer program and computer for analysing an executable computer file |
US20080046781A1 (en) | 2006-03-29 | 2008-02-21 | Childs Philip L | System and method for booting alternate MBR in event of virus attack |
US20080066179A1 (en) | 2006-09-11 | 2008-03-13 | Fujian Eastern Micropoint Info-Tech Co., Ltd. | Antivirus protection system and method for computers |
US7346486B2 (en) | 2004-01-22 | 2008-03-18 | Nec Laboratories America, Inc. | System and method for modeling, abstraction, and analysis of software |
US20080077793A1 (en) | 2006-09-21 | 2008-03-27 | Sensory Networks, Inc. | Apparatus and method for high throughput network security systems |
US20080080518A1 (en) | 2006-09-29 | 2008-04-03 | Hoeflin David A | Method and apparatus for detecting compromised host computers |
US7356736B2 (en) | 2001-09-25 | 2008-04-08 | Norman Asa | Simulated computer system for monitoring of software performance |
US20080086720A1 (en) | 2006-10-10 | 2008-04-10 | Reinhard Lekel | Data processing system and method for execution of a test routine in connection with an operating system |
WO2008041950A2 (en) | 2006-10-04 | 2008-04-10 | Trek 2000 International Ltd. | Method, apparatus and system for authentication of external storage devices |
US20080098476A1 (en) | 2005-04-04 | 2008-04-24 | Bae Systems Information And Electronic Systems Integration Inc. | Method and Apparatus for Defending Against Zero-Day Worm-Based Attacks |
US20080120722A1 (en) | 2006-11-17 | 2008-05-22 | Caleb Sima | Web application assessment based on intelligent generation of attack strings |
US20080134334A1 (en) | 2006-11-30 | 2008-06-05 | Electronics And Telecommunications Research Institute | Apparatus and method for detecting network attack |
US20080134178A1 (en) | 2006-10-17 | 2008-06-05 | Manageiq, Inc. | Control and management of virtual systems |
US20080141376A1 (en) | 2006-10-24 | 2008-06-12 | Pc Tools Technology Pty Ltd. | Determining maliciousness of software |
US7392542B2 (en) | 2003-08-29 | 2008-06-24 | Seagate Technology Llc | Restoration of data corrupted by viruses using pre-infected copy of data |
US20080184373A1 (en) | 2007-01-25 | 2008-07-31 | Microsoft Corporation | Protection Agents and Privilege Modes |
US20080184367A1 (en) | 2007-01-25 | 2008-07-31 | Mandiant, Inc. | System and method for determining data entropy to identify malware |
US20080201778A1 (en) | 2007-02-21 | 2008-08-21 | Matsushita Electric Industrial Co., Ltd. | Intrusion detection using system call monitors on a bayesian network |
US20080209557A1 (en) | 2007-02-28 | 2008-08-28 | Microsoft Corporation | Spyware detection mechanism |
US20080215742A1 (en) | 2000-04-28 | 2008-09-04 | German Goldszmidt | METHOD AND APPARATUS FOR DYNAMICALLY ADJUSTING RESOURCES ASSIGNED TO PLURALITY OF CUSTOMERS, FOR MEETING SERVICE LEVEL AGREEMENTS (SLAs) WITH MINIMAL RESOURCES, AND ALLOWING COMMON POOLS OF RESOURCES TO BE USED ACROSS PLURAL CUSTOMERS ON A DEMAND BASIS |
US20080222729A1 (en) | 2007-03-05 | 2008-09-11 | Songqing Chen | Containment of Unknown and Polymorphic Fast Spreading Worms |
US7428300B1 (en) | 2002-12-09 | 2008-09-23 | Verizon Laboratories Inc. | Diagnosing fault patterns in telecommunication networks |
US7441272B2 (en) | 2004-06-09 | 2008-10-21 | Intel Corporation | Techniques for self-isolation of networked devices |
US20080263665A1 (en) | 2007-04-20 | 2008-10-23 | Juniper Networks, Inc. | Network attack detection using partial deterministic finite automaton pattern matching |
US7448084B1 (en) | 2002-01-25 | 2008-11-04 | The Trustees Of Columbia University In The City Of New York | System and methods for detecting intrusions in a computer system by monitoring operating system registry accesses |
US7458098B2 (en) | 2002-03-08 | 2008-11-25 | Secure Computing Corporation | Systems and methods for enhancing electronic communication security |
US20080295172A1 (en) | 2007-05-22 | 2008-11-27 | Khushboo Bohacek | Method, system and computer-readable media for reducing undesired intrusion alarms in electronic communications systems and networks |
US20080301810A1 (en) | 2007-06-04 | 2008-12-04 | Agilent Technologies, Inc. | Monitoring apparatus and method therefor |
US7464407B2 (en) | 2002-08-20 | 2008-12-09 | Nec Corporation | Attack defending system and attack defending method |
US20080307524A1 (en) | 2004-04-08 | 2008-12-11 | The Regents Of The University Of California | Detecting Public Network Attacks Using Signatures and Fast Content Analysis |
US7467408B1 (en) | 2002-09-09 | 2008-12-16 | Cisco Technology, Inc. | Method and apparatus for capturing and filtering datagrams for network security monitoring |
US20080313738A1 (en) | 2007-06-15 | 2008-12-18 | Broadcom Corporation | Multi-Stage Deep Packet Inspection for Lightweight Devices |
US20080320594A1 (en) | 2007-03-19 | 2008-12-25 | Xuxian Jiang | Malware Detector |
US20090007100A1 (en) | 2007-06-28 | 2009-01-01 | Microsoft Corporation | Suspending a Running Operating System to Enable Security Scanning |
US20090003317A1 (en) | 2007-06-29 | 2009-01-01 | Kasralikar Rahul S | Method and mechanism for port redirects in a network switch |
US20090013408A1 (en) | 2007-07-06 | 2009-01-08 | Messagelabs Limited | Detection of exploits in files |
US7478428B1 (en) | 2004-10-12 | 2009-01-13 | Microsoft Corporation | Adapting input to find integer overflows |
US7480773B1 (en) | 2005-05-02 | 2009-01-20 | Sprint Communications Company L.P. | Virtual machine use and optimization of hardware configurations |
US20090031423A1 (en) | 2006-12-20 | 2009-01-29 | Peng Liu | Proactive worm containment (pwc) for enterprise networks |
US20090036111A1 (en) | 2007-07-30 | 2009-02-05 | Mobile Iron, Inc. | Virtual Instance Architecture for Mobile Device Management Systems |
US20090037835A1 (en) | 2007-07-30 | 2009-02-05 | Adobe Systems Incorporated | Application Tracking for Application Execution Environment |
US20090044024A1 (en) | 2007-08-06 | 2009-02-12 | The Regents Of The University Of Michigan | Network service for the detection, analysis and quarantine of malicious and unwanted files |
US20090044274A1 (en) | 2007-08-08 | 2009-02-12 | Vmware, Inc. | Impeding Progress of Malicious Guest Software |
US7496960B1 (en) | 2000-10-30 | 2009-02-24 | Trend Micro, Inc. | Tracking and reporting of computer virus information |
US20090064332A1 (en) | 2007-04-04 | 2009-03-05 | Phillip Andrew Porras | Method and apparatus for generating highly predictive blacklists |
US20090077666A1 (en) | 2007-03-12 | 2009-03-19 | University Of Southern California | Value-Adaptive Security Threat Modeling and Vulnerability Ranking |
US20090083369A1 (en) | 2004-10-04 | 2009-03-26 | Netmask (El-Mar) | Dynamic content conversion |
US20090089879A1 (en) | 2007-09-28 | 2009-04-02 | Microsoft Corporation | Securing anti-virus software with virtualization |
US20090094697A1 (en) | 2007-10-05 | 2009-04-09 | Google Inc. | Intrusive software management |
US7519990B1 (en) | 2002-07-19 | 2009-04-14 | Fortinet, Inc. | Managing network traffic flow |
US20090113425A1 (en) | 2007-10-30 | 2009-04-30 | Vmware, Inc. | Transparent Memory-Mapped Emulation of I/O Calls |
US7530104B1 (en) | 2004-02-09 | 2009-05-05 | Symantec Corporation | Threat analysis |
US20090125976A1 (en) | 2007-11-08 | 2009-05-14 | Docomo Communications Laboratories Usa, Inc. | Automated test input generation for web applications |
US20090126016A1 (en) | 2007-10-02 | 2009-05-14 | Andrey Sobko | System and method for detecting multi-component malware |
US20090133125A1 (en) | 2007-11-21 | 2009-05-21 | Yang Seo Choi | Method and apparatus for malware detection |
US7540025B2 (en) | 2004-11-18 | 2009-05-26 | Cisco Technology, Inc. | Mitigating network attacks using automatic signature generation |
US20090144823A1 (en) | 2006-03-27 | 2009-06-04 | Gerardo Lamastra | Method and System for Mobile Network Security, Related Network and Computer Program Product |
US7546638B2 (en) | 2003-03-18 | 2009-06-09 | Symantec Corporation | Automated identification and clean-up of malicious computer code |
US20090158430A1 (en) | 2005-10-21 | 2009-06-18 | Borders Kevin R | Method, system and computer program product for detecting at least one of security threats and undesirable computer files |
US20090172815A1 (en) | 2007-04-04 | 2009-07-02 | Guofei Gu | Method and apparatus for detecting malware infection |
US20090187992A1 (en) | 2006-06-30 | 2009-07-23 | Poston Robert J | Method and system for classification of software using characteristics and combinations of such characteristics |
US7568233B1 (en) | 2005-04-01 | 2009-07-28 | Symantec Corporation | Detecting malicious software through process dump scanning |
US20090193293A1 (en) | 2006-02-28 | 2009-07-30 | Stolfo Salvatore J | Systems, Methods, and Media for Outputting Data Based Upon Anomaly Detection |
US20090198651A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for analyzing data related to an event |
US20090198689A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | System and method for data preservation and retrieval |
US20090199296A1 (en) | 2008-02-04 | 2009-08-06 | Samsung Electronics Co., Ltd. | Detecting unauthorized use of computing devices based on behavioral patterns |
US20090199274A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | method and system for collaboration during an event |
US20090198670A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for collecting and organizing data corresponding to an event |
US7584455B2 (en) | 2003-10-23 | 2009-09-01 | Microsoft Corporation | Predicate-based test coverage and generation |
US20090228233A1 (en) | 2008-03-06 | 2009-09-10 | Anderson Gary F | Rank-based evaluation |
US20090241187A1 (en) | 2008-03-19 | 2009-09-24 | Websense, Inc. | Method and system for protection against information stealing software |
US20090241190A1 (en) | 2008-03-24 | 2009-09-24 | Michael Todd | System and method for securing a network from zero-day vulnerability exploits |
US7607171B1 (en) | 2002-01-17 | 2009-10-20 | Avinti, Inc. | Virus detection by executing e-mail code in a virtual machine |
US20090265692A1 (en) | 2008-04-21 | 2009-10-22 | Microsoft Corporation | Active property checking |
US20090271867A1 (en) | 2005-12-30 | 2009-10-29 | Peng Zhang | Virtual machine to detect malicious code |
US20090300415A1 (en) | 2005-10-19 | 2009-12-03 | Lenovo (Beijing) Limited | Computer System and Method for Performing Integrity Detection on the Same |
US20090300761A1 (en) | 2008-05-28 | 2009-12-03 | John Park | Intelligent Hashes for Centralized Malware Detection |
US20090328185A1 (en) | 2004-11-04 | 2009-12-31 | Eric Van Den Berg | Detecting exploit code in network flows |
US20090328221A1 (en) | 2008-06-30 | 2009-12-31 | Microsoft Corporation | Malware detention for suspected malware |
US7644441B2 (en) | 2003-09-26 | 2010-01-05 | Cigital, Inc. | Methods for identifying malicious software |
US20100005146A1 (en) | 2008-07-03 | 2010-01-07 | Barracuda Networks Inc. | Facilitating transmission of email by checking email parameters with a database of well behaved senders |
US20100011205A1 (en) | 2004-01-23 | 2010-01-14 | Acxiom Corporation | Secure data exchange technique |
US7657419B2 (en) | 2001-06-19 | 2010-02-02 | International Business Machines Corporation | Analytical virtual machine |
US20100031353A1 (en) | 2008-02-04 | 2010-02-04 | Microsoft Corporation | Malware Detection Using Code Analysis and Behavior Monitoring |
US20100030996A1 (en) | 2008-08-01 | 2010-02-04 | Mandiant, Inc. | System and Method for Forensic Identification of Elements Within a Computer System |
US20100037314A1 (en) | 2008-08-11 | 2010-02-11 | Perdisci Roberto | Method and system for detecting malicious and/or botnet-related domain names |
US20100043073A1 (en) | 2008-08-13 | 2010-02-18 | Fujitsu Limited | Anti-virus method, computer, and recording medium |
US20100058474A1 (en) | 2008-08-29 | 2010-03-04 | Avg Technologies Cz, S.R.O. | System and method for the detection of malware |
US7676841B2 (en) | 2005-02-01 | 2010-03-09 | Fmr Llc | Network intrusion mitigation |
US20100064044A1 (en) | 2008-09-05 | 2010-03-11 | Kabushiki Kaisha Toshiba | Information Processing System and Control Method for Information Processing System |
US20100077481A1 (en) | 2008-09-22 | 2010-03-25 | Microsoft Corporation | Collecting and analyzing malware data |
US20100083376A1 (en) | 2008-09-26 | 2010-04-01 | Symantec Corporation | Method and apparatus for reducing false positive detection of malware |
US7698548B2 (en) | 2005-12-08 | 2010-04-13 | Microsoft Corporation | Communications traffic segregation for security purposes |
US20100115621A1 (en) | 2008-11-03 | 2010-05-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious Network Content |
US20100132038A1 (en) | 2008-11-26 | 2010-05-27 | Zaitsev Oleg V | System and Method for Computer Malware Detection |
US7730011B1 (en) | 2005-10-19 | 2010-06-01 | Mcafee, Inc. | Attributes of captured objects in a capture system |
US7739740B1 (en) | 2005-09-22 | 2010-06-15 | Symantec Corporation | Detecting polymorphic threats |
US20100154056A1 (en) | 2008-12-17 | 2010-06-17 | Symantec Corporation | Context-Aware Real-Time Computer-Protection Systems and Methods |
US20100180344A1 (en) | 2009-01-10 | 2010-07-15 | Kaspersky Labs ZAO | Systems and Methods For Malware Classification |
US20100192223A1 (en) | 2004-04-01 | 2010-07-29 | Osman Abdoul Ismael | Detecting Malicious Network Content Using Virtual Environment Components |
US7779463B2 (en) | 2004-05-11 | 2010-08-17 | The Trustees Of Columbia University In The City Of New York | Systems and methods for correlating and distributing intrusion alert information among collaborating computer systems |
US7784097B1 (en) | 2004-11-24 | 2010-08-24 | The Trustees Of Columbia University In The City Of New York | Systems and methods for correlating and distributing intrusion alert information among collaborating computer systems |
US20100220863A1 (en) | 2009-02-27 | 2010-09-02 | ATMELCorporation | Key Recovery Mechanism for Cryptographic Systems |
US20100235831A1 (en) | 2009-03-12 | 2010-09-16 | Arend Erich Dittmer | Method for dynamic configuration of virtual machine |
US20100251104A1 (en) | 2009-03-27 | 2010-09-30 | Litera Technology Llc. | System and method for reflowing content in a structured portable document format (pdf) file |
US20100281102A1 (en) | 2009-05-02 | 2010-11-04 | Chinta Madhav | Methods and systems for launching applications into existing isolation environments |
US7832008B1 (en) | 2006-10-11 | 2010-11-09 | Cisco Technology, Inc. | Protection of computer resources |
US20100287260A1 (en) | 2009-03-13 | 2010-11-11 | Docusign, Inc. | Systems and methods for document management transformation and security |
US7836502B1 (en) | 2007-07-03 | 2010-11-16 | Trend Micro Inc. | Scheduled gateway scanning arrangement and methods thereof |
US20100299754A1 (en) | 2009-05-20 | 2010-11-25 | International Business Machines Corporation | Identifying Security Breaches Caused by Web-Enabled Software Applications |
US20100306173A1 (en) | 2009-05-31 | 2010-12-02 | Shahar Frank | Handling temporary files of a virtual machine |
US7849506B1 (en) | 2004-10-12 | 2010-12-07 | Avaya Inc. | Switching device, method, and computer program for efficient intrusion detection |
US20110004737A1 (en) | 2009-07-02 | 2011-01-06 | Kenneth Greenebaum | Method and apparatus for protected content data processing |
US7869073B2 (en) | 2005-03-22 | 2011-01-11 | Fuji Xerox Co., Ltd. | Image forming system, image forming method and information terminal device |
US7877803B2 (en) | 2005-06-27 | 2011-01-25 | Hewlett-Packard Development Company, L.P. | Automated immune response for a computer |
US20110025504A1 (en) | 2009-07-31 | 2011-02-03 | Lyon Geoff M | USB Hosted Sensor Module |
US20110041179A1 (en) | 2009-08-11 | 2011-02-17 | F-Secure Oyj | Malware detection |
US20110047620A1 (en) | 2008-10-21 | 2011-02-24 | Lookout, Inc., A California Corporation | System and method for server-coupled malware prevention |
US20110047594A1 (en) | 2008-10-21 | 2011-02-24 | Lookout, Inc., A California Corporation | System and method for mobile communication device application advisement |
US20110055907A1 (en) | 2009-09-03 | 2011-03-03 | Mcafee, Inc. | Host state monitoring |
US7904959B2 (en) | 2005-04-18 | 2011-03-08 | The Trustees Of Columbia University In The City Of New York | Systems and methods for detecting and inhibiting attacks using honeypots |
US7908660B2 (en) | 2007-02-06 | 2011-03-15 | Microsoft Corporation | Dynamic risk management |
US20110078794A1 (en) | 2009-09-30 | 2011-03-31 | Jayaraman Manni | Network-Based Binary File Extraction and Analysis for Malware Detection |
US7930738B1 (en) | 2005-06-02 | 2011-04-19 | Adobe Systems Incorporated | Method and apparatus for secure execution of code |
US20110093951A1 (en) | 2004-06-14 | 2011-04-21 | NetForts, Inc. | Computer worm defense system and method |
US20110099620A1 (en) | 2009-04-09 | 2011-04-28 | Angelos Stavrou | Malware Detector |
US20110099633A1 (en) | 2004-06-14 | 2011-04-28 | NetForts, Inc. | System and method of containing computer worms |
US20110099635A1 (en) | 2009-10-27 | 2011-04-28 | Silberman Peter J | System and method for detecting executable machine instructions in a data stream |
US7937761B1 (en) | 2004-12-17 | 2011-05-03 | Symantec Corporation | Differential threat detection processing |
US20110113231A1 (en) | 2009-11-12 | 2011-05-12 | Daniel Kaminsky | System and method for providing secure reception and viewing of transmitted data over a network |
US7949849B2 (en) | 2004-08-24 | 2011-05-24 | Mcafee, Inc. | File system for a capture system |
US20110145920A1 (en) | 2008-10-21 | 2011-06-16 | Lookout, Inc | System and method for adverse mobile application identification |
US20110145918A1 (en) | 2009-12-15 | 2011-06-16 | Jaeyeon Jung | Sensitive data tracking using dynamic taint analysis |
US20110145934A1 (en) | 2009-10-13 | 2011-06-16 | Miron Abramovici | Autonomous distributed programmable logic for monitoring and securing electronic systems |
US20110167494A1 (en) | 2009-12-31 | 2011-07-07 | Bowen Brian M | Methods, systems, and media for detecting covert malware |
US20110167493A1 (en) | 2008-05-27 | 2011-07-07 | Yingbo Song | Systems, methods, ane media for detecting network anomalies |
US20110173460A1 (en) | 2008-10-10 | 2011-07-14 | Takayuki Ito | Information processing device, method, program, and integrated circuit |
WO2011084431A2 (en) | 2009-12-15 | 2011-07-14 | Mcafee, Inc. | Systems and methods for behavioral sandboxing |
US7996904B1 (en) | 2007-12-19 | 2011-08-09 | Symantec Corporation | Automated unpacking of executables packed by multiple layers of arbitrary packers |
US7996836B1 (en) | 2006-12-29 | 2011-08-09 | Symantec Corporation | Using a hypervisor to provide computer security |
US8010667B2 (en) | 2007-12-12 | 2011-08-30 | Vmware, Inc. | On-access anti-virus mechanism for virtual machine architecture |
US20110219450A1 (en) | 2010-03-08 | 2011-09-08 | Raytheon Company | System And Method For Malware Detection |
US20110219449A1 (en) | 2010-03-04 | 2011-09-08 | St Neitzel Michael | Malware detection method, system and computer program product |
US8020206B2 (en) | 2006-07-10 | 2011-09-13 | Websense, Inc. | System and method of analyzing web content |
WO2011112348A1 (en) | 2010-03-08 | 2011-09-15 | Raytheon Company | System and method for host-level malware detection |
US20110225655A1 (en) | 2010-03-15 | 2011-09-15 | F-Secure Oyj | Malware protection |
US20110225624A1 (en) | 2010-03-15 | 2011-09-15 | Symantec Corporation | Systems and Methods for Providing Network Access Control in Virtual Environments |
US8028338B1 (en) | 2008-09-30 | 2011-09-27 | Symantec Corporation | Modeling goodware characteristics to reduce false positive malware signatures |
US20110247072A1 (en) | 2008-11-03 | 2011-10-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious PDF Network Content |
US8042184B1 (en) | 2006-10-18 | 2011-10-18 | Kaspersky Lab, Zao | Rapid analysis of data stream for malware presence |
US8045094B2 (en) | 2006-12-26 | 2011-10-25 | Sharp Kabushiki Kaisha | Backlight device, display device, and television receiver |
US8045458B2 (en) | 2007-11-08 | 2011-10-25 | Mcafee, Inc. | Prioritizing network traffic |
US20110265182A1 (en) | 2010-04-27 | 2011-10-27 | Microsoft Corporation | Malware investigation by analyzing computer memory |
US20110289582A1 (en) | 2009-08-03 | 2011-11-24 | Barracuda Networks, Inc. | Method for detecting malicious javascript |
US20110302587A1 (en) | 2009-01-16 | 2011-12-08 | Sony Computer Entertainment Inc. | Information processing device and information processing method |
US20110307956A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for analyzing malicious code using a static analyzer |
US20110314546A1 (en) | 2004-04-01 | 2011-12-22 | Ashar Aziz | Electronic Message Analysis for Malware Detection |
US8087086B1 (en) | 2008-06-30 | 2011-12-27 | Symantec Corporation | Method for mitigating false positive generation in antivirus software |
US20120023593A1 (en) | 2010-07-26 | 2012-01-26 | Puder George | System and method for filtering internet content & blocking undesired websites by secure network appliance |
US20120054869A1 (en) | 2010-08-31 | 2012-03-01 | Chui-Tin Yen | Method and apparatus for detecting botnets |
US20120066698A1 (en) | 2009-05-20 | 2012-03-15 | Nec Corporation | Dynamic data flow tracking method, dynamic data flow tracking program, and dynamic data flow tracking apparatus |
US20120079596A1 (en) | 2010-08-26 | 2012-03-29 | Verisign, Inc. | Method and system for automatic detection and analysis of malware |
US20120084859A1 (en) | 2010-09-30 | 2012-04-05 | Microsoft Corporation | Realtime multiple engine selection and combining |
US20120096553A1 (en) | 2010-10-19 | 2012-04-19 | Manoj Kumar Srivastava | Social Engineering Protection Appliance |
US20120110667A1 (en) | 2010-11-01 | 2012-05-03 | Zubrilin Sergey A | System and Method for Server-Based Antivirus Scan of Data Downloaded From a Network |
US8176480B1 (en) | 2006-02-27 | 2012-05-08 | Symantec Operating Corporation | Adaptive instrumentation through dynamic recompilation |
US20120124426A1 (en) | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Debugging in a cluster processing network |
US20120121154A1 (en) | 2010-11-15 | 2012-05-17 | Siemens Corporation | Method and System for Propagation of Myocardial Infarction from Delayed Enhanced Cardiac Imaging to Cine Magnetic Resonance Imaging Using Hybrid Image Registration |
WO2012075336A1 (en) | 2010-12-01 | 2012-06-07 | Sourcefire, Inc. | Detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
US8201246B1 (en) | 2008-02-25 | 2012-06-12 | Trend Micro Incorporated | Preventing malicious codes from performing malicious actions in a computer system |
US8204984B1 (en) | 2004-04-01 | 2012-06-19 | Fireeye, Inc. | Systems and methods for detecting encrypted bot command and control communication channels |
US8214905B1 (en) | 2011-12-21 | 2012-07-03 | Kaspersky Lab Zao | System and method for dynamically allocating computing resources for processing security information |
US20120174218A1 (en) | 2010-12-30 | 2012-07-05 | Everis Inc. | Network Communication System With Improved Security |
US20120174196A1 (en) | 2010-12-30 | 2012-07-05 | Suresh Bhogavilli | Active validation for ddos and ssl ddos attacks |
US8220055B1 (en) | 2004-02-06 | 2012-07-10 | Symantec Corporation | Behavior blocking utilizing positive behavior system and method |
US8225288B2 (en) | 2008-01-29 | 2012-07-17 | Intuit Inc. | Model-based testing using branches, decisions, and options |
US8234709B2 (en) | 2008-06-20 | 2012-07-31 | Symantec Operating Corporation | Streaming malware definition updates |
US8234640B1 (en) | 2006-10-17 | 2012-07-31 | Manageiq, Inc. | Compliance-based adaptations in managed virtual systems |
US8233882B2 (en) | 2009-06-26 | 2012-07-31 | Vmware, Inc. | Providing security in mobile devices via a virtualization software layer |
US20120198279A1 (en) | 2011-02-02 | 2012-08-02 | Salesforce.Com, Inc. | Automated Testing on Mobile Devices |
US8239944B1 (en) | 2008-03-28 | 2012-08-07 | Symantec Corporation | Reducing malware signature set size through server-side processing |
US20120210423A1 (en) | 2010-12-01 | 2012-08-16 | Oliver Friedrichs | Method and apparatus for detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
US8260914B1 (en) | 2010-06-22 | 2012-09-04 | Narus, Inc. | Detecting DNS fast-flux anomalies |
US8266091B1 (en) | 2009-07-21 | 2012-09-11 | Symantec Corporation | Systems and methods for emulating the behavior of a user in a computer-human interaction environment |
US20120255015A1 (en) | 2011-03-30 | 2012-10-04 | Sahita Ravi L | Method and apparatus for transparently instrumenting an application program |
US20120255017A1 (en) | 2011-03-31 | 2012-10-04 | Mcafee, Inc. | System and method for providing a secured operating system execution environment |
US8286251B2 (en) | 2006-12-21 | 2012-10-09 | Telefonaktiebolaget L M Ericsson (Publ) | Obfuscating computer program code |
US20120260342A1 (en) | 2011-04-05 | 2012-10-11 | Government Of The United States, As Represented By The Secretary Of The Air Force | Malware Target Recognition |
US20120266244A1 (en) | 2011-04-13 | 2012-10-18 | Microsoft Corporation | Detecting Script-Based Malware using Emulation and Heuristics |
GB2490431A (en) | 2012-05-15 | 2012-10-31 | F Secure Corp | Foiling document exploit malware using repeat calls |
US20120278886A1 (en) | 2011-04-27 | 2012-11-01 | Michael Luna | Detection and filtering of malware based on traffic observations made in a distributed mobile traffic management system |
US8307435B1 (en) | 2010-02-18 | 2012-11-06 | Symantec Corporation | Software object corruption detection |
US20120297489A1 (en) | 2005-06-06 | 2012-11-22 | International Business Machines Corporation | Computer network intrusion detection |
US8321936B1 (en) | 2007-05-30 | 2012-11-27 | M86 Security, Inc. | System and method for malicious software detection in multiple protocols |
US8332571B1 (en) | 2008-10-07 | 2012-12-11 | Vizioncore, Inc. | Systems and methods for improving virtual machine performance |
US20120331553A1 (en) | 2006-04-20 | 2012-12-27 | Fireeye, Inc. | Dynamic signature creation and enforcement |
US20120330801A1 (en) | 2011-06-27 | 2012-12-27 | Raytheon Company | Distributed Malware Detection |
US8365297B1 (en) | 2011-12-28 | 2013-01-29 | Kaspersky Lab Zao | System and method for detecting malware targeting the boot process of a computer using boot process emulation |
US8370939B2 (en) | 2010-07-23 | 2013-02-05 | Kaspersky Lab, Zao | Protection against malware on web resources |
US8370938B1 (en) | 2009-04-25 | 2013-02-05 | Dasient, Inc. | Mitigating malware |
US20130074185A1 (en) | 2011-09-15 | 2013-03-21 | Raytheon Company | Providing a Network-Accessible Malware Analysis |
US20130086684A1 (en) | 2011-09-30 | 2013-04-04 | David S. Mohler | Contextual virtual machines for application quarantine and assessment method and system |
US20130097699A1 (en) | 2011-10-18 | 2013-04-18 | Mcafee, Inc. | System and method for detecting a malicious command and control channel |
US20130097706A1 (en) | 2011-09-16 | 2013-04-18 | Veracode, Inc. | Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security |
US20130111587A1 (en) | 2011-10-27 | 2013-05-02 | Microsoft Corporation | Detecting Software Vulnerabilities in an Isolated Computing Environment |
US20130117855A1 (en) | 2011-11-09 | 2013-05-09 | Electronics And Telecommunications Research Institute | Apparatus for automatically inspecting security of applications and method thereof |
US20130117852A1 (en) | 2011-10-10 | 2013-05-09 | Global Dataguard, Inc. | Detecting Emergent Behavior in Communications Networks |
WO2013067505A1 (en) | 2011-11-03 | 2013-05-10 | Cyphort, Inc. | Systems and methods for virtualization and emulation assisted malware detection |
US20130139264A1 (en) | 2011-11-28 | 2013-05-30 | Matthew D. Brinkley | Application sandboxing using a dynamic optimization framework |
US8464340B2 (en) | 2007-09-04 | 2013-06-11 | Samsung Electronics Co., Ltd. | System, apparatus and method of malware diagnosis mechanism based on immunization database |
US20130160131A1 (en) | 2011-12-20 | 2013-06-20 | Matias Madou | Application security testing |
US20130160127A1 (en) | 2011-12-14 | 2013-06-20 | Korea Internet & Security Agency | System and method for detecting malicious code of pdf document type |
US20130160125A1 (en) | 2011-12-14 | 2013-06-20 | Nikolay Vladimirovich Likhachev | Method and system for rapid signature search over encrypted content |
US20130160130A1 (en) | 2011-12-20 | 2013-06-20 | Kirill Mendelev | Application security testing |
US20130167236A1 (en) | 2011-12-15 | 2013-06-27 | Avira Holding GmbH | Method and system for automatically generating virus descriptions |
US8479276B1 (en) | 2010-12-29 | 2013-07-02 | Emc Corporation | Malware detection using risk analysis based on file system and network activity |
US8479291B1 (en) | 2010-10-28 | 2013-07-02 | Symantec Corporation | Systems and methods for identifying polymorphic malware |
US20130174214A1 (en) | 2011-12-29 | 2013-07-04 | Imation Corp. | Management Tracking Agent for Removable Media |
US20130185795A1 (en) | 2012-01-12 | 2013-07-18 | Arxceo Corporation | Methods and systems for providing network protection by progressive degradation of service |
US20130185789A1 (en) | 2012-01-15 | 2013-07-18 | Lenovo (Singapore) Pte. Ltd. | Method and apparatus for protecting a password of a computer having a non-volatile memory |
US20130185798A1 (en) | 2012-01-13 | 2013-07-18 | Accessdata Group, Llc | Identifying software execution behavior |
US20130191915A1 (en) | 2012-01-25 | 2013-07-25 | Damballa, Inc. | Method and system for detecting dga-based malware |
US20130196649A1 (en) | 2012-01-27 | 2013-08-01 | Qualcomm Incorporated | Mobile device to detect unexpected behaviour |
US8510828B1 (en) | 2007-12-31 | 2013-08-13 | Symantec Corporation | Enforcing the execution exception to prevent packers from evading the scanning of dynamically created code |
US8510842B2 (en) | 2011-04-13 | 2013-08-13 | International Business Machines Corporation | Pinpointing security vulnerabilities in computer software applications |
US8510827B1 (en) | 2006-05-18 | 2013-08-13 | Vmware, Inc. | Taint tracking mechanism for computer security |
US8516478B1 (en) | 2008-06-12 | 2013-08-20 | Mcafee, Inc. | Subsequent processing of scanning task utilizing subset of virtual machines predetermined to have scanner process and adjusting amount of subsequest VMs processing based on load |
US8516590B1 (en) | 2009-04-25 | 2013-08-20 | Dasient, Inc. | Malicious advertisement detection and remediation |
US8522348B2 (en) | 2009-07-29 | 2013-08-27 | Northwestern University | Matching with a large vulnerability signature ruleset for high performance network defense |
US20130227691A1 (en) | 2012-02-24 | 2013-08-29 | Ashar Aziz | Detecting Malicious Network Content |
US8528086B1 (en) | 2004-04-01 | 2013-09-03 | Fireeye, Inc. | System and method of detecting computer worms |
US8533824B2 (en) | 2006-12-04 | 2013-09-10 | Glasswall (Ip) Limited | Resisting the spread of unwanted code and data |
US8539582B1 (en) | 2004-04-01 | 2013-09-17 | Fireeye, Inc. | Malware containment and security analysis on connection |
US20130246370A1 (en) | 2007-08-29 | 2013-09-19 | Anthony V. Bartram | System, method, and computer program product for determining whether code is unwanted based on the decompilation thereof |
US20130247186A1 (en) | 2012-03-15 | 2013-09-19 | Aaron LeMasters | System to Bypass a Compromised Mass Storage Device Driver Stack and Method Thereof |
US8555391B1 (en) | 2009-04-25 | 2013-10-08 | Dasient, Inc. | Adaptive scanning |
US8561177B1 (en) | 2004-04-01 | 2013-10-15 | Fireeye, Inc. | Systems and methods for detecting communication channels of bots |
US8566946B1 (en) | 2006-04-20 | 2013-10-22 | Fireeye, Inc. | Malware containment on connection |
US20130298243A1 (en) | 2012-05-01 | 2013-11-07 | Taasera, Inc. | Systems and methods for orchestrating runtime operational integrity |
US8584234B1 (en) | 2010-07-07 | 2013-11-12 | Symantec Corporation | Secure network cache content |
US8584094B2 (en) | 2007-06-29 | 2013-11-12 | Microsoft Corporation | Dynamically computing reputation scores for objects |
US8627476B1 (en) | 2010-07-05 | 2014-01-07 | Symantec Corporation | Altering application behavior based on content provider reputation |
US20140032875A1 (en) | 2012-07-27 | 2014-01-30 | James Butler | Physical Memory Forensics System and Method |
US20140053260A1 (en) | 2012-08-15 | 2014-02-20 | Qualcomm Incorporated | Adaptive Observation of Behavioral Features on a Mobile Device |
US20140053261A1 (en) | 2012-08-15 | 2014-02-20 | Qualcomm Incorporated | On-Line Behavioral Analysis Engine in Mobile Device with Multiple Analyzer Model Providers |
US8682812B1 (en) | 2010-12-23 | 2014-03-25 | Narus, Inc. | Machine learning based botnet detection using real-time extracted traffic features |
US8695096B1 (en) | 2011-05-24 | 2014-04-08 | Palo Alto Networks, Inc. | Automatic signature generation for malicious PDF files |
US8713631B1 (en) | 2012-12-25 | 2014-04-29 | Kaspersky Lab Zao | System and method for detecting malicious code executed by virtual machine |
US20140130158A1 (en) | 2012-11-07 | 2014-05-08 | Microsoft Corporation | Identification of malware detection signature candidate code |
US8726392B1 (en) | 2012-03-29 | 2014-05-13 | Symantec Corporation | Systems and methods for combining static and dynamic code analysis |
US20140137180A1 (en) | 2012-11-13 | 2014-05-15 | Bitdefender IPR Management Ltd. | Hypervisor-Based Enterprise Endpoint Protection |
US8739280B2 (en) | 2011-09-29 | 2014-05-27 | Hewlett-Packard Development Company, L.P. | Context-sensitive taint analysis |
US20140169762A1 (en) | 2011-10-21 | 2014-06-19 | Mitsubishi Electric Corporation | Video image information playback method and video image information playback device |
US20140181131A1 (en) | 2012-12-26 | 2014-06-26 | David Ross | Timeline wrinkling system and method |
US20140179360A1 (en) | 2012-12-21 | 2014-06-26 | Verizon Patent And Licensing, Inc. | Short message service validation engine |
US20140189687A1 (en) | 2012-12-28 | 2014-07-03 | Robert Jung | System and Method to Create a Number of Breakpoints in a Virtual Machine Via Virtual Machine Trapping Events |
US20140189866A1 (en) | 2012-12-31 | 2014-07-03 | Jason Shiffer | Identification of obfuscated computer items using visual algorithms |
US8782792B1 (en) | 2011-10-27 | 2014-07-15 | Symantec Corporation | Systems and methods for detecting malware on mobile platforms |
US8789172B2 (en) | 2006-09-18 | 2014-07-22 | The Trustees Of Columbia University In The City Of New York | Methods, media, and systems for detecting attack on a digital processing device |
US8806647B1 (en) | 2011-04-25 | 2014-08-12 | Twitter, Inc. | Behavioral scanning of mobile applications |
US8805947B1 (en) | 2008-02-27 | 2014-08-12 | Parallels IP Holdings GmbH | Method and system for remote device access in virtual environment |
US20140283037A1 (en) | 2013-03-15 | 2014-09-18 | Michael Sikorski | System and Method to Extract and Utilize Disassembly Features to Classify Software Intent |
US20140280245A1 (en) | 2013-03-15 | 2014-09-18 | Mandiant Corporation | System and method to visualize user sessions |
US20140283063A1 (en) | 2013-03-15 | 2014-09-18 | Matthew Thompson | System and Method to Manage Sinkholes |
US8850570B1 (en) | 2008-06-30 | 2014-09-30 | Symantec Corporation | Filter-based identification of malicious websites |
US8881282B1 (en) | 2004-04-01 | 2014-11-04 | Fireeye, Inc. | Systems and methods for malware attack detection and identification |
US20140328204A1 (en) | 2011-11-14 | 2014-11-06 | Alcatel Lucent | Apparatus, method and computer program for routing data packets |
US20140337836A1 (en) | 2013-05-10 | 2014-11-13 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US20140344926A1 (en) | 2013-03-15 | 2014-11-20 | Sean Cunningham | System and method employing structured intelligence to verify and contain threats at endpoints |
US8898788B1 (en) | 2004-04-01 | 2014-11-25 | Fireeye, Inc. | Systems and methods for malware attack prevention |
US20140351935A1 (en) | 2011-09-14 | 2014-11-27 | Beijing Qihoo Technology Company Limited | Method, apparatus and virtual machine for detecting malicious program |
US20140380473A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | Zero-day discovery system |
US20140380474A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | System and Method for Detecting Time-Bomb Malware |
US20150007312A1 (en) | 2013-06-28 | 2015-01-01 | Vinay Pidathala | System and method for detecting malicious links in electronic messages |
US8990944B1 (en) | 2013-02-23 | 2015-03-24 | Fireeye, Inc. | Systems and methods for automatically detecting backdoors |
US20150096025A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | System, Apparatus and Method for Using Malware Analysis Results to Drive Adaptive Instrumentation of Virtual Machines to Improve Exploit Detection |
US20150096022A1 (en) | 2013-09-30 | 2015-04-02 | Michael Vincent | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US20150096024A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Advanced persistent threat (apt) detection center |
US20150096023A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US9009823B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications installed on mobile devices |
US9009822B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for multi-phase analysis of mobile applications |
US9027135B1 (en) | 2004-04-01 | 2015-05-05 | Fireeye, Inc. | Prospective client identification using malware attack detection |
US20150186645A1 (en) | 2013-12-26 | 2015-07-02 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US20150199531A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Exploit detection system with threat-aware microvisor |
US20150220735A1 (en) | 2014-02-05 | 2015-08-06 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US9104867B1 (en) | 2013-03-13 | 2015-08-11 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9159035B1 (en) | 2013-02-23 | 2015-10-13 | Fireeye, Inc. | Framework for computer application analysis of sensitive information tracking |
US9176843B1 (en) | 2013-02-23 | 2015-11-03 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US9189627B1 (en) | 2013-11-21 | 2015-11-17 | Fireeye, Inc. | System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection |
US9195829B1 (en) | 2013-02-23 | 2015-11-24 | Fireeye, Inc. | User interface with real-time visual playback along with synchronous textual analysis log display and event/time index for anomalous behavior detection in applications |
US20150372980A1 (en) | 2014-06-24 | 2015-12-24 | Fireeye, Inc. | Intrusion prevention and remedy system |
US20150373043A1 (en) * | 2014-06-23 | 2015-12-24 | Niara, Inc. | Collaborative and Adaptive Threat Intelligence for Computer Security |
US9223972B1 (en) | 2014-03-31 | 2015-12-29 | Fireeye, Inc. | Dynamically remote tuning of a malware content detection system |
US20160006756A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Trusted threat-aware microvisor |
US20160004869A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Verification of trusted threat-aware microvisor |
US9241010B1 (en) | 2014-03-20 | 2016-01-19 | Fireeye, Inc. | System and method for network behavior detection |
US9251343B1 (en) | 2013-03-15 | 2016-02-02 | Fireeye, Inc. | Detecting bootkits resident on compromised computers |
US20160044000A1 (en) | 2014-08-05 | 2016-02-11 | Fireeye, Inc. | System and method to communicate sensitive information via one or more untrusted intermediate nodes with resilience to disconnected network topology |
US9311479B1 (en) | 2013-03-14 | 2016-04-12 | Fireeye, Inc. | Correlation and consolidation of analytic data for holistic view of a malware attack |
US9355247B1 (en) | 2013-03-13 | 2016-05-31 | Fireeye, Inc. | File extraction from memory dump for malicious content analysis |
US9363280B1 (en) | 2014-08-22 | 2016-06-07 | Fireeye, Inc. | System and method of detecting delivery of malware using cross-customer data |
US9367681B1 (en) | 2013-02-23 | 2016-06-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications using symbolic execution to reach regions of interest within an application |
US20160191550A1 (en) | 2014-12-29 | 2016-06-30 | Fireeye, Inc. | Microvisor-based malware detection endpoint architecture |
US20160191547A1 (en) | 2014-12-26 | 2016-06-30 | Fireeye, Inc. | Zero-Day Rotating Guest Image Profile |
US9398028B1 (en) | 2014-06-26 | 2016-07-19 | Fireeye, Inc. | System, device and method for detecting a malicious attack based on communcations between remotely hosted virtual machines and malicious web servers |
US9426071B1 (en) | 2013-08-22 | 2016-08-23 | Fireeye, Inc. | Storing network bidirectional flow data and metadata with efficient processing technique |
US9432389B1 (en) | 2014-03-31 | 2016-08-30 | Fireeye, Inc. | System, apparatus and method for detecting a malicious attack based on static analysis of a multi-flow object |
US9430646B1 (en) | 2013-03-14 | 2016-08-30 | Fireeye, Inc. | Distributed systems and methods for automatically detecting unknown bots and botnets |
US9438613B1 (en) | 2015-03-30 | 2016-09-06 | Fireeye, Inc. | Dynamic content activation for automated analysis of embedded objects |
US9438623B1 (en) | 2014-06-06 | 2016-09-06 | Fireeye, Inc. | Computer exploit detection using heap spray pattern matching |
US20160285914A1 (en) | 2015-03-25 | 2016-09-29 | Fireeye, Inc. | Exploit detection system |
US9467460B1 (en) | 2014-12-23 | 2016-10-11 | Fireeye, Inc. | Modularized database architecture using vertical partitioning for a state machine |
US9483644B1 (en) | 2015-03-31 | 2016-11-01 | Fireeye, Inc. | Methods for detecting file altering malware in VM based analysis |
US20160335110A1 (en) | 2015-03-31 | 2016-11-17 | Fireeye, Inc. | Selective virtualization for security threat detection |
US9537972B1 (en) | 2014-02-20 | 2017-01-03 | Fireeye, Inc. | Efficient access to sparse packets in large repositories of stored network traffic |
US9565202B1 (en) | 2013-03-13 | 2017-02-07 | Fireeye, Inc. | System and method for detecting exfiltration content |
US9591015B1 (en) | 2014-03-28 | 2017-03-07 | Fireeye, Inc. | System and method for offloading packet processing and static analysis operations |
US9594904B1 (en) | 2015-04-23 | 2017-03-14 | Fireeye, Inc. | Detecting malware based on reflection |
US9594912B1 (en) | 2014-06-06 | 2017-03-14 | Fireeye, Inc. | Return-oriented programming detection |
US20170083703A1 (en) | 2015-09-22 | 2017-03-23 | Fireeye, Inc. | Leveraging behavior-based rules for malware family classification |
US9626509B1 (en) | 2013-03-13 | 2017-04-18 | Fireeye, Inc. | Malicious content analysis with multi-version application support within single operating environment |
US9628498B1 (en) | 2004-04-01 | 2017-04-18 | Fireeye, Inc. | System and method for bot detection |
US9635039B1 (en) | 2013-05-13 | 2017-04-25 | Fireeye, Inc. | Classifying sets of malicious indicators for detecting command and control communications associated with malware |
US9654485B1 (en) | 2015-04-13 | 2017-05-16 | Fireeye, Inc. | Analytics-based security monitoring system and method |
US9690606B1 (en) | 2015-03-25 | 2017-06-27 | Fireeye, Inc. | Selective system call monitoring |
US9690933B1 (en) | 2014-12-22 | 2017-06-27 | Fireeye, Inc. | Framework for classifying an object as malicious with machine learning for deploying updated predictive models |
US9690936B1 (en) | 2013-09-30 | 2017-06-27 | Fireeye, Inc. | Multistage system and method for analyzing obfuscated content for malware |
US9747446B1 (en) | 2013-12-26 | 2017-08-29 | Fireeye, Inc. | System and method for run-time object classification |
US9773112B1 (en) | 2014-09-29 | 2017-09-26 | Fireeye, Inc. | Exploit detection of malware and malware families |
US9781144B1 (en) | 2014-09-30 | 2017-10-03 | Fireeye, Inc. | Determining duplicate objects for malware analysis using environmental/context information |
US9824209B1 (en) | 2013-02-23 | 2017-11-21 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications that is usable to harden in the field code |
US9825989B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Cyber attack early warning system |
US9824216B1 (en) | 2015-12-31 | 2017-11-21 | Fireeye, Inc. | Susceptible environment detection system |
US9825976B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Detection and classification of exploit kits |
US9838417B1 (en) | 2014-12-30 | 2017-12-05 | Fireeye, Inc. | Intelligent context aware user interaction for malware detection |
US9888016B1 (en) | 2013-06-28 | 2018-02-06 | Fireeye, Inc. | System and method for detecting phishing using password prediction |
US20180048660A1 (en) | 2015-11-10 | 2018-02-15 | Fireeye, Inc. | Launcher for setting analysis environment variations for malware detection |
US9912681B1 (en) | 2015-03-31 | 2018-03-06 | Fireeye, Inc. | Injection of content processing delay in an endpoint |
US9921978B1 (en) | 2013-11-08 | 2018-03-20 | Fireeye, Inc. | System and method for enhanced security of storage devices |
US9934376B1 (en) | 2014-12-29 | 2018-04-03 | Fireeye, Inc. | Malware detection appliance architecture |
US20180115574A1 (en) | 2016-10-24 | 2018-04-26 | Senrio Inc. | Methods and systems for detecting anomalous behavior of network-connected embedded devices |
US9973531B1 (en) | 2014-06-06 | 2018-05-15 | Fireeye, Inc. | Shellcode detection |
US10027689B1 (en) | 2014-09-29 | 2018-07-17 | Fireeye, Inc. | Interactive infection visualization for improved exploit detection and signature generation for malware and malware families |
US10025691B1 (en) | 2016-09-09 | 2018-07-17 | Fireeye, Inc. | Verification of complex software code using a modularized architecture |
US10033759B1 (en) | 2015-09-28 | 2018-07-24 | Fireeye, Inc. | System and method of threat detection under hypervisor control |
US10033747B1 (en) | 2015-09-29 | 2018-07-24 | Fireeye, Inc. | System and method for detecting interpreter-based exploit attacks |
US10050998B1 (en) | 2015-12-30 | 2018-08-14 | Fireeye, Inc. | Malicious message analysis system |
US10089461B1 (en) | 2013-09-30 | 2018-10-02 | Fireeye, Inc. | Page replacement code injection |
US20180288077A1 (en) | 2017-03-30 | 2018-10-04 | Fireeye, Inc. | Attribute-controlled malware detection |
US10108446B1 (en) | 2015-12-11 | 2018-10-23 | Fireeye, Inc. | Late load technique for deploying a virtualization layer underneath a running operating system |
US10121000B1 (en) | 2016-06-28 | 2018-11-06 | Fireeye, Inc. | System and method to detect premium attacks on electronic networks and electronic devices |
US10133866B1 (en) | 2015-12-30 | 2018-11-20 | Fireeye, Inc. | System and method for triggering analysis of an object for malware in response to modification of that object |
US10169585B1 (en) | 2016-06-22 | 2019-01-01 | Fireeye, Inc. | System and methods for advanced malware detection through placement of transition events |
US10191861B1 (en) | 2016-09-06 | 2019-01-29 | Fireeye, Inc. | Technique for implementing memory views using a layered virtualization architecture |
US10192052B1 (en) | 2013-09-30 | 2019-01-29 | Fireeye, Inc. | System, apparatus and method for classifying a file as malicious using static scanning |
US10210329B1 (en) | 2015-09-30 | 2019-02-19 | Fireeye, Inc. | Method to detect application execution hijacking using memory protection |
US10216927B1 (en) | 2015-06-30 | 2019-02-26 | Fireeye, Inc. | System and method for protecting memory pages associated with a process using a virtualization layer |
US10242185B1 (en) | 2014-03-21 | 2019-03-26 | Fireeye, Inc. | Dynamic guest image creation and rollback |
US10623429B1 (en) * | 2017-09-22 | 2020-04-14 | Amazon Technologies, Inc. | Network management using entropy-based signatures |
-
2017
- 2017-12-28 US US15/857,467 patent/US11005860B1/en active Active
-
2021
- 2021-05-10 US US17/316,634 patent/US11949692B1/en active Active
Patent Citations (725)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4292580A (en) | 1978-11-30 | 1981-09-29 | Siemens Aktiengesellschaft | Circuit arrangement for attenuation of power oscillations in networks |
US5657473A (en) | 1990-02-21 | 1997-08-12 | Arendee Limited | Method and apparatus for controlling access to and corruption of information in computer systems |
US5319776A (en) | 1990-04-19 | 1994-06-07 | Hilgraeve Corporation | In transit detection of computer virus with safeguard |
US5175732A (en) | 1991-02-15 | 1992-12-29 | Standard Microsystems Corp. | Method and apparatus for controlling data communication operations within stations of a local-area network |
US5490249A (en) | 1992-12-23 | 1996-02-06 | Taligent, Inc. | Automated testing system |
US5440723A (en) | 1993-01-19 | 1995-08-08 | International Business Machines Corporation | Automatic immune system for computers and computer networks |
US5842002A (en) | 1994-06-01 | 1998-11-24 | Quantum Leap Innovations, Inc. | Computer virus trap |
US5802277A (en) | 1995-07-31 | 1998-09-01 | International Business Machines Corporation | Virus protection in computer systems |
US6154844A (en) | 1996-11-08 | 2000-11-28 | Finjan Software, Ltd. | System and method for attaching a downloadable security profile to a downloadable |
US6092194A (en) | 1996-11-08 | 2000-07-18 | Finjan Software, Ltd. | System and method for protecting a computer and a network from hostile downloadables |
US6424627B1 (en) | 1997-02-24 | 2002-07-23 | Metrobility Optical Systems | Full-duplex medium tap apparatus and system |
US5960170A (en) | 1997-03-18 | 1999-09-28 | Trend Micro, Inc. | Event triggered iterative virus detection |
US6094677A (en) | 1997-05-30 | 2000-07-25 | International Business Machines Corporation | Methods, systems and computer program products for providing insertions during delays in interactive systems |
US5978917A (en) | 1997-08-14 | 1999-11-02 | Symantec Corporation | Detection and elimination of macro viruses |
US5983348A (en) | 1997-09-10 | 1999-11-09 | Trend Micro Incorporated | Computer network malicious code scanner |
US6272641B1 (en) | 1997-09-10 | 2001-08-07 | Trend Micro, Inc. | Computer network malicious code scanner method and apparatus |
US6357008B1 (en) | 1997-09-23 | 2002-03-12 | Symantec Corporation | Dynamic heuristic method for detecting computer viruses using decryption exploration and evaluation phases |
US6269330B1 (en) | 1997-10-07 | 2001-07-31 | Attune Networks Ltd. | Fault location and performance testing of communication networks |
US6108799A (en) | 1997-11-21 | 2000-08-22 | International Business Machines Corporation | Automated sample creation of polymorphic and non-polymorphic marcro viruses |
US6088803A (en) | 1997-12-30 | 2000-07-11 | Intel Corporation | System for virus-checking network data during download to a client device |
US6279113B1 (en) | 1998-03-16 | 2001-08-21 | Internet Tools, Inc. | Dynamic signature inspection-based network intrusion detection |
US6298445B1 (en) | 1998-04-30 | 2001-10-02 | Netect, Ltd. | Computer security |
US20070011174A1 (en) | 1998-09-22 | 2007-01-11 | Kazuo Takaragi | Method and a device for managing a computer network |
US6550012B1 (en) | 1998-12-11 | 2003-04-15 | Network Associates, Inc. | Active firewall system and methodology |
US6487666B1 (en) | 1999-01-15 | 2002-11-26 | Cisco Technology, Inc. | Intrusion detection signature analysis using regular expressions and logical operators |
US6484315B1 (en) | 1999-02-01 | 2002-11-19 | Cisco Technology, Inc. | Method and system for dynamically distributing updates in a network |
US20030191957A1 (en) | 1999-02-19 | 2003-10-09 | Ari Hypponen | Distributed computer virus detection and scanning |
US7240368B1 (en) | 1999-04-14 | 2007-07-03 | Verizon Corporate Services Group Inc. | Intrusion and misuse deterrence system employing a virtual network |
US20020169952A1 (en) | 1999-06-21 | 2002-11-14 | Disanto Frank J. | Method and apparatus for securing e-mail attachments |
US6442696B1 (en) | 1999-10-05 | 2002-08-27 | Authoriszor, Inc. | System and method for extensible positive client identification |
US6493756B1 (en) | 1999-10-28 | 2002-12-10 | Networks Associates, Inc. | System and method for dynamically sensing an asynchronous network event within a modular framework for network event processing |
US7249175B1 (en) | 1999-11-23 | 2007-07-24 | Escom Corporation | Method and system for blocking e-mail having a nonexistent sender address |
US6775657B1 (en) | 1999-12-22 | 2004-08-10 | Cisco Technology, Inc. | Multilayered intrusion detection system and method |
US20010005889A1 (en) | 1999-12-24 | 2001-06-28 | F-Secure Oyj | Remote computer virus scanning |
US6832367B1 (en) | 2000-03-06 | 2004-12-14 | International Business Machines Corporation | Method and system for recording and replaying the execution of distributed java programs |
US20010047326A1 (en) | 2000-03-14 | 2001-11-29 | Broadbent David F. | Interface system for a mortgage loan originator compliance engine |
US7058822B2 (en) | 2000-03-30 | 2006-06-06 | Finjan Software, Ltd. | Malicious mobile code runtime monitoring system and methods |
US6831893B1 (en) | 2000-04-03 | 2004-12-14 | P-Cube, Ltd. | Apparatus and method for wire-speed classification and pre-processing of data packets in a full duplex network |
US20080215742A1 (en) | 2000-04-28 | 2008-09-04 | German Goldszmidt | METHOD AND APPARATUS FOR DYNAMICALLY ADJUSTING RESOURCES ASSIGNED TO PLURALITY OF CUSTOMERS, FOR MEETING SERVICE LEVEL AGREEMENTS (SLAs) WITH MINIMAL RESOURCES, AND ALLOWING COMMON POOLS OF RESOURCES TO BE USED ACROSS PLURAL CUSTOMERS ON A DEMAND BASIS |
US20020188887A1 (en) | 2000-05-19 | 2002-12-12 | Self Repairing Computers, Inc. | Computer with switchable components |
US7240364B1 (en) | 2000-05-20 | 2007-07-03 | Ciena Corporation | Network device identity authentication |
US6907396B1 (en) | 2000-06-01 | 2005-06-14 | Networks Associates Technology, Inc. | Detecting computer viruses or malicious software by patching instructions into an emulator |
US6971097B1 (en) | 2000-06-09 | 2005-11-29 | Sun Microsystems, Inc. | Method and apparatus for implementing concurrently running jobs on an extended virtual machine using different heaps managers |
US7080407B1 (en) | 2000-06-27 | 2006-07-18 | Cisco Technology, Inc. | Virus detection and removal system and method for network-based systems |
WO2002006928A2 (en) | 2000-07-14 | 2002-01-24 | Vcis, Inc. | Computer immune system and method for detecting unwanted code in a computer system |
US7093239B1 (en) | 2000-07-14 | 2006-08-15 | Internet Security Systems, Inc. | Computer immune system and method for detecting unwanted code in a computer system |
US20020018903A1 (en) | 2000-07-21 | 2002-02-14 | Tadashi Kokubo | Anti-thrombogenic material and manufacturing method therefor |
US6981279B1 (en) | 2000-08-17 | 2005-12-27 | International Business Machines Corporation | Method and apparatus for replicating and analyzing worm programs |
US20020038430A1 (en) | 2000-09-13 | 2002-03-28 | Charles Edwards | System and method of data collection, processing, analysis, and annotation for monitoring cyber-threats and the notification thereof to subscribers |
US20040117478A1 (en) | 2000-09-13 | 2004-06-17 | Triulzi Arrigo G.B. | Monitoring network activity |
WO2002023805A2 (en) | 2000-09-13 | 2002-03-21 | Karakoram Limited | Monitoring network activity |
US7496960B1 (en) | 2000-10-30 | 2009-02-24 | Trend Micro, Inc. | Tracking and reporting of computer virus information |
US20020091819A1 (en) | 2001-01-05 | 2002-07-11 | Daniel Melchione | System and method for configuring computer applications and devices using inheritance |
US20060047665A1 (en) | 2001-01-09 | 2006-03-02 | Tim Neil | System and method for simulating an application for subsequent deployment to a device in communication with a transaction server |
US20020095607A1 (en) | 2001-01-18 | 2002-07-18 | Catherine Lin-Hendel | Security protection for computers and computer-networks |
US20020144156A1 (en) | 2001-01-31 | 2002-10-03 | Copeland John A. | Network port profiling |
US20050033960A1 (en) | 2001-02-12 | 2005-02-10 | Jukka Vialen | Message authentication |
US20020116627A1 (en) | 2001-02-20 | 2002-08-22 | Tarbotton Lee Codel Lawson | Software audit system |
US20020166063A1 (en) | 2001-03-01 | 2002-11-07 | Cyber Operations, Llc | System and method for anti-network terrorism |
US20060015416A1 (en) | 2001-03-23 | 2006-01-19 | Restaurant Services, Inc. | System, method and computer program product for utilizing market demand information for generating revenue |
US20020184528A1 (en) | 2001-04-12 | 2002-12-05 | Shevenell Michael P. | Method and apparatus for security management via vicarious network devices |
US20020162015A1 (en) | 2001-04-29 | 2002-10-31 | Zhaomiao Tang | Method and system for scanning and cleaning known and unknown computer viruses, recording medium and transmission medium therefor |
US7328453B2 (en) | 2001-05-09 | 2008-02-05 | Ecd Systems, Inc. | Systems and methods for the prevention of unauthorized use and manipulation of digital content |
US7043757B2 (en) | 2001-05-22 | 2006-05-09 | Mci, Llc | System and method for malicious code detection |
US20020194490A1 (en) | 2001-06-18 | 2002-12-19 | Avner Halperin | System and method of virus containment in computer networks |
US7657419B2 (en) | 2001-06-19 | 2010-02-02 | International Business Machines Corporation | Analytical virtual machine |
US7028179B2 (en) | 2001-07-03 | 2006-04-11 | Intel Corporation | Apparatus and method for secure, automated response to distributed denial of service attacks |
US20030021728A1 (en) | 2001-07-26 | 2003-01-30 | Sharpe Richard R. | Method of and apparatus for object-oriented real-time mechanical control of automated chemistry instruments |
US20030229801A1 (en) | 2001-08-01 | 2003-12-11 | Networks Associates Technology, Inc. | Wireless malware scanning back-end system and method |
US20050021740A1 (en) | 2001-08-14 | 2005-01-27 | Bar Anat Bremler | Detecting and protecting against worm traffic on a network |
US7356736B2 (en) | 2001-09-25 | 2008-04-08 | Norman Asa | Simulated computer system for monitoring of software performance |
US7107617B2 (en) | 2001-10-15 | 2006-09-12 | Mcafee, Inc. | Malware scanning of compressed computer files |
US20030074578A1 (en) | 2001-10-16 | 2003-04-17 | Richard Ford | Computer virus containment |
US7007107B1 (en) | 2001-10-22 | 2006-02-28 | United Electronic Industries | Methods and apparatus for performing data acquisition and control |
US20030084318A1 (en) | 2001-10-31 | 2003-05-01 | Schertz Richard L. | System and method of graphically correlating data for an intrusion protection system |
US7243371B1 (en) | 2001-11-09 | 2007-07-10 | Cisco Technology, Inc. | Method and system for configurable network intrusion detection |
US20030101381A1 (en) | 2001-11-29 | 2003-05-29 | Nikolay Mateev | System and method for virus checking software |
US7080408B1 (en) | 2001-11-30 | 2006-07-18 | Mcafee, Inc. | Delayed-delivery quarantining of network communications having suspicious contents |
US20050210533A1 (en) | 2001-11-30 | 2005-09-22 | Copeland John A | Packet Sampling Flow-Based Detection of Network Intrusions |
US20030115483A1 (en) | 2001-12-04 | 2003-06-19 | Trend Micro Incorporated | Virus epidemic damage control system and method for network environment |
US6895550B2 (en) | 2001-12-05 | 2005-05-17 | I2 Technologies Us, Inc. | Computer-implemented PDF document management |
US7093002B2 (en) | 2001-12-06 | 2006-08-15 | Mcafee, Inc. | Handling of malware scanning of files stored within a file storage device of a computer network |
US20050125195A1 (en) | 2001-12-21 | 2005-06-09 | Juergen Brendel | Method, apparatus and sofware for network traffic management |
US7607171B1 (en) | 2002-01-17 | 2009-10-20 | Avinti, Inc. | Virus detection by executing e-mail code in a virtual machine |
US7100201B2 (en) | 2002-01-24 | 2006-08-29 | Arxceo Corporation | Undetectable firewall |
US20090083855A1 (en) | 2002-01-25 | 2009-03-26 | Frank Apap | System and methods for detecting intrusions in a computer system by monitoring operating system registry accesses |
US7448084B1 (en) | 2002-01-25 | 2008-11-04 | The Trustees Of Columbia University In The City Of New York | System and methods for detecting intrusions in a computer system by monitoring operating system registry accesses |
US6941348B2 (en) | 2002-02-19 | 2005-09-06 | Postini, Inc. | Systems and methods for managing the transmission of electronic messages through active message date updating |
US7069316B1 (en) | 2002-02-19 | 2006-06-27 | Mcafee, Inc. | Automated Internet Relay Chat malware monitoring and interception |
US20030200460A1 (en) | 2002-02-28 | 2003-10-23 | Ntt Docomo, Inc | Server apparatus, and information processing method |
US7213260B2 (en) | 2002-03-08 | 2007-05-01 | Secure Computing Corporation | Systems and methods for upstream threat pushback |
US7096498B2 (en) | 2002-03-08 | 2006-08-22 | Cipher Trust, Inc. | Systems and methods for message threat management |
US7458098B2 (en) | 2002-03-08 | 2008-11-25 | Secure Computing Corporation | Systems and methods for enhancing electronic communication security |
US20030188190A1 (en) | 2002-03-26 | 2003-10-02 | Aaron Jeffrey A. | System and method of intrusion detection employing broad-scope monitoring |
US20030212902A1 (en) | 2002-05-13 | 2003-11-13 | Van Der Made Peter A.J. | Computer immune system and method for detecting unwanted code in a P-code or partially compiled native-code program executing within a virtual machine |
US20040165588A1 (en) | 2002-06-11 | 2004-08-26 | Pandya Ashish A. | Distributed network security system and a hardware processor therefor |
US20030237000A1 (en) | 2002-06-19 | 2003-12-25 | International Business Machines Corporation | Method, system and program product for detecting intrusion of a wireless network |
US20070198275A1 (en) | 2002-06-27 | 2007-08-23 | Malden Matthew S | Method and system for processing intelligence information |
US20040003323A1 (en) | 2002-06-29 | 2004-01-01 | Steve Bennett | Control over faults occurring during the operation of guest software in the virtual-machine architecture |
US20040006473A1 (en) | 2002-07-02 | 2004-01-08 | Sbc Technology Resources, Inc. | Method and system for automated categorization of statements |
US20040015712A1 (en) | 2002-07-19 | 2004-01-22 | Peter Szor | Heuristic detection of malicious computer code by page tracking |
US7418729B2 (en) | 2002-07-19 | 2008-08-26 | Symantec Corporation | Heuristic detection of malicious computer code by page tracking |
US7519990B1 (en) | 2002-07-19 | 2009-04-14 | Fortinet, Inc. | Managing network traffic flow |
US20080189787A1 (en) | 2002-07-23 | 2008-08-07 | International Business Machines Corporation | Method and Apparatus for the Automatic Determination of Potentially Worm-Like Behavior of a Program |
US7996905B2 (en) | 2002-07-23 | 2011-08-09 | Trend Micro Incorporated | Method and apparatus for the automatic determination of potentially worm-like behavior of a program |
US20040019832A1 (en) | 2002-07-23 | 2004-01-29 | International Business Machines Corporation | Method and apparatus for the automatic determination of potentially worm-like behavior of a program |
US7487543B2 (en) | 2002-07-23 | 2009-02-03 | International Business Machines Corporation | Method and apparatus for the automatic determination of potentially worm-like behavior of a program |
US7464407B2 (en) | 2002-08-20 | 2008-12-09 | Nec Corporation | Attack defending system and attack defending method |
US20040047356A1 (en) | 2002-09-06 | 2004-03-11 | Bauer Blaine D. | Network traffic monitoring |
US7467408B1 (en) | 2002-09-09 | 2008-12-16 | Cisco Technology, Inc. | Method and apparatus for capturing and filtering datagrams for network security monitoring |
US20050283839A1 (en) | 2002-09-10 | 2005-12-22 | Ingenia Technology Limited | Security device and system |
US20040117624A1 (en) | 2002-10-21 | 2004-06-17 | Brandt David D. | System and methodology providing automation security analysis, validation, and learning in an industrial controller environment |
US20040083408A1 (en) | 2002-10-24 | 2004-04-29 | Mark Spiegel | Heuristic detection and termination of fast spreading network worm attacks |
US7159149B2 (en) | 2002-10-24 | 2007-01-02 | Symantec Corporation | Heuristic detection and termination of fast spreading network worm attacks |
US20060173992A1 (en) | 2002-11-04 | 2006-08-03 | Daniel Weber | Event detection/anomaly correlation heuristics |
US20050033989A1 (en) | 2002-11-04 | 2005-02-10 | Poletto Massimiliano Antonio | Detection of scanning attacks |
US20040088581A1 (en) | 2002-11-04 | 2004-05-06 | Brawn John Melvin | Signal level propagation mechanism for distribution of a payload to vulnerable systems |
US20040093513A1 (en) | 2002-11-07 | 2004-05-13 | Tippingpoint Technologies, Inc. | Active network defense system and method |
US20040111531A1 (en) | 2002-12-06 | 2004-06-10 | Stuart Staniford | Method and system for reducing the rate of infection of a communications network by a software worm |
US7428300B1 (en) | 2002-12-09 | 2008-09-23 | Verizon Laboratories Inc. | Diagnosing fault patterns in telecommunication networks |
US20040128355A1 (en) | 2002-12-25 | 2004-07-01 | Kuo-Jen Chao | Community-based message classification and self-amending system for a messaging system |
US7546638B2 (en) | 2003-03-18 | 2009-06-09 | Symantec Corporation | Automated identification and clean-up of malicious computer code |
US6898632B2 (en) | 2003-03-31 | 2005-05-24 | Finisar Corporation | Network security tap for use with intrusion detection system |
US20040249911A1 (en) | 2003-03-31 | 2004-12-09 | Alkhatib Hasan S. | Secure virtual community network system |
US20040255161A1 (en) | 2003-04-12 | 2004-12-16 | Deep Nines, Inc. | System and method for network edge data protection |
US20060150249A1 (en) | 2003-05-07 | 2006-07-06 | Derek Gassen | Method and apparatus for predictive and actual intrusion detection on a network |
US7707633B2 (en) | 2003-05-20 | 2010-04-27 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US20080072326A1 (en) | 2003-05-20 | 2008-03-20 | Danford Robert W | Applying blocking measures progressively to malicious network traffic |
US7308716B2 (en) | 2003-05-20 | 2007-12-11 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US20040236963A1 (en) | 2003-05-20 | 2004-11-25 | International Business Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US7464404B2 (en) | 2003-05-20 | 2008-12-09 | International Business Machines Corporation | Method of responding to a truncated secure session attack |
US20060075496A1 (en) | 2003-05-20 | 2006-04-06 | International Bussiness Machines Corporation | Applying blocking measures progressively to malicious network traffic |
US7231667B2 (en) | 2003-05-29 | 2007-06-12 | Computer Associates Think, Inc. | System and method for computer virus detection utilizing heuristic analysis |
US20040243349A1 (en) | 2003-05-30 | 2004-12-02 | Segue Software, Inc. | Method of non-intrusive analysis of secure and non-secure web application traffic in real-time |
US20050050148A1 (en) | 2003-06-18 | 2005-03-03 | Said Mohammadioun | System and method for providing notification on remote devices |
US20050108562A1 (en) | 2003-06-18 | 2005-05-19 | Khazan Roger I. | Technique for detecting executable malicious code using a combination of static and dynamic analyses |
US20040268147A1 (en) | 2003-06-30 | 2004-12-30 | Wiederin Shawn E | Integrated security system |
US20050005159A1 (en) | 2003-07-01 | 2005-01-06 | Oliphant Brett M. | Vulnerability and remediation database |
US20070256132A2 (en) | 2003-07-01 | 2007-11-01 | Securityprofiling, Inc. | Vulnerability and remediation database |
US7287278B2 (en) | 2003-08-29 | 2007-10-23 | Trend Micro, Inc. | Innoculation of computing devices against a selected computer virus |
US7392542B2 (en) | 2003-08-29 | 2008-06-24 | Seagate Technology Llc | Restoration of data corrupted by viruses using pre-infected copy of data |
US7565550B2 (en) | 2003-08-29 | 2009-07-21 | Trend Micro, Inc. | Automatic registration of a virus/worm monitor in a distributed network |
US7523493B2 (en) | 2003-08-29 | 2009-04-21 | Trend Micro Incorporated | Virus monitor and methods of use thereof |
US7386888B2 (en) | 2003-08-29 | 2008-06-10 | Trend Micro, Inc. | Network isolation techniques suitable for virus protection |
US20070064689A1 (en) | 2003-09-19 | 2007-03-22 | Shin Yong M | Method of controlling communication between devices in a network and apparatus for the same |
US7644441B2 (en) | 2003-09-26 | 2010-01-05 | Cigital, Inc. | Methods for identifying malicious software |
US20050086523A1 (en) | 2003-10-15 | 2005-04-21 | Zimmer Vincent J. | Methods and apparatus to provide network traffic support and physical security support |
US7496961B2 (en) | 2003-10-15 | 2009-02-24 | Intel Corporation | Methods and apparatus to provide network traffic support and physical security support |
US20050149726A1 (en) | 2003-10-21 | 2005-07-07 | Amit Joshi | Systems and methods for secure client applications |
US7584455B2 (en) | 2003-10-23 | 2009-09-01 | Microsoft Corporation | Predicate-based test coverage and generation |
US20050091533A1 (en) | 2003-10-28 | 2005-04-28 | Fujitsu Limited | Device and method for worm detection, and computer product |
US20050091652A1 (en) | 2003-10-28 | 2005-04-28 | Ross Jonathan K. | Processor-architecture for facilitating a virtual machine monitor |
US20050091513A1 (en) | 2003-10-28 | 2005-04-28 | Fujitsu Limited | Device, method and program for detecting unauthorized access |
US20100054278A1 (en) | 2003-11-12 | 2010-03-04 | Stolfo Salvatore J | Apparatus method and medium for detecting payload anomaly using n-gram distribution of normal data |
US7639714B2 (en) | 2003-11-12 | 2009-12-29 | The Trustees Of Columbia University In The City Of New York | Apparatus method and medium for detecting payload anomaly using n-gram distribution of normal data |
US20050265331A1 (en) | 2003-11-12 | 2005-12-01 | The Trustees Of Columbia University In The City Of New York | Apparatus method and medium for tracing the origin of network transmissions using n-gram distribution of data |
US20050114663A1 (en) | 2003-11-21 | 2005-05-26 | Finisar Corporation | Secure network access devices with data encryption |
US20050201297A1 (en) | 2003-12-12 | 2005-09-15 | Cyrus Peikari | Diagnosis of embedded, wireless mesh networks with real-time, flexible, location-specific signaling |
US20050157662A1 (en) | 2004-01-20 | 2005-07-21 | Justin Bingham | Systems and methods for detecting a compromised network |
US7346486B2 (en) | 2004-01-22 | 2008-03-18 | Nec Laboratories America, Inc. | System and method for modeling, abstraction, and analysis of software |
US20100011205A1 (en) | 2004-01-23 | 2010-01-14 | Acxiom Corporation | Secure data exchange technique |
US8220055B1 (en) | 2004-02-06 | 2012-07-10 | Symantec Corporation | Behavior blocking utilizing positive behavior system and method |
US7530104B1 (en) | 2004-02-09 | 2009-05-05 | Symantec Corporation | Threat analysis |
US20050183143A1 (en) | 2004-02-13 | 2005-08-18 | Anderholm Eric J. | Methods and systems for monitoring user, application or device activity |
US8776229B1 (en) | 2004-04-01 | 2014-07-08 | Fireeye, Inc. | System and method of detecting malicious traffic while reducing false positives |
US8171553B2 (en) | 2004-04-01 | 2012-05-01 | Fireeye, Inc. | Heuristic based capture with replay to virtual machine |
US8528086B1 (en) | 2004-04-01 | 2013-09-03 | Fireeye, Inc. | System and method of detecting computer worms |
US8689333B2 (en) | 2004-04-01 | 2014-04-01 | Fireeye, Inc. | Malware defense system and method |
US8516593B2 (en) | 2004-04-01 | 2013-08-20 | Fireeye, Inc. | Systems and methods for computer worm defense |
US8539582B1 (en) | 2004-04-01 | 2013-09-17 | Fireeye, Inc. | Malware containment and security analysis on connection |
US9197664B1 (en) | 2004-04-01 | 2015-11-24 | Fire Eye, Inc. | System and method for malware containment |
US8635696B1 (en) | 2004-04-01 | 2014-01-21 | Fireeye, Inc. | System and method of detecting time-delayed malicious traffic |
US20130036472A1 (en) | 2004-04-01 | 2013-02-07 | FireEye, Inc | Computer Worm Defense System and Method |
US9628498B1 (en) | 2004-04-01 | 2017-04-18 | Fireeye, Inc. | System and method for bot detection |
US8793787B2 (en) | 2004-04-01 | 2014-07-29 | Fireeye, Inc. | Detecting malicious network content using virtual environment components |
US8291499B2 (en) | 2004-04-01 | 2012-10-16 | Fireeye, Inc. | Policy based capture with replay to virtual machine |
US8881282B1 (en) | 2004-04-01 | 2014-11-04 | Fireeye, Inc. | Systems and methods for malware attack detection and identification |
US9282109B1 (en) | 2004-04-01 | 2016-03-08 | Fireeye, Inc. | System and method for analyzing packets |
US8984638B1 (en) | 2004-04-01 | 2015-03-17 | Fireeye, Inc. | System and method for analyzing suspicious network data |
US20070250930A1 (en) | 2004-04-01 | 2007-10-25 | Ashar Aziz | Virtual machine with dynamic data flow analysis |
US8584239B2 (en) | 2004-04-01 | 2013-11-12 | Fireeye, Inc. | Virtual machine with dynamic data flow analysis |
US9838411B1 (en) | 2004-04-01 | 2017-12-05 | Fireeye, Inc. | Subscriber based protection system |
US9912684B1 (en) | 2004-04-01 | 2018-03-06 | Fireeye, Inc. | System and method for virtual analysis of network data |
US9661018B1 (en) | 2004-04-01 | 2017-05-23 | Fireeye, Inc. | System and method for detecting anomalous behaviors using a virtual machine environment |
US20110314546A1 (en) | 2004-04-01 | 2011-12-22 | Ashar Aziz | Electronic Message Analysis for Malware Detection |
US9356944B1 (en) | 2004-04-01 | 2016-05-31 | Fireeye, Inc. | System and method for detecting malicious traffic using a virtual machine configured with a select software environment |
US20160301703A1 (en) | 2004-04-01 | 2016-10-13 | Fireeye, Inc. | Systems and methods for computer worm defense |
US20120174186A1 (en) | 2004-04-01 | 2012-07-05 | Ashar Aziz | Policy Based Capture with Replay to Virtual Machine |
US8898788B1 (en) | 2004-04-01 | 2014-11-25 | Fireeye, Inc. | Systems and methods for malware attack prevention |
US20130047257A1 (en) | 2004-04-01 | 2013-02-21 | Ashar Aziz | Systems and Methods for Computer Worm Defense |
US20080005782A1 (en) | 2004-04-01 | 2008-01-03 | Ashar Aziz | Heuristic based capture with replay to virtual machine |
US9591020B1 (en) | 2004-04-01 | 2017-03-07 | Fireeye, Inc. | System and method for signature generation |
US20100192223A1 (en) | 2004-04-01 | 2010-07-29 | Osman Abdoul Ismael | Detecting Malicious Network Content Using Virtual Environment Components |
US9306960B1 (en) | 2004-04-01 | 2016-04-05 | Fireeye, Inc. | Systems and methods for unauthorized activity defense |
US9106694B2 (en) | 2004-04-01 | 2015-08-11 | Fireeye, Inc. | Electronic message analysis for malware detection |
US10027690B2 (en) | 2004-04-01 | 2018-07-17 | Fireeye, Inc. | Electronic message analysis for malware detection |
US10068091B1 (en) | 2004-04-01 | 2018-09-04 | Fireeye, Inc. | System and method for malware containment |
US8561177B1 (en) | 2004-04-01 | 2013-10-15 | Fireeye, Inc. | Systems and methods for detecting communication channels of bots |
US10165000B1 (en) | 2004-04-01 | 2018-12-25 | Fireeye, Inc. | Systems and methods for malware attack prevention by intercepting flows of information |
US8204984B1 (en) | 2004-04-01 | 2012-06-19 | Fireeye, Inc. | Systems and methods for detecting encrypted bot command and control communication channels |
US10097573B1 (en) | 2004-04-01 | 2018-10-09 | Fireeye, Inc. | Systems and methods for malware defense |
US20160127393A1 (en) | 2004-04-01 | 2016-05-05 | Fireeye, Inc. | Electronic Message Analysis For Malware Detection |
US9027135B1 (en) | 2004-04-01 | 2015-05-05 | Fireeye, Inc. | Prospective client identification using malware attack detection |
US9516057B2 (en) | 2004-04-01 | 2016-12-06 | Fireeye, Inc. | Systems and methods for computer worm defense |
US9071638B1 (en) | 2004-04-01 | 2015-06-30 | Fireeye, Inc. | System and method for malware containment |
US20080307524A1 (en) | 2004-04-08 | 2008-12-11 | The Regents Of The University Of California | Detecting Public Network Attacks Using Signatures and Fast Content Analysis |
US20050238005A1 (en) | 2004-04-21 | 2005-10-27 | Yi-Fen Chen | Method and apparatus for controlling traffic in a computer network |
US20050240781A1 (en) | 2004-04-22 | 2005-10-27 | Gassoway Paul A | Prioritizing intrusion detection logs |
US7779463B2 (en) | 2004-05-11 | 2010-08-17 | The Trustees Of Columbia University In The City Of New York | Systems and methods for correlating and distributing intrusion alert information among collaborating computer systems |
US20100281541A1 (en) | 2004-05-11 | 2010-11-04 | The Trustees Of Columbia University In The City Of New York | Systems and Methods for Correlating and Distributing Intrusion Alert Information Among Collaborating Computer Systems |
US20050262562A1 (en) | 2004-05-21 | 2005-11-24 | Paul Gassoway | Systems and methods of computer security |
US7441272B2 (en) | 2004-06-09 | 2008-10-21 | Intel Corporation | Techniques for self-isolation of networked devices |
US9838416B1 (en) | 2004-06-14 | 2017-12-05 | Fireeye, Inc. | System and method of detecting malicious content |
US20110093951A1 (en) | 2004-06-14 | 2011-04-21 | NetForts, Inc. | Computer worm defense system and method |
US20110099633A1 (en) | 2004-06-14 | 2011-04-28 | NetForts, Inc. | System and method of containing computer worms |
US8006305B2 (en) | 2004-06-14 | 2011-08-23 | Fireeye, Inc. | Computer worm defense system and method |
US8549638B2 (en) | 2004-06-14 | 2013-10-01 | Fireeye, Inc. | System and method of containing computer worms |
US20060021029A1 (en) | 2004-06-29 | 2006-01-26 | Brickell Ernie F | Method of improving computer security through sandboxing |
US20060010495A1 (en) | 2004-07-06 | 2006-01-12 | Oded Cohen | Method for protecting a computer from suspicious objects |
US20060015747A1 (en) | 2004-07-16 | 2006-01-19 | Red Hat, Inc. | System and method for detecting computer virus |
US20060015715A1 (en) | 2004-07-16 | 2006-01-19 | Eric Anderson | Automatically protecting network service from network attack |
US20070271446A1 (en) | 2004-07-16 | 2007-11-22 | Tomonori Nakamura | Application Execution Device and Application Execution Device Application Execution Method |
US20060021054A1 (en) | 2004-07-21 | 2006-01-26 | Microsoft Corporation | Containment of worms |
US7603715B2 (en) | 2004-07-21 | 2009-10-13 | Microsoft Corporation | Containment of worms |
US20060031476A1 (en) | 2004-08-05 | 2006-02-09 | Mathes Marvin L | Apparatus and method for remotely monitoring a computer network |
US7949849B2 (en) | 2004-08-24 | 2011-05-24 | Mcafee, Inc. | File system for a capture system |
US20070006313A1 (en) | 2004-09-17 | 2007-01-04 | Phillip Porras | Method and apparatus for combating malicious code |
US20060070130A1 (en) | 2004-09-27 | 2006-03-30 | Microsoft Corporation | System and method of identifying the source of an attack on a computer network |
US20090083369A1 (en) | 2004-10-04 | 2009-03-26 | Netmask (El-Mar) | Dynamic content conversion |
US7478428B1 (en) | 2004-10-12 | 2009-01-13 | Microsoft Corporation | Adapting input to find integer overflows |
US20060101516A1 (en) | 2004-10-12 | 2006-05-11 | Sushanthan Sudaharan | Honeynet farms as an early warning system for production networks |
US7849506B1 (en) | 2004-10-12 | 2010-12-07 | Avaya Inc. | Switching device, method, and computer program for efficient intrusion detection |
US20060095968A1 (en) | 2004-10-28 | 2006-05-04 | Cisco Technology, Inc. | Intrusion detection in a data center environment |
US20060101517A1 (en) | 2004-10-28 | 2006-05-11 | Banzhof Carl E | Inventory management-based computer vulnerability resolution system |
US20090328185A1 (en) | 2004-11-04 | 2009-12-31 | Eric Van Den Berg | Detecting exploit code in network flows |
US20060161987A1 (en) | 2004-11-10 | 2006-07-20 | Guy Levy-Yurista | Detecting and remedying unauthorized computer programs |
US7540025B2 (en) | 2004-11-18 | 2009-05-26 | Cisco Technology, Inc. | Mitigating network attacks using automatic signature generation |
US7784097B1 (en) | 2004-11-24 | 2010-08-24 | The Trustees Of Columbia University In The City Of New York | Systems and methods for correlating and distributing intrusion alert information among collaborating computer systems |
US20100281542A1 (en) | 2004-11-24 | 2010-11-04 | The Trustees Of Columbia University In The City Of New York | Systems and Methods for Correlating and Distributing Intrusion Alert Information Among Collaborating Computer Systems |
US20060117385A1 (en) | 2004-11-30 | 2006-06-01 | Mester Michael L | Monitoring propagation protection within a network |
US7996556B2 (en) | 2004-12-06 | 2011-08-09 | Cisco Technology, Inc. | Method and apparatus for generating a network topology representation based on inspection of application messages at a network device |
US20060123477A1 (en) | 2004-12-06 | 2006-06-08 | Kollivakkam Raghavan | Method and apparatus for generating a network topology representation based on inspection of application messages at a network device |
US20060161989A1 (en) | 2004-12-13 | 2006-07-20 | Eran Reshef | System and method for deterring rogue users from attacking protected legitimate users |
US7937761B1 (en) | 2004-12-17 | 2011-05-03 | Symantec Corporation | Differential threat detection processing |
US20060143709A1 (en) | 2004-12-27 | 2006-06-29 | Raytheon Company | Network intrusion prevention |
US20060161983A1 (en) | 2005-01-20 | 2006-07-20 | Cothrell Scott A | Inline intrusion detection |
US20060164199A1 (en) | 2005-01-26 | 2006-07-27 | Lockdown Networks, Inc. | Network appliance for securely quarantining a node on a network |
US7676841B2 (en) | 2005-02-01 | 2010-03-09 | Fmr Llc | Network intrusion mitigation |
US20060179147A1 (en) | 2005-02-07 | 2006-08-10 | Veritas Operating Corporation | System and method for connection failover using redirection |
US20060184632A1 (en) | 2005-02-15 | 2006-08-17 | Spam Cube, Inc. | Apparatus and method for analyzing and filtering email and for providing web related services |
US20060191010A1 (en) | 2005-02-18 | 2006-08-24 | Pace University | System for intrusion detection and vulnerability assessment in a computer network using simulation and machine learning |
US7869073B2 (en) | 2005-03-22 | 2011-01-11 | Fuji Xerox Co., Ltd. | Image forming system, image forming method and information terminal device |
US20060221956A1 (en) | 2005-03-31 | 2006-10-05 | Narayan Harsha L | Methods for performing packet classification via prefix pair bit vectors |
US20060236393A1 (en) | 2005-03-31 | 2006-10-19 | Microsoft Corporation | System and method for protecting a limited resource computer from malware |
US20060251104A1 (en) | 2005-03-31 | 2006-11-09 | Fujitsu Limited | Service apparatus, method of controlling switching of connection destination of client apparatus by service apparatus, and storage medium readable by machine |
US7568233B1 (en) | 2005-04-01 | 2009-07-28 | Symantec Corporation | Detecting malicious software through process dump scanning |
US20080098476A1 (en) | 2005-04-04 | 2008-04-24 | Bae Systems Information And Electronic Systems Integration Inc. | Method and Apparatus for Defending Against Zero-Day Worm-Based Attacks |
US7904959B2 (en) | 2005-04-18 | 2011-03-08 | The Trustees Of Columbia University In The City Of New York | Systems and methods for detecting and inhibiting attacks using honeypots |
US20060242709A1 (en) | 2005-04-21 | 2006-10-26 | Microsoft Corporation | Protecting a computer that provides a Web service from malware |
US20060248582A1 (en) | 2005-04-28 | 2006-11-02 | Panjwani Dileep K | One-way proxy system |
US20060248519A1 (en) | 2005-05-02 | 2006-11-02 | Ibm Corporation | Methods and arrangements for unified program analysis |
US7480773B1 (en) | 2005-05-02 | 2009-01-20 | Sprint Communications Company L.P. | Virtual machine use and optimization of hardware configurations |
US7854007B2 (en) | 2005-05-05 | 2010-12-14 | Ironport Systems, Inc. | Identifying threats in electronic messages |
US7712136B2 (en) | 2005-05-05 | 2010-05-04 | Ironport Systems, Inc. | Controlling a message quarantine |
US20070220607A1 (en) | 2005-05-05 | 2007-09-20 | Craig Sprosts | Determining whether to quarantine a message |
US7930738B1 (en) | 2005-06-02 | 2011-04-19 | Adobe Systems Incorporated | Method and apparatus for secure execution of code |
US20120297489A1 (en) | 2005-06-06 | 2012-11-22 | International Business Machines Corporation | Computer network intrusion detection |
US20060288417A1 (en) | 2005-06-21 | 2006-12-21 | Sbc Knowledge Ventures Lp | Method and apparatus for mitigating the effects of malicious software in a communication network |
US7877803B2 (en) | 2005-06-27 | 2011-01-25 | Hewlett-Packard Development Company, L.P. | Automated immune response for a computer |
US20070006288A1 (en) | 2005-06-30 | 2007-01-04 | Microsoft Corporation | Controlling network access |
US20070016951A1 (en) | 2005-07-13 | 2007-01-18 | Piccard Paul L | Systems and methods for identifying sources of malware |
US20070019286A1 (en) | 2005-07-20 | 2007-01-25 | Alps Electric Co., Ltd. | Wavelength branching filter and optical communication module |
US20070033645A1 (en) | 2005-07-22 | 2007-02-08 | Alcatel | DNS based enforcement for confinement and detection of network malicious activities |
US20070038943A1 (en) | 2005-08-15 | 2007-02-15 | Cisco Technology, Inc. | Interactive text communication system |
US20070074169A1 (en) | 2005-08-25 | 2007-03-29 | Fortify Software, Inc. | Apparatus and method for analyzing and supplementing a program to provide security |
US7739740B1 (en) | 2005-09-22 | 2010-06-15 | Symantec Corporation | Detecting polymorphic threats |
US20070101435A1 (en) | 2005-10-14 | 2007-05-03 | Check Point Software Technologies, Inc. | System and Methodology Providing Secure Workspace Environment |
US20090300415A1 (en) | 2005-10-19 | 2009-12-03 | Lenovo (Beijing) Limited | Computer System and Method for Performing Integrity Detection on the Same |
US7730011B1 (en) | 2005-10-19 | 2010-06-01 | Mcafee, Inc. | Attributes of captured objects in a capture system |
US8176049B2 (en) | 2005-10-19 | 2012-05-08 | Mcafee Inc. | Attributes of captured objects in a capture system |
US20070094730A1 (en) | 2005-10-20 | 2007-04-26 | Cisco Technology, Inc. | Mechanism to correlate the presence of worms in a network |
US20090158430A1 (en) | 2005-10-21 | 2009-06-18 | Borders Kevin R | Method, system and computer program product for detecting at least one of security threats and undesirable computer files |
US20080028463A1 (en) | 2005-10-27 | 2008-01-31 | Damballa, Inc. | Method and system for detecting and responding to attacking networks |
US20070128855A1 (en) | 2005-12-07 | 2007-06-07 | Samsung Electro-Mechanics Co., Ltd. | Printed wiring board and method for manufacturing the same |
US7698548B2 (en) | 2005-12-08 | 2010-04-13 | Microsoft Corporation | Communications traffic segregation for security purposes |
US20070142030A1 (en) | 2005-12-19 | 2007-06-21 | Airdefense, Inc. | Systems and methods for wireless vulnerability analysis |
US20070143827A1 (en) | 2005-12-21 | 2007-06-21 | Fiberlink | Methods and systems for intelligently controlling access to computing resources |
US20080018122A1 (en) | 2005-12-28 | 2008-01-24 | Robert Zierler | Rifle Sling and Method of Use Thereof |
US20070156895A1 (en) | 2005-12-29 | 2007-07-05 | Research In Motion Limited | System and method of dynamic management of spam |
US20070157180A1 (en) | 2005-12-30 | 2007-07-05 | Microsoft Corporation | Approximating finite domains in symbolic state exploration |
US20070157306A1 (en) | 2005-12-30 | 2007-07-05 | Elrod Craig T | Network threat detection and mitigation |
US20090271867A1 (en) | 2005-12-30 | 2009-10-29 | Peng Zhang | Virtual machine to detect malicious code |
US20070168988A1 (en) | 2006-01-11 | 2007-07-19 | International Business Machines Corporation | Software verification using hybrid explicit and symbolic model checking |
US20070174915A1 (en) | 2006-01-23 | 2007-07-26 | University Of Washington | Detection of spyware threats within virtual machine |
US20130014259A1 (en) | 2006-01-23 | 2013-01-10 | University Of Washington Through Its Center For Commercialization | Detection of spyware threats within virtual machine |
US20070171824A1 (en) | 2006-01-25 | 2007-07-26 | Cisco Technology, Inc. A California Corporation | Sampling rate-limited traffic |
US20070192858A1 (en) | 2006-02-16 | 2007-08-16 | Infoexpress, Inc. | Peer based network access control |
US20070192500A1 (en) | 2006-02-16 | 2007-08-16 | Infoexpress, Inc. | Network access control including dynamic policy enforcement point |
US8176480B1 (en) | 2006-02-27 | 2012-05-08 | Symantec Operating Corporation | Adaptive instrumentation through dynamic recompilation |
US8381299B2 (en) | 2006-02-28 | 2013-02-19 | The Trustees Of Columbia University In The City Of New York | Systems, methods, and media for outputting a dataset based upon anomaly detection |
US20090193293A1 (en) | 2006-02-28 | 2009-07-30 | Stolfo Salvatore J | Systems, Methods, and Media for Outputting Data Based Upon Anomaly Detection |
US20070208822A1 (en) | 2006-03-01 | 2007-09-06 | Microsoft Corporation | Honey Monkey Network Exploration |
US20090144823A1 (en) | 2006-03-27 | 2009-06-04 | Gerardo Lamastra | Method and System for Mobile Network Security, Related Network and Computer Program Product |
US20080046781A1 (en) | 2006-03-29 | 2008-02-21 | Childs Philip L | System and method for booting alternate MBR in event of virus attack |
US20080040710A1 (en) | 2006-04-05 | 2008-02-14 | Prevx Limited | Method, computer program and computer for analysing an executable computer file |
US8479174B2 (en) | 2006-04-05 | 2013-07-02 | Prevx Limited | Method, computer program and computer for analyzing an executable computer file |
WO2007117636A2 (en) | 2006-04-06 | 2007-10-18 | Smobile Systems, Inc. | Malware detection system and method for comprssed data on mobile platforms |
US20070240218A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | Malware Detection System and Method for Mobile Platforms |
US8312545B2 (en) | 2006-04-06 | 2012-11-13 | Juniper Networks, Inc. | Non-signature malware detection system and method for mobile platforms |
US20070240220A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | System and method for managing malware protection on mobile devices |
US20070240219A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | Malware Detection System And Method for Compressed Data on Mobile Platforms |
US8321941B2 (en) | 2006-04-06 | 2012-11-27 | Juniper Networks, Inc. | Malware modeling detection system and method for mobile platforms |
US20070240222A1 (en) | 2006-04-06 | 2007-10-11 | George Tuvell | System and Method for Managing Malware Protection on Mobile Devices |
US20070245417A1 (en) | 2006-04-17 | 2007-10-18 | Hojae Lee | Malicious Attack Detection System and An Associated Method of Use |
US8566946B1 (en) | 2006-04-20 | 2013-10-22 | Fireeye, Inc. | Malware containment on connection |
US8375444B2 (en) | 2006-04-20 | 2013-02-12 | Fireeye, Inc. | Dynamic signature creation and enforcement |
US20120331553A1 (en) | 2006-04-20 | 2012-12-27 | Fireeye, Inc. | Dynamic signature creation and enforcement |
US8510827B1 (en) | 2006-05-18 | 2013-08-13 | Vmware, Inc. | Taint tracking mechanism for computer security |
US20090187992A1 (en) | 2006-06-30 | 2009-07-23 | Poston Robert J | Method and system for classification of software using characteristics and combinations of such characteristics |
GB2439806A (en) | 2006-06-30 | 2008-01-09 | Sophos Plc | Classifying software as malware using characteristics (or "genes") |
US8365286B2 (en) | 2006-06-30 | 2013-01-29 | Sophos Plc | Method and system for classification of software using characteristics and combinations of such characteristics |
US8020206B2 (en) | 2006-07-10 | 2011-09-13 | Websense, Inc. | System and method of analyzing web content |
US20080066179A1 (en) | 2006-09-11 | 2008-03-13 | Fujian Eastern Micropoint Info-Tech Co., Ltd. | Antivirus protection system and method for computers |
US8789172B2 (en) | 2006-09-18 | 2014-07-22 | The Trustees Of Columbia University In The City Of New York | Methods, media, and systems for detecting attack on a digital processing device |
US20080077793A1 (en) | 2006-09-21 | 2008-03-27 | Sensory Networks, Inc. | Apparatus and method for high throughput network security systems |
US20080080518A1 (en) | 2006-09-29 | 2008-04-03 | Hoeflin David A | Method and apparatus for detecting compromised host computers |
US20100017546A1 (en) | 2006-10-04 | 2010-01-21 | Trek 2000 International Ltd. | Method, apparatus and system for authentication of external storage devices |
WO2008041950A2 (en) | 2006-10-04 | 2008-04-10 | Trek 2000 International Ltd. | Method, apparatus and system for authentication of external storage devices |
US20080086720A1 (en) | 2006-10-10 | 2008-04-10 | Reinhard Lekel | Data processing system and method for execution of a test routine in connection with an operating system |
US8225373B2 (en) | 2006-10-11 | 2012-07-17 | Cisco Technology, Inc. | Protection of computer resources |
US7832008B1 (en) | 2006-10-11 | 2010-11-09 | Cisco Technology, Inc. | Protection of computer resources |
US20080134178A1 (en) | 2006-10-17 | 2008-06-05 | Manageiq, Inc. | Control and management of virtual systems |
US8234640B1 (en) | 2006-10-17 | 2012-07-31 | Manageiq, Inc. | Compliance-based adaptations in managed virtual systems |
US8042184B1 (en) | 2006-10-18 | 2011-10-18 | Kaspersky Lab, Zao | Rapid analysis of data stream for malware presence |
US20080141376A1 (en) | 2006-10-24 | 2008-06-12 | Pc Tools Technology Pty Ltd. | Determining maliciousness of software |
US20080120722A1 (en) | 2006-11-17 | 2008-05-22 | Caleb Sima | Web application assessment based on intelligent generation of attack strings |
US20080134334A1 (en) | 2006-11-30 | 2008-06-05 | Electronics And Telecommunications Research Institute | Apparatus and method for detecting network attack |
US8533824B2 (en) | 2006-12-04 | 2013-09-10 | Glasswall (Ip) Limited | Resisting the spread of unwanted code and data |
US20090031423A1 (en) | 2006-12-20 | 2009-01-29 | Peng Liu | Proactive worm containment (pwc) for enterprise networks |
US8286251B2 (en) | 2006-12-21 | 2012-10-09 | Telefonaktiebolaget L M Ericsson (Publ) | Obfuscating computer program code |
US8045094B2 (en) | 2006-12-26 | 2011-10-25 | Sharp Kabushiki Kaisha | Backlight device, display device, and television receiver |
US7996836B1 (en) | 2006-12-29 | 2011-08-09 | Symantec Corporation | Using a hypervisor to provide computer security |
US20080184373A1 (en) | 2007-01-25 | 2008-07-31 | Microsoft Corporation | Protection Agents and Privilege Modes |
US8069484B2 (en) | 2007-01-25 | 2011-11-29 | Mandiant Corporation | System and method for determining data entropy to identify malware |
US20080184367A1 (en) | 2007-01-25 | 2008-07-31 | Mandiant, Inc. | System and method for determining data entropy to identify malware |
US7908660B2 (en) | 2007-02-06 | 2011-03-15 | Microsoft Corporation | Dynamic risk management |
US20080201778A1 (en) | 2007-02-21 | 2008-08-21 | Matsushita Electric Industrial Co., Ltd. | Intrusion detection using system call monitors on a bayesian network |
US20080209557A1 (en) | 2007-02-28 | 2008-08-28 | Microsoft Corporation | Spyware detection mechanism |
US20080222729A1 (en) | 2007-03-05 | 2008-09-11 | Songqing Chen | Containment of Unknown and Polymorphic Fast Spreading Worms |
US20090077666A1 (en) | 2007-03-12 | 2009-03-19 | University Of Southern California | Value-Adaptive Security Threat Modeling and Vulnerability Ranking |
US20080320594A1 (en) | 2007-03-19 | 2008-12-25 | Xuxian Jiang | Malware Detector |
US20090064332A1 (en) | 2007-04-04 | 2009-03-05 | Phillip Andrew Porras | Method and apparatus for generating highly predictive blacklists |
US20090172815A1 (en) | 2007-04-04 | 2009-07-02 | Guofei Gu | Method and apparatus for detecting malware infection |
US20080263665A1 (en) | 2007-04-20 | 2008-10-23 | Juniper Networks, Inc. | Network attack detection using partial deterministic finite automaton pattern matching |
US20080295172A1 (en) | 2007-05-22 | 2008-11-27 | Khushboo Bohacek | Method, system and computer-readable media for reducing undesired intrusion alarms in electronic communications systems and networks |
US8402529B1 (en) | 2007-05-30 | 2013-03-19 | M86 Security, Inc. | Preventing propagation of malicious software during execution in a virtual machine |
US8321936B1 (en) | 2007-05-30 | 2012-11-27 | M86 Security, Inc. | System and method for malicious software detection in multiple protocols |
US20080301810A1 (en) | 2007-06-04 | 2008-12-04 | Agilent Technologies, Inc. | Monitoring apparatus and method therefor |
US20080313738A1 (en) | 2007-06-15 | 2008-12-18 | Broadcom Corporation | Multi-Stage Deep Packet Inspection for Lightweight Devices |
US20090007100A1 (en) | 2007-06-28 | 2009-01-01 | Microsoft Corporation | Suspending a Running Operating System to Enable Security Scanning |
US20090003317A1 (en) | 2007-06-29 | 2009-01-01 | Kasralikar Rahul S | Method and mechanism for port redirects in a network switch |
US8584094B2 (en) | 2007-06-29 | 2013-11-12 | Microsoft Corporation | Dynamically computing reputation scores for objects |
US7836502B1 (en) | 2007-07-03 | 2010-11-16 | Trend Micro Inc. | Scheduled gateway scanning arrangement and methods thereof |
US20090013408A1 (en) | 2007-07-06 | 2009-01-08 | Messagelabs Limited | Detection of exploits in files |
US20090036111A1 (en) | 2007-07-30 | 2009-02-05 | Mobile Iron, Inc. | Virtual Instance Architecture for Mobile Device Management Systems |
US20090037835A1 (en) | 2007-07-30 | 2009-02-05 | Adobe Systems Incorporated | Application Tracking for Application Execution Environment |
US20090044024A1 (en) | 2007-08-06 | 2009-02-12 | The Regents Of The University Of Michigan | Network service for the detection, analysis and quarantine of malicious and unwanted files |
US20090044274A1 (en) | 2007-08-08 | 2009-02-12 | Vmware, Inc. | Impeding Progress of Malicious Guest Software |
US20130246370A1 (en) | 2007-08-29 | 2013-09-19 | Anthony V. Bartram | System, method, and computer program product for determining whether code is unwanted based on the decompilation thereof |
US8464340B2 (en) | 2007-09-04 | 2013-06-11 | Samsung Electronics Co., Ltd. | System, apparatus and method of malware diagnosis mechanism based on immunization database |
US8307443B2 (en) | 2007-09-28 | 2012-11-06 | Microsoft Corporation | Securing anti-virus software with virtualization |
US20090089879A1 (en) | 2007-09-28 | 2009-04-02 | Microsoft Corporation | Securing anti-virus software with virtualization |
US20090126015A1 (en) | 2007-10-02 | 2009-05-14 | Monastyrsky Alexey V | System and method for detecting multi-component malware |
US20090126016A1 (en) | 2007-10-02 | 2009-05-14 | Andrey Sobko | System and method for detecting multi-component malware |
US20090094697A1 (en) | 2007-10-05 | 2009-04-09 | Google Inc. | Intrusive software management |
US20090113425A1 (en) | 2007-10-30 | 2009-04-30 | Vmware, Inc. | Transparent Memory-Mapped Emulation of I/O Calls |
US8045458B2 (en) | 2007-11-08 | 2011-10-25 | Mcafee, Inc. | Prioritizing network traffic |
US20090125976A1 (en) | 2007-11-08 | 2009-05-14 | Docomo Communications Laboratories Usa, Inc. | Automated test input generation for web applications |
US20090133125A1 (en) | 2007-11-21 | 2009-05-21 | Yang Seo Choi | Method and apparatus for malware detection |
US8010667B2 (en) | 2007-12-12 | 2011-08-30 | Vmware, Inc. | On-access anti-virus mechanism for virtual machine architecture |
US7996904B1 (en) | 2007-12-19 | 2011-08-09 | Symantec Corporation | Automated unpacking of executables packed by multiple layers of arbitrary packers |
US8510828B1 (en) | 2007-12-31 | 2013-08-13 | Symantec Corporation | Enforcing the execution exception to prevent packers from evading the scanning of dynamically created code |
US8225288B2 (en) | 2008-01-29 | 2012-07-17 | Intuit Inc. | Model-based testing using branches, decisions, and options |
US9106630B2 (en) | 2008-02-01 | 2015-08-11 | Mandiant, Llc | Method and system for collaboration during an event |
US20130318038A1 (en) | 2008-02-01 | 2013-11-28 | Jason Shiffer | Method and System for Analyzing Data Related to an Event |
US8793278B2 (en) | 2008-02-01 | 2014-07-29 | Mandiant, Llc | System and method for data preservation and retrieval |
US20110173213A1 (en) | 2008-02-01 | 2011-07-14 | Matthew Frazier | System and method for data preservation and retrieval |
US8949257B2 (en) | 2008-02-01 | 2015-02-03 | Mandiant, Llc | Method and system for collecting and organizing data corresponding to an event |
US7937387B2 (en) | 2008-02-01 | 2011-05-03 | Mandiant | System and method for data preservation and retrieval |
US10146810B2 (en) | 2008-02-01 | 2018-12-04 | Fireeye, Inc. | Method and system for collecting and organizing data corresponding to an event |
US8566476B2 (en) | 2008-02-01 | 2013-10-22 | Mandiant Corporation | Method and system for analyzing data related to an event |
US20090198670A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for collecting and organizing data corresponding to an event |
US20090198689A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | System and method for data preservation and retrieval |
US20130318073A1 (en) | 2008-02-01 | 2013-11-28 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US20130325792A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Analyzing Data Related to an Event |
US20090199274A1 (en) | 2008-02-01 | 2009-08-06 | Matthew Frazier | method and system for collaboration during an event |
US20130325791A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Analyzing Data Related to an Event |
US20130325871A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US20130325872A1 (en) | 2008-02-01 | 2013-12-05 | Jason Shiffer | Method and System for Collecting and Organizing Data Corresponding to an Event |
US20090198651A1 (en) | 2008-02-01 | 2009-08-06 | Jason Shiffer | Method and system for analyzing data related to an event |
US8595834B2 (en) | 2008-02-04 | 2013-11-26 | Samsung Electronics Co., Ltd | Detecting unauthorized use of computing devices based on behavioral patterns |
US20100031353A1 (en) | 2008-02-04 | 2010-02-04 | Microsoft Corporation | Malware Detection Using Code Analysis and Behavior Monitoring |
US20090199296A1 (en) | 2008-02-04 | 2009-08-06 | Samsung Electronics Co., Ltd. | Detecting unauthorized use of computing devices based on behavioral patterns |
US8201246B1 (en) | 2008-02-25 | 2012-06-12 | Trend Micro Incorporated | Preventing malicious codes from performing malicious actions in a computer system |
US8805947B1 (en) | 2008-02-27 | 2014-08-12 | Parallels IP Holdings GmbH | Method and system for remote device access in virtual environment |
US20090228233A1 (en) | 2008-03-06 | 2009-09-10 | Anderson Gary F | Rank-based evaluation |
US20090241187A1 (en) | 2008-03-19 | 2009-09-24 | Websense, Inc. | Method and system for protection against information stealing software |
US20090241190A1 (en) | 2008-03-24 | 2009-09-24 | Michael Todd | System and method for securing a network from zero-day vulnerability exploits |
US8239944B1 (en) | 2008-03-28 | 2012-08-07 | Symantec Corporation | Reducing malware signature set size through server-side processing |
US20090265692A1 (en) | 2008-04-21 | 2009-10-22 | Microsoft Corporation | Active property checking |
US20110167493A1 (en) | 2008-05-27 | 2011-07-07 | Yingbo Song | Systems, methods, ane media for detecting network anomalies |
US20090300761A1 (en) | 2008-05-28 | 2009-12-03 | John Park | Intelligent Hashes for Centralized Malware Detection |
US8516478B1 (en) | 2008-06-12 | 2013-08-20 | Mcafee, Inc. | Subsequent processing of scanning task utilizing subset of virtual machines predetermined to have scanner process and adjusting amount of subsequest VMs processing based on load |
US8234709B2 (en) | 2008-06-20 | 2012-07-31 | Symantec Operating Corporation | Streaming malware definition updates |
US20090328221A1 (en) | 2008-06-30 | 2009-12-31 | Microsoft Corporation | Malware detention for suspected malware |
US8850570B1 (en) | 2008-06-30 | 2014-09-30 | Symantec Corporation | Filter-based identification of malicious websites |
US8087086B1 (en) | 2008-06-30 | 2011-12-27 | Symantec Corporation | Method for mitigating false positive generation in antivirus software |
US20100005146A1 (en) | 2008-07-03 | 2010-01-07 | Barracuda Networks Inc. | Facilitating transmission of email by checking email parameters with a database of well behaved senders |
US20100030996A1 (en) | 2008-08-01 | 2010-02-04 | Mandiant, Inc. | System and Method for Forensic Identification of Elements Within a Computer System |
US8881271B2 (en) | 2008-08-01 | 2014-11-04 | Mandiant, Llc | System and method for forensic identification of elements within a computer system |
US20100037314A1 (en) | 2008-08-11 | 2010-02-11 | Perdisci Roberto | Method and system for detecting malicious and/or botnet-related domain names |
US20100043073A1 (en) | 2008-08-13 | 2010-02-18 | Fujitsu Limited | Anti-virus method, computer, and recording medium |
US20100058474A1 (en) | 2008-08-29 | 2010-03-04 | Avg Technologies Cz, S.R.O. | System and method for the detection of malware |
US20100064044A1 (en) | 2008-09-05 | 2010-03-11 | Kabushiki Kaisha Toshiba | Information Processing System and Control Method for Information Processing System |
US20100077481A1 (en) | 2008-09-22 | 2010-03-25 | Microsoft Corporation | Collecting and analyzing malware data |
US20100083376A1 (en) | 2008-09-26 | 2010-04-01 | Symantec Corporation | Method and apparatus for reducing false positive detection of malware |
US8028338B1 (en) | 2008-09-30 | 2011-09-27 | Symantec Corporation | Modeling goodware characteristics to reduce false positive malware signatures |
US8332571B1 (en) | 2008-10-07 | 2012-12-11 | Vizioncore, Inc. | Systems and methods for improving virtual machine performance |
US20110173460A1 (en) | 2008-10-10 | 2011-07-14 | Takayuki Ito | Information processing device, method, program, and integrated circuit |
US20110047594A1 (en) | 2008-10-21 | 2011-02-24 | Lookout, Inc., A California Corporation | System and method for mobile communication device application advisement |
US20110145920A1 (en) | 2008-10-21 | 2011-06-16 | Lookout, Inc | System and method for adverse mobile application identification |
US20130263260A1 (en) | 2008-10-21 | 2013-10-03 | Lookout, Inc. | System and method for assessing an application to be installed on a mobile communication device |
US20110047620A1 (en) | 2008-10-21 | 2011-02-24 | Lookout, Inc., A California Corporation | System and method for server-coupled malware prevention |
US20120222121A1 (en) | 2008-11-03 | 2012-08-30 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious PDF Network Content |
US20110247072A1 (en) | 2008-11-03 | 2011-10-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious PDF Network Content |
US9118715B2 (en) | 2008-11-03 | 2015-08-25 | Fireeye, Inc. | Systems and methods for detecting malicious PDF network content |
US9954890B1 (en) | 2008-11-03 | 2018-04-24 | Fireeye, Inc. | Systems and methods for analyzing PDF documents |
US8850571B2 (en) | 2008-11-03 | 2014-09-30 | Fireeye, Inc. | Systems and methods for detecting malicious network content |
US20100115621A1 (en) | 2008-11-03 | 2010-05-06 | Stuart Gresley Staniford | Systems and Methods for Detecting Malicious Network Content |
US20130291109A1 (en) | 2008-11-03 | 2013-10-31 | Fireeye, Inc. | Systems and Methods for Scheduling Analysis of Network Content for Malware |
US20150180886A1 (en) | 2008-11-03 | 2015-06-25 | Fireeye, Inc. | Systems and Methods for Scheduling Analysis of Network Content for Malware |
US8997219B2 (en) | 2008-11-03 | 2015-03-31 | Fireeye, Inc. | Systems and methods for detecting malicious PDF network content |
US9438622B1 (en) | 2008-11-03 | 2016-09-06 | Fireeye, Inc. | Systems and methods for analyzing malicious PDF network content |
US8990939B2 (en) | 2008-11-03 | 2015-03-24 | Fireeye, Inc. | Systems and methods for scheduling analysis of network content for malware |
US20100132038A1 (en) | 2008-11-26 | 2010-05-27 | Zaitsev Oleg V | System and Method for Computer Malware Detection |
US20100154056A1 (en) | 2008-12-17 | 2010-06-17 | Symantec Corporation | Context-Aware Real-Time Computer-Protection Systems and Methods |
US20100180344A1 (en) | 2009-01-10 | 2010-07-15 | Kaspersky Labs ZAO | Systems and Methods For Malware Classification |
US20110302587A1 (en) | 2009-01-16 | 2011-12-08 | Sony Computer Entertainment Inc. | Information processing device and information processing method |
US20100220863A1 (en) | 2009-02-27 | 2010-09-02 | ATMELCorporation | Key Recovery Mechanism for Cryptographic Systems |
US20100235831A1 (en) | 2009-03-12 | 2010-09-16 | Arend Erich Dittmer | Method for dynamic configuration of virtual machine |
US20100287260A1 (en) | 2009-03-13 | 2010-11-11 | Docusign, Inc. | Systems and methods for document management transformation and security |
US20100251104A1 (en) | 2009-03-27 | 2010-09-30 | Litera Technology Llc. | System and method for reflowing content in a structured portable document format (pdf) file |
US20110099620A1 (en) | 2009-04-09 | 2011-04-28 | Angelos Stavrou | Malware Detector |
US8516590B1 (en) | 2009-04-25 | 2013-08-20 | Dasient, Inc. | Malicious advertisement detection and remediation |
US8555391B1 (en) | 2009-04-25 | 2013-10-08 | Dasient, Inc. | Adaptive scanning |
US8370938B1 (en) | 2009-04-25 | 2013-02-05 | Dasient, Inc. | Mitigating malware |
US20100281102A1 (en) | 2009-05-02 | 2010-11-04 | Chinta Madhav | Methods and systems for launching applications into existing isolation environments |
US20100299754A1 (en) | 2009-05-20 | 2010-11-25 | International Business Machines Corporation | Identifying Security Breaches Caused by Web-Enabled Software Applications |
US20120066698A1 (en) | 2009-05-20 | 2012-03-15 | Nec Corporation | Dynamic data flow tracking method, dynamic data flow tracking program, and dynamic data flow tracking apparatus |
US20100306173A1 (en) | 2009-05-31 | 2010-12-02 | Shahar Frank | Handling temporary files of a virtual machine |
US8233882B2 (en) | 2009-06-26 | 2012-07-31 | Vmware, Inc. | Providing security in mobile devices via a virtualization software layer |
US20110004737A1 (en) | 2009-07-02 | 2011-01-06 | Kenneth Greenebaum | Method and apparatus for protected content data processing |
US8266091B1 (en) | 2009-07-21 | 2012-09-11 | Symantec Corporation | Systems and methods for emulating the behavior of a user in a computer-human interaction environment |
US8522348B2 (en) | 2009-07-29 | 2013-08-27 | Northwestern University | Matching with a large vulnerability signature ruleset for high performance network defense |
US20110025504A1 (en) | 2009-07-31 | 2011-02-03 | Lyon Geoff M | USB Hosted Sensor Module |
US8789178B2 (en) | 2009-08-03 | 2014-07-22 | Barracuda Networks, Inc. | Method for detecting malicious javascript |
US20110289582A1 (en) | 2009-08-03 | 2011-11-24 | Barracuda Networks, Inc. | Method for detecting malicious javascript |
US20110041179A1 (en) | 2009-08-11 | 2011-02-17 | F-Secure Oyj | Malware detection |
US20110055907A1 (en) | 2009-09-03 | 2011-03-03 | Mcafee, Inc. | Host state monitoring |
US8881234B2 (en) | 2009-09-03 | 2014-11-04 | Mcafee, Inc. | Host state monitoring |
US8935779B2 (en) | 2009-09-30 | 2015-01-13 | Fireeye, Inc. | Network-based binary file extraction and analysis for malware detection |
US20110078794A1 (en) | 2009-09-30 | 2011-03-31 | Jayaraman Manni | Network-Based Binary File Extraction and Analysis for Malware Detection |
US20120117652A1 (en) | 2009-09-30 | 2012-05-10 | Jayaraman Manni | Network-Based Binary File Extraction and Analysis for Malware Detection |
US8832829B2 (en) | 2009-09-30 | 2014-09-09 | Fireeye, Inc. | Network-based binary file extraction and analysis for malware detection |
US20110145934A1 (en) | 2009-10-13 | 2011-06-16 | Miron Abramovici | Autonomous distributed programmable logic for monitoring and securing electronic systems |
US20140237600A1 (en) | 2009-10-27 | 2014-08-21 | Peter J Silberman | System and method for detecting executable machine instructions in a data stream |
US20110099635A1 (en) | 2009-10-27 | 2011-04-28 | Silberman Peter J | System and method for detecting executable machine instructions in a data stream |
US8713681B2 (en) | 2009-10-27 | 2014-04-29 | Mandiant, Llc | System and method for detecting executable machine instructions in a data stream |
US10019573B2 (en) | 2009-10-27 | 2018-07-10 | Fireeye, Inc. | System and method for detecting executable machine instructions in a data stream |
US20110113231A1 (en) | 2009-11-12 | 2011-05-12 | Daniel Kaminsky | System and method for providing secure reception and viewing of transmitted data over a network |
WO2011084431A2 (en) | 2009-12-15 | 2011-07-14 | Mcafee, Inc. | Systems and methods for behavioral sandboxing |
US20110145918A1 (en) | 2009-12-15 | 2011-06-16 | Jaeyeon Jung | Sensitive data tracking using dynamic taint analysis |
US20110167494A1 (en) | 2009-12-31 | 2011-07-07 | Bowen Brian M | Methods, systems, and media for detecting covert malware |
US8307435B1 (en) | 2010-02-18 | 2012-11-06 | Symantec Corporation | Software object corruption detection |
US20110219449A1 (en) | 2010-03-04 | 2011-09-08 | St Neitzel Michael | Malware detection method, system and computer program product |
US20110219450A1 (en) | 2010-03-08 | 2011-09-08 | Raytheon Company | System And Method For Malware Detection |
WO2011112348A1 (en) | 2010-03-08 | 2011-09-15 | Raytheon Company | System and method for host-level malware detection |
US20110225655A1 (en) | 2010-03-15 | 2011-09-15 | F-Secure Oyj | Malware protection |
US20110225624A1 (en) | 2010-03-15 | 2011-09-15 | Symantec Corporation | Systems and Methods for Providing Network Access Control in Virtual Environments |
US20110265182A1 (en) | 2010-04-27 | 2011-10-27 | Microsoft Corporation | Malware investigation by analyzing computer memory |
US20110307956A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for analyzing malicious code using a static analyzer |
US20110307955A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for detecting malicious content |
US20110307954A1 (en) | 2010-06-11 | 2011-12-15 | M86 Security, Inc. | System and method for improving coverage for web code |
US8260914B1 (en) | 2010-06-22 | 2012-09-04 | Narus, Inc. | Detecting DNS fast-flux anomalies |
US8627476B1 (en) | 2010-07-05 | 2014-01-07 | Symantec Corporation | Altering application behavior based on content provider reputation |
US8584234B1 (en) | 2010-07-07 | 2013-11-12 | Symantec Corporation | Secure network cache content |
US8370939B2 (en) | 2010-07-23 | 2013-02-05 | Kaspersky Lab, Zao | Protection against malware on web resources |
US20120023593A1 (en) | 2010-07-26 | 2012-01-26 | Puder George | System and method for filtering internet content & blocking undesired websites by secure network appliance |
US20120079596A1 (en) | 2010-08-26 | 2012-03-29 | Verisign, Inc. | Method and system for automatic detection and analysis of malware |
US20120054869A1 (en) | 2010-08-31 | 2012-03-01 | Chui-Tin Yen | Method and apparatus for detecting botnets |
US20120084859A1 (en) | 2010-09-30 | 2012-04-05 | Microsoft Corporation | Realtime multiple engine selection and combining |
US20120096553A1 (en) | 2010-10-19 | 2012-04-19 | Manoj Kumar Srivastava | Social Engineering Protection Appliance |
US8479291B1 (en) | 2010-10-28 | 2013-07-02 | Symantec Corporation | Systems and methods for identifying polymorphic malware |
US20120110667A1 (en) | 2010-11-01 | 2012-05-03 | Zubrilin Sergey A | System and Method for Server-Based Antivirus Scan of Data Downloaded From a Network |
US20120124426A1 (en) | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Debugging in a cluster processing network |
US8682054B2 (en) | 2010-11-15 | 2014-03-25 | Siemens Aktiengesellschaft | Method and system for propagation of myocardial infarction from delayed enhanced cardiac imaging to cine magnetic resonance imaging using hybrid image registration |
US20120121154A1 (en) | 2010-11-15 | 2012-05-17 | Siemens Corporation | Method and System for Propagation of Myocardial Infarction from Delayed Enhanced Cardiac Imaging to Cine Magnetic Resonance Imaging Using Hybrid Image Registration |
US20120210423A1 (en) | 2010-12-01 | 2012-08-16 | Oliver Friedrichs | Method and apparatus for detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
WO2012075336A1 (en) | 2010-12-01 | 2012-06-07 | Sourcefire, Inc. | Detecting malicious software through contextual convictions, generic signatures and machine learning techniques |
US8682812B1 (en) | 2010-12-23 | 2014-03-25 | Narus, Inc. | Machine learning based botnet detection using real-time extracted traffic features |
US8479276B1 (en) | 2010-12-29 | 2013-07-02 | Emc Corporation | Malware detection using risk analysis based on file system and network activity |
US20120174196A1 (en) | 2010-12-30 | 2012-07-05 | Suresh Bhogavilli | Active validation for ddos and ssl ddos attacks |
US20120174218A1 (en) | 2010-12-30 | 2012-07-05 | Everis Inc. | Network Communication System With Improved Security |
US20120198279A1 (en) | 2011-02-02 | 2012-08-02 | Salesforce.Com, Inc. | Automated Testing on Mobile Devices |
US20120255015A1 (en) | 2011-03-30 | 2012-10-04 | Sahita Ravi L | Method and apparatus for transparently instrumenting an application program |
US20120255017A1 (en) | 2011-03-31 | 2012-10-04 | Mcafee, Inc. | System and method for providing a secured operating system execution environment |
US20120260342A1 (en) | 2011-04-05 | 2012-10-11 | Government Of The United States, As Represented By The Secretary Of The Air Force | Malware Target Recognition |
US8510842B2 (en) | 2011-04-13 | 2013-08-13 | International Business Machines Corporation | Pinpointing security vulnerabilities in computer software applications |
US20120266244A1 (en) | 2011-04-13 | 2012-10-18 | Microsoft Corporation | Detecting Script-Based Malware using Emulation and Heuristics |
WO2012145066A1 (en) | 2011-04-18 | 2012-10-26 | Fireeye, Inc. | Electronic message analysis for malware detection |
US8806647B1 (en) | 2011-04-25 | 2014-08-12 | Twitter, Inc. | Behavioral scanning of mobile applications |
US20120278886A1 (en) | 2011-04-27 | 2012-11-01 | Michael Luna | Detection and filtering of malware based on traffic observations made in a distributed mobile traffic management system |
US8695096B1 (en) | 2011-05-24 | 2014-04-08 | Palo Alto Networks, Inc. | Automatic signature generation for malicious PDF files |
US20120330801A1 (en) | 2011-06-27 | 2012-12-27 | Raytheon Company | Distributed Malware Detection |
US20140351935A1 (en) | 2011-09-14 | 2014-11-27 | Beijing Qihoo Technology Company Limited | Method, apparatus and virtual machine for detecting malicious program |
US20130074185A1 (en) | 2011-09-15 | 2013-03-21 | Raytheon Company | Providing a Network-Accessible Malware Analysis |
US20130097706A1 (en) | 2011-09-16 | 2013-04-18 | Veracode, Inc. | Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security |
US8739280B2 (en) | 2011-09-29 | 2014-05-27 | Hewlett-Packard Development Company, L.P. | Context-sensitive taint analysis |
US20130086684A1 (en) | 2011-09-30 | 2013-04-04 | David S. Mohler | Contextual virtual machines for application quarantine and assessment method and system |
US20130117852A1 (en) | 2011-10-10 | 2013-05-09 | Global Dataguard, Inc. | Detecting Emergent Behavior in Communications Networks |
US20130097699A1 (en) | 2011-10-18 | 2013-04-18 | Mcafee, Inc. | System and method for detecting a malicious command and control channel |
US20140169762A1 (en) | 2011-10-21 | 2014-06-19 | Mitsubishi Electric Corporation | Video image information playback method and video image information playback device |
US20130111587A1 (en) | 2011-10-27 | 2013-05-02 | Microsoft Corporation | Detecting Software Vulnerabilities in an Isolated Computing Environment |
US8782792B1 (en) | 2011-10-27 | 2014-07-15 | Symantec Corporation | Systems and methods for detecting malware on mobile platforms |
WO2013067505A1 (en) | 2011-11-03 | 2013-05-10 | Cyphort, Inc. | Systems and methods for virtualization and emulation assisted malware detection |
US20130117855A1 (en) | 2011-11-09 | 2013-05-09 | Electronics And Telecommunications Research Institute | Apparatus for automatically inspecting security of applications and method thereof |
US20140328204A1 (en) | 2011-11-14 | 2014-11-06 | Alcatel Lucent | Apparatus, method and computer program for routing data packets |
US20130139264A1 (en) | 2011-11-28 | 2013-05-30 | Matthew D. Brinkley | Application sandboxing using a dynamic optimization framework |
US20130160125A1 (en) | 2011-12-14 | 2013-06-20 | Nikolay Vladimirovich Likhachev | Method and system for rapid signature search over encrypted content |
US20130160127A1 (en) | 2011-12-14 | 2013-06-20 | Korea Internet & Security Agency | System and method for detecting malicious code of pdf document type |
US20130167236A1 (en) | 2011-12-15 | 2013-06-27 | Avira Holding GmbH | Method and system for automatically generating virus descriptions |
US20130160130A1 (en) | 2011-12-20 | 2013-06-20 | Kirill Mendelev | Application security testing |
US20130160131A1 (en) | 2011-12-20 | 2013-06-20 | Matias Madou | Application security testing |
US8214905B1 (en) | 2011-12-21 | 2012-07-03 | Kaspersky Lab Zao | System and method for dynamically allocating computing resources for processing security information |
US8365297B1 (en) | 2011-12-28 | 2013-01-29 | Kaspersky Lab Zao | System and method for detecting malware targeting the boot process of a computer using boot process emulation |
US20130174214A1 (en) | 2011-12-29 | 2013-07-04 | Imation Corp. | Management Tracking Agent for Removable Media |
US20130185795A1 (en) | 2012-01-12 | 2013-07-18 | Arxceo Corporation | Methods and systems for providing network protection by progressive degradation of service |
US20130185798A1 (en) | 2012-01-13 | 2013-07-18 | Accessdata Group, Llc | Identifying software execution behavior |
US20130185789A1 (en) | 2012-01-15 | 2013-07-18 | Lenovo (Singapore) Pte. Ltd. | Method and apparatus for protecting a password of a computer having a non-volatile memory |
US20130191915A1 (en) | 2012-01-25 | 2013-07-25 | Damballa, Inc. | Method and system for detecting dga-based malware |
US20130196649A1 (en) | 2012-01-27 | 2013-08-01 | Qualcomm Incorporated | Mobile device to detect unexpected behaviour |
US20130227691A1 (en) | 2012-02-24 | 2013-08-29 | Ashar Aziz | Detecting Malicious Network Content |
US9519782B2 (en) | 2012-02-24 | 2016-12-13 | Fireeye, Inc. | Detecting malicious network content |
US20130247186A1 (en) | 2012-03-15 | 2013-09-19 | Aaron LeMasters | System to Bypass a Compromised Mass Storage Device Driver Stack and Method Thereof |
US9275229B2 (en) | 2012-03-15 | 2016-03-01 | Mandiant, Llc | System to bypass a compromised mass storage device driver stack and method thereof |
US8726392B1 (en) | 2012-03-29 | 2014-05-13 | Symantec Corporation | Systems and methods for combining static and dynamic code analysis |
US20130298243A1 (en) | 2012-05-01 | 2013-11-07 | Taasera, Inc. | Systems and methods for orchestrating runtime operational integrity |
GB2490431A (en) | 2012-05-15 | 2012-10-31 | F Secure Corp | Foiling document exploit malware using repeat calls |
US9268936B2 (en) | 2012-07-27 | 2016-02-23 | Mandiant, Llc | Physical memory forensics system and method |
US20140032875A1 (en) | 2012-07-27 | 2014-01-30 | James Butler | Physical Memory Forensics System and Method |
US20140053261A1 (en) | 2012-08-15 | 2014-02-20 | Qualcomm Incorporated | On-Line Behavioral Analysis Engine in Mobile Device with Multiple Analyzer Model Providers |
US20140053260A1 (en) | 2012-08-15 | 2014-02-20 | Qualcomm Incorporated | Adaptive Observation of Behavioral Features on a Mobile Device |
US20140130158A1 (en) | 2012-11-07 | 2014-05-08 | Microsoft Corporation | Identification of malware detection signature candidate code |
US20140137180A1 (en) | 2012-11-13 | 2014-05-15 | Bitdefender IPR Management Ltd. | Hypervisor-Based Enterprise Endpoint Protection |
US20140179360A1 (en) | 2012-12-21 | 2014-06-26 | Verizon Patent And Licensing, Inc. | Short message service validation engine |
US8713631B1 (en) | 2012-12-25 | 2014-04-29 | Kaspersky Lab Zao | System and method for detecting malicious code executed by virtual machine |
US9633134B2 (en) | 2012-12-26 | 2017-04-25 | Fireeye, Inc. | Timeline wrinkling system and method |
US20140181131A1 (en) | 2012-12-26 | 2014-06-26 | David Ross | Timeline wrinkling system and method |
US20140189882A1 (en) | 2012-12-28 | 2014-07-03 | Robert Jung | System and method for the programmatic runtime de-obfuscation of obfuscated software utilizing virtual machine introspection and manipulation of virtual machine guest memory permissions |
US20140189687A1 (en) | 2012-12-28 | 2014-07-03 | Robert Jung | System and Method to Create a Number of Breakpoints in a Virtual Machine Via Virtual Machine Trapping Events |
US9459901B2 (en) | 2012-12-28 | 2016-10-04 | Fireeye, Inc. | System and method for the programmatic runtime de-obfuscation of obfuscated software utilizing virtual machine introspection and manipulation of virtual machine guest memory permissions |
US20140189866A1 (en) | 2012-12-31 | 2014-07-03 | Jason Shiffer | Identification of obfuscated computer items using visual algorithms |
US9690935B2 (en) | 2012-12-31 | 2017-06-27 | Fireeye, Inc. | Identification of obfuscated computer items using visual algorithms |
US9159035B1 (en) | 2013-02-23 | 2015-10-13 | Fireeye, Inc. | Framework for computer application analysis of sensitive information tracking |
US9594905B1 (en) | 2013-02-23 | 2017-03-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications using machine learning |
US9225740B1 (en) | 2013-02-23 | 2015-12-29 | Fireeye, Inc. | Framework for iterative analysis of mobile software applications |
US9195829B1 (en) | 2013-02-23 | 2015-11-24 | Fireeye, Inc. | User interface with real-time visual playback along with synchronous textual analysis log display and event/time index for anomalous behavior detection in applications |
US10181029B1 (en) | 2013-02-23 | 2019-01-15 | Fireeye, Inc. | Security cloud service framework for hardening in the field code of mobile software applications |
US9176843B1 (en) | 2013-02-23 | 2015-11-03 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US9792196B1 (en) | 2013-02-23 | 2017-10-17 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications |
US9824209B1 (en) | 2013-02-23 | 2017-11-21 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications that is usable to harden in the field code |
US9367681B1 (en) | 2013-02-23 | 2016-06-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications using symbolic execution to reach regions of interest within an application |
US10019338B1 (en) | 2013-02-23 | 2018-07-10 | Fireeye, Inc. | User interface with real-time visual playback along with synchronous textual analysis log display and event/time index for anomalous behavior detection in applications |
US9009822B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for multi-phase analysis of mobile applications |
US9009823B1 (en) | 2013-02-23 | 2015-04-14 | Fireeye, Inc. | Framework for efficient security coverage of mobile software applications installed on mobile devices |
US20180121316A1 (en) | 2013-02-23 | 2018-05-03 | Fireeye, Inc. | Framework For Efficient Security Coverage Of Mobile Software Applications |
US8990944B1 (en) | 2013-02-23 | 2015-03-24 | Fireeye, Inc. | Systems and methods for automatically detecting backdoors |
US9912698B1 (en) | 2013-03-13 | 2018-03-06 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9934381B1 (en) | 2013-03-13 | 2018-04-03 | Fireeye, Inc. | System and method for detecting malicious activity based on at least one environmental property |
US10025927B1 (en) | 2013-03-13 | 2018-07-17 | Fireeye, Inc. | Malicious content analysis with multi-version application support within single operating environment |
US9104867B1 (en) | 2013-03-13 | 2015-08-11 | Fireeye, Inc. | Malicious content analysis using simulated user interaction without user involvement |
US9355247B1 (en) | 2013-03-13 | 2016-05-31 | Fireeye, Inc. | File extraction from memory dump for malicious content analysis |
US9626509B1 (en) | 2013-03-13 | 2017-04-18 | Fireeye, Inc. | Malicious content analysis with multi-version application support within single operating environment |
US9565202B1 (en) | 2013-03-13 | 2017-02-07 | Fireeye, Inc. | System and method for detecting exfiltration content |
US10198574B1 (en) | 2013-03-13 | 2019-02-05 | Fireeye, Inc. | System and method for analysis of a memory dump associated with a potentially malicious content suspect |
US9430646B1 (en) | 2013-03-14 | 2016-08-30 | Fireeye, Inc. | Distributed systems and methods for automatically detecting unknown bots and botnets |
US9311479B1 (en) | 2013-03-14 | 2016-04-12 | Fireeye, Inc. | Correlation and consolidation of analytic data for holistic view of a malware attack |
US9641546B1 (en) | 2013-03-14 | 2017-05-02 | Fireeye, Inc. | Electronic device for aggregation, correlation and consolidation of analysis attributes |
US10122746B1 (en) | 2013-03-14 | 2018-11-06 | Fireeye, Inc. | Correlation and consolidation of analytic data for holistic view of malware attack |
US10200384B1 (en) | 2013-03-14 | 2019-02-05 | Fireeye, Inc. | Distributed systems and methods for automatically detecting unknown bots and botnets |
US9824211B2 (en) | 2013-03-15 | 2017-11-21 | Fireeye, Inc. | System and method to visualize user sessions |
US20140280245A1 (en) | 2013-03-15 | 2014-09-18 | Mandiant Corporation | System and method to visualize user sessions |
US20140344926A1 (en) | 2013-03-15 | 2014-11-20 | Sean Cunningham | System and method employing structured intelligence to verify and contain threats at endpoints |
US9413781B2 (en) | 2013-03-15 | 2016-08-09 | Fireeye, Inc. | System and method employing structured intelligence to verify and contain threats at endpoints |
US10033748B1 (en) | 2013-03-15 | 2018-07-24 | Fireeye, Inc. | System and method employing structured intelligence to verify and contain threats at endpoints |
US9251343B1 (en) | 2013-03-15 | 2016-02-02 | Fireeye, Inc. | Detecting bootkits resident on compromised computers |
US20140283063A1 (en) | 2013-03-15 | 2014-09-18 | Matthew Thompson | System and Method to Manage Sinkholes |
US9497213B2 (en) | 2013-03-15 | 2016-11-15 | Fireeye, Inc. | System and method to manage sinkholes |
US20140283037A1 (en) | 2013-03-15 | 2014-09-18 | Michael Sikorski | System and Method to Extract and Utilize Disassembly Features to Classify Software Intent |
US20140337836A1 (en) | 2013-05-10 | 2014-11-13 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US9495180B2 (en) | 2013-05-10 | 2016-11-15 | Fireeye, Inc. | Optimized resource allocation for virtual machines within a malware content detection system |
US9635039B1 (en) | 2013-05-13 | 2017-04-25 | Fireeye, Inc. | Classifying sets of malicious indicators for detecting command and control communications associated with malware |
US10033753B1 (en) | 2013-05-13 | 2018-07-24 | Fireeye, Inc. | System and method for detecting malicious activity and classifying a network communication based on different indicator types |
US10083302B1 (en) | 2013-06-24 | 2018-09-25 | Fireeye, Inc. | System and method for detecting time-bomb malware |
US20140380473A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | Zero-day discovery system |
US9536091B2 (en) | 2013-06-24 | 2017-01-03 | Fireeye, Inc. | System and method for detecting time-bomb malware |
US20140380474A1 (en) | 2013-06-24 | 2014-12-25 | Fireeye, Inc. | System and Method for Detecting Time-Bomb Malware |
US10133863B2 (en) | 2013-06-24 | 2018-11-20 | Fireeye, Inc. | Zero-day discovery system |
US20150007312A1 (en) | 2013-06-28 | 2015-01-01 | Vinay Pidathala | System and method for detecting malicious links in electronic messages |
US9300686B2 (en) | 2013-06-28 | 2016-03-29 | Fireeye, Inc. | System and method for detecting malicious links in electronic messages |
US9888019B1 (en) | 2013-06-28 | 2018-02-06 | Fireeye, Inc. | System and method for detecting malicious links in electronic messages |
US9888016B1 (en) | 2013-06-28 | 2018-02-06 | Fireeye, Inc. | System and method for detecting phishing using password prediction |
US9426071B1 (en) | 2013-08-22 | 2016-08-23 | Fireeye, Inc. | Storing network bidirectional flow data and metadata with efficient processing technique |
US9876701B1 (en) | 2013-08-22 | 2018-01-23 | Fireeye, Inc. | Arrangement for efficient search and retrieval of indexes used to locate captured packets |
US10089461B1 (en) | 2013-09-30 | 2018-10-02 | Fireeye, Inc. | Page replacement code injection |
US20150096023A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US10218740B1 (en) | 2013-09-30 | 2019-02-26 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US9736179B2 (en) | 2013-09-30 | 2017-08-15 | Fireeye, Inc. | System, apparatus and method for using malware analysis results to drive adaptive instrumentation of virtual machines to improve exploit detection |
US9690936B1 (en) | 2013-09-30 | 2017-06-27 | Fireeye, Inc. | Multistage system and method for analyzing obfuscated content for malware |
US9910988B1 (en) | 2013-09-30 | 2018-03-06 | Fireeye, Inc. | Malware analysis in accordance with an analysis plan |
US9628507B2 (en) | 2013-09-30 | 2017-04-18 | Fireeye, Inc. | Advanced persistent threat (APT) detection center |
US9912691B2 (en) | 2013-09-30 | 2018-03-06 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US20150096025A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | System, Apparatus and Method for Using Malware Analysis Results to Drive Adaptive Instrumentation of Virtual Machines to Improve Exploit Detection |
US9171160B2 (en) | 2013-09-30 | 2015-10-27 | Fireeye, Inc. | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US10192052B1 (en) | 2013-09-30 | 2019-01-29 | Fireeye, Inc. | System, apparatus and method for classifying a file as malicious using static scanning |
US20180013770A1 (en) | 2013-09-30 | 2018-01-11 | Fireeye, Inc. | System, Apparatus And Method For Using Malware Analysis Results To Drive Adaptive Instrumentation Of Virtual Machines To Improve Exploit Detection |
US20150096024A1 (en) | 2013-09-30 | 2015-04-02 | Fireeye, Inc. | Advanced persistent threat (apt) detection center |
US9294501B2 (en) | 2013-09-30 | 2016-03-22 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US20150096022A1 (en) | 2013-09-30 | 2015-04-02 | Michael Vincent | Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses |
US20160261612A1 (en) | 2013-09-30 | 2016-09-08 | Fireeye, Inc. | Fuzzy hash of behavioral results |
US9921978B1 (en) | 2013-11-08 | 2018-03-20 | Fireeye, Inc. | System and method for enhanced security of storage devices |
US9189627B1 (en) | 2013-11-21 | 2015-11-17 | Fireeye, Inc. | System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection |
US9560059B1 (en) | 2013-11-21 | 2017-01-31 | Fireeye, Inc. | System, apparatus and method for conducting on-the-fly decryption of encrypted objects for malware detection |
US9747446B1 (en) | 2013-12-26 | 2017-08-29 | Fireeye, Inc. | System and method for run-time object classification |
US9306974B1 (en) | 2013-12-26 | 2016-04-05 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US20150186645A1 (en) | 2013-12-26 | 2015-07-02 | Fireeye, Inc. | System, apparatus and method for automatically verifying exploits within suspect objects and highlighting the display information associated with the verified exploits |
US9756074B2 (en) | 2013-12-26 | 2017-09-05 | Fireeye, Inc. | System and method for IPS and VM-based detection of suspicious objects |
US9292686B2 (en) | 2014-01-16 | 2016-03-22 | Fireeye, Inc. | Micro-virtualization architecture for threat-aware microvisor deployment in a node of a network environment |
US20150199513A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Threat-aware microvisor |
US20150199531A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Exploit detection system with threat-aware microvisor |
US9946568B1 (en) | 2014-01-16 | 2018-04-17 | Fireeye, Inc. | Micro-virtualization architecture for threat-aware module deployment in a node of a network environment |
US9740857B2 (en) | 2014-01-16 | 2017-08-22 | Fireeye, Inc. | Threat-aware microvisor |
US9507935B2 (en) | 2014-01-16 | 2016-11-29 | Fireeye, Inc. | Exploit detection system with threat-aware microvisor |
US20150199532A1 (en) | 2014-01-16 | 2015-07-16 | Fireeye, Inc. | Micro-virtualization architecture for threat-aware microvisor deployment in a node of a network environment |
US9916440B1 (en) | 2014-02-05 | 2018-03-13 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US9262635B2 (en) | 2014-02-05 | 2016-02-16 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US20150220735A1 (en) | 2014-02-05 | 2015-08-06 | Fireeye, Inc. | Detection efficacy of virtual machine-based analysis with application specific events |
US9674298B1 (en) | 2014-02-20 | 2017-06-06 | Fireeye, Inc. | Efficient access to sparse packets in large repositories of stored network traffic |
US9537972B1 (en) | 2014-02-20 | 2017-01-03 | Fireeye, Inc. | Efficient access to sparse packets in large repositories of stored network traffic |
US9241010B1 (en) | 2014-03-20 | 2016-01-19 | Fireeye, Inc. | System and method for network behavior detection |
US10242185B1 (en) | 2014-03-21 | 2019-03-26 | Fireeye, Inc. | Dynamic guest image creation and rollback |
US9591015B1 (en) | 2014-03-28 | 2017-03-07 | Fireeye, Inc. | System and method for offloading packet processing and static analysis operations |
US9787700B1 (en) | 2014-03-28 | 2017-10-10 | Fireeye, Inc. | System and method for offloading packet processing and static analysis operations |
US9223972B1 (en) | 2014-03-31 | 2015-12-29 | Fireeye, Inc. | Dynamically remote tuning of a malware content detection system |
US9432389B1 (en) | 2014-03-31 | 2016-08-30 | Fireeye, Inc. | System, apparatus and method for detecting a malicious attack based on static analysis of a multi-flow object |
US9594912B1 (en) | 2014-06-06 | 2017-03-14 | Fireeye, Inc. | Return-oriented programming detection |
US9973531B1 (en) | 2014-06-06 | 2018-05-15 | Fireeye, Inc. | Shellcode detection |
US9438623B1 (en) | 2014-06-06 | 2016-09-06 | Fireeye, Inc. | Computer exploit detection using heap spray pattern matching |
US20150373043A1 (en) * | 2014-06-23 | 2015-12-24 | Niara, Inc. | Collaborative and Adaptive Threat Intelligence for Computer Security |
US20150372980A1 (en) | 2014-06-24 | 2015-12-24 | Fireeye, Inc. | Intrusion prevention and remedy system |
US10084813B2 (en) | 2014-06-24 | 2018-09-25 | Fireeye, Inc. | Intrusion prevention and remedy system |
US9838408B1 (en) | 2014-06-26 | 2017-12-05 | Fireeye, Inc. | System, device and method for detecting a malicious attack based on direct communications between remotely hosted virtual machines and malicious web servers |
US9398028B1 (en) | 2014-06-26 | 2016-07-19 | Fireeye, Inc. | System, device and method for detecting a malicious attack based on communcations between remotely hosted virtual machines and malicious web servers |
US9661009B1 (en) | 2014-06-26 | 2017-05-23 | Fireeye, Inc. | Network-based malware detection |
US9680862B2 (en) | 2014-07-01 | 2017-06-13 | Fireeye, Inc. | Trusted threat-aware microvisor |
US20160004869A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Verification of trusted threat-aware microvisor |
US20160006756A1 (en) | 2014-07-01 | 2016-01-07 | Fireeye, Inc. | Trusted threat-aware microvisor |
US10002252B2 (en) | 2014-07-01 | 2018-06-19 | Fireeye, Inc. | Verification of trusted threat-aware microvisor |
US9912644B2 (en) | 2014-08-05 | 2018-03-06 | Fireeye, Inc. | System and method to communicate sensitive information via one or more untrusted intermediate nodes with resilience to disconnected network topology |
US20160044000A1 (en) | 2014-08-05 | 2016-02-11 | Fireeye, Inc. | System and method to communicate sensitive information via one or more untrusted intermediate nodes with resilience to disconnected network topology |
US10027696B1 (en) | 2014-08-22 | 2018-07-17 | Fireeye, Inc. | System and method for determining a threat based on correlation of indicators of compromise from other sources |
US9609007B1 (en) | 2014-08-22 | 2017-03-28 | Fireeye, Inc. | System and method of detecting delivery of malware based on indicators of compromise from different sources |
US9363280B1 (en) | 2014-08-22 | 2016-06-07 | Fireeye, Inc. | System and method of detecting delivery of malware using cross-customer data |
US10027689B1 (en) | 2014-09-29 | 2018-07-17 | Fireeye, Inc. | Interactive infection visualization for improved exploit detection and signature generation for malware and malware families |
US9773112B1 (en) | 2014-09-29 | 2017-09-26 | Fireeye, Inc. | Exploit detection of malware and malware families |
US9781144B1 (en) | 2014-09-30 | 2017-10-03 | Fireeye, Inc. | Determining duplicate objects for malware analysis using environmental/context information |
US9690933B1 (en) | 2014-12-22 | 2017-06-27 | Fireeye, Inc. | Framework for classifying an object as malicious with machine learning for deploying updated predictive models |
US9467460B1 (en) | 2014-12-23 | 2016-10-11 | Fireeye, Inc. | Modularized database architecture using vertical partitioning for a state machine |
US9787706B1 (en) | 2014-12-23 | 2017-10-10 | Fireeye, Inc. | Modular architecture for analysis database |
US20160191547A1 (en) | 2014-12-26 | 2016-06-30 | Fireeye, Inc. | Zero-Day Rotating Guest Image Profile |
US10075455B2 (en) | 2014-12-26 | 2018-09-11 | Fireeye, Inc. | Zero-day rotating guest image profile |
US9934376B1 (en) | 2014-12-29 | 2018-04-03 | Fireeye, Inc. | Malware detection appliance architecture |
US20160191550A1 (en) | 2014-12-29 | 2016-06-30 | Fireeye, Inc. | Microvisor-based malware detection endpoint architecture |
US9838417B1 (en) | 2014-12-30 | 2017-12-05 | Fireeye, Inc. | Intelligent context aware user interaction for malware detection |
US9690606B1 (en) | 2015-03-25 | 2017-06-27 | Fireeye, Inc. | Selective system call monitoring |
US20160285914A1 (en) | 2015-03-25 | 2016-09-29 | Fireeye, Inc. | Exploit detection system |
US10148693B2 (en) | 2015-03-25 | 2018-12-04 | Fireeye, Inc. | Exploit detection system |
US9438613B1 (en) | 2015-03-30 | 2016-09-06 | Fireeye, Inc. | Dynamic content activation for automated analysis of embedded objects |
US9483644B1 (en) | 2015-03-31 | 2016-11-01 | Fireeye, Inc. | Methods for detecting file altering malware in VM based analysis |
US9846776B1 (en) | 2015-03-31 | 2017-12-19 | Fireeye, Inc. | System and method for detecting file altering behaviors pertaining to a malicious attack |
US9912681B1 (en) | 2015-03-31 | 2018-03-06 | Fireeye, Inc. | Injection of content processing delay in an endpoint |
US20160335110A1 (en) | 2015-03-31 | 2016-11-17 | Fireeye, Inc. | Selective virtualization for security threat detection |
US9654485B1 (en) | 2015-04-13 | 2017-05-16 | Fireeye, Inc. | Analytics-based security monitoring system and method |
US10104102B1 (en) | 2015-04-13 | 2018-10-16 | Fireeye, Inc. | Analytic-based security with learning adaptability |
US9594904B1 (en) | 2015-04-23 | 2017-03-14 | Fireeye, Inc. | Detecting malware based on reflection |
US10216927B1 (en) | 2015-06-30 | 2019-02-26 | Fireeye, Inc. | System and method for protecting memory pages associated with a process using a virtualization layer |
US10176321B2 (en) | 2015-09-22 | 2019-01-08 | Fireeye, Inc. | Leveraging behavior-based rules for malware family classification |
US20170083703A1 (en) | 2015-09-22 | 2017-03-23 | Fireeye, Inc. | Leveraging behavior-based rules for malware family classification |
US10033759B1 (en) | 2015-09-28 | 2018-07-24 | Fireeye, Inc. | System and method of threat detection under hypervisor control |
US10033747B1 (en) | 2015-09-29 | 2018-07-24 | Fireeye, Inc. | System and method for detecting interpreter-based exploit attacks |
US9825976B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Detection and classification of exploit kits |
US10210329B1 (en) | 2015-09-30 | 2019-02-19 | Fireeye, Inc. | Method to detect application execution hijacking using memory protection |
US9825989B1 (en) | 2015-09-30 | 2017-11-21 | Fireeye, Inc. | Cyber attack early warning system |
US20180048660A1 (en) | 2015-11-10 | 2018-02-15 | Fireeye, Inc. | Launcher for setting analysis environment variations for malware detection |
US10108446B1 (en) | 2015-12-11 | 2018-10-23 | Fireeye, Inc. | Late load technique for deploying a virtualization layer underneath a running operating system |
US10133866B1 (en) | 2015-12-30 | 2018-11-20 | Fireeye, Inc. | System and method for triggering analysis of an object for malware in response to modification of that object |
US10050998B1 (en) | 2015-12-30 | 2018-08-14 | Fireeye, Inc. | Malicious message analysis system |
US9824216B1 (en) | 2015-12-31 | 2017-11-21 | Fireeye, Inc. | Susceptible environment detection system |
US10169585B1 (en) | 2016-06-22 | 2019-01-01 | Fireeye, Inc. | System and methods for advanced malware detection through placement of transition events |
US10121000B1 (en) | 2016-06-28 | 2018-11-06 | Fireeye, Inc. | System and method to detect premium attacks on electronic networks and electronic devices |
US10191861B1 (en) | 2016-09-06 | 2019-01-29 | Fireeye, Inc. | Technique for implementing memory views using a layered virtualization architecture |
US10025691B1 (en) | 2016-09-09 | 2018-07-17 | Fireeye, Inc. | Verification of complex software code using a modularized architecture |
US20180115574A1 (en) | 2016-10-24 | 2018-04-26 | Senrio Inc. | Methods and systems for detecting anomalous behavior of network-connected embedded devices |
US20180288077A1 (en) | 2017-03-30 | 2018-10-04 | Fireeye, Inc. | Attribute-controlled malware detection |
US10623429B1 (en) * | 2017-09-22 | 2020-04-14 | Amazon Technologies, Inc. | Network management using entropy-based signatures |
Non-Patent Citations (62)
Title |
---|
"Mining Specification of Malicious Behavior"—Jha et al, UCSB, Sep. 2007 https://www.cs.ucsb.edu/.about.chris/research/doc/esec07.sub.-mining.pdf-. |
"Network Security: NetDetector—Network Intrusion Forensic System (NIFS) Whitepaper", ("NetDetector Whitepaper"), (2003). |
"When Virtual is Better Than Real", IEEEXplore Digital Library, available at, http://ieeexplore.ieee.org/xpl/articleDetails.sp?reload=true&arnumbe- r=990073, (Dec. 7, 2013). |
Abdullah, et al., Visualizing Network Data for Intrusion Detection, 2005 IEEE Workshop on Information Assurance and Security, pp. 100-108. |
Adetoye, Adedayo , et al., "Network Intrusion Detection & Response System", ("Adetoye"), (Sep. 2003). |
Apostolopoulos, George; hassapis, Constantinos; "V-eM: A cluster of Virtual Machines for Robust, Detailed, and High-Performance Network Emulation", 14th IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, Sep. 11-14, 2006, pp. 117-126. |
Aura, Tuomas, "Scanning electronic documents for personally identifiable information", Proceedings of the 5th ACM workshop on Privacy in electronic society. ACM, 2006. |
Baecher, "The Nepenthes Platform: An Efficient Approach to collect Malware", Springer-verlag Berlin Heidelberg, (2006), pp. 165-184. |
Bayer, et al., "Dynamic Analysis of Malicious Code", J Comput Virol, Springer-Verlag, France., (2006), pp. 67-77. |
Boubalos, Chris , "Extracting syslog data out of raw pcap dumps, seclists.org, Honeypots mailing list archives", available at http://seclists.org/honeypots/2003/q2/319 ("Boubalos"), (Jun. 5, 2003). |
Chaudet, C. , et al., "Optimal Positioning of Active and Passive Monitoring Devices", International Conference on Emerging Networking Experiments and Technologies, Proceedings of the 2005 ACM Conference on Emerging Network Experiment and Technology, CoNEXT '05, Toulousse, France, (Oct. 2005), pp. 71-82. |
Chen, P. M. and Noble, B. D., "When Virtual is Better Than Real, Department of Electrical Engineering and Computer Science", University of Michigan ("Chen") (2001). |
Cisco "Intrusion Prevention for the Cisco ASA 5500-x Series" Data Sheet (2012). |
Cohen, M.I. , "PyFlag—An advanced network forensic framework", Digital investigation 5, Elsevier, (2008), pp. S112-S120. |
Costa, M. , et al., "Vigilante: End-to-End Containment of Internet Worms", SOSP '05, Association for Computing Machinery, Inc., Brighton U.K., (Oct. 23-26, 2005). |
Didier Stevens, "Malicious PDF Documents Explained", Security & Privacy, IEEE, IEEE Service Center, Los Alamitos, CA, US, vol. 9, No. 1, Jan. 1, 2011, pp. 80-82, XP011329453, ISSN: 1540-7993, DOI: 10.1109/MSP.2011.14. |
Distler, "Malware Analysis: An Introduction", SANS Institute InfoSec Reading Room, SANS Institute, (2007). |
Dunlap, George W. , et al., "ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay", Proceeding of the 5th Symposium on Operating Systems Design and Implementation, USENIX Association, ("Dunlap"), (Dec. 9, 2002). |
FireEye Malware Analysis & Exchange Network, Malware Protection System, FireEye Inc., 2010. |
FireEye Malware Analysis, Modern Malware Forensics, FireEye Inc., 2010. |
FireEye v.6.0 Security Target, pp. 1-35, Version 1.1, FireEye Inc., May 2011. |
Goel, et al., Reconstructing System State for Intrusion Analysis, Apr. 2008 SIGOPS Operating Systems Review, vol. 42 Issue 3, pp. 21-28. |
Gregg Keizer: "Microsoft's HoneyMonkeys Show Patching Windows Works", Aug. 8, 2005, XP055143386, Retrieved from the Internet: URL:http://www.informationweek.com/microsofts-honeymonkeys-show-patching-windows-works/d/d-d/1035069? [retrieved on Jun. 1, 2016]. |
Heng Yin et al., Panorama: Capturing System-Wide Information Flow for Malware Detection and Analysis, Research Showcase @ CMU, Carnegie Mellon University, 2007. |
Hiroshi Shinotsuka, Malware Authors Using New Techniques to Evade Automated Threat Analysis Systems, Oct. 26, 2012, http://www.symantec.com/connect/blogs/, pp. 1-4. |
Idika et al., A-Survey-of-Malware-Detection-Techniques, Feb. 2, 2007, Department of Computer Science, Purdue University. |
Isohara, Takamasa, Keisuke Takemori, and Ayumu Kubota. "Kernel-based behavior analysis for android malware detection." Computational intelligence and Security (CIS), 2011 Seventh International Conference on. IEEE, 2011. |
Kaeo, Merike , "Designing Network Security", ("Kaeo"), (Nov. 2003). |
Kevin A Roundy et al: "Hybrid Analysis and Control of Malware", Sep. 15, 2010, Recent Advances in Intrusion Detection, Springer Berlin Heidelberg, Berlin, Heidelberg, pp. 317-338, XP019150454 ISBN:978-3-642-15511-6. |
Khaled Salah et al: "Using Cloud Computing to Implement a Security Overlay Network", Security & Privacy, IEEE, IEEE Service Center, Los Alamitos, CA, US, vol. 11, No. 1, Jan. 1, 2013 (Jan. 1, 2013). |
Kim, H. , et al., "Autograph: Toward Automated, Distributed Worm Signature Detection", Proceedings of the 13th Usenix Security Symposium (Security 2004), San Diego, (Aug. 2004), pp. 271-286. |
King, Samuel T., et al., "Operating System Support for Virtual Machines", ("King"), (2003). |
Kreibich, C. , et al., "Honeycomb-Creating Intrusion Detection Signatures Using Honeypots", 2nd Workshop on Hot Topics in Networks (HotNets-11), Boston, USA, (2003). |
Kristoff, J. , "Botnets, Detection and Mitigation: DNS-Based Techniques", NU Security Day, (2005), 23 pages. |
Lastline Labs, The Threat of Evasive Malware, Feb. 25, 2013, Lastline Labs, pp. 1-8. |
Li et al., A VMM-Based System Call Interposition Framework for Program Monitoring, Dec. 2010, IEEE 16th International Conference on Parallel and Distributed Systems, pp. 706-711. |
Lindorfer, Martina, Clemens Kolbitsch, and Paolo Milani Comparetti. "Detecting environment-sensitive malware." Recent Advances in Intrusion Detection. Springer Berlin Heidelberg, 2011. |
Marchette, David J., "Computer Intrusion Detection and Network Monitoring: A Statistical Viewpoint", ("Marchette"), (2001). |
Moore, D. , et al., "Internet Quarantine: Requirements for Containing Self-Propagating Code", INFOCOM, vol. 3, (Mar. 30-Apr. 3, 2003), pp. 1901-1910. |
Morales, Jose A., et al., ""Analyzing and exploiting network behaviors of malware."", Security and Privacy in Communication Networks. Springer Berlin Heidelberg, 2010. 20-34. |
Mori, Detecting Unknown Computer Viruses, 2004, Springer-Verlag Berlin Heidelberg. |
Natvig, Kurt , "SANDBOXII: Internet", Virus Bulletin Conference, ("Natvig"), (Sep. 2002). |
NetBIOS Working Group. Protocol Standard for a NetBIOS Service on a TCP/UDP transport: Concepts and Methods. STD 19, RFC 1001, Mar. 1987. |
Newsome, J. , et al., "Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software", In Proceedings of the 12th Annual Network and Distributed System Security, Symposium (NDSS '05), (Feb. 2005). |
Nojiri, D. , et al., "Cooperation Response Strategies for Large Scale Attack Mitigation", DARPA Information Survivability Conference and Exposition, vol. 1, (Apr. 22-24, 2003), pp. 293-302. |
Oberheide et al., CloudAV.sub.--N-Version Antivirus in the Network Cloud, 17th USENIX Security Symposium USENIX Security '08 Jul. 28-Aug. 1, 2008 San Jose, CA. |
Reiner Sailer, Enriquillo Valdez, Trent Jaeger, Roonald Perez, Leendert van Doorn, John Linwood Griffin, Stefan Berger., sHype: Secure Hypervisor Appraoch to Trusted Virtualized Systems (Feb. 2, 2005) ("Sailer"). |
Silicon Defense, "Worm Containment in the Internal Network", (Mar. 2003), pp. 1-25. |
Singh, S. , et al., "Automated Worm Fingerprinting", Proceedings of the ACM/USENIX Symposium on Operating System Design and Implementation, San Francisco, California, (Dec. 2004). |
Thomas H. Placek, and Timothy N. Newsham , "Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection", Secure Networks, ("Ptacek"), (Jan. 1998). |
U.S. Appl. No. 15/857,467, filed Dec. 28, 2017 Advisory Action dated Aug. 13, 2020. |
U.S. Appl. No. 15/857,467, filed Dec. 28, 2017 Final Office Action dated May 29, 2020. |
U.S. Appl. No. 15/857,467, filed Dec. 28, 2017 Non-Final Office Action dated Nov. 15, 2019. |
U.S. Appl. No. 15/857,467, filed Dec. 28, 2017 Non-Final Office Action dated Sep. 22, 2020. |
U.S. Appl. No. 15/857,467, filed Dec. 28, 2017 Notice of Allowance dated Jan. 6, 2021. |
Venezia, Paul , "NetDetector Captures Intrusions", InfoWorld Issue 27, ("Venezia"), (Jul. 14, 2003). |
Vladimir Getov: "Security as a Service in Smart Clouds—Opportunities and Concerns", Computer Software and Applications Conference (COMPSAC), 2012 IEEE 36th Annual, IEEE, Jul. 16, 2012 (Jul. 16, 2012). |
Wahid et al., Characterising the Evolution in Scanning Activity of Suspicious Hosts, Oct. 2009, Third International Conference on Network and System Security, pp. 344-350. |
Whyte, et al., "DNS-Based Detection of Scanning Works in an Enterprise Network", Proceedings of the 12th Annual Network and Distributed System Security Symposium, (Feb. 2005), 15 pages. |
Williamson, Matthew M., "Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code", ACSAC Conference, Las Vegas, NV, USA, (Dec. 2002), pp. 1-9. |
Yuhei Kawakoya et al: "Memory behavior-based automatic malware unpacking in stealth debugging environment", Malicious and Unwanted Software (Malware), 2010 5th International Conference on, IEEE, Piscataway, NJ, USA, Oct. 19, 2010, pp. 39-46, XP031833827, ISBN:978-1-4244-8-9353-1. |
Zhang et al., The Effects of Threading, Infection Time, and Multiple-Attacker Collaboration on Malware Propagation, Sep. 2009, IEEE 28th International Symposium on Reliable Distributed Systems, pp. 73-82. |
Also Published As
Publication number | Publication date |
---|---|
US11005860B1 (en) | 2021-05-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11949692B1 (en) | Method and system for efficient cybersecurity analysis of endpoint events | |
US11271955B2 (en) | Platform and method for retroactive reclassification employing a cybersecurity-based global data store | |
US20190207966A1 (en) | Platform and Method for Enhanced Cyber-Attack Detection and Response Employing a Global Data Store | |
US11727333B2 (en) | Endpoint with remotely programmable data recorder | |
US10601848B1 (en) | Cyber-security system and method for weak indicator detection and correlation to generate strong indicators | |
US10728263B1 (en) | Analytic-based security monitoring system and method | |
US11240275B1 (en) | Platform and method for performing cybersecurity analyses employing an intelligence hub with a modular architecture | |
US11785040B2 (en) | Systems and methods for cyber security alert triage | |
US11636206B2 (en) | Deferred malware scanning | |
US10121000B1 (en) | System and method to detect premium attacks on electronic networks and electronic devices | |
US20080244742A1 (en) | Detecting adversaries by correlating detected malware with web access logs | |
US10986117B1 (en) | Systems and methods for providing an integrated cyber threat defense exchange platform | |
US11861006B2 (en) | High-confidence malware severity classification of reference file set | |
US20190182268A1 (en) | Methods, systems and apparatus to mitigate steganography-based malware attacks | |
US11856011B1 (en) | Multi-vector malware detection data sharing system for improved detection | |
US20240152626A1 (en) | Security Event Modeling and Threat Detection Using Behavioral, Analytical, and Threat Intelligence Attributes | |
US20230156017A1 (en) | Quantification of Adversary Tactics, Techniques, and Procedures Using Threat Attribute Groupings and Correlation | |
US20230412630A1 (en) | Methods and systems for asset risk determination and utilization for threat mitigation | |
US20230412631A1 (en) | Methods and systems for system vulnerability determination and utilization for threat mitigation | |
US20220245249A1 (en) | Specific file detection baked into machine learning pipelines | |
CN116318740A (en) | Method and device for determining malicious domain name |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |