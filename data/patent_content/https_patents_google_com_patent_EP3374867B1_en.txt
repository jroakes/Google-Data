EP3374867B1 - Navigation application programming interface - Google Patents
Navigation application programming interface Download PDFInfo
- Publication number
- EP3374867B1 EP3374867B1 EP16813323.9A EP16813323A EP3374867B1 EP 3374867 B1 EP3374867 B1 EP 3374867B1 EP 16813323 A EP16813323 A EP 16813323A EP 3374867 B1 EP3374867 B1 EP 3374867B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- navigation
- instructions
- interface
- waypoint
- route
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 239000012634 fragment Substances 0.000 claims description 27
- 238000000034 method Methods 0.000 claims description 25
- 230000003993 interaction Effects 0.000 claims description 7
- 230000004044 response Effects 0.000 claims description 4
- 239000008186 active pharmaceutical agent Substances 0.000 description 75
- 230000006870 function Effects 0.000 description 46
- 239000011800 void material Substances 0.000 description 37
- 230000008859 change Effects 0.000 description 23
- 238000010586 diagram Methods 0.000 description 11
- 230000003068 static effect Effects 0.000 description 11
- 238000004891 communication Methods 0.000 description 7
- 230000000694 effects Effects 0.000 description 6
- 230000000007 visual effect Effects 0.000 description 5
- 238000013507 mapping Methods 0.000 description 4
- 230000036541 health Effects 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 238000012360 testing method Methods 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 230000001413 cellular effect Effects 0.000 description 2
- 230000010354 integration Effects 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 239000003550 marker Substances 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000010079 rubber tapping Methods 0.000 description 2
- 238000004088 simulation Methods 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 230000004075 alteration Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 230000008569 process Effects 0.000 description 1
- 230000011664 signaling Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/541—Interprogram communication via adapters, e.g. between incompatible applications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/547—Remote procedure calls [RPC]; Web services
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/38—Creation or generation of source code for implementing user interfaces
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
- G01C21/3667—Display of a road map
- G01C21/3676—Overview of the route on the road map
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9537—Spatial or temporal dependent retrieval, e.g. spatiotemporal queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/954—Navigation, e.g. using categorised browsing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44505—Configuring for program initiating, e.g. using registry, configuration files
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/542—Event management; Broadcasting; Multicasting; Notifications
Definitions
- the present disclosure relates generally to application programming interfaces for providing navigation information.
- Applications implemented on computing devices such as mobile computing devices (e.g., smartphones, tablets, smart watches, etc.) have been developed for a variety of purposes, including business, social, health, and other purposes. These applications can provide a user interface (e.g., a graphical user interface) for presenting information to a user as well as allowing the user to interact with the application.
- Popular applications for mobile computing devices include maps applications that make varied geographic information (e.g., current location information presented on a map) available to users.
- an application that is not primarily intended for mapping or navigation to incorporate navigation or map information - for example it might be desirable for a health or fitness application to provide navigation or map information to allow the user to find their way around a course, complete a run of a certain distance etc.
- a health or fitness application could be written to incorporate a bespoke navigation or map interface, but this would require increased programming resources to create the application.
- One example of the present disclosure is directed to a non-transitory computer-readable medium according to claim 1.
- the method may comprise: obtaining an access key for enabling operation of the navigation application programming interface; and adding the access key to the software application. Additionally or alternatively the method may comprise initializing the navigation application programming interface using a set of initialization and error handling instructions associated with the navigation application programming interface. Additionally or alternatively the one or more configurable event listener interfaces may comprise a location listener interface operable to be called to update a current location of a user in the navigation service. Additionally or alternatively the one or more event listener interfaces may comprise a remaining time or remaining distance changed listener interface operable to be called when a time remaining or a distance remaining to a waypoint has changed by more than a threshold. Additionally or alternatively configuring the navigation service using a second set of instructions may comprise setting the threshold as a parameter in the second set of instructions.
- Another example is directed to a computing device according to claim 15.
- Application programming interfaces can allow applications implemented on computing devices to interact with various services to provide information and functionality to a user.
- Application programming interfaces can provide a tool for developers to embed information, programming, frameworks, and structures into applications for access by the user.
- a map service provider can provide a maps application programming interface that can be used by third parties to embed a digital map into a user interface of an application developed by the third party. This avoids the need for the developer of the third to create their own maps application.
- Example aspects of the present disclosure are directed to application programming interfaces ("APIs") for providing navigation information in third party software applications implemented on one or more computing devices, such as web-based software applications implemented in a browser, locally-stored software applications, and other applications.
- the API can allow application developers to embed a navigation application provided by a navigation data provider or other source in their software application.
- the API can allow the developer to easily customize and tailor the navigation application to accommodate varying platforms and end use cases.
- the API when invoked by a software application implemented on a computing device, can be configured to request and receive routing information from a data provider via a communication interface (e.g., over a network, such as the Internet).
- the API can be configured present navigation information (e.g., through a graphical user interface component or through audio and/or vibratory cues) based on the routing information to provide a navigation service embedded in the software application.
- a navigation service can be an application (e.g. a software application) that provides navigation information that can be used to guide a user from an origin and a destination.
- the navigation service embedded in the software application can provide navigation information (e.g., turn-by-turn navigation information) to a user as a user traverses along a navigation route or other path. More particularly, in some embodiments, the navigation service can receive a route directing a user from to a current location to a destination. As one example, the route can include a sequence of steps, each describing a route portion (e.g., name or number of the road, distance, travel time, speed limit) and a maneuver (e.g., left turn, merge right, proceed straight) to access the next route portion.
- the navigation service can provide the route to a user through a graphical user interface and via one or more cues (e.g., audio or video cues) to guide the user from an origin to a destination.
- cues e.g., audio or video cues
- the software application can interact with a routing engine implemented by a navigation data provider or other source (e.g., a local source of navigation information) via the API to obtain routing information and other navigation information.
- the navigation data provider can be associated with a separate entity relative to the developer of the software application.
- the navigation data provider can be associated with a web server that hosts a geographic information system.
- the navigation information can include a route to one or more waypoints.
- the navigation information can further include map data for presentation in conjunction with the route and other information.
- the navigation information can be continuously updated (e.g., through one or more event listener interfaces implemented as part of the API) as the user traverses the navigation route to provide real time or near real time navigation information for a user.
- the API when implemented by a software application can visually present the navigation information associated with the navigation service in a graphical user interface component displayed in conjunction with the software application.
- the graphical user interface component can display a map.
- the default display of the map can be, for instance, a top-down view of the map.
- the graphical user interface component can display a route in polyline on the map.
- the position of the user can be updated along the route as the user navigates the route.
- the navigation service can provide a graphical user interface where a position of the user is continuously updated along the navigation route as the user position changes along the navigation route.
- Various waypoints can be identified by markers located in the map.
- Other information can be presented in the graphical user interface component, such as estimated time or distance remaining to arrival at a waypoint ("ETD information"), a compass interface element, a navigation heading element, etc.
- the navigation information can be provided using audio guidance with or without the visual display of navigation information in the graphical user interface component.
- the API can include sets of computer-readable instructions that when executed by one or more processors facilitate integration of the navigation application into a developer's software application.
- the sets of instructions when implemented by one or more processors, can govern interaction by the software application with the navigation data provider via the API as well as the display and/or delivery of navigation information to the user as part of the software application.
- example instructions associated with an API that are facing a developer of a software application can include a set of instructions specifying one or more parameters that govern the display of the visual output of the navigation service.
- the API can further include a set of instructions specifying one or more parameters that control the implementation of the navigation service and a set of instructions that governs the interaction of the API with the routing engine provided by the navigation data provider.
- the API can include one or more configurable event listener interfaces that when called allow the software application invoking the API to obtain data indicative of various navigation events (e.g., from the navigation data provider over the network).
- the navigation events can be, for instance, updated user position, a changed route, an update to ETD information, arrival at a waypoint, etc.
- the configurable event listener interfaces can be used to continuously update the navigation information as a user traverses along a route in a manner desired by the software application developer. For instance, one example event listener interface can be used to update the current location of a user along a navigation route. Another example event listener interface can be used to update ETD information to one or more waypoints. Another example event listener interface can be used to signal when a user has arrived at a particular waypoint. Another example event listener interface can be used when a user diverges from a route determined by the routing engine and the route to a waypoint determined by the routing engine changes.
- the API can be configured to accommodate navigation for a plurality of waypoints.
- Data indicative of the plurality of waypoints can be received via the API, for instance, in a list form ordering the waypoints.
- the routing engine can determine a multi-waypoint route to the plurality of waypoints.
- the multi-waypoint route can include a plurality of route segments. Each route segment can be a route between waypoints in the multi-waypoint route or between a start location and a waypoint in the multi-waypoint route.
- the API can include one or more event listener interfaces to accommodate providing navigation information based on a multi-waypoint route.
- the one or more event listener interfaces can be configured to provide notifications when each waypoint is reached, when ETD information to the next waypoint changes, or when any part of the multi-waypoint route changes.
- the one or more event listener interfaces can be configured to provide access to ETD information for each waypoint along the multi-waypoint route, access to geographic coordinates (e.g., latitude and longitude) for each waypoint, access to the information associated with a route segment (e.g. a navigation polyline) between each waypoint along the multi-waypoint route, and/or access to where the user has been along the multi-waypoint route independently of the route to the next waypoint in the multi-waypoint route.
- a route segment e.g. a navigation polyline
- the APIs according to example embodiments of the present disclosure can have a technical effect of facilitating the integration of a navigation service provided by a navigation data provider in various software applications.
- One or more configurable event listener interfaces implemented as part of the APIs can be used to continuously update the navigation information as a user traverses along a navigation route in a manner desired by the developer.
- the APIs can allow for the customization of the navigation service for various end use needs, such as for ride sharing applications, shipping/delivery applications, social applications, and other end use applications.
- FIG. 1 depicts an overview of an example system 100 for implementing a navigation service as part of a software application using a navigation API according to example embodiments of the present disclosure.
- the system 100 can include a user device 112 that can receive navigation data from a navigation data provider 114 via a communication network 116.
- the user device 112 can be, for instance, a smartphone, tablet, wearable device, laptop, desktop, mobile device, device capable of being carried by a user while in operation, display with one or more processors, vehicle system, or other user device 112.
- a software application 120 can be implemented on the user device 112.
- the software application can be, for instance, a mapping application, a browser, a ride share application, an application used to assist with delivery, a social media application or other software application that may need to provide navigation information to a user.
- the software application 120 can be stored locally on the user device 112 or can be, for instance, a web application accessed via a browser implemented on the user device 112.
- the software application 120 can be developed by a third party entity that is independent of and/or not affiliated with an entity associated the navigation data provider 114.
- the software application 120 can invoke a navigation API 130 to access and provide navigation data from the navigation data provider 114 via the communication network 116 so that a navigation service can be embedded in the software application 120.
- Example aspects of the present disclosure are discussed with accessing data from a remote navigation data provider 114 for purposes of illustration and discussion.
- the API 130 can access data from other sources, such as local sources or applications located on the user device 112.
- the navigation service can present navigation information (e.g., turn-by-turn navigation information) to a user in real time or near real time as a user or vehicle carrying the user device 112 traverses along a route from an origin to one or more destinations.
- the navigation service can include a graphical user interface component for presenting the navigation information to the user on one or more display devices.
- the navigation service can provide audio guidance or other notifications (e.g., vibratory notifications) to the user indicative of navigation information (e.g., turn-by-turn) directions.
- FIG. 2 depicts an example graphical user interface component 200 associated with a navigation service embedded as part of a graphical user interface 122 of a software application 120 according to example embodiments of the present disclosure.
- the graphical user interface component 200 can be displayed on a display device of the user device 112.
- the graphical user interface component 200 can include various interface elements that provide navigation information to a user as part of a navigation service.
- the graphical user interface component 200 includes a map 202 as well as a route 210 presented on the map 202.
- markers 212 indicative of waypoints can be presented on the map 202.
- the route 210 is displayed on a top down view of the map 202 to provide a route overview.
- data associated with the map 202, the route 210 and information associated with the waypoints 212, and other navigation information can be obtained from a navigation data provider 114 via an API 130 invoked by the software application 120 as will be discussed in more detail below.
- FIG. 3 depicts another aspect of an example graphical user interface component 200 associated with a navigation service embedded as part of a graphical user interface 122 of a software application 120 according to example embodiments of the present disclosure.
- the navigation service can be providing turn-by-turn navigation directions with the graphical user interface component 200 as the user or vehicle traverses a route in real time or near real time.
- the graphical user interface component 200 can include various interface elements for presenting navigation information to a user.
- the graphical user interface component 200 can include a map 202 and a route 210 presented in polyline on the map 202.
- the graphical user interface component 200 can further present indicia 230 indicative of a current position of the user or vehicle traveling along the route 210.
- the indicia 230 can move along the route 210 as the user or vehicle travels along the route 210.
- the graphical user interface component 200 can present other information to the user that can be useful in navigation.
- the graphical user interface component 200 can further include a navigation header element 220 that can display the current navigation direction and other information associated with a current portion of the route.
- the graphical user interface component 220 can display ETD information 232, such as estimated minutes or estimated distance to arrival to the next waypoint.
- data associated with the map 202, the route 210, etc. can be obtained from a navigation data provider 114 or other source via an API 130 invoked by the software application 120.
- One or more event listener interfaces implemented as part of the navigation programming interface 130 can be used to update the navigation information as the user or vehicle travels along the route.
- the example graphical user interface components 200 can be displayed when the API 130 is operating in a navigation mode.
- the navigation mode can be entered based on various events, such as the specifying of one or more waypoints and/or the receipt of a user input signaling the desire to begin a navigation mode.
- the graphical user interface component 200 can display the route 210 when operating in the navigation mode.
- the graphical user interface component 200 displays a top down view of a map.
- FIGS. 2 and 3 depict one example implementation of a graphical user interface component associated with a navigation service that can be embedded in an application 120 using a navigation API 130 according to example embodiments of the present disclosure.
- the navigation service can present navigation information in other suitable forms without deviating from the scope of the present disclosure.
- the API 130 can be configured to interface with a routing engine 140 implemented by the navigation data provider 114.
- the routing engine 140 can be configured to, for instance, compute routes to one or more waypoints, access mapping data, update navigation data based on various navigation events, and respond to requests for navigation data from the API 130.
- the navigation data provider 114 can include one or more servers, such as web servers.
- the one or more servers can include one or more processors and one or more memory devices.
- the one or more memory devices can store computer-readable instruction to implement, for instance, the routing engine 140.
- the routing engine 140 can access data associated, for instance, with a geographic information system 115.
- the geographic information system 115 can include data that indexed by geographic coordinates of its elements.
- the data associated with the geographic information system 115 can include, for instance, map data, route data, geographic imagery, data associated with various waypoints (e.g., business listing names, addresses, geographic coordinates, etc.) and other data.
- the application 120 can implement a navigation service by interacting with the navigation data provider 114 via the API 130 over the network 116.
- the network 116 can be any type of communications network, such as a local area network (e.g. intranet), wide area network (e.g. Internet), cellular network, or some combination thereof.
- the network 116 can also include a direct connection.
- communication can be carried via network 116 using any type of wired and/or wireless connection, using a variety of communication protocols (e.g. TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g. HTML, XML), and/or protection schemes (e.g. VPN, secure HTTP, SSL).
- FIG. 4 depicts an example user device 112 configured to implement a navigation API 130 according to example embodiments of the present disclosure.
- the user device 112 includes an instruction memory 152, one or more processors 154 configured to execute instructions stored in the memory 152, a display device 156, a network interface 158 that supports network communications, and a storage memory 160.
- the instruction memory 152 and the storage memory 160 are illustrated separately. It will be understood, however, that the components 152 and 160 also can be regions within the same memory module. More generally, the user device 112 can include one or several additional processors, memory devices, network interfaces, which may be provided separately or on a same chip or board. Further, the components 152 and 160 may include persistent memory (e.g., flash memory), volatile memory (e.g., RAM), or both, or other suitable memory.
- persistent memory e.g., flash memory
- volatile memory e.g., RAM
- the instruction memory 152 can store sets of instructions of an operating system (OS) 170, a navigation API 130, and a software application 120.
- the OS 170 can be a mobile OS developed specifically for mobile devices.
- the OS 170 can include functions that allow the software application to access data such as wireless network parameters (e.g., identity of the wireless network, quality of service), as well as invoke such services as telephony, location determination (e.g., via global positioning service (GPS) or WLAN), wireless network data call origination, etc.
- the OS 170 is a general-purpose operating system that operates on both mobile and stationary devices, such as smartphones and desktop computers, for example.
- the OS includes or based upon an Android ® mobile operating system developed by Google Inc. or similar operating system to implement an Android operating platform.
- Android Android ® mobile operating system developed by Google Inc.
- the software application 120 can be, for example, a mapping application, a navigation application, ride share application, an application to assist with delivery, a social media application, etc. Further, the software application 120 can be a web browser application that invokes the navigation API 130 to display navigation information within an allocated portion of a browser window. In general, the navigation API 130 can be made available to any suitable software application that executes on the user device 120. Also, multiple different software applications may invoke the navigation API 130.
- the software application 120 can invoke the navigation API 130 to embed a navigation service in the software application 120.
- a software application 120 can provide one or more waypoints to the navigation API 130.
- the navigation API 130 can request navigation data from a remote navigation data provider to determine a navigation route based on the one or more waypoints.
- the navigation API 130 can include sets of instructions to control the display of navigation information on the mobile device as part of the navigation service.
- the API 130 can include one or more event listeners used to update the displayed navigation information, for instance, based on user location as determined by a positioning system implemented as part of the user device.
- the positioning system can include one or more devices or circuitry for determining the position of a device.
- the positioning device can determine actual or relative position by using a satellite navigation positioning system (e.g. a GPS system, a Galileo positioning system, the GLObal Navigation satellite system (GLONASS), the BeiDou Satellite Navigation and Positioning system), an inertial navigation system, a dead reckoning system, based on IP address, by using triangulation and/or proximity to cellular towers or WiFi hotspots, beacons, and the like and/or other suitable techniques for determining position.
- a satellite navigation positioning system e.g. a GPS system, a Galileo positioning system, the GLObal Navigation satellite system (GLONASS), the BeiDou Satellite Navigation and Positioning system
- GLONASS GLObal Navigation satellite system
- inertial navigation system e.g. a dead reckoning system
- IP address e.g. a triangulation and/or proximity to cellular towers or WiFi hotspots, beacons, and
- the navigation API 130 can be implemented as one or several functions, a data structure, etc. Further, the API 130 may include compiled code that executes directly on the processor(s) 154 or, alternatively, instructions in any other form such as a scripting language interpreted at runtime by the application 120.
- the API 130 in one example implementation includes well-documented prototypes of several functions which a developer can include in the code of the software application 120, as well as instructions that implement these functions.
- the API 130 can be provided to the developer as a static library.
- FIG. 5 depicts a block diagram of example sets of instructions that a developer can use to configure the navigation API 130 according to example embodiments of the present disclosure.
- the sets of instructions can include, for instance, initialization and error handling instructions 310; navigation fragment instructions 320 that can specify parameters to control the display of the visual output of the navigation service; various classes 330 specified in the instructions that allow a developer, for instance, to add markers to a map and to specify waypoints; navigator instructions 350 that can specify parameters to control the implementation of the navigation service, and a navigation service instructions 370 that can specify parameters to control the interaction with the navigation data provider for requesting and receiving navigation information (e.g., routing information).
- the navigation service instructions 370 can also include the logic used to implement the navigation service as part of the software application (e.g., to move indicia indicative of user position along a route).
- the navigation API 130 can be implemented as follows. First, a developer of a software application can add the navigation fragment class 320 to their application to display the visual output (e.g., graphical user interface component)) of the navigation service. The developer can control the navigation service by specifying one or more parameters in the navigator instructions 350. When not in a navigation mode, the navigation fragment class 320 displays a top down overview map. Calling a set waypoint function in the navigator instructions 350 (e.g., Navigator.setWapoint((7)) can display a navigation route in polyline on a map with a mark for each waypoint. The developer can trigger navigation to the waypoint by calling an enter navigation mode function in the navigator instructions 350 (e.g., Navigator.enterNavigationMode()).
- a set waypoint function in the navigator instructions 350 e.g., Navigator.enterNavigationMode().
- Navigation mode can continue until the waypoint is reached (e.g., as determined by an event listener) or until an exit navigation mode function in the navigator instructions 350 is called (e.g. Navigator.exitNavigationMode()).
- navigation mode can be used without a waypoint in a free navigation format.
- the location of the user e.g., based on a positioning system of the user device
- the developer can add markers to the map using a get map function specified in the Navigation Fragment instructions 320 (e.g., NavigationFragment.getMap()).
- the initialization and error handling instructions 310 can be an entry point for the API 130 from which a developer can obtain access to the navigator instructions 350. In this way, the initialization and error handling logic can be handled separate from the navigation logic.
- the initialization and error handling instructions 310 can require an API key to authorize the developer to use the API.
- the initialization and error handling instructions 310 can also require a user to accept terms and conditions provided by the navigation data provider before using the navigation service.
- the initialization and error handling instructions 310 can be implemented as follows:
- the navigation fragment instructions 320 can specify one or more parameters to control implementation of the graphical user interface component. Developers can add the navigation fragment instructions 320 to display the visual output of navigation (e.g., an interactive map and turn-by-turn directions) in conjunction with the software application.
- the navigation fragment instructions 320 can be implemented as a fragment in an Android based operating platform rather than as a view to reduce complexity. For instance, using a view implementation can require the developer to forward lifecycle methods (e.g., onCreate(), onResume(), etc.) to the view manually.
- the navigation fragment instructions 320 can be implemented as a view without deviating from the scope of the present disclosure.
- a fragment can be a portion of a user interface of an application that can be placed in an activity.
- multiple fragments can be implemented as part of an application to build a multi-pane user interface.
- a fragment can have its own lifecycle and can receive its own input events that can be added or removed while the activity is running.
- Example aspects of the present disclosure are discussed with implementing the navigation fragment instructions 320 in an Android operating platform for purposes of illustration and discussion.
- the navigation fragment instructions 320 can be implemented in other ways to provide similar functionality without deviating from the scope of the present disclosure.
- the navigation fragment instructions 320 can include parameters that allow a developer to control which aspects of the graphical user interface component associated with the navigation service are shown. For instance, the developer can construct the graphical user interface with builder function in the navigation fragment instructions 320 (e.g., NavigationFragment.Builder). In some embodiments, the developer can choose whether to display a navigation header, a compass element, ETD information, or other information in conjunction with the navigation service.
- builder function e.g., NavigationFragment.Builder
- the developer can choose whether to display a navigation header, a compass element, ETD information, or other information in conjunction with the navigation service.
- the graphical user interface component can be constructed as follows:
- the graphical user interface component can be constructed using XML as follows:
- a fragment class interface can be implemented as follows:
- the graphical user interface component can also be implemented as a view in an Android operating platform rather than as a fragment.
- various lifecycle events can be forwarded from the application activity.
- the navigation view can be implemented as followed.
- the following lifecycle methods may need to be forwarded for a navigation view set of instructions: onCreate, onStart, onResume, onPause, onStop, onDestroy, on Configuration Changed, onSaveInstanceState.
- the API 130 can include various class instructions 330, such as a maps class, waypoint class, a lat/lng class, and a camera class.
- the maps class can a developer to add waypoints to a map.
- the maps class can also include various functions to control the depictions of the map in the graphical user interface component.
- the map class can be implemented as follows:
- the waypoint class can create or specify waypoints from various data indicative of the location of the waypoint, such as a place identification, address, latitude/longitude coordinates, semantic name, or other place identification.
- the waypoint class can be specified as follows:
- the lat/lng class can be used to generate lat/lng variable indicative of place location based at least in part on data indicative of latitude and longitude.
- the lat/lng class can be implemented as follows:
- Another example class that can be implemented can be a camera class that can be used to adjust the position and perspective of the map being shown as part of the navigation.
- a reference to the current camera can be obtained using a get camera interface specified as part of the navigation fragment.
- the camera class can be implemented as follows:
- the navigator instructions 350 can specify one or more parameters to control the implementation of the navigation service by the software application.
- the navigator instructions 350 can be implemented as a singleton in an Android operating platform. This can allow the developer to implement the navigator instructions 350 without requiring use of the navigation fragment instructions 320.
- the navigation service can provide navigation information (e.g. using audio notifications) without a graphical user interface component. This can be useful when a user is completing a full screen task via the application invoking the API 130 while navigating.
- the navigator instructions 350 can, for instance, determine if a route to one or more destination waypoints has been successfully calculated and received and can be configured to provide information indicative of whether a route was received, or whether there were various errors (e.g., network errors).
- the navigator instructions 350 can further set one or more waypoints and can control entry and exit into a navigation mode.
- the navigator instructions 350 can be used to enable driving simulation that can simulate driving along a computed route.
- the navigator instructions 350 can also specify parameters associated with audio guidance to provide audio cues or vibratory cues during navigation.
- the navigator instructions 350 can be implemented as follows:
- the navigator instructions 350 can implement one or more event listener interfaces 360.
- the event listener interfaces 360 can be registered with the navigator instructions 350.
- the event listener interfaces 360 can be used for call backs to obtain data associated with one or more navigation events to update the navigation information provided as part of the navigation service.
- a navigation event can be any event which can affect the navigation information presented to the user.
- the navigation event can be a change in user position, a change in traffic conditions, a change in one or more waypoints, a change in route information, a change in ETD information, etc.
- the event listeners can be used to update the navigation information presented as part of the navigation service as a user is traveling or navigating along a route.
- the event listener interfaces 360 can be registered with the navigator instructions 350 as follows:
- FIG. 6 depicts a block diagram of the one or more event listener interfaces 360 that can be implemented as part of the navigator instructions 350 according to example embodiments of the present disclosure.
- the one or more event listener interfaces 360 can include a location listener interface 362, a route changed listener interface 364, an arrival listener interface 366, and/or an ETD listener interface 368.
- the event listener interfaces 360 can be configurable event listener interfaces 360 such that the developer can specify various settings and parameters of the event listener interface 360 in the instructions associated with the API 130, such as in the navigator instructions 350.
- the location listener interface 362 can be configured to be called (e.g., by the navigator interface) to update a current location of a user in the navigation service. In this way, the navigation service can display the current location of the user along a navigation route as the current location of the user is updated.
- One example location listener interface 362 can be implemented as follows:
- the route changed listener interface 364 can be configured to be called to update route information when the calculated route changes. For instance, the route information can be updated when a better route is calculated or when a user diverges from a recommended route.
- the route provided by the route changed listener interface 364 can be provide in polyline for display in conjunction with a map as part of the navigation service.
- One example route changed listener interface 364 can be implemented as follows:
- the arrival listener interface 366 can be called to signal when a user has arrived at a specified waypoint. For instance, the arrival listener interface 366 can be called to exit a navigation mode when a user has arrived at a waypoint.
- One example arrival listener interface 366 can be implemented as follows:
- the ETD listener interface 368 (e.g., a remaining time or remaining distance listener interface) can be called when a time remaining or a distance remaining to waypoint has changed by more than a threshold.
- the threshold can be specified as a parameter in the navigator instructions 350.
- the ETD information (e.g., time remaining or distance remaining) can change as a result of navigation events such as user movement (e.g., a change in user position), a change in traffic conditions, a change in route, a change in one or more waypoints, or when the remaining time or the remaining distance first become known.
- the updated ETD information can be presented to the user as part of the navigation service, for instance, as part of a graphical user interface component or through audio guidance or other notification.
- One example ETD listener interface 368 can be implemented as follows:
- Navigation service instructions 370 shown in FIG. 5 can actually power the navigation service (e.g. can provide the logic for the navigation service) and can be controlled by the parameters set forth in the navigator instructions 350.
- the navigation service instruction 370 can control interaction with a routing engine to provide navigation information based on parameters specified in the navigator instructions 350 and navigation events as determined by one or more event listener interfaces 360.
- developers do not specify parameters for the navigation service instructions 370 and the navigation service instructions act as an internal interface for the API 130. Developers can implement the navigation service instructions 370, for instance, by adding a reference to the navigation instructions to the manifest.xml for the software application.
- the navigation service instructions 370 can be implemented as follows:
- FIG. 7 depicts a flow diagram of one example method (400) of integrating a navigation service into a software application using a navigation API according to example embodiments of the present disclosure.
- the method (400) can be implemented using, for instance, the API 130 depicted in FIG. 5 .
- FIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion. Those of ordinary skill in the art, using the disclosures provided herein, will understand that various steps of any of the methods disclosed herein can be adapted, modified, rearranged, omitted, and/or expanded without deviating from the scope of the present disclosure.
- the method can include accessing and incorporating data (e.g., files) associated with the navigation API 130 into the software application.
- data e.g., files
- a user can download files associated with the navigation API 130, for instance, over a network (e.g., the Internet) and can provide the navigation API files into a subdirectory under a gradle root associated with the software application.
- Libraries associated with the navigation API 130 and third-party dependencies can be added to the software application.
- an access key for enabling the navigation API 130 can be obtained.
- the access key can be obtained from the navigation data provider.
- the access key can be added to the software application, for instance, to the androidmanifest.xml associated with the software application.
- the developer can construct the graphical user interface component associated with the navigation service by specifying parameters in the navigation fragment set of instructions 320 (or in some embodiments, a navigation view set of instructions). This can add an interactive map and turn-by-turn navigation graphical user interface component to the software application.
- the developer can use initialization and error handling instructions to initialize the navigation API 130.
- the navigator instructions 350 can be used to control and configure the navigation service as shown at (410). For example, various functions can be specified to determine when to start and exit a navigation mode.
- one or more event listener interfaces 360 can be included in the navigator instructions 350 to capture navigation events, such as arrival, route changes, user position changes, ETD information changes, etc.
- the method can include building and testing the software application with the integrated navigation service.
- the navigation API 130 can be configured to accommodate multi-waypoint routing among a plurality of different waypoints.
- FIG. 8 depicts a block diagram of an example navigation API 130 configured to accommodate multi-waypoint routing.
- the navigation API 130 can be similar to the navigation API 130 shown in FIG. 5 .
- the navigation API 130 of FIG. 8 can include initialization and error handling instructions 310, navigation fragment instructions 320 (or in some embodiments navigation view instructions), various class instructions 330 (e.g., map class, waypoint class, latlng class, camera class, etc).
- the API 130 can include navigator instructions 350 and navigation service instructions 370.
- the navigator instructions 350 can specify parameters to control the implementation of the navigation service, and navigation service instructions 370 that can control the interaction with the navigation data provider for requesting and receiving navigation information.
- the navigator instructions 350 can include one or more multi-waypoint functions 510 and one or more multi-waypoint event listener interfaces 520 to accommodate multi-waypoint routing by the navigation service.
- the multi-waypoint event listener interfaces 520 can be registered with the navigator instructions 350.
- the event listener interfaces 520 can be used for call backs to obtain data associated with one or more navigation events to update the navigation information provided as part of the navigation service.
- the navigation event can be a change in user position, a change in traffic conditions, a change in one or more of the plurality waypoints, a change in route information of one or more route segments in a multi-waypoint route, a change in ETD information to a next destination in a multi-waypoint route, etc.
- the multi-waypoint functions 510 can be used to implement various functions associated with multi-waypoint routing.
- the multi-waypoint functions can be used to set one or more waypoints to make a multi-waypoint route, access ETD information for each of the plurality of the waypoints along the multi-waypoint route, access location information associated with each of the plurality of waypoints along the multi-waypoint route, access route segments between waypoints along the multi-waypoint route, and access where a user has been along a multi-waypoint route during a particular navigation session.
- FIG. 9 depicts a block diagram of the various multi-waypoint functions 510 and event listener interfaces 520 that can be used as part of or registered with the navigator instructions 350 to implement multi-waypoint navigation according to example embodiments of the present disclosure.
- the multi-waypoint functions 510 can include one or more waypoint functions 512 that can be used to set and manage a plurality of waypoints for a multi-waypoint route.
- the waypoint functions 512 can include a set multi-waypoint function, a set single waypoint function, a continue to next waypoint function, and clear waypoint function.
- the set multi-waypoint function can be configured to set a plurality of waypoints for a multi-waypoint route input via a list of waypoints.
- the set multi-waypoint function will set the multiple waypoints (overriding any previous waypoints), which can be visited in the order specified in the list.
- the function can return future for a route status function (which determines the status of a calculated route). This can resolve to OK if a multi-waypoint route is generated for the multiple waypoints.
- An error code can be generate for a network or quota error.
- the set multi-waypoint function can be implemented in the navigator instructions 350 as follows:
- a set single waypoint function can be used as a convenience method to set a single waypoint for a navigation route.
- the set single waypoint function can be implemented in the navigator instructions 350 as follows:
- a continue to next waypoint function can be used to initiate navigation to a next waypoint in a multi-waypoint navigation section. In some embodiments, this function can be required to be called explicitly. In these embodiments, the API may not move onto the next waypoint automatically. The continue to next destination function can return an exception if there are no waypoints remaining in the multi-waypoint route. In some embodiments, the continue to next destination function can be implemented in the navigator instructions 350 as follows:
- a clear waypoint function can be used to clear one or more (e.g., all) previously set waypoints. This function can also stop navigation if navigation was running.
- the clear waypoint function can be implemented in the navigator instructions 350 as follows:
- the one or more event listeners 520 can include an arrival event listener interface 522.
- the arrival event listener interface can be called when a user has arrived at a particular waypoint.
- the arrival event listener interface 522 can be registered with the navigator instructions 350 as follows:
- the one or more event listeners 520 can further include an ETD listener interface 524.
- the ETD listener interface can be called to update ETD information when a distance remaining or a time remaining to a next waypoint in the plurality of waypoints of a multi-waypoint route changes by more than a threshold.
- the threshold can be specified by the developer in the navigator instructions.
- the ETD listener interface 524 can be registered with the navigator instructions 350 as follows:
- the multi-waypoint functions 510 can include a get ETD function 514.
- the get ETD function can obtain ETD information (e.g., remaining time and/or remaining distance) for a specified waypoint along a multi-waypoint route.
- the get ETD function 514 can be implemented in the navigator instructions 350 as follows:
- the multi-waypoint functions 510 can further include a get next ETD function.
- the get next ETD function can return ETD information (e.g., remaining time and/or remaining distance) to a next waypoint in the multi-waypoint route. If there are no next waypoints, the function can return null.
- the get next ETD function can be implemented in the navigator instructions 350 as follows:
- the event listener interface 520 can further include a route changed event listener interface 526.
- the route changed event listener interface 526 can be registered with the navigator instructions to provide updates when a multi-waypoint navigation route changes.
- the route changed event listener interface 526 can be called when any route segment of a multi-waypoint navigation route changes. For instance, the route changed event listener interface 526 can be called when the initial multi-waypoint route changes, when a user deviates from the navigation route, if the user manually selects another navigation route, etc.
- the route changed event listener interface 526 can be implemented in the navigator instructions 350 as follows:
- the ETD information (e.g., TimeAndDistance) is an immutable type.
- TimeAndDistance can be implemented as follows:
- the multi-waypoint functions 510 can include get route segment functions 516.
- the get route segment functions can include a get current route segment function to return a current route segment to the next waypoint, a list route segment function to list all rout segments in a multi-waypoint navigation route, and a get traveled route segment to get route segments already traveled in the multi-waypoint navigation route.
- the get route segment functions can be implemented as follows:
- RouteSegment can be an immutable type.
- RouteSegment can be implemented as follows:
- the event listener interfaces 520 can further include a location listener interface 528.
- the location listener interface 528 can similar to the location listener interface 362 discussed with reference to FIG. 6 .
- the location listener interface 528 can be configured to be called (e.g., by the navigator interface) to update a current location of a user in the navigation service. In this way, the navigation service can display the current location of the user along a multi-point navigation route as the current location of the user is updated.
- server processes discussed herein may be implemented using a single server or multiple servers working in combination.
- Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.
Description
- The present disclosure relates generally to application programming interfaces for providing navigation information.
- Applications implemented on computing devices, such as mobile computing devices (e.g., smartphones, tablets, smart watches, etc.) have been developed for a variety of purposes, including business, social, health, and other purposes. These applications can provide a user interface (e.g., a graphical user interface) for presenting information to a user as well as allowing the user to interact with the application. Popular applications for mobile computing devices include maps applications that make varied geographic information (e.g., current location information presented on a map) available to users.
- In some cases it may be desired for an application that is not primarily intended for mapping or navigation to incorporate navigation or map information - for example it might be desirable for a health or fitness application to provide navigation or map information to allow the user to find their way around a course, complete a run of a certain distance etc. In principle the health or fitness application could be written to incorporate a bespoke navigation or map interface, but this would require increased programming resources to create the application.
- http://web.archive.org/web/20160316095427/http://developer.skobbler.com/gettin g-started/android is titled ""How to" for the Android SDK".
- http://web.archive.org/web/20151027041626/http:/developer.skobbler.com/release -notes is titled "SDK | Release Notes | Development Platform OSM".
- http://web.archive.org/web/20151206054940/http://developer.skobblercom/docs/a ndroid/2.5.1/index-all.html is titled "Index (SKMaps Framework)".
- Examples and advantages of the present disclosure will be set forth in part in the following description, or may be learned from the description, or may be learned through practice of the examples. The invention is defined in the appended claims.
- One example of the present disclosure is directed to a non-transitory computer-readable medium according to claim 1.
- Another example of the present disclosure is directed to a method according to claim 9. The method may comprise: obtaining an access key for enabling operation of the navigation application programming interface; and adding the access key to the software application. Additionally or alternatively the method may comprise initializing the navigation application programming interface using a set of initialization and error handling instructions associated with the navigation application programming interface. Additionally or alternatively the one or more configurable event listener interfaces may comprise a location listener interface operable to be called to update a current location of a user in the navigation service. Additionally or alternatively the one or more event listener interfaces may comprise a remaining time or remaining distance changed listener interface operable to be called when a time remaining or a distance remaining to a waypoint has changed by more than a threshold. Additionally or alternatively configuring the navigation service using a second set of instructions may comprise setting the threshold as a parameter in the second set of instructions.
- Another example is directed to a computing device according to claim 15.
- Application programming interfaces can allow applications implemented on computing devices to interact with various services to provide information and functionality to a user. Application programming interfaces can provide a tool for developers to embed information, programming, frameworks, and structures into applications for access by the user. For example, a map service provider can provide a maps application programming interface that can be used by third parties to embed a digital map into a user interface of an application developed by the third party. This avoids the need for the developer of the third to create their own maps application.
- Other examples of the present disclosure are directed to systems, apparatus, computer-readable media, which may be tangible, non-transitory computer-readable media, user interfaces, memory devices, and electronic devices associated with an application programming interface for providing navigation information.
- These and other features, examples and advantages will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate examples of the present disclosure and, together with the description, serve to explain the related principles.
- Detailed discussion of embodiments directed to one of ordinary skill in the art are set forth in the specification, which makes reference to the appended figures, in which:
-
FIG. 1 depicts an overview of an example system for implementing a navigation service as part of a software application using an application programming interface according to example embodiments of the present disclosure; -
FIGS. 2-3 depicts an example graphical user interface component associated with a navigation service implemented as part of a software application according to example embodiments of the present disclosure; -
FIG. 4 depicts a block diagram of an example user device implementing a software application according to example embodiments of the present disclosure; -
FIG. 5 depicts a block diagram of an example navigation application programming interface according to example embodiments of the present disclosure; -
FIG. 6 depicts a block diagram of example navigator instructions associated with a navigation application programming interface according to example aspects of the present disclosure; -
FIG. 7 depicts a flow diagram of an example method according to example embodiments of the present disclosure; -
FIG. 8 depicts a block diagram of an example navigation application programming interface according to example embodiments of the present disclosure; and -
FIG. 9 depicts a block diagram of example navigator instructions associated with a navigation API according to example aspects of the present disclosure. - Reference now will be made in detail to embodiments, one or more examples of which are illustrated in the drawings. Each example is provided by way of explanation of the embodiments, not limitation of the present disclosure. In fact, it will be apparent to those skilled in the art that various modifications and variations can be made to the embodiments. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that aspects of the present disclosure cover such modifications and variations.
- Example aspects of the present disclosure are directed to application programming interfaces ("APIs") for providing navigation information in third party software applications implemented on one or more computing devices, such as web-based software applications implemented in a browser, locally-stored software applications, and other applications. In some embodiments, the API can allow application developers to embed a navigation application provided by a navigation data provider or other source in their software application. The API can allow the developer to easily customize and tailor the navigation application to accommodate varying platforms and end use cases.
- More specifically, the API, when invoked by a software application implemented on a computing device, can be configured to request and receive routing information from a data provider via a communication interface (e.g., over a network, such as the Internet). The API can be configured present navigation information (e.g., through a graphical user interface component or through audio and/or vibratory cues) based on the routing information to provide a navigation service embedded in the software application. A navigation service can be an application (e.g. a software application) that provides navigation information that can be used to guide a user from an origin and a destination. In some embodiments, the navigation service embedded in the software application can provide navigation information (e.g., turn-by-turn navigation information) to a user as a user traverses along a navigation route or other path. More particularly, in some embodiments, the navigation service can receive a route directing a user from to a current location to a destination. As one example, the route can include a sequence of steps, each describing a route portion (e.g., name or number of the road, distance, travel time, speed limit) and a maneuver (e.g., left turn, merge right, proceed straight) to access the next route portion. The navigation service can provide the route to a user through a graphical user interface and via one or more cues (e.g., audio or video cues) to guide the user from an origin to a destination.
- In some embodiments, the software application can interact with a routing engine implemented by a navigation data provider or other source (e.g., a local source of navigation information) via the API to obtain routing information and other navigation information. The navigation data provider can be associated with a separate entity relative to the developer of the software application. For instance, the navigation data provider can be associated with a web server that hosts a geographic information system. The navigation information can include a route to one or more waypoints. The navigation information can further include map data for presentation in conjunction with the route and other information. The navigation information can be continuously updated (e.g., through one or more event listener interfaces implemented as part of the API) as the user traverses the navigation route to provide real time or near real time navigation information for a user.
- The API when implemented by a software application can visually present the navigation information associated with the navigation service in a graphical user interface component displayed in conjunction with the software application. For instance, the graphical user interface component can display a map. The default display of the map can be, for instance, a top-down view of the map. During a navigation mode, the graphical user interface component can display a route in polyline on the map. The position of the user can be updated along the route as the user navigates the route. For instance, the navigation service can provide a graphical user interface where a position of the user is continuously updated along the navigation route as the user position changes along the navigation route. Various waypoints can be identified by markers located in the map. Other information can be presented in the graphical user interface component, such as estimated time or distance remaining to arrival at a waypoint ("ETD information"), a compass interface element, a navigation heading element, etc. In some embodiments, the navigation information can be provided using audio guidance with or without the visual display of navigation information in the graphical user interface component.
- According to particular aspects of the present disclosure, the API can include sets of computer-readable instructions that when executed by one or more processors facilitate integration of the navigation application into a developer's software application. The sets of instructions, when implemented by one or more processors, can govern interaction by the software application with the navigation data provider via the API as well as the display and/or delivery of navigation information to the user as part of the software application.
- More particularly, example instructions associated with an API that are facing a developer of a software application can include a set of instructions specifying one or more parameters that govern the display of the visual output of the navigation service. The API can further include a set of instructions specifying one or more parameters that control the implementation of the navigation service and a set of instructions that governs the interaction of the API with the routing engine provided by the navigation data provider.
- According to particular aspects of the present disclosure, the API can include one or more configurable event listener interfaces that when called allow the software application invoking the API to obtain data indicative of various navigation events (e.g., from the navigation data provider over the network). The navigation events can be, for instance, updated user position, a changed route, an update to ETD information, arrival at a waypoint, etc. The configurable event listener interfaces can be used to continuously update the navigation information as a user traverses along a route in a manner desired by the software application developer. For instance, one example event listener interface can be used to update the current location of a user along a navigation route. Another example event listener interface can be used to update ETD information to one or more waypoints. Another example event listener interface can be used to signal when a user has arrived at a particular waypoint. Another example event listener interface can be used when a user diverges from a route determined by the routing engine and the route to a waypoint determined by the routing engine changes.
- In some implementations, the API can be configured to accommodate navigation for a plurality of waypoints. Data indicative of the plurality of waypoints can be received via the API, for instance, in a list form ordering the waypoints. The routing engine can determine a multi-waypoint route to the plurality of waypoints. The multi-waypoint route can include a plurality of route segments. Each route segment can be a route between waypoints in the multi-waypoint route or between a start location and a waypoint in the multi-waypoint route.
- The API can include one or more event listener interfaces to accommodate providing navigation information based on a multi-waypoint route. For instance, the one or more event listener interfaces can be configured to provide notifications when each waypoint is reached, when ETD information to the next waypoint changes, or when any part of the multi-waypoint route changes. In addition, the one or more event listener interfaces can be configured to provide access to ETD information for each waypoint along the multi-waypoint route, access to geographic coordinates (e.g., latitude and longitude) for each waypoint, access to the information associated with a route segment (e.g. a navigation polyline) between each waypoint along the multi-waypoint route, and/or access to where the user has been along the multi-waypoint route independently of the route to the next waypoint in the multi-waypoint route.
- In this way, the APIs according to example embodiments of the present disclosure can have a technical effect of facilitating the integration of a navigation service provided by a navigation data provider in various software applications. One or more configurable event listener interfaces implemented as part of the APIs can be used to continuously update the navigation information as a user traverses along a navigation route in a manner desired by the developer. The APIs can allow for the customization of the navigation service for various end use needs, such as for ride sharing applications, shipping/delivery applications, social applications, and other end use applications.
-
FIG. 1 depicts an overview of anexample system 100 for implementing a navigation service as part of a software application using a navigation API according to example embodiments of the present disclosure. Thesystem 100 can include auser device 112 that can receive navigation data from a navigation data provider 114 via acommunication network 116. Theuser device 112 can be, for instance, a smartphone, tablet, wearable device, laptop, desktop, mobile device, device capable of being carried by a user while in operation, display with one or more processors, vehicle system, orother user device 112. - A
software application 120 can be implemented on theuser device 112. The software application can be, for instance, a mapping application, a browser, a ride share application, an application used to assist with delivery, a social media application or other software application that may need to provide navigation information to a user. Thesoftware application 120 can be stored locally on theuser device 112 or can be, for instance, a web application accessed via a browser implemented on theuser device 112. In some embodiments, thesoftware application 120 can be developed by a third party entity that is independent of and/or not affiliated with an entity associated the navigation data provider 114. - The
software application 120 can invoke anavigation API 130 to access and provide navigation data from the navigation data provider 114 via thecommunication network 116 so that a navigation service can be embedded in thesoftware application 120. Example aspects of the present disclosure are discussed with accessing data from a remote navigation data provider 114 for purposes of illustration and discussion. Those of ordinary skill in the art, using the disclosures provided herein, will understand that theAPI 130 can access data from other sources, such as local sources or applications located on theuser device 112. - The navigation service can present navigation information (e.g., turn-by-turn navigation information) to a user in real time or near real time as a user or vehicle carrying the
user device 112 traverses along a route from an origin to one or more destinations. The navigation service can include a graphical user interface component for presenting the navigation information to the user on one or more display devices. In addition and/or the navigation service can provide audio guidance or other notifications (e.g., vibratory notifications) to the user indicative of navigation information (e.g., turn-by-turn) directions. -
FIG. 2 depicts an example graphicaluser interface component 200 associated with a navigation service embedded as part of agraphical user interface 122 of asoftware application 120 according to example embodiments of the present disclosure. The graphicaluser interface component 200 can be displayed on a display device of theuser device 112. The graphicaluser interface component 200 can include various interface elements that provide navigation information to a user as part of a navigation service. As shown inFIG. 2 , the graphicaluser interface component 200 includes amap 202 as well as aroute 210 presented on themap 202. In addition,markers 212 indicative of waypoints can be presented on themap 202. Theroute 210 is displayed on a top down view of themap 202 to provide a route overview. According to example embodiments of the present disclosure, data associated with themap 202, theroute 210 and information associated with thewaypoints 212, and other navigation information can be obtained from a navigation data provider 114 via anAPI 130 invoked by thesoftware application 120 as will be discussed in more detail below. -
FIG. 3 depicts another aspect of an example graphicaluser interface component 200 associated with a navigation service embedded as part of agraphical user interface 122 of asoftware application 120 according to example embodiments of the present disclosure. In the example ofFIG. 3 , the navigation service can be providing turn-by-turn navigation directions with the graphicaluser interface component 200 as the user or vehicle traverses a route in real time or near real time. The graphicaluser interface component 200 can include various interface elements for presenting navigation information to a user. For instance, the graphicaluser interface component 200 can include amap 202 and aroute 210 presented in polyline on themap 202. The graphicaluser interface component 200 can further presentindicia 230 indicative of a current position of the user or vehicle traveling along theroute 210. Theindicia 230 can move along theroute 210 as the user or vehicle travels along theroute 210. - The graphical
user interface component 200 can present other information to the user that can be useful in navigation. For instance, the graphicaluser interface component 200 can further include anavigation header element 220 that can display the current navigation direction and other information associated with a current portion of the route. In addition, the graphicaluser interface component 220 can displayETD information 232, such as estimated minutes or estimated distance to arrival to the next waypoint. According to example embodiments of the present disclosure, data associated with themap 202, theroute 210, etc. can be obtained from a navigation data provider 114 or other source via anAPI 130 invoked by thesoftware application 120. One or more event listener interfaces implemented as part of thenavigation programming interface 130 can be used to update the navigation information as the user or vehicle travels along the route. - The example graphical
user interface components 200 can be displayed when theAPI 130 is operating in a navigation mode. The navigation mode can be entered based on various events, such as the specifying of one or more waypoints and/or the receipt of a user input signaling the desire to begin a navigation mode. In some embodiments, the graphicaluser interface component 200 can display theroute 210 when operating in the navigation mode. When not operating in the navigation mode, the graphicaluser interface component 200 displays a top down view of a map. -
FIGS. 2 and3 depict one example implementation of a graphical user interface component associated with a navigation service that can be embedded in anapplication 120 using anavigation API 130 according to example embodiments of the present disclosure. The navigation service can present navigation information in other suitable forms without deviating from the scope of the present disclosure. - Referring back to
FIG. 1 , theAPI 130 can be configured to interface with arouting engine 140 implemented by the navigation data provider 114. Therouting engine 140 can be configured to, for instance, compute routes to one or more waypoints, access mapping data, update navigation data based on various navigation events, and respond to requests for navigation data from theAPI 130. In some embodiments, the navigation data provider 114 can include one or more servers, such as web servers. The one or more servers can include one or more processors and one or more memory devices. The one or more memory devices can store computer-readable instruction to implement, for instance, therouting engine 140. In some embodiments, therouting engine 140 can access data associated, for instance, with ageographic information system 115. Thegeographic information system 115 can include data that indexed by geographic coordinates of its elements. The data associated with thegeographic information system 115 can include, for instance, map data, route data, geographic imagery, data associated with various waypoints (e.g., business listing names, addresses, geographic coordinates, etc.) and other data. - The
application 120 can implement a navigation service by interacting with the navigation data provider 114 via theAPI 130 over thenetwork 116. Thenetwork 116 can be any type of communications network, such as a local area network (e.g. intranet), wide area network (e.g. Internet), cellular network, or some combination thereof. Thenetwork 116 can also include a direct connection. In general, communication can be carried vianetwork 116 using any type of wired and/or wireless connection, using a variety of communication protocols (e.g. TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g. HTML, XML), and/or protection schemes (e.g. VPN, secure HTTP, SSL). -
FIG. 4 depicts anexample user device 112 configured to implement anavigation API 130 according to example embodiments of the present disclosure. As shown, theuser device 112 includes aninstruction memory 152, one ormore processors 154 configured to execute instructions stored in thememory 152, adisplay device 156, anetwork interface 158 that supports network communications, and astorage memory 160. For clarity, theinstruction memory 152 and thestorage memory 160 are illustrated separately. It will be understood, however, that thecomponents user device 112 can include one or several additional processors, memory devices, network interfaces, which may be provided separately or on a same chip or board. Further, thecomponents - The
instruction memory 152 can store sets of instructions of an operating system (OS) 170, anavigation API 130, and asoftware application 120. TheOS 170 can be a mobile OS developed specifically for mobile devices. As such, theOS 170 can include functions that allow the software application to access data such as wireless network parameters (e.g., identity of the wireless network, quality of service), as well as invoke such services as telephony, location determination (e.g., via global positioning service (GPS) or WLAN), wireless network data call origination, etc. In other implementations, theOS 170 is a general-purpose operating system that operates on both mobile and stationary devices, such as smartphones and desktop computers, for example. In some example implementations, the OS includes or based upon an Android® mobile operating system developed by Google Inc. or similar operating system to implement an Android operating platform. However, other suitable operating systems can be used without deviating from the scope of the present disclosure. - The
software application 120 can be, for example, a mapping application, a navigation application, ride share application, an application to assist with delivery, a social media application, etc. Further, thesoftware application 120 can be a web browser application that invokes thenavigation API 130 to display navigation information within an allocated portion of a browser window. In general, thenavigation API 130 can be made available to any suitable software application that executes on theuser device 120. Also, multiple different software applications may invoke thenavigation API 130. - As discussed above, the
software application 120 can invoke thenavigation API 130 to embed a navigation service in thesoftware application 120. For instance, in one example, asoftware application 120 can provide one or more waypoints to thenavigation API 130. Thenavigation API 130 can request navigation data from a remote navigation data provider to determine a navigation route based on the one or more waypoints. Thenavigation API 130 can include sets of instructions to control the display of navigation information on the mobile device as part of the navigation service. TheAPI 130 can include one or more event listeners used to update the displayed navigation information, for instance, based on user location as determined by a positioning system implemented as part of the user device. - In some embodiments, the positioning system can include one or more devices or circuitry for determining the position of a device. For example, the positioning device can determine actual or relative position by using a satellite navigation positioning system (e.g. a GPS system, a Galileo positioning system, the GLObal Navigation satellite system (GLONASS), the BeiDou Satellite Navigation and Positioning system), an inertial navigation system, a dead reckoning system, based on IP address, by using triangulation and/or proximity to cellular towers or WiFi hotspots, beacons, and the like and/or other suitable techniques for determining position.
- The
navigation API 130 can be implemented as one or several functions, a data structure, etc. Further, theAPI 130 may include compiled code that executes directly on the processor(s) 154 or, alternatively, instructions in any other form such as a scripting language interpreted at runtime by theapplication 120. TheAPI 130 in one example implementation includes well-documented prototypes of several functions which a developer can include in the code of thesoftware application 120, as well as instructions that implement these functions. In some embodiments, theAPI 130 can be provided to the developer as a static library. -
FIG. 5 depicts a block diagram of example sets of instructions that a developer can use to configure thenavigation API 130 according to example embodiments of the present disclosure. The sets of instructions can include, for instance, initialization anderror handling instructions 310;navigation fragment instructions 320 that can specify parameters to control the display of the visual output of the navigation service;various classes 330 specified in the instructions that allow a developer, for instance, to add markers to a map and to specify waypoints;navigator instructions 350 that can specify parameters to control the implementation of the navigation service, and anavigation service instructions 370 that can specify parameters to control the interaction with the navigation data provider for requesting and receiving navigation information (e.g., routing information). In some embodiments, thenavigation service instructions 370 can also include the logic used to implement the navigation service as part of the software application (e.g., to move indicia indicative of user position along a route). - In some embodiments, the
navigation API 130 can be implemented as follows. First, a developer of a software application can add thenavigation fragment class 320 to their application to display the visual output (e.g., graphical user interface component)) of the navigation service. The developer can control the navigation service by specifying one or more parameters in thenavigator instructions 350. When not in a navigation mode, thenavigation fragment class 320 displays a top down overview map. Calling a set waypoint function in the navigator instructions 350 (e.g., Navigator.setWapoint(...)) can display a navigation route in polyline on a map with a mark for each waypoint. The developer can trigger navigation to the waypoint by calling an enter navigation mode function in the navigator instructions 350 (e.g., Navigator.enterNavigationMode()). - Navigation mode can continue until the waypoint is reached (e.g., as determined by an event listener) or until an exit navigation mode function in the
navigator instructions 350 is called (e.g. Navigator.exitNavigationMode()). In some implementations, navigation mode can be used without a waypoint in a free navigation format. In a free navigation format, the location of the user (e.g., based on a positioning system of the user device) can be used to update the user's current location on a map. In some embodiments, the developer can add markers to the map using a get map function specified in the Navigation Fragment instructions 320 (e.g., NavigationFragment.getMap()). - Referring to
FIG. 5 , the initialization anderror handling instructions 310 can be an entry point for theAPI 130 from which a developer can obtain access to thenavigator instructions 350. In this way, the initialization and error handling logic can be handled separate from the navigation logic. The initialization anderror handling instructions 310 can require an API key to authorize the developer to use the API. The initialization anderror handling instructions 310 can also require a user to accept terms and conditions provided by the navigation data provider before using the navigation service. - In some example embodiments, the initialization and
error handling instructions 310 can be implemented as follows:
class NavigationApi { /** * Requests an instance of the {@link Navigator}, which is returned via a * {@link NavigatorListener}. Note that Navigator is a singleton; if * you call this method multiple times, each call will return the same Navigator. */ static void getNavigator ( Application application, NavigatorListener listener); // Status codes for #initialize(Application). /** * The API key you supplied is not authorized to use the Navigation API. This * may be because the early access period has expired. Your app should fall * back to another navigation mechanism if this code is received, to ensure * that the mechanism doesn't break for users who haven't updated your app * after the Navigation API early access period expires. */ @ErrorCode public static final int ERROR NOT AUTHORIZED = 1; /** * The user has not accepted Navigation Data Provider's terms. This can be remedied * by asking the user to accept Navigation Data Provider's navigation terms. See {@link * #createTermsActivityIntent(Context)}. */ @ErrorCode public static final int ERROR TERMS NOT ACCEPTED = 2; /** * The Navigation API is unable to access the internet. */ @ErrorCode public static final int NETWORK_ERROR = 3; /** * Shows a dialog that directs the user to accept Navigation Data Provider's terms and * conditions. If a listener is provided it will be notified with the user's * response. */ public static void showTermsAndConditionsDialog ( Activity activity, @Nullable OnTermsResponseListener listener ); /** * Returns {@code true} if the user has previously accepted Navigation Data Provider's * terms and conditions. */ public static boolean areTermsAccepted ( Application application ); /** * Reset the terms and conditions acceptance state - for testing. * Add a call to this before any calls to {@link NavigationApi} if you want * to test the terms and conditions dialog. */ public static void resetTermsAccepted (Application application); /** * Register a NavigatorListener with {@link #getNavigator( * Application, NavigatorListener)} to be notified about the status of said * { @link Navigator}. Note that only one of NavigatorListener's methods will be * called, and that all calls occur on the UI thread. */ public interface NavigatorListener { /** * Indicates that a {@link Navigator} was created successfully, and returns it to * the caller. */ void onNavigatorReady( Navigator navigator); /** * Indicates that an error occurred in initializing the {@link Navigator}. * {@code errorCode} is one of the @ErrorCode constants. */ void onError( @ErrorCode int errorCode); } /** * Register an OnTermsResponseListener with {@link #showTermsAndConditionsDialog} * to be notified whether the user accepts the terms and conditions. * The notification will occur on the UI thread. */ public interface OnTermsResponseListener { /** * Indicates whether the terms and conditions were accepted by the user. */ void onTermsResponse( boolean accepted); } }
@Override protected void onCreate(Bundle savedInstanceState) { super .onCreate(savedInstanceState); this ,findViewById(R.id. start_button ).setOnClickListener( new View.OnClickListener() { @Override public void onClick(View v) { startNavigation(); } }); } private void startNavigation() { // Request a Navigator NavigationApi. getNavigator (getApplication(), new NavigationApi.NavigatorListener() { @Override public void onNavigatorReady(Navigator navigator) { // We obtained a Navigator, set a destination, start navigating, // Add UI to the screen navigator.setDestination(Waypoint. fromPlaceId ( getPlaceId(), "Pickup location" )); navigator. startNavigation(); getFragmentManager() .beginTransaction() .add(R.id. body_container, new NavigationFragment()) .commit(); } @Override public void onError( @NavigationApi.ErrorCode int errorCode) { switch (errorCode) { // The user hasn't accepted the terms yet; prompt them to. case NavigationApi. INIT_STATUS_TERMS_NOT_ACCEPTED : Dialog dlg = NavigationApi.createTermsAcceptanceDialog(SimpleActivity. this ); dlg.show(); // Callback TBD. } } }); }
NavigationFragment f = new NavigationFragment . Builder () .setNavigationHeaderEnabled( true) .setEtaCardEnabled( false) .setCompassButtonEnabled( true) .build();
<fragment android:name = "com. navprovider. android.libraries. navigation.NavigationFragment" navigation:navigation_header_enabled = "true" navigation:eta_card_enabled = "false" navigation:compass_button_enabled = "true" />
class NavigationFragment { static class Builder { // Enables or disables the fragment's navigation header. Builder setNavigationHeaderEnabled( boolean enabled); // Enables or disables the fragment's ETA card (e.g., ETD information). Builder setEtaCardEnabled( boolean enabled); // Enables or disables the compass button. Builder setCompassButtonEnabled( boolean enabled); // Builds the NavigationFragment. NavigationFragment build(); } // Gets a reference to the fragment's Map, which can be used to display markers and // modify the camera. Map getMap(); }
Navigation View mNavigationView; @ Override protected void onStart() { super .onStart(); mNavigationView.onStart(); }
class Map { // Constructs a marker with the specified options and adds it to the map. Marker addMarker( MarkerOptions options); // Clears all markers from the map. void clear(); // Pans and zooms the map to show an overview of the entire route. This will // temporarily prevent the camera from following the user's position. // The camera can be reset to follow using {@link #resetCamera()}. void showRouteOverview( boolean animate); // Pans and zooms the map to the specified location. This will temporarily prevent // the camera from following the user's position. // The camera can be reset to follow using {@link #resetCamera()}. void setCamera( LatLng center, float zoom, boolean animate); // Resets the camera back to its default mode (i.e. if navigating, the camera will // follow the user's position). void resetCamera( boolean animate); }
class Waypoint { // Creates a waypoint from a place ID. Throws an IllegalArgumentException // if the place ID was invalid. static Waypoint fromPlaceId( string placeId); // Creates a waypoint from a lat/lng and an optional title. static Waypoint fromLatLng( double latitude, double longitude, @Nullable String title); }
class LatLng { /** Latitude, in degrees. This value is in the range [-90, 90]. */ public final double latitude; /** Longitude, in degrees. This value is in the range [-180, 180). */ public final double longitude; /** * Constructs a LatLng with the given latitude and longitude, measured in degrees. * @param latitude The point's latitude. This will be clamped to between -90 * degrees and +90 degrees inclusive. * @param longitude The point's longitude. This will be normalized to be within * -180 degrees inclusive and +180 degrees exclusive. */ public LatLng( double latitude, double longitude); }
class Camera { /** * Set the Camera to follow the location of the user. This is typically called when * starting turn-by-turn guidance to enter a "tilted" driving view. * * @param perspective A choice of { @link Perspective} specifying what perspective the * Camera should use when following. */ void followMyLocation (@ Perspective int perspective ); /** * Pans and zooms the map to show an overview of the remaining route. This will * temporarily prevent the camera from following the user's position. * <p> * The camera can be reset to follow the user using {@link #followMyLocation}. */ void showRouteOverview(); @ IntDef ({ Perspective . TILTED, Perspective .TOP DOWN HEADING UP, Perspective TOP DOWN NORTH UP}) @ interface Perspective { /** * A tilted perspective facing in the same direction as the user. Commonly used during * driving navigation. */ int TILTED = 0 ; /** * A top-down perspective of the camera's target, facing in the same direction as the * user. This is equivalent to tapping the compass button during navigation. */ int TOP DOWN HEADING UP = 1 ; /** * A north-facing top-down perspective of the camera's target. This is commonly used * when showing an overview of a selection of markers. */ int TOP_DOWN_NORTH_UP = 2 ; }
class Navigator { /** * A RouteStatus is a status code that represents the result of a route * calculation, accessed via the Future returned by * {@link #setDestination(Waypoint)}. */ public enum RouteStatus { // A route to the destination was successfully calculated. OK, // A route to the destination could not be calculated. NO ROUTE FOUND, // A route to the destination could not be calculated because of a network error. NETWORK ERROR, // A route to the destination could not be calculated because of insufficient // quota. QUOTA_CHECK_FAILED } // Sets the destination, replacing any previously set destination(s). // The future will return a {@link RouteStatus} representing the result. ListenableFuture < RouteStatus > setDestination( Waypoint waypoint); // Sets the list of upcoming navigation waypoints, replacing any previously // set list of waypoints. // The returned future will be set to true if a route was found connecting // all the desired waypoints, otherwise false. ListenableFuture<boolean> setWaypoints(List<Waypoint> waypoint); // Enters navigation mode. If a waypoint is set, navigation starts. void startNavigation(); // Exits navigation mode and goes back to the overview map. void stopNavigation(); // Enables or disables driving simulation. Useful for debugging. When enabled, the // indicia will automatically start moving along the specified route towards the // next waypoint. // if (BuildConfig.DEBUG) { Navigator.setSimulationEnabled(true); } void setSimulationEnabled( boolean enabled); // AudioGuidance is a set of flags used to specify what kinds of audio guidance are // used during navigation. public @interface AudioGuidance { /** * Specifies that voice guidance and vibrations should be disabled. This * flag should always be specified by itself; it is a mistake to combine * this with any other {@link AudioGuidance} flags. */ int SILENT = 0; /** * Specifies that vibrations should be enabled. */ int VIBRATION = 1; /** * Specifies that voice should be enabled. Note that this value alone * will not allow voice guidance to be played over Bluetooth; to enable * that, { @link AudioGuidance.VOICE_WITH_BLUETOOTH} should be used * instead. */ int VOICE = 2; /** * Specifies that voice guidance should be enabled, and transmitted over * Bluetooth if available. This flag enables a superset of the * functionality of {@link AudioGuidance.VOICE}. */ int VOICE WITH BLUETOOTH = 4; /** * Sets which types of audio guidance (including vibration) are enabled. By * default, vibration, voice, and voice over Bluetooth (if available) are * enabled. * @param guidance A combination of {@link AudioGuidance} flags specifying * which types of audio guidance should be enabled. */ void setAudioGuidance( @AudioGuidance int guidance); ... }
class Navigator { .... // Callbacks. Set to null to remove. void setLocationListener( @Nullable LocationListener listener); void setArrivalListener( @Nullable ArrivalListener listener); void setRouteChangedListener( @Nullable RouteChangedListener listener); /** * Registers a listener for when the remaining time or distance to the destination * changes by more than a specified threshold. Overrides any previously registered * listeners. * <p> * The listener could be called as a result of (for example) user movement, a * change in traffic conditions, a change in route, a change in destination, or * when the remaining time and distance first become known. * * @param timeChangeThresholdSeconds If the absolute change in the remaining time * in seconds is greater than or equal to this value, then the listener is * called. This threshold must not be negative. * @param distanceChangeThresholdMeters If the absolute change in the remaining * distance in meters is greater than or equal to this value, then the listener * is called. This threshold must not be negative. * @param listener The listener to register. Must not be {@code null}. */ void setRemainingTimeOrDistanceChangedListener( int timeChangeThresholdSeconds, int distanceChangeThresholdMeters, RemainingTimeOrDistanceChangedListener listener) ; /** * Clears the listener for changes in remaining time or distance. */ void clearRemainingTimeOrDistanceChangedListener(); }
interface Navigator.LocationListener { // Called when the driver's road-snapped location/heading is updated. // This is provided at the fastest available rate from the navigation // engine. void onLocationUpdated(android.location. Location location); }
interface Navigator.RouteChangedListener { // Called when the route changes, e.g. when a better route is calculated or // when the driver diverges from the recommended route. // The route provided is the polyline for the new route. void onRouteChanged( List < LatLng > route); }
interface Navigator. ArrivalListener { // Called when the driver has arrived at the specified waypoint. void onArrivedAtWaypoint( Waypoint waypoint); }
interface Navigator.RemainingTimeAndDistanceChangedListener { /** * Called on the UI thread when the time or distance to the destination has changed * by more than the thresholds specified in {@link Navigator * #setRemainingTimeOrDistanceListener(int,int, * RemainingTimeOrDistanceChangedListener)}. This could be a result of (for * example) user movement, a change in traffic conditions, a change in route, a * change in destination, or when the remaining time and distance first become * known. */ void onRemainingTimeAndDistanceUpdated( Waypoint waypoint, int remainingTimeSeconds, int distanceMeters); }
< service android:name= "com.navprovider.android.libraries.navigation.NavigationService" />
ListenableResultFuture<RouteStatus> setDestinations(List<Waypoint> destinations)
ListenableResultFuture<RouteStatus> setDestination(Waypoint destination)
void continueToNextDestination() throws NoNextDestinationException to Waypoint continueToNextDestination()
void clearDesintations()
Void ArrivalListener.onArrivedAtWaypoint(Waypoint waypoint)
void setRemainingTimeOrDistanceChangedListener(int seconds, int metres, listener) /* Registers a listener to receive ETD updates, any time the ETD to the next destination * changes by more than seconds or meters. */ void RemainingTimeOrDistanceChangedListener.onChanged() /* This callback is fired each time the ETD to the next destination has changed by * more than the thresholds set in setRemainingTimeOrDistanceChangedListener() */
@Nullable TimeAndDistance getTimeAndDistance(Waypoint waypoint)
@Nullable TimeAndDistance getNextTimeAndDistance()
void setRouteChangedListener(RouteChangedListener listener)
/* Registers a listener to be notified each time the route changes, for example on the * initial route configuration from the server, each time the driver deviates from course, if
* the driver manually selects an alternative route by tapping it on the screen. This will be * fired when any segment of the route changes. */
RouteChangedListener.onRouteChanged() /* This callback is fired when the route changes (as defined above). */
public interface TimeAndDistance { /* The number of meters from the current position to this waypoint. */ public int getMeters(); /* The estimated number of seconds before arriving at this waypoint. */ public int getSeconds(); }
@Nullable RouteSegment getCurrentRouteSegment() /* Returns the current leg of the journey. This RouteSegment will have its start position as * the most recently known position of the device. If there is no next destination, it will * return null. */ List<RouteSegment> getRouteSegments() /* Returns a list of RouteSegments in the journey. The first RouteSegment will be what * would have been returned by getCurrentRouteSegment(), followed by RouteSegments * corresponding to each unreached destination. It is guaranteed that the LatLng lists for * consecutive RouteSegments start and end with the same value. */ List<LatLng> getTravelledRoute() /* Returns the route travelled during this navigation session (since the last call to * startGuidance() ), generated off roadsnapped location updates, and simplified to * remove redundant points (e.g. replacing consecutive colinear points with a single line * segment). */
public interface RouteSegment { /* The destination this route segment ends at. */ public Waypoint getDestinationWaypoint(); /* The LatLng this route segment ends at. This will in general not * coincide with the Waypoint, unless the Waypoint is positioned * directly on a road. */ public LatLng getDestinationLatLng(); /* The route itself. */ public List<LatLng> getLatLngs(); }
Claims (15)
- A non-transitory computer-readable medium (160) storing instructions that implement an application programming interface (130) for providing a navigation service as part of a software application executed on a computing device (112), the computing device having one or more processors (154) and a display device (156), the application programming interface comprising:a first set of instructions (350) specifying one or more first parameters to control the implementation of a navigation service by the software application, the navigation service configured to provide navigation information to a user of the software application through a graphical user interface;a second set of instructions specifying one or more second parameters to control interaction with a routing engine via the application programming interface;wherein the first set of instructions specify one or more configurable event listener interfaces (360), the configurable event listener interfaces operable to obtain data associated with one or more navigation events to update the navigation information provided as part of the navigation service through the graphical user interface; andwherein the one or more configurable event listener interfaces comprise an arrival listener interface (366) operable to be called to exit a navigation mode when the user has arrived at a specified waypoint, wherein, in the navigation mode, the graphical user interface displays navigation directions and, in response to exiting the navigation mode, the graphical user interface displays an overview map .
- The non-transitory computer-readable medium of claim 1, wherein the one or more configurable event listener interfaces comprise a location listener interface (362) operable to be called to update a current location of the user in the navigation service.
- The non-transitory computer-readable medium of claim 1 or 2, wherein the one or more configurable event listener interfaces comprise a route changed listener interface (364) operable to be called when a route provided as part of the navigation service changes.
- The non-transitory computer-readable medium of any preceding claim, wherein the one or more configurable event listener interfaces comprise a remaining time or remaining distance changed listener interface operable to be called when a time remaining or a distance remaining to a waypoint has changed by more than a threshold, the threshold specified as one of the first parameters in the first set of instructions.
- The non-transitory computer-readable medium of any preceding claim, wherein the first set of instructions comprises one or more first parameters operable to specify the operation of an audio guidance mode in conjunction with the navigation service, and/or wherein the first set of instructions is implemented as a singleton in an Android operating platform.
- The non-transitory computer-readable medium of any preceding claim, wherein the application programming interface comprises a waypoint interface (510) for receiving one or more waypoints for navigation.
- The non-transitory computer-readable medium of any preceding claim, wherein the application programming interface comprises a third set of instructions specifying one or more third parameters to control the display of the graphical user interface associated with the navigation service on the display device in conjunction with the software application.
- The non-transitory computer-readable medium of claim 7, wherein the third set of instructions specifies the display of a navigation route determined by the routing engine in polyline on a map when in a navigation mode;and/or wherein the third set of instructions specifies the display of a top down view of a map when not in a navigation mode;and/or wherein the third set of instructions specifies parameters to control the display of a navigation header element or an estimated time of arrival element, in conjunction with the graphical user interface component;and/or wherein the third set of instructions is implemented as a fragment in an Android operating platform.
- A method for integrating a navigation service as part of a software application on a computing device having one or more processors, the method comprising:accessing data associated with a navigation application programing interface (130);incorporating the data associated with a navigation programming interface into the software application;constructing a graphical user interface component associated with the navigation service using a first set of instructions (350) associated with the navigation application programming interface, the first set of instructions specifying one or more parameters to control the display of the graphical user interface component associated with the navigation service on the display device in conjunction with a software application; andconfiguring the navigation service using a second set of instructions associated with the navigation application programming interface, the second set of instructions specifying one or more parameters to control the implementation of the navigation service by the software application;wherein the second set of instructions comprise one or more configurable event listener interfaces (360), the configurable event listener interfaces operable to obtain data associated with one or more navigation events to update navigation information provided as part of the navigation service; andwherein the one or more configurable event listener interfaces comprise an arrival listener interface (366) operable to be called to exit a navigation mode when the user has arrived at a specified waypoint, wherein in the navigation mode, the graphical user interface component displays navigation directions and, in response to exiting the navigation mode, the graphical user interface component displays an overview map.
- The method of claim 9, wherein the method comprises:obtaining an access key for enabling operation of the navigation application programming interface; andadding the access key to the software application.
- The method of claim 9 or 10, wherein the method comprises initializing the navigation application programming interface using a set of initialization and error handling instructions associated with the navigation application programming interface.
- The method of claim 9, 10 or 11, wherein the one or more configurable event listener interfaces comprise a location listener interface operable to be called to update a current location of the user in the navigation service.
- The method of claim 9, 10, 11 or 12, wherein the one or more event listener interfaces comprise a remaining time or remaining distance changed listener interface operable to be called when a time remaining or a distance remaining to a waypoint has changed by more than a threshold.
- The method of claim 13, wherein configuring the navigation service using a second set of instructions comprises setting the threshold as a parameter in the second set of instructions.
- A computing device (112), comprising:a display device (156);a network interface (158);one or more processors (154); andone or more memory devices (160), wherein the one or more memory devices store computer-readable instructions that implement an application programming interface (130) invoked by a software application executed on the computing device (112) to obtain navigation information from a navigation data provider to provide a navigation service as part of the software application, the instructions comprising:a first set of instructions (350) specifying one or more first parameters to control the implementation of a navigation service by the software application, the navigation service providing navigation information to a user of the software application, the one or more first parameters controlling when the navigation service enters into and exits a navigation mode;a second set of instructions specifying one or more second parameters to control interaction with a routing engine provided by the navigation data provider via the application programming interface to obtain the navigation information provided as part of the navigation service when in the navigation mode;a third set of instructions specifying one or more third parameters to control the display of a graphical user interface component associated with the navigation service on the display device in conjunction with a software application;wherein the first set of instructions specify one or more configurable event listener interfaces (360), the configurable event listener interfaces operable to obtain data associated with the one or more navigation events to update the navigation information provided as part of the navigation service during the navigation mode; andwherein the one or more configurable event listener interfaces comprise an arrival listener interface (366) operable to be called to exit a navigation mode when the user has arrived at a specified waypoint, wherein, in the navigation mode, the graphical user interface component is configured to display navigation directions and, in response to exiting the navigation mode, the graphical user interface component is configured to display an overview map.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/080,672 US10169110B2 (en) | 2016-03-25 | 2016-03-25 | Navigation application programming interface |
PCT/US2016/065063 WO2017164942A1 (en) | 2016-03-25 | 2016-12-06 | Navigation application programming interface |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3374867A1 EP3374867A1 (en) | 2018-09-19 |
EP3374867B1 true EP3374867B1 (en) | 2024-01-31 |
Family
ID=57570649
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP16813323.9A Active EP3374867B1 (en) | 2016-03-25 | 2016-12-06 | Navigation application programming interface |
Country Status (6)
Country | Link |
---|---|
US (1) | US10169110B2 (en) |
EP (1) | EP3374867B1 (en) |
CN (1) | CN107229461B (en) |
DE (2) | DE102016124464A1 (en) |
GB (1) | GB2548949A (en) |
WO (1) | WO2017164942A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN108088436B (en) * | 2017-11-30 | 2020-02-18 | 努比亚技术有限公司 | Navigation information prompting method, terminal and computer readable storage medium |
CN109992293B (en) * | 2018-01-02 | 2023-06-20 | 深圳市宇通联发科技有限公司 | Method and device for assembling Android system component version information |
CN111435924B (en) * | 2019-01-14 | 2021-08-31 | 华为技术有限公司 | Method and device for calling application program interface |
USD953371S1 (en) | 2021-10-22 | 2022-05-31 | BioReference Health, LLC | Display screen or portion thereof with animated graphical user interface |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8417449B1 (en) * | 2008-09-30 | 2013-04-09 | Jason A. Denise | Electronic navigation related technology |
KR101474115B1 (en) * | 2013-03-26 | 2015-01-02 | 한양대학교 에리카산학협력단 | Method of managing application data flow using singleton pattern |
Family Cites Families (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6901594B1 (en) * | 1999-04-23 | 2005-05-31 | Nortel Networks Ltd. | Apparatus and method for establishing communication between applications |
US20010034754A1 (en) * | 2000-03-17 | 2001-10-25 | Elwahab Amgad Mazen | Device, system and method for providing web browser access and control of devices on customer premise gateways |
US7228225B1 (en) * | 2002-09-18 | 2007-06-05 | Garmin Ltd. | Methods and systems to interface navigation operations |
US7856315B2 (en) * | 2004-10-01 | 2010-12-21 | Telecommunication Systems, Inc. | Method and system for enabling an off board navigation solution |
CN101210959A (en) * | 2006-12-25 | 2008-07-02 | 中国移动通信集团公司 | Moving terminal navigation method and system |
CN101183006B (en) * | 2007-11-14 | 2010-09-15 | 深圳市凯立德计算机系统技术有限公司 | Method for confirming remaining time of navigation system, device and navigation system |
CN101441087A (en) * | 2007-11-23 | 2009-05-27 | 佛山市顺德区顺达电脑厂有限公司 | Method for prompting navigation information according to recalculating navigation path |
US9409052B2 (en) * | 2008-10-03 | 2016-08-09 | Adidas Ag | Program products, methods, and systems for providing location-aware fitness monitoring services |
EP2360958B1 (en) * | 2010-02-12 | 2015-03-25 | Accenture Global Services Limited | Mobile network monitoring by measuring quality of service QoS |
CN102023866A (en) * | 2010-12-16 | 2011-04-20 | 中兴通讯股份有限公司 | Map control based on Google Maps JavaScript API and production method thereof |
KR20120067830A (en) | 2010-12-16 | 2012-06-26 | 한국전자통신연구원 | System for map service in mobile web, and terminal for the same |
US9542241B2 (en) | 2011-07-12 | 2017-01-10 | Harman International Industries, Incorporated | Navigation application interface |
US20130231889A1 (en) * | 2012-03-01 | 2013-09-05 | Lockheed Martin Corporation | Method and apparatus for an inertial navigation system |
US20140101249A1 (en) | 2012-07-10 | 2014-04-10 | Mark Lampe | Systems and Methods for Managing and Presenting Information |
US8849942B1 (en) | 2012-07-31 | 2014-09-30 | Google Inc. | Application programming interface for prefetching map data |
US20140099973A1 (en) * | 2012-10-04 | 2014-04-10 | Libera, Inc. | Systems and methods for finding mobile phone users |
US20140114565A1 (en) | 2012-10-22 | 2014-04-24 | Adnan Aziz | Navigation of a vehicle along a path |
US8886460B1 (en) | 2012-11-29 | 2014-11-11 | Google Inc. | Mobile device navigation state application programming interface |
US10054463B2 (en) * | 2013-09-26 | 2018-08-21 | Google Llc | Systems and methods for providing navigation data to a vehicle |
US9958289B2 (en) * | 2013-09-26 | 2018-05-01 | Google Llc | Controlling navigation software on a portable device from the head unit of a vehicle |
US20150088642A1 (en) * | 2013-09-26 | 2015-03-26 | Mastercard International Incorporated | Intelligent shopping cart service |
US10785172B2 (en) * | 2014-05-23 | 2020-09-22 | Verizon Patent And Licensing Inc. | Method and apparatus for delivering messages based on user activity status |
US20160054137A1 (en) * | 2014-08-20 | 2016-02-25 | Tomtom International B.V. | Navigation device with enhanced widgets and applications |
US9756139B2 (en) * | 2014-12-30 | 2017-09-05 | Facebook, Inc. | Executing requests for services using shared location data |
FR3046273B1 (en) | 2015-12-23 | 2018-10-12 | Thales | OPEN ARCHITECTURE FOR FLIGHT MANAGEMENT SYSTEM |
-
2016
- 2016-03-25 US US15/080,672 patent/US10169110B2/en active Active
- 2016-12-06 WO PCT/US2016/065063 patent/WO2017164942A1/en active Application Filing
- 2016-12-06 EP EP16813323.9A patent/EP3374867B1/en active Active
- 2016-12-14 GB GB1621270.6A patent/GB2548949A/en not_active Withdrawn
- 2016-12-15 DE DE102016124464.3A patent/DE102016124464A1/en not_active Ceased
- 2016-12-15 CN CN201611158888.7A patent/CN107229461B/en active Active
- 2016-12-15 DE DE202016008228.1U patent/DE202016008228U1/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8417449B1 (en) * | 2008-09-30 | 2013-04-09 | Jason A. Denise | Electronic navigation related technology |
KR101474115B1 (en) * | 2013-03-26 | 2015-01-02 | 한양대학교 에리카산학협력단 | Method of managing application data flow using singleton pattern |
Also Published As
Publication number | Publication date |
---|---|
GB2548949A (en) | 2017-10-04 |
US10169110B2 (en) | 2019-01-01 |
CN107229461A (en) | 2017-10-03 |
GB201621270D0 (en) | 2017-01-25 |
US20170277577A1 (en) | 2017-09-28 |
DE102016124464A1 (en) | 2017-09-28 |
EP3374867A1 (en) | 2018-09-19 |
CN107229461B (en) | 2022-01-14 |
DE202016008228U1 (en) | 2017-06-07 |
WO2017164942A1 (en) | 2017-09-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10061625B2 (en) | Navigation application programming interface to accommodate multiple waypoint routing | |
KR102480786B1 (en) | Navigation application programming interface | |
EP3374867B1 (en) | Navigation application programming interface | |
US9811395B1 (en) | Multi-platform mapping API | |
US8676502B2 (en) | GPS navigation and cellular route planning device | |
US20100153348A1 (en) | Report Generation for a Navigation-Related Database | |
US20180100742A1 (en) | API for Obtaining Geographic Location Data | |
JP7323286B2 (en) | Electronics and computer programs to provide a definite pick-up location | |
CN110178116B (en) | Auxiliary screen shot | |
US20150323341A1 (en) | Guidance system for attractions | |
US20180017403A1 (en) | Navigation API for Linking Software Applications | |
MacLean et al. | Exploring maps and location-based services | |
KR102645423B1 (en) | Method and apparatus for providing game contents using augmented reality view | |
Křečková | Turistická navigace s davovým sběrem dat o přístupnosti | |
KR20190125263A (en) | Method, system, and non-transitory computer readable medium for providing pick up place | |
Khan | Smart Tourist Guide | |
PEOPLE | DESIGN AND IMPLEMENTATION OF A SECURE MOBILE PHONE | |
JP2017053682A (en) | Program, information processing apparatus, and navigation system | |
KR20110132764A (en) | Method, server and system for providing traffic report |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: UNKNOWN |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE INTERNATIONAL PUBLICATION HAS BEEN MADE |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20180612 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAV | Request for validation of the european patent (deleted) | ||
DAX | Request for extension of the european patent (deleted) | ||
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20210219 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTG | Intention to grant announced |
Effective date: 20221018 |
|
GRAJ | Information related to disapproval of communication of intention to grant by the applicant or resumption of examination proceedings by the epo deleted |
Free format text: ORIGINAL CODE: EPIDOSDIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
GRAJ | Information related to disapproval of communication of intention to grant by the applicant or resumption of examination proceedings by the epo deleted |
Free format text: ORIGINAL CODE: EPIDOSDIGR1 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTC | Intention to grant announced (deleted) | ||
INTG | Intention to grant announced |
Effective date: 20230324 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230522 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4DRef country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602016085580Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |