CN105745647B - Call path finder - Google Patents
Call path finder Download PDFInfo
- Publication number
- CN105745647B CN105745647B CN201480062873.3A CN201480062873A CN105745647B CN 105745647 B CN105745647 B CN 105745647B CN 201480062873 A CN201480062873 A CN 201480062873A CN 105745647 B CN105745647 B CN 105745647B
- Authority
- CN
- China
- Prior art keywords
- node
- function
- path
- call
- identified
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 241000614201 Adenocaulon bicolor Species 0.000 title description 3
- 238000000034 method Methods 0.000 claims abstract description 79
- 230000006870 function Effects 0.000 claims description 275
- 230000004044 response Effects 0.000 claims description 11
- 230000008859 change Effects 0.000 claims description 7
- 229910002056 binary alloy Inorganic materials 0.000 claims description 5
- 238000011160 research Methods 0.000 claims description 3
- 230000002457 bidirectional effect Effects 0.000 claims description 2
- 238000011156 evaluation Methods 0.000 claims description 2
- 238000012360 testing method Methods 0.000 claims description 2
- 238000000151 deposition Methods 0.000 claims 1
- 238000005516 engineering process Methods 0.000 abstract description 9
- 238000003860 storage Methods 0.000 description 23
- 238000004891 communication Methods 0.000 description 19
- 238000010586 diagram Methods 0.000 description 19
- 230000008569 process Effects 0.000 description 16
- 238000012545 processing Methods 0.000 description 12
- 238000010276 construction Methods 0.000 description 7
- 238000004458 analytical method Methods 0.000 description 6
- 230000003068 static effect Effects 0.000 description 5
- 238000001914 filtration Methods 0.000 description 4
- 238000004364 calculation method Methods 0.000 description 3
- 230000002093 peripheral effect Effects 0.000 description 3
- 230000006399 behavior Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 238000006243 chemical reaction Methods 0.000 description 2
- 230000006835 compression Effects 0.000 description 2
- 238000007906 compression Methods 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 241000894007 species Species 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000012790 confirmation Methods 0.000 description 1
- 238000011217 control strategy Methods 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000006073 displacement reaction Methods 0.000 description 1
- 235000013399 edible fruits Nutrition 0.000 description 1
- 230000007717 exclusion Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 238000007667 floating Methods 0.000 description 1
- 238000012905 input function Methods 0.000 description 1
- 238000007689 inspection Methods 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 230000010354 integration Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 230000014759 maintenance of location Effects 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 238000005259 measurement Methods 0.000 description 1
- 230000001737 promoting effect Effects 0.000 description 1
- 238000013468 resource allocation Methods 0.000 description 1
- 230000000630 rising effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/43—Checking; Contextual analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3676—Test management for coverage analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3688—Test management for test execution, e.g. scheduling of test suites
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/43—Checking; Contextual analysis
- G06F8/433—Dependency analysis; Data or control flow analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/74—Reverse engineering; Extracting design information from source code
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/75—Structural analysis for program understanding
Abstract
Disclose the technology and systems of the call graph for creating code library.Chart creation include by function signature come the function (1001) in cognizance code library and by function representation be call chart in first node (1070).For the function, (1200) invocation target function is identified according to the function signature of the function, call source function and inherits father's function and subfunction and basic class；Based on the invocation target function identified and source function is called to add the first child node (1020) to first node；(1010) are called for the interface of the basic class method in function, the realization of the overriding based on basic class method adds (1090) child node (1020) to first node；For added child node, if including that the source file of realization of overriding and the source code file including function do not share at least one common binary file (1100)-(1150), which is removed from first node.
Description
Background technique
Complicated large scope software product or software development environment increasingly may require the program developed or safeguarded
Member reads unfamiliar code.In this case, when the control flow between tracking function may be challenging and consuming
Between.
Summary of the invention
A kind of function call generated for code library involved in some embodiments of solution discussed in this article
The method of chart, this method comprises: by function signature come the function in cognizance code library；The specific function identified is indicated
For the first node in call graph；For specific function, the function signature based on specific function, identifying call target
(call-to) function, call source (call-from) function, inherit father's function and inherit subfunction and with the specific function
Associated basic class；Based on the invocation target function identified and source function is called to add the first child node to first node；
The interface of basic class method in specific function is called, the realization of the overriding based on basic class method is added to first node
Second child node；For the second child node added by least one, determine to include the of the realization of added specific overriding
Whether one source code file and the second source code file including specific function share at least one common binary file；And
In response to determining that the first source code file and the second source code file do not share common binary file, institute is deleted from first node
Second child node of addition.
In certain embodiments, this method includes the graph edge identified between first node and added second child node
So as to subsequent ranking.In certain embodiments, this method includes the memory usage for reducing call graph.
In certain embodiments, reducing memory usage includes that hash function is applied to each function signature and will be hashed
The result of function is stored as the expression of function signature.
In certain embodiments, the first source code file of the realization including added specific overriding is determined and including spy
It includes: that identification is related to the specific function that whether the second source code file for determining function, which shares at least one common binary file,
The dependence of connection；First Bloom filter is generated to the test binary file of the dependence for being identified, generates Bloom
Filter includes the size for changing the Bloom filter of the first generation based on the number of the dependence identified；And by
One Bloom filter generated is applied to specific binary file to determine whether the specific binary file includes the spy
Determine function.
In certain embodiments, the first source code file of the realization including added specific overriding is determined and including spy
Whether the second source code file for determining function shares at least one common binary file further include: the Bloom generated second
Filter is applied to the specific binary file to determine whether the specific binary file includes added specific reality
It is existing；And the Bloom filter of the first generation and the Bloom filter of the second generation are passed through in response to the specific binary file
Both wave devices and determine the first source code file and the second source code file using the specific binary file as public two into
File processed is shared.
In certain embodiments, the method also includes based on the code library for using the second source code file to compile or generate
Binary file generate Bloom filter；And the Bloom filter of generation is added to first node.
In certain embodiments, the first source code file of the realization including added specific overriding is determined and including spy
It includes: to filter the Bloom of first node that whether the second source code file for determining function, which shares at least one common binary file,
Wave device is applied to the first source code file.
In certain embodiments, the binary file for the code library for compiling or generating by using the second source code file
Quantity determines the size of Bloom filter, so that the bloom filter phase of the source code file frequently used and larger size
Association.
Two functions in a kind of determining code library involved in some embodiments of solution discussed in this article it
Between the method for being capable of calling path, this method comprises: receiving source function and objective function as input；In call graph
Middle identification start node associated with source function and endpoint node associated with objective function；Search for start node and end
The possible path in call graph between node, described search include to along searching route each node be directed to by
Node is assessed in the public dependence list that start node and endpoint node are shared；It include in public dependence list to having
The node of dependence assessed, by the node of the assessment include in possible path and search function is called in chart and assessed
Node any child node and start node or endpoint node between all possible paths；To do not have be included in it is public according to
The node assessed for relying the dependence in property list, the node assessed is excluded from any possible path；Starting is saved
All possible paths between point and endpoint node are classified using the result as described search and appraisal procedure；And it returns and divides
The conduct of at least one of possible path of class can be capable of calling path.
It in certain embodiments, include: by all possible paths from being most short to longest by the classification of all possible paths
Sequence；The path those of in single code library completely is identified among the path sorted；To the path application power to be sorted
Q factor, so that all possible paths are sorted from most probable to most unlikely based on path length and weight factor,
The weight factor includes by path is designated as more likely those of in single code library completely；And weight is applied described
At least most possible path conduct is returned after factor can be capable of calling path.
It in certain embodiments, include based on the historical tracking number for executing and generating from previous function using weight factor
According to weight factor is generated, so that the function call path as indicated by historical tracking data is designated as more having with by those paths
Possible weight factor is associated.
It in certain embodiments, include applying class-based weight factor using weight factor, so that including being used in conjunction with
The calling path of object class will be indicated as more likely.
In certain embodiments, search possible path includes searching for all possible paths.In certain embodiments, search can
Energy path includes the bidirectional research executed since both start node and endpoint node.
A kind of function call for indicating to be used for code library involved in some embodiments of solution discussed in this article
The data structure of chart, the chart include: multiple graph nodes, and each graph nodes indicate the callable function in code library,
The first graph nodes among the multiple graph nodes include the function of the callable function in unique identification code library
Signature；First graph nodes absolute path identifies the absolute position of the data file including callable function in file system；
The information for identifying the child node of the first graph nodes identifies that the information of child node includes identifying son associated with child node
The expression and child node type associated with child node of the subfunction signature of function, wherein associated with child node described
Subfunction signature indicates the graph edge of connection the first graph nodes and child node；And wherein, the child node type includes straight
It connects and type and example is called to call one in type, example calls type to indicate that the child node indicates in callable function
The realization of the overriding for the basic class method called.
In certain embodiments, identify child node information further include associated with the child node subfunction of instruction whether be
The mark of remote procedure call function.
In certain embodiments, function signature is included in the first graph nodes with hashed form, which is being situated between
Little data memory space is occupied in matter.
In certain embodiments, child node includes: subfunction signature, the subfunction in unique identification code library；Son section
Point absolute path, identifies the absolute position of the data file including subfunction in file system；Identify the company of graph nodes
The information for connecing node identifies that the information of connecting node includes calling the expression of source function signature, calling source function signature
Calling source function of the identifying call by the subfunction represented by child node, wherein calling source function associated with connecting node
Signature indicates the graph edge of connexon node and connecting node.
In certain embodiments, the first graph nodes are the connecting nodes of child node.
The embodiment of solution as described herein, technology and system may include a kind of system, which includes: processing
Device and the processor readable memory on it with the instruction realized, the instruction are configured to that the processor is promoted to execute
State some or all in step or operation, and/or the expression of one or more of above-mentioned data structure of creation.
The embodiment of solution as described herein, technology and system may include having the wink for the instruction realized on it
When or non-transitory computer-readable medium, the instruction promote computer execute above-mentioned steps in some or all, and/or creation
The expression of one or more of above-mentioned data structure.
According to detailed description given below, the further scope of application of the system and method discussed will become aobvious and easy
See.It is to be understood, however, that although this detailed description and specific examples indicates the embodiment of system and method, be only with
What the mode of illustration provided, because according to this detailed description, various in the spirit and scope of concept disclosed herein change
Become and modification will become obvious for a person skilled in the art.
Detailed description of the invention
It only provides according to the detailed description provided herein below and in the illustrated manner and therefore not limits
The attached drawing of property processed, will be more fully understood discussed system and method.
Fig. 1 a, which is shown, indicates that call graph as described herein generates the block diagram of the embodiment of operation；
Fig. 1 b shows the block diagram for indicating the embodiment of shared binary system identification operation as described herein；
Fig. 1 c shows the block diagram for indicating the embodiment of a part of call graph as described herein；
Fig. 2 shows the block diagrams of the embodiment of expression graph nodes as described herein；
Fig. 3 shows the block diagram for indicating diagrammatic search as described herein and the embodiment for calling coordinates measurement to operate；
Fig. 4 shows the block diagram for indicating to call the embodiment of route classification or sorting operation as described herein；And
Fig. 5 shows to indicate to be arranged to and executes chart generation as described herein and call certain in Path Recognition operation
Or the block diagram of the embodiment of whole calculating equipment.
It will be described in detail attached drawing during detailed description.
Specific implementation
It is described in detail below to refer to attached drawing.Same reference numerals in different figures identify same or like element.Also, with
Lower detailed description is not intended to limit discussed concept.Alternatively, it is defined by appended claims and its equivalent and is begged for herein
The range of the concept of opinion.
The programmer that complicated large scope software product or software development environment may require being developed and/or safeguard reads
Read unfamiliar code.In this case, the control flow between tracking function may be challenging and time-consuming.
The calling path finder that one or more possible paths between any two function in code library can be found can simplify
Understand the process of code, and allows faster and easier software development and maintenance.
Chart or tree form data structure can be inquired by creation and then to realize the calling path for particular code library
The embodiment of finder.In certain embodiments, this chart may include each function of the code library as graph nodes,
Middle connecting node indicate from or can be from all other possible function and/or function example of the function call.In addition, connection
Node can also indicate the function of the function represented by calling source function, calling source function to be calling or can call by specific node
And/or function example.
In monolithic code library, for example, this chart can be configured to the classification in one or more database tables
Key mapping table.Each graph nodes may include the signature unique of the specific function represented by identifying by node, such as function label
Name.In order to consider the update and change to code library, this figure can be reconstructed and/or updated at regular intervals (such as every night)
Table.
In the embodiment for being related to Object-oriented technology, the static analysis for outputting and inputting function call can not be captured
The subtlety as caused by the event of such as function overloading or overriding or variation.In certain embodiments, function can be carried out to base
The method of this class or the interface of function call.In some cases, this can be the calling to basic class of example.In other feelings
Under condition, this can be the calling of the heavily loaded example to basic class method.It, can in some embodiments for being intended to consider overload function
It will be extended to the number of the connection of given node including each load as child node or the basic class method of connecting node
It realizes.
The embodiment of the diagram construction process for monolithic code library is shown in fig 1 a.The present embodiment shown in
In, each function in code library can have function signature.This can be the number of the function in unique identification code library, character
String or other information piece.In certain embodiments, this function can be generated for the function of a part as diagram construction process
Signature.In certain embodiments, for code library or develop environment source control strategy or practice can require each function and/or
Each class is associated with can be used as some or all of unique identifier of function signature.
The example of function signature may include the class signature of the Object-Oriented Programming programming language of such as Java.Function label
Another example of name may include the function name institute in directory path, class name and class according to the source code file for certain kinds
The name of creation.Other embodiments can create the unique identifier that will act as function signature using other technologies.
It produces or function reading signature 1001, and the identified function of signature can be added to chart using as node
1070.In certain embodiments, function is added to chart may include parsing as node 1070 or in addition traverse function
With identifying call target or call source function 1200.
Invocation target function be from or can from addition function in call those of function.This invocation target function can
Its function signature is set to be included as indicating the child node or connecting node of the node of addition function.In certain embodiments, may be used also
Based on function signature come identifying call source function, calling source function is to call or can call those of addition function function.
In certain embodiments, all function signatures of code library can be stored in one or more database tables.
In certain embodiments, which can be stored in classification string table in order to data search.In certain embodiments, letter
Number signature can indicate or serve as to access invocation target function, call source function and for specific function it is any it is related after
Hold the key of information.In such an embodiment, scanning this database table can provide invocation target number for specific function
According to call source data.
In other embodiments, calling source information can be recursively generated during diagram construction.In such an embodiment, know
Calling source function in other specific node aloows the specific node to be identified as the node for indicating calling source function
Invocation target node.In certain this embodiments, dynamic creation homophony it can be used in one or more database tables
Target table or data structure or homophony source table or data structure, using a part as chart generating process.Certain
In embodiment, all graph nodes may include invocation target value to promote breadth-first search.In certain embodiments, Suo Youtu
Table node may include calling source value to promote breadth-first search.
In certain object-oriented embodiments, the function of addition may include calling 1010 to the interface of basic class method.It is right
This interface of basic class of method or function calling 1010 can be the calling to basic class of example in some cases.?
In other situations, this interface calling 1010 can be the calling of the heavily loaded example to basic class method.Due in static analysis
It not can readily determine that interface calls whether 1010 be for heavily loaded example, so certain implementations of diagram construction method under background
Each overriding of basic class method can be realized the invocation target child node or connecting node for being added to the node of representative function by example
1020。
In certain embodiments, this succession extension can promote the node in chart and the number of connection to become to manage
Ground is big.In certain embodiments, this succession extension, which can be added, means or otherwise be less likely (such as
False positive) graph edge child node or connecting node.
In certain embodiments, function can be added to together with any potential child node 1020 and calls chart 1090.
Chart 1050 can be constructed in this way to various calling paths, wherein each graph nodes and such as Bloom filter
Filter is associated.The binary file that function shares can be based upon to create and be used for given calling source function/invocation target
The Bloom filter 1040 of function pair.
In certain embodiments, the compiling in code library can be based upon and each binary file for compiling or indicating is created
Build Bloom filter.In certain embodiments, this Bloom can be created based on the utility of such as version control tool
Filter, which source code file which identifies and which source code file version will be compiled into application program or
The particular version of program.The length or data size of specific Bloom filter can be based on being included in expression in certain embodiments
The number of source code file and/or function in the specific binary file of the application program or program that are compiled and change.
In certain embodiments, each function in diagram construction process readable code library.In certain this embodiments
In, it has been read 1060 once diagram construction process indicates all functions and has been added to chart 1090, then it may proceed to
Reduce the memory usage 1080 of created chart.The embodiment that memory usage reduces may include using as discussed above
Hash function signature and variable-length Bloom filter.
In certain embodiments, the calling chart of construction can be stored in the volatile memory of such as flash memory or quickly deposited
In access to memory, to allow to the more rapidly access of chart and traversal.It, can be according to false positive knot in certain this embodiments
The expectation tolerance of fruit changes the length or data size of Bloom filter.In certain embodiments, change Bloom filtering
The size of device is to allow the false positive for having 0.01% as a result, allowing well balanced between the quality of data and data size.
Using the Bloom filter based on function embodiment in, file in a manner of more binary files existing for function can
Obtain the Bloom filter of larger size.
The example of the embodiment to find the common binary file identification process for calling path is depicted in Figure 1b.
From the start node 1170 and endpoint node 1180 in the binary file filter 1100 and chart of such as Bloom filter
Start, filter 1110 can be used to assess function signature associated with start node and endpoint node.If function signature
The function identified is not indicated as including then filtering for the Bloom 1130 in the binary file represented by filter
The filtering of device stops, and can initiate the filtering for subsequent group binary file.
If by function signature identify function be indicated as include in Bloom filter represented by binary file
In 1120, same filter may be used assess as child node or connecting node addition basic class method each overriding
Realize 1140.It is confirmed as being included in 1150 in binary file by each overriding realization of the basic class method of filter,
And still as the potential node in function call path.It is not realized by each overriding of the basic class method of filter true
It is set to the binary file 1160 for not having and sharing with calling (calling source) function 1160, and is not therefore function call road
Potential node in diameter.
In other embodiments, can consider having to inherit to extend and each of the son added or node connecting node
Graph nodes/function signature creates Bloom filter.It in such an embodiment, can be based on the practical of such as version control tool
Tool creates the Bloom filter, which source code file which identifies and which source code file version will
It is compiled into the particular version of application program or program.For the spy based on the function identified by the function signature of graph nodes
The Bloom filter of fixed one group of binary file may include the information about all functions in each binary file, every
There is the function of identification in a binary file.In such an embodiment, Bloom filter allows directly assessment as son section
Each overriding of point or the basic class method of connecting node addition realizes 1140, because Bloom filter will be for including rising
The binary file to begin with function represented in endpoint node, is specific.
The embodiment that exemplary functions call chart or diagram portion is depicted in figure 1 c.In an illustrated embodiment,
It depicts from the function call path for updating request function 1500.The update request function 1500 called in class Client is adjustable
With the update request processing function 1510 in class Server.Request confirmation function can be called by updating request handler function 1510
1520, request processing function 1530 and response setting function 1540.The request processing function 1530 of class Action is discriminably
It is override by the request processing function 1550,1560,1570 in class Action1, Action2 and Action3.Referred to dash line
Show these connections, because in certain embodiments, it is necessary to during analyzing between at runtime rather than by static analysis in chart
It is interior that it is differentiated.Action2 request processing function 1560 can call the recursive calculation function adjusted back to itself
1580.In an illustrated embodiment, each function representation graph nodes.
The embodiment of the data structure of the node of representative function calling chart as discussed herein is shown in FIG. 2.
In an illustrated embodiment, graph nodes 2010 may include the information of indicator function signature 20200, and function signature 20200 identifies
Specific function represented by node.Graph nodes 2010 may also include the information of the absolute path of instruction source file, the source file
The function identified including function signature 20190.This absolute path 20190 may include the information about specific file location,
The specific file location is the data in the particular memory location of the equipment of one or more specific storage equipment or assembly storage
Absolute physical position and virtual or logical file system in one or both of catalogue.
The embodiment of graph nodes 2010 may also include the information for indicating Bloom filter 20210, Bloom filter
The 20210 all binary files being compiled into based on the function that graph nodes are identified.As discussed above, this
Bloom filter expectation based on Fault Tolerance or can receive horizontal and change length.False positive (or failing to judge) wherein
As a result it is not tolerated or otherwise in unacceptable some embodiments, different types of filter can be used.
The embodiment of graph nodes 2010 may also include child node or connecting node list.Although being listed in child node,
This node illustrates the connection from graph nodes to other nodes, and does not in addition indicate father's graph nodes and sub-chart node
Between feature or data hierarchical structure or transmitting or versatility.Shown in example chart node 2010 include potential appoint
The child node 20100,20130,20160 for number of anticipating.It can schemed according to the function signature of each child node 20100,20130,20160
Each child node 20100,20130,20160 is identified in table node 2010.Wherein each function have unique function signature or
In the embodiment that person is identified by it, this function signature also allows to uniquely identify each graph nodes.
The each child node 20100,20130,20160 indicated in graph nodes 2010 may also include about node species
Information 20110,20140,20170.In certain embodiments, node species include calling directly type and example calling type
In one, example, which calls type to indicate child node, indicates that the overriding of basic class method called in callable function is real
It is existing.Direct function calling may be visible static analysis or otherwise can be used for static analysis, without logical
Cross bloom filter traversal chart.Example calling can require runing time to analyze.
In certain embodiments, each child node 20100,20130,20160 indicated in graph nodes 2010 may be used also
The mark 20120 of remote procedure call, 20150,20180 are indicated whether including specified child node.This mark may make can
Identification is related to call or triggering the process of the function outside code library or the function of subprogram.In addition, being flagged as remote process
The function of calling can not have the invocation target function in code library in some embodiments.
Once generating the embodiment of call graph, then the chart can be searched for find starting function and end letter
One or more between number may function call path.The embodiment for calling path search pass is depicted in Fig. 3.
In an illustrated embodiment, diagrammatic search tools is called to can receive identification starting graph nodes 3001 as input
Function signature and identification end graph nodes 3010 function signature.In certain embodiments, function call research tool is also
It can construct or access list or the database of the public dependence for showing starting and endpoint node.This dependence may include for example
All binary systems comprising certain kinds, function or source file as dependence.In certain this embodiments, determining from first
When function is to the calling chart path of second function, wherein the two functions only exist in specific executable file, Suo Youzhong
Between graph nodes also should only exist in the specific executable file.This can by by from the function from different executable files
Related graph nodes exclusion accelerates chart to search element except consideration.
Start at start node 3001 or endpoint node 3010, or in certain embodiments from 3001 He of start node
Both endpoint nodes 3010 bidirectionally advance, and breadth-first route searching can be initiated among all child nodes or connecting node.
In certain embodiments, whether this can include remote procedure call (RPC) by first checking for start node or endpoint node
3020 realize.This inspection can be performed in certain embodiments, because even remote procedure call can also in monolithic data library
It is related in one group of binary file in addition to including those of function represented by starting or endpoint node binary file
Function.
One in wherein start node and endpoint node is used binary system text in the embodiment of RPC 3020
Part group may include being related to all binary files 3040 of any of start node or endpoint node 3.Starting section wherein
Point and endpoint node are not in the embodiment of RPC, and used binary file group can only include being related to start node and end
The binary file 3030 of both end nodes.
For each node, its Bloom filter can extract, and binary file can be tested for Bloom filter
3080, whether the Bloom filter 3080 for the node is passed through at least one of public dependence of determination.
If indicating that the binary file of public dependence is not through the Bloom filter for the node, the section
Point is dropped 3070 as a part for not being possible or potential function call path.If the public dependence is by being used for
The Bloom filter of the node, then the node, which is then added to, can be capable of calling 3090 in the list or track in path.It is using
In the embodiment of breadth-first search, this assessment can carry out all nodes in the given level of chart 3110, or
Person is for all sections in the given level for the chart that can be analyzed in given time period or with the specific distribution of computing resource
It puts to carry out.In such an embodiment, using its be associated with Bloom filter come assess the given node in diagram level it
Afterwards, next node in level 3100 then can similarly be assessed until all nodes in the level have all been evaluated 3110 is
Only, either in some cases until it experienced scheduled time quantum or consume scheduled amount of computational resources.
It then can be most probable next with determination according to ranking scheme to including the node ranking 3130 in path list
Node and next node most unlikely.In certain embodiments, can based on such as node be direct function call or heavy duty/
Inherit the cause of function call usually determining ranking.In certain this embodiments, it is higher than weight that direct function can be called to ranking
Carry or inherit function call.In some embodiments it is possible to only be concerned about certain number of ranking node.In certain this embodiments
In, five top ranked nodes only can be remained into ranking node, and remaining node is dropped or otherwise further
Assessment.In certain embodiments, it can be top ranked node with the matched node of endpoint node 3010.
After node ranked 3130,3120 can be extended to each ranking node since top ranked node,
To determine if with the child node 3060 being included in subsequent width preferred path search 3050.This extension can be for
All ranking nodes 3050 carry out, either for can be in given time period or with the analysis of specific computational resource allocation
All ranking nodes carry out.
In certain embodiments, this search and evaluation operation continue to searching route in start node 3001 or endpoint node
Until terminating at 3010, or until searching route is met and there is no the son sections for being still to extend and search in two-way embodiment
Until point or connecting node 3140.Once create may function call path list, then can the list 3150 to path divide
Class or ranking, to identify the one or more function call paths for being considered as most probable or maximum probability.The diagrammatic search tools
Then certain or all calling paths 3160 including most probable path be can return to.
In certain embodiments, diagrammatic search tools may include graphical interfaces either part of it, which can
Function call path is portrayed as to the expression of the node along the connection of single or diverging paths.In certain embodiments, it can recognize
Or it is otherwise displayed differently from based on succession extension come the graph edge of connecting node, to be carried out by the same manner to it
Identification.
In certain embodiments, can classify path list according to various criterion, including following factor: such as total path length
(such as the node in path number or graph edge number), path whether application program or product code library span
More, when whether path calls function and shows the previous operation of frequent function call behavior from special object or object class
Between track.The embodiment of path list classification and determine the probability operation is depicted in Fig. 4.
Since the path list 4001 compiled based on all diagrammatic search operations as shown in Figure 3, classification and path
Probabilistic process can recognize the shortest path 4010 in the list.It in certain embodiments, can be by controlling the number of path of return
The number to determine shortest path is arranged in the external definition or external control of mesh and/or maximum allowable path length.It can be by path
In node number, determine path length including number of graph edge in the paths or combinations thereof.In certain paths,
For example, node can be passed through repeatedly, so that the number of the graph edge in path being larger in number than the node in path.
In certain embodiments, can based on path whether completely in the code library for specific products or application program come
Identify path 4020.In certain embodiments, based on path length and whether single product code can be maintained at based on path
Priority 4020 is given to path in library.It, can will be completely in product or application code library in certain this embodiments
Interior route classification is more than the equal or path similar to length not completely in single product or application code library
It is possible that or probability it is higher.
In certain embodiments, also object class weighting factor can be applied to path.Can in certain embodiments based on
Special object or the associated frequency of use of object class determine this object class weight factor.It in such an embodiment, can be right
Including indicating that the function call path of the node of the function of special object associated with weight factor or object class is provided than simultaneously
The higher possibility in function call path or probability for the equal or similar length being far from it.
In certain embodiments, specific function call path a possibility that or probability can be based on path length, code library
And class weight factor and the specific probability in percent that calculates is associated.In other embodiments, specific percentage is provided with no
Other calling paths of ratio are compared, and a possibility that specific function calls path or probability can be indicated with relative term.In certain realities
Apply in example, can by call path list in specific call path rank order come indicate specific function call path can
It can property or probability.In certain embodiments, determine that calling path probability 4040 may include based in path length 4010, code library
Path length 4020 and/or class weight factor 4030 come resequence or again ranking function call path
In certain embodiments, the function call path in the path list for determining path probability 4040 is this heavy
New sort or again ranking, which may also include, calls path for runing time track 4050 in the past come valuation functions.When this operation
Between track may include based on history application behavior and show it is frequent and/or it is possible call path history function tune
Use data.Once such as determining absolute or opposite calling by the way that path will be called from most probable to most unlikely sequence or ranking
Path probability 4040 then can return to or a certain amount of most probable otherwise selected to call path (for example, top ranked
Path) to be presented to user or other information request entity (such as application development or prototype of route searching tool
Program or suite of programs).
Although being functionally discussed above, can by using one or more specialized, programmable and/or
Calculating equipment especially programmed or part thereof generates and calls the feature and property of route searching to realize function chart.
Fig. 5 is to illustrate to be arranged to execute that chart is called to generate and call showing for path search techniques as described herein
Example property calculates the block diagram of equipment 500.In very basic configuration 501, calculates equipment 500 and generally include one or more processing
Device 510 and system storage 520.Memory bus 530 can be used between processor 510 and system storage 520 into
Row communication.
According to desired configuration, processor 510 can be any kind of, including but not limited to microprocessor (μ P), micro-
Controller (μ C), digital signal processor (DSP) or any combination thereof.Processor 510 can include one or more levels
Cache, such as 2 Cache 512 of 1 Cache 511 of level and level, processor core 513 and register 514.
Processor core 513 can include arithmetic logic unit (ALU), floating point unit (FPU), Digital Signal Processing core (DSP core) or its
Any combination.Memory Controller 515 can also be used together with processor 510, or memory control in some implementations
Device 515 processed can be the interior section of processor 510.
According to desired configuration, system storage 520 can be any kind of, including but not limited to volatile memory
(RAM), nonvolatile memory (ROM, flash memory etc.) or any combination thereof.System storage 520 generally includes to grasp
Make system 521, one or more application program 522 and program data 524.Application program 522 may include as discussed herein
Calling chart generate and/or call route searching feature.Program data 524 includes position data, such as to execution institute as above
The desired operation stated useful one or more dependence lists or object list of file names 525.In certain embodiments, it can will answer
It is arranged to be operated in operating system 521 with program data 524 with program 522, so that whole system is executed such as this paper institute
The specific variation of the one or more of the technology of discussion.This base is had been illustrated by component those of in line 501 in Fig. 5
This configuration.
Calculate equipment 500 can have the function of supplementary features or and additional interface, with promote basic configuration 501 with it is any
Communication between required equipment and interface.For example, it is total via memory interface to promote to be able to use bus/interface controller 540
Communication between the basic configuration 501 that line 541 carries out and one or more data storage devices 550.550 energy of data storage device
It is enough movable memory equipment 551, non-removable storage device 552 or combinations thereof.Removable Storage and irremovable storage are set
Standby example includes naming a few, such as the disk unit of disk drive and hard drive (HDD), such as compression magnetic
The disc drives of disk (CD) driving or digital versatile disc (DVD) driving, solid-state driving (SSD) and magnetic tape drive.It is exemplary
Computer storage medium can be including such as computer readable instructions, data structure, program module or other numbers for storage
According to information any method or technique realize volatile and non-volatile, can move and cannot move media.
System storage 520, movable memory equipment 551 and non-removable storage device 552 are entirely computer storage
The example of medium.Computer storage medium includes but is not limited to RAM, ROM, EEPROM, flash memory or other memory technologies, CD-
ROM, digital versatile disc (DVD) or other optical storages, cassette, tape, disk storage or other magnetic storage devices, or
Any other medium that person can be used to store desired information and can be accessed by calculating equipment 500.Any this computer is deposited
Storage media can be a part for calculating equipment 500.
Calculating equipment 500 can also include for promoting via bus/interface controller 540 from various interface equipment (examples
Such as, output interface, peripheral interface and communication interface) to basic configuration 501 communication interface bus 542.Exemplary output
Equipment 560 includes graphics processing unit 561 and audio treatment unit 562, can be configured to via one or more ends A/V
Mouth 563 is communicated to the various external equipments of such as display or loudspeaker.Exemplary peripheral interface 570 includes serial line interface
Controller 571 or parallel interface controller 572, can be configured to via one or more ports I/O 573 with such as input
Equipment (for example, keyboard, mouse, pen, voice-input device, camera, touch input device etc.) or other peripheral equipment (examples
Such as, printer, scanner etc.) external equipment communicated.Exemplary communication device 580 includes network controller 581, energy
Enough it is arranged to promotion and passes through network communication and one or more of the other calculating equipment via one or more communication port 582
590 communication.
Network communication connection is an example of communication media.It usually can be by computer readable instructions, data structure, program
Other data in the modulated message signal of module or such as carrier wave or other transmission mechanisms embody communication media, and its
Including any information-delivery media." modulated message signal " can make it in a manner of encoding to the information in signal
The signal that one or more of characteristic is set or changes.By way of example, and not limitation, communication media can include
The wired medium of such as cable network or direct wired connection, and it is such as acoustics, radio frequency (RF), infrared (IR) and other wireless
The wireless medium of medium.As used herein term computer-readable medium can include storage medium and communication media.
Calculating equipment 500 can be embodied as to one using small shape as portable (or mobile) electronic equipment of factor
Point, the electronic equipment is such as cellular phone, personal digital assistant (PDA), personal media player device, wireless network hand
Table equipment, personal ear speaker device, special equipment or the hybrid apparatus including above-mentioned any function.It can also will calculate equipment
500 be embodied as include both laptop computer and non-laptop computer configuration personal computer.
In some cases, there are still small differences between the hardware and software of the various aspects of system is realized: using
Hardware or software general (but being not always, because the selection between hardware and software may become important in some contexts) are
Indicate the design alternative of Cost comparisons' efficiency tradeoff.In the presence of by its can be realized process and/or system as described herein and/or
The various media (such as hardware, software and/or firmware) of other technologies, and preferred media will be with wherein disposing the process
And/or system and/or other technologies background and change.For example, if implementor determine speed and accuracy be it is most important,
Then main hardware and/or firmware vehicle may be selected in implementor；If flexibility be it is most important, implementor may be selected main soft
Part is realized；Or again alternatively, certain combination of hardware, software and/or firmware may be selected in implementor.
Via using block diagram, flow chart and/or example foregoing detailed description to elaborate the various of equipment and/or process
Embodiment.In the range of this block diagram, flow chart and/or example include one or more functions and/or operation, this field
The skilled person will understand that be that each function in this block diagram, flow chart or example and/or operation can individually and/or altogether
What realized with ground with large-scale hardware, software, firmware or its practical combination of taking up an official post.It in one embodiment can be via dedicated
Integrated circuit (ASIC), field programmable gate array (FPGA), digital signal processor (DSP) or other integrated formats are realized
The multiple portions of theme as described herein.However, those skilled in the art will recognize that embodiment disclosed herein it is certain
Aspect completely or partially can equivalently be realized in following form: integrated circuit, as operate in it is one or more in terms of
One or more computer programs on calculation machine are (for example, as one or more operated in one or more computer systems
A program), as operation one or more programs on the one or more processors (for example, as operating in one or more
One or more programs on a microprocessor), as firmware or as its it is practical take up an official post what combine, and with regard to the disclosure and
Saying the design circuit carried out to software and/or firmware and/or writing code will be in well those skilled in the art's
In technical ability.In addition those skilled in the art will recognize that the mechanism of theme as described herein can be as the program of diversified forms
Product and distribute, and regardless of be used to actually execute the distribution signal bearing medium specific type, it is described herein
The illustrative embodiments of theme be all suitable for.The example of signal bearing medium includes but is not limited to the following terms: recordable type is situated between
Matter, such as floppy disk, hard drive, compression disk (CD), digital video disks (DVD), digital magnetic tape, computer storage
Deng；And transmission type media, such as number and/or analogue communication medium (for example, fiber optic cables, waveguide, wired communications links,
Wireless communication link etc.).
Those skilled in the art will recognize that describing equipment and/or process in a manner of set forth herein and then making
With engineering practice by this equipment and/or process integration into data processing system, be common in the art.?
That is at least part of equipment as described herein and/or process can be integrated at data via reasonable experimental amount
In reason system.Those skilled in the art will recognize that typical data processing system generally comprises one of the following or more
It is a: system unit shell, video display apparatus, the memory of such as volatile and non-volatile memory, such as microprocessor
With the processor of digital signal processor, the computational entity of such as operating system, driver, graphic user interface and application
One or more interactive devices of program, such as Trackpad or touch screen and/or including feedback control loop and control motor (for example,
For sensing the feedback of position and/or the feedback of speed；For moving and/or adjusting the control motor of component and/or quantity) control system
System.Typical data processing system can be realized using any commercially available component appropriate, such as usually in data calculating communication
And/or used in network calculations communication system those.
About the use of relatively more any plural number and/or singular references herein, those skilled in the art can
It pluralizes when being suitable for context and/or application from complex conversion singularization and/or from odd number conversion.Herein in order to bright
For the sake of and various singular/plurals displacements are expressly set forth.
The exemplary embodiment of system as described herein and solution only has shown and described in the disclosure.Ying Li
Solution is that system as described herein and solution can use in various other combinations and environment, and can be such as
It is changed and modified in the range of expressed concept in text.It can be certain to embody with the combination of hardware, firmware and/or software
Variation.It can be at least partly in such as memory chip, the computer-readable storage of hard drive, flash memory, optical storage medium
On medium, or as being suitable for transmitting by the combination of various hardware devices and/or hardware device/set downloading or on it
The complete or partial compiler of installation embodies certain variations.It is not considered that this variation be detached from system as described herein and
The spirit and scope of solution, and will become apparent to all this modifications for a person skilled in the art and be intended to
It is included in the scope of the following claims.
Claims (19)
1. a kind of computer based method for generating the call graph for code library, which comprises
The function in (1001) described code library is identified using function signature by processor；
The first node (1070) specific function identified being expressed as in the call graph；
(1200) invocation target letter is identified based on the function signature of the specific function identified for the specific function identified
Number calls source function, inherits father's function and inherits subfunction and basic class associated with the specific function identified；
Based on the invocation target function identified and source function is called to add (1090) first child nodes to the first node
(1020)；
(1010) are called for the interface of the basic class method in the specific function that is identified, based on covering for the basic class method
The realization write adds the second child node to the first node；
For each child node (1020) of the first node, the binary file for generating (1040) for set membership is filtered
Device, the binary file filter is based on including identified specific function and by the binary system of the function represented by child node
File, the binary file filter is Bloom filter, and the Bloom filter is configured to include being identified
Specific function and by the child node represented by the binary file of the function be designated as through the Bloom filter
File.
2. the method as described in claim 1, the method further includes depositing for reduction (1080) call graph
Reservoir occupies.
3. method according to claim 2, the reduction memory usage includes that hash function is applied to function signature simultaneously
The result of the hash function is stored as to the expression of the function signature.
4. the method as described in claim 1, the method further includes based on including identified specific function and by institute
The number of the binary file of the function represented by child node is stated to change the size of the Bloom filter.
5. the method as described in claim 1, generating binary file filter includes the binary system text based on the code library
Part generates Bloom filter；And
The method further includes Bloom filter generated is added to the first node.
6. method as claimed in claim 5, further comprises:
For the second child node added by least one, by the way that the Bloom filter of the first node is applied to use
The binary file of first source code file compiling, determines first source code of the specific implementation including added overriding
Whether file and the second source code file including the specific function share at least one common binary file；And
Common binary file is not shared in response to determination first source code file and second source code file, from institute
It states first node and removes added second child node.
7. method as claimed in claim 6, wherein compile or generate the generation by using second source code file
The quantity of the binary file in code library determines the size of the Bloom filter so that the source code file that frequently uses with
The bloom filter of larger size is associated.
8. a kind of determining binary file whether include two functions method:
The information for the start node (1170) that representative function calls in chart is received, the start node is related to starting function
Connection；
Receive the information for the endpoint node (1180) that representative function calls in chart, the endpoint node and end functional dependence
Connection；
Tested using the first Bloom filter (1110,1140) in the start node and the endpoint node at least
One associated binary file, the test include that first Bloom filter is applied to the binary file,
To determine whether the binary file includes the starting function and the end function (1130,1120).
9. a kind of method for being capable of calling path between two functions in determining code library, which comprises
Source function and objective function are received as input；
Identified in call graph associated with source function start node (3001) and with the objective function phase
Associated endpoint node (3010)；
Search for the possible path (3050) in the call graph between the start node and the endpoint node, institute
Each node at the level searched for include for the call graph is stated,
The node (3080) are assessed for by the shared public dependence list of the start node and the endpoint node；
To have include dependence in the public dependence list the node assessed, include by the node assessed
In possible path list (3080,3090)；
To do not have include dependence in the public dependence list the node assessed, by the node assessed from
(3080,3070) are excluded in any possible path list；
The node ranking (3130) being included in the possible path list；
For the node of each institute's ranking, whether the node for extending node ranking to determine of institute's ranking includes child node；
In response to determining that the node of institute's ranking has child node, the node of institute's ranking is considered as start node and to the section of institute's ranking
Each child node of point executes described search possible path (3060)；
In response to determining that the node of institute's ranking does not have child node, the function call Path Recognition by the node including institute's ranking is
Possible function call path (3060,3140)；
By the possible function call route classification (3150) between the start node and the endpoint node；And
Path (3160) can be capable of calling by returning to the conduct of at least one of classified possibility function call path.
10. method as claimed in claim 9, described to include: by all possible function call route classifications
All possible function call paths are sorted from longest is most short to；
Identifying among the possibility function call path sorted completely may function call road those of in single code library
Diameter；
To the possibility function call path application weight factor to be sorted, so that all possible function call paths are based on letter
Number calls path length and weight factor from most probable to most unlikely sorting, and the weight factor includes will be completely single
Function call path is designated as more likely those of in code library；And
At least most possible function call path is returned to after the factor using weight as possible calling path.
11. method as claimed in claim 10, described using weight factor includes being generated based on executing from previous function
Historical tracking data generate weight factor so that as indicated by historical tracking data function call path with by that
It is associated that a little function call paths are designated as weight factor more likely.
12. method as claimed in claim 10, the application weight factor includes applying class-based weight factor, so that packet
The calling path for including the object class being used in conjunction with will be indicated as more likely.
13. method as claimed in claim 9, described search possible path includes searching for all possible roads in the chart
Diameter.
14. method as claimed in claim 9, described search possible path includes executing from the start node and the end
The bidirectional research that both nodes start.
15. method as claimed in claim 9, it is described include for public dependence list assessment node will be with the node phase
Associated Bloom filter is applied to from the source code file for including at least one of the source function and described objective function
At least one binary file of compiling；
In response at least one described binary file by applied Bloom filter by the node evaluation be with
Including the dependence in the public dependence list.
16. method as claimed in claim 15, the method further includes:
It is remote procedure call in response at least one of the determination source function and described objective function, the Bloom filter
Wave device is configured to make to include that those of at least one of the source function and objective function binary file passes through；
It is not remote procedure call in response at least one of the determination source function and described objective function, the Bloom
Filter is configured to make to include that those of both the source function and objective function binary file passes through.
17. method as claimed in claim 15, wherein the size of the Bloom filter is based on the Bloom filter quilt
Be configured to by binary file number.
18. a kind of system for generating the call graph for code library, the system comprises:
For the device of the function in (1001) described code library to be identified using function signature by processor；
The device of first node (1070) for being expressed as the specific function identified in the call graph；
For the specific function for being identified, based on the function signature of the specific function identified, identify that (1200) call mesh
Scalar functions call source function, inherit father's function and inherit subfunction and associated with the specific function identified basic
The device of class；
For adding (1090) first son sections to the first node based on the invocation target function and calling source function identified
The device of point (1020)；
Interface for the basic class method in the specific function for being identified calls (1010), is based on the basic class method
Overriding realization to the first node add the second child node device；
For each child node (1020) for the first node, the binary file that (1040) are used for set membership is generated
The device of filter, the binary file filter is based on including identified specific function and by the letter represented by child node
Several binary files, the binary file filter is Bloom filter, and the Bloom filter is configured to wrap
Include identified specific function and by the child node represented by the binary file of the function be designated as by described
The file of Bloom filter.
19. the system for being capable of calling path between two functions in a kind of determining code library, the system comprises:
For receiving source function and objective function device as input；
For identified in call graph associated with source function start node (3001) and with the target letter
The device of the associated endpoint node (3010) of number；
Possible path for searching in the call graph between the start node and the endpoint node
(3050) device, the device for search include for device below: for one layer of the call graph
Each node at grade,
The node (3080) are assessed for by the shared public dependence list of the start node and the endpoint node；
To have include dependence in the public dependence list the node assessed, include by the node assessed
In possible path list (3080,3090)；
To do not have include dependence in the public dependence list the node assessed, by the node assessed from
(3080,3070) are excluded in any possible path list；
The device of the node ranking (3130) for being included in the possible path list；
For the node for each institute's ranking, whether the node for extending node ranking to determine of institute's ranking includes child node
Device；
For the node of institute's ranking being considered as start node and to institute's ranking in response to determining that the node of institute's ranking has child node
Node each child node execute described search possible path (3060) device；
For in response to determining that the node of institute's ranking does not have child node, the function call path of the node including institute's ranking to be known
Not Wei may function call path (3060,3140) device；
For by the dress of the possible function call route classification (3150) between the start node and the endpoint node
It sets；And
For returning at least one of classified possibility function call path as the device that can be capable of calling path (3160).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/084,399 | 2013-11-19 | ||
US14/084,399 US9218169B2 (en) | 2013-11-19 | 2013-11-19 | Callpath finder |
PCT/US2014/065906 WO2015077175A1 (en) | 2013-11-19 | 2014-11-17 | Callpath finder |
Publications (2)
Publication Number | Publication Date |
---|---|
CN105745647A CN105745647A (en) | 2016-07-06 |
CN105745647B true CN105745647B (en) | 2019-06-04 |
Family
ID=53174616
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201480062873.3A Active CN105745647B (en) | 2013-11-19 | 2014-11-17 | Call path finder |
Country Status (8)
Country | Link |
---|---|
US (2) | US9218169B2 (en) |
EP (2) | EP4369180A2 (en) |
JP (1) | JP6349395B2 (en) |
KR (2) | KR101841751B1 (en) |
CN (1) | CN105745647B (en) |
BR (1) | BR112016009391B1 (en) |
DE (1) | DE202014010893U1 (en) |
WO (1) | WO2015077175A1 (en) |
Families Citing this family (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CA2956078C (en) | 2014-07-24 | 2021-12-07 | Ab Initio Technology Llc | Data lineage summarization |
US9250891B1 (en) * | 2014-10-28 | 2016-02-02 | Amazon Technologies, Inc. | Optimized class loading |
US9483241B2 (en) * | 2014-12-19 | 2016-11-01 | Successfactors, Inc. | Method ranking based on code invocation |
US9405906B1 (en) * | 2015-02-25 | 2016-08-02 | Veracode, Inc. | System and method for enhancing static analysis of software applications |
US9569183B2 (en) * | 2015-02-25 | 2017-02-14 | Red Hat, Inc. | Contract based builder |
US10229273B2 (en) * | 2015-02-25 | 2019-03-12 | Veracode, Inc. | Identifying components for static analysis of software applications |
US9367425B1 (en) | 2015-09-30 | 2016-06-14 | Semmle Limited | Disjoint-or trees for caching aggregated dependencies |
US11650903B2 (en) | 2016-01-28 | 2023-05-16 | Codesignal, Inc. | Computer programming assessment |
US10303517B1 (en) | 2016-01-28 | 2019-05-28 | BrainFights, Inc. | Automated evaluation of computer programming |
US11593342B2 (en) | 2016-02-01 | 2023-02-28 | Smartshift Technologies, Inc. | Systems and methods for database orientation transformation |
US10585655B2 (en) | 2016-05-25 | 2020-03-10 | Smartshift Technologies, Inc. | Systems and methods for automated retrofitting of customized code objects |
CN106020848A (en) * | 2016-06-07 | 2016-10-12 | 北京信息科技大学 | Function calling route generating method oriented to C# |
US10089103B2 (en) | 2016-08-03 | 2018-10-02 | Smartshift Technologies, Inc. | Systems and methods for transformation of reporting schema |
US10467229B2 (en) | 2016-09-30 | 2019-11-05 | Microsoft Technology Licensing, Llc. | Query-time analytics on graph queries spanning subgraphs |
US9792114B1 (en) * | 2016-10-10 | 2017-10-17 | Semmle Limited | Source code element signatures |
US10545945B2 (en) | 2016-10-28 | 2020-01-28 | Microsoft Technology Licensing, Llc | Change monitoring spanning graph queries |
US10445361B2 (en) | 2016-12-15 | 2019-10-15 | Microsoft Technology Licensing, Llc | Caching of subgraphs and integration of cached subgraphs into graph query results |
US10402403B2 (en) | 2016-12-15 | 2019-09-03 | Microsoft Technology Licensing, Llc | Utilization of probabilistic characteristics for reduction of graph database traversals |
US10891326B2 (en) * | 2017-01-05 | 2021-01-12 | International Business Machines Corporation | Representation of a data analysis using a flow graph |
US10242223B2 (en) | 2017-02-27 | 2019-03-26 | Microsoft Technology Licensing, Llc | Access controlled graph query spanning |
US10992729B2 (en) | 2017-04-18 | 2021-04-27 | Microsoft Technology Licensing, Llc | Endpoint configuration for a communication session |
US10388039B2 (en) | 2017-05-31 | 2019-08-20 | International Business Machines Corporation | Accelerating data-driven scientific discovery |
CN107479985B (en) * | 2017-06-30 | 2020-01-03 | 武汉斗鱼网络科技有限公司 | Remote procedure call method and device and computer equipment |
US11132180B2 (en) * | 2018-01-05 | 2021-09-28 | Microsoft Technology Licensing, Llc | Neural-guided deductive search for program synthesis |
US10528343B2 (en) | 2018-02-06 | 2020-01-07 | Smartshift Technologies, Inc. | Systems and methods for code analysis heat map interfaces |
US10740075B2 (en) * | 2018-02-06 | 2020-08-11 | Smartshift Technologies, Inc. | Systems and methods for code clustering analysis and transformation |
US10698674B2 (en) | 2018-02-06 | 2020-06-30 | Smartshift Technologies, Inc. | Systems and methods for entry point-based code analysis and transformation |
FR3078182B1 (en) * | 2018-02-19 | 2021-12-24 | Bull Sas | COMPUTER SYSTEM AND METHOD FOR PERFORMANCE ANALYSIS OF AN APPLICATION MAKING COMMUNICATION FUNCTION CALLS BETWEEN SEVERAL PROCESSES. |
WO2019182191A1 (en) | 2018-03-21 | 2019-09-26 | 경북대학교 산학협력단 | Pharmaceutical composition for prevention or treatment of neurodegenerative disease and comprising cox2-acetylating agent as active ingredient |
US20200134482A1 (en) * | 2018-10-29 | 2020-04-30 | Walmart Apollo, Llc | Scaling overrides in a rules engine using a streaming probabilistic data structure |
US20220147347A1 (en) * | 2019-02-26 | 2022-05-12 | Mitsubishi Electric Corporation | Sequence diagram generation apparatus |
CN110032394B (en) * | 2019-04-12 | 2022-05-31 | 深圳市腾讯信息技术有限公司 | Analysis method and device for passive code file and storage medium |
US11782971B2 (en) * | 2019-06-27 | 2023-10-10 | Tencent America LLC | Static and dynamic NBMP function image retrieval and scale ranking |
KR20210012123A (en) * | 2019-07-24 | 2021-02-03 | 에스케이하이닉스 주식회사 | Memory system, memory controller, and operating method |
CN111026467B (en) * | 2019-12-06 | 2022-12-20 | 合肥科大智能机器人技术有限公司 | Control method of finite-state machine and finite-state machine |
US11360751B2 (en) | 2020-03-19 | 2022-06-14 | Codelogic, Inc. | Systems and methods for dependency analysis |
US11593255B2 (en) * | 2020-07-31 | 2023-02-28 | Bank Of America Corporation | Mobile log heatmap-based auto testcase generation |
CN116028375B (en) * | 2023-02-21 | 2023-06-16 | 深圳大数信科技术有限公司 | Code testing method based on graph theory |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN102567200A (en) * | 2011-12-14 | 2012-07-11 | 北京航空航天大学 | Parallelization security hole detecting method based on function call graph |
CN103336760A (en) * | 2013-07-11 | 2013-10-02 | 北京信息科技大学 | Method and device based on reverse engineering for automatically generating software documents |
CN103345472A (en) * | 2013-06-04 | 2013-10-09 | 北京航空航天大学 | Redundancy removal file system based on limited binary tree bloom filter and construction method of redundancy removal file system |
Family Cites Families (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH1195990A (en) * | 1997-09-22 | 1999-04-09 | Nippon Telegr & Teleph Corp <Ntt> | Method and device for displaying program structure |
JP3694872B2 (en) * | 1999-09-22 | 2005-09-14 | 日立ソフトウエアエンジニアリング株式会社 | Dependent subroutine search support device |
US7120904B1 (en) * | 2000-04-19 | 2006-10-10 | Intel Corporation | Data-flow method for optimizing exception-handling instructions in programs |
US7003507B2 (en) * | 2000-09-18 | 2006-02-21 | International Business Machines Corporation | Scalable propagation-based methods for call graph construction |
US7174536B1 (en) * | 2001-02-12 | 2007-02-06 | Iowa State University Research Foundation, Inc. | Integrated interactive software visualization environment |
US6904590B2 (en) * | 2001-05-25 | 2005-06-07 | Microsoft Corporation | Methods for enhancing program analysis |
US7661095B2 (en) * | 2005-04-14 | 2010-02-09 | Hewlett-Packard Development Company, L.P. | System and method to build a callgraph for functions with multiple entry points |
US7721269B2 (en) * | 2005-12-23 | 2010-05-18 | Sas Institute Inc. | System and method for detecting redundant subroutine calls |
US7774760B2 (en) * | 2005-12-23 | 2010-08-10 | Microsoft Corporation | Tracing errors in software |
US7739553B2 (en) * | 2007-05-31 | 2010-06-15 | Microsoft Corporation | System crash analysis using path tracing technologies |
CN101436192B (en) * | 2007-11-16 | 2011-03-16 | 国际商业机器公司 | Method and apparatus for optimizing inquiry aiming at vertical storage type database |
US8990792B2 (en) * | 2008-05-26 | 2015-03-24 | Samsung Electronics Co., Ltd. | Method for constructing dynamic call graph of application |
US8347272B2 (en) * | 2008-07-23 | 2013-01-01 | International Business Machines Corporation | Call graph dependency extraction by static source code analysis |
US8332558B2 (en) * | 2008-09-30 | 2012-12-11 | Intel Corporation | Compact trace trees for dynamic binary parallelization |
US8996568B2 (en) * | 2009-07-14 | 2015-03-31 | Qualcomm Incorporated | Methods and apparatus for efficiently processing multiple keyword queries on a distributed network |
CN101876939B (en) | 2009-11-20 | 2011-12-21 | 北京信息科技大学 | System test method and device |
US8595709B2 (en) * | 2009-12-10 | 2013-11-26 | Microsoft Corporation | Building an application call graph from multiple sources |
WO2011081588A1 (en) * | 2010-01-04 | 2011-07-07 | Telefonaktiebolaget L M Ericsson (Publ) | Method and apparatus for secure routing of data packets |
WO2011091897A1 (en) * | 2010-01-29 | 2011-08-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Packet routing in a network |
CN102714625A (en) * | 2010-01-29 | 2012-10-03 | 瑞典爱立信有限公司 | Packet routing in a network by modifying in-packet bloom filter |
US8997058B2 (en) * | 2010-03-26 | 2015-03-31 | Software Diagnostics Technology Gmbh | Method for automatically generating a trace data set for a software system, a computer system, and a computer program product |
EP2390790A1 (en) * | 2010-05-27 | 2011-11-30 | Fujitsu Limited | Profiling of software applications |
US9300471B2 (en) * | 2011-07-07 | 2016-03-29 | Nec Corporation | Information processing apparatus, information processing method, and program |
US8990243B2 (en) * | 2011-11-23 | 2015-03-24 | Red Hat, Inc. | Determining data location in a distributed data store |
US8762396B2 (en) * | 2011-12-22 | 2014-06-24 | Sap Ag | Dynamic, hierarchical bloom filters for network data routing |
CN103186406B (en) * | 2011-12-30 | 2016-08-17 | 国际商业机器公司 | Method and apparatus for control flow analysis |
US8527532B2 (en) * | 2012-01-31 | 2013-09-03 | Adobe Systems Incorporated | Transforming function calls for interaction with hierarchical data structures |
US9092568B2 (en) * | 2012-04-30 | 2015-07-28 | Nec Laboratories America, Inc. | Method and system for correlated tracing with automated multi-layer function instrumentation localization |
US8918766B2 (en) * | 2012-12-12 | 2014-12-23 | Microsoft Corporation | Analysis of propagated information using annotated forests |
US10685313B2 (en) * | 2012-12-14 | 2020-06-16 | Software Ag | Systems and/or methods for path finding on model structures |
-
2013
- 2013-11-19 US US14/084,399 patent/US9218169B2/en active Active
-
2014
- 2014-11-17 CN CN201480062873.3A patent/CN105745647B/en active Active
- 2014-11-17 JP JP2016532101A patent/JP6349395B2/en active Active
- 2014-11-17 DE DE202014010893.5U patent/DE202014010893U1/en active Active
- 2014-11-17 KR KR1020167012999A patent/KR101841751B1/en active IP Right Grant
- 2014-11-17 BR BR112016009391-7A patent/BR112016009391B1/en active IP Right Grant
- 2014-11-17 KR KR1020187007820A patent/KR102154757B1/en active IP Right Grant
- 2014-11-17 EP EP24164113.3A patent/EP4369180A2/en active Pending
- 2014-11-17 EP EP14864350.5A patent/EP3072070B1/en active Active
- 2014-11-17 WO PCT/US2014/065906 patent/WO2015077175A1/en active Application Filing
-
2015
- 2015-12-09 US US14/963,841 patent/US10042746B2/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN102567200A (en) * | 2011-12-14 | 2012-07-11 | 北京航空航天大学 | Parallelization security hole detecting method based on function call graph |
CN103345472A (en) * | 2013-06-04 | 2013-10-09 | 北京航空航天大学 | Redundancy removal file system based on limited binary tree bloom filter and construction method of redundancy removal file system |
CN103336760A (en) * | 2013-07-11 | 2013-10-02 | 北京信息科技大学 | Method and device based on reverse engineering for automatically generating software documents |
Also Published As
Publication number | Publication date |
---|---|
EP4369180A2 (en) | 2024-05-15 |
EP3072070A1 (en) | 2016-09-28 |
JP6349395B2 (en) | 2018-06-27 |
WO2015077175A1 (en) | 2015-05-28 |
US20150143339A1 (en) | 2015-05-21 |
EP3072070A4 (en) | 2017-08-09 |
KR20180032669A (en) | 2018-03-30 |
EP3072070B1 (en) | 2024-05-01 |
KR102154757B1 (en) | 2020-09-10 |
CN105745647A (en) | 2016-07-06 |
US10042746B2 (en) | 2018-08-07 |
KR101841751B1 (en) | 2018-05-04 |
BR112016009391A2 (en) | 2017-08-01 |
US9218169B2 (en) | 2015-12-22 |
DE202014010893U1 (en) | 2017-02-20 |
JP2016539421A (en) | 2016-12-15 |
BR112016009391A8 (en) | 2022-08-30 |
BR112016009391B1 (en) | 2023-03-28 |
US20160092350A1 (en) | 2016-03-31 |
KR20160073402A (en) | 2016-06-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN105745647B (en) | Call path finder | |
CN102193810B (en) | Cross-module inlining candidate identification | |
KR101732764B1 (en) | Intelligent code differencing using code clone detection | |
Zhang et al. | A comparison of parallel large-scale knowledge acquisition using rough set theory on different MapReduce runtime systems | |
US8370808B2 (en) | Apparatus and a method for generating a test case | |
Barba-González et al. | jMetalSP: a framework for dynamic multi-objective big data optimization | |
US20120072423A1 (en) | Semantic Grouping for Program Performance Data Analysis | |
JP2021182415A (en) | Techniques for configuring generic program using controls | |
US10102249B2 (en) | Data structure creation using ordered application of traversal rules | |
JP2013257738A (en) | Computing system, execution control method for computing system and execution control program | |
Belcastro et al. | ParSoDA: high-level parallel programming for social data mining | |
EP2771788B1 (en) | Methods and apparatuses for computing checksums for effective caching in continuous distributed builds | |
US20220318383A1 (en) | Methods and apparatus for malware classification through convolutional neural networks using raw bytes | |
Brown et al. | AcoustiCloud: A cloud-based system for managing large-scale bioacoustics processing | |
Xiong et al. | ShenZhen transportation system (SZTS): a novel big data benchmark suite | |
Lv et al. | APISynth: A new graph-based API recommender system | |
CN114791865A (en) | Method, system and medium for detecting self-consistency of configuration items based on relational graph | |
CN114386606A (en) | Method and system for identifying and prioritizing reconstructions to improve microservice identification | |
CN109416627A (en) | For revising function or to the method for automation equipment addition function | |
US20190294534A1 (en) | Program usability performance classification | |
CN103914381A (en) | Method for generating function summary information related to temporal security attribute defect modes | |
Isaev et al. | Calculon: a methodology and tool for high-level co-design of systems and large language models | |
Ikram et al. | A cloud resource management model for the creation and orchestration of social communities | |
KR102361534B1 (en) | Method and system for obfuscation using compiler | |
Jacquet et al. | Blackboard rules for coordinating context-aware applications in mobile ad hoc networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
CB02 | Change of applicant information |
Address after: American CaliforniaApplicant after: Google limited liability companyAddress before: American CaliforniaApplicant before: Google Inc. |
|
CB02 | Change of applicant information | ||
GR01 | Patent grant | ||
GR01 | Patent grant |