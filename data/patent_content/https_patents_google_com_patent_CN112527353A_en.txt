CN112527353A - Online marketplace for plug-ins to enhance dialog systems - Google Patents
Online marketplace for plug-ins to enhance dialog systems Download PDFInfo
- Publication number
- CN112527353A CN112527353A CN202011438705.3A CN202011438705A CN112527353A CN 112527353 A CN112527353 A CN 112527353A CN 202011438705 A CN202011438705 A CN 202011438705A CN 112527353 A CN112527353 A CN 112527353A
- Authority
- CN
- China
- Prior art keywords
- dialog system
- natural language
- language dialog
- software developer
- user
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 72
- 230000004044 response Effects 0.000 claims description 56
- 238000012545 processing Methods 0.000 claims description 26
- 238000013475 authorization Methods 0.000 claims description 11
- 230000002708 enhancing effect Effects 0.000 claims description 11
- 238000012552 review Methods 0.000 claims description 9
- 230000003213 activating effect Effects 0.000 claims description 3
- 238000003860 storage Methods 0.000 description 40
- 230000008569 process Effects 0.000 description 25
- 230000009471 action Effects 0.000 description 22
- 238000004891 communication Methods 0.000 description 13
- 239000003795 chemical substances by application Substances 0.000 description 12
- 238000010586 diagram Methods 0.000 description 11
- 230000001413 cellular effect Effects 0.000 description 8
- 238000003058 natural language processing Methods 0.000 description 8
- 230000003287 optical effect Effects 0.000 description 8
- 230000006870 function Effects 0.000 description 6
- 230000001755 vocal effect Effects 0.000 description 5
- 238000005516 engineering process Methods 0.000 description 4
- 230000003993 interaction Effects 0.000 description 4
- 230000007774 longterm Effects 0.000 description 4
- 238000004458 analytical method Methods 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 3
- 230000006855 networking Effects 0.000 description 3
- 230000001131 transforming effect Effects 0.000 description 3
- 230000009118 appropriate response Effects 0.000 description 2
- 230000000737 periodic effect Effects 0.000 description 2
- 238000007781 pre-processing Methods 0.000 description 2
- 239000007787 solid Substances 0.000 description 2
- 230000007474 system interaction Effects 0.000 description 2
- 239000013598 vector Substances 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 238000013528 artificial neural network Methods 0.000 description 1
- 238000012550 audit Methods 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 235000000332 black box Nutrition 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000007613 environmental effect Effects 0.000 description 1
- 230000014509 gene expression Effects 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000000877 morphologic effect Effects 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000007619 statistical method Methods 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/65—Updates
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44521—Dynamic linking or loading; Link editing at or after load time, e.g. Java class loading
- G06F9/44526—Plug-ins; Add-ons
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q20/00—Payment architectures, schemes or protocols
- G06Q20/08—Payment architectures
- G06Q20/12—Payment architectures specially adapted for electronic shopping systems
- G06Q20/123—Shopping for digital content
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
- H04L63/102—Entity profiles
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04M—TELEPHONIC COMMUNICATION
- H04M3/00—Automatic or semi-automatic exchanges
- H04M3/42—Systems providing special services or facilities to subscribers
- H04M3/42136—Administration or customisation of services
- H04M3/4217—Managing service interactions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04M—TELEPHONIC COMMUNICATION
- H04M3/00—Automatic or semi-automatic exchanges
- H04M3/42—Systems providing special services or facilities to subscribers
- H04M3/50—Centralised arrangements for answering calls; Centralised arrangements for recording messages for absent or busy subscribers ; Centralised arrangements for recording messages
- H04M3/53—Centralised arrangements for recording incoming messages, i.e. mailbox systems
- H04M3/537—Arrangements for indicating the presence of a recorded message, whereby the presence information might include a preview or summary of the message
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04M—TELEPHONIC COMMUNICATION
- H04M7/00—Arrangements for interconnection between switching centres
- H04M7/0012—Details of application programming interfaces [API] for telephone networks; Arrangements which combine a telephonic communication equipment and a computer, i.e. computer telephony integration [CPI] arrangements
Abstract
An online marketplace for plug-ins to enhance dialog systems. A method includes maintaining an online marketplace that may include a plurality of dialog system extension elements. Each of the plurality of dialog system extension elements may include at least one of: dialog system plug-ins, dialog system attachments, dialog system updates, and dialog system upgrades. The method may further include receiving a selection of one of the plurality of dialog system extension elements from a software developer. The software developer may be associated with a dialog system. The method may continue with associating the one of the plurality of dialog system extension elements with the dialog system of the software developer.
Description
Description of the cases
The present application belongs to the divisional application of Chinese patent application No.201680018569.8, which has an application date of 2016, 5, month and 27.
Technical Field
The present disclosure relates generally to data processing, and more particularly to a dialog system and online platform that allows application developers to build, customize, and maintain a dialog system for software applications.
Background
Currently, dialog systems are widely used in the information technology industry, especially in the form of mobile applications for cell phones and tablet computers. The dialog system may include a computer-based agent with a human-centric interface for accessing, processing, managing, and delivering information. Dialog systems are also known as chat information systems (chat information systems), spoken dialog systems (spoken dialog systems), conversation agents (conversation agents), chat robots (chat robots), chatbot robots (chatbots), chat bots (chatbots), chat agents (chat agents), digital personal assistants (digital personal assistants), automated online assistants (automated online assistants), and the like. All of these terms are within the scope of this disclosure and are referred to as "dialog systems" for simplicity.
Traditionally, dialog systems interact with their users in natural language to simulate intelligent conversations and provide personalized assistance to the users. For example, a user may generate a request for a dialog system in the form of a conversational question, such as "What is the weather like in Palo Alto? (what weather is in palo alto). The user may also provide voice (voice) commands to the dialog system requesting that certain functions be performed, including, for example, generating an email, making a call, searching for particular information, obtaining data, navigating, requesting a notification or reminder, etc. These and other functionalities make dialog systems very popular because they are very helpful to holders of portable electronic devices, such as smart phones, cellular phones, tablet computers, game consoles, among others.
Although the demand for dialog systems for third-party mobile applications and web services is growing, it is not an easy matter to create a well-operated dialog system. Each dialog system has a dialog system interface and a dialog system engine. The dialog system interface is responsible for receiving user input and delivering dialog system responses to the user. The dialog system engine is responsible for transforming voice user input into text input, interpreting the text input, and generating corresponding responses to the text input. The process running on the dialog system engine is also referred to as "natural language processing" or NLP. The development of NLP models is not only very time consuming, but is also a highly technical task. Therefore, most application developers may struggle to develop a dialog system that is integrated with a particular mobile application or web service. Accordingly, there is a need in the art to simplify the process of creating, developing, and maintaining dialog systems.
Disclosure of Invention
This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.
Provided is a system for enhancing dialog systems. The system may include at least one processor and a memory. The memory may be operable to maintain an online marketplace that may include a plurality of dialog system extension elements. Each of the plurality of dialog system extension elements may include at least one of a dialog system plug-in, a dialog system add-in, a dialog system update, and a dialog system upgrade. The processor may be operable to receive a selection of one of the plurality of dialog system extension elements from a software developer. The software developer may associate a dialog system with the software developer. The processor may be further operable to associate the one of the plurality of dialog system extension elements selected by the software developer with the software developer's dialog system.
Provided is a method for enhancing dialog systems. The method may include maintaining an online marketplace that may include a plurality of dialog system extension elements. Each of the plurality of dialog system extension elements may include at least one of a dialog system plug-in, a dialog system add-in, a dialog system update, and a dialog system upgrade. The method may further include receiving a selection of one of the plurality of dialog system extension elements from a software developer. The software developer may be associated with a dialog system. The method may continue with associating the one of the plurality of dialog system extension elements selected by the software developer with the dialog system of the software developer.
Additional objects, advantages and novel features will be set forth in part in the detailed description which follows, and in part will become apparent to those skilled in the art upon examination of the following detailed description and the accompanying drawings or may be learned by production or operation of the exemplary embodiments. The objects and advantages of the concepts may be realized and attained by means of the methodologies, instrumentalities and combinations particularly pointed out in the appended claims.
Drawings
Embodiments are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:
fig. 1 illustrates an environment within which systems and methods for enhancing dialog systems may be implemented, in accordance with some embodiments.
FIG. 2 is a process flow diagram illustrating a method for creating a dialog system engine in accordance with an example embodiment.
FIG. 3 is a block diagram illustrating various modules of a dialog system engine according to an example embodiment.
Fig. 4 is a block diagram of a system for enhancing a dialog system, according to an example embodiment.
Fig. 5 is a flow diagram illustrating a method for enhancing a dialog system according to an example embodiment.
Fig. 6 is a high-level block diagram illustrating an example user device suitable for implementing the methods described herein.
Detailed Description
The following detailed description includes references to the accompanying drawings, which form a part hereof. The figures show diagrams in accordance with example embodiments. These example embodiments, which are also referred to herein as "examples," are described in sufficient detail to enable those skilled in the art to practice the present subject matter.
The embodiments may be combined, other embodiments may be utilized, or structural, logical, and operational changes may be made without departing from the scope as claimed. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope is defined by the appended claims and their equivalents.
Various techniques may be used to implement the present teachings. For example, the methods described herein may be implemented in software executing on a computer system or in hardware using a microprocessor or other specially designed application specific integrated circuits, combinations of programmable logic devices or various combinations thereof. In particular, the methods described herein may be implemented by a series of computer executable instructions residing on a transitory or non-transitory storage medium such as a disk drive or computer readable medium. It should be noted that the methods disclosed herein may be implemented by a computer (e.g., desktop, tablet, laptop), game console, handheld gaming device, cellular telephone, smart phone, smart television system, and so forth.
The terms "application developer" and "software developer" or simply "developer" refer to one or more of the following: software developers, mobile application developers, software engineers, software owners, mobile application owners, software managers, mobile application managers, dialog system owners, and the like. The application developer develops and/or manages the dialog system engine and/or dialog system interface.
The term "dialog system" refers to one or more of the following: chat information systems, spoken dialog systems, conversation agents, chat robots, chatty robots, chat agents, digital personal assistants, automated online assistants, and the like. Each dialog system includes a "dialog system interface" and a "dialog system engine". Each of these elements may be customized by an application developer.
The term "dialog system interface" refers to a human machine interface configured to take user input in the form of an audio message or text message and deliver dialog system responses to the user in the form of an audio message or displayable message. In example embodiments, the dialog system interface may be implemented by or integrated with software applications, mobile applications, middleware applications, firmware applications, websites, and web services using widgets (widgets) that provide a human machine interface for obtaining user requests and delivering dialog system outputs to users.
The term "dialog system engine" refers to a software application configured to process user input and generate responses thereto. In one example embodiment, the dialog system engine refers to a computer-enabled or processor-enabled system for supporting relevant dialog system interfaces by processing user requests and generating responses corresponding thereto.
The term "insert" refers to one or more of the following: a software plug-in, add-on, software extension, update, upgrade, or software code for a dialog system engine. The term "plug-in" is also referred to herein as a "dialog system extension element".
The technology provides a platform that enables the creation of a custom dialog system engine that serves as a backend service for dialog system interfaces. The platform may comprise an online platform (i.e., a platform residing on a server or network node). The technology also provides for an online marketplace for a plurality of dialog system extension elements including various plug-ins, attachments, extensions, updates or software code for customizing dialog system applications and customizing dialog systems, such as an online marketplace implemented as a website or web service. The online marketplace may be part of the platform or connected to the platform to enable software developers to create custom dialog systems and enhance the functionality of the dialog systems maintained by the platform. More particularly, by using the online marketplace, software developers can extend the functionality of the dialog system associated with the software developers by installing plug-ins available via the online marketplace and integrating these plug-ins into the dialog system.
The dialog system interface may be implemented at least as part of various software applications, mobile applications, middleware applications, firmware applications, websites, web services, and the like. In other words, the dialog system interface may be on the client side and may provide a human machine interface configured to at least take user input and deliver dialog system output to the user. The dialog system engine, on the other hand, supports the dialog system interface by processing user input and generating responses corresponding thereto. Thus, the dialog system engine and the dialog system interface form a dialog system when interacting with each other. One may refer to a dialog system interface running on or accessed from a client device as a "front-end" user interface, while a dialog system engine that supports the operation of such a dialog system interface may be referred to as a "back-end" service.
In general, by selecting or purchasing a specific plug-in on the market, an application developer can extend the functionality of a dialog system developed by or belonging to the application developer, and eventually extend or change the functionality of a software application using the dialog system, as well as implement a specific function or various functions of the software application using the dialog system. Once a developer selects or purchases a plug-in, the plug-in may be automatically integrated with a particular dialog system engine maintained by the platform. The plug-in may have defined an application programming interface signature. Thus, when a user request is received by the dialog system interface, the user request can be processed using a plug-in associated with the dialog system engine. In other embodiments, the user request may be handled by an internal module of the dialog system engine, and if it cannot be satisfied "well" or an appropriate response cannot be generated, the user request may be handled by the relevant plug-in. Thus, this technique allows application developers to enhance dialog system functionality without investing time in developing a dialog system with multiple dialog system rules.
The benefits of the method and system of the present disclosure may appear from the following examples. Assume that a software developer needs to create a mobile application, such as a restaurant location system, that integrates a dialog system to allow a user to make verbal requests. A software developer may not have the time or resources to create his own dialog system, and thus the software developer may use the online platform to create a customized dialog system specifically for his or her mobile application. The mobile application may include only a dialog system interface that can accept and deliver user requests to the custom dialog system engine for processing, and receive responses from the custom dialog system engine and provide responses to the user through displayable or audio messages. The custom dialog system engine may reside at the online platform (i.e., on a server or network node). Typically, when the custom dialog system engine processes a user request, the dialog system engine may generate a response to the user request and cause the dialog system interface to deliver the response to the user. For the dialog system engine to operate properly, the software developer may need to create or customize the rules (in some embodiments, this task may require the creation of entities and intents that define the dialog structure and satisfy the execution rules). However, in some cases this task may be time consuming. Furthermore, even if the dialog system engine is properly trained, there may still be functions that the dialog system engine may not be able to satisfy. In these cases, the software developer can improve the functionality and operability of the dialog system engine by installing a plug-in. The software developer may only need to open an online marketplace and select one or more specific plug-ins that the software developer wants to add to the dialog system. For example, there may be a plug-in that includes dialog system rules with certain entities and intents that are particularly relevant to the online location system. Alternatively, there may be a plug-in that allows the dialog system to process user requests in a foreign language. It is clear that there may be many different kinds of inserts for fulfilling different needs. A software developer may select or purchase a plug-in of interest on the market in order to integrate the plug-in of interest with the software developer's particular dialog system engine. Once the plug-in is installed, the plug-in may process the user request or portions of the user request in order to meet the particular user's needs. Plug-ins may be created by third party developers according to particular embodiments and may be purchased or provided on a free basis.
Thus, the present technology makes it very easy and quick for software developers to create custom dialog systems for a wide variety of third-party mobile applications or web services, while enhancing dialog system functionality by adding plug-ins to these dialog systems through the marketplace. More specifically, according to various embodiments of the present disclosure, the platform allows software developers and engineers to create custom dialog system engines that can support front-end dialog system interfaces. For example, if a software developer wants to integrate dialog system functionality as an additional feature into a mobile application, the developer may use the platform to create and deploy a custom dialog system engine and link the custom dialog system engine with the mobile application. The mobile application may then have only a dialog system interface. In this example, the dialog system interface may be activated by the user when the user interacts with the mobile application. The user may query the dialog system interface in the form of voice input or text input. Upon receiving a user query, the dialog system interface may transfer the user query with little or no preprocessing to a linked custom dialog system engine that was previously created using the platform. The dialog system engine may process the received user query, interpret the user query, and generate a response to the user query based on predetermined rules and settings. The response may then be delivered to the dialog system interface for further visual or audio presentation to the user. In some embodiments, the response may include response text to be communicated to the user and/or metadata with instructions for the user device to perform an action (e.g., open a browser, access certain data online, run a particular application, etc.). In other embodiments, the response may include a callback Uniform Resource Identifier (URI) that the dialog system interface or user device may need to access to obtain response text and/or metadata or perform an action on the device/app represented by the URI.
In general, the dialog system interface may be integrated or an integral part of a wide variety of software applications running on a client device, such as a Personal Computer (PC) or a cellular telephone, or on a server, making the dialog system part of a website or web service. The dialog systems may be implemented on a server such that their functionality is accessible to the dialog system interface via the internet, a cellular network, or any other communication means. The online marketplace may also be implemented in the "cloud," meaning that it may run on a server and be utilized by software developers through a particular website or web interface.
Referring now to the drawings, FIG. 1 depicts a high-level block diagram of an exemplary system environment 100 suitable for practicing the present techniques. As shown on fig. 1, there is a platform 110 for creating and maintaining a custom dialog system engine. To this end, the platform 110 may include a platform interface 112 for creating a custom dialog system engine and a backend service 114 for maintaining and running a custom dialog system engine 120.
The platform interface 112 may include a Graphical User Interface (GUI) embedded in a web page and accessible by the developer and/or engineer 116 via the internet. However, in some other embodiments, the platform interface 112 may be implemented as a software application, e.g., a downloadable software application or any other software, middleware, or firmware running on or accessible from an electronic device, such as a computer. In the example shown in FIG. 1, the platform interface 112 may be implemented as a web-accessible GUI as will be described below. For simplicity, the present disclosure describes such embodiments where the platform interface 112 is a server-based solution such that it is accessible via the internet. Regardless of the particular implementation, the platform interface 112 may enable developers and/or engineers 116 to create one or more custom dialog system engines 120 through a number of GUI tools.
Still referring to fig. 1, the backend services 114 of the platform 110 may be responsible for maintaining and running a custom dialog system engine 120 created, for example, by the platform interface 112 or by way of the platform interface 112. The backend services 114 may operate as web services that provide functionality to the custom dialog system by enabling the dialog system interface 130 to interact with a custom dialog system engine 120 maintained at the backend services 114 of the platform 110.
As briefly discussed above, the dialog system interface 130 may be provided on a client side 140 associated with the dialog system end user 118. The dialog system interface 130 can be as simple as a GUI that enables the dialog system end user 118 to make queries that can then be delivered to the backend services 114 for processing by the corresponding dialog system engine 120, and to receive responses to queries generated by the dialog system engine 120. The dialog system interface 130 may be implemented as a stand-alone software application, or the dialog system interface 130 may be an integral part of a software application, mobile application, web service, website, or the like.
Still referring to fig. 1, the client side 140 may refer to, but is not limited to, a user device, a terminal, a computing device (e.g., laptop, tablet, desktop, PC), a cellular telephone, a smart phone, a gaming console, a remote control, a multimedia system, a smart television device, a set-top box, an infotainment system, an in-vehicle computing device, a kiosk, a robot, and so forth. In these embodiments, the dialog system interface 130 may be implemented as software, middleware, or firmware installed on such devices.
In additional embodiments, the client side 140 may refer to a networked or online solution, such as a server, a hosted service, a web site, a cloud service, and so forth. For example, the dialog system interface 130 may be a widget or GUI provided on one or more web pages that enables an end user to make queries and get responses to the queries. This option may be appropriate for those situations when the developer, for example, wants to integrate the dialog system into the developer's website to provide enhanced customer service.
As can be seen in fig. 1, interaction between a dialog system interface 130 and a corresponding dialog system engine 120 may be performed via a communication network 150. The communication network 150 may include one or more of the internet, an intranet, a cellular network, a Local Area Network (LAN), a Wide Area Network (WAN), an IEEE 802.11 based network, and the like.
FIG. 1 also shows various third party web resources/web services 160 provided via one or more web servers. These third party web resources/web services 160 may provide various types of information to the dialog system engine 120 or dialog system interface 130 as part of a response to a user request. For example, web resource/web service 160 may refer to an email service, a weather service, a navigation service, and so forth. Thus, if the user makes the query "What is the weather like today? (what is the weather today.
Still referring to FIG. 1, the example system environment 100 may include an online plug-in marketplace, shown as marketplace 170, for maintaining a plurality of plug-ins. The marketplace 170 may be implemented on a server such that it may communicate with the platform 110. However, in some embodiments, the marketplace 170 may be integrated with the platform 110.
The marketplace 170 may include a database 172 for storing plug-ins and corresponding metadata. The marketplace 170 may also include a marketplace interface 174 for enabling software developers to review, select, purchase, and/or optionally customize optional plug-ins. Metadata may accompany each plug-in and include content associated therewith. For example, the metadata may include one or more of the following: a description of a plug-in, an example image, an example audio message, a tag, a developer review, a ranking, publisher information, payment information, statistics (e.g., number of downloads/installations), abuse report links/buttons, legal statements, hyperlinks to third-party web resources, and so forth.
The marketplace interface 174 may include a GUI embedded in a web page and accessible by developers via the internet. However, in some other embodiments, the marketplace interface 174 may be implemented as a software application, such as a downloadable software application or any other software, middleware, or firmware running on or accessible from an electronic device, such as a computer. In the example shown in FIG. 1, the marketplace interface 174 may be implemented as a web-accessible GUI. For simplicity, this disclosure describes such an embodiment where the marketplace 170 is a server-based solution such that it is accessible via the internet. Regardless of the particular implementation, the marketplace interface 174 enables developers through a number of GUI tools to select one or more plug-ins and associate them with their custom dialog system engine 120.
As mentioned above, the plug-ins may be provided to the software developer at the time of purchase or on a free basis. In an example embodiment, an application developer may need to make a one-time payment or subscribe to a plan that requires periodic payment. Thus, the marketplace 170 may be enabled to conduct financial transactions using monetary or non-monetary funds. For example, the marketplace 170 may have credit card processing agents, automated clearing house agents, and the like. The subscription plan may require payment of an amount that depends on the number of dialog system users, the period of time the plug-in is used (e.g., a periodic plan, such as a monthly subscription plan, a yearly plan), the number of plug-in copies, the complexity, the number of functions provided by the plug-in, and so forth.
Some plug-ins may be provided free of charge. In one example, the plug-in may be provided free of charge during a predetermined period of time (e.g., a one month test period), but may then require payment. In another example embodiment, the plug-in may relate to a free source agent. These free-source agents may be developed jointly by multiple developers.
It should be noted that the plug-ins may be provided by a software developer or a third party developer. For example, some plug-ins may be provided by the owner of the platform 110 and/or the owner of the marketplace 170. In another example embodiment, the plug-ins may be provided to the marketplace 170 by third party developers or companies. In yet another example embodiment, plug-ins may be provided to the marketplace 170 by software developers. If the plug-in is sold from the marketplace 170, the original owner of the plug-in may be compensated by funds collected by the marketplace 170 from the buyer. For example, the owner selling the plug-in may be compensated by a percentage of the funds collected in the purchase.
According to some example embodiments, plug-ins may be shared among software developers. There may be several possible scenarios, including "knowledge sharing" and "black box sharing". Under the concept of "knowledge sharing" (also referred to herein as "white-box" sharing), plug-ins can be shared by transferring the definition of entities and intents from one developer to another. This may be similar to sharing source code between developers so that all developers may contribute to a particular plug-in. Under the "black box sharing" concept, developers on the consuming side may not be able to access data, content, entities, intents, etc., and may use the plug-ins at runtime but not make any changes to the plug-ins.
In order for a software developer, third party developer, or company (collectively, "plug-in developers") to sell and/or share plug-ins through the marketplace 170, they may be required to register with the marketplace 170 and establish a user profile. In some embodiments, marketers may review each plugin submitted by a plugin developer prior to release. An audit may be required to maintain high quality products and services for application developers. In further embodiments, plug-in developers may be provided with a separate interface (as opposed to the marketplace interface 174) that may include statistics, control modules, financial information, etc. associated with these developers' plug-ins.
Thus, the marketplace 170 may refer to a multi-user web platform/web service that allows plug-in developers to sell, distribute, or share plug-ins or elements of plug-ins, and that allows application developers to review, select, or purchase plug-ins of interest to them and integrate these plug-ins with a custom dialog system engine.
The process of creating and operating the custom dialog system engine 120 will now be described with reference to fig. 1-3. In particular, the platform interface 112 may provide one or more GUIs with a number of tools that enable developers to create and customize one or more dialog system elements that serve as the basis for the custom dialog system engine 120.
According to various embodiments, a dialog system element includes an entity and an intent. Each entity may refer to multiple objects having the same or similar characteristics. In other words, an entity may include a list of terms and/or keywords that define the objects of a class. In one example embodiment, an entity may refer to a keyword and a set of its synonyms. In another example embodiment, an entity may refer to a keyword and a set of its definitions. In yet another example embodiment, an entity may refer to a list (e.g., a list of cities, a list of names, a list of titles, a list of brands, a list of street names, etc.).
In some embodiments, each entity may have a title. For example, one entity may be referred to as "city" and may contain a list of cities such as alexander, arlington, boston, and the like. In other embodiments, an entity may be referred to as a keyword and may contain synonyms and/or definitions of this keyword. In one example embodiment, the entity referred to as "music" may include the terms song, singer, singing, musician, and the like. In another example embodiment, the entity referred to as "artist" may include a list of music bands, or music artists. In another example embodiment, an entity called "Beatles" may include a list of possible synonyms (such as "The Beatles", "Fab Four", "Liverpool Legens", "John Lennon", etc.). In yet another example embodiment, there may be entities called "Artist" that may include various Artist names, Artist name synonyms, music band names, and so forth.
In some embodiments, the dialog system engine may include a number of default preconfigured entities and/or intents. These may include common types of entities or intents related to such concepts as time, date, location, and the like. For example, when a developer creates a new dialog system engine, it may already have several common types of entities, such as an "@ system. This entity may encompass language constructs related to a particular date and may include the following terms: "today", "tomorrow", "next week", "1 month and 1 day of the next year", "next Monday", etc.
In addition, each intent of the dialog system rule may include a dialog system interaction scenario that may provide a particular relationship between at least one user request and at least one dialog system language response or satisfaction response. The dialog system interaction scheme may be represented by rules based on a relationship between a particular action and at least one entity. Actions typically involve formalizing a software object, such as a JSON (JavaScript object notation) object that causes at least one processor to generate a language associated with at least one entity or satisfy a response. Thus, each intent may be represented as a logical relationship between at least one action and at least one entity object, for example as follows:
a)[Action]@[Entity]
b)[Action]@[Entities]
c)[Actions]@[Entity]
d)[Actions]@[Entities]
e)Text@[Entity]
f)Text@[Entities]
g)Text@[Entity]Text
h)[Action]Text@[Entity]
the processes a) to d) mean that a specific action or actions are to be performed by the client side 140 and/or the dialog system interface 130 with respect to a predetermined entity or entities. For example, an intent may be represented as "Play @ Artist," where @ Artist is a developer-defined entity that contains a group of artists. In this example, the intent commands the dialog system engine 120 to activate playback of at least one of the cape songs based on the context.
The processes e) to h) mean that specific information in the form of text is provided with respect to a specific entity. For example, a user request "Create a meeting with John at 1p.m tomorrow, please Create a meeting with John at 1 pm tomorrow" may be presented with the following indicia: [ Action ] Text @ [ sys. date-time ] Text. Here, the @ sys. date-time refers to an entity associated with a time and date, and the phrase "Create a meeting" refers to a predetermined action to be performed by the dialog system interface 130 or the dialog system engine 120 in conjunction with a certain mobile application, software application, or web service. The element "Text" refers to content rather than an entity or intent.
As mentioned above, dialog system rules may result in the generation of verbal responses and/or satisfaction responses as answers to user requests. One example of a verbal response may include special content that may be delivered as an audio message or a displayable message. A satisfaction response may refer to particular processor-executable instructions of one or more software applications, middleware, firmware, web services, etc., that result in the implementation of a particular action. Some examples of satisfying responses may include scheduling events in a calendar mobile application, composing and sending text messages or emails, searching content at a web search service, building routes in a navigation software application, and so forth. In some embodiments, at least some verbal responses and/or satisfaction responses may be configurable by a developer. In other embodiments, at least some verbal and/or satisfactory responses may be preconfigured and available as default responses.
In some additional embodiments, the developer may not provide the entity and intent, but merely provide an example request to illustrate the intent and entity. In these embodiments, the platform 110 may use machine learning techniques to automatically determine what entities and intents are implied in the example user request and create corresponding rules. For example, a developer may simply provide example requests such as "Play Beatles" and "I'd like to listen to Madonna", and the platform 110 may match "Beatles" and "Madonna" with existing entities (either system or user) and automatically generate corresponding "[ Action ] @ [ Entity ]" rules.
Thus, a developer may use the platform interface 112 to generate a plurality of dialog system rules that are specific to a particular application or industry. The plurality of entities and intents form dialog system rules (also referred to as dialog system elements) and enable the custom dialog system engine to perform certain actions or generate certain outputs in response to a wide variety of end user inputs.
FIG. 2 is a process flow diagram illustrating a method 200 for creating a custom dialog system engine using a platform (shown in FIG. 1 as platform 110) and for operating the platform in accordance with an example embodiment. The method 200 may be performed by processing logic that may comprise hardware (e.g., decision logic, dedicated logic, programmable logic and microcode), software (such as that run on a general purpose computer system or a dedicated machine), or a combination of both. In an example embodiment, processing logic refers to one or more components of a platform. It is noted that the steps recited below of method 200 may be implemented in a different order than depicted and described in fig. 2. Further, the method 200 may have additional steps not shown herein but apparent to those skilled in the art from this disclosure. The method 200 may also have fewer steps than are outlined below and shown in fig. 2.
At operation 205, an application developer may be enabled to register with the platform. To do so, the software developer may need to interact with the platform interface. Registration may include creating a developer profile, which may be maintained by the platform. The software developer profile may link (i.e., associate) the software developer's custom dialog system engine with one or more dialog system interfaces deployed on the client side. The link may include rules specifying application programming code, interaction, destination address, etc.
At operation 210, the platform may receive one or more entities from the software developer and store the received entities at a local database. In some embodiments, the entity may not be received, but instead created by a developer using a web tool of the platform interface.
At operation 215, the platform may receive one or more intents from the software developer and store the intents at a local database. In some embodiments, the intent may not be received, but instead created by a software developer using tools of the platform interface. As described above, an intent may be associated with an entity, and the intent and the entity together may form a dialog system element (a customized rule that enables a dialog system engine to generate a response tailored to a particular need).
At operation 220, the platform may associate one or more entities with one or more intents to create (i.e., form) a custom dialog system engine. The custom dialog system engine may be associated with one or more dialog system interfaces of the software developer.
At operation 225, the platform may receive a user request from the unrecognized dialog system interface. The user request may be a voice input or a text input. In some embodiments, the dialog system interface may pre-process the user input, for example, by recognizing spoken words and transforming voice input into text input. However, in other embodiments, the pre-processing is not performed through the dialog system interface.
At operation 230, the platform may process the user request and identify a dialog system interface and a dialog system engine associated with the identified dialog system interface. To this end, the user request may be accompanied by an identifier when the user request is sent from the dialog system interface to the platform.
At operation 235, based on the results of the recognition at operation 230, the platform may activate a custom dialog system engine associated with the recognized dialog system interface. At the same operation, the platform may also retrieve or identify one or more dialog system elements (i.e., one or more entities and one or more intents) based on the results of the identification at the operation.
At operation 240, the dialog system engine may process the user request using the identified dialog system elements (i.e., the one or more entities and the one or more intents) as retrieved at operation 235.
At operation 245, the dialog system engine may generate a response and send the response to the dialog system interface associated with the custom dialog system engine 120. The dialog system interface may then display and/or play back the response to the end user depending on the predetermined settings.
Fig. 3 illustrates a high-level architecture of an exemplary dialog system engine 300, according to an example embodiment. It should be noted that each module of the dialog system engine 300 or related architecture includes hardware components, software components, or a combination thereof. The dialog system engine 300 may be embedded or installed in a user device or server, or may be presented as a cloud computing module and/or distributed computing module.
In the illustrated embodiment, the dialog system engine 300 may include an Automatic Speech Recognizer (ASR)310 configured to receive and process speech (speech) based user input 305 into a sequence of parameter vectors. The ASR 310 may also convert the sequence of parameter vectors into recognized input (i.e., text input having one or more words, phrases, or sentences). The ASR 310 may include one or more speech recognizers, such as a pattern-based speech recognizer, a free-dictation recognizer, an address book-based recognizer, a dynamically created recognizer, and so forth.
Additionally, dialog system engine 300 can include NLP module 320 for understanding spoken language input. In particular, NLP module 320 can decompose and parse the recognized input to generate utterances that are then analyzed using, for example, morphological analysis, part-of-speech tagging, shallow parsing, and the like. NLP module 320 can then map the recognized input or portions thereof into a meaningful representation.
Referring back to FIG. 3, dialog manager 330 may employ a number of different methods to generate output 360 in response to recognized input. Some methods include using statistical analysis, machine learning algorithms (e.g., neural networks), heuristic analysis, and the like. Dialog manager 330 may be one of the central components of the dialog system engine. The main role of dialog manager 330 can be to select the correct system actions based on the observed evidence and inferred dialog states based on the results of the NLP (e.g., dialog behavior, user goals, and dialog history). Further, dialog manager 330 may be able to handle errors when user input has ASR and NLP errors caused by noise or accidental input.
The dialog system engine 300 may also include an output renderer 350 for transforming the output 360 of the dialog manager 330 into a form suitable for presentation to a user. For example, the output renderer 350 may employ a text-to-speech engine or may contact a pre-recorded audio database to generate an audio message corresponding to the output 360 of the dialog manager 330. In some embodiments, the output renderer 350 may present or cause to be presented as a text message, an image, or a video message for further display on the display screen of the user device the output 360 of the dialog manager 330. In some example embodiments, the output renderer 350 may constitute at least a portion of the dialog system interface shown on fig. 1 as the dialog system interface 130.
Still referring to fig. 3, the dialog system engine 300 may include one or more dialog system rules maintained in at least one rules database 365. The dialog system engine 300 may also include or be associated with one or more context databases 370, which context databases 370 may maintain a list of context description elements, such as terms, keywords, phrases, expressions, context variables, context parameters (e.g., geolocation, system rate, GUI, etc.) associated with one or more dialog system rules. In other words, context database 370 may include information that supports the process of determining a dialog or environmental context for a particular user request.
Fig. 4 is a high-level block diagram illustrating an example system 400 for enhancing a dialog system described herein. In particular, the system 400 may be a server-based solution suitable for running the platform 110 and/or the marketplace 170 shown on fig. 1.
Note that all of the components of the system 400 shown on fig. 4 may include logic elements, hardware components, software (firmware) components, virtual components, or a combination thereof. The system 400 may comprise, be associated with, or constitute an integral part of one or more of a variety of types of devices and systems, such as general purpose computers, servers, web services, cloud computing services, and the like. Additionally, all of the modules shown in fig. 4 may be operatively coupled using any suitable wired, wireless, radio, electrical, or optical standard.
As shown in fig. 4, system 400 includes the following hardware components: at least one processor 402, memory 404, optionally one or more storage devices 406, and optionally a network interface 408. The system 400 may also optionally include the following software or virtual components: an operating system 410, one or more software applications 420, and an interface 430 (such as platform interface 112 and/or marketplace interface 174 shown in fig. 1). Interface 430 may provide a human-centric interface for accessing and managing information as discussed herein.
In some embodiments, the processor 402 may be configured to implement the functionality and/or process instructions executed within the system 400. For example, processor 402 may process instructions stored in memory 404 and/or instructions stored on storage device 406. Such instructions may include components of operating system 410, software applications 420, and/or interfaces 430.
According to an example embodiment, the memory 404 may be configured to store information within the system 400 during operation. In some example embodiments, memory 404 may refer to a non-transitory computer-readable storage medium or computer-readable storage device. In some example embodiments, memory 404 may be a temporary memory, meaning that the primary purpose of memory 404 may not be long-term storage. Memory 404 may also refer to volatile memory, meaning that memory 404 may not maintain stored contents when memory 404 is not receiving power. Examples of volatile memory include Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), and other forms of volatile memory known in the art. In some examples, memory 404 may be used to store program instructions for execution by processor 402. In an example embodiment, memory 404 may be used to temporarily store information during program execution.
The one or more storage devices 406 may also include one or more transitory or non-transitory computer-readable storage media and/or computer-readable storage devices. In some embodiments, storage 406 may be configured to store larger amounts of information than memory 404. The storage device 406 may also be configured for long-term storage of information. In some examples, storage 406 includes non-volatile storage elements. Examples of such non-volatile storage elements include forms of magnetic hard disks, optical disks, solid state disks, flash memory, electrically programmable memory (EPROM) or electrically erasable and programmable memory (EEPROM), and other forms of non-volatile memory known in the art. In one example, storage 406 may include a database, shown in FIG. 1 as database 172 (i.e., storage 406 may store and maintain a plurality of dialog system extension elements, including plug-ins, attachments, extensions, etc.). In other embodiments, the storage 406 may store and maintain user profiles and custom dialog system engines.
Still referring to fig. 4, the system 400 may include a network interface 408. Network interface 408 may be utilized to communicate with external devices, servers, and networked systems via one or more communication networks, such as one or more wired, wireless, or optical networks including, for example, the internet, intranets, LANs, WANs, cellular telephone networks (e.g., global system for mobile communications (GSM) communication networks, packet switched communication networks, circuit switched communication networks), bluetooth radios, and IEEE 802.11-based radio frequency networks, among others. The network interface 408 may be a network interface card (such as an ethernet card), an optical transceiver, a radio frequency transceiver, or any other type of device that can send and receive information. Other examples of such network interfaces may include in a mobile computing device
The operating system 410 may control one or more functionalities of the system 400 or components of the system 400. For example, operating system 410 may interact with interface 430 and may further facilitate one or more interactions between software application 420 and processor 402, memory 404, storage 406, and/or network interface 408. Operating system 410 may interact with or otherwise be coupled to interfaces 430 and the components of interfaces 430. Notably, the system 400 and its components can also interact with one or more remote storage or computing resources including, for example, web resources, web sites, social networking websites, blog websites, news feeds, email servers, web calendars, event databases, ticketing aggregators, map databases, point of interest databases, and so forth. The software applications 420 may essentially provide functionality to the platform and/or marketplace and enable their operation. Alternatively, the software application 420 may be an addition to a platform and/or marketplace.
Fig. 5 is a process flow diagram illustrating a method 500 for enhancing a dialog system according to an example embodiment. Method 500 may be performed by processing logic that may comprise hardware (e.g., decision logic, dedicated logic, programmable logic and microcode), software (such as that run on a general purpose computer system or a dedicated machine), or a combination of both. In an example embodiment, the processing logic refers to one or more components of the marketplace 170 and/or platform 110 shown on fig. 1. It is noted that the steps recited below of method 500 may be implemented in a different order than described and illustrated in fig. 5. Further, the method 500 may have additional steps not shown herein but apparent to those skilled in the art from this disclosure. Method 500 may also have fewer steps than those outlined below and shown in fig. 5.
The method 500 may begin at operation 510 with maintaining an online marketplace. The online marketplace may be maintained by memory and may include a plurality of dialog system extension elements (e.g., dialog system plug-ins, dialog system attachments, dialog system updates, and dialog system upgrades). A software developer may view and select a particular dialog system extension element through a marketplace interface. In example embodiments, a software developer may review metadata associated with the dialog system extension element, review comments, rankings, ratings, reviews, information of publishers, descriptions, manuals, images, videos, legal information, and the like of other developers or users.
At operation 520, the processor may receive at least one selection of a dialog system extension element from a software developer. In an example embodiment, a software developer is associated with a dialog system; that is, the software developer may have the dialog system developed or may be in the possession of the software developer.
In some embodiments, the selection may require a financial transaction to be conducted so that the dialog system extension element may be integrated with a particular dialog system engine. In these cases, the software developer may need to subscribe to the plan or make a one-time payment to gain access to the selected dialog system extension element. More specifically, upon receiving a selection of a dialog system extension element, the processor may receive a selection of a subscription plan for the dialog system extension element from a software developer. Further, the processor may receive a payment for the dialog system extension element. The payment may be provided by the software developer according to a subscription plan.
At operation 530, the processor may associate the dialog system extension element selected by the software developer with the dialog system of the software developer. For this purpose, the processor may need to identify the software developer or a dialog system associated with the software developer. Identification may be accomplished through an authorization process (i.e., requesting that the software developer log into the online marketplace). More specifically, the processor may receive an authorization request from a software developer.
In this regard, the processor may communicate with the platform and access records or user profiles associated with the software developer and the dialog system of the software developer based on the authorization data. The record may be stored in a memory. Based on the records, the software developer and the dialog system of the software developer can be identified. Once the software developer and/or the dialog system of the software developer is identified, the processor may authorize the software developer to access the online marketplace. The processor may also continue to link the software developer's dialog system with the dialog system extension element selected by the software developer. For the links, the dialog system extension elements may be integrated or embedded into the software developer's dialog system, or alternatively, some of the links or metadata associated with the dialog system extension elements may be integrated with the software developer's dialog system. In either case, the dialog system extension element may operate in conjunction with the software developer's dialog system.
In an example embodiment, the dialog system extension element may be available to the software developer as a "black box" solution, meaning that the software developer may not be able to see the source code, entity, intent, or other information of the dialog system extension element. Alternatively, the dialog system extension element may be available to the software developer as a "white-box" solution, meaning that the software developer may be able to see the source code, entity, intent, or other information of the dialog system extension element. In further embodiments, various options between "black-box" and "white-box" solutions may be provided, meaning that various levels of access may be provided that may allow a software developer to view and edit specific elements of a dialog system extension element (e.g., access intent execution results, rather than the dialog definition, intent, and entity itself). Alternatively, a software developer may be provided with full open source access to the dialog system extension elements. In other words, the dialog system extension element may be provided as an open source dialog system extension element editable by the software developer, a limited access dialog system extension element partly editable by the software developer, and a closed access dialog system extension element not editable by the software developer.
Additionally, when a dialog system extension element is successfully associated with a dialog system, the operation of the dialog system may be as follows. At operation 540, the processor may receive a user request from the dialog system interface. The dialog system interface may be installed on the user device or on a third party server. The dialog system interface may be associated with a dialog system maintained at the online platform. At operation 550, the processor may identify a dialog system engine associated with the dialog system interface and thus the dialog system. At operation 560, the processor or dialog system engine may identify a dialog system extension element or elements associated with the dialog system engine. Optionally, an arbitration step may be performed to select between elements or present multiple results to the user at once. The arbitration step may be performed by an arbitration application. At operation 570, the user request may be processed by the dialog system extension element, alone or in combination with the dialog system engine, to generate a response to the user request. Finally, at operation 580, the processor may cause delivery of the response to the user. Delivery of the response may include delivering text, video, audio, and/or metadata to the dialog system interface or to the user device, such as a callback URL where the user device may obtain data for delivery to the user.
In some embodiments, at operation 570, the dialog system engine may attempt to process the user request without any dialog system extension elements. Such processing may include activating the dialog system based on a user request, retrieving one or more entities and one or more intents as discussed above, and processing the user request by applying the one or more entities and one or more intents to generate an appropriate response or satisfy an action. If processing the user request in this manner is successful, the processor may proceed to operation 580 to deliver a response to the user or to make a particular action. Alternatively, if the processing of the user request by the application dialog system engine itself is unsuccessful, the user request is processed by the dialog system extension element (or elements) to generate an alternative response to the user request. Once the substitute response is generated by one or more dialog system extension elements, the method 500 proceeds to operation 580 as discussed above.
Fig. 6 is a high-level block diagram illustrating an example user device 600 suitable for implementing the methods described herein. It is worthy to mention that all components of user device 600 may comprise logic elements, hardware components, software (firmware) components, virtual components, or a combination thereof.
As shown in fig. 6, user device 600 may include the following hardware components: at least one processor 602, memory 604, one or more storage devices 606, one or more input modules 608, one or more output modules 610, a network interface 612, and a geolocation determiner 614. User device 600 may also include the following software or virtual components: an operating system 620, one or more software (mobile) applications 630, and a dialog system interface 130, which dialog system interface 130 may be a stand-alone software application or integrated into one or more software applications 630. The dialog system interface 130 may provide a human-centric interface for accessing and managing information, communicating with the dialog system engine, and communicating with web resources/web services as discussed herein. According to various embodiments, the dialog system interface 130 may be virtual.
According to an example embodiment, memory 604 may be configured to store information within user device 600 during operation. Memory 604 may refer to a non-transitory computer-readable storage medium or computer-readable storage device. In some examples, memory 604 may be a temporary memory, meaning that the primary purpose of memory 604 may not be long-term storage. Memory 604 may also refer to volatile memory, meaning that memory 604 may not maintain stored contents when memory 604 is not receiving power. Examples of volatile memory include RAM, DRAM, SRAM, and other forms of volatile memory known in the art. In some examples, memory 604 may be used to store program instructions that are executed by processor 602. In an example embodiment, the memory 604 may be used by software executing on the user device 600 (e.g., the operating system 620) or the dialog system interface 130 to temporarily store information during program execution. Storage 606 may also include one or more transitory or non-transitory computer-readable storage media and/or computer-readable storage devices. In some embodiments, storage 606 may be configured to store larger amounts of information than memory 604. Storage 606 may also be configured for long-term storage of information. In some examples, storage 606 may include non-volatile storage elements. Examples of such non-volatile storage elements include forms of magnetic hard disks, optical disks, solid state disks, flash memory, EPROM or EEPROM, and other forms of non-volatile storage known in the art.
Still referring to fig. 6, the user device 600 may include one or more input modules 608. The input module 608 may be configured to receive user input. Examples of input module 608 may include a microphone, keyboard, keypad, mouse, trackball, touch screen, touch pad, or any other device capable of detecting input from a user or other source in the form of voice, audio, or tactile action and relaying the input to user device 600 or a component thereof.
In some example embodiments, the output module 610 may be configured to provide output to a user through a visual or auditory channel. Output module 610 may include a video graphics adapter card, a liquid crystal display monitor, a light emitting diode monitor, a sound card, a speaker, or any other device capable of generating an output that may be understood by a user.
In some embodiments, user device 600 may include network interface 612. Network interface 612 may be utilized to communicate with external devices, servers, and networked systems via one or more communication networks, such as one or more wired, wireless, or optical networks including, for example, the internet, an intranet, a LAN, a WAN, a cellular telephone network (e.g., a GSM communication network, a packet-switched communication network, a circuit-switched communication network), a bluetooth radio, and an IEEE 802.11-based radio frequency network, among others. The network interface 612 may be a network interface card (such as an ethernet card), an optical transceiver, a radio frequency transceiver, or any other type of device that can send and receive information. Other examples of such network interfaces may include in a mobile computing device
The user device 600 may also include a geographic location determiner 614 for determining a current geographic location of the user device. The geolocation determiner 614 may utilize many different methods for determining geolocation, including, for example, receiving and processing signals of the global positioning system, the GLONASS satellite navigation system, or the Galileo satellite navigation system; multiplexing with radio signals between radio towers (base stations); or using geolocation methods associated with internet protocol addresses, medium access control addresses, radio frequency identification, or other techniques.
Thus, a method and system for enhancing dialog systems has been described. Although embodiments have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these example embodiments without departing from the broader spirit and scope of the application. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.
Claims (15)
1. A system for enhancing a natural language dialog system, comprising:
a memory operable to maintain a platform comprising a plurality of natural language dialog system extension elements, wherein each of the plurality of natural language dialog system extension elements comprises at least one of a natural language dialog system plug-in and a natural language dialog system attachment; and
at least one processor operable to:
receiving a selection of one of the plurality of natural language dialog system extension elements from a software developer associated with a natural language dialog system; and
based on the selection, associating the one of the plurality of natural language dialog system extension elements with the natural language dialog system associated with the software developer.
2. The system of claim 1, wherein the at least one processor is further operable to:
receiving an authorization request from the software developer, the authorization request including at least authorization data associated with the software developer;
accessing records associated with the software developer and the natural language dialog system of the software developer based on the authorization data, the records being stored in the memory;
identifying the software developer and the natural language dialog system of the software developer based on the record; and
based on the identification, the software developer is authorized to access the platform.
3. The system of claim 1 or claim 2, wherein associating the one of the plurality of natural language dialog system extension elements with the natural language dialog system comprises embedding the one of the plurality of natural language dialog system extension elements into the natural language dialog system.
4. The system of any preceding claim, wherein each of the plurality of natural language dialog system extension elements is associated with metadata, the metadata being provided for review by the software developer.
5. The system of claim 4, wherein associating the one of the plurality of natural language dialog system extension elements with the natural language dialog system comprises integrating the metadata associated with the one of the plurality of natural language dialog system extension elements into the natural language dialog system.
6. The system of any preceding claim, wherein the at least one processor is further operable to:
receiving a user request of a user from a natural language dialog system interface, wherein the natural language dialog system interface is installed on one of a user device and a third party server, the natural language dialog system interface being associated with the natural language dialog system, wherein the natural language dialog system is maintained at an online platform;
based on the user request, activating the natural language dialog system and retrieving one or more natural language dialog system entities and one or more natural language dialog system intents;
processing the user request by applying the one or more natural language dialog system entities and the one or more natural language dialog system intents to generate a response;
delivering the response to the user if the processing of the user request is successful; and
processing, by the one of the plurality of natural language dialog system extension elements, the user request to generate an alternative response to the user request and deliver the alternative response to the user if the processing of the user request is unsuccessful.
7. The system of any of claims 1 to 5, wherein the at least one processor is further operable to:
receiving a user request of a user from a natural language dialog system interface, wherein the natural language dialog system interface is installed on one of a user device and a third party server, wherein the natural language dialog system is maintained at an online platform;
identifying that the natural language dialog system interface is associated with the natural language dialog system;
identifying at least one natural language dialog system extension element of the plurality of natural language dialog system extension elements, the at least one natural language dialog system extension element associated with the natural language dialog system;
processing, by the at least one natural language dialog system extension element, the user request to generate a response to the user request; and
causing delivery of the response to the user.
8. The system of any preceding claim, wherein the one of the plurality of natural language dialog system extension elements is selected from the group comprising: an open source natural language dialog system extension element, a limited access natural language dialog system extension element, and a closed access natural language dialog system extension element.
9. The system of claim 8, wherein the open-source natural language dialog system extension element is editable by the software developer, wherein the limited-access natural language dialog system extension element is partially editable by the software developer; and
wherein the closed access natural language dialog system extension element is not editable by the software developer.
10. A computer-implemented method for enhancing a natural language dialog system, the method being performed by at least one processor and memory, the method comprising:
maintaining, by the memory, a platform comprising a plurality of natural language dialog system extension elements, wherein each of the plurality of natural language dialog system extension elements comprises at least one of a natural language dialog system plug-in and a natural language dialog system attachment;
receiving, by the at least one processor, a selection of one of the plurality of natural language dialog system extension elements from a software developer associated with a natural language dialog system; and
based on the selection, associating, by the at least one processor, the one of the plurality of natural language dialog system extension elements with the natural language dialog system of the software developer.
11. The method of claim 10, further comprising:
receiving, by the at least one processor, an authorization request from the software developer, the authorization request including at least authorization data associated with the software developer;
accessing records associated with the software developer and the natural language dialog system of the software developer based on the authorization data, the records being stored in the memory;
identifying the software developer and the natural language dialog system of the software developer based on the record; and
based on the identification, the software developer is authorized to access the platform.
12. The method of claim 10 or claim 11, wherein associating the one of the plurality of natural language dialog system extension elements with the natural language dialog system comprises embedding the one of the plurality of natural language dialog system extension elements into the natural language dialog system.
13. The method of any of claims 10 to 12, wherein each of the plurality of natural language dialog system extension elements is associated with metadata that is provided for review by the software developer, and wherein associating the one of the plurality of natural language dialog system extension elements with the natural language dialog system comprises integrating the metadata associated with the one of the plurality of natural language dialog system extension elements into the natural language dialog system.
14. The method of any of claims 10 to 13, further comprising:
receiving a user request of a user from a natural language dialog system interface, wherein the natural language dialog system interface is installed on one of a user device and a third party server, the natural language dialog system interface being associated with the natural language dialog system, wherein the natural language dialog system is maintained at an online platform;
based on the user request, activating the natural language dialog system and retrieving one or more natural language dialog system entities and one or more natural language dialog system intents;
processing the user request by applying the one or more natural language dialog system entities and the one or more natural language dialog system intents to generate a response;
delivering the response to the user if the processing of the user request is successful; and
processing, by the one of the plurality of natural language dialog system extension elements, the user request to generate an alternative response to the user request and deliver the alternative response to the user if the processing of the user request is unsuccessful.
15. The method of any of claims 10 to 13, further comprising:
receiving a user request of a user from a natural language dialog system interface, wherein the natural language dialog system interface is installed on one of a user device and a third party server, wherein the natural language dialog system is maintained at an online platform;
identifying that the natural language dialog system interface is associated with the natural language dialog system;
identifying at least one natural language dialog system extension element of the plurality of natural language dialog system extension elements, the at least one natural language dialog system extension element associated with the natural language dialog system;
processing, by the at least one natural language dialog system extension element, the user request to generate a response to the user request; and
causing delivery of the response to the user.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201562166683P | 2015-05-27 | 2015-05-27 | |
US62/166,683 | 2015-05-27 | ||
CN201680018569.8A CN107430517B (en) | 2015-05-27 | 2016-05-27 | Online marketplace for plug-ins to enhance dialog systems |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201680018569.8A Division CN107430517B (en) | 2015-05-27 | 2016-05-27 | Online marketplace for plug-ins to enhance dialog systems |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112527353A true CN112527353A (en) | 2021-03-19 |
Family
ID=57393323
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201680018569.8A Active CN107430517B (en) | 2015-05-27 | 2016-05-27 | Online marketplace for plug-ins to enhance dialog systems |
CN202011438705.3A Pending CN112527353A (en) | 2015-05-27 | 2016-05-27 | Online marketplace for plug-ins to enhance dialog systems |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201680018569.8A Active CN107430517B (en) | 2015-05-27 | 2016-05-27 | Online marketplace for plug-ins to enhance dialog systems |
Country Status (4)
Country | Link |
---|---|
US (3) | US10324704B2 (en) |
EP (1) | EP3304288B1 (en) |
CN (2) | CN107430517B (en) |
WO (1) | WO2016191629A1 (en) |
Families Citing this family (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9634855B2 (en) | 2010-05-13 | 2017-04-25 | Alexander Poltorak | Electronic personal interactive device that determines topics of interest using a conversational agent |
CN107430517B (en) | 2015-05-27 | 2020-12-18 | 谷歌有限责任公司 | Online marketplace for plug-ins to enhance dialog systems |
EP3319761A4 (en) * | 2015-07-08 | 2019-03-06 | Universal Robots A/S | Method for extending end user programming of an industrial robot with third party contributions |
US10649739B2 (en) * | 2016-12-20 | 2020-05-12 | Microsoft Technology Licensing, Llc | Facilitating application development |
US10657173B2 (en) * | 2017-06-09 | 2020-05-19 | Google Llc | Validate modification of audio-based computer program output |
US10614122B2 (en) | 2017-06-09 | 2020-04-07 | Google Llc | Balance modifications of audio-based computer program output using a placeholder field based on content |
US10652170B2 (en) * | 2017-06-09 | 2020-05-12 | Google Llc | Modification of audio-based computer program output |
US11699039B2 (en) | 2017-06-28 | 2023-07-11 | Microsoft Technology Licensing, Llc | Virtual assistant providing enhanced communication session services |
US10585991B2 (en) * | 2017-06-29 | 2020-03-10 | Microsoft Technology Licensing, Llc | Virtual assistant for generating personalized responses within a communication session |
CN117061495A (en) * | 2018-05-07 | 2023-11-14 | 谷歌有限责任公司 | Platform selection to perform requested actions in an audio-based computing environment |
US11087761B2 (en) * | 2018-05-07 | 2021-08-10 | Google Llc | Platform selection for performing requested actions in audio-based computing environments |
US11520989B1 (en) * | 2018-05-17 | 2022-12-06 | Workday, Inc. | Natural language processing with keywords |
CN109086033B (en) * | 2018-07-06 | 2021-08-03 | 中科星图股份有限公司 | Flow scheduling method for remote sensing data processing |
KR102545666B1 (en) | 2018-12-18 | 2023-06-21 | 삼성전자주식회사 | Method for providing sententce based on persona and electronic device for supporting the same |
KR20200107057A (en) | 2019-03-06 | 2020-09-16 | 삼성전자주식회사 | Method for expanding language used in voice recognition model and electronic device including voice recognition model |
CN110113483B (en) * | 2019-04-19 | 2022-02-25 | 华为技术有限公司 | Method for using enhanced function of electronic equipment and related device |
CN112241274A (en) * | 2019-07-18 | 2021-01-19 | 上海绿联软件股份有限公司 | Program upgrading method, device and equipment |
US11567788B1 (en) | 2019-10-18 | 2023-01-31 | Meta Platforms, Inc. | Generating proactive reminders for assistant systems |
US11636438B1 (en) | 2019-10-18 | 2023-04-25 | Meta Platforms Technologies, Llc | Generating smart reminders by assistant systems |
US11321058B2 (en) | 2020-03-30 | 2022-05-03 | Nuance Communications, Inc. | Development system and method |
CN111767033B (en) * | 2020-05-21 | 2023-08-25 | 江苏中科重德智能科技有限公司 | Programming system and function expansion method for mechanical arm program development |
CN113793612B (en) * | 2021-09-15 | 2024-04-09 | 京东科技信息技术有限公司 | Updating method and device of model service and storage medium |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070201655A1 (en) * | 2006-02-03 | 2007-08-30 | Michael Shenfield | System and method for installing custom services on a component-based application platform |
US20090210702A1 (en) * | 2008-01-29 | 2009-08-20 | Palm, Inc. | Secure application signing |
CN101789938A (en) * | 2010-01-12 | 2010-07-28 | 清华大学 | Agent-based component generation method in reconfigurable software |
US20100262956A1 (en) * | 2009-04-10 | 2010-10-14 | Yoshihiro Okada | Software development support apparatus, function extension method and storage medium for storing function extension program |
US20120185821A1 (en) * | 2010-09-17 | 2012-07-19 | Oracle International Corporation | Pattern-based construction and extension of enterprise applications in a cloud computing environment |
CN102682014A (en) * | 2011-03-14 | 2012-09-19 | 腾讯科技（深圳）有限公司 | Open-type plug-in module management platform implemented on browser and open-type plug-in module management method |
Family Cites Families (66)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5845077A (en) * | 1995-11-27 | 1998-12-01 | Microsoft Corporation | Method and system for identifying and obtaining computer software from a remote computer |
US20050091057A1 (en) * | 1999-04-12 | 2005-04-28 | General Magic, Inc. | Voice application development methodology |
US20030083882A1 (en) * | 2001-05-14 | 2003-05-01 | Schemers Iii Roland J. | Method and apparatus for incorporating application logic into a voice responsive system |
US20060059251A1 (en) * | 2002-05-01 | 2006-03-16 | Cunha Gary D | Method and system for request management processing |
US20040034860A1 (en) * | 2002-08-15 | 2004-02-19 | Microsoft Corporation | Dynamically extensible application program framework including message and notification routing |
US7707564B2 (en) * | 2003-02-26 | 2010-04-27 | Bea Systems, Inc. | Systems and methods for creating network-based software services using source code annotations |
US7636722B2 (en) * | 2003-02-28 | 2009-12-22 | Bea Systems, Inc. | System and method for describing application extensions in XML |
US20070088707A1 (en) * | 2004-09-15 | 2007-04-19 | Scott Durgin | Method for providing extensible software components within a distributed synchronization system |
US20070038642A1 (en) * | 2004-09-15 | 2007-02-15 | Scott Durgin | Method for providing extensible software components within a distributed synchronization system |
EP1865737B1 (en) * | 2005-03-22 | 2015-01-07 | NTT DoCoMo, Inc. | Transmission rate control method, and radio line control station |
US7552429B2 (en) * | 2005-04-21 | 2009-06-23 | International Business Machines Corporation | Integrated development environment for managing software licensing restrictions |
US9401900B2 (en) * | 2005-07-01 | 2016-07-26 | Cirius Messaging Inc. | Secure electronic mail system with thread/conversation opt out |
US10021062B2 (en) * | 2005-07-01 | 2018-07-10 | Cirius Messaging Inc. | Secure electronic mail system |
US8688790B2 (en) * | 2005-07-01 | 2014-04-01 | Email2 Scp Solutions Inc. | Secure electronic mail system with for your eyes only features |
US7870204B2 (en) * | 2005-07-01 | 2011-01-11 | 0733660 B.C. Ltd. | Electronic mail system with aggregation and integrated display of related messages |
US9626667B2 (en) * | 2005-10-18 | 2017-04-18 | Intertrust Technologies Corporation | Digital rights management engine systems and methods |
US8108851B2 (en) * | 2006-01-30 | 2012-01-31 | International Business Machines Corporation | External registration for function configuration within a client platform application |
EP1816562A1 (en) * | 2006-02-03 | 2007-08-08 | Research In Motion Limited | System and method for extending a component-based application platform with custom services |
US20070233782A1 (en) * | 2006-03-28 | 2007-10-04 | Silentclick, Inc. | Method & system for acquiring, storing, & managing software applications via a communications network |
US20080020170A1 (en) * | 2006-07-19 | 2008-01-24 | Haubrich Jeanne E | Substrate possessing a transparent protective layer derived from a radiation-curable acrylate composition |
US8601467B2 (en) * | 2006-10-03 | 2013-12-03 | Salesforce.Com, Inc. | Methods and systems for upgrading and installing application packages to an application platform |
WO2008042984A2 (en) | 2006-10-03 | 2008-04-10 | Salesforce.Com, Inc. | Methods and systems for upgrading and installing application packages to an application platform |
US8062132B2 (en) * | 2006-12-08 | 2011-11-22 | Microsoft Corporation | Subscription based services for closed computing systems |
US20080301669A1 (en) * | 2007-05-30 | 2008-12-04 | Google Inc. | Dynamically Self-Updating by a Software Application on a Device |
US8856205B2 (en) * | 2007-07-24 | 2014-10-07 | Ricoh Company, Ltd. | Extensible web services system |
US20090037337A1 (en) * | 2007-07-31 | 2009-02-05 | Ahmad Baitalmal | Software Licensing and Enforcement System |
US20090037287A1 (en) * | 2007-07-31 | 2009-02-05 | Ahmad Baitalmal | Software Marketplace and Distribution System |
FI120857B (en) * | 2007-12-19 | 2010-03-31 | Teliasonera Ab | User terminal, storage medium, service center and procedure |
US20100037204A1 (en) * | 2008-08-07 | 2010-02-11 | Google Inc. | Content Distribution for Mobile Device |
US11218854B2 (en) * | 2009-01-28 | 2022-01-04 | Headwater Research Llc | Service plan design, user interfaces, application programming interfaces, and device management |
US8327351B2 (en) * | 2009-04-30 | 2012-12-04 | Sap Ag | Application modification framework |
US8032624B2 (en) * | 2009-06-19 | 2011-10-04 | Avaya Inc. | Pluggable contact resolution |
CN101604371B (en) * | 2009-07-22 | 2012-02-08 | 阿里巴巴集团控股有限公司 | Method and system for controlling authority of plug-in unit |
US8904343B2 (en) * | 2009-12-21 | 2014-12-02 | Sap Se | Adding services to application platform via extension |
US10580051B2 (en) * | 2010-05-18 | 2020-03-03 | Google Llc | Background element associated with an application installed in a browser application |
US9594886B2 (en) * | 2010-06-02 | 2017-03-14 | Avaya Inc. | Application and open source information technology policy filter |
US8352908B2 (en) * | 2010-06-28 | 2013-01-08 | International Business Machines Corporation | Multi-modal conversion tool for form-type applications |
CN101968740B (en) * | 2010-09-28 | 2013-05-08 | 中国工商银行股份有限公司 | Service data dynamic adjustment server and system on basis of JAVA CLASS compilation |
US8694988B2 (en) * | 2010-10-22 | 2014-04-08 | Adobe Systems Incorporated | Runtime extensions |
US20150161277A1 (en) * | 2011-03-14 | 2015-06-11 | Browsium, Inc. | Methods and systems for one browser version to use a rendering engine of another browser version for displaying information |
US8898629B2 (en) * | 2011-04-06 | 2014-11-25 | Media Direct, Inc. | Systems and methods for a mobile application development and deployment platform |
CN102170439B (en) * | 2011-04-20 | 2014-04-02 | 深圳创维－Rgb电子有限公司 | Application service expansion system |
CN102843334A (en) * | 2011-06-20 | 2012-12-26 | 华为技术有限公司 | Interactive method of online application, server, client device and system |
US9069637B2 (en) | 2011-07-25 | 2015-06-30 | Intel Corporation | Dynamic feature enhancement in client server applications and high volume server deployment with dynamic app store integration |
EP2764437A4 (en) * | 2011-10-04 | 2015-07-01 | Nokia Corp | Method and apparatus for providing an application marketplace |
WO2013074548A1 (en) * | 2011-11-15 | 2013-05-23 | Trimble Navigation Limited | Efficient distribution of functional extensions to a 3d modeling software |
US9679163B2 (en) * | 2012-01-17 | 2017-06-13 | Microsoft Technology Licensing, Llc | Installation and management of client extensions |
US20140053126A1 (en) * | 2012-02-13 | 2014-02-20 | Mark A. Watson | Integrated mobile application development platform |
US9135445B2 (en) * | 2012-03-19 | 2015-09-15 | Google Inc. | Providing information about a web application or extension offered by website based on information about the application or extension gathered from a trusted site |
EP2845093A4 (en) * | 2012-05-01 | 2016-01-20 | Agora Mobile Inc | System and method for providing an application development and distribution social platform |
US9110767B2 (en) * | 2012-07-09 | 2015-08-18 | Accenture Global Services Limited | Cobol reference architecture |
US20140047413A1 (en) * | 2012-08-09 | 2014-02-13 | Modit, Inc. | Developing, Modifying, and Using Applications |
US9514492B2 (en) | 2012-11-05 | 2016-12-06 | Mfoundry, Inc. | Systems and methods for providing financial service extensions |
CN103034928B (en) * | 2012-12-11 | 2015-11-18 | 清华大学 | The plug and play data platform of self-discipline dispersion and management method and application |
US9210155B2 (en) * | 2013-03-08 | 2015-12-08 | Stocktree Inc. | System and method of extending a host website |
US20140310606A1 (en) * | 2013-04-11 | 2014-10-16 | Xiaomi Inc. | Method and device for providing plugin in contact list |
US9875149B2 (en) * | 2013-04-29 | 2018-01-23 | Microsoft Technology Licensing, Llc | Preventing sync interruptions |
US9294482B2 (en) * | 2013-07-25 | 2016-03-22 | Oracle International Corporation | External platform extensions in a multi-tenant environment |
US9513885B2 (en) * | 2013-08-22 | 2016-12-06 | Peter Warren | Web application development platform with relationship modeling |
CN103631579A (en) * | 2013-10-28 | 2014-03-12 | 华中师范大学 | Plug-in type teaching software platform |
ES2655207T3 (en) * | 2013-12-27 | 2018-02-19 | Buongiorno S.p.A. | Method and system to implement sets of software development tools in application |
US9733921B1 (en) * | 2014-01-23 | 2017-08-15 | NetSuite Inc. | System and methods for management of cloud application extensions |
CN104580342A (en) * | 2014-08-01 | 2015-04-29 | 南京坦道信息科技有限公司 | Extendable and completely self-defined unified interface service platform |
CN107112013B (en) * | 2014-09-14 | 2020-10-23 | 谷歌有限责任公司 | Platform for creating customizable dialog system engines |
US11231826B2 (en) * | 2015-03-08 | 2022-01-25 | Google Llc | Annotations in software applications for invoking dialog system functions |
CN107430517B (en) | 2015-05-27 | 2020-12-18 | 谷歌有限责任公司 | Online marketplace for plug-ins to enhance dialog systems |
-
2016
- 2016-05-27 CN CN201680018569.8A patent/CN107430517B/en active Active
- 2016-05-27 EP EP16800765.6A patent/EP3304288B1/en active Active
- 2016-05-27 US US15/166,292 patent/US10324704B2/en active Active
- 2016-05-27 CN CN202011438705.3A patent/CN112527353A/en active Pending
- 2016-05-27 WO PCT/US2016/034504 patent/WO2016191629A1/en active Application Filing
-
2019
- 2019-06-17 US US16/443,469 patent/US10990377B2/en active Active
-
2021
- 2021-04-26 US US17/240,461 patent/US11861346B2/en active Active
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070201655A1 (en) * | 2006-02-03 | 2007-08-30 | Michael Shenfield | System and method for installing custom services on a component-based application platform |
US20090210702A1 (en) * | 2008-01-29 | 2009-08-20 | Palm, Inc. | Secure application signing |
US20100262956A1 (en) * | 2009-04-10 | 2010-10-14 | Yoshihiro Okada | Software development support apparatus, function extension method and storage medium for storing function extension program |
CN101789938A (en) * | 2010-01-12 | 2010-07-28 | 清华大学 | Agent-based component generation method in reconfigurable software |
US20120185821A1 (en) * | 2010-09-17 | 2012-07-19 | Oracle International Corporation | Pattern-based construction and extension of enterprise applications in a cloud computing environment |
CN102682014A (en) * | 2011-03-14 | 2012-09-19 | 腾讯科技（深圳）有限公司 | Open-type plug-in module management platform implemented on browser and open-type plug-in module management method |
Also Published As
Publication number | Publication date |
---|---|
CN107430517A (en) | 2017-12-01 |
WO2016191629A1 (en) | 2016-12-01 |
US20190369982A1 (en) | 2019-12-05 |
US11861346B2 (en) | 2024-01-02 |
US10990377B2 (en) | 2021-04-27 |
US20160350101A1 (en) | 2016-12-01 |
CN107430517B (en) | 2020-12-18 |
US20210247974A1 (en) | 2021-08-12 |
EP3304288A1 (en) | 2018-04-11 |
EP3304288A4 (en) | 2018-12-26 |
US10324704B2 (en) | 2019-06-18 |
EP3304288B1 (en) | 2023-07-12 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11861346B2 (en) | Online marketplace of plugins for enhancing dialog systems | |
US11769184B2 (en) | Enhancing functionalities of virtual assistants and dialog systems via plugin marketplace | |
US20220221959A1 (en) | Annotations in software applications for invoking dialog system functions | |
US11232265B2 (en) | Context-based natural language processing | |
US10546067B2 (en) | Platform for creating customizable dialog system engines | |
US10733983B2 (en) | Parameter collection and automatic dialog generation in dialog systems | |
US20160260029A1 (en) | Example-driven machine learning scheme for dialog system engines | |
CN106462565B (en) | Text is updated in document | |
US11893993B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US20210358489A1 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11983638B2 (en) | Example-driven machine learning scheme for dialog system engines |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |