US8533825B1 - System, method and computer program product for collusion detection - Google Patents
System, method and computer program product for collusion detection Download PDFInfo
- Publication number
- US8533825B1 US8533825B1 US12/700,053 US70005310A US8533825B1 US 8533825 B1 US8533825 B1 US 8533825B1 US 70005310 A US70005310 A US 70005310A US 8533825 B1 US8533825 B1 US 8533825B1
- Authority
- US
- United States
- Prior art keywords
- entities
- subgroup
- network
- collusion
- nodes
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1408—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic by monitoring network traffic
- H04L63/1425—Traffic logging, e.g. anomaly detection
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2463/00—Additional details relating to network architectures or network communication protocols for network security covered by H04L63/00
- H04L2463/144—Detection or countermeasures against botnets
Definitions
- the present disclosure relates generally to detecting various types of click fraud and, more particularly, to a system, method, and computer program product for modeling detection of various types of click fraud.
- Pay per click advertising is an arrangement in which operators of Web sites, acting as publishers, display clickable links from advertisers in exchange for a charge per click.
- Cost per click (CPC) advertising is a growing part of the online advertising market. Advertisers using the CPC model pay for each ad click. If the ad clicks are fraudulent, they can lose a substantial amount of money.
- Click fraud can occur in various ways and can be broadly classified into two types: 1) publisher fraud and 2) competitor fraud.
- Publisher fraud is when an online publisher or someone associated with the publisher generates as many clicks as possible on a Web site operated by the publisher. This is motivated by the fact that the publisher gets paid each time someone clicks on an ad, whether that click is valid or not.
- Competitor fraud is not motivated by making money on the clicks but rather in making the competitor pay for clicks that are useless to them. Clicking on a competitor's ads can cause their budget to be exhausted so there are no ads left to serve to legitimate users.
- botnets are a group of computers running a computer application—a software robot—controlled and manipulated by the owner or the software source. Botnets can be programmed to run autonomously and automatically to click on online ads. In the case of click farms, humans are enlisted to click on ads.
- Detecting collusion fraud is much more difficult than detecting click fraud by a single entity for several reasons.
- the fraudulent clicks may be spread across dozens or hundreds of sites and may be generated from numerous different IP addresses, making any possible detection computationally expensive and time consuming.
- Embodiments disclosed herein provide sophisticated and scalable online fraud detection techniques that can be easily extended or otherwise adapted to detect various types of collusion fraud.
- One technique disclosed herein focuses on detecting collusion involving various types of publisher fraud and competitor fraud.
- the term “collusion” refers to an organized activity in which groups of visitors click on groups of ads. Examples may include, but are not limited to: botnets, a group of referrers or publishers involved in a scheme, auto-clicking, clicking on competitors' sites, etc.
- collusion detection may involve exploring a large number of subgroups.
- collusion detection may be modeled as solving a clustering problem in networks (or graphs) as well as vector spaces. Modeling various types of click fraud as clustering in networks (or graphs) or clustering in high dimensional vector spaces allows embodiments disclosed herein to be useful in capturing many types of fraud, making this a versatile and practical solution.
- Examples disclosed herein show how to model various types of collusion in the frameworks of a network analysis or a vector space analysis. Specifically, examples disclosed herein show:
- a method for modeling collusion detection may be implemented at a server computer in an enterprise computing environment.
- Embodiments disclosed herein include a system and a computer program product implementing the method.
- the method may comprise receiving historical click data from a client computer connected to the enterprise computing environment over a network.
- the historical click data may comprise a plurality of clicks generated over a period of time and information associated with the plurality of clicks.
- the historical click data may be collected by the client computer.
- the client computer may be a server machine residing at the client site, in the client's computing environment or network.
- the client computer may collect click streams associated with visitors to one or more Web sites owned and/or operated by the client.
- the collected information may be stored in one or more log files.
- the client's one or more log files may contain the historical click data.
- the information associated with the plurality of clicks may comprise visitor Internet Protocol (IP) address information, date and time information, publisher information, referrer information, user-agent information, searched keywords, cookie, and so on.
- IP Internet Protocol
- software running on the server computer may extract entities from the historical click data.
- the extracted entities are utilized to formulate potential collusion among the entities as a network problem, a vector space problem, or a combination thereof.
- formulating potential collusion among the entities as a network problem may comprise constructing network representations of the entities and their relationships, partitioning the network representations into subgroups of nodes to maximize a number of connections between the nodes in each subgroup, and forwarding the subgroups to a network analyzer for producing a first set of potentially colluding entities.
- constructing network representations of the entities and their relationships may further comprise utilizing nodes to represent the entities and utilizing connections between the nodes to represent the relationships between the entities.
- the network representations are constructed in accordance with a set of rules that include definitions of entity relationships with respect to collusion detection.
- the method may further comprise solving the network problem utilizing a metric, a mathematical function, or an algorithm.
- the metric is utilized to determine a density of each subgroup, wherein the density of the subgroup is defined by the number of connections in the subgroup divided by the number of nodes in the subgroup, and wherein the density of the subgroup corresponds to a degree of collusion of the entities represented by the nodes in the subgroup.
- the metric may be utilized to determine a total weight of the connections in each subgroup or a minimum cost associated with producing the subgroup.
- the metric may be utilized to perform sparse cuts or minimum cuts on the network representations of the entities and their relationships. Those skilled in the art can appreciate that other appropriate metrics may also be utilized to solve the network problem.
- formulating potential collusion among the entities as a vector space problem may comprise constructing vector space representations of the entities, grouping the vector space representations with similar anomalous patterns into clusters, and forwarding the clusters to a pattern analyzer for producing a second set of potentially colluding entities.
- constructing vector space representations of the entities may further comprise constructing vectors representing click patterns of the entities.
- the vectors may represent the click patterns of the entities with respect to time, frequency, gaps between clicks, keywords, or a combination thereof.
- the vectors may also represent other patterns of interest associated with the entities.
- the method may further comprise solving the vector space problem utilizing a metric, a mathematical function, or an algorithm.
- the metric may be utilized to minimize a maximum standard deviation, a variance, a radius, or a median of each of the clusters. Those skilled in the art can appreciate that other appropriate metrics may also be utilized to solve the vector space problem.
- formulating potential collusion among the entities as a combination of the network problem and the vector space problem may comprise transforming the subgroups into vector spaces and performing clustering on eigen vectors of the vector spaces.
- Modeling the collusion detection problem as a clustering problem on networks or vector spaces can provide many advantages.
- embodiments disclosed herein can provide generality, flexibility and simplicity to click fraud detection. More specifically, embodiments disclosed herein can address many types of click fraud detection problems in a plug-and-play environment in which several graphs or several sets of vectors, each representing a different piece of information, can be easily constructed simultaneously. The graphs or vectors thus constructed can help with extracting different patterns.
- clustering can provide highly accurate results, minimizing false positives and false negatives. With the clustering methods disclosed herein, various types of click fraud have been accurately detected.
- Clustering in general is known to be computationally difficult to solve.
- the networks corresponding to end users, online publishers, online referrers, etc. have special properties: they are very similar to social networks.
- vector space representations can offer powerful tools to analyze data.
- some embodiments disclosed herein integrate highly accurate, efficient, and scalable heuristics, including heuristics developed for social networks as well as heuristics developed for general clustering methods. For example, dimensionality reduction techniques such as principal component analysis (PCA) and singular value decomposition (SVD) may be utilized to improve the run of clustering.
- PCA principal component analysis
- SVD singular value decomposition
- FIG. 1 depicts a diagrammatic representation of an example click transaction in a network environment
- FIG. 2 depicts a diagrammatic representation of an example network architecture comprising a client and an embodiment of a collusion detection system.
- FIG. 3 depicts a flow diagram illustrating one example embodiment of a collusion detection process
- FIG. 4 depicts a diagrammatic representation of one example embodiment of a collusion detection system
- FIG. 5 depicts a flow diagram illustrating one example embodiment of a network modeling approach for collusion detection
- FIG. 6 depicts a diagrammatic representation of one example of a bipartite graph
- FIG. 7A depicts a diagrammatic representation of an example graph constructed from a bipartite graph
- FIG. 7B depicts a diagrammatic representation of the graph of FIG. 7A after the network analysis of FIG. 5 ;
- FIG. 8 depicts a diagrammatic representation of another example bipartite graph, showing high density subgraphs
- FIG. 9 depicts a flow diagram illustrating one example embodiment of a high dimensional vector space clustering modeling approach for collusion detection.
- FIG. 10 depicts a plot diagram exemplifying one example of two entities having similar frequency patterns in a given period of time.
- Computer-readable storage medium encompasses all types of data storage medium that can be read by a processor. Examples of computer-readable storage media can include random access memories, read-only memories, hard drives, data cartridges, magnetic tapes, floppy diskettes, flash memory drives, optical data storage devices, compact-disc read-only memories, and other appropriate computer memories and data storage devices.
- the terms “comprises,” “comprising,” “includes,” “including,” “has,” “having” or any other variation thereof, are intended to cover a non-exclusive inclusion.
- a process, product, article, or apparatus that comprises a list of elements is not necessarily limited only those elements but may include other elements not expressly listed or inherent to such process, product, article, or apparatus.
- “or” refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).
- any examples or illustrations given herein are not to be regarded in any way as restrictions on, limits to, or express definitions of, any term or terms with which they are utilized. Instead these examples or illustrations are to be regarded as being described with respect to one particular embodiment and as illustrative only. Those of ordinary skill in the art will appreciate that any term or terms with which these examples or illustrations are utilized encompass other embodiments as well as implementations and adaptations thereof which may or may not be given therewith or elsewhere in the specification and all such embodiments are intended to be included within the scope of that term or terms. Language designating such non-limiting examples and illustrations includes, but is not limited to: “for example,” “for instance,” “e.g.,” “in one embodiment,” and the like.
- FIG. 1 is a diagrammatic representation of an example click transaction in a network environment.
- Click transaction 100 may begin with user 101 clicking on online ad 102 via user device 110 at a particular Internet Protocol (IP) address and may end with advertiser 190 paying for that click via ad payment 195 .
- Intermediaries 120 such as referrers 130 , publishers and sub-publishers 140 , and Ad networks 150 may make money from click 105 —by charging a fee and/or sharing ad payment 195 for ad 102 .
- user 101 may visit a popular Internet search portal or Web site that is operated by referrer 130 .
- Ad 102 may be a clickable link displayed on a Web page in the domain owned by referrer 130 .
- Clicking on ad 102 may redirect a browser application running on user device 110 to an URL referencing a Web page published by publisher 140 .
- Publisher 140 may be in Ad network 150 , of which advertiser 190 may also be a member.
- the publisher's Web page residing at the particular URL may contain promotional information on a product mentioned in ad 102 .
- Various techniques exist to track the identity of user 101 For example, in addition to redirecting the user's browser application to a publisher's server, a referrer's server may also send the publisher's server timestamps, cookies, user agents, or other information from user device 110 and/or user 101 .
- vector spaces may be generalized to create signatures of various entities (multidimensional). These signatures can be monitored to see changing trends to detect collusion.
- FIG. 2 depicts a diagrammatic representation of an example network architecture comprising a client and an embodiment of a collusion detection system.
- Architecture 200 may comprise client site 210 and server site 220 .
- Server site 220 may represent a computing environment comprising one or more server machines.
- Each server machine may include a central processing unit (CPU), read-only memory (ROM), random access memory (RAM), hard drive (HD) or non-volatile memory, and input/output (I/O) device(s).
- An I/O device may be a keyboard, monitor, printer, electronic pointing device (e.g., mouse, trackball, etc.), or the like.
- the hardware configuration of this server machine can be representative to other devices and computers alike at server site 220 as well as client site 210 .
- Embodiments disclosed herein may be implemented in suitable software code (i.e., computer instructions translatable by a processor).
- suitable software code i.e., computer instructions translatable by a processor.
- computer instructions and data implementing embodiments disclosed herein may be carried on various types of computer-readable storage media, including volatile and non-volatile computer memories and storage devices. Examples of computer-readable storage media may include ROM, RAM, HD, direct access storage device arrays, magnetic tapes, floppy diskettes, optical storage devices, etc.
- the computer instructions may be written in Java® or any appropriate computer language.
- some or all of the software components may reside on a single server computer or on any combination of separate server computers. Communications between any of the computers described above may be accomplished in various ways, including wired and wireless. As one skilled in the art can appreciate, network communications can include electronic signals, optical signals, radio-frequency signals, and other signals as well as combinations thereof.
- Architecture 200 may comprise a computer program product having one or more computer readable storage media storing computer instructions translatable by a processor to perform an embodiment of fraud detection 400 .
- server site 220 and client site 210 may represent enterprise computing environments owned and operated by different entities.
- company A at server site 220 may provide click fraud detection services to company B at client site 210 .
- these entities may communicate over a network.
- these entities may communicate over a secure channel in a public network such as the Internet.
- fraud detection software 400 running on one or more server machines (referred to herein as fraud detection system 400 ) at server site 220 may receive client file 215 from client site 210 .
- the client may be an online retailer and may collect click stream data from visitors to a Web site own and/or operated by the online retailer.
- client file 215 may be a Web log file or a file containing historical click data that can provide a detailed look at how each visitor got to the Web site, what pages were viewed by the visitor, what products and/or services the visitor clicked on, the date and time of each visit and click, and so on.
- the specific click stream data that can be collected from each click stream may include a variety of entities such as the Internet Protocol (IP) address associated with a visitor (which can be a human or a bot), timestamps indicating the date and time at which each request is made or click is generated, target URL or page and network address of a server associated therewith, user-agent (which shows what browser the visitor was using), query strings (which may include keywords searched by the visitor), and cookie data.
- IP Internet Protocol
- the corresponding click stream would generally contain the referrer page of the search engine and the search words entered by the visitor.
- Click stream data is generally created using a corporate information infrastructure that supports a Web-based enterprise computing environment. A skilled artisan can appreciate what typical click streams may contain and how they are generated and stored. Embodiments disclosed herein may extract one or more types of entities for further processing.
- fraud detection system 400 may receive client file 215 at a scheduled interval.
- client file 215 may contain one million clicks within a given time period of one day, which, on average, may take about half an hour or less to process and generate block list 220 .
- fraud detection system 400 may operate to analyze client file 215 , construct representations of entities contained in client file 215 , perform clustering on the representations thus constructed, identify IP addresses that might indicate potential collusion, and send block list 220 containing the identified IP addresses to client site 210 .
- fraud detection system 400 may operate to apply one or more filters to further optimize block list 220 such as removing known false positives, etc.
- database 280 which is accessible by fraud detection system 400 may maintain a list of verified or legitimate IP addresses. Fraud detection system 400 may utilize that list to validate the identified IP addresses, thus removing false positives and making the final list more accurate.
- FIG. 3 depicts a flow diagram illustrating one example embodiment of collusion detection process 300 and FIG. 4 depicts a diagrammatic representation of one example embodiment of collusion detection system 400 implementing process 300 .
- historical click data may be received or obtained from a client (step 301 ).
- client file 215 may contain historical click data.
- fraud detection system 400 may comprise collusion modeling 401 for processing the historical click data received from client site 210 and generating clusters and/or high density subgraphs (step 303 ).
- collusion modeling 401 may be implemented as a software module or system. Further details on collusion modeling 401 are described below.
- fraud detection system 400 may further comprise heuristics 402 .
- Heuristics 402 may be applied to results from collusion modeling 401 to produce high density subgraphs and/or high dimensional clusters (step 305 ).
- results from heuristics 402 may be provided to collusion modeling 401 in an iterative process.
- collusion modeling 401 and heuristics 402 may operate on a daily basis as part of daily batch processing 420 .
- fraud detection system 400 may further comprise post processor 440 for processing the high density subgraphs and/or high dimensional clusters from daily batch processing 420 .
- post processor 440 may apply post process rules to each cluster and/or group of entities of interest (step 307 ).
- An example of a primary function of post processor 440 would be to produce block lists while minimizing false positives (step 309 ).
- these block lists may be client-specific.
- An example of a post process rule may filter out known legitimate IP addresses.
- fraud detection system 400 may further comprise storage location or database 460 for storing block lists, including block list 220 for client 210 , generated by post processor 440 .
- block list storage location 460 is accessible by real time click scoring engine 410 .
- real time click scoring engine 410 may score each click in real time utilizing information stored on block list storage location 460 .
- fraud detection system 400 may operate to build a framework based on the historical click data to capture the underlying information for collusion detection.
- graphs and/or vector spaces that represent useful pieces of information may be built or otherwise constructed for a given client.
- each of these representations (a graph or a vector space) may be examined and analyzed as an optimization problem (a computational problem).
- collusion detection may be modeled as a clustering problem with certain metrics, heuristics that are highly accurate and highly scalable for large data sets (clusters) may be developed and/or applied to identify IP addresses that indicate potential collusion.
- certain types of patterns in the representations of information pertaining to collusion can be useful to mine.
- a subgroup of referrers possibly hundreds
- a subgroup of users or visitors possibly several thousand
- the general traffic may look very normal
- certain users may visit certain referrers more frequently than other referrers, their time or frequency of visits may be very similar (which is a characteristic of a click farm), and the type of search keywords may also appear to be very similar, etc.
- One approach to detect these patterns is to enumerate all the possible combinations. This approach is computationally infeasible, since there can be millions of visitors and thousands or hundreds of thousands of referrers.
- collusion modeling 401 may utilize a plurality of collusion modeling approaches, including a network modeling approach (see FIGS. 5-8 ) and a high dimensional vector space clustering modeling approach (see FIGS. 9-10 ), to capture the right information that is relevant to detect collusion and/or predict traffic quality (TQ).
- collusion modeling 401 is operable to formulate (or model) various collusion detection and traffic quality prediction problems as network analysis or clustering problems.
- collusion modeling 401 is operable to formulate, for each client, the analysis of groups of entities as graph partitioning or high dimensional vector space clustering problems to capture the groups of entities that look “abnormal.”
- the notion of “abnormality” may be captured by densities, which, in some embodiments, can be defined by the number of edges and/or the number of nodes.
- the notion of “abnormality” may be captured by grouping entities with similar patterns—with respect to time, frequency, gaps between clicks, keywords, etc.
- FIG. 5 depicts a flow diagram illustrating one example embodiment of network modeling approach 500 for collusion detection.
- collusion modeling 401 may first construct various networks of nodes representing relationships among entities (step 501 ). Collusion modeling 401 may then operate to analyze the relationships to partition these nodes into high density subgraphs (step 503 ) and find a subset of nodes that have the highest density (step 505 ).
- nodes correspond to entities and edges correspond to the relationships between pairs of entities.
- weights are attached to these edges to denote the strength of connections.
- This network modeling approach can be easily generalized to any type of entities, allowing various types of relationships be examined to extract useful patterns, examples of which are briefly outlined as follows.
- IPs IP addresses
- a graph representing an IP to IP network may be constructed such that two nodes are connected if they visit the same referrers or use the same keywords, etc.
- FIG. 6 depicts a diagrammatic representation of one example of a bipartite graph.
- nodes in V 1 correspond to visitors (entities of a first type) and nodes in V 2 correspond to referrers (entities of a second type).
- Each edge E between a node in V 1 and a node in V 2 indicates a visitor, represented by the corresponding node in V 1 , visiting a particular referrer, represented by the corresponding node in V 2 .
- the edges are weighted.
- weights can be the number of clicks.
- an edge may connect a visitor node with a referrer node if an IP address associated with the visitor node visits the same referrer at least five times during a certain defined period of time.
- area 606 in bipartite graph 600 shows that of all the nodes in V 1 and V 2 , a certain subset of visitors appear to visit a certain subset of referrers frequently.
- FIG. 7A is a diagrammatic representation of one embodiment of an example graph constructed from a bipartite graph.
- nodes in V correspond to referrers.
- Each edge E between two nodes indicates that the corresponding referrers share a number of visitors.
- the edges can be weighted.
- weights may correspond to a number of visits.
- weights may correspond to a number of common visitors.
- weights may correspond to the amount of ad revenue.
- an edge may connect two nodes if they share at least ten distinct visitors' IP addresses.
- FIG. 7B is a diagrammatic representation of one embodiment of an example graph having anomalous patterns.
- anomalous patterns in graph 700 are represented by subgraphs 702 , 704 , 706 , 708 , each of which may have a significantly higher number of connections than other subgraphs of same size.
- certain connections (edges) and/or nodes may be filtered out as they may be statistically insignificant (represented by dotted lines). For example, IP addresses with low volumes of clicks may be removed from further consideration.
- FIG. 8 depicts a diagrammatic representation of another example bipartite graph, showing high density subgraphs.
- entities 802 may comprise IP addresses and entities 804 may comprise domains.
- Each connection 806 may represent a link or association, perhaps weighted, between an IP address and a domain.
- High density subgraphs may be generated from bipartite graph 800 in a similar manner as described above with reference to FIGS. 7A and 7B .
- a graph may be partitioned into k subgraphs to maximize the number of connections in each subgraph.
- Various metrics can be used to perform partitioning and produce high density subgraphs.
- Example metrics may include: density, total weight, low cost cuts (a set of edges that disconnect the graph into subgraphs), sparse cuts, min-cuts, etc.
- Min-k cut, ratio cuts that aim at partitioning the graph into high density subgraphs.
- K-dense subgraphs find the densest subgraph of k nodes.
- FIG. 9 depicts a flow diagram illustrating one example embodiment of high dimensional vector space clustering modeling approach 900 for collusion detection.
- collusion modeling 401 may construct various types of vectors representing click patterns of entities (step 901 ). Collusion modeling 401 may then operate to analyze these vectors to find similar patterns with respect to time, frequency, gaps between clicks, keywords selected, etc. (step 903 ) and generate clusters by grouping entities with similar patterns (step 905 ). Examples of anomalous patterns may include:
- collusion modeling 401 may construct time series vectors for each referrer and IP combination (in the vector space model).
- the time series vectors represent clicking patterns, so if a subset of these entities have similar time series, it may represent referrer and IP collusion. Collusion modeling 401 may then formulate this as a high dimensional clustering problem.
- a vector is an array of real numbers—a signature of some sort.
- the length of the array is the dimensionality of the vector.
- each vector can be thought of as a point in some high dimensional space.
- similarity of two vectors can be measured using distance norms, and L 1 , L 2 and L_inf are the most useful norms.
- the number of dimensions is huge.
- vector spaces may be a more suitable representation than graphs, since they preserve more information. For example, in click farms, humans are employed to click on the ads. Assuming certain types of click farms exhibit similar clicking behavior, this type of fraud may be detected by analyzing time patterns associated with the clicks.
- T denote the time period of the data.
- T is divided into buckets Bi, representing a time slot.
- buckets Bi For each visitor (or referrer or publisher), measure the volume of traffic coming into Bi. Thus, for each IP there corresponds a time series vector of high dimensions.
- the probability of a group of IP addresses having very similar clicking patterns across a given time period is usually very small and is an indication of anomalous activity. Detection of groups of IP addresses that have similar clicking patterns in the time domain can be modeled as a clustering problem. Many well known clustering methods can then be used to identify “interesting” IP addresses.
- An example method for detecting visitors or referrers that have similar anomalous patterns may comprise dividing a time period into time slots (T). This time period may represent a defined length of time during which network traffic is monitored by a system implementing an embodiment disclosed herein.
- a frequency analysis may identify anomalous frequency patterns even if they are shifted in time. For example, bots may start at different times but may have very similar frequency of clicking in a given period of time. In some embodiments, this type of fraud may be detected by analyzing frequency patterns associated with the clicks.
- FIG. 10 depicts a plot diagram exemplifying one example of two entities having similar frequency patterns in a given period of time.
- frequency series 1002 and 1004 each corresponding to a particular IP address, share a number of frequency slots and have very similar frequency patterns, indicating potential collusion.
- the frequencies of clicks from individual IP addresses may be obtained by performing Fast Fourier Transformation on each time slot T. Thresholds may be used to filter out some frequencies.
- post processor 440 may remove from consideration IP addresses with fewer than five clicks in a given period of time. This step may be optional.
- a subgraph containing a large number of connections represents IP addresses with very similar frequency patterns may be identified as an indication of potential collusion.
- a bot or human may change its click times—shifting the click times by some amount.
- the frequency of clicking may not change much, if it is the same bot or human.
- the time domain vectors can be transformed into frequency domain vectors and clustering can be performed on them. Again, the probability of a group of IP addresses having very similar frequency patterns is very low—in fact, it reduces as the number of dimensions increases—and is an indication of anomalous activity.
- gaps between consecutive clicks can be divided into gap slots and analyzed as described above. Similar to time buckets, vectors of gaps can also be constructed. First, find the maximum possible gap between clicks and divide a given time period into buckets. For each IP address and for each bucket, measure the volume of clicks. This results in a multidimensional vector for each IP address. Perform clustering on these vectors to find IP addresses that have similar gap vectors. As a specific example, for each visitor at a particular IP address (or referrer or publisher), divide a given time period of, say, two weeks, into time buckets of, say, 1 hour. This results in a 128 dimensional vector for each IP address.
- Suitable clustering methods may include k-means (minimizes the maximum standard deviation of each cluster), k-center (minimizes the maximum radius of each cluster), k-median, and different metrics of hierarchical (single linkage, double linkage, etc).
- heuristics developed for social networks as well as heuristics developed for general clustering methods. These heuristics work well in practice. Examples of suitable heuristics may include:
- PCA principal component analysis
- collusion modeling 401 can provide a powerful tool that can generate various types of models relevant for detecting collusion.
- collusion modeling disclosed herein are not limited to the aforementioned models. It is designed in a flexible and plug-and-play environment and can be easily updated to include new models to capture the new types of collusion. Furthermore, it can be tuned (or parameterized for each client).
- collusion modeling 401 may comprise a client specific configuration file containing various features which may include (1) types of networks; (2) types of vectors; (3) tuning parameters; and (4) formulations of network analysis and/or vector analysis problems.
Abstract
Description
-
- 1) How to construct representations that preserve important information relevant to click fraud: (i) graphs or networks and (ii) vectors (arrays of real numbers) that capture the right information necessary for various types of fraud.
- 2) How to model the detection of collusion in publisher fraud and competitor fraud as clustering problems, including the detection of botnets or click farms.
- 3) Type of clustering methods that are highly efficient and scalable for detecting collusion.
-
- Click activity times (usually exhibited by humans);
- Frequency of clicks in a given period of time (usually exhibited by bots); and
- The gaps between consecutive clicks (usually exhibited by humans).
-
- 1. Combinatorial approaches such as greedy approaches.
- 2. Linear programming approaches.
- 3. Spectral methods that convert the graphs into vector space models. First, the Laplacian of the graph is constructed. Then, the eigen vectors of these Laplacians are determined, one eigen vector corresponding to each node. Clustering on these Eigen vectors is a good approximation of clustering on the corresponding graphs—since it is a relaxation of the integer quadratic program. Various well-known clustering algorithms can be applied on these eigen vectors where for each node there corresponds an eigen vector using the Laplacian of the graph.
- 4. Singular value decomposition (SVD) may be utilized to significantly reduce the data size via low rank approximation. More specifically, SVD also converts a bipartite graph into a vector space model. Consider a bipartite graph G=(V1, V2, E), where V1 corresponds to referrers and V2 corresponds to visitors with distinct IP addresses. In this case, there are no edges between any pair of referrers or any pair of IP addresses. The SVD technique is used in latent semantic indexing (LSI) of document classification in which two documents are considered similar if they share a lot of keywords. Here, the bipartite graph between documents and terms is decomposed into three matrices, D, T and S, where D is the document concept matrix, T is the term concept matrix, and S is a diagonal matrix of singular values. Clustering on D provides document classification and clustering on T provides term classification. Utilizing this technique, in some embodiments, two referrers are considered similar if they share a lot of visitors (IP addresses). Similarly, two IP addresses are similar if they share a lot of referrers. Referrer and visitor matrices can then be obtained by decomposing the bipartite graph between them. Using any standard k-means, k-center clustering methods on these matrices can generate clusters of highly related items. Further analysis on these clusters can be done to detect potential collusions.
Claims (21)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/700,053 US8533825B1 (en) | 2010-02-04 | 2010-02-04 | System, method and computer program product for collusion detection |
US12/797,904 US8561184B1 (en) | 2010-02-04 | 2010-06-10 | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/700,053 US8533825B1 (en) | 2010-02-04 | 2010-02-04 | System, method and computer program product for collusion detection |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/797,904 Continuation-In-Part US8561184B1 (en) | 2010-02-04 | 2010-06-10 | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction |
Publications (1)
Publication Number | Publication Date |
---|---|
US8533825B1 true US8533825B1 (en) | 2013-09-10 |
Family
ID=49084293
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/700,053 Active 2031-01-01 US8533825B1 (en) | 2010-02-04 | 2010-02-04 | System, method and computer program product for collusion detection |
Country Status (1)
Country | Link |
---|---|
US (1) | US8533825B1 (en) |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160292258A1 (en) * | 2013-11-22 | 2016-10-06 | Beijing Qihoo Technology Company Limited | Method and apparatus for filtering out low-frequency click, computer program, and computer readable medium |
CN106022834A (en) * | 2016-05-24 | 2016-10-12 | 腾讯科技（深圳）有限公司 | Advertisement against cheating method and device |
CN106445935A (en) * | 2015-08-05 | 2017-02-22 | 腾讯科技（深圳）有限公司 | Misjudgment processing method and device of click data |
CN106789844A (en) * | 2015-11-23 | 2017-05-31 | 阿里巴巴集团控股有限公司 | A kind of malicious user recognition methods and device |
US20170169442A1 (en) * | 2015-12-11 | 2017-06-15 | Industrial Technology Research Institute | Data visualization method and data visualization device |
US20170221010A1 (en) * | 2016-08-17 | 2017-08-03 | Stella.Ai, Inc. | System and method for data mining messaging systems to discover references to companies with job opportunities matching a candidate |
US9882927B1 (en) * | 2014-06-30 | 2018-01-30 | EMC IP Holding Company LLC | Periodicity detection |
CN107845002A (en) * | 2016-09-18 | 2018-03-27 | 法乐第(北京)网络科技有限公司 | A kind of car operation monitoring method and device |
CN108259181A (en) * | 2017-11-28 | 2018-07-06 | 中国平安财产保险股份有限公司 | The single detection method of brush and terminal device |
CN108428132A (en) * | 2018-03-15 | 2018-08-21 | 阿里巴巴集团控股有限公司 | Fraudulent trading recognition methods, device, server and storage medium |
US10068188B2 (en) | 2016-06-29 | 2018-09-04 | Visual Iq, Inc. | Machine learning techniques that identify attribution of small signal stimulus in noisy response channels |
CN109165816A (en) * | 2018-07-27 | 2019-01-08 | 重庆小雨点小额贷款有限公司 | A kind of business approval method, server, client and storage medium |
CN109325814A (en) * | 2017-07-31 | 2019-02-12 | 上海诺悦智能科技有限公司 | A method of for finding suspicious trade network |
US20190057009A1 (en) * | 2017-08-15 | 2019-02-21 | Cognant Llc | System and method for detecting fraudulent activity on client devices |
US20190205926A1 (en) * | 2017-12-29 | 2019-07-04 | Oath Inc. | Method and system for detecting fraudulent user-content provider pairs |
CN110795723A (en) * | 2019-11-08 | 2020-02-14 | 浙江执御信息技术有限公司 | Method for judging whether to brush list |
CN111199415A (en) * | 2018-11-20 | 2020-05-26 | 北京京东尚科信息技术有限公司 | Model training method, device, equipment and medium for identifying effectiveness of click advertisements |
US10679260B2 (en) | 2016-04-19 | 2020-06-09 | Visual Iq, Inc. | Cross-device message touchpoint attribution |
US10769636B2 (en) | 2018-11-29 | 2020-09-08 | International Business Machines Corporation | Cognitive fraud detection through variance-based network analysis |
US10789357B2 (en) | 2017-09-29 | 2020-09-29 | Cognant Llc | System and method for detecting fraudulent software installation activity |
CN111783808A (en) * | 2019-07-23 | 2020-10-16 | 北京沃东天骏信息技术有限公司 | Method and apparatus for generating information |
CN112437022A (en) * | 2020-11-11 | 2021-03-02 | 中国科学技术大学先进技术研究院 | Network flow identification method, equipment and computer storage medium |
CN112488765A (en) * | 2020-12-08 | 2021-03-12 | 深圳市欢太科技有限公司 | Advertisement anti-cheating method, advertisement anti-cheating device, electronic equipment and storage medium |
US11108795B2 (en) | 2018-05-25 | 2021-08-31 | At&T Intellectual Property I, L.P. | Intrusion detection using robust singular value decomposition |
US20210295379A1 (en) * | 2020-03-17 | 2021-09-23 | Com Olho It Private Limited | System and method for detecting fraudulent advertisement traffic |
US11288684B2 (en) | 2013-12-31 | 2022-03-29 | The Nielsen Company (Us), Llc | Performing interactive updates to a precalculated cross-channel predictive model |
US11328301B2 (en) * | 2020-03-22 | 2022-05-10 | Actimize Ltd. | Online incremental machine learning clustering in anti-money laundering detection |
US11671436B1 (en) * | 2019-12-23 | 2023-06-06 | Hrl Laboratories, Llc | Computational framework for modeling adversarial activities |
US11695788B1 (en) | 2019-12-06 | 2023-07-04 | Hrl Laboratories, Llc | Filtering strategies for subgraph matching on noisy multiplex networks |
US11973779B2 (en) | 2021-05-11 | 2024-04-30 | Bank Of America Corporation | Detecting data exfiltration and compromised user accounts in a computing network |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6381628B1 (en) * | 1998-10-02 | 2002-04-30 | Microsoft Corporation | Summarized application profiling and quick network profiling |
US6714975B1 (en) * | 1997-03-31 | 2004-03-30 | International Business Machines Corporation | Method for targeted advertising on the web based on accumulated self-learning data, clustering users and semantic node graph techniques |
US20060212350A1 (en) | 2005-03-07 | 2006-09-21 | Ellis John R | Enhanced online advertising system |
US20080243637A1 (en) * | 2007-03-30 | 2008-10-02 | Chan James D | Recommendation system with cluster-based filtering of recommendations |
US20080270154A1 (en) | 2007-04-25 | 2008-10-30 | Boris Klots | System for scoring click traffic |
US20090157417A1 (en) | 2007-12-18 | 2009-06-18 | Changingworlds Ltd. | Systems and methods for detecting click fraud |
US7657626B1 (en) * | 2006-09-19 | 2010-02-02 | Enquisite, Inc. | Click fraud detection |
US8015190B1 (en) | 2007-03-30 | 2011-09-06 | Google Inc. | Similarity-based searching |
-
2010
- 2010-02-04 US US12/700,053 patent/US8533825B1/en active Active
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6714975B1 (en) * | 1997-03-31 | 2004-03-30 | International Business Machines Corporation | Method for targeted advertising on the web based on accumulated self-learning data, clustering users and semantic node graph techniques |
US6381628B1 (en) * | 1998-10-02 | 2002-04-30 | Microsoft Corporation | Summarized application profiling and quick network profiling |
US20060212350A1 (en) | 2005-03-07 | 2006-09-21 | Ellis John R | Enhanced online advertising system |
US7657626B1 (en) * | 2006-09-19 | 2010-02-02 | Enquisite, Inc. | Click fraud detection |
US20080243637A1 (en) * | 2007-03-30 | 2008-10-02 | Chan James D | Recommendation system with cluster-based filtering of recommendations |
US8015190B1 (en) | 2007-03-30 | 2011-09-06 | Google Inc. | Similarity-based searching |
US8190592B1 (en) | 2007-03-30 | 2012-05-29 | Google Inc. | Similarity-based searching |
US20080270154A1 (en) | 2007-04-25 | 2008-10-30 | Boris Klots | System for scoring click traffic |
US20090157417A1 (en) | 2007-12-18 | 2009-06-18 | Changingworlds Ltd. | Systems and methods for detecting click fraud |
Non-Patent Citations (8)
Title |
---|
Abramson, Craig and Kistler, Kenny, "Managing Click-Stream Data," Syncsort Incorporated, Woodcliff Lake, NJ, printed on Jan. 14, 2010 from URL://http://www.syncsort.com, 16 pgs. |
Conrad et al.-University of Heinrich-Heine Pub 2008-Partitioning Massive Graphs for Content Oriented Social Network Analysis. * |
Mehmed et al. IEEE Pub 2008-Improving Click Fraud Detection by Real Time Data Fusion. * |
Mehmed et al. Pub 2008-Improving Click Fraud Detection by Real Time Data Fusion Mehmed et al.-University of Louisville Publication 2005-Collaborative Click Fraud Detection and Prevention System CCFDP. * |
Metwally, Ahmed et al., on Hit Inflation Techniques and Detection in Streams of Web Advertising Networks, 27th Int'l Conf. on Distributed Computing Systems, 2007, IEEE 0-7695-2837-3, 2007, 8 pgs. |
Metwally, Ahmed et al., Using Association Rules for Fraud Detection in Web Advertising Networks, University of California, Santa Barbara, CA, IEEE, 2007, 14 pgs. |
Notice of Allowance for U.S. Appl. No. 12/797,904, mailed Jul. 10, 2013, 6 pgs. |
Office Action for U.S. Appl. No. 12/797,904, mailed Mar. 13, 2013, 14 pgs. |
Cited By (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160292258A1 (en) * | 2013-11-22 | 2016-10-06 | Beijing Qihoo Technology Company Limited | Method and apparatus for filtering out low-frequency click, computer program, and computer readable medium |
US11288684B2 (en) | 2013-12-31 | 2022-03-29 | The Nielsen Company (Us), Llc | Performing interactive updates to a precalculated cross-channel predictive model |
US9882927B1 (en) * | 2014-06-30 | 2018-01-30 | EMC IP Holding Company LLC | Periodicity detection |
CN106445935A (en) * | 2015-08-05 | 2017-02-22 | 腾讯科技（深圳）有限公司 | Misjudgment processing method and device of click data |
CN106789844B (en) * | 2015-11-23 | 2020-06-16 | 阿里巴巴集团控股有限公司 | Malicious user identification method and device |
CN106789844A (en) * | 2015-11-23 | 2017-05-31 | 阿里巴巴集团控股有限公司 | A kind of malicious user recognition methods and device |
US20170169442A1 (en) * | 2015-12-11 | 2017-06-15 | Industrial Technology Research Institute | Data visualization method and data visualization device |
US9836757B2 (en) * | 2015-12-11 | 2017-12-05 | Industrial Technology Research Institute | Data visualization method and data visualization device |
US10679260B2 (en) | 2016-04-19 | 2020-06-09 | Visual Iq, Inc. | Cross-device message touchpoint attribution |
US10929879B2 (en) * | 2016-05-24 | 2021-02-23 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for identification of fraudulent click activity |
US20180253755A1 (en) * | 2016-05-24 | 2018-09-06 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for identification of fraudulent click activity |
JP2018536956A (en) * | 2016-05-24 | 2018-12-13 | テンセント・テクノロジー・（シェンジェン）・カンパニー・リミテッド | Method, device and storage medium for preventing illegal acts related to advertisement |
CN106022834A (en) * | 2016-05-24 | 2016-10-12 | 腾讯科技（深圳）有限公司 | Advertisement against cheating method and device |
US10068188B2 (en) | 2016-06-29 | 2018-09-04 | Visual Iq, Inc. | Machine learning techniques that identify attribution of small signal stimulus in noisy response channels |
US20170221009A1 (en) * | 2016-08-17 | 2017-08-03 | Stella.Ai, Inc. | System and method for data mining messaging systems of a candidate to discover references to companies for employment |
US20170221010A1 (en) * | 2016-08-17 | 2017-08-03 | Stella.Ai, Inc. | System and method for data mining messaging systems to discover references to companies with job opportunities matching a candidate |
CN107845002A (en) * | 2016-09-18 | 2018-03-27 | 法乐第(北京)网络科技有限公司 | A kind of car operation monitoring method and device |
CN109325814A (en) * | 2017-07-31 | 2019-02-12 | 上海诺悦智能科技有限公司 | A method of for finding suspicious trade network |
US20190057009A1 (en) * | 2017-08-15 | 2019-02-21 | Cognant Llc | System and method for detecting fraudulent activity on client devices |
US11360875B2 (en) * | 2017-08-15 | 2022-06-14 | Cognant Llc | System and method for detecting fraudulent activity on client devices |
US10789357B2 (en) | 2017-09-29 | 2020-09-29 | Cognant Llc | System and method for detecting fraudulent software installation activity |
CN108259181A (en) * | 2017-11-28 | 2018-07-06 | 中国平安财产保险股份有限公司 | The single detection method of brush and terminal device |
CN108259181B (en) * | 2017-11-28 | 2020-12-11 | 中国平安财产保险股份有限公司 | Bill brushing detection method and terminal equipment |
US20190205926A1 (en) * | 2017-12-29 | 2019-07-04 | Oath Inc. | Method and system for detecting fraudulent user-content provider pairs |
US11276068B2 (en) * | 2018-03-15 | 2022-03-15 | Advanced New Technologies Co., Ltd. | Fraudulent transaction identification method and apparatus, server, and storage medium |
CN108428132B (en) * | 2018-03-15 | 2020-12-29 | 创新先进技术有限公司 | Fraud transaction identification method, device, server and storage medium |
CN108428132A (en) * | 2018-03-15 | 2018-08-21 | 阿里巴巴集团控股有限公司 | Fraudulent trading recognition methods, device, server and storage medium |
US20190287114A1 (en) * | 2018-03-15 | 2019-09-19 | Alibaba Group Holding Limited | Fraudulent transaction identification method and apparatus, server, and storage medium |
US10970719B2 (en) * | 2018-03-15 | 2021-04-06 | Advanced New Technologies Co., Ltd. | Fraudulent transaction identification method and apparatus, server, and storage medium |
US11108795B2 (en) | 2018-05-25 | 2021-08-31 | At&T Intellectual Property I, L.P. | Intrusion detection using robust singular value decomposition |
CN109165816A (en) * | 2018-07-27 | 2019-01-08 | 重庆小雨点小额贷款有限公司 | A kind of business approval method, server, client and storage medium |
CN111199415A (en) * | 2018-11-20 | 2020-05-26 | 北京京东尚科信息技术有限公司 | Model training method, device, equipment and medium for identifying effectiveness of click advertisements |
US10769636B2 (en) | 2018-11-29 | 2020-09-08 | International Business Machines Corporation | Cognitive fraud detection through variance-based network analysis |
CN111783808A (en) * | 2019-07-23 | 2020-10-16 | 北京沃东天骏信息技术有限公司 | Method and apparatus for generating information |
CN110795723A (en) * | 2019-11-08 | 2020-02-14 | 浙江执御信息技术有限公司 | Method for judging whether to brush list |
US11695788B1 (en) | 2019-12-06 | 2023-07-04 | Hrl Laboratories, Llc | Filtering strategies for subgraph matching on noisy multiplex networks |
US11671436B1 (en) * | 2019-12-23 | 2023-06-06 | Hrl Laboratories, Llc | Computational framework for modeling adversarial activities |
US20210295379A1 (en) * | 2020-03-17 | 2021-09-23 | Com Olho It Private Limited | System and method for detecting fraudulent advertisement traffic |
US11328301B2 (en) * | 2020-03-22 | 2022-05-10 | Actimize Ltd. | Online incremental machine learning clustering in anti-money laundering detection |
CN112437022A (en) * | 2020-11-11 | 2021-03-02 | 中国科学技术大学先进技术研究院 | Network flow identification method, equipment and computer storage medium |
CN112437022B (en) * | 2020-11-11 | 2023-05-19 | 中国科学技术大学先进技术研究院 | Network traffic identification method, device and computer storage medium |
CN112488765A (en) * | 2020-12-08 | 2021-03-12 | 深圳市欢太科技有限公司 | Advertisement anti-cheating method, advertisement anti-cheating device, electronic equipment and storage medium |
US11973779B2 (en) | 2021-05-11 | 2024-04-30 | Bank Of America Corporation | Detecting data exfiltration and compromised user accounts in a computing network |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8533825B1 (en) | System, method and computer program product for collusion detection | |
US8561184B1 (en) | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction | |
US20160065534A1 (en) | System for correlation of domain names | |
Liu et al. | A method for the detection of fake reviews based on temporal features of reviews and comments | |
Olmezogullari et al. | Pattern2Vec: Representation of clickstream data sequences for learning user navigational behavior | |
US20160350294A1 (en) | Method and system for peer detection | |
Dymora et al. | Anomaly detection in IoT communication network based on spectral analysis and Hurst exponent | |
Aliakbary et al. | Distance metric learning for complex networks: Towards size-independent comparison of network structures | |
Jalali et al. | Social network sampling using spanning trees | |
Jung et al. | Analyzing future communities in growing citation networks | |
Zhan et al. | Identification of top-K influential communities in big networks | |
Dang et al. | Detecting cooperative and organized spammer groups in micro-blogging community | |
Parau et al. | Opinion leader detection | |
Khatoon et al. | An efficient method to detect communities in social networks using DBSCAN algorithm | |
Hewapathirana | Change detection in dynamic attributed networks | |
Marchal et al. | Detecting organized eCommerce fraud using scalable categorical clustering | |
Abd Al-Azim et al. | Influence propagation in social networks: Interest-based community ranking model | |
Bhuvaneswari et al. | User community detection from web server log using between user similarity metric | |
Wang et al. | Attractive community detection in academic social network | |
Pandey et al. | Association rules network: Definition and applications | |
Meena et al. | A survey on community detection algorithm and its applications | |
Metwally et al. | Scalable community discovery from multi-faceted graphs | |
Ding et al. | From explanation to action: An end-to-end human-in-the-loop framework for anomaly reasoning and management | |
Palsetia et al. | Excavating social circles via user interests | |
Fang et al. | Active exploration: simultaneous sampling and labeling for large graphs |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: ADOMETRY, INC., TEXASFree format text: CHANGE OF NAME;ASSIGNOR:CLICK FORENSICS, INC.;REEL/FRAME:026296/0517Effective date: 20110228 |
|
AS | Assignment |
Owner name: CLICK FORENSICS, INC., TEXASFree format text: PROPRIETARY INFORMATION AND INVENTIONS AGREEMENT;ASSIGNOR:DODDI, SRINIVAS RAO;REEL/FRAME:031161/0051Effective date: 20090306 |
|
AS | Assignment |
Owner name: ADOMETRY, INC., TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MARSA, ROBERT LEE;REEL/FRAME:031201/0011Effective date: 20130618 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ADOMETRY, INC.;REEL/FRAME:033947/0033Effective date: 20141007 |
|
CC | Certificate of correction | ||
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |